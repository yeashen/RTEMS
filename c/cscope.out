cscope 15 $HOME/Test/rtems/rtems/c -q 0000025801 0002578708
	@src/ada-tests/mptests/mp01/config_base.h

16 
	#CONFIGURE_APPLICATION_NEEDS_CONSOLE_DRIVER


	)

17 
	#CONFIGURE_APPLICATION_NEEDS_CLOCK_DRIVER


	)

19 
	#CONFIGURE_POSIX_INIT_THREAD_TABLE


	)

21 
	#CONFIGURE_MAXIMUM_TASKS
 2

	)

23 
	#CONFIGURE_MAXIMUM_POSIX_THREADS
 10

	)

24 
	#CONFIGURE_MAXIMUM_POSIX_KEYS
 10

	)

25 
	#CONFIGURE_MAXIMUM_POSIX_MUTEXES
 20

	)

26 
	#CONFIGURE_MAXIMUM_POSIX_CONDITION_VARIABLES
 10

	)

28 
	~<¹ems/cÚfdefs.h
>

	@src/ada-tests/mptests/mp01/node1/config.h

16 
	#CONFIGURE_MP_APPLICATION


	)

17 
	#CONFIGURE_MP_NODE_NUMBER
 1

	)

19 
	~"../cÚfig_ba£.h
"

	@src/ada-tests/mptests/mp01/node2/config.h

16 
	#CONFIGURE_MP_APPLICATION


	)

17 
	#CONFIGURE_MP_NODE_NUMBER
 2

	)

19 
	~"../cÚfig_ba£.h
"

	@src/ada-tests/mptests/mp02/config_base.h

16 
	#CONFIGURE_APPLICATION_NEEDS_CONSOLE_DRIVER


	)

17 
	#CONFIGURE_APPLICATION_NEEDS_CLOCK_DRIVER


	)

19 
	#CONFIGURE_POSIX_INIT_THREAD_TABLE


	)

21 
	#CONFIGURE_MAXIMUM_TASKS
 2

	)

23 
	#CONFIGURE_MAXIMUM_POSIX_THREADS
 10

	)

24 
	#CONFIGURE_MAXIMUM_POSIX_KEYS
 10

	)

25 
	#CONFIGURE_MAXIMUM_POSIX_MUTEXES
 20

	)

26 
	#CONFIGURE_MAXIMUM_POSIX_CONDITION_VARIABLES
 10

	)

28 
	~<¹ems/cÚfdefs.h
>

	@src/ada-tests/mptests/mp02/node1/config.h

16 
	#CONFIGURE_MP_APPLICATION


	)

17 
	#CONFIGURE_MP_NODE_NUMBER
 1

	)

19 
	~"../cÚfig_ba£.h
"

	@src/ada-tests/mptests/mp02/node2/config.h

16 
	#CONFIGURE_MP_APPLICATION


	)

17 
	#CONFIGURE_MP_NODE_NUMBER
 2

	)

19 
	~"../cÚfig_ba£.h
"

	@src/ada-tests/mptests/mp03/config_base.h

16 
	#CONFIGURE_APPLICATION_NEEDS_CONSOLE_DRIVER


	)

17 
	#CONFIGURE_APPLICATION_NEEDS_CLOCK_DRIVER


	)

19 
	#CONFIGURE_POSIX_INIT_THREAD_TABLE


	)

21 
	#CONFIGURE_MAXIMUM_TASKS
 2

	)

23 
	#CONFIGURE_MAXIMUM_POSIX_THREADS
 10

	)

24 
	#CONFIGURE_MAXIMUM_POSIX_KEYS
 10

	)

25 
	#CONFIGURE_MAXIMUM_POSIX_MUTEXES
 20

	)

26 
	#CONFIGURE_MAXIMUM_POSIX_CONDITION_VARIABLES
 10

	)

28 
	~<¹ems/cÚfdefs.h
>

	@src/ada-tests/mptests/mp03/node1/config.h

16 
	#CONFIGURE_MP_APPLICATION


	)

17 
	#CONFIGURE_MP_NODE_NUMBER
 1

	)

19 
	~"../cÚfig_ba£.h
"

	@src/ada-tests/mptests/mp03/node2/config.h

16 
	#CONFIGURE_MP_APPLICATION


	)

17 
	#CONFIGURE_MP_NODE_NUMBER
 2

	)

19 
	~"../cÚfig_ba£.h
"

	@src/ada-tests/mptests/mp04/config_base.h

16 
	#CONFIGURE_APPLICATION_NEEDS_CONSOLE_DRIVER


	)

17 
	#CONFIGURE_APPLICATION_NEEDS_CLOCK_DRIVER


	)

19 
	#CONFIGURE_POSIX_INIT_THREAD_TABLE


	)

21 
	#CONFIGURE_MAXIMUM_TASKS
 2

	)

23 
	#CONFIGURE_MAXIMUM_POSIX_THREADS
 10

	)

24 
	#CONFIGURE_MAXIMUM_POSIX_KEYS
 10

	)

25 
	#CONFIGURE_MAXIMUM_POSIX_MUTEXES
 20

	)

26 
	#CONFIGURE_MAXIMUM_POSIX_CONDITION_VARIABLES
 10

	)

28 
	~<¹ems/cÚfdefs.h
>

	@src/ada-tests/mptests/mp04/node1/config.h

16 
	#CONFIGURE_MP_APPLICATION


	)

17 
	#CONFIGURE_MP_NODE_NUMBER
 1

	)

19 
	~"../cÚfig_ba£.h
"

	@src/ada-tests/mptests/mp04/node2/config.h

16 
	#CONFIGURE_MP_APPLICATION


	)

17 
	#CONFIGURE_MP_NODE_NUMBER
 2

	)

19 
	~"../cÚfig_ba£.h
"

	@src/ada-tests/mptests/mp05/config_base.h

16 
	#CONFIGURE_APPLICATION_NEEDS_CONSOLE_DRIVER


	)

17 
	#CONFIGURE_APPLICATION_NEEDS_CLOCK_DRIVER


	)

19 
	#CONFIGURE_POSIX_INIT_THREAD_TABLE


	)

21 
	#CONFIGURE_MAXIMUM_TASKS
 2

	)

23 
	#CONFIGURE_MAXIMUM_POSIX_THREADS
 10

	)

24 
	#CONFIGURE_MAXIMUM_POSIX_KEYS
 10

	)

25 
	#CONFIGURE_MAXIMUM_POSIX_MUTEXES
 20

	)

26 
	#CONFIGURE_MAXIMUM_POSIX_CONDITION_VARIABLES
 10

	)

28 
	~<¹ems/cÚfdefs.h
>

	@src/ada-tests/mptests/mp05/node1/config.h

16 
	#CONFIGURE_MP_APPLICATION


	)

17 
	#CONFIGURE_MP_NODE_NUMBER
 1

	)

19 
	~"../cÚfig_ba£.h
"

	@src/ada-tests/mptests/mp05/node2/config.h

16 
	#CONFIGURE_MP_APPLICATION


	)

17 
	#CONFIGURE_MP_NODE_NUMBER
 2

	)

19 
	~"../cÚfig_ba£.h
"

	@src/ada-tests/mptests/mp06/config_base.h

16 
	#CONFIGURE_APPLICATION_NEEDS_CONSOLE_DRIVER


	)

17 
	#CONFIGURE_APPLICATION_NEEDS_CLOCK_DRIVER


	)

19 
	#CONFIGURE_POSIX_INIT_THREAD_TABLE


	)

21 
	#CONFIGURE_MAXIMUM_TASKS
 2

	)

23 
	#CONFIGURE_MAXIMUM_POSIX_THREADS
 10

	)

24 
	#CONFIGURE_MAXIMUM_POSIX_KEYS
 10

	)

25 
	#CONFIGURE_MAXIMUM_POSIX_MUTEXES
 20

	)

26 
	#CONFIGURE_MAXIMUM_POSIX_CONDITION_VARIABLES
 10

	)

28 
	~<¹ems/cÚfdefs.h
>

	@src/ada-tests/mptests/mp06/node1/config.h

16 
	#CONFIGURE_MP_APPLICATION


	)

17 
	#CONFIGURE_MP_NODE_NUMBER
 1

	)

19 
	~"../cÚfig_ba£.h
"

	@src/ada-tests/mptests/mp06/node2/config.h

16 
	#CONFIGURE_MP_APPLICATION


	)

17 
	#CONFIGURE_MP_NODE_NUMBER
 2

	)

19 
	~"../cÚfig_ba£.h
"

	@src/ada-tests/mptests/mp07/config_base.h

16 
	#CONFIGURE_APPLICATION_NEEDS_CONSOLE_DRIVER


	)

17 
	#CONFIGURE_APPLICATION_NEEDS_CLOCK_DRIVER


	)

19 
	#CONFIGURE_POSIX_INIT_THREAD_TABLE


	)

21 
	#CONFIGURE_MAXIMUM_TASKS
 2

	)

23 
	#CONFIGURE_MAXIMUM_POSIX_THREADS
 10

	)

24 
	#CONFIGURE_MAXIMUM_POSIX_KEYS
 10

	)

25 
	#CONFIGURE_MAXIMUM_POSIX_MUTEXES
 20

	)

26 
	#CONFIGURE_MAXIMUM_POSIX_CONDITION_VARIABLES
 10

	)

28 
	~<¹ems/cÚfdefs.h
>

	@src/ada-tests/mptests/mp07/node1/config.h

16 
	#CONFIGURE_MP_APPLICATION


	)

17 
	#CONFIGURE_MP_NODE_NUMBER
 1

	)

19 
	~"../cÚfig_ba£.h
"

	@src/ada-tests/mptests/mp07/node2/config.h

16 
	#CONFIGURE_MP_APPLICATION


	)

17 
	#CONFIGURE_MP_NODE_NUMBER
 2

	)

19 
	~"../cÚfig_ba£.h
"

	@src/ada-tests/mptests/mp08/config_base.h

16 
	#CONFIGURE_APPLICATION_NEEDS_CONSOLE_DRIVER


	)

17 
	#CONFIGURE_APPLICATION_NEEDS_CLOCK_DRIVER


	)

19 
	#CONFIGURE_POSIX_INIT_THREAD_TABLE


	)

21 
	#CONFIGURE_MAXIMUM_TASKS
 2

	)

23 
	#CONFIGURE_MAXIMUM_POSIX_THREADS
 10

	)

24 
	#CONFIGURE_MAXIMUM_POSIX_KEYS
 10

	)

25 
	#CONFIGURE_MAXIMUM_POSIX_MUTEXES
 20

	)

26 
	#CONFIGURE_MAXIMUM_POSIX_CONDITION_VARIABLES
 10

	)

28 
	~<¹ems/cÚfdefs.h
>

	@src/ada-tests/mptests/mp08/node1/config.h

16 
	#CONFIGURE_MP_APPLICATION


	)

17 
	#CONFIGURE_MP_NODE_NUMBER
 1

	)

19 
	~"../cÚfig_ba£.h
"

	@src/ada-tests/mptests/mp08/node2/config.h

16 
	#CONFIGURE_MP_APPLICATION


	)

17 
	#CONFIGURE_MP_NODE_NUMBER
 2

	)

19 
	~"../cÚfig_ba£.h
"

	@src/ada-tests/mptests/mp09/config_base.h

16 
	#CONFIGURE_APPLICATION_NEEDS_CONSOLE_DRIVER


	)

17 
	#CONFIGURE_APPLICATION_NEEDS_CLOCK_DRIVER


	)

19 
	#CONFIGURE_POSIX_INIT_THREAD_TABLE


	)

21 
	#CONFIGURE_MAXIMUM_TASKS
 2

	)

23 
	#CONFIGURE_MAXIMUM_POSIX_THREADS
 10

	)

24 
	#CONFIGURE_MAXIMUM_POSIX_KEYS
 10

	)

25 
	#CONFIGURE_MAXIMUM_POSIX_MUTEXES
 20

	)

26 
	#CONFIGURE_MAXIMUM_POSIX_CONDITION_VARIABLES
 10

	)

28 
	~<¹ems/cÚfdefs.h
>

	@src/ada-tests/mptests/mp09/node1/config.h

16 
	#CONFIGURE_MP_APPLICATION


	)

17 
	#CONFIGURE_MP_NODE_NUMBER
 1

	)

19 
	~"../cÚfig_ba£.h
"

	@src/ada-tests/mptests/mp09/node2/config.h

16 
	#CONFIGURE_MP_APPLICATION


	)

17 
	#CONFIGURE_MP_NODE_NUMBER
 2

	)

19 
	~"../cÚfig_ba£.h
"

	@src/ada-tests/mptests/mp10/config_base.h

16 
	#CONFIGURE_APPLICATION_NEEDS_CONSOLE_DRIVER


	)

17 
	#CONFIGURE_APPLICATION_NEEDS_CLOCK_DRIVER


	)

19 
	#CONFIGURE_POSIX_INIT_THREAD_TABLE


	)

21 
	#CONFIGURE_MAXIMUM_TASKS
 2

	)

23 
	#CONFIGURE_MAXIMUM_POSIX_THREADS
 10

	)

24 
	#CONFIGURE_MAXIMUM_POSIX_KEYS
 10

	)

25 
	#CONFIGURE_MAXIMUM_POSIX_MUTEXES
 20

	)

26 
	#CONFIGURE_MAXIMUM_POSIX_CONDITION_VARIABLES
 10

	)

28 
	~<¹ems/cÚfdefs.h
>

	@src/ada-tests/mptests/mp10/node1/config.h

16 
	#CONFIGURE_MP_APPLICATION


	)

17 
	#CONFIGURE_MP_NODE_NUMBER
 1

	)

19 
	~"../cÚfig_ba£.h
"

	@src/ada-tests/mptests/mp10/node2/config.h

16 
	#CONFIGURE_MP_APPLICATION


	)

17 
	#CONFIGURE_MP_NODE_NUMBER
 2

	)

19 
	~"../cÚfig_ba£.h
"

	@src/ada-tests/mptests/mp11/config_base.h

16 
	#CONFIGURE_APPLICATION_NEEDS_CONSOLE_DRIVER


	)

17 
	#CONFIGURE_APPLICATION_NEEDS_CLOCK_DRIVER


	)

19 
	#CONFIGURE_POSIX_INIT_THREAD_TABLE


	)

21 
	#CONFIGURE_MAXIMUM_TASKS
 2

	)

23 
	#CONFIGURE_MAXIMUM_POSIX_THREADS
 10

	)

24 
	#CONFIGURE_MAXIMUM_POSIX_KEYS
 10

	)

25 
	#CONFIGURE_MAXIMUM_POSIX_MUTEXES
 20

	)

26 
	#CONFIGURE_MAXIMUM_POSIX_CONDITION_VARIABLES
 10

	)

28 
	~<¹ems/cÚfdefs.h
>

	@src/ada-tests/mptests/mp11/node1/config.h

16 
	#CONFIGURE_MP_APPLICATION


	)

17 
	#CONFIGURE_MP_NODE_NUMBER
 1

	)

19 
	~"../cÚfig_ba£.h
"

	@src/ada-tests/mptests/mp11/node2/config.h

16 
	#CONFIGURE_MP_APPLICATION


	)

17 
	#CONFIGURE_MP_NODE_NUMBER
 2

	)

19 
	~"../cÚfig_ba£.h
"

	@src/ada-tests/mptests/mp12/config_base.h

16 
	#CONFIGURE_APPLICATION_NEEDS_CONSOLE_DRIVER


	)

17 
	#CONFIGURE_APPLICATION_NEEDS_CLOCK_DRIVER


	)

19 
	#CONFIGURE_POSIX_INIT_THREAD_TABLE


	)

21 
	#CONFIGURE_MAXIMUM_TASKS
 2

	)

23 
	#CONFIGURE_MAXIMUM_POSIX_THREADS
 10

	)

24 
	#CONFIGURE_MAXIMUM_POSIX_KEYS
 10

	)

25 
	#CONFIGURE_MAXIMUM_POSIX_MUTEXES
 20

	)

26 
	#CONFIGURE_MAXIMUM_POSIX_CONDITION_VARIABLES
 10

	)

28 
	~<¹ems/cÚfdefs.h
>

	@src/ada-tests/mptests/mp12/node1/config.h

16 
	#CONFIGURE_MP_APPLICATION


	)

17 
	#CONFIGURE_MP_NODE_NUMBER
 1

	)

19 
	~"../cÚfig_ba£.h
"

	@src/ada-tests/mptests/mp12/node2/config.h

16 
	#CONFIGURE_MP_APPLICATION


	)

17 
	#CONFIGURE_MP_NODE_NUMBER
 2

	)

19 
	~"../cÚfig_ba£.h
"

	@src/ada-tests/mptests/mp13/config_base.h

16 
	#CONFIGURE_APPLICATION_NEEDS_CONSOLE_DRIVER


	)

17 
	#CONFIGURE_APPLICATION_NEEDS_CLOCK_DRIVER


	)

19 
	#CONFIGURE_POSIX_INIT_THREAD_TABLE


	)

21 
	#CONFIGURE_MAXIMUM_TASKS
 2

	)

23 
	#CONFIGURE_MAXIMUM_POSIX_THREADS
 10

	)

24 
	#CONFIGURE_MAXIMUM_POSIX_KEYS
 10

	)

25 
	#CONFIGURE_MAXIMUM_POSIX_MUTEXES
 20

	)

26 
	#CONFIGURE_MAXIMUM_POSIX_CONDITION_VARIABLES
 10

	)

28 
	~<¹ems/cÚfdefs.h
>

	@src/ada-tests/mptests/mp13/node1/config.h

16 
	#CONFIGURE_MP_APPLICATION


	)

17 
	#CONFIGURE_MP_NODE_NUMBER
 1

	)

19 
	~"../cÚfig_ba£.h
"

	@src/ada-tests/mptests/mp13/node2/config.h

16 
	#CONFIGURE_MP_APPLICATION


	)

17 
	#CONFIGURE_MP_NODE_NUMBER
 2

	)

19 
	~"../cÚfig_ba£.h
"

	@src/ada-tests/mptests/mp14/config_base.h

16 
	#CONFIGURE_APPLICATION_NEEDS_CONSOLE_DRIVER


	)

17 
	#CONFIGURE_APPLICATION_NEEDS_CLOCK_DRIVER


	)

19 
	#CONFIGURE_POSIX_INIT_THREAD_TABLE


	)

21 
	#CONFIGURE_MAXIMUM_TASKS
 2

	)

23 
	#CONFIGURE_MAXIMUM_POSIX_THREADS
 10

	)

24 
	#CONFIGURE_MAXIMUM_POSIX_KEYS
 10

	)

25 
	#CONFIGURE_MAXIMUM_POSIX_MUTEXES
 20

	)

26 
	#CONFIGURE_MAXIMUM_POSIX_CONDITION_VARIABLES
 10

	)

28 
	~<¹ems/cÚfdefs.h
>

	@src/ada-tests/mptests/mp14/node1/config.h

16 
	#CONFIGURE_MP_APPLICATION


	)

17 
	#CONFIGURE_MP_NODE_NUMBER
 1

	)

19 
	~"../cÚfig_ba£.h
"

	@src/ada-tests/mptests/mp14/node2/config.h

16 
	#CONFIGURE_MP_APPLICATION


	)

17 
	#CONFIGURE_MP_NODE_NUMBER
 2

	)

19 
	~"../cÚfig_ba£.h
"

	@src/ada-tests/samples/base_mp/config.h

16 
	#CONFIGURE_MP_APPLICATION


	)

18 
	#CONFIGURE_APPLICATION_NEEDS_CONSOLE_DRIVER


	)

19 
	#CONFIGURE_APPLICATION_NEEDS_CLOCK_DRIVER


	)

21 
	#CONFIGURE_MAXIMUM_TASKS
 2

	)

23 
	#CONFIGURE_POSIX_INIT_THREAD_TABLE


	)

25 
	#CONFIGURE_MAXIMUM_POSIX_THREADS
 10

	)

26 
	#CONFIGURE_MAXIMUM_POSIX_KEYS
 10

	)

27 
	#CONFIGURE_MAXIMUM_POSIX_MUTEXES
 20

	)

28 
	#CONFIGURE_MAXIMUM_POSIX_CONDITION_VARIABLES
 10

	)

34 
	~<¹ems/cÚfdefs.h
>

	@src/ada-tests/samples/base_sp/config.h

16 
	#CONFIGURE_SPTEST


	)

18 
	#CONFIGURE_APPLICATION_NEEDS_CONSOLE_DRIVER


	)

19 
	#CONFIGURE_APPLICATION_NEEDS_CLOCK_DRIVER


	)

21 
	#CONFIGURE_POSIX_INIT_THREAD_TABLE


	)

23 
	#CONFIGURE_MAXIMUM_POSIX_THREADS
 10

	)

24 
	#CONFIGURE_MAXIMUM_POSIX_KEYS
 10

	)

25 
	#CONFIGURE_MAXIMUM_POSIX_MUTEXES
 20

	)

26 
	#CONFIGURE_MAXIMUM_POSIX_CONDITION_VARIABLES
 10

	)

28 
	#CONFIGURE_MAXIMUM_TASKS
 2

	)

30 
	~<¹ems/cÚfdefs.h
>

	@src/ada-tests/samples/hello/config.h

16 
	#CONFIGURE_APPLICATION


	)

19 
	#CONFIGURE_APPLICATION_DOES_NOT_NEED_CLOCK_DRIVER


	)

20 
	#CONFIGURE_APPLICATION_NEEDS_CONSOLE_DRIVER


	)

22 
	#CONFIGURE_POSIX_INIT_THREAD_TABLE


	)

24 
	#CONFIGURE_MAXIMUM_POSIX_THREADS
 10

	)

25 
	#CONFIGURE_MAXIMUM_POSIX_KEYS
 10

	)

26 
	#CONFIGURE_MAXIMUM_POSIX_MUTEXES
 20

	)

27 
	#CONFIGURE_MAXIMUM_POSIX_CONDITION_VARIABLES
 10

	)

29 
	#CONFIGURE_MAXIMUM_TASKS
 1

	)

31 
	~<¹ems/cÚfdefs.h
>

	@src/ada-tests/samples/nsecs/config.h

16 
	#CONFIGURE_APPLICATION


	)

18 
	#CONFIGURE_APPLICATION_NEEDS_CONSOLE_DRIVER


	)

19 
	#CONFIGURE_APPLICATION_NEEDS_CLOCK_DRIVER


	)

21 
	#CONFIGURE_POSIX_INIT_THREAD_TABLE


	)

23 
	#CONFIGURE_MAXIMUM_POSIX_THREADS
 10

	)

24 
	#CONFIGURE_MAXIMUM_POSIX_KEYS
 10

	)

25 
	#CONFIGURE_MAXIMUM_POSIX_MUTEXES
 20

	)

26 
	#CONFIGURE_MAXIMUM_POSIX_CONDITION_VARIABLES
 10

	)

28 
	#CONFIGURE_MAXIMUM_TASKS
 1

	)

30 
	~<¹ems/cÚfdefs.h
>

	@src/ada-tests/samples/ticker/config.h

16 
	#CONFIGURE_SPTEST


	)

18 
	#CONFIGURE_APPLICATION_NEEDS_CONSOLE_DRIVER


	)

19 
	#CONFIGURE_APPLICATION_NEEDS_CLOCK_DRIVER


	)

21 
	#CONFIGURE_POSIX_INIT_THREAD_TABLE


	)

23 
	#CONFIGURE_MAXIMUM_POSIX_THREADS
 10

	)

24 
	#CONFIGURE_MAXIMUM_POSIX_KEYS
 10

	)

25 
	#CONFIGURE_MAXIMUM_POSIX_MUTEXES
 20

	)

26 
	#CONFIGURE_MAXIMUM_POSIX_CONDITION_VARIABLES
 10

	)

28 
	#CONFIGURE_MAXIMUM_TASKS
 4

	)

30 
	~<¹ems/cÚfdefs.h
>

	@src/ada-tests/sptests/sp01/config.h

16 
	#CONFIGURE_SPTEST


	)

18 
	#CONFIGURE_APPLICATION_NEEDS_CONSOLE_DRIVER


	)

19 
	#CONFIGURE_APPLICATION_NEEDS_CLOCK_DRIVER


	)

21 
	#CONFIGURE_POSIX_INIT_THREAD_TABLE


	)

23 
	#CONFIGURE_MAXIMUM_POSIX_THREADS
 10

	)

24 
	#CONFIGURE_MAXIMUM_POSIX_KEYS
 10

	)

25 
	#CONFIGURE_MAXIMUM_POSIX_MUTEXES
 20

	)

26 
	#CONFIGURE_MAXIMUM_POSIX_CONDITION_VARIABLES
 10

	)

28 
	#CONFIGURE_MAXIMUM_TASKS
 4

	)

30 
	~<¹ems/cÚfdefs.h
>

	@src/ada-tests/sptests/sp02/config.h

16 
	#CONFIGURE_SPTEST


	)

18 
	#CONFIGURE_APPLICATION_NEEDS_CONSOLE_DRIVER


	)

19 
	#CONFIGURE_APPLICATION_NEEDS_CLOCK_DRIVER


	)

21 
	#CONFIGURE_POSIX_INIT_THREAD_TABLE


	)

23 
	#CONFIGURE_MAXIMUM_POSIX_THREADS
 10

	)

24 
	#CONFIGURE_MAXIMUM_POSIX_KEYS
 10

	)

25 
	#CONFIGURE_MAXIMUM_POSIX_MUTEXES
 20

	)

26 
	#CONFIGURE_MAXIMUM_POSIX_CONDITION_VARIABLES
 10

	)

28 
	#CONFIGURE_MAXIMUM_TASKS
 4

	)

30 
	~<¹ems/cÚfdefs.h
>

	@src/ada-tests/sptests/sp03/config.h

16 
	#CONFIGURE_SPTEST


	)

18 
	#CONFIGURE_APPLICATION_NEEDS_CONSOLE_DRIVER


	)

19 
	#CONFIGURE_APPLICATION_NEEDS_CLOCK_DRIVER


	)

21 
	#CONFIGURE_POSIX_INIT_THREAD_TABLE


	)

23 
	#CONFIGURE_MAXIMUM_POSIX_THREADS
 10

	)

24 
	#CONFIGURE_MAXIMUM_POSIX_KEYS
 10

	)

25 
	#CONFIGURE_MAXIMUM_POSIX_MUTEXES
 20

	)

26 
	#CONFIGURE_MAXIMUM_POSIX_CONDITION_VARIABLES
 10

	)

28 
	#CONFIGURE_MAXIMUM_TASKS
 3

	)

30 
	~<¹ems/cÚfdefs.h
>

	@src/ada-tests/sptests/sp04/config.h

16 
	#CONFIGURE_SPTEST


	)

18 
	#CONFIGURE_APPLICATION_NEEDS_CONSOLE_DRIVER


	)

19 
	#CONFIGURE_APPLICATION_NEEDS_CLOCK_DRIVER


	)

21 
	#CONFIGURE_MAXIMUM_USER_EXTENSIONS
 1

	)

22 
	#CONFIGURE_TICKS_PER_TIMESLICE
 100

	)

24 
	#CONFIGURE_POSIX_INIT_THREAD_TABLE


	)

26 
	#CONFIGURE_MAXIMUM_POSIX_THREADS
 10

	)

27 
	#CONFIGURE_MAXIMUM_POSIX_KEYS
 10

	)

28 
	#CONFIGURE_MAXIMUM_POSIX_MUTEXES
 20

	)

29 
	#CONFIGURE_MAXIMUM_POSIX_CONDITION_VARIABLES
 10

	)

31 
	#CONFIGURE_MAXIMUM_TASKS
 4

	)

33 
	~<¹ems/cÚfdefs.h
>

	@src/ada-tests/sptests/sp05/config.h

16 
	#CONFIGURE_SPTEST


	)

18 
	#CONFIGURE_APPLICATION_NEEDS_CONSOLE_DRIVER


	)

19 
	#CONFIGURE_APPLICATION_NEEDS_CLOCK_DRIVER


	)

21 
	#CONFIGURE_TICKS_PER_TIMESLICE
 100

	)

23 
	#CONFIGURE_POSIX_INIT_THREAD_TABLE


	)

25 
	#CONFIGURE_MAXIMUM_POSIX_THREADS
 10

	)

26 
	#CONFIGURE_MAXIMUM_POSIX_KEYS
 10

	)

27 
	#CONFIGURE_MAXIMUM_POSIX_MUTEXES
 20

	)

28 
	#CONFIGURE_MAXIMUM_POSIX_CONDITION_VARIABLES
 10

	)

30 
	#CONFIGURE_MAXIMUM_TASKS
 4

	)

32 
	~<¹ems/cÚfdefs.h
>

	@src/ada-tests/sptests/sp06/config.h

16 
	#CONFIGURE_SPTEST


	)

18 
	#CONFIGURE_APPLICATION_NEEDS_CONSOLE_DRIVER


	)

19 
	#CONFIGURE_APPLICATION_NEEDS_CLOCK_DRIVER


	)

21 
	#CONFIGURE_TICKS_PER_TIMESLICE
 100

	)

23 
	#CONFIGURE_POSIX_INIT_THREAD_TABLE


	)

25 
	#CONFIGURE_MAXIMUM_POSIX_THREADS
 10

	)

26 
	#CONFIGURE_MAXIMUM_POSIX_KEYS
 10

	)

27 
	#CONFIGURE_MAXIMUM_POSIX_MUTEXES
 20

	)

28 
	#CONFIGURE_MAXIMUM_POSIX_CONDITION_VARIABLES
 10

	)

30 
	#CONFIGURE_MAXIMUM_TASKS
 4

	)

32 
	~<¹ems/cÚfdefs.h
>

	@src/ada-tests/sptests/sp07/config.h

16 
	#CONFIGURE_SPTEST


	)

18 
	#CONFIGURE_APPLICATION_NEEDS_CONSOLE_DRIVER


	)

19 
	#CONFIGURE_APPLICATION_NEEDS_CLOCK_DRIVER


	)

21 
	#CONFIGURE_MAXIMUM_USER_EXTENSIONS
 1

	)

22 
	#CONFIGURE_TICKS_PER_TIMESLICE
 100

	)

24 
	#CONFIGURE_POSIX_INIT_THREAD_TABLE


	)

26 
	#CONFIGURE_MAXIMUM_POSIX_THREADS
 10

	)

27 
	#CONFIGURE_MAXIMUM_POSIX_KEYS
 10

	)

28 
	#CONFIGURE_MAXIMUM_POSIX_MUTEXES
 20

	)

29 
	#CONFIGURE_MAXIMUM_POSIX_CONDITION_VARIABLES
 10

	)

31 
	#CONFIGURE_MAXIMUM_TASKS
 5

	)

33 
	~<¹ems/cÚfdefs.h
>

	@src/ada-tests/sptests/sp08/config.h

16 
	#CONFIGURE_SPTEST


	)

18 
	#CONFIGURE_APPLICATION_NEEDS_CONSOLE_DRIVER


	)

19 
	#CONFIGURE_APPLICATION_NEEDS_CLOCK_DRIVER


	)

21 
	#CONFIGURE_TICKS_PER_TIMESLICE
 100

	)

23 
	#CONFIGURE_POSIX_INIT_THREAD_TABLE


	)

25 
	#CONFIGURE_MAXIMUM_POSIX_THREADS
 10

	)

26 
	#CONFIGURE_MAXIMUM_POSIX_KEYS
 10

	)

27 
	#CONFIGURE_MAXIMUM_POSIX_MUTEXES
 20

	)

28 
	#CONFIGURE_MAXIMUM_POSIX_CONDITION_VARIABLES
 10

	)

30 
	#CONFIGURE_MAXIMUM_TASKS
 2

	)

32 
	~<¹ems/cÚfdefs.h
>

	@src/ada-tests/sptests/sp09/config.h

16 
	#CONFIGURE_SPTEST


	)

18 
	#CONFIGURE_APPLICATION_NEEDS_CONSOLE_DRIVER


	)

19 
	#CONFIGURE_APPLICATION_NEEDS_CLOCK_DRIVER


	)

21 
	#CONFIGURE_MAXIMUM_TASKS
 10

	)

22 
	#CONFIGURE_MAXIMUM_TIMERS
 1

	)

23 
	#CONFIGURE_MAXIMUM_SEMAPHORES
 2

	)

24 
	#CONFIGURE_MAXIMUM_MESSAGE_QUEUES
 1

	)

25 
	#CONFIGURE_MAXIMUM_PARTITIONS
 1

	)

26 
	#CONFIGURE_MAXIMUM_REGIONS
 1

	)

27 
	#CONFIGURE_MAXIMUM_PERIODS
 1

	)

28 
	#CONFIGURE_MAXIMUM_USER_EXTENSIONS
 0

	)

29 
	#CONFIGURE_TICKS_PER_TIMESLICE
 100

	)

31 
	#CONFIGURE_POSIX_INIT_THREAD_TABLE


	)

33 
	#CONFIGURE_MAXIMUM_POSIX_THREADS
 10

	)

34 
	#CONFIGURE_MAXIMUM_POSIX_KEYS
 10

	)

35 
	#CONFIGURE_MAXIMUM_POSIX_MUTEXES
 20

	)

36 
	#CONFIGURE_MAXIMUM_POSIX_CONDITION_VARIABLES
 10

	)

38 
	~<¹ems/cÚfdefs.h
>

	@src/ada-tests/sptests/sp11/config.h

16 
	#CONFIGURE_SPTEST


	)

18 
	#CONFIGURE_APPLICATION_NEEDS_CONSOLE_DRIVER


	)

19 
	#CONFIGURE_APPLICATION_NEEDS_CLOCK_DRIVER


	)

21 
	#CONFIGURE_MAXIMUM_TASKS
 3

	)

22 
	#CONFIGURE_MAXIMUM_TIMERS
 6

	)

23 
	#CONFIGURE_TICKS_PER_TIMESLICE
 100

	)

25 
	#CONFIGURE_POSIX_INIT_THREAD_TABLE


	)

27 
	#CONFIGURE_MAXIMUM_POSIX_THREADS
 10

	)

28 
	#CONFIGURE_MAXIMUM_POSIX_KEYS
 10

	)

29 
	#CONFIGURE_MAXIMUM_POSIX_MUTEXES
 20

	)

30 
	#CONFIGURE_MAXIMUM_POSIX_CONDITION_VARIABLES
 10

	)

32 
	~<¹ems/cÚfdefs.h
>

	@src/ada-tests/sptests/sp12/config.h

16 
	#CONFIGURE_SPTEST


	)

18 
	#CONFIGURE_APPLICATION_NEEDS_CONSOLE_DRIVER


	)

19 
	#CONFIGURE_APPLICATION_NEEDS_CLOCK_DRIVER


	)

21 
	#CONFIGURE_MAXIMUM_TASKS
 8

	)

22 
	#CONFIGURE_MAXIMUM_SEMAPHORES
 10

	)

23 
	#CONFIGURE_TICKS_PER_TIMESLICE
 100

	)

25 
	#CONFIGURE_POSIX_INIT_THREAD_TABLE


	)

27 
	#CONFIGURE_MAXIMUM_POSIX_THREADS
 10

	)

28 
	#CONFIGURE_MAXIMUM_POSIX_KEYS
 10

	)

29 
	#CONFIGURE_MAXIMUM_POSIX_MUTEXES
 20

	)

30 
	#CONFIGURE_MAXIMUM_POSIX_CONDITION_VARIABLES
 10

	)

32 
	~<¹ems/cÚfdefs.h
>

	@src/ada-tests/sptests/sp13/config.h

16 
	#CONFIGURE_SPTEST


	)

18 
	#CONFIGURE_APPLICATION_NEEDS_CONSOLE_DRIVER


	)

19 
	#CONFIGURE_APPLICATION_NEEDS_CLOCK_DRIVER


	)

21 
	#CONFIGURE_MAXIMUM_TASKS
 4

	)

22 
	#CONFIGURE_MAXIMUM_MESSAGE_QUEUES
 10

	)

23 
	#CONFIGURE_TICKS_PER_TIMESLICE
 100

	)

25 
	#CONFIGURE_POSIX_INIT_THREAD_TABLE


	)

27 
	#CONFIGURE_MAXIMUM_POSIX_THREADS
 10

	)

28 
	#CONFIGURE_MAXIMUM_POSIX_KEYS
 10

	)

29 
	#CONFIGURE_MAXIMUM_POSIX_MUTEXES
 20

	)

30 
	#CONFIGURE_MAXIMUM_POSIX_CONDITION_VARIABLES
 10

	)

32 
	~<¹ems/cÚfdefs.h
>

	@src/ada-tests/sptests/sp14/config.h

16 
	#CONFIGURE_SPTEST


	)

18 
	#CONFIGURE_APPLICATION_NEEDS_CONSOLE_DRIVER


	)

19 
	#CONFIGURE_APPLICATION_NEEDS_CLOCK_DRIVER


	)

21 
	#CONFIGURE_MAXIMUM_TASKS
 3

	)

22 
	#CONFIGURE_MAXIMUM_TIMERS
 1

	)

23 
	#CONFIGURE_TICKS_PER_TIMESLICE
 100

	)

25 
	#CONFIGURE_POSIX_INIT_THREAD_TABLE


	)

27 
	#CONFIGURE_MAXIMUM_POSIX_THREADS
 10

	)

28 
	#CONFIGURE_MAXIMUM_POSIX_KEYS
 10

	)

29 
	#CONFIGURE_MAXIMUM_POSIX_MUTEXES
 20

	)

30 
	#CONFIGURE_MAXIMUM_POSIX_CONDITION_VARIABLES
 10

	)

32 
	~<¹ems/cÚfdefs.h
>

	@src/ada-tests/sptests/sp15/config.h

16 
	#CONFIGURE_SPTEST


	)

18 
	#CONFIGURE_APPLICATION_NEEDS_CONSOLE_DRIVER


	)

19 
	#CONFIGURE_APPLICATION_NEEDS_CLOCK_DRIVER


	)

21 
	#CONFIGURE_MAXIMUM_TASKS
 2

	)

22 
	#CONFIGURE_MAXIMUM_PARTITIONS
 2

	)

23 
	#CONFIGURE_TICKS_PER_TIMESLICE
 100

	)

25 
	#CONFIGURE_POSIX_INIT_THREAD_TABLE


	)

27 
	#CONFIGURE_MAXIMUM_POSIX_THREADS
 10

	)

28 
	#CONFIGURE_MAXIMUM_POSIX_KEYS
 10

	)

29 
	#CONFIGURE_MAXIMUM_POSIX_MUTEXES
 20

	)

30 
	#CONFIGURE_MAXIMUM_POSIX_CONDITION_VARIABLES
 10

	)

32 
	~<¹ems/cÚfdefs.h
>

	@src/ada-tests/sptests/sp16/config.h

16 
	#CONFIGURE_SPTEST


	)

18 
	#CONFIGURE_APPLICATION_NEEDS_CONSOLE_DRIVER


	)

19 
	#CONFIGURE_APPLICATION_NEEDS_CLOCK_DRIVER


	)

21 
	#CONFIGURE_MAXIMUM_TASKS
 4

	)

22 
	#CONFIGURE_MAXIMUM_REGIONS
 4

	)

23 
	#CONFIGURE_TICKS_PER_TIMESLICE
 100

	)

25 
	#CONFIGURE_POSIX_INIT_THREAD_TABLE


	)

27 
	#CONFIGURE_MAXIMUM_POSIX_THREADS
 10

	)

28 
	#CONFIGURE_MAXIMUM_POSIX_KEYS
 10

	)

29 
	#CONFIGURE_MAXIMUM_POSIX_MUTEXES
 20

	)

30 
	#CONFIGURE_MAXIMUM_POSIX_CONDITION_VARIABLES
 10

	)

32 
	~<¹ems/cÚfdefs.h
>

	@src/ada-tests/sptests/sp17/config.h

16 
	#CONFIGURE_SPTEST


	)

18 
	#CONFIGURE_APPLICATION_NEEDS_CONSOLE_DRIVER


	)

19 
	#CONFIGURE_APPLICATION_NEEDS_CLOCK_DRIVER


	)

21 
	#CONFIGURE_MAXIMUM_TASKS
 3

	)

22 
	#CONFIGURE_MICROSECONDS_PER_TICK
 
	`RTEMS_MILLISECONDS_TO_MICROSECONDS
(25)

	)

23 
	#CONFIGURE_TICKS_PER_TIMESLICE
 1000

	)

25 
	#CONFIGURE_POSIX_INIT_THREAD_TABLE


	)

27 
	#CONFIGURE_MAXIMUM_POSIX_THREADS
 10

	)

28 
	#CONFIGURE_MAXIMUM_POSIX_KEYS
 10

	)

29 
	#CONFIGURE_MAXIMUM_POSIX_MUTEXES
 20

	)

30 
	#CONFIGURE_MAXIMUM_POSIX_CONDITION_VARIABLES
 10

	)

32 
	~<¹ems/cÚfdefs.h
>

	@src/ada-tests/sptests/sp19/config.h

16 
	#CONFIGURE_SPTEST


	)

18 
	#CONFIGURE_APPLICATION_NEEDS_CONSOLE_DRIVER


	)

19 
	#CONFIGURE_APPLICATION_NEEDS_CLOCK_DRIVER


	)

21 
	#CONFIGURE_POSIX_INIT_THREAD_TABLE


	)

23 
	#CONFIGURE_MAXIMUM_POSIX_THREADS
 10

	)

24 
	#CONFIGURE_MAXIMUM_POSIX_KEYS
 10

	)

25 
	#CONFIGURE_MAXIMUM_POSIX_MUTEXES
 20

	)

26 
	#CONFIGURE_MAXIMUM_POSIX_CONDITION_VARIABLES
 10

	)

28 
	#CONFIGURE_MAXIMUM_TASKS
 7

	)

30 
	~<¹ems/cÚfdefs.h
>

	@src/ada-tests/sptests/sp20/config.h

16 
	#CONFIGURE_SPTEST


	)

18 
	#CONFIGURE_APPLICATION_NEEDS_CONSOLE_DRIVER


	)

19 
	#CONFIGURE_APPLICATION_NEEDS_CLOCK_DRIVER


	)

21 
	#CONFIGURE_MAXIMUM_TASKS
 7

	)

22 
	#CONFIGURE_MAXIMUM_PERIODS
 10

	)

24 
	#CONFIGURE_POSIX_INIT_THREAD_TABLE


	)

26 
	#CONFIGURE_MAXIMUM_POSIX_THREADS
 10

	)

27 
	#CONFIGURE_MAXIMUM_POSIX_KEYS
 10

	)

28 
	#CONFIGURE_MAXIMUM_POSIX_MUTEXES
 20

	)

29 
	#CONFIGURE_MAXIMUM_POSIX_CONDITION_VARIABLES
 10

	)

31 
	~<¹ems/cÚfdefs.h
>

	@src/ada-tests/sptests/sp22/config.h

16 
	#CONFIGURE_SPTEST


	)

18 
	#CONFIGURE_APPLICATION_NEEDS_CONSOLE_DRIVER


	)

19 
	#CONFIGURE_APPLICATION_NEEDS_CLOCK_DRIVER


	)

21 
	#CONFIGURE_MAXIMUM_TASKS
 2

	)

22 
	#CONFIGURE_MAXIMUM_TIMERS
 2

	)

24 
	#CONFIGURE_POSIX_INIT_THREAD_TABLE


	)

26 
	#CONFIGURE_MAXIMUM_POSIX_THREADS
 10

	)

27 
	#CONFIGURE_MAXIMUM_POSIX_KEYS
 10

	)

28 
	#CONFIGURE_MAXIMUM_POSIX_MUTEXES
 20

	)

29 
	#CONFIGURE_MAXIMUM_POSIX_CONDITION_VARIABLES
 10

	)

31 
	~<¹ems/cÚfdefs.h
>

	@src/ada-tests/sptests/sp23/config.h

16 
	#CONFIGURE_SPTEST


	)

18 
	#CONFIGURE_APPLICATION_NEEDS_CONSOLE_DRIVER


	)

19 
	#CONFIGURE_APPLICATION_NEEDS_CLOCK_DRIVER


	)

21 
	#CONFIGURE_MAXIMUM_TASKS
 2

	)

22 
	#CONFIGURE_MAXIMUM_PORTS
 1

	)

24 
	#CONFIGURE_POSIX_INIT_THREAD_TABLE


	)

26 
	#CONFIGURE_MAXIMUM_POSIX_THREADS
 10

	)

27 
	#CONFIGURE_MAXIMUM_POSIX_KEYS
 10

	)

28 
	#CONFIGURE_MAXIMUM_POSIX_MUTEXES
 20

	)

29 
	#CONFIGURE_MAXIMUM_POSIX_CONDITION_VARIABLES
 10

	)

31 
	~<¹ems/cÚfdefs.h
>

	@src/ada-tests/sptests/sp24/config.h

16 
	#CONFIGURE_SPTEST


	)

18 
	#CONFIGURE_APPLICATION_NEEDS_CONSOLE_DRIVER


	)

19 
	#CONFIGURE_APPLICATION_NEEDS_CLOCK_DRIVER


	)

21 
	#CONFIGURE_MAXIMUM_TASKS
 4

	)

22 
	#CONFIGURE_MAXIMUM_TIMERS
 3

	)

24 
	#CONFIGURE_POSIX_INIT_THREAD_TABLE


	)

26 
	#CONFIGURE_MAXIMUM_POSIX_THREADS
 10

	)

27 
	#CONFIGURE_MAXIMUM_POSIX_KEYS
 10

	)

28 
	#CONFIGURE_MAXIMUM_POSIX_MUTEXES
 20

	)

29 
	#CONFIGURE_MAXIMUM_POSIX_CONDITION_VARIABLES
 10

	)

31 
	~<¹ems/cÚfdefs.h
>

	@src/ada-tests/sptests/sp25/config.h

16 
	#CONFIGURE_SPTEST


	)

18 
	#CONFIGURE_APPLICATION_NEEDS_CONSOLE_DRIVER


	)

19 
	#CONFIGURE_APPLICATION_NEEDS_CLOCK_DRIVER


	)

21 
	#CONFIGURE_MAXIMUM_TASKS
 2

	)

22 
	#CONFIGURE_MAXIMUM_REGIONS
 1

	)

24 
	#CONFIGURE_POSIX_INIT_THREAD_TABLE


	)

26 
	#CONFIGURE_MAXIMUM_POSIX_THREADS
 10

	)

27 
	#CONFIGURE_MAXIMUM_POSIX_KEYS
 10

	)

28 
	#CONFIGURE_MAXIMUM_POSIX_MUTEXES
 20

	)

29 
	#CONFIGURE_MAXIMUM_POSIX_CONDITION_VARIABLES
 10

	)

31 
	~<¹ems/cÚfdefs.h
>

	@src/ada-tests/sptests/spname01/config.h

16 
	#CONFIGURE_APPLICATION


	)

19 
	#CONFIGURE_APPLICATION_DOES_NOT_NEED_CLOCK_DRIVER


	)

20 
	#CONFIGURE_APPLICATION_NEEDS_CONSOLE_DRIVER


	)

22 
	#CONFIGURE_POSIX_INIT_THREAD_TABLE


	)

24 
	#CONFIGURE_MAXIMUM_POSIX_THREADS
 10

	)

25 
	#CONFIGURE_MAXIMUM_POSIX_KEYS
 10

	)

26 
	#CONFIGURE_MAXIMUM_POSIX_MUTEXES
 20

	)

27 
	#CONFIGURE_MAXIMUM_POSIX_CONDITION_VARIABLES
 10

	)

29 
	#CONFIGURE_MAXIMUM_TASKS
 1

	)

31 
	~<¹ems/cÚfdefs.h
>

	@src/ada-tests/support/init.c

6 
	~<b¥.h
>

7 
	~<¡dlib.h
>

9 
	~<¹ems/scÜe/th»adim¶.h
>

14 
gÇt_ma
 ( 
¬gc
, **
¬gv
, **
vp
 );

16 *
	$POSIX_In
(

17 *
¬gumt


20 (è
	`gÇt_ma
 ( 0, 0, 0 );

22 
	`ex
( 0 );

23 
	}
}

29 
ut32_t
 
mli£cÚds_³r_tick
();

30 
ut32_t
 
ticks_³r_£cÚd
();

31 
ut32_t
 
wÜk_¥aû_size
();

32 
ut32_t
 
is_cÚfigu»d_muÉroûssg
();

33 
ut32_t
 
g_node
();

34 
¹ems_id
 
tcb_to_id
(
Th»ad_CÚÞ
 *
tcb
);

40 
	#CONFIGURE_INIT


	)

41 
	#CONFIGURE_GNAT_RTEMS


	)

42 
	#CONFIGURE_MEMORY_OVERHEAD
 (256)

	)

44 
	~<cÚfig.h
>

46 
¹ems_id
 
	$tcb_to_id
(

47 
Th»ad_CÚÞ
 *
tcb


50  
tcb
->
Objeù
.
id
;

51 
	}
}

53 
ut32_t
 
	$mli£cÚds_³r_tick
()

55  
CONFIGURE_MICROSECONDS_PER_TICK
 / 1000;

56 
	}
}

58 
ut32_t
 
	$ticks_³r_£cÚd
()

60  
	`¹ems_þock_g_ticks_³r_£cÚd
();

61 
	}
}

63 
ut32_t
 
	$wÜk_¥aû_size
()

65  
CONFIGURE_EXECUTIVE_RAM_SIZE
;

66 
	}
}

68 
ut32_t
 
	$is_cÚfigu»d_muÉroûssg
()

70 #ià
	`defed
(
RTEMS_MULTIPROCESSING
)

75 
	}
}

77 
ut32_t
 
	$g_node
()

80  
_Objeùs_Loÿl_node
;

81 
	}
}

	@src/ada-tests/tmtests/tm01/config.h

16 
	#CONFIGURE_TMTEST


	)

18 
	#CONFIGURE_APPLICATION_NEEDS_CONSOLE_DRIVER


	)

19 
	#CONFIGURE_APPLICATION_NEEDS_TIMER_DRIVER


	)

21 
	#CONFIGURE_MAXIMUM_TASKS
 2

	)

22 
	#CONFIGURE_MAXIMUM_SEMAPHORES
 1

	)

23 
	#CONFIGURE_TICKS_PER_TIMESLICE
 0

	)

25 
	#CONFIGURE_POSIX_INIT_THREAD_TABLE


	)

27 
	#CONFIGURE_MAXIMUM_POSIX_THREADS
 10

	)

28 
	#CONFIGURE_MAXIMUM_POSIX_KEYS
 10

	)

29 
	#CONFIGURE_MAXIMUM_POSIX_MUTEXES
 20

	)

30 
	#CONFIGURE_MAXIMUM_POSIX_CONDITION_VARIABLES
 10

	)

32 
	~<¹ems/cÚfdefs.h
>

	@src/ada-tests/tmtests/tm02/config.h

16 
	#CONFIGURE_TMTEST


	)

18 
	#CONFIGURE_APPLICATION_NEEDS_CONSOLE_DRIVER


	)

19 
	#CONFIGURE_APPLICATION_NEEDS_TIMER_DRIVER


	)

21 
	#CONFIGURE_MAXIMUM_TASKS
 111

	)

22 
	#CONFIGURE_MAXIMUM_TIMERS
 110

	)

23 
	#CONFIGURE_MAXIMUM_SEMAPHORES
 101

	)

24 
	#CONFIGURE_TICKS_PER_TIMESLICE
 0

	)

26 
	#CONFIGURE_POSIX_INIT_THREAD_TABLE


	)

28 
	#CONFIGURE_MAXIMUM_POSIX_THREADS
 10

	)

29 
	#CONFIGURE_MAXIMUM_POSIX_KEYS
 10

	)

30 
	#CONFIGURE_MAXIMUM_POSIX_MUTEXES
 20

	)

31 
	#CONFIGURE_MAXIMUM_POSIX_CONDITION_VARIABLES
 10

	)

33 
	~<¹ems/cÚfdefs.h
>

	@src/ada-tests/tmtests/tm03/config.h

16 
	#CONFIGURE_TMTEST


	)

18 
	#CONFIGURE_APPLICATION_NEEDS_CONSOLE_DRIVER


	)

19 
	#CONFIGURE_APPLICATION_NEEDS_TIMER_DRIVER


	)

21 
	#CONFIGURE_MAXIMUM_TASKS
 111

	)

22 
	#CONFIGURE_MAXIMUM_TIMERS
 110

	)

23 
	#CONFIGURE_MAXIMUM_SEMAPHORES
 101

	)

24 
	#CONFIGURE_TICKS_PER_TIMESLICE
 0

	)

26 
	#CONFIGURE_POSIX_INIT_THREAD_TABLE


	)

28 
	#CONFIGURE_MAXIMUM_POSIX_THREADS
 10

	)

29 
	#CONFIGURE_MAXIMUM_POSIX_KEYS
 10

	)

30 
	#CONFIGURE_MAXIMUM_POSIX_MUTEXES
 20

	)

31 
	#CONFIGURE_MAXIMUM_POSIX_CONDITION_VARIABLES
 10

	)

33 
	~<¹ems/cÚfdefs.h
>

	@src/ada-tests/tmtests/tm04/config.h

16 
	#CONFIGURE_TMTEST


	)

18 
	#CONFIGURE_APPLICATION_NEEDS_CONSOLE_DRIVER


	)

19 
	#CONFIGURE_APPLICATION_NEEDS_TIMER_DRIVER


	)

21 
	#CONFIGURE_MAXIMUM_TASKS
 111

	)

22 
	#CONFIGURE_MAXIMUM_SEMAPHORES
 1

	)

23 
	#CONFIGURE_TICKS_PER_TIMESLICE
 0

	)

25 
	#CONFIGURE_POSIX_INIT_THREAD_TABLE


	)

27 
	#CONFIGURE_MAXIMUM_POSIX_THREADS
 10

	)

28 
	#CONFIGURE_MAXIMUM_POSIX_KEYS
 10

	)

29 
	#CONFIGURE_MAXIMUM_POSIX_MUTEXES
 20

	)

30 
	#CONFIGURE_MAXIMUM_POSIX_CONDITION_VARIABLES
 10

	)

32 
	~<¹ems/cÚfdefs.h
>

	@src/ada-tests/tmtests/tm05/config.h

16 
	#CONFIGURE_TMTEST


	)

18 
	#CONFIGURE_APPLICATION_NEEDS_CONSOLE_DRIVER


	)

19 
	#CONFIGURE_APPLICATION_NEEDS_TIMER_DRIVER


	)

21 
	#CONFIGURE_MAXIMUM_TASKS
 111

	)

22 
	#CONFIGURE_MAXIMUM_TIMERS
 110

	)

23 
	#CONFIGURE_MAXIMUM_SEMAPHORES
 101

	)

24 
	#CONFIGURE_TICKS_PER_TIMESLICE
 0

	)

26 
	#CONFIGURE_POSIX_INIT_THREAD_TABLE


	)

28 
	#CONFIGURE_MAXIMUM_POSIX_THREADS
 10

	)

29 
	#CONFIGURE_MAXIMUM_POSIX_KEYS
 10

	)

30 
	#CONFIGURE_MAXIMUM_POSIX_MUTEXES
 20

	)

31 
	#CONFIGURE_MAXIMUM_POSIX_CONDITION_VARIABLES
 10

	)

33 
	~<¹ems/cÚfdefs.h
>

	@src/ada-tests/tmtests/tm06/config.h

16 
	#CONFIGURE_TMTEST


	)

18 
	#CONFIGURE_APPLICATION_NEEDS_CONSOLE_DRIVER


	)

19 
	#CONFIGURE_APPLICATION_NEEDS_TIMER_DRIVER


	)

21 
	#CONFIGURE_MAXIMUM_TASKS
 111

	)

22 
	#CONFIGURE_MAXIMUM_TIMERS
 110

	)

23 
	#CONFIGURE_MAXIMUM_SEMAPHORES
 101

	)

24 
	#CONFIGURE_TICKS_PER_TIMESLICE
 0

	)

26 
	#CONFIGURE_POSIX_INIT_THREAD_TABLE


	)

28 
	#CONFIGURE_MAXIMUM_POSIX_THREADS
 10

	)

29 
	#CONFIGURE_MAXIMUM_POSIX_KEYS
 10

	)

30 
	#CONFIGURE_MAXIMUM_POSIX_MUTEXES
 20

	)

31 
	#CONFIGURE_MAXIMUM_POSIX_CONDITION_VARIABLES
 10

	)

33 
	~<¹ems/cÚfdefs.h
>

	@src/ada-tests/tmtests/tm07/config.h

16 
	#CONFIGURE_TMTEST


	)

18 
	#CONFIGURE_APPLICATION_NEEDS_CONSOLE_DRIVER


	)

19 
	#CONFIGURE_APPLICATION_NEEDS_TIMER_DRIVER


	)

21 
	#CONFIGURE_MAXIMUM_TASKS
 111

	)

22 
	#CONFIGURE_MAXIMUM_TIMERS
 110

	)

23 
	#CONFIGURE_MAXIMUM_SEMAPHORES
 101

	)

24 
	#CONFIGURE_TICKS_PER_TIMESLICE
 0

	)

26 
	#CONFIGURE_POSIX_INIT_THREAD_TABLE


	)

28 
	#CONFIGURE_MAXIMUM_POSIX_THREADS
 10

	)

29 
	#CONFIGURE_MAXIMUM_POSIX_KEYS
 10

	)

30 
	#CONFIGURE_MAXIMUM_POSIX_MUTEXES
 20

	)

31 
	#CONFIGURE_MAXIMUM_POSIX_CONDITION_VARIABLES
 10

	)

33 
	~<¹ems/cÚfdefs.h
>

	@src/ada-tests/tmtests/tm08/config.h

16 
	#CONFIGURE_TMTEST


	)

18 
	#CONFIGURE_APPLICATION_NEEDS_CONSOLE_DRIVER


	)

19 
	#CONFIGURE_APPLICATION_NEEDS_TIMER_DRIVER


	)

21 
	#CONFIGURE_MAXIMUM_TASKS
 111

	)

22 
	#CONFIGURE_MAXIMUM_TIMERS
 110

	)

23 
	#CONFIGURE_MAXIMUM_SEMAPHORES
 101

	)

24 
	#CONFIGURE_TICKS_PER_TIMESLICE
 0

	)

26 
	#CONFIGURE_POSIX_INIT_THREAD_TABLE


	)

28 
	#CONFIGURE_MAXIMUM_POSIX_THREADS
 10

	)

29 
	#CONFIGURE_MAXIMUM_POSIX_KEYS
 10

	)

30 
	#CONFIGURE_MAXIMUM_POSIX_MUTEXES
 20

	)

31 
	#CONFIGURE_MAXIMUM_POSIX_CONDITION_VARIABLES
 10

	)

33 
	~<¹ems/cÚfdefs.h
>

	@src/ada-tests/tmtests/tm09/config.h

16 
	#CONFIGURE_TMTEST


	)

18 
	#CONFIGURE_APPLICATION_NEEDS_CONSOLE_DRIVER


	)

19 
	#CONFIGURE_APPLICATION_NEEDS_TIMER_DRIVER


	)

21 
	#CONFIGURE_MAXIMUM_TASKS
 2

	)

22 
	#CONFIGURE_MAXIMUM_MESSAGE_QUEUES
 1

	)

23 
	#CONFIGURE_TICKS_PER_TIMESLICE
 0

	)

25 
	#CONFIGURE_POSIX_INIT_THREAD_TABLE


	)

27 
	#CONFIGURE_MAXIMUM_POSIX_THREADS
 10

	)

28 
	#CONFIGURE_MAXIMUM_POSIX_KEYS
 10

	)

29 
	#CONFIGURE_MAXIMUM_POSIX_MUTEXES
 20

	)

30 
	#CONFIGURE_MAXIMUM_POSIX_CONDITION_VARIABLES
 10

	)

32 
	~<¹ems/cÚfdefs.h
>

	@src/ada-tests/tmtests/tm10/config.h

16 
	#CONFIGURE_TMTEST


	)

18 
	#CONFIGURE_APPLICATION_NEEDS_CONSOLE_DRIVER


	)

19 
	#CONFIGURE_APPLICATION_NEEDS_TIMER_DRIVER


	)

21 
	#CONFIGURE_MAXIMUM_TASKS
 110

	)

22 
	#CONFIGURE_MAXIMUM_MESSAGE_QUEUES
 1

	)

23 
	#CONFIGURE_TICKS_PER_TIMESLICE
 0

	)

25 
	#CONFIGURE_POSIX_INIT_THREAD_TABLE


	)

27 
	#CONFIGURE_MAXIMUM_POSIX_THREADS
 10

	)

28 
	#CONFIGURE_MAXIMUM_POSIX_KEYS
 10

	)

29 
	#CONFIGURE_MAXIMUM_POSIX_MUTEXES
 20

	)

30 
	#CONFIGURE_MAXIMUM_POSIX_CONDITION_VARIABLES
 10

	)

32 
	~<¹ems/cÚfdefs.h
>

	@src/ada-tests/tmtests/tm11/config.h

16 
	#CONFIGURE_TMTEST


	)

18 
	#CONFIGURE_APPLICATION_NEEDS_CONSOLE_DRIVER


	)

19 
	#CONFIGURE_APPLICATION_NEEDS_TIMER_DRIVER


	)

21 
	#CONFIGURE_MAXIMUM_TASKS
 111

	)

22 
	#CONFIGURE_MAXIMUM_MESSAGE_QUEUES
 1

	)

23 
	#CONFIGURE_TICKS_PER_TIMESLICE
 0

	)

25 
	#CONFIGURE_POSIX_INIT_THREAD_TABLE


	)

27 
	#CONFIGURE_MAXIMUM_POSIX_THREADS
 10

	)

28 
	#CONFIGURE_MAXIMUM_POSIX_KEYS
 10

	)

29 
	#CONFIGURE_MAXIMUM_POSIX_MUTEXES
 20

	)

30 
	#CONFIGURE_MAXIMUM_POSIX_CONDITION_VARIABLES
 10

	)

32 
	~<¹ems/cÚfdefs.h
>

	@src/ada-tests/tmtests/tm12/config.h

16 
	#CONFIGURE_TMTEST


	)

18 
	#CONFIGURE_APPLICATION_NEEDS_CONSOLE_DRIVER


	)

19 
	#CONFIGURE_APPLICATION_NEEDS_TIMER_DRIVER


	)

21 
	#CONFIGURE_MAXIMUM_TASKS
 111

	)

22 
	#CONFIGURE_MAXIMUM_MESSAGE_QUEUES
 1

	)

23 
	#CONFIGURE_TICKS_PER_TIMESLICE
 0

	)

25 
	#CONFIGURE_POSIX_INIT_THREAD_TABLE


	)

27 
	#CONFIGURE_MAXIMUM_POSIX_THREADS
 10

	)

28 
	#CONFIGURE_MAXIMUM_POSIX_KEYS
 10

	)

29 
	#CONFIGURE_MAXIMUM_POSIX_MUTEXES
 20

	)

30 
	#CONFIGURE_MAXIMUM_POSIX_CONDITION_VARIABLES
 10

	)

32 
	~<¹ems/cÚfdefs.h
>

	@src/ada-tests/tmtests/tm13/config.h

16 
	#CONFIGURE_TMTEST


	)

18 
	#CONFIGURE_APPLICATION_NEEDS_CONSOLE_DRIVER


	)

19 
	#CONFIGURE_APPLICATION_NEEDS_TIMER_DRIVER


	)

21 
	#CONFIGURE_MAXIMUM_TASKS
 111

	)

22 
	#CONFIGURE_MAXIMUM_MESSAGE_QUEUES
 1

	)

23 
	#CONFIGURE_TICKS_PER_TIMESLICE
 0

	)

25 
	#CONFIGURE_POSIX_INIT_THREAD_TABLE


	)

27 
	#CONFIGURE_MAXIMUM_POSIX_THREADS
 10

	)

28 
	#CONFIGURE_MAXIMUM_POSIX_KEYS
 10

	)

29 
	#CONFIGURE_MAXIMUM_POSIX_MUTEXES
 20

	)

30 
	#CONFIGURE_MAXIMUM_POSIX_CONDITION_VARIABLES
 10

	)

32 
	~<¹ems/cÚfdefs.h
>

	@src/ada-tests/tmtests/tm14/config.h

16 
	#CONFIGURE_TMTEST


	)

18 
	#CONFIGURE_APPLICATION_NEEDS_CONSOLE_DRIVER


	)

19 
	#CONFIGURE_APPLICATION_NEEDS_TIMER_DRIVER


	)

21 
	#CONFIGURE_MAXIMUM_TASKS
 111

	)

22 
	#CONFIGURE_MAXIMUM_MESSAGE_QUEUES
 1

	)

23 
	#CONFIGURE_TICKS_PER_TIMESLICE
 0

	)

25 
	#CONFIGURE_POSIX_INIT_THREAD_TABLE


	)

27 
	#CONFIGURE_MAXIMUM_POSIX_THREADS
 10

	)

28 
	#CONFIGURE_MAXIMUM_POSIX_KEYS
 10

	)

29 
	#CONFIGURE_MAXIMUM_POSIX_MUTEXES
 20

	)

30 
	#CONFIGURE_MAXIMUM_POSIX_CONDITION_VARIABLES
 10

	)

32 
	~<¹ems/cÚfdefs.h
>

	@src/ada-tests/tmtests/tm15/config.h

16 
	#CONFIGURE_TMTEST


	)

18 
	#CONFIGURE_APPLICATION_NEEDS_CONSOLE_DRIVER


	)

19 
	#CONFIGURE_APPLICATION_NEEDS_TIMER_DRIVER


	)

21 
	#CONFIGURE_MAXIMUM_TASKS
 111

	)

22 
	#CONFIGURE_MAXIMUM_MESSAGE_QUEUES
 1

	)

23 
	#CONFIGURE_TICKS_PER_TIMESLICE
 0

	)

25 
	#CONFIGURE_POSIX_INIT_THREAD_TABLE


	)

27 
	#CONFIGURE_MAXIMUM_POSIX_THREADS
 10

	)

28 
	#CONFIGURE_MAXIMUM_POSIX_KEYS
 10

	)

29 
	#CONFIGURE_MAXIMUM_POSIX_MUTEXES
 20

	)

30 
	#CONFIGURE_MAXIMUM_POSIX_CONDITION_VARIABLES
 10

	)

32 
	~<¹ems/cÚfdefs.h
>

	@src/ada-tests/tmtests/tm16/config.h

16 
	#CONFIGURE_TMTEST


	)

18 
	#CONFIGURE_APPLICATION_NEEDS_CONSOLE_DRIVER


	)

19 
	#CONFIGURE_APPLICATION_NEEDS_TIMER_DRIVER


	)

21 
	#CONFIGURE_MAXIMUM_TASKS
 111

	)

22 
	#CONFIGURE_MAXIMUM_MESSAGE_QUEUES
 1

	)

23 
	#CONFIGURE_TICKS_PER_TIMESLICE
 0

	)

25 
	#CONFIGURE_POSIX_INIT_THREAD_TABLE


	)

27 
	#CONFIGURE_MAXIMUM_POSIX_THREADS
 10

	)

28 
	#CONFIGURE_MAXIMUM_POSIX_KEYS
 10

	)

29 
	#CONFIGURE_MAXIMUM_POSIX_MUTEXES
 20

	)

30 
	#CONFIGURE_MAXIMUM_POSIX_CONDITION_VARIABLES
 10

	)

32 
	~<¹ems/cÚfdefs.h
>

	@src/ada-tests/tmtests/tm17/config.h

16 
	#CONFIGURE_TMTEST


	)

18 
	#CONFIGURE_APPLICATION_NEEDS_CONSOLE_DRIVER


	)

19 
	#CONFIGURE_APPLICATION_NEEDS_TIMER_DRIVER


	)

21 
	#CONFIGURE_MAXIMUM_TASKS
 111

	)

22 
	#CONFIGURE_MAXIMUM_MESSAGE_QUEUES
 1

	)

23 
	#CONFIGURE_TICKS_PER_TIMESLICE
 0

	)

25 
	#CONFIGURE_POSIX_INIT_THREAD_TABLE


	)

27 
	#CONFIGURE_MAXIMUM_POSIX_THREADS
 10

	)

28 
	#CONFIGURE_MAXIMUM_POSIX_KEYS
 10

	)

29 
	#CONFIGURE_MAXIMUM_POSIX_MUTEXES
 20

	)

30 
	#CONFIGURE_MAXIMUM_POSIX_CONDITION_VARIABLES
 10

	)

32 
	~<¹ems/cÚfdefs.h
>

	@src/ada-tests/tmtests/tm18/config.h

16 
	#CONFIGURE_TMTEST


	)

18 
	#CONFIGURE_APPLICATION_NEEDS_CONSOLE_DRIVER


	)

19 
	#CONFIGURE_APPLICATION_NEEDS_TIMER_DRIVER


	)

21 
	#CONFIGURE_MAXIMUM_TASKS
 111

	)

22 
	#CONFIGURE_MAXIMUM_MESSAGE_QUEUES
 1

	)

23 
	#CONFIGURE_TICKS_PER_TIMESLICE
 0

	)

25 
	#CONFIGURE_POSIX_INIT_THREAD_TABLE


	)

27 
	#CONFIGURE_MAXIMUM_POSIX_THREADS
 10

	)

28 
	#CONFIGURE_MAXIMUM_POSIX_KEYS
 10

	)

29 
	#CONFIGURE_MAXIMUM_POSIX_MUTEXES
 20

	)

30 
	#CONFIGURE_MAXIMUM_POSIX_CONDITION_VARIABLES
 10

	)

32 
	~<¹ems/cÚfdefs.h
>

	@src/ada-tests/tmtests/tm19/config.h

16 
	#CONFIGURE_TMTEST


	)

18 
	#CONFIGURE_APPLICATION_NEEDS_CONSOLE_DRIVER


	)

19 
	#CONFIGURE_APPLICATION_NEEDS_TIMER_DRIVER


	)

21 
	#CONFIGURE_MAXIMUM_TASKS
 111

	)

22 
	#CONFIGURE_MAXIMUM_MESSAGE_QUEUES
 1

	)

23 
	#CONFIGURE_TICKS_PER_TIMESLICE
 0

	)

25 
	#CONFIGURE_POSIX_INIT_THREAD_TABLE


	)

27 
	#CONFIGURE_MAXIMUM_POSIX_THREADS
 10

	)

28 
	#CONFIGURE_MAXIMUM_POSIX_KEYS
 10

	)

29 
	#CONFIGURE_MAXIMUM_POSIX_MUTEXES
 20

	)

30 
	#CONFIGURE_MAXIMUM_POSIX_CONDITION_VARIABLES
 10

	)

32 
	~<¹ems/cÚfdefs.h
>

	@src/ada-tests/tmtests/tm20/config.h

16 
	#CONFIGURE_TMTEST


	)

18 
	#CONFIGURE_APPLICATION_NEEDS_CONSOLE_DRIVER


	)

19 
	#CONFIGURE_APPLICATION_NEEDS_TIMER_DRIVER


	)

21 
	#CONFIGURE_MAXIMUM_PARTITIONS
 1

	)

22 
	#CONFIGURE_MAXIMUM_REGIONS
 1

	)

23 
	#CONFIGURE_MAXIMUM_TASKS
 3

	)

24 
	#CONFIGURE_TICKS_PER_TIMESLICE
 0

	)

26 
	#CONFIGURE_POSIX_INIT_THREAD_TABLE


	)

28 
	#CONFIGURE_MAXIMUM_POSIX_THREADS
 10

	)

29 
	#CONFIGURE_MAXIMUM_POSIX_KEYS
 10

	)

30 
	#CONFIGURE_MAXIMUM_POSIX_MUTEXES
 20

	)

31 
	#CONFIGURE_MAXIMUM_POSIX_CONDITION_VARIABLES
 10

	)

33 
	~<¹ems/cÚfdefs.h
>

	@src/ada-tests/tmtests/tm21/config.h

16 
	#CONFIGURE_TMTEST


	)

18 
	#CONFIGURE_APPLICATION_NEEDS_CONSOLE_DRIVER


	)

19 
	#CONFIGURE_APPLICATION_NEEDS_TIMER_DRIVER


	)

21 
	#CONFIGURE_MAXIMUM_TASKS
 102

	)

22 
	#CONFIGURE_MAXIMUM_TIMERS
 100

	)

23 
	#CONFIGURE_MAXIMUM_SEMAPHORES
 100

	)

24 
	#CONFIGURE_MAXIMUM_MESSAGE_QUEUES
 100

	)

25 
	#CONFIGURE_MAXIMUM_PARTITIONS
 100

	)

26 
	#CONFIGURE_MAXIMUM_REGIONS
 100

	)

27 
	#CONFIGURE_MAXIMUM_PORTS
 100

	)

28 
	#CONFIGURE_MAXIMUM_PERIODS
 100

	)

29 
	#CONFIGURE_TICKS_PER_TIMESLICE
 0

	)

31 
	#CONFIGURE_POSIX_INIT_THREAD_TABLE


	)

33 
	#CONFIGURE_MAXIMUM_POSIX_THREADS
 10

	)

34 
	#CONFIGURE_MAXIMUM_POSIX_KEYS
 10

	)

35 
	#CONFIGURE_MAXIMUM_POSIX_MUTEXES
 20

	)

36 
	#CONFIGURE_MAXIMUM_POSIX_CONDITION_VARIABLES
 10

	)

38 
	~<¹ems/cÚfdefs.h
>

	@src/ada-tests/tmtests/tm22/config.h

16 
	#CONFIGURE_TMTEST


	)

18 
	#CONFIGURE_APPLICATION_NEEDS_CONSOLE_DRIVER


	)

19 
	#CONFIGURE_APPLICATION_NEEDS_TIMER_DRIVER


	)

21 
	#CONFIGURE_MAXIMUM_TASKS
 103

	)

22 
	#CONFIGURE_MAXIMUM_MESSAGE_QUEUES
 1

	)

23 
	#CONFIGURE_TICKS_PER_TIMESLICE
 0

	)

25 
	#CONFIGURE_POSIX_INIT_THREAD_TABLE


	)

27 
	#CONFIGURE_MAXIMUM_POSIX_THREADS
 10

	)

28 
	#CONFIGURE_MAXIMUM_POSIX_KEYS
 10

	)

29 
	#CONFIGURE_MAXIMUM_POSIX_MUTEXES
 20

	)

30 
	#CONFIGURE_MAXIMUM_POSIX_CONDITION_VARIABLES
 10

	)

32 
	~<¹ems/cÚfdefs.h
>

	@src/ada-tests/tmtests/tm23/config.h

16 
	#CONFIGURE_TMTEST


	)

18 
	#CONFIGURE_APPLICATION_NEEDS_CONSOLE_DRIVER


	)

19 
	#CONFIGURE_APPLICATION_NEEDS_TIMER_DRIVER


	)

21 
	#CONFIGURE_MAXIMUM_TASKS
 111

	)

22 
	#CONFIGURE_MAXIMUM_TIMERS
 110

	)

23 
	#CONFIGURE_TICKS_PER_TIMESLICE
 0

	)

25 
	#CONFIGURE_POSIX_INIT_THREAD_TABLE


	)

27 
	#CONFIGURE_MAXIMUM_POSIX_THREADS
 10

	)

28 
	#CONFIGURE_MAXIMUM_POSIX_KEYS
 10

	)

29 
	#CONFIGURE_MAXIMUM_POSIX_MUTEXES
 20

	)

30 
	#CONFIGURE_MAXIMUM_POSIX_CONDITION_VARIABLES
 10

	)

32 
	~<¹ems/cÚfdefs.h
>

	@src/ada-tests/tmtests/tm24/config.h

16 
	#CONFIGURE_TMTEST


	)

18 
	#CONFIGURE_APPLICATION_NEEDS_CONSOLE_DRIVER


	)

19 
	#CONFIGURE_APPLICATION_NEEDS_TIMER_DRIVER


	)

21 
	#CONFIGURE_MAXIMUM_TASKS
 111

	)

22 
	#CONFIGURE_TICKS_PER_TIMESLICE
 0

	)

24 
	#CONFIGURE_POSIX_INIT_THREAD_TABLE


	)

26 
	#CONFIGURE_MAXIMUM_POSIX_THREADS
 10

	)

27 
	#CONFIGURE_MAXIMUM_POSIX_KEYS
 10

	)

28 
	#CONFIGURE_MAXIMUM_POSIX_MUTEXES
 20

	)

29 
	#CONFIGURE_MAXIMUM_POSIX_CONDITION_VARIABLES
 10

	)

31 
	~<¹ems/cÚfdefs.h
>

	@src/ada-tests/tmtests/tm25/config.h

16 
	#CONFIGURE_TMTEST


	)

18 
	#CONFIGURE_APPLICATION_NEEDS_CONSOLE_DRIVER


	)

19 
	#CONFIGURE_APPLICATION_NEEDS_TIMER_DRIVER


	)

21 
	#CONFIGURE_MAXIMUM_TASKS
 111

	)

22 
	#CONFIGURE_MAXIMUM_SEMAPHORES
 1

	)

23 
	#CONFIGURE_TICKS_PER_TIMESLICE
 0

	)

25 
	#CONFIGURE_POSIX_INIT_THREAD_TABLE


	)

27 
	#CONFIGURE_MAXIMUM_POSIX_THREADS
 10

	)

28 
	#CONFIGURE_MAXIMUM_POSIX_KEYS
 10

	)

29 
	#CONFIGURE_MAXIMUM_POSIX_MUTEXES
 20

	)

30 
	#CONFIGURE_MAXIMUM_POSIX_CONDITION_VARIABLES
 10

	)

32 
	~<¹ems/cÚfdefs.h
>

	@src/ada-tests/tmtests/tm28/config.h

16 
	#CONFIGURE_TMTEST


	)

18 
	#CONFIGURE_APPLICATION_NEEDS_CONSOLE_DRIVER


	)

19 
	#CONFIGURE_APPLICATION_NEEDS_TIMER_DRIVER


	)

21 
	#CONFIGURE_MAXIMUM_TASKS
 2

	)

22 
	#CONFIGURE_MAXIMUM_PORTS
 1

	)

23 
	#CONFIGURE_TICKS_PER_TIMESLICE
 0

	)

25 
	#CONFIGURE_POSIX_INIT_THREAD_TABLE


	)

27 
	#CONFIGURE_MAXIMUM_POSIX_THREADS
 10

	)

28 
	#CONFIGURE_MAXIMUM_POSIX_KEYS
 10

	)

29 
	#CONFIGURE_MAXIMUM_POSIX_MUTEXES
 20

	)

30 
	#CONFIGURE_MAXIMUM_POSIX_CONDITION_VARIABLES
 10

	)

32 
	~<¹ems/cÚfdefs.h
>

	@src/ada-tests/tmtests/tm29/config.h

16 
	#CONFIGURE_TMTEST


	)

18 
	#CONFIGURE_APPLICATION_NEEDS_CONSOLE_DRIVER


	)

19 
	#CONFIGURE_APPLICATION_NEEDS_TIMER_DRIVER


	)

21 
	#CONFIGURE_MAXIMUM_TASKS
 111

	)

22 
	#CONFIGURE_MAXIMUM_PERIODS
 111

	)

23 
	#CONFIGURE_TICKS_PER_TIMESLICE
 0

	)

25 
	#CONFIGURE_POSIX_INIT_THREAD_TABLE


	)

27 
	#CONFIGURE_MAXIMUM_POSIX_THREADS
 10

	)

28 
	#CONFIGURE_MAXIMUM_POSIX_KEYS
 10

	)

29 
	#CONFIGURE_MAXIMUM_POSIX_MUTEXES
 20

	)

30 
	#CONFIGURE_MAXIMUM_POSIX_CONDITION_VARIABLES
 10

	)

32 
	~<¹ems/cÚfdefs.h
>

	@src/ada-tests/tmtests/tmck/config.h

16 
	#CONFIGURE_TMTEST


	)

18 
	#CONFIGURE_APPLICATION_NEEDS_CONSOLE_DRIVER


	)

19 
	#CONFIGURE_APPLICATION_NEEDS_TIMER_DRIVER


	)

21 
	#CONFIGURE_MAXIMUM_TASKS
 2

	)

22 
	#CONFIGURE_MAXIMUM_SEMAPHORES
 1

	)

23 
	#CONFIGURE_TICKS_PER_TIMESLICE
 0

	)

25 
	#CONFIGURE_POSIX_INIT_THREAD_TABLE


	)

27 
	#CONFIGURE_MAXIMUM_POSIX_THREADS
 10

	)

28 
	#CONFIGURE_MAXIMUM_POSIX_KEYS
 10

	)

29 
	#CONFIGURE_MAXIMUM_POSIX_MUTEXES
 20

	)

30 
	#CONFIGURE_MAXIMUM_POSIX_CONDITION_VARIABLES
 10

	)

32 
	~<¹ems/cÚfdefs.h
>

	@src/ada-tests/tmtests/tmoverhd/config.h

16 
	#CONFIGURE_TMTEST


	)

18 
	#CONFIGURE_APPLICATION_NEEDS_CONSOLE_DRIVER


	)

19 
	#CONFIGURE_APPLICATION_NEEDS_TIMER_DRIVER


	)

21 
	#CONFIGURE_MAXIMUM_TASKS
 2

	)

22 
	#CONFIGURE_MAXIMUM_SEMAPHORES
 1

	)

23 
	#CONFIGURE_TICKS_PER_TIMESLICE
 0

	)

25 
	#CONFIGURE_POSIX_INIT_THREAD_TABLE


	)

27 
	#CONFIGURE_MAXIMUM_POSIX_THREADS
 10

	)

28 
	#CONFIGURE_MAXIMUM_POSIX_KEYS
 10

	)

29 
	#CONFIGURE_MAXIMUM_POSIX_MUTEXES
 20

	)

30 
	#CONFIGURE_MAXIMUM_POSIX_CONDITION_VARIABLES
 10

	)

32 
	~<¹ems/cÚfdefs.h
>

	@src/lib/libbsp/arm/csb337/console/fbcons.c

17 
	~<b¥.h
>

18 
	~<¹ems/libio.h
>

19 
	~<rmios.h
>

21 
	~<¹ems/b¥Io.h
>

22 
	~<libch/£rl.h
>

23 
	~<libch/£rsuµ.h
>

24 
	~"£d1356.h
"

27 
fbcÚs_f¡_Ý
(
majÜ
, 
mÜ
, *
¬g
);

28 
fbcÚs_Ï¡_þo£
(
majÜ
, 
mÜ
, *
¬g
);

29 
fbcÚs_»ad
(
mÜ
);

30 
ssize_t
 
fbcÚs_wre
(
mÜ
, cÚ¡ *
buf
, 
size_t
 
Ën
);

31 
fbcÚs_
(
mÜ
);

32 
fbcÚs_wre_pÞËd
(
mÜ
, 
c
);

33 
fbcÚs_£t_©ibus
(
mÜ
, cÚ¡ 
rmios
 *
t
);

36 cÚ¡ 
cÚsÞe_âs
 
	gfbcÚs_âs
 =

38 
libch_£rl_deçuÉ_´obe
,

39 
fbcÚs_f¡_Ý
,

40 
fbcÚs_Ï¡_þo£
,

41 
fbcÚs_»ad
,

42 
fbcÚs_wre
,

43 
fbcÚs_
,

44 
fbcÚs_wre_pÞËd
,

45 
fbcÚs_£t_©ibus
,

46 
FALSE


57 
	$fbcÚs_f¡_Ý
(
majÜ
, 
mÜ
, *
¬g
)

61 
	}
}

69 
	$fbcÚs_Ï¡_þo£
(
majÜ
, 
mÜ
, *
¬g
)

73 
	}
}

82 
	$fbcÚs_»ad
(
mÜ
)

86 
	}
}

94 
ssize_t
 
	$fbcÚs_wre
(
mÜ
, cÚ¡ *
buf
, 
size_t
 
Ën
)

96 
i
;

99  
i
=0 ; i<
Ën
 ; i++ )

100 
	`£d_putch¬
Ð
buf
[
i
] );

103 
	}
}

107 
	$fbcÚs_
(
mÜ
)

110 
	`£d_
();

111 
	}
}

114 
	$fbcÚs_wre_pÞËd
(
mÜ
, 
c
)

117 
	`£d_putch¬
Ð
c
 );

118 
	}
}

121 
	$fbcÚs_£t_©ibus
(
mÜ
, cÚ¡ 
rmios
 *
t
)

125 
	}
}

	@src/lib/libbsp/arm/csb337/console/font8x16.h

54 
	#FONT_WIDTH
 8

	)

55 
	#FONT_HEIGHT
 16

	)

56 
	#FIRST_CHAR
 0x20

	)

57 
	#LAST_CHAR
 0x7F

	)

58 
	#CURSOR_ON
 0x7F

	)

59 
	#CURSOR_OFF
 0x20

	)

61 cÚ¡ 
ut8_t
 
	gfÚt8x16
[] = {

	@src/lib/libbsp/arm/csb337/console/sed1356.c

36 
	~<b¥.h
>

38 
	~<¡dlib.h
>

39 
	~<¡dio.h
>

40 
	~"£d1356.h
"

41 
	~"fÚt8x16.h
"

43 
	gmode900lq
;

44 
	gPIXELS_PER_ROW
;

45 
	gPIXELS_PER_COL
;

46 
	gCOLS_PER_SCREEN
;

47 
	gROWS_PER_SCREEN
;

48 
	gSED_HOR_PULSE_WIDTH_LCD
;

49 
	gSED_VER_PULSE_START_LCD
;

50 
	gSED_HOR_PULSE_START_LCD
;

51 
	gSED_HOR_NONDISP_LCD
;

52 
	gSED_VER_NONDISP_LCD
;

53 
	gSED_VER_PULSE_WIDTH_LCD
;

56 
	g£d_cÞÜ_dth
;

57 
	g£d_fg_cÞÜ
;

58 
	g£d_bg_cÞÜ
;

59 
	g£d_cÞ
;

60 
	g£d_row
;

61 
	g£d_di¥_mode_üt
;

62 
	g£d135x_ok
;

63 
	g£d135x_t¡
;

64 
ut32_t
 
	g£d_fb_off£t
;

66 
£d_wrech¬
(
ut8_t
 
c
);

67 
£d_süÞl
();

69 
	#SED_REG_BASE
 0x30000000

	)

70 
	#SED_MEM_BASE
 (
SED_REG_BASE
 + 0x00200000)

	)

71 
	#SED_STEP
 1

	)

73 
	#SED_REG16
(
_x_
è*(vÞ©
ut16_t
 *)((
ut32_t
)
SED_REG_BASE
 + (((ut32_t)_x_ * 
SED_STEP
è^ 0)è

	)

74 
	#RD_FB16
(
_»g_
,
_v®_
è((_v®_èð*((vÞ©
ut16_t
 *)(((
ut32_t
)
SED_MEM_BASE
 + ((ut32_t)(_»g_ * 
SED_STEP
è^ 0)))))

	)

75 
	#WR_FB16
(
_»g_
,
_v®_
è(*((vÞ©
ut16_t
 *)(((
ut32_t
)
SED_MEM_BASE
 + ((ut32_t)(_»g_ * 
SED_STEP
è^ 0)))èð(_v®_))

	)

78 
	#SED1356_REG_LCD_HOR_DISP
 
	`SED_REG16
(0x32)

	)

79 
	#SED1356_REG_LCD_HOR_NONDISP_ªd_START
 
	`SED_REG16
(0x34)

	)

80 
	#SED1356_REG_LCD_HOR_PULSE
 
	`SED_REG16
(0x36)

	)

81 
	#SED1356_REG_LCD_VER_DISP_HT_LO_ªd_HI
 
	`SED_REG16
(0x38)

	)

82 
	#SED1356_REG_LCD_VER_NONDISP_ªd_START
 
	`SED_REG16
(0x3a)

	)

83 
	#SED1356_REG_LCD_VER_PULSE
 
	`SED_REG16
(0x3c)

	)

84 
	#SED1356_REG_LCD_DISP_MODE_ªd_MISC
 
	`SED_REG16
(0x40)

	)

85 
	#SED1356_REG_LCD_DISP_START_LO_ªd_MID
 
	`SED_REG16
(0x42)

	)

86 
	#SED1356_REG_LCD_DISP_START_HI
 
	`SED_REG16
(0x44)

	)

87 
	#SED1356_REG_LCD_ADD_OFFSET_LO_ªd_HI
 
	`SED_REG16
(0x46)

	)

88 
	#SED1356_REG_LCD_PIXEL_PAN
 
	`SED_REG16
(0x48)

	)

89 
	#SED1356_REG_LCD_FIFO_THRESH_LO_ªd_HI
 
	`SED_REG16
(0x4a)

	)

93 
	#H2SED
(
_x_
è(_x_)

	)

95 
	#FB_SIZE
 (640 * 480)

	)

96 
	#SED_ROW_SIZE
(
_dth_
è((
PIXELS_PER_ROW
 * _dth_è/ 8)

	)

97 
	#SED_FB_SIZE
(
_dth_
è(((
PIXELS_PER_COL
 * 
PIXELS_PER_ROW
è* _dth_è/ 8)

	)

99 
	#FONT_WIDTH
 8

	)

100 
	#FONT_HEIGHT
 16

	)

102 
	#SED_GET_ADD
(
_row_
, 
_cÞ_
, 
_dth_
) \

103 (((((
_row_
 * 
PIXELS_PER_ROW
è* 
FONT_HEIGHT
) \

104 + (
_cÞ_
 * 
FONT_WIDTH
)) \

105 * 
_dth_
è/ 8)

	)

108 
	#SED_GET_PHYS_ADD
(
_»g_
) \

109 (vÞ©)(
SED_MEM_BASE
 + ((
_»g_
 * 
SED_STEP
è^ 0))

	)

112 
	~"£d1356_16b.h
"

115 
	g£d135x_t¡
 = 0;

117 
	$£d_wre_äame_bufãr
(

118 
ut32_t
 
i
,

119 
ut16_t
 
wr16


122 
	`WR_FB16
(
i
, 
wr16
);

123 
	}
}

125 
	$£d_äame_bufãr_size
()

127  
	`SED_FB_SIZE
(
£d_cÞÜ_dth
);

128 
	}
}

130 
	$£d_þr_row
(
ch¬_row
)

132 
£d_mem_add
;

133 
i
;

134 
ut16_t
 
wr16
;

137 
£d_mem_add
 = 
	`SED_GET_ADD
(
ch¬_row
, 0, 
£d_cÞÜ_dth
);

139 #ifdeà
SED_DBG


140 
£d135x_t¡
 = 1;

141 
	`´tf
("SED CË¬ Row %d, FB Add 0x%08lx, CPU Add 0x%08lx.\À", 
ch¬_row
, 
£d_mem_add
, 
	`SED_GET_PHYS_ADD
(sed_mem_add));

142 
£d135x_t¡
 = 0;

145 
£d_cÞÜ_dth
)

148 
wr16
 = ((
£d_bg_cÞÜ
 << 12) | (sed_bg_color << 8) | (sed_bg_color << 4) | (sed_bg_color << 0));

149 #ifdeà
SED_DBG


150 
£d135x_t¡
 = 1;

151 
	`´tf
("SED CË¬ Row %d, FB Add 0x%08lxØ0x%08lx.\À", 
ch¬_row
, 
£d_mem_add
, sed_mem_add + ((
PIXELS_PER_ROW
 * 
FONT_HEIGHT
) / 2));

152 
£d135x_t¡
 = 0;

154 
i
 = 0; i < ((
PIXELS_PER_ROW
 * 
FONT_HEIGHT
) / 2); i += 2){

155 
	`WR_FB16
(
£d_mem_add
, 
wr16
);

156 
£d_mem_add
 += 2;

160 
wr16
 = ((
£d_bg_cÞÜ
 << 8) | (sed_bg_color << 0));

161 
i
 = 0; i < (
PIXELS_PER_ROW
 * 
FONT_HEIGHT
); i += 2){

162 
	`WR_FB16
(
£d_mem_add
, 
wr16
);

163 
£d_mem_add
 += 2;

167 
wr16
 = ((
vga_lookup
[
£d_bg_cÞÜ
]));

168 
i
 = 0; i < ((
PIXELS_PER_ROW
 * 
FONT_HEIGHT
) * 2); i += 2){

169 
	`WR_FB16
(
£d_mem_add
, 
wr16
);

170 
£d_mem_add
 += 2;

174 
	}
}

176 
	$£d_
()

178 
mode900lq
 = 0;

179 
PIXELS_PER_ROW
 = 640;

180 
PIXELS_PER_COL
 = 480;

181 
COLS_PER_SCREEN
 = 80;

182 
ROWS_PER_SCREEN
 = 30;

183 
SED_HOR_PULSE_WIDTH_LCD
 = 0x0b;

184 
SED_HOR_NONDISP_LCD
 = 0x13;

185 
SED_VER_PULSE_WIDTH_LCD
 = 0x01;

186 
SED_VER_PULSE_START_LCD
 = 0x09;

187 
SED_VER_NONDISP_LCD
 = 0x2c;

189 
£d_cÞÜ_dth
 = 16;

190 
£d_fg_cÞÜ
 = 14;

191 
£d_bg_cÞÜ
 = 1;

192 
£d_di¥_mode_üt
 = 0;

193 
£d_fb_off£t
 = 0x00;

194 
£d_row
 = 0;

195 
£d_cÞ
 = 0;

197 
£d135x_ok
 = 1;

198 
£d135x_t¡
 = 0;

199 
	`£d_þrsün
();

200 
	}
}

208 
	$£d_putch¬
(
c
)

211 ià((
£d135x_ok
 =ð0è|| (
£d135x_t¡
 == 1)) ;

216 
c
) {

218 
£d_cÞ
 = 0;

221 
£d_cÞ
 = 0;

222 
	`£d_süÞl
();

225 
£d_cÞ
--;

226 ià(
£d_cÞ
 < 0) {

227 
£d_row
--;

228 ià(
£d_row
 < 0)

229 
£d_row
 = 0;

230 
£d_cÞ
 = 
COLS_PER_SCREEN
 - 1;

232 
c
 = 0;

233 
	`£d_wrech¬
(
c
);

236 ià(((
ut8_t
)
c
 < 
FIRST_CHAR
è|| ((ut8_t)ø> 
LAST_CHAR
))

238 
c
 -ð
FIRST_CHAR
;

239 
	`£d_wrech¬
(
c
);

241 
£d_cÞ
++;

242 ià(
£d_cÞ
 =ð
COLS_PER_SCREEN
) {

243 
£d_cÞ
 = 0;

244 
	`£d_süÞl
();

249 
	}
}

257 
	$£d_wrech¬
(
ut8_t
 
c
)

259 
ut32_t
 
£d_mem_add
;

260 
fÚt_row
, 
fÚt_cÞ
;

261 
ut8_t
 
fÚt_d©a8
;

262 
ut16_t
 
wr16
;

267 
£d_mem_add
 = 
	`SED_GET_ADD
(
£d_row
, 
£d_cÞ
, 
£d_cÞÜ_dth
);

269 #ifdeà
SED_DBG


270 
£d135x_t¡
 = 1;

271 
	`´tf
("SED wrech¬row %d, cÞ %d, FB Add 0x%08lx, CPU Add 0x%08lx.\À", 
£d_row
, 
£d_cÞ
, 
£d_mem_add
, 
	`SED_GET_PHYS_ADD
(sed_mem_add));

272 
£d135x_t¡
 = 0;

275 ià(
FONT_WIDTH
 == 8) {

276 
£d_cÞÜ_dth
) {

279 
fÚt_row
 = 0; fÚt_row < 
FONT_HEIGHT
; font_row++) {

281 
fÚt_d©a8
 = 
fÚt8x16
[(
c
 * 
FONT_HEIGHT
è+ 
fÚt_row
];

284 
fÚt_cÞ
 = 0; font_col < 8; font_col += 4)

287 
wr16
 = (((
fÚt_d©a8
 & 0x80è? 
£d_fg_cÞÜ
 << 12 : 
£d_bg_cÞÜ
 << 12)

288 | ((
fÚt_d©a8
 & 0x40è? 
£d_fg_cÞÜ
 << 8 : 
£d_bg_cÞÜ
 << 8)

289 | ((
fÚt_d©a8
 & 0x20è? 
£d_fg_cÞÜ
 << 4 : 
£d_bg_cÞÜ
 << 4)

290 | ((
fÚt_d©a8
 & 0x10è? 
£d_fg_cÞÜ
 << 0 : 
£d_bg_cÞÜ
 << 0));

291 
fÚt_d©a8
 = font_data8 << 4;

292 
	`WR_FB16
(
£d_mem_add
, 
wr16
);

296 ià(
£d_row
 > (
ROWS_PER_SCREEN
 - 1)) {

297 
	`WR_FB16
((
£d_mem_add
 - 
	`SED_FB_SIZE
(
£d_cÞÜ_dth
)), 
wr16
);

299 
£d_mem_add
 += 2;

302 
£d_mem_add
 +ð(
	`SED_ROW_SIZE
(
£d_cÞÜ_dth
è- ((
FONT_WIDTH
 * sed_color_depth) / 8));

308 
fÚt_row
 = 0; fÚt_row < 
FONT_HEIGHT
; font_row++) {

310 
fÚt_d©a8
 = 
fÚt8x16
[(
c
 * 
FONT_HEIGHT
è+ 
fÚt_row
];

311 
fÚt_cÞ
 = 0; font_col < 8; font_col += 2)

314 
wr16
 = (((
fÚt_d©a8
 & 0x80è? 
£d_fg_cÞÜ
 << 8 : 
£d_bg_cÞÜ
 << 8)

315 | ((
fÚt_d©a8
 & 0x40è? 
£d_fg_cÞÜ
 << 0 : 
£d_bg_cÞÜ
 << 0));

316 
fÚt_d©a8
 = font_data8 << 2;

317 
	`WR_FB16
(
£d_mem_add
, 
wr16
);

321 ià(
£d_row
 > (
ROWS_PER_SCREEN
 - 1)) {

322 
	`WR_FB16
((
£d_mem_add
 - 
	`SED_FB_SIZE
(
£d_cÞÜ_dth
)), 
wr16
);

324 
£d_mem_add
 += 2;

327 
£d_mem_add
 +ð(
	`SED_ROW_SIZE
(
£d_cÞÜ_dth
è- ((
FONT_WIDTH
 * sed_color_depth) / 8));

333 
fÚt_row
 = 0; fÚt_row < 
FONT_HEIGHT
; font_row++) {

335 
fÚt_d©a8
 = 
fÚt8x16
[(
c
 * 
FONT_HEIGHT
è+ 
fÚt_row
];

336 
fÚt_cÞ
 = 0; font_col < 8; font_col++)

339 
wr16
 = ((
fÚt_d©a8
 & 0x80) ?

340 
vga_lookup
[
£d_fg_cÞÜ
] : vga_lookup[
£d_bg_cÞÜ
]);

341 
fÚt_d©a8
 = font_data8 << 1;

342 
	`WR_FB16
(
£d_mem_add
, 
wr16
);

346 ià(
£d_row
 > (
ROWS_PER_SCREEN
 - 1)) {

347 
	`WR_FB16
((
£d_mem_add
 - 
	`SED_FB_SIZE
(
£d_cÞÜ_dth
)), 
wr16
);

349 
£d_mem_add
 += 2;

352 
£d_mem_add
 +ð(
	`SED_ROW_SIZE
(
£d_cÞÜ_dth
è- ((
FONT_WIDTH
 * sed_color_depth) / 8));

362 
	}
}

364 
	$£d_upd©e_fb_off£t
()

367 ià(
£d_di¥_mode_üt
) {

371 ià(
SED1356_REG_DISP_MODE
 & 
	`H2SED
(
SED1356_DISP_MODE_CRT
)) {

372 (
SED1356_REG_CRT_VER_NONDISP_ªd_START
 & 
	`H2SED
(
SED1356_VER_NONDISP
)) == 0) {}

373 (
SED1356_REG_CRT_VER_NONDISP_ªd_START
 & 
	`H2SED
(
SED1356_VER_NONDISP
)) == 1) {}

375 
SED1356_REG_CRT_DISP_START_LO_ªd_MID
 = 
	`H2SED
(((
£d_fb_off£t
 & 0x00ffff) >> 0));

376 
SED1356_REG_CRT_DISP_START_HI
 = 
	`H2SED
(((
£d_fb_off£t
 & 0x070000) >> 16));

380 ià(
SED1356_REG_DISP_MODE
 & 
	`H2SED
(
SED1356_DISP_MODE_LCD
)) {

381 (
SED1356_REG_LCD_VER_NONDISP_ªd_START
 & 
	`H2SED
(
SED1356_VER_NONDISP
)) == 0) {}

382 (
SED1356_REG_LCD_VER_NONDISP_ªd_START
 & 
	`H2SED
(
SED1356_VER_NONDISP
)) == 1) {}

384 
SED1356_REG_LCD_DISP_START_LO_ªd_MID
 = 
	`H2SED
(((
£d_fb_off£t
 & 0x00ffff) >> 0));

385 
SED1356_REG_LCD_DISP_START_HI
 = 
	`H2SED
(((
£d_fb_off£t
 & 0x070000) >> 16));

387 
	}
}

408 
	$£d_süÞl
()

410 
£d_row
++;

413 
	`£d_þr_row
(
£d_row
);

414 ià(
£d_row
 > (
ROWS_PER_SCREEN
 - 1)) {

415 
	`£d_þr_row
(
£d_row
 - 
ROWS_PER_SCREEN
);

421 ià(
£d_row
 > (
ROWS_PER_SCREEN
 - 1)) {

422 ià(
£d_row
 > ((
ROWS_PER_SCREEN
 * 2) - 1)) {

423 
£d_fb_off£t
 = 0x00;

424 
£d_row
 = 0;

425 
	`£d_þrsün
();

428 
£d_fb_off£t
 +ð(
	`SED_GET_ADD
(1, 0, 
£d_cÞÜ_dth
) / 2);

430 
	`£d_upd©e_fb_off£t
();

432 
	}
}

434 
	$£d_put¡rg
(*
s
)

436 *
p
 = 
s
;

437 *
p
)

438 
	`£d_putch¬
(*
p
++);

439 
	}
}

441 
	$£d_þrsün
()

443 
i
;

444 
ut16_t
 
wr16
;

445 
bg
 = 
£d_bg_cÞÜ
;

446 
fbsize
 = 
	`£d_äame_bufãr_size
();

449 
fbsize
 *= 2;

452 
£d_cÞÜ_dth
){

453 4: 
wr16
 = 
bg
 | bg << 4 | bg << 8 | bg << 12; ;

454 8: 
wr16
 = 
bg
 | bg << 8; ;

456 : 
wr16
 = 
vga_lookup
[
bg
]; ;

458 
i
 = 0; i < 
fbsize
; i += 2){

459 
	`£d_wre_äame_bufãr
(
i
, 
wr16
);

461 
	}
}

	@src/lib/libbsp/arm/csb337/console/sed1356_16bit.h

53 #iâdeà
__£d1356_16b_h


54 
	#__£d1356_16b_h


	)

56 
	~"bs.h
"

79 
	#SED1356_REG_REV_ªd_MISC
 
	`SED_REG16
(0x00)

	)

80 
	#SED1356_REG_GPIO_CFG
 
	`SED_REG16
(0x04)

	)

81 
	#SED1356_REG_GPIO_CTL
 
	`SED_REG16
(0x08)

	)

82 
	#SED1356_REG_MD_CFG_RD_LO_ªd_HI
 
	`SED_REG16
(0x0c)

	)

83 
	#SED1356_REG_MCLK_CFG
 
	`SED_REG16
(0x10)

	)

84 
	#SED1356_REG_LCD_PCLK_CFG
 
	`SED_REG16
(0x14)

	)

85 
	#SED1356_REG_CRT_PCLK_CFG
 
	`SED_REG16
(0x18)

	)

86 
	#SED1356_REG_MEDIA_PCLK_CFG
 
	`SED_REG16
(0x1c)

	)

87 
	#SED1356_REG_WAIT_STATE
 
	`SED_REG16
(0x1e)

	)

88 
	#SED1356_REG_MEM_CFG_ªd_REF_RATE
 
	`SED_REG16
(0x20)

	)

89 
	#SED1356_REG_MEM_TMG0_ªd_1
 
	`SED_REG16
(0x2a)

	)

90 
	#SED1356_REG_PANEL_TYPE_ªd_MOD_RATE
 
	`SED_REG16
(0x30)

	)

92 
	#SED1356_REG_LCD_HOR_DISP
 
	`SED_REG16
(0x32)

	)

93 
	#SED1356_REG_LCD_HOR_NONDISP_ªd_START
 
	`SED_REG16
(0x34)

	)

94 
	#SED1356_REG_LCD_HOR_PULSE
 
	`SED_REG16
(0x36)

	)

95 
	#SED1356_REG_LCD_VER_DISP_HT_LO_ªd_HI
 
	`SED_REG16
(0x38)

	)

96 
	#SED1356_REG_LCD_VER_NONDISP_ªd_START
 
	`SED_REG16
(0x3a)

	)

97 
	#SED1356_REG_LCD_VER_PULSE
 
	`SED_REG16
(0x3c)

	)

98 
	#SED1356_REG_LCD_DISP_MODE_ªd_MISC
 
	`SED_REG16
(0x40)

	)

99 
	#SED1356_REG_LCD_DISP_START_LO_ªd_MID
 
	`SED_REG16
(0x42)

	)

100 
	#SED1356_REG_LCD_DISP_START_HI
 
	`SED_REG16
(0x44)

	)

101 
	#SED1356_REG_LCD_ADD_OFFSET_LO_ªd_HI
 
	`SED_REG16
(0x46)

	)

102 
	#SED1356_REG_LCD_PIXEL_PAN
 
	`SED_REG16
(0x48)

	)

103 
	#SED1356_REG_LCD_FIFO_THRESH_LO_ªd_HI
 
	`SED_REG16
(0x4a)

	)

105 
	#SED1356_REG_CRT_HOR_DISP
 
	`SED_REG16
(0x50)

	)

106 
	#SED1356_REG_CRT_HOR_NONDISP_ªd_START
 
	`SED_REG16
(0x52)

	)

107 
	#SED1356_REG_CRT_HOR_PULSE
 
	`SED_REG16
(0x54)

	)

108 
	#SED1356_REG_CRT_VER_DISP_HT_LO_ªd_HI
 
	`SED_REG16
(0x56)

	)

109 
	#SED1356_REG_CRT_VER_NONDISP_ªd_START
 
	`SED_REG16
(0x58)

	)

110 
	#SED1356_REG_CRT_VER_PULSE_ªd_OUT_CTL
 
	`SED_REG16
(0x5a)

	)

111 
	#SED1356_REG_CRT_DISP_MODE
 
	`SED_REG16
(0x60)

	)

112 
	#SED1356_REG_CRT_DISP_START_LO_ªd_MID
 
	`SED_REG16
(0x62)

	)

113 
	#SED1356_REG_CRT_DISP_START_HI
 
	`SED_REG16
(0x64)

	)

114 
	#SED1356_REG_CRT_ADD_OFFSET_LO_ªd_HI
 
	`SED_REG16
(0x66)

	)

115 
	#SED1356_REG_CRT_PIXEL_PAN
 
	`SED_REG16
(0x68)

	)

116 
	#SED1356_REG_CRT_FIFO_THRESH_LO_ªd_HI
 
	`SED_REG16
(0x6a)

	)

118 
	#SED1356_REG_LCD_CURSOR_CTL_ªd_START_ADD
 
	`SED_REG16
(0x70)

	)

119 
	#SED1356_REG_LCD_CURSOR_X_POS_LO_ªd_HI
 
	`SED_REG16
(0x72)

	)

120 
	#SED1356_REG_LCD_CURSOR_Y_POS_LO_ªd_HI
 
	`SED_REG16
(0x74)

	)

121 
	#SED1356_REG_LCD_CURSOR_BLUE_ªd_GREEN_CLR_0
 
	`SED_REG16
(0x76)

	)

122 
	#SED1356_REG_LCD_CURSOR_RED_CLR_0
 
	`SED_REG16
(0x78)

	)

123 
	#SED1356_REG_LCD_CURSOR_BLUE_ªd_GREEN_CLR_1
 
	`SED_REG16
(0x7a)

	)

124 
	#SED1356_REG_LCD_CURSOR_RED_CLR_1
 
	`SED_REG16
(0x7c)

	)

125 
	#SED1356_REG_LCD_CURSOR_FIFO_THRESH
 
	`SED_REG16
(0x7e)

	)

127 
	#SED1356_REG_CRT_CURSOR_CTL_ªd_START_ADD
 
	`SED_REG16
(0x80)

	)

128 
	#SED1356_REG_CRT_CURSOR_X_POS_LO_ªd_HI
 
	`SED_REG16
(0x82)

	)

129 
	#SED1356_REG_CRT_CURSOR_Y_POS_LO_ªd_HI
 
	`SED_REG16
(0x84)

	)

130 
	#SED1356_REG_CRT_CURSOR_BLUE_ªd_GREEN_CLR_0
 
	`SED_REG16
(0x86)

	)

131 
	#SED1356_REG_CRT_CURSOR_RED_CLR_0
 
	`SED_REG16
(0x88)

	)

132 
	#SED1356_REG_CRT_CURSOR_BLUE_ªd_GREEN_CLR_1
 
	`SED_REG16
(0x8a)

	)

133 
	#SED1356_REG_CRT_CURSOR_RED_CLR_1
 
	`SED_REG16
(0x8c)

	)

134 
	#SED1356_REG_CRT_CURSOR_FIFO_THRESH
 
	`SED_REG16
(0x8e)

	)

136 
	#SED1356_REG_BLT_CTL_0_ªd_1
 
	`SED_REG16
(0x100)

	)

137 
	#SED1356_REG_BLT_ROP_CODE_ªd_BLT_OP
 
	`SED_REG16
(0x102)

	)

138 
	#SED1356_REG_BLT_SRC_START_LO_ªd_MID
 
	`SED_REG16
(0x104)

	)

139 
	#SED1356_REG_BLT_SRC_START_HI
 
	`SED_REG16
(0x106)

	)

140 
	#SED1356_REG_BLT_DEST_START_LO_ªd_MID
 
	`SED_REG16
(0x108)

	)

141 
	#SED1356_REG_BLT_DEST_START_HI
 
	`SED_REG16
(0x10a)

	)

142 
	#SED1356_REG_BLT_ADD_OFFSET_LO_ªd_HI
 
	`SED_REG16
(0x10c)

	)

143 
	#SED1356_REG_BLT_WID_LO_ªd_HI
 
	`SED_REG16
(0x110)

	)

144 
	#SED1356_REG_BLT_HGT_LO_ªd_HI
 
	`SED_REG16
(0x112)

	)

145 
	#SED1356_REG_BLT_BG_CLR_LO_ªd_HI
 
	`SED_REG16
(0x114)

	)

146 
	#SED1356_REG_BLT_FG_CLR_LO_ªd_HI
 
	`SED_REG16
(0x118)

	)

148 
	#SED1356_REG_LUT_MODE
 
	`SED_REG16
(0x1e0)

	)

149 
	#SED1356_REG_LUT_ADD
 
	`SED_REG16
(0x1e2)

	)

150 
	#SED1356_REG_LUT_DATA
 
	`SED_REG16
(0x1e4)

	)

152 
	#SED1356_REG_PWR_CFG_ªd_STAT
 
	`SED_REG16
(0x1f0)

	)

153 
	#SED1356_REG_WATCHDOG_CTL
 
	`SED_REG16
(0x1f4)

	)

154 
	#SED1356_REG_DISP_MODE
 
	`SED_REG16
(0x1fc)

	)

161 
	#SED1356_REV_ID_MASK
 0xfø

	)

162 
	#SED1356_REV_ID_1356
 
BIT4


	)

163 
	#SED1356_REV_ID_1355
 
BIT3


	)

166 
	#SED1356_MISC_HOST_DIS
 
BIT7
 << 8

	)

169 
	#SED1356_GPIO_GPIO3
 
BIT3


	)

170 
	#SED1356_GPIO_GPIO2
 
BIT2


	)

171 
	#SED1356_GPIO_GPIO1
 
BIT1


	)

174 
	#SED1356_MCLK_DIV2
 
BIT4


	)

175 
	#SED1356_MCLK_SRC_BCLK
 
BIT0


	)

176 
	#SED1356_MCLK_SRC_CLKI
 0x00

	)

181 
	#SED1356_PCLK_X2
 
BIT7


	)

182 
	#SED1356_PCLK_DIV1
 0x00 << 4

	)

183 
	#SED1356_PCLK_DIV2
 0x01 << 4

	)

184 
	#SED1356_PCLK_DIV3
 0x02 << 4

	)

185 
	#SED1356_PCLK_DIV4
 0x03 << 4

	)

186 
	#SED1356_PCLK_SRC_CLKI
 0x00

	)

187 
	#SED1356_PCLK_SRC_BCLK
 0x01

	)

188 
	#SED1356_PCLK_SRC_CLKI2
 0x02

	)

189 
	#SED1356_PCLK_SRC_MCLK
 0x03

	)

192 
	#SED1356_MEM_CFG_2CAS_EDO
 0x00

	)

193 
	#SED1356_MEM_CFG_2CAS_FPM
 0x01

	)

194 
	#SED1356_MEM_CFG_2WE_EDO
 0x02

	)

195 
	#SED1356_MEM_CFG_2WE_FPM
 0x03

	)

196 
	#SED1356_MEM_CFG_MASK
 0x03

	)

199 
	#SED1356_REF_TYPE_CBR
 0x00 << 6 << 8

	)

200 
	#SED1356_REF_TYPE_SELF
 0x01 << 6 << 8

	)

201 
	#SED1356_REF_TYPE_NONE
 0x02 << 6 << 8

	)

202 
	#SED1356_REF_TYPE_MASK
 0x03 << 6 << 8

	)

203 
	#SED1356_REF_RATE_64
 0x00 << 0 << 8

	)

204 
	#SED1356_REF_RATE_128
 0x01 << 0 << 8

	)

205 
	#SED1356_REF_RATE_256
 0x02 << 0 << 8

	)

206 
	#SED1356_REF_RATE_512
 0x03 << 0 << 8

	)

207 
	#SED1356_REF_RATE_1024
 0x04 << 0 << 8

	)

208 
	#SED1356_REF_RATE_2048
 0x05 << 0 << 8

	)

209 
	#SED1356_REF_RATE_4096
 0x06 << 0 << 8

	)

210 
	#SED1356_REF_RATE_8192
 0x07 << 0 << 8

	)

211 
	#SED1356_REF_RATE_MASK
 0x07 << 0 << 8

	)

214 
	#SED1356_MEM_TMG0_EDO50_MCLK40
 0x01

	)

215 
	#SED1356_MEM_TMG0_EDO50_MCLK33
 0x01

	)

216 
	#SED1356_MEM_TMG0_EDO60_MCLK33
 0x01

	)

217 
	#SED1356_MEM_TMG0_EDO50_MCLK30
 0x12

	)

218 
	#SED1356_MEM_TMG0_EDO60_MCLK30
 0x01

	)

219 
	#SED1356_MEM_TMG0_EDO70_MCLK30
 0x00

	)

220 
	#SED1356_MEM_TMG0_EDO50_MCLK25
 0x12

	)

221 
	#SED1356_MEM_TMG0_EDO60_MCLK25
 0x12

	)

222 
	#SED1356_MEM_TMG0_EDO70_MCLK25
 0x01

	)

223 
	#SED1356_MEM_TMG0_EDO80_MCLK25
 0x00

	)

224 
	#SED1356_MEM_TMG0_EDO50_MCLK20
 0x12

	)

225 
	#SED1356_MEM_TMG0_EDO60_MCLK20
 0x12

	)

226 
	#SED1356_MEM_TMG0_EDO70_MCLK20
 0x12

	)

227 
	#SED1356_MEM_TMG0_EDO80_MCLK20
 0x01

	)

228 
	#SED1356_MEM_TMG0_FPM50_MCLK25
 0x12

	)

229 
	#SED1356_MEM_TMG0_FPM60_MCLK25
 0x01

	)

230 
	#SED1356_MEM_TMG0_FPM50_MCLK20
 0x12

	)

231 
	#SED1356_MEM_TMG0_FPM60_MCLK20
 0x12

	)

232 
	#SED1356_MEM_TMG0_FPM70_MCLK20
 0x11

	)

233 
	#SED1356_MEM_TMG0_FPM80_MCLK20
 0x01

	)

236 
	#SED1356_MEM_TMG1_EDO50_MCLK40
 0x01 << 8

	)

237 
	#SED1356_MEM_TMG1_EDO50_MCLK33
 0x01 << 8

	)

238 
	#SED1356_MEM_TMG1_EDO60_MCLK33
 0x01 << 8

	)

239 
	#SED1356_MEM_TMG1_EDO50_MCLK30
 0x02 << 8

	)

240 
	#SED1356_MEM_TMG1_EDO60_MCLK30
 0x01 << 8

	)

241 
	#SED1356_MEM_TMG1_EDO70_MCLK30
 0x00 << 8

	)

242 
	#SED1356_MEM_TMG1_EDO50_MCLK25
 0x02 << 8

	)

243 
	#SED1356_MEM_TMG1_EDO60_MCLK25
 0x02 << 8

	)

244 
	#SED1356_MEM_TMG1_EDO70_MCLK25
 0x01 << 8

	)

245 
	#SED1356_MEM_TMG1_EDO80_MCLK25
 0x01 << 8

	)

246 
	#SED1356_MEM_TMG1_EDO50_MCLK20
 0x02 << 8

	)

247 
	#SED1356_MEM_TMG1_EDO60_MCLK20
 0x02 << 8

	)

248 
	#SED1356_MEM_TMG1_EDO70_MCLK20
 0x02 << 8

	)

249 
	#SED1356_MEM_TMG1_EDO80_MCLK20
 0x01 << 8

	)

250 
	#SED1356_MEM_TMG1_FPM50_MCLK25
 0x02 << 8

	)

251 
	#SED1356_MEM_TMG1_FPM60_MCLK25
 0x01 << 8

	)

252 
	#SED1356_MEM_TMG1_FPM50_MCLK20
 0x02 << 8

	)

253 
	#SED1356_MEM_TMG1_FPM60_MCLK20
 0x02 << 8

	)

254 
	#SED1356_MEM_TMG1_FPM70_MCLK20
 0x02 << 8

	)

255 
	#SED1356_MEM_TMG1_FPM80_MCLK20
 0x01 << 8

	)

262 
	#SED1356_PANEL_TYPE_EL
 
BIT7


	)

263 
	#SED1356_PANEL_TYPE_4_9
 (0x00 << 4è

	)

264 
	#SED1356_PANEL_TYPE_8_12
 (0x01 << 4è

	)

265 
	#SED1356_PANEL_TYPE_16
 (0x02 << 4è

	)

266 
	#SED1356_PANEL_TYPE_MASK
 (0x03 << 4)

	)

267 
	#SED1356_PANEL_TYPE_FMT
 
BIT3


	)

268 
	#SED1356_PANEL_TYPE_CLR
 
BIT2


	)

269 
	#SED1356_PANEL_TYPE_DUAL
 
BIT1


	)

270 
	#SED1356_PANEL_TYPE_TFT
 
BIT0


	)

275 
	#SED1356_PULSE_POL_HIGH
 
BIT7


	)

276 
	#SED1356_PULSE_POL_LOW
 0x00

	)

277 
	#SED1356_PULSE_WID
(
_x_
è(_x_ & 0x0fè

	)

280 
	#SED1356_LCD_DISP_BLANK
 
BIT7


	)

281 
	#SED1356_LCD_DISP_SWIV_NORM
 (0x00 << 4è

	)

282 
	#SED1356_LCD_DISP_SWIV_90
 (0x00 << 4)

	)

283 
	#SED1356_LCD_DISP_SWIV_180
 (0x01 << 4)

	)

284 
	#SED1356_LCD_DISP_SWIV_270
 (0x01 << 4)

	)

285 
	#SED1356_LCD_DISP_SWIV_MASK
 (0x01 << 4)

	)

286 
	#SED1356_LCD_DISP_16BPP
 0x05

	)

287 
	#SED1356_LCD_DISP_15BPP
 0x04

	)

288 
	#SED1356_LCD_DISP_8BPP
 0x03

	)

289 
	#SED1356_LCD_DISP_4BPP
 0x02

	)

290 
	#SED1356_LCD_DISP_BPP_MASK
 0x07

	)

293 
	#SED1356_LCD_MISC_DITH
 
BIT1
 << 8

	)

294 
	#SED1356_LCD_MISC_DUAL
 
BIT0
 << 8

	)

297 
	#SED1356_CRT_OUT_CHROM
 
BIT5
 << 8

	)

298 
	#SED1356_CRT_OUT_LUM
 
BIT4
 << 8

	)

299 
	#SED1356_CRT_OUT_DAC_LVL
 
BIT3
 << 8

	)

300 
	#SED1356_CRT_OUT_SVIDEO
 
BIT1
 << 8

	)

301 
	#SED1356_CRT_OUT_PAL
 
BIT0
 << 8

	)

304 
	#SED1356_CRT_DISP_BLANK
 
BIT7


	)

305 
	#SED1356_CRT_DISP_16BPP
 0x05

	)

306 
	#SED1356_CRT_DISP_15BPP
 0x04

	)

307 
	#SED1356_CRT_DISP_8BPP
 0x03

	)

308 
	#SED1356_CRT_DISP_4BPP
 0x02

	)

309 
	#SED1356_CRT_DISP_BPP_MASK
 0x07

	)

312 
	#SED1356_DISP_SWIV_NORM
 (0x00 << 6è

	)

313 
	#SED1356_DISP_SWIV_90
 (0x01 << 6)

	)

314 
	#SED1356_DISP_SWIV_180
 (0x00 << 6)

	)

315 
	#SED1356_DISP_SWIV_270
 (0x01 << 6)

	)

316 
	#SED1356_DISP_MODE_OFF
 0x00

	)

317 
	#SED1356_DISP_MODE_LCD
 0x01

	)

318 
	#SED1356_DISP_MODE_CRT
 0x02

	)

319 
	#SED1356_DISP_MODE_LCD_CRT
 0x03

	)

320 
	#SED1356_DISP_MODE_TV
 0x04

	)

321 
	#SED1356_DISP_MODE_TV_LCD
 0x05

	)

322 
	#SED1356_DISP_MODE_TV_FLICK
 0x06

	)

323 
	#SED1356_DISP_MODE_TV_LCD_FLICK
 0x07

	)

326 
	#SED1356_PWR_PCLK
 
BIT1


	)

327 
	#SED1356_PWR_MCLK
 
BIT0


	)

330 
	#SED1356_VER_NONDISP
 
BIT7


	)

333 
PIXELS_PER_ROW
;

334 
PIXELS_PER_COL
;

335 
	#BYTES_PER_PIXEL
 2

	)

336 
COLS_PER_SCREEN
;

337 
ROWS_PER_SCREEN
;

341 
	#RED_SUBPIXEL
(
n
è(Ò & 0x1fè<< 11)

	)

342 
	#GREEN_SUBPIXEL
(
n
è(Ò & 0x1fè<< 5)

	)

343 
	#BLUE_SUBPIXEL
(
n
è(Ò & 0x1fè<< 0)

	)

347 
	#LU_BLACK
 (
	`RED_SUBPIXEL
(0x00è| 
	`GREEN_SUBPIXEL
(0x00è| 
	`BLUE_SUBPIXEL
(0x00))

	)

348 
	#LU_BLUE
 (
	`RED_SUBPIXEL
(0x00è| 
	`GREEN_SUBPIXEL
(0x00è| 
	`BLUE_SUBPIXEL
(0x0f))

	)

349 
	#LU_GREEN
 (
	`RED_SUBPIXEL
(0x00è| 
	`GREEN_SUBPIXEL
(0x0fè| 
	`BLUE_SUBPIXEL
(0x00))

	)

350 
	#LU_CYAN
 (
	`RED_SUBPIXEL
(0x00è| 
	`GREEN_SUBPIXEL
(0x0fè| 
	`BLUE_SUBPIXEL
(0x0f))

	)

351 
	#LU_RED
 (
	`RED_SUBPIXEL
(0x0fè| 
	`GREEN_SUBPIXEL
(0x00è| 
	`BLUE_SUBPIXEL
(0x00))

	)

352 
	#LU_VIOLET
 (
	`RED_SUBPIXEL
(0x0fè| 
	`GREEN_SUBPIXEL
(0x00è| 
	`BLUE_SUBPIXEL
(0x0f))

	)

353 
	#LU_YELLOW
 (
	`RED_SUBPIXEL
(0x0fè| 
	`GREEN_SUBPIXEL
(0x0fè| 
	`BLUE_SUBPIXEL
(0x00))

	)

354 
	#LU_GREY
 (
	`RED_SUBPIXEL
(0x0fè| 
	`GREEN_SUBPIXEL
(0x0fè| 
	`BLUE_SUBPIXEL
(0x0f))

	)

355 
	#LU_WHITE
 (
	`RED_SUBPIXEL
(0x17è| 
	`GREEN_SUBPIXEL
(0x17è| 
	`BLUE_SUBPIXEL
(0x17))

	)

356 
	#LU_BRT_BLUE
 (
	`RED_SUBPIXEL
(0x00è| 
	`GREEN_SUBPIXEL
(0x00è| 
	`BLUE_SUBPIXEL
(0x1f))

	)

357 
	#LU_BRT_GREEN
 (
	`RED_SUBPIXEL
(0x00è| 
	`GREEN_SUBPIXEL
(0x1fè| 
	`BLUE_SUBPIXEL
(0x00))

	)

358 
	#LU_BRT_CYAN
 (
	`RED_SUBPIXEL
(0x00è| 
	`GREEN_SUBPIXEL
(0x1fè| 
	`BLUE_SUBPIXEL
(0x1f))

	)

359 
	#LU_BRT_RED
 (
	`RED_SUBPIXEL
(0x1fè| 
	`GREEN_SUBPIXEL
(0x00è| 
	`BLUE_SUBPIXEL
(0x00))

	)

360 
	#LU_BRT_VIOLET
 (
	`RED_SUBPIXEL
(0x1fè| 
	`GREEN_SUBPIXEL
(0x00è| 
	`BLUE_SUBPIXEL
(0x1f))

	)

361 
	#LU_BRT_YELLOW
 (
	`RED_SUBPIXEL
(0x1fè| 
	`GREEN_SUBPIXEL
(0x1fè| 
	`BLUE_SUBPIXEL
(0x00))

	)

362 
	#LU_BRT_WHITE
 (
	`RED_SUBPIXEL
(0x1fè| 
	`GREEN_SUBPIXEL
(0x1fè| 
	`BLUE_SUBPIXEL
(0x1f))

	)

382 
	#BLUE
 (0x14 << 0)

	)

383 
	#GREEN
 (0x14 << 6)

	)

384 
	#RED
 (0x14 << 11)

	)

386 
	#HALF_BLUE
 (0x0¨<< 0)

	)

387 
	#HALF_GREEN
 (0x0¨<< 6)

	)

388 
	#HALF_RED
 (0x0¨<< 11)

	)

391 
	#BRT_BLUE
 (0x1<< 0)

	)

392 
	#BRT_GREEN
 (0x1<< 6)

	)

393 
	#BRT_RED
 (0x1<< 11)

	)

395 
	#LU_BLACK
 0

	)

396 
	#LU_BLUE
 (
BLUE
)

	)

397 
	#LU_GREEN
 (
GREEN
)

	)

398 
	#LU_CYAN
 (
GREEN
 | 
BLUE
)

	)

399 
	#LU_RED
 (
RED
)

	)

400 
	#LU_VIOLET
 (
RED
 | 
BLUE
)

	)

401 
	#LU_YELLOW
 (
RED
 | 
GREEN
)

	)

402 
	#LU_WHITE
 (
RED
 | 
GREEN
 | 
BLUE
)

	)

403 
	#LU_GREY
 (
HALF_RED
 | 
HALF_GREEN
 | 
HALF_BLUE
)

	)

404 
	#LU_BRT_BLUE
 (
HALF_RED
 | 
HALF_GREEN
 | 
BRT_BLUE
)

	)

405 
	#LU_BRT_GREEN
 (
HALF_RED
 | 
BRT_GREEN
 | 
HALF_BLUE
)

	)

406 
	#LU_BRT_CYAN
 (
HALF_RED
 | 
BRT_GREEN
 | 
BRT_BLUE
)

	)

407 
	#LU_BRT_RED
 (
BRT_RED
 | 
HALF_GREEN
 | 
HALF_BLUE
)

	)

408 
	#LU_BRT_VIOLET
 (
BRT_RED
 | 
HALF_GREEN
 | 
BRT_BLUE
)

	)

409 
	#LU_BRT_YELLOW
 (
BRT_RED
 | 
BRT_GREEN
 | 
HALF_BLUE
)

	)

410 
	#LU_BRT_WHITE
 (
BRT_RED
 | 
BRT_GREEN
 | 
BRT_BLUE
)

	)

412 cÚ¡ 
ushÜt
 
	gvga_lookup
[] = {

413 
LU_BLACK
,

414 
LU_BLUE
,

415 
LU_GREEN
,

416 
LU_CYAN
,

417 
LU_RED
,

418 
LU_VIOLET
,

419 
LU_YELLOW
,

420 
LU_WHITE
,

421 
LU_GREY
,

422 
LU_BRT_BLUE
,

423 
LU_BRT_GREEN
,

424 
LU_BRT_CYAN
,

425 
LU_BRT_RED
,

426 
LU_BRT_VIOLET
,

427 
LU_BRT_YELLOW
,

428 
LU_BRT_WHITE


432 
	#SED_BG_DEF
 1

	)

433 
	#SED_FG_DEF
 14

	)

436 
	#TOP
 0

	)

437 
	#BOTTOM
 (
PIXELS_PER_COL
-1)

	)

438 
	#LEFT
 0

	)

439 
	#RIGHT
 (
PIXELS_PER_ROW
-1)

	)

440 
	#CENTER_X
 (
PIXELS_PER_ROW
/2)

	)

441 
	#CENTER_Y
 (
PIXELS_PER_COL
/2)

	)

475 
	#SED_HOR_PULSE_WIDTH_CRT
 0x07

	)

476 
	#SED_HOR_PULSE_START_CRT
 0x02

	)

477 
	#SED_HOR_NONDISP_CRT
 0x17

	)

500 
	#SED_VER_PULSE_WIDTH_CRT
 0x02

501 
	#SED_VER_PULSE_START_CRT
 0x08

502 
	#SED_VER_NONDISP_CRT
 0x27

503 

	)

532 
SED_HOR_PULSE_WIDTH_LCD
;

533 
SED_HOR_PULSE_START_LCD
;

534 
SED_HOR_NONDISP_LCD
;

562 
SED_VER_PULSE_WIDTH_LCD
;

563 
SED_VER_PULSE_START_LCD
;

564 
SED_VER_NONDISP_LCD
;

	@src/lib/libbsp/arm/csb337/console/uarts.c

21 
	~<b¥.h
>

22 
	~<¹ems/libio.h
>

23 
	~<rmios.h
>

24 
	~<¹ems/b¥Io.h
>

26 
	~<©91rm9200.h
>

27 
	~<©91rm9200_dbgu.h
>

28 
	~<libch/£rl.h
>

29 
	~<libch/£rsuµ.h
>

30 
	~<b¥Ýts.h
>

32 cÚ¡ 
cÚsÞe_âs
 
dbgu_âs
;

34 #ià
ENABLE_LCD


35 cÚ¡ 
cÚsÞe_âs
 
fbcÚs_âs
;

36 
	#LCD_DEV
 1

	)

38 
	#LCD_DEV
 0

	)

41 #ià(
ENABLE_UMON
 && 
ENABLE_UMON_CONSOLE
)

42 cÚ¡ 
cÚsÞe_âs
 
umÚcÚs_âs
;

43 
	#UMON_CONS_DEV
 1

	)

45 
	#UMON_CONS_DEV
 0

	)

48 #ià
ENABLE_USART0
 || 
ENABLE_USART1
 || 
ENABLE_USART2
 || 
ENABLE_USART3


49 cÚ¡ 
cÚsÞe_âs
 
u§¹_pÞlg_âs
;

52 #ià
ENABLE_USART0


53 
	#USART0_DEV
 1

	)

55 
	#USART0_DEV
 0

	)

58 #ià
ENABLE_USART1


59 
	#USART1_DEV
 1

	)

61 
	#USART1_DEV
 0

	)

64 #ià
ENABLE_USART2


65 
	#USART2_DEV
 1

	)

67 
	#USART2_DEV
 0

	)

70 #ià
ENABLE_USART3


71 
	#USART3_DEV
 1

	)

73 
	#USART3_DEV
 0

	)

76 
	#NUM_DEVS
 \

77 (1 + 
LCD_DEV
 + 
UMON_CONS_DEV
 + \

78 
USART0_DEV
 + 
USART1_DEV
 + 
USART2_DEV
 + 
USART3_DEV
)

	)

81 
	gCÚsÞe_CÚfigu¿tiÚ_CouÁ
 = 
NUM_DEVS
;

92 
cÚsÞe_tbl
 
	gCÚsÞe_CÚfigu¿tiÚ_PÜts
[] = {

95 
SERIAL_CUSTOM
,

96 &
dbgu_âs
,

97 
NULL
,

98 
NULL
,

101 
NULL
,

102 
DBGU_BASE
,

105 
NULL
,

106 
NULL
,

107 
NULL
,

108 
NULL
,

112 #ià
ENABLE_LCD


115 
SERIAL_CUSTOM
,

116 &
fbcÚs_âs
,

117 
NULL
,

118 
NULL
,

121 
NULL
,

125 
NULL
,

126 
NULL
,

127 
NULL
,

128 
NULL
,

133 #ià(
ENABLE_UMON
 && 
ENABLE_UMON_CONSOLE
)

136 
SERIAL_CUSTOM
,

137 &
umÚcÚs_âs
,

138 
NULL
,

139 
NULL
,

142 
NULL
,

146 
NULL
,

147 
NULL
,

148 
NULL
,

149 
NULL
,

154 #ià
ENABLE_USART0


157 
SERIAL_CUSTOM
,

158 &
u§¹_pÞlg_âs
,

159 
NULL
,

160 
NULL
,

163 
NULL
,

164 
USART0_BASE
,

167 
NULL
,

168 
NULL
,

169 
NULL
,

170 
NULL
,

175 #ià
ENABLE_USART1


178 
SERIAL_CUSTOM
,

179 &
u§¹_pÞlg_âs
,

180 
NULL
,

181 
NULL
,

184 
NULL
,

185 
USART1_BASE
,

188 
NULL
,

189 
NULL
,

190 
NULL
,

191 
NULL
,

196 #ià
ENABLE_USART2


199 
SERIAL_CUSTOM
,

200 &
u§¹_pÞlg_âs
,

201 
NULL
,

202 
NULL
,

205 
NULL
,

206 
USART2_BASE
,

209 
NULL
,

210 
NULL
,

211 
NULL
,

212 
NULL
,

217 #ià
ENABLE_USART3


220 
SERIAL_CUSTOM
,

221 &
u§¹_pÞlg_âs
,

222 
NULL
,

223 
NULL
,

226 
NULL
,

227 
USART3_BASE
,

230 
NULL
,

231 
NULL
,

232 
NULL
,

233 
NULL
,

240 
cÚsÞe_tbl
 *
	$BSP_g_u¬t_äom_mÜ
(
mÜ
)

242  
CÚsÞe_PÜt_Tbl
[
mÜ
];

243 
	}
}

	@src/lib/libbsp/arm/csb337/include/bsp.h

19 #iâdeà
LIBBSP_ARM_CSB337_BSP_H


20 
	#LIBBSP_ARM_CSB337_BSP_H


	)

22 
	~<b¥Ýts.h
>

23 
	~<b¥/deçuÉ-l-exnsiÚ.h
>

25 
	~<¹ems.h
>

26 
	~<¹ems/cÚsÞe.h
>

27 
	~<¹ems/þockdrv.h
>

29 #ifdeà
__ýlu¥lus


43 
	#BSP_FEATURE_IRQ_EXTENSION


	)

46 
	#BSP_MAIN_FREQ
 3686400

	)

47 
	#BSP_SLCK_FREQ
 32768

	)

50 
	#BSP_MAX_INT
 
AT91RM9200_MAX_INT


	)

56 
_cÚsÞe_tbl
 
	tcÚsÞe_tbl
;

57 
cÚsÞe_tbl
 *
BSP_g_u¬t_äom_mÜ
(
mÜ
);

59 
le
 
t32_t
 
BSP_g_baud
() { 38400;}

61 
	#ST_PIMR_PIV
 33

	)

66 
¹ems_bsdÃt_ifcÚfig
 *
cÚfig
;

69 
¹ems_©91rm9200_emac_©ch
(
¹ems_bsdÃt_ifcÚfig
 *
cÚfig
, 
©chg
);

70 
	#RTEMS_BSP_NETWORK_DRIVER_NAME
 "h0"

	)

71 
	#RTEMS_BSP_NETWORK_DRIVER_ATTACH
 
¹ems_©91rm9200_emac_©ch


	)

75 #ifdeà
__ýlu¥lus


	@src/lib/libbsp/arm/csb337/include/sed1356.h

31 #iâdeà
__SED1356_h


32 
	#__SED1356_h


	)

34 
£d_
();

36 
£d_äame_bufãr_size
();

38 
£d_þr_row
(
ch¬_row
);

40 
£d_putch¬
(
c
);

42 
£d_put¡rg
(*
s
);

44 
£d_þrsün
();

46 
£d_wre_äame_bufãr
(

47 
ut32_t
 
i
,

48 
ut16_t
 
wr16


	@src/lib/libbsp/arm/csb337/network/network.c

13 
	~<¹ems.h
>

14 
	~<¹ems/¹ems_bsdÃt.h
>

15 
	~<©91rm9200.h
>

16 
	~<©91rm9200_emac.h
>

17 
	~<©91rm9200_gpio.h
>

18 
	~<©91rm9200_pmc.h
>

20 
	~<¡dio.h
>

21 
	~<¡rg.h
>

23 
	~<ºo.h
>

24 
	~<¹ems/rÜ.h
>

25 
	~<as£¹.h
>

27 
	~<sys/·¿m.h
>

28 
	~<sys/mbuf.h
>

29 
	~<sys/sock.h
>

30 
	~<sys/sockio.h
>

32 
	~<Ãt/if.h
>

34 
	~<Ãt/.h
>

35 
	~<Ãt/if_h.h
>

37 
	~<b¥/q.h
>

38 
	~<b¥Ýts.h
>

41 
	#PHY_DBG


	)

46 #ià
csb637


49 
	#PHY_STAT_100BASE_T4
 
BIT15


	)

51 
	#PHY_STAT_100BASE_X_FDX
 
BIT14


	)

53 
	#PHY_STAT_100BASE_X_HDX
 
BIT13


	)

55 
	#PHY_STAT_10BASE_FDX
 
BIT12


	)

57 
	#PHY_STAT_10BASE_HDX
 
BIT11


	)

59 
	#PHY_STAT_MF_PREAMBLE
 
BIT6


	)

61 
	#PHY_STAT_AUTO_NEG_DONE
 
BIT5


	)

63 
	#PHY_STAT_REM_FLT
 
BIT4


	)

65 
	#PHY_STAT_AUTO_NEG_ABLE
 
BIT3


	)

67 
	#PHY_STAT_LINK_UP
 
BIT2


	)

69 
	#PHY_STAT_JABBER
 
BIT1


	)

71 
	#PHY_STAT_EXT_REG
 
BIT0


	)

74 
	#PHY_AUX_MODE2_TRAFFIC_LED
 
BIT6


	)

78 
	#EMAC_INT_PRIORITY
 0

	)

81 
	#START_RECEIVE_EVENT
 
RTEMS_EVENT_1


	)

84 
	#START_TRANSMIT_EVENT
 
RTEMS_EVENT_2


	)

86 
©91rm9200_emac_i¤
 (*);

87 
©91rm9200_emac_i¤_Ú
();

90 * 
©91rm9200_emac_rxbuf_hdrs
;

91 * 
©91rm9200_emac_txbuf
;

92 * 
©91rm9200_emac_rxbufs
;

96 
	#NUM_RXBDS
 8

	)

97 
	#NUM_TXBDS
 1

	)

98 
	#RX_BUFFER_SIZE
 0x600

	)

108 
	madd»ss
;

109 
	m¡©us
;

110 } 
	tRXBUF_HDR
;

112 
RXBUF_HDR
 *
	grxbuf_hdrs
;

113 *
	gtxbuf
;

114 *
	grxbuf
;

116 
	gday_út
;

127 
¬pcom
 
	m¬pcom
;

132 
¹ems_veùÜ_numb
 
	mveùÜ
;

137 
	macû±Brßdÿ¡
;

142 
¹ems_id
 
	mrxD«mÚTid
;

143 
¹ems_id
 
	mtxD«mÚTid
;

148 
	mrx_buf_idx
;

155 
	mIÁru±s
;

156 
	mrxIÁru±s
;

157 
	mrxMis£d
;

158 
	mrxGÁ
;

159 
	mrxNÚOù
;

160 
	mrxBadCRC
;

161 
	mrxCÞlisiÚ
;

163 
	mtxIÁru±s
;

164 
	mtxSgËCÞlisiÚ
;

165 
	mtxMuÉËCÞlisiÚ
;

166 
	mtxCÞlisiÚ
;

167 
	mtxDeã¼ed
;

168 
	mtxUndrun
;

169 
	mtxL©eCÞlisiÚ
;

170 
	mtxExûssiveCÞlisiÚ
;

171 
	mtxExûssiveDeã¼®
;

172 
	mtxLo¡C¬rr
;

173 
	mtxRawWa
;

174 } 
	t©91rm9200_emac_soác_t
;

176 
©91rm9200_emac_soác_t
 
	gsoác
;

186 
¹ems_©91rm9200_emac_©ch
 (
¹ems_bsdÃt_ifcÚfig
 *
cÚfig
,

187 *
ch
);

188 
©91rm9200_emac_
(*
¬g
);

189 
©91rm9200_emac__hw
(
©91rm9200_emac_soác_t
 *
sc
);

190 
©91rm9200_emac_¡¬t
(
iâ
 *
iå
);

191 
©91rm9200_emac_¡Ý
 (
©91rm9200_emac_soác_t
 *
sc
);

192 
©91rm9200_emac_txD«mÚ
 (*
¬g
);

193 
©91rm9200_emac_£nd·ck
 (
iâ
 *
iå
, 
mbuf
 *
m
);

194 
©91rm9200_emac_rxD«mÚ
(*
¬g
);

195 
©91rm9200_emac_¡©s
 (
©91rm9200_emac_soác_t
 *
sc
);

196 
©91rm9200_emac_ioùl
 (
iâ
 *
iå
,

197 
ioùl_commªd_t
 
commªd
,

198 
ÿddr_t
 
d©a
);

200 #ià
csb637


204 
ut32_t
 
	$phy»ad
(
ut8_t
 
»g
)

206 
	`EMAC_REG
(
EMAC_MAN
) = (0x01 << 30

209 | 
»g
 << 18

213 
	`¹ems_sk_wake_aá
(1);

215 #ià
	`defed
(
EMAC_DBG
)

216 
	`´tk
(

218 
»g
,

219 (
	`EMAC_REG
(
EMAC_MAN
) & 0xffff)

223  
	`EMAC_REG
(
EMAC_MAN
) & 0xffff;

224 
	}
}

230 
	$phywre
(
ut8_t
 
»g
, 
ut16_t
 
d©a
)

232 
	`EMAC_REG
(
EMAC_MAN
) = (0x01 << 30

235 | 
»g
 << 18

237 | 
d©a
);

238 #ià
	`defed
(
EMAC_DBG
)

239 
	`´tk
("EMAC: Phy 0, Reg %d, Wr0x%04x.\n", 
»g
, 
d©a
);

243 
	`¹ems_sk_wake_aá
(1);

244 
	}
}

247 
	$¹ems_©91rm9200_emac_©ch
 (

248 
¹ems_bsdÃt_ifcÚfig
 *
cÚfig
,

249 *
ch


252 
iâ
 *
iå
;

253 
mtu
;

254 
unnumb
;

255 *
unÇme
;

256 *
p
;

259 
p
 = (*)&
©91rm9200_emac_rxbuf_hdrs
;

260 
rxbuf_hdrs
 = (
RXBUF_HDR
 *)
p
;

263 
txbuf
 = (*)&
©91rm9200_emac_txbuf
;

266 
rxbuf
 = (*)&
©91rm9200_emac_rxbufs
;

270 ià((
unnumb
 = 
	`¹ems_bsdÃt_·r£_driv_Çme
 (
cÚfig
, &
unÇme
)) < 0)

276 ià(
unnumb
 != 0) {

277 
	`´tk
 ("Bad AT91RM9200 EMAC unitumber.\n");

280 
iå
 = &
soác
.
¬pcom
.
ac_if
;

281 ià(
iå
->
if_soác
 !ð
NULL
) {

282 
	`´tk
 ("Driverlready in use.\n");

290 
	`mem£t
Ð&
soác
, 0, (softc) );

294 
soác
.
¬pcom
.
ac_addr
[0] = (
	`EMAC_REG
(
EMAC_SA1L
) >> 0) & 0xff;

295 
soác
.
¬pcom
.
ac_addr
[1] = (
	`EMAC_REG
(
EMAC_SA1L
) >> 8) & 0xff;

296 
soác
.
¬pcom
.
ac_addr
[2] = (
	`EMAC_REG
(
EMAC_SA1L
) >> 16) & 0xff;

297 
soác
.
¬pcom
.
ac_addr
[3] = (
	`EMAC_REG
(
EMAC_SA1L
) >> 24) & 0xff;

298 
soác
.
¬pcom
.
ac_addr
[4] = (
	`EMAC_REG
(
EMAC_SA1H
) >> 0) & 0xff;

299 
soác
.
¬pcom
.
ac_addr
[5] = (
	`EMAC_REG
(
EMAC_SA1H
) >> 8) & 0xff;

302 
	`´tk
( "MAC=%02x:%02x:%02x:%02x:%02x:%02x\n",

303 
soác
.
¬pcom
.
ac_addr
[0],

304 
soác
.
¬pcom
.
ac_addr
[1],

305 
soác
.
¬pcom
.
ac_addr
[2],

306 
soác
.
¬pcom
.
ac_addr
[3],

307 
soác
.
¬pcom
.
ac_addr
[4],

308 
soác
.
¬pcom
.
ac_addr
[5]

312 ià(
cÚfig
->
mtu
) {

313 
mtu
 = 
cÚfig
->mtu;

315 
mtu
 = 
ETHERMTU
;

318 
soác
.
acû±Brßdÿ¡
 = !
cÚfig
->
ignÜe_brßdÿ¡
;

323 
iå
->
if_soác
 = &
soác
;

324 
iå
->
if_un
 = 
unnumb
;

325 
iå
->
if_Çme
 = 
unÇme
;

326 
iå
->
if_mtu
 = 
mtu
;

327 
iå
->
if_
 = 
©91rm9200_emac_
;

328 
iå
->
if_ioùl
 = 
©91rm9200_emac_ioùl
;

329 
iå
->
if_¡¬t
 = 
©91rm9200_emac_¡¬t
;

330 
iå
->
if_ouut
 = 
h_ouut
;

331 
iå
->
if_æags
 = 
IFF_BROADCAST
;

332 ià(
iå
->
if_¢d
.
ifq_maxËn
 == 0) {

333 
iå
->
if_¢d
.
ifq_maxËn
 = 
ifqmaxËn
;

336 
soác
.
rx_buf_idx
 = 0;

341 
	`if_©ch
 (
iå
);

342 
	`h_içach
 (
iå
);

344 
	}
}

346 
	$©91rm9200_emac_
(*
¬g
)

348 
©91rm9200_emac_soác_t
 *
sc
 = 
¬g
;

349 
iâ
 *
iå
 = &
sc
->
¬pcom
.
ac_if
;

350 
¹ems_¡©us_code
 
¡©us
 = 
RTEMS_SUCCESSFUL
;

356 ià(
sc
->
txD«mÚTid
 == 0) {

358 
	`©91rm9200_emac__hw
(
sc
);

361 
sc
->
rxD«mÚTid
 = 
	`¹ems_bsdÃt_Ãw´oc
("ENrx",

363 
©91rm9200_emac_rxD«mÚ
,

364 
sc
);

365 
sc
->
txD«mÚTid
 = 
	`¹ems_bsdÃt_Ãw´oc
("ENtx",

367 
©91rm9200_emac_txD«mÚ
,

368 
sc
);

372 
	`AIC_SMR_REG
(
AIC_SMR_EMAC
èð
	`AIC_SMR_PRIOR
(
EMAC_INT_PRIORITY
);

375 
¡©us
 = 
	`¹ems_¼u±_hªdËr_¡®l
(

376 
AT91RM9200_INT_EMAC
,

378 
RTEMS_INTERRUPT_UNIQUE
,

379 
©91rm9200_emac_i¤
,

380 
NULL


382 
	`as£¹
(
¡©us
 =ð
RTEMS_SUCCESSFUL
);

383 
	`©91rm9200_emac_i¤_Ú
();

386 ià(
iå
->
if_æags
 & 
IFF_PROMISC
) {

387 
	`´tk
 ("Warning - AT91RM9200 Ethernet driver"

394 
iå
->
if_æags
 |ð
IFF_RUNNING
;

397 
	`EMAC_REG
(
EMAC_CTL
èð(
EMAC_CTL_TE
 | 
EMAC_CTL_RE
 | 
EMAC_CTL_CSR
);

400 
	`EMAC_REG
(
EMAC_TSR
) = 0xffffffff;

401 
	`EMAC_REG
(
EMAC_RSR
) = 0xffffffff;

403 
	}
}

405 
	$©91rm9200_emac__hw
(
©91rm9200_emac_soác_t
 *
sc
)

407 
i
;

410 
	`PIOA_REG
(
PIO_PDR
èðÐ
BIT7
 |

411 
BIT8
 |

412 
BIT9
 |

413 
BIT10
 |

414 
BIT11
 |

415 
BIT12
 |

416 
BIT13
 |

417 
BIT14
 |

418 
BIT15
 |

419 
BIT16
 );

421 
	`PIOB_REG
(
PIO_PDR
èðÐ
BIT12
 |

422 
BIT13
 |

423 
BIT14
 |

424 
BIT15
 |

425 
BIT16
 |

426 
BIT17
 |

427 
BIT18
 |

428 
BIT19
 );

430 
	`PIOB_REG
(
PIO_BSR
èðÐ
BIT12
 |

431 
BIT13
 |

432 
BIT14
 |

433 
BIT15
 |

434 
BIT16
 |

435 
BIT17
 |

436 
BIT18
 |

437 
BIT19
 );

441 
	`PMC_REG
(
PMC_PCER
è|ð
PMC_PCR_PID_EMAC
;

444 
i
 = 0; i < 
NUM_RXBDS
-1; i++) {

445 
rxbuf_hdrs
[
i
].
add»ss
 = ()(&
rxbuf
[* 
RX_BUFFER_SIZE
]);

446 
rxbuf_hdrs
[
i
].
¡©us
 = 0x00000000;

450 
rxbuf_hdrs
[
i
].
add»ss
 = (()(&
rxbuf
[* 
RX_BUFFER_SIZE
]) |

451 
RXBUF_ADD_WRAP
);

452 
rxbuf_hdrs
[
i
].
¡©us
 = 0x00000000;

455 
	`EMAC_REG
(
EMAC_RBQP
èð()
rxbuf_hdrs
;

458 
	`EMAC_REG
(
EMAC_RSR
è&ð~(
EMAC_RSR_OVR
 | 
EMAC_RSR_REC
 | 
EMAC_RSR_BNA
);

461 
	`EMAC_REG
(
EMAC_CFG
è&ð
EMAC_CFG_CLK_MASK
;

462 
	`EMAC_REG
(
EMAC_CFG
èð(
EMAC_CFG_CLK_64
 | 
EMAC_CFG_BIG
 | 
EMAC_CFG_FD
);

465 
	`EMAC_REG
(
EMAC_CTL
èð
EMAC_CTL_MPE
;

467 #ià
csb637


469 
timeout
;

470 
ut32_t
 
emac_lk_¡©us
;

472 #ià
	`defed
(
PHY_DBG
)

473 
	`´tk
("EMAC: Getting Link Status.\n");

476 
emac_lk_¡©us
 = 
	`phy»ad
(0x02);

477 
emac_lk_¡©us
 = 
	`phy»ad
(0x03);

480 
timeout
 = 10000 ;imeout ; ) {

481 
i
 = 0; i < 100; i++)

483 
emac_lk_¡©us
 = 
	`phy»ad
(0x01);

484 ià(!(
emac_lk_¡©us
 & 
PHY_STAT_AUTO_NEG_ABLE
)) {

485 #ià
	`defed
(
PHY_DBG
)

486 
	`´tk
("EMAC: PHY is unableo Auto-Negotatiate!\n");

488 
timeout
 = 0;

491 ià(
emac_lk_¡©us
 & 
PHY_STAT_AUTO_NEG_DONE
) {

492 #ià
	`defed
(
PHY_DBG
)

493 
	`´tk
("EMAC: Auto-Negotiate Complete, Link = ");

497 
timeout
-- ;

499 ià(!
timeout
) {

500 #ià
	`defed
(
PHY_DBG
)

501 
	`´tk
(

504 
emac_lk_¡©us


508 
emac_lk_¡©us
 = 
PHY_STAT_10BASE_HDX
;

512 ià(
emac_lk_¡©us
 & (
PHY_STAT_100BASE_X_FDX
 | 
PHY_STAT_100BASE_X_HDX
)){

513 
	`EMAC_REG
(
EMAC_CFG
è|ð
EMAC_CFG_SPD
;

514 #ià
	`defed
(
PHY_DBG
)

515 
	`´tk
("100MBIT, ");

518 
	`EMAC_REG
(
EMAC_CFG
è&ð~
EMAC_CFG_SPD
;

519 #ià
	`defed
(
PHY_DBG
)

520 
	`´tk
("10MBIT, ");

524 ià(
emac_lk_¡©us
 & (
PHY_STAT_100BASE_X_FDX
 | 
PHY_STAT_10BASE_FDX
)) {

525 
	`EMAC_REG
(
EMAC_CFG
è|ð
EMAC_CFG_FD
;

526 #ià
	`defed
(
PHY_DBG
)

527 
	`´tk
("Full Duplex.\n");

530 
	`EMAC_REG
(
EMAC_CFG
è&ð~
EMAC_CFG_FD
;

531 #ià
	`defed
(
PHY_DBG
)

532 
	`´tk
("Half Duplex.\n");

539 
	`phywre
(0x1b, 
PHY_AUX_MODE2_TRAFFIC_LED
);

544 
	`phywre
( 18, 0x0d0a );

548 
	`EMAC_REG
(
EMAC_MAN
) = (0x01 << 30 |

556 
	}
}

558 
	$©91rm9200_emac_¡¬t
(
iâ
 *
iå
)

560 
©91rm9200_emac_soác_t
 *
sc
 = 
iå
->
if_soác
;

562 
	`¹ems_bsdÃt_evt_£nd
(
sc
->
txD«mÚTid
, 
START_TRANSMIT_EVENT
);

563 
iå
->
if_æags
 |ð
IFF_OACTIVE
;

564 
	}
}

566 
	$©91rm9200_emac_¡Ý
 (
©91rm9200_emac_soác_t
 *
sc
)

568 
iâ
 *
iå
 = &
sc
->
¬pcom
.
ac_if
;

570 
iå
->
if_æags
 &ð~
IFF_RUNNING
;

575 
	`EMAC_REG
(
EMAC_CTL
è&ð~(
EMAC_CTL_TE
 | 
EMAC_CTL_RE
);

576 
	}
}

581 
	$©91rm9200_emac_txD«mÚ
 (*
¬g
)

583 
©91rm9200_emac_soác_t
 *
sc
 = (©91rm9200_emac_soác_*)
¬g
;

584 
iâ
 *
iå
 = &
sc
->
¬pcom
.
ac_if
;

585 
mbuf
 *
m
;

586 
¹ems_evt_£t
 
evts
;

591 
	`EMAC_REG
(
EMAC_IER
èð
EMAC_INT_TCOM
;

593 
	`¹ems_bsdÃt_evt_»ûive
(

594 
START_TRANSMIT_EVENT
,

595 
RTEMS_EVENT_ANY
 | 
RTEMS_WAIT
,

596 
RTEMS_NO_TIMEOUT
,

597 &
evts
);

603 
	`IF_DEQUEUE
(&
iå
->
if_¢d
, 
m
);

604 ià(!
m
)

606 
	`©91rm9200_emac_£nd·ck
 (
iå
, 
m
);

608 
iå
->
if_æags
 &ð~
IFF_OACTIVE
;

610 
	}
}

613 
	$©91rm9200_emac_£nd·ck
 (
iâ
 *
iå
, 
mbuf
 *
m
)

615 
mbuf
 *
l
 = 
NULL
;

616 
pkt_off£t
 = 0;

617 
day_út
 = 0;

621 ((
	`EMAC_REG
(
EMAC_TSR
è& 
EMAC_TSR_COMP
) == 0) &&

622 ((
	`EMAC_REG
(
EMAC_TSR
è& 
EMAC_TSR_TXIDLE
) == 0))

625 
day_út
++;

631 
l
 = 
m
;

632 
l
 !ð
NULL
) {

633 
	`memýy
(((*)
txbuf
 + 
pkt_off£t
),

634 (*)
	`mtod
(
l
, *),

635 
l
->
m_Ën
);

637 
pkt_off£t
 +ð
l
->
m_Ën
;

638 
l
 =->
m_Ãxt
;

642 
	`m_äm
(
m
);

645 
	`EMAC_REG
(
EMAC_TSR
èð(
EMAC_TSR_OVR
 | 
EMAC_TSR_COL
 | 
EMAC_TSR_RLE


646 | 
EMAC_TSR_COMP
 | 
EMAC_TSR_UND
);

649 
	`EMAC_REG
(
EMAC_TAR
èð()
txbuf
;

650 
	`EMAC_REG
(
EMAC_TCR
èð()
pkt_off£t
;

651 
	}
}

655 
	$©91rm9200_emac_rxD«mÚ
(*
¬g
)

657 
©91rm9200_emac_soác_t
 *
sc
 = (©91rm9200_emac_soác_*)
¬g
;

658 
iâ
 *
iå
 = &
sc
->
¬pcom
.
ac_if
;

659 
mbuf
 *
m
;

660 
h_hd
 *
eh
;

661 
¹ems_evt_£t
 
evts
;

662 
pk
;

667 
	`EMAC_REG
(
EMAC_IER
èð(
EMAC_INT_RCOM
 |

668 
EMAC_INT_RBNA
 |

669 
EMAC_INT_ROVR
);

671 
	`¹ems_bsdÃt_evt_»ûive
(

672 
START_RECEIVE_EVENT
,

673 
RTEMS_EVENT_ANY
 | 
RTEMS_WAIT
,

674 
RTEMS_NO_TIMEOUT
,

675 &
evts
);

677 ià(
	`EMAC_REG
(
EMAC_RSR
è& 
EMAC_RSR_BNA
) {

678 
	`´tk
("1: EMAC_BNA\n");

681 ià(
	`EMAC_REG
(
EMAC_RSR
è& 
EMAC_RSR_OVR
) {

682 
	`´tk
("1: EMAC_OVR\n");

686 
	`EMAC_REG
(
EMAC_RSR
èð(
EMAC_RSR_REC
 | 
EMAC_RSR_OVR
 | 
EMAC_RSR_BNA
);

689 
rxbuf_hdrs
[
sc
->
rx_buf_idx
].
add»ss
 & 
RXBUF_ADD_OWNED
) {

690 
pk
 = 
rxbuf_hdrs
[
sc
->
rx_buf_idx
].
¡©us
 & 
RXBUF_STAT_LEN_MASK
;

693 
	`MGETHDR
(
m
, 
M_WAIT
, 
MT_DATA
);

697 
	`MCLGET
(
m
, 
M_WAIT
);

700 
m
->
m_pkthdr
.
rcvif
 = 
iå
;

701 
m
->
m_Ãxkt
 = 0;

704 
	`memýy
((*)
m
->
m_ext
.
ext_buf
,

705 (*)(
rxbuf_hdrs
[
sc
->
rx_buf_idx
].
add»ss
 & 0xfffffffc),

706 
pk
);

709 
rxbuf_hdrs
[
sc
->
rx_buf_idx
].
add»ss
 &ð~
RXBUF_ADD_OWNED
;

712 
m
->
m_Ën
 = 
pk
 - ((
h_hd
) + 4);

713 
m
->
m_pkthdr
.
Ën
 = m->
m_Ën
;

717 
eh
 = 
	`mtod
 (
m
, 
h_hd
 *);

718 
m
->
m_d©a
 +ð(
h_hd
);

721 
sc
->
rx_buf_idx
++;

722 ià(
sc
->
rx_buf_idx
 >ð
NUM_RXBDS
) {

723 
sc
->
rx_buf_idx
 = 0;

727 
	`h_put
(
iå
, 
eh
, 
m
);

731 ià(
	`EMAC_REG
(
EMAC_RSR
è& 
EMAC_RSR_BNA
) {

732 
	`´tk
("2:EMAC_BNA\n");

734 ià(
	`EMAC_REG
(
EMAC_RSR
è& 
EMAC_RSR_OVR
) {

735 
	`´tk
("2:EMAC_OVR\n");

740 
	}
}

744 
	$©91rm9200_emac_¡©s
 (
©91rm9200_emac_soác_t
 *
sc
)

746 
	`´tf
 (" TÙ® IÁru±s:%-8lu", 
sc
->
IÁru±s
);

747 
	`´tf
 (" Rx IÁru±s:%-8lu", 
sc
->
rxIÁru±s
);

748 
	`´tf
 (" GÁ:%-8lu", 
sc
->
rxGÁ
);

749 
	`´tf
 (" NÚ-où:%-8lu\n", 
sc
->
rxNÚOù
);

750 
	`´tf
 (" Bad CRC:%-8lu", 
sc
->
rxBadCRC
);

751 
	`´tf
 (" CÞlisiÚ:%-8lu", 
sc
->
rxCÞlisiÚ
);

752 
	`´tf
 (" Mis£d:%-8lu\n", 
sc
->
rxMis£d
);

754 
	`´tf
 ( " Tx IÁru±s:%-8lu", 
sc
->
txIÁru±s
);

755 
	`´tf
 ( " Deã¼ed:%-8lu", 
sc
->
txDeã¼ed
);

756 
	`´tf
 (" Lo¡ C¬rr:%-8lu\n", 
sc
->
txLo¡C¬rr
);

757 
	`´tf
 ( "SgË CÞlisiÚs:%-8lu", 
sc
->
txSgËCÞlisiÚ
);

758 
	`´tf
 ( "MuÉË CÞlisiÚs:%-8lu", 
sc
->
txMuÉËCÞlisiÚ
);

759 
	`´tf
 ("ExûssivCÞlisiÚs:%-8lu\n", 
sc
->
txExûssiveCÞlisiÚ
);

760 
	`´tf
 ( " TÙ® CÞlisiÚs:%-8lu", 
sc
->
txCÞlisiÚ
);

761 
	`´tf
 ( " L©CÞlisiÚ:%-8lu", 
sc
->
txL©eCÞlisiÚ
);

762 
	`´tf
 (" Undrun:%-8lu\n", 
sc
->
txUndrun
);

763 
	`´tf
 ( " Raw ouuwa:%-8lu\n", 
sc
->
txRawWa
);

764 
	}
}

768 
	$©91rm9200_emac_i¤_Ú
()

771 
	`EMAC_REG
(
EMAC_IER
èð(
EMAC_INT_RCOM
 |

772 
EMAC_INT_RBNA
 |

773 
EMAC_INT_TCOM
 |

774 
EMAC_INT_ROVR
 |

775 
EMAC_INT_ABT
);

778 
	}
}

782 
	$©91rm9200_emac_ioùl
 (
iâ
 *
iå
, 
ioùl_commªd_t
 
commªd
, 
ÿddr_t
 
d©a
)

784 
©91rm9200_emac_soác_t
 *
sc
 = 
iå
->
if_soác
;

785 
rÜ
 = 0;

787 
commªd
) {

788 
SIOCGIFADDR
:

789 
SIOCSIFADDR
:

790 
	`h_ioùl
 (
iå
, 
commªd
, 
d©a
);

793 
SIOCSIFFLAGS
:

794 
iå
->
if_æags
 & (
IFF_UP
 | 
IFF_RUNNING
))

796 
IFF_RUNNING
:

797 
	`©91rm9200_emac_¡Ý
 (
sc
);

800 
IFF_UP
:

801 
	`©91rm9200_emac_
 (
sc
);

804 
IFF_UP
 | 
IFF_RUNNING
:

805 
	`©91rm9200_emac_¡Ý
 (
sc
);

806 
	`©91rm9200_emac_
 (
sc
);

814 
SIO_RTEMS_SHOW_STATS
:

815 
	`©91rm9200_emac_¡©s
 (
sc
);

822 
rÜ
 = 
EINVAL
;

825  
rÜ
;

826 
	}
}

829 
	$©91rm9200_emac_i¤
 (* 
unu£d
)

831 
¡©us32
;

834 
¡©us32
 = 
	`EMAC_REG
(
EMAC_ISR
);

836 ià(
¡©us32
 & 
EMAC_INT_ABT
) {

837 
	`EMAC_REG
(
EMAC_IDR
èð
EMAC_INT_ABT
;

838 
	`¹ems_·nic
("AT91RM9200 Ethernet MAC haseceivedn Abort.\n");

841 ià(
¡©us32
 & (
EMAC_INT_RCOM
 |

842 
EMAC_INT_RBNA
 |

843 
EMAC_INT_ROVR
)) {

846 
	`EMAC_REG
(
EMAC_IDR
èð(
EMAC_INT_RCOM
 |

847 
EMAC_INT_RBNA
 |

848 
EMAC_INT_ROVR
);

850 
	`¹ems_bsdÃt_evt_£nd
 (
soác
.
rxD«mÚTid
, 
START_RECEIVE_EVENT
);

853 ià(
¡©us32
 & 
EMAC_INT_TCOM
) {

856 
	`EMAC_REG
(
EMAC_IDR
èð
EMAC_INT_TCOM
;

858 
	`¹ems_bsdÃt_evt_£nd
 (
soác
.
txD«mÚTid
, 
START_TRANSMIT_EVENT
);

860 
	}
}

	@src/lib/libbsp/arm/csb337/startup/bspreset.c

13 
	~<b¥.h
>

14 
	~<b¥/boÙÿrd.h
>

15 
	~<©91rm9200.h
>

16 
	~<©91rm9200_pmc.h
>

17 
	~<©91rm9200_emac.h
>

19 
	$b¥_»£t
()

21 
¹ems_¼u±_Ëv
 
Ëv
;

23 
	`¹ems_¼u±_di§bË
(
Ëv
);

24 (è
Ëv
;

27 
	`ST_REG
(
ST_WDMR
èð
ST_WDMR_RSTEN
 | 1;

31 
	}
}

	@src/lib/libbsp/arm/csb337/startup/bspstart.c

17 
	~<b¥.h
>

18 
	~<b¥/q-gic.h
>

19 
	~<©91rm9200.h
>

20 
	~<©91rm9200_pmc.h
>

21 
	~<©91rm9200_emac.h
>

22 
	~<©91rm9200_gpio.h
>

23 
	~<©91rm9200_u§¹.h
>

26 
fix_mac_addr
();

27 
b¥_u§¹_
();

40 
	$b¥_¡¬t_deçuÉ
( )

43 
	`AIC_CTL_REG
(
AIC_IDCR
) = 0xffffffff;

49 
	`fix_mac_addr
();

54 
	`b¥_u§¹_
();

60 
	`¹ems_exû±iÚ__mngt
();

65 
	`b¥_¼u±_lize
();

67 
	}
}

74 
	$fix_mac_addr
()

76 
ut8_t
 
addr
[6];

79 
addr
[0] = (
	`EMAC_REG
(
EMAC_SA1L
) >> 0) & 0xff;

80 
addr
[1] = (
	`EMAC_REG
(
EMAC_SA1L
) >> 8) & 0xff;

81 
addr
[2] = (
	`EMAC_REG
(
EMAC_SA1L
) >> 16) & 0xff;

82 
addr
[3] = (
	`EMAC_REG
(
EMAC_SA1L
) >> 24) & 0xff;

83 
addr
[4] = (
	`EMAC_REG
(
EMAC_SA1H
) >> 0) & 0xff;

84 
addr
[5] = (
	`EMAC_REG
(
EMAC_SA1H
) >> 8) & 0xff;

87 ià((
addr
[5] == 0x00) && (addr[4] == 0x23) && (addr[3] == 0x31)) {

88 
	`EMAC_REG
(
EMAC_SA1L
èð((
addr
[5] << 0) |

89 (
addr
[4] << 8) |

90 (
addr
[3] << 16) |

91 (
addr
[2] << 24));

93 
	`EMAC_REG
(
EMAC_SA1H
èð((
addr
[1] << 0) |

94 (
addr
[0] << 8));

96 
	}
}

112 
	$b¥_u§¹_
()

118 
	`PIOA_REG
(
PIO_PDR
è|ðÐ
BIT5
 |

119 
BIT6
 |

120 
BIT17
 |

121 
BIT18
 |

122 
BIT22
 |

123 
BIT23
 );

125 
	`PIOB_REG
(
PIO_PDR
è|ðÐ
BIT20
 |

126 
BIT21
 );

129 
	`PIOA_REG
(
PIO_BSR
è|ðÐ
BIT5
 |

130 
BIT6
 );

131 
	`PIOA_REG
(
PIO_ASR
è&ð~Ð
BIT5
 |

132 
BIT6
 );

135 
	`PIOA_REG
(
PIO_ASR
è|ðÐ
BIT17
 |

136 
BIT18
 |

137 
BIT22
 |

138 
BIT23
 );

139 
	`PIOA_REG
(
PIO_BSR
è&ð~Ð
BIT17
 |

140 
BIT18
 |

141 
BIT22
 |

142 
BIT23
 );

145 
	`PIOB_REG
(
PIO_ASR
è|ðÐ
BIT20
 |

146 
BIT21
 );

147 
	`PIOB_REG
(
PIO_BSR
è&ð~Ð
BIT20
 |

148 
BIT21
 );

154 
	`PMC_REG
(
PMC_PCER
è|ðÐ
PMC_PCR_PID_US0
 |

155 
PMC_PCR_PID_US1
 |

156 
PMC_PCR_PID_US2
 |

157 
PMC_PCR_PID_US3
 );

158 
	}
}

164 
	$b¥_¡¬t
 (è
	`__©ibu__
 ((
wk
, 
	`®s
("bsp_start_default")));

	@src/lib/libbsp/arm/csb337/startup/memmap.c

17 
	~<¹ems.h
>

18 
	~<libýu/mmu.h
>

20 
	~<b¥Ýts.h
>

25 
mmu_£ù_m­_t
 
	gmem_m­
[] = {

27 {0x00200000, 0x00000000, 1, 
MMU_CACHE_NONE
},

28 {0x00200000, 0x00200000, 1, 
MMU_CACHE_NONE
},

29 {0x10000000, 0x10000000, 8, 
MMU_CACHE_NONE
},

30 #ià
csb637


31 {0x20000000, 0x20000000, 64, 
MMU_CACHE_WTHROUGH
},

32 #ià
k637_v6


33 {0x20000000, 0x20000000, 64, 
MMU_CACHE_WTHROUGH
},

35 {0x20000000, 0x20000000, 32, 
MMU_CACHE_WTHROUGH
},

37 #ià
ENABLE_LCD


38 {0x30000000, 0x30000000, 8, 
MMU_CACHE_NONE
},

40 {0x30000000, 0x30000000, 1, 
MMU_CACHE_NONE
},

42 {0x40000000, 0x40000000, 1, 
MMU_CACHE_NONE
},

43 {0x50000000, 0x50000000, 1, 
MMU_CACHE_NONE
},

44 {0x60000000, 0x60000000, 1, 
MMU_CACHE_NONE
},

45 {0x70000000, 0x70000000, 1, 
MMU_CACHE_NONE
},

46 {0x80000000, 0x80000000, 1, 
MMU_CACHE_NONE
},

47 {0xfff00000, 0xfff00000, 1, 
MMU_CACHE_NONE
},

	@src/lib/libbsp/arm/csb337/startup/umonsupp.c

13 
	~<b¥.h
>

14 
	~<¹ems/umÚ.h
>

21 *
	$¹ems_b¥_g_umÚ_mÚ±r
()

24 
	}
}

	@src/lib/libbsp/arm/gp32/console/uart.c

18 
	~<b¥.h
>

19 
	~<¹ems/libio.h
>

20 
	~<rmios.h
>

21 
	~<¹ems/b¥Io.h
>

24 
	~<s3c24xx.h
>

25 
	~<libch/£rl.h
>

26 
	~<libch/£rsuµ.h
>

29 
	#NUM_DEVS
 1

	)

31 
u¬t_pÞl_»ad
(
mÜ
);

33 
	gdbg_dly
;

36 
u¬t_f¡_Ý
(
majÜ
, 
mÜ
, *
¬g
);

37 
u¬t_Ï¡_þo£
(
majÜ
, 
mÜ
, *
¬g
);

38 
u¬t_»ad
(
mÜ
);

39 
ssize_t
 
u¬t_wre
(
mÜ
, cÚ¡ *
buf
, 
size_t
 
Ën
);

40 
u¬t_
(
mÜ
);

41 
u¬t_wre_pÞËd
(
mÜ
, 
c
);

42 
u¬t_£t_©ibus
(
mÜ
, cÚ¡ 
rmios
 *
t
);

45 
	gCÚsÞe_CÚfigu¿tiÚ_CouÁ
 = 
NUM_DEVS
;

48 cÚ¡ 
cÚsÞe_âs
 
	gu¬t_âs
 =

50 
libch_£rl_deçuÉ_´obe
,

51 
u¬t_f¡_Ý
,

52 
u¬t_Ï¡_þo£
,

53 
u¬t_»ad
,

54 
u¬t_wre
,

55 
u¬t_
,

56 
u¬t_wre_pÞËd
,

57 
u¬t_£t_©ibus
,

58 
FALSE


68 
cÚsÞe_tbl
 
	gCÚsÞe_CÚfigu¿tiÚ_PÜts
[] = {

71 
SERIAL_CUSTOM
,

72 &
u¬t_âs
,

73 
NULL
,

74 
NULL
,

77 
NULL
,

81 
NULL
,

82 
NULL
,

83 
NULL
,

84 
NULL
,

101 
	$u¬t_f¡_Ý
(
majÜ
, 
mÜ
, *
¬g
)

104 
	}
}

112 
	$u¬t_Ï¡_þo£
(
majÜ
, 
mÜ
, *
¬g
)

115 
	}
}

124 
	$u¬t_»ad
(
mÜ
)

126 
c
;

128 ià(
mÜ
 == 0) {

129 ià(
rUTRSTAT0
 & 0x1) {

130 
c
 = 
rURXH0
 & 0xff;

131  
c
;

136 
	`´tk
("UnknowÀcÚsÞmÜumb: %d\n", 
mÜ
);

140 
	}
}

148 
ssize_t
 
	$u¬t_wre
(
mÜ
, cÚ¡ *
buf
, 
size_t
 
Ën
)

150 
i
;

152 ià(
mÜ
 == 0) {

153 
i
 = 0; i < 
Ën
; i++) {

155 !(
rUTRSTAT0
 & 0x2)) {

159 
rUTXH0
 = (è
buf
[
i
];

162 
	`´tk
("UnknowÀcÚsÞmÜumb: %d\n", 
mÜ
);

167 
	}
}

171 
	$u¬t_
(
mÜ
)

173 
i
;

174 
»g
 = 0;

177 
rCLKCON
|=0x100;

180 
»g
 = 
	`g_PCLK
() / (16 * 115200) - 1;

183 
rUFCON0
 = 0x07;

184 
rUMCON0
 = 0x0;

186 
rULCON0
 = 0x3;

191 
rUCON0
 = 0x245;

192 
rUBRDIV0
 = 
»g
;

194 
i
 = 0; i < 100; i++);

196 
	}
}

199 
	$u¬t_wre_pÞËd
(
mÜ
, 
c
)

201 
	`u¬t_wre
(
mÜ
, &
c
, 1);

202 
	}
}

205 
	$u¬t_£t_©ibus
(
mÜ
, cÚ¡ 
rmios
 *
t
)

208 
	}
}

220 
	$u¬t_pÞl_»ad
(
mÜ
)

222  
	`u¬t_»ad
(
mÜ
);

223 
	}
}

231 
	$_BSP_put_ch¬
Ð
c
 ) {

232 
	`u¬t_wre_pÞËd
(0, 
c
);

233 ià(
c
 == '\n') {

234 
	`u¬t_wre_pÞËd
(0, '\r');

236 
	}
}

238 
BSP_ouut_ch¬_funùiÚ_ty³
 
	gBSP_ouut_ch¬
 = 
_BSP_put_ch¬
;

240 
	$_BSP_g_ch¬
()

242  
	`u¬t_pÞl_»ad
(0);

243 
	}
}

245 
BSP_pÞlg_gch¬_funùiÚ_ty³
 
	gBSP_pÞl_ch¬
 = 
_BSP_g_ch¬
;

	@src/lib/libbsp/arm/gp32/include/bsp.h

16 #iâdeà
LIBBSP_ARM_GP32_BSP_H


17 
	#LIBBSP_ARM_GP32_BSP_H


	)

19 
	~<b¥Ýts.h
>

20 
	~<b¥/deçuÉ-l-exnsiÚ.h
>

22 
	~<¹ems.h
>

23 
	~<¹ems/iosuµ.h
>

24 
	~<¹ems/cÚsÞe.h
>

25 
	~<¹ems/þockdrv.h
>

26 
	~<s3c24xx.h
>

28 #ifdeà
__ýlu¥lus


32 
	#BSP_FEATURE_IRQ_EXTENSION


	)

34 
	#gp32_BuÚs
(è{
rPBCON
=0x0;}

	)

35 
	#gp32_gBuÚs
() \

36 Ð(((~
rPEDAT
 >> 6è& 0x3 )<<8è| (((~
rPBDAT
 >> 8è& 0xFF)<<0è)

	)

50 
ut32_t
 
g_FCLK
();

51 
ut32_t
 
g_HCLK
();

52 
ut32_t
 
g_PCLK
();

53 
ut32_t
 
g_UCLK
();

57 
gp32_£tP®
Ð
pos
, 
ut16_t
 
cÞÜ
);

61 
	#BSP_OSC_FREQ
 12000000

	)

63 
	#M_MDIV
 81

	)

64 
	#M_PDIV
 2

	)

65 
	#M_SDIV
 1

	)

67 
	#M_CLKDIVN
 2

	)

69 
	#REFEN
 0x1

	)

71 
	#TREFMD
 0x0

	)

73 
	#T½
 0x0

	)

75 
	#Trc
 0x3

	)

77 
	#Tchr
 0x2

	)

85 *
b¥_idË_th»ad
(
u_t
 
ignÜed
);

89 
	#BSP_IDLE_TASK_BODY
 
b¥_idË_th»ad


	)

91 #ifdeà
__ýlu¥lus


	@src/lib/libbsp/arm/gp32/smc/smc.c

9 
	~<¹ems.h
>

10 
	~<¹ems/libio.h
>

11 
	~<ºo.h
>

12 
	~<¡dlib.h
>

13 
	~<¡dio.h
>

14 
	~<¡rg.h
>

15 
	~<y³s.h
>

17 
	~"¹ems/blkdev.h
"

18 
	~"¹ems/diskdevs.h
"

19 
	~"smc.h
"

20 
	~<¹ems/b¥Io.h
>

21 
	~<s3c24xx.h
>

23 
	#SMC_DEVICE_NAME
 "/dev/smc"

	)

24 
	#SMC_SAMSUNG_ID
 0xEC

	)

25 
	#SMC_TOSHIBA_ID
 0x98

	)

27 
	#SMC_16MB
 0x73

	)

28 
	#SMC_32MB
 0x75

	)

29 
	#SMC_64MB
 0x76

	)

30 
	#SMC_128MB
 0x79

	)

32 
	#LBA_UNUSED
 0x80000000

	)

33 
	#LBA_RESERVED
 0x80000001

	)

35 
	#BLOCK_UNUSED
 0x80000000

	)

36 
	#BLOCK_RESERVED
 0x80000001

	)

39 
	#SEQ_DATA_INPUT_CMD
 0x80

	)

40 
	#READ1_CMD
 0x00

	)

41 
	#READ1_1_CMD
 0x01

	)

42 
	#READ2_CMD
 0x50

	)

43 
	#READ_ID_CMD
 0x90

	)

44 
	#RESET_CMD
 0xFF

	)

45 
	#PAGE_PROGRAM_CMD
 0x10

	)

46 
	#BLOCK_ERASE_CMD
 0x60

	)

47 
	#BLOCK_ERASE_CFM_CMD
 0xD0

	)

48 
	#READ_STATUS_CMD
 0x70

	)

49 
	#RESET_PTR_CMD
 0x00

	)

53 
	sSMC_INFO
 {

54 
ut8_t
 
	mid
[3];

55 
ut32_t
 
	mbys_³r_·ge
;

56 
ut32_t
 
	m·ges_³r_block
;

57 
ut32_t
 
	mblocks
;

58 
ut32_t
 
	mmb
;

62 #ifdeà
CPU_S3C2410


63 
	#rPBDAT
 
rGPBDAT


	)

64 
	#rPBCON
 
rGPBCON


	)

65 
	#rPDDAT
 
rGPDDAT


	)

66 
	#rPEDAT
 
rGPEDAT


	)

70 
SMC_INFO
 
	gsmc_fo
;

72 
ut32_t
 
	gsmc_l2p
[0x2000];

73 
ut32_t
 
	gsmc_p2l
[0x2000];

75 
	#sm_busy
(è!(
rPDDAT
 & 0x200))

	)

76 
	#sm_ch_
(è
rPDDAT
 &ð(~0x80)

	)

77 
	#sm_ch_dis
(è
rPDDAT
 |ð0x80

	)

78 
	#sm_þe_
(è
rPEDAT
 |ð0x20

	)

79 
	#sm_þe_dis
(è
rPEDAT
 &ð(~0x20)

	)

80 
	#sm_®e_
(è
rPEDAT
 |ð0x10

	)

81 
	#sm_®e_dis
(è
rPEDAT
 &ð(~0x10)

	)

82 
	#sm_wp_
(è
rPDDAT
 &ð(~0x40)

	)

83 
	#sm_wp_dis
(è
rPDDAT
 |ð0x40

	)

84 
	#sm_»ad_
(è
rPBCON
 &ð0xFFFF0000

	)

85 
	#sm_»ad_dis
(è
rPBCON
 = (rPBCON & 0xFFFF0000è| 0x5555

	)

86 
	#sm_wre_
(è
	`sm_»ad_dis
()

	)

87 
	#sm_wre_dis
(è
	`sm_»ad_
()

	)

89 
	$sm_wre
Ð
ut8_t
 
d©a
)

91 
rPBDAT
 = (rPBDAT & 0xFF00è| 
d©a
;

92 
rPEDAT
 &= (~0x08);

93 
rPEDAT
 |= 0x08;

94 
	}
}

96 
ut8_t
 
	$sm_»ad
()

98 
ut8_t
 
d©a
;

100 
rPDDAT
 &= (~0x100);

101 
d©a
 = 
rPBDAT
 & 0xFF;

102 
rPDDAT
 |= 0x100;

103  
d©a
;

104 
	}
}

106 
	$smc_»ad_id
Ð
ut8_t
* 
buf
, 
ut32_t
 
Ëngth
)

108 
ut32_t
 
i
;

110 
	`sm_ch_
();

112 
	`sm_þe_
();

113 
	`sm_wre_
();

114 
	`sm_wre
(
READ_ID_CMD
);

115 
	`sm_wre_dis
();

116 
	`sm_þe_dis
();

118 
	`sm_®e_
();

119 
	`sm_wre_
();

120 
	`sm_wre
( 0);

121 
	`sm_wre_dis
();

122 
	`sm_®e_dis
();

124 
	`sm_»ad_
();

125 
i
=0;i<
Ëngth
;i++è*(
buf
+ièð
	`sm_»ad
();

126 
	`sm_»ad_dis
();

128 
	`sm_ch_dis
();

129 
	}
}

132 
ut8_t
 
	$smc_»ad_·ge
 (
ut32_t
 
Íage
, 
ut8_t
* 
buf
)

134 
ut32_t
 
block
, 
·ge
, 
i
;

139 
block
 = 
Íage
 >> 5;

140 ià(
smc_l2p
[
block
] < 
LBA_UNUSED
) {

141 
·ge
 = 
smc_l2p
[
block
] << 5;

142 
·ge
 +ð(
Íage
 & 0x1F);

147 
	`sm_ch_
();

149 
	`sm_þe_
();

150 
	`sm_wre_
();

151 
	`sm_wre
(
READ1_CMD
);

152 
	`sm_wre_dis
();

153 
	`sm_þe_dis
();

155 
	`sm_®e_
();

156 
	`sm_wre_
();

157 
	`sm_wre
( 0x00);

158 
	`sm_wre
Ð(
ut8_t
)(
·ge
 >> 0));

159 
	`sm_wre
Ð(
ut8_t
)(
·ge
 >> 8));

160 ià(
smc_fo
.
mb
 >= 64)

161 
	`sm_wre
Ð(
ut8_t
)(
·ge
 >> 16));

162 
	`sm_wre_dis
();

163 
	`sm_®e_dis
();

165 
	`sm_busy
();

167 
	`sm_»ad_
();

168 
i
 = 0; i < 512; i++) {

169 *
buf
 = 
	`sm_»ad
();

170 
buf
++;

172 
	`sm_»ad_dis
();

173 
	`sm_ch_dis
();

175 
	`sm_busy
();

177 
	}
}

179 
	$smc_»ad_¥¬e
Ð
ut32_t
 
·ge
, 
ut8_t
* 
buf
, ut8_
Ëngth
)

181 
ut32_t
 
i
;

183 
	`sm_ch_
();

185 
	`sm_þe_
();

186 
	`sm_»ad_dis
();

187 
	`sm_wre
(
READ2_CMD
);

188 
	`sm_»ad_
();

189 
	`sm_þe_dis
();

191 
	`sm_®e_
();

192 
	`sm_»ad_dis
();

193 
	`sm_wre
( 0x00);

194 
	`sm_wre
Ð(
ut8_t
)(
·ge
 >> 0));

195 
	`sm_wre
Ð(
ut8_t
)(
·ge
 >> 8));

196 ià(
smc_fo
.
mb
 >= 64)

197 
	`sm_wre
Ð(
ut8_t
)(
·ge
 >> 16));

198 
	`sm_»ad_
();

199 
	`sm_®e_dis
();

201 
	`sm_busy
();

203 
	`sm_»ad_
();

204 
i
=0;i<
Ëngth
;i++)

205 *(
buf
+
i
èð
	`sm_»ad
();

206 
	`sm_»ad_dis
();

208 
	`sm_ch_dis
();

210 
	}
}

212 
	$smc_make_l2p
()

214 
ut32_t
 
pblock
, 
i
, 
j
, 
lblock
, 
zÚe
, 
couÁ
, 
út1
, 
út2
, 
út3
;

215 
ut8_t
 
d©a
[512];

217 
út1
 = 0;

218 
út2
 = 0;

219 
út3
 = 0;

221 
i
=0;i<0x2000;i++) {

222 
smc_l2p
[
i
] = 
LBA_RESERVED
;

223 
smc_p2l
[
i
] = 
BLOCK_RESERVED
;

226 
pblock
=0;pblock<
smc_fo
.
blocks
;pblock++) {

228 
	`smc_»ad_¥¬e
Ð
pblock
*
smc_fo
.
·ges_³r_block
, (
ut8_t
*)&
d©a
, 16);

230 
zÚe
 = 
pblock
 >> 10;

231 ià((
d©a
[5] == 0xFF) && ((data[6]&0xF8) == 0x10)) {

232 
lblock
 = ((((
d©a
[6]<<8)|(d©a[7]<<0)è>> 1è& 0x03FFè+ (
zÚe
 * 1000);

233 
smc_l2p
[
lblock
] = 
pblock
;

234 
smc_p2l
[
pblock
] = 
lblock
;

235 
út1
++;

237 
couÁ
 = 0;

238 
j
=0;j<16;j++) {

239 ià(
d©a
[
j
] =ð0xFFè
couÁ
++;

241 ià(
couÁ
 == 16) {

242 
smc_p2l
[
pblock
] = 
BLOCK_UNUSED
;

243 
út2
++;

245 
smc_p2l
[
pblock
] = 
BLOCK_RESERVED
;

246 
út3
++;

250 
	}
}

253 
	$smc_deù
Ð
ut8_t
 
id1
, ut8_
id2
, ut8_
id3
)

255 
smc_fo
.
id
[0] = 
id1
;

256 
smc_fo
.
id
[1] = 
id2
;

257 
smc_fo
.
id
[2] = 
id3
;

258 
smc_fo
.
mb
 = 0;

259 
smc_fo
.
bys_³r_·ge
 = 0;

260 
smc_fo
.
·ges_³r_block
 = 0;

261 
smc_fo
.
blocks
 = 0;

263 
id1
) {

264 
SMC_SAMSUNG_ID
:

265 
SMC_TOSHIBA_ID
: {

266 
id2
) {

267 
SMC_16MB
 : 
smc_fo
.
mb
 = 16; ;

268 
SMC_32MB
 : 
smc_fo
.
mb
 = 32; ;

269 
SMC_64MB
 : 
smc_fo
.
mb
 = 64; ;

270 
SMC_128MB
 : 
smc_fo
.
mb
 = 128; ;

276 
smc_fo
.
mb
) {

277 16 : 
smc_fo
.
bys_³r_·ge
 = 512; smc_fo.
·ges_³r_block
 = 32; smc_fo.
blocks
 = 0x0400; ;

278 32 : 
smc_fo
.
bys_³r_·ge
 = 512; smc_fo.
·ges_³r_block
 = 32; smc_fo.
blocks
 = 0x0800; ;

279 64 : 
smc_fo
.
bys_³r_·ge
 = 512; smc_fo.
·ges_³r_block
 = 32; smc_fo.
blocks
 = 0x1000; ;

280 128 : 
smc_fo
.
bys_³r_·ge
 = 512; smc_fo.
·ges_³r_block
 = 32; smc_fo.
blocks
 = 0x2000; ;

282 
	}
}

284 
	$smc_
( )

286 
buf
[32];

287 
i
;

290 
	`sm_ch_
();

291 
	`sm_þe_
();

292 
	`sm_wre_
();

293 
	`sm_wre
(0xFF);

294 
	`sm_wre_dis
();

295 
	`sm_þe_dis
();

296 
i
=0;i<10;i++);

297 
	`sm_busy
();

298 
	`sm_ch_dis
();

300 
	`smc_»ad_id
 (
buf
, 4);

301 
	`smc_deù
 (
buf
[0], buf[1], buf[2]);

302 
	`´tk
 ("SMC: [%02X-%02X-%02X-%02X]\n", 
buf
[0], buf[1], buf[2], buf[3]);

303 
	`´tk
 ("SMC size: %dMB deùed\n",
smc_fo
.
mb
);

304 
	`smc_make_l2p
();

305 
	}
}

310 
	$smc_wre
(
¹ems_blkdev_»que¡
 *
»q
)

312 
	`¹ems_blkdev_»que¡_dÚe
(
»q
, 
RTEMS_SUCCESSFUL
);

314 
	}
}

325 
	$smc_»ad
(
¹ems_blkdev_»que¡
 *
»q
)

327 
ut32_t
 
i
;

328 
¹ems_blkdev_sg_bufãr
 *
sg
;

329 
ut32_t
 
»mas
;

331 
»mas
 = 
smc_fo
.
bys_³r_·ge
 * 
»q
->
buâum
;

332 
sg
 = 
»q
->
bufs
;

333 
i
 = 0; (
»mas
 > 0è&& (< 
»q
->
buâum
); i++, 
sg
++)

335 
couÁ
 = 
sg
->
Ëngth
;

336 ià(
couÁ
 > 
»mas
)

337 
couÁ
 = 
»mas
;

338 
	`smc_»ad_·ge
(
sg
->
block
,sg->
bufãr
);

339 
»mas
 -ð
couÁ
;

341 
	`¹ems_blkdev_»que¡_dÚe
(
»q
, 
RTEMS_SUCCESSFUL
);

343 
	}
}

357 
	$smc_ioùl
(
¹ems_disk_deviû
 *
dd
, 
ut32_t
 
»q
, *
¬gp
)

359 
»q
)

361 
RTEMS_BLKIO_REQUEST
:

363 
¹ems_blkdev_»que¡
 *
r
 = 
¬gp
;

364 
r
->
»q
)

366 
RTEMS_BLKDEV_REQ_READ
:

367  
	`smc_»ad
(
r
);

368 
RTEMS_BLKDEV_REQ_WRITE
:

369  
	`smc_wre
(
r
);

371 
ºo
 = 
EINVAL
;

378 
ºo
 = 
EINVAL
;

381 
	}
}

395 
¹ems_deviû_driv


396 
	$smc_lize
(

397 
¹ems_deviû_majÜ_numb
 
majÜ
,

398 
¹ems_deviû_mÜ_numb
 
mÜ
,

399 *
¬g
)

401 
¹ems_¡©us_code
 
rc
;

402 
dev_t
 
dev
;

403 
ut32_t
 
block_num
;

405 
rc
 = 
	`¹ems_disk_io_lize
();

406 ià(
rc
 !ð
RTEMS_SUCCESSFUL
)

407  
rc
;

409 
	`smc_
();

410 
block_num
 = 
smc_fo
.
blocks
 << 5;

412 
dev
 = 
	`¹ems_fesy¡em_make_dev_t
(
majÜ
, 0);

413 
rc
 = 
	`¹ems_disk_ü_phys
(
dev
, 512, 
block_num
,

414 
smc_ioùl
, 
NULL
, 
SMC_DEVICE_NAME
);

416  
RTEMS_SUCCESSFUL
;

417 
	}
}

	@src/lib/libbsp/arm/gp32/smc/smc.h

7 #iâdeà
__SMC_H__


8 
	#__SMC_H__


	)

10 #ifdeà
__ýlu¥lus


14 
	~<¹ems.h
>

16 
	~"¹ems/blkdev.h
"

29 
¹ems_deviû_driv


30 
smc_lize
(

31 
¹ems_deviû_majÜ_numb
 
majÜ
,

32 
¹ems_deviû_mÜ_numb
 
mÜ
,

33 *
¬g
);

35 
	#SMC_DRIVER_TABLE_ENTRY
 \

36 { 
smc_lize
, 
GENERIC_BLOCK_DEVICE_DRIVER_ENTRIES
 }

	)

40 #ifdeà
__ýlu¥lus


	@src/lib/libbsp/arm/gp32/startup/bspidle.c

14 
	~<b¥.h
>

16 *
	$b¥_idË_th»ad
(
u_t
 
ignÜed
)

19 
__asm__
 volatile ("MCR15,0,r0,c7,c0,4 \n");

21  
NULL
;

22 
	}
}

	@src/lib/libbsp/arm/gp32/startup/bspreset.c

7 
	~<b¥.h
>

8 
	~<b¥/boÙÿrd.h
>

10 
	$b¥_»£t
()

12 
¹ems_¼u±_Ëv
 
Ëv
;

14 (è
Ëv
;

15 
	`¹ems_¼u±_di§bË
(
Ëv
);

17 
__asm__
 volatile(""

39 
	}
}

	@src/lib/libbsp/arm/gp32/startup/bspstart.c

16 
	~<b¥.h
>

17 
	~<b¥/q-gic.h
>

18 
	~<¹ems/b¥Io.h
>

19 
	~<s3c24xx.h
>

24 
	$b¥_¡¬t_deçuÉ
( )

26 
ut32_t
 
ü
;

27 
ut32_t
 
³nd
,
Ï¡
;

28 
ut32_t
 
REFCNT
;

29 
i
;

32 #ifdeà
CPU_S3C2400


33 
rTICINT
 = 0x0;

35 
rTICNT
 = 0x0;

38 
rWTCON
 = 0x0;

39 
rTCON
 = 0x0;

40 
rADCCON
 = 0x0;

43 
rINTMOD
 = 0x0;

44 
rINTMSK
 = 
BIT_ALLMSK
;

46 
Ï¡
 = 0;

47 
i
=0; i<4; i++) {

48 
³nd
 = 
rSRCPND
;

49 if(
³nd
 =ð0 ||d =ð
Ï¡
)

51 
rSRCPND
 = 
³nd
;

52 
rINTPND
 = 
³nd
;

53 
Ï¡
 = 
³nd
;

57 
rCLKDIVN
 = 
M_CLKDIVN
;

58 
rMPLLCON
 = ((
M_MDIV
<<12)+(
M_PDIV
<<4)+
M_SDIV
);

62 
REFCNT
 = 2048+1-(15.6*
	`g_HCLK
()/1000000);

63 
rREFRESH
 = ((
REFEN
<<23)+(
TREFMD
<<22)+(
T½
<<20)+(
Trc
<<18)+(
Tchr
<<16)+
REFCNT
);

66 
ü
 = 
rTCFG0
 & 0xFFFF00FF;

67 
rTCFG0
 = (
ü
 | (15<<8));

70 
ü
 = 
rTCFG0
 & 0xFFFFFF00;

71 
rTCFG0
 = (
ü
 | (0<<0));

77 
	`¹ems_exû±iÚ__mngt
();

82 
	`b¥_¼u±_lize
();

83 
	}
}

89 
	$b¥_¡¬t
 (è
	`__©ibu__
 ((
wk
, 
	`®s
("bsp_start_default")));

	@src/lib/libbsp/arm/gp32/startup/memmap.c

11 
	~<¹ems.h
>

12 
	~<libýu/mmu.h
>

17 
mmu_£ù_m­_t
 
	gmem_m­
[] = {

19 {0x0c000000, 0x00000000, 1, 
MMU_CACHE_NONE
},

20 {0x0c000000, 0x0c000000, 7, 
MMU_CACHE_WTHROUGH
},

21 {0x0c700000, 0x0c700000, 1, 
MMU_CACHE_NONE
},

22 {0x14000000, 0x14000000, 16, 
MMU_CACHE_NONE
},

23 {0x15000000, 0x15000000, 16, 
MMU_CACHE_NONE
},

	@src/lib/libbsp/arm/hi3518e/console/uart.c

18 
	~<b¥.h
>

19 
	~<¹ems/libio.h
>

20 
	~<rmios.h
>

21 
	~<¹ems/b¥Io.h
>

23 
	~<libch/£rl.h
>

24 
	~<libch/£rsuµ.h
>

26 
	~<¶©fÜm.h
>

29 
	#NUM_DEVS
 1

	)

31 
u¬t_pÞl_»ad
(
mÜ
);

33 
	gdbg_dly
;

36 
u¬t_f¡_Ý
(
majÜ
, 
mÜ
, *
¬g
);

37 
u¬t_Ï¡_þo£
(
majÜ
, 
mÜ
, *
¬g
);

38 
u¬t_»ad
(
mÜ
);

39 
ssize_t
 
u¬t_wre
(
mÜ
, cÚ¡ 
c
, 
size_t
 
Ën
);

40 
u¬t_
(
mÜ
);

41 
u¬t_wre_pÞËd
(
mÜ
, 
c
);

42 
u¬t_£t_©ibus
(
mÜ
, cÚ¡ 
rmios
 *
t
);

45 
	gCÚsÞe_CÚfigu¿tiÚ_CouÁ
 = 
NUM_DEVS
;

48 cÚ¡ 
cÚsÞe_âs
 
	gu¬t_âs
 =

50 
libch_£rl_deçuÉ_´obe
,

51 
u¬t_f¡_Ý
,

52 
u¬t_Ï¡_þo£
,

53 
u¬t_»ad
,

54 
u¬t_wre
,

55 
u¬t_
,

56 
u¬t_wre_pÞËd
,

57 
u¬t_£t_©ibus
,

58 
FALSE


68 
cÚsÞe_tbl
 
	gCÚsÞe_CÚfigu¿tiÚ_PÜts
[] = {

71 
SERIAL_CUSTOM
,

72 &
u¬t_âs
,

73 
NULL
,

74 
NULL
,

77 
NULL
,

78 
UART0_REG_BASE
,

81 
NULL
,

82 
NULL
,

83 
NULL
,

84 
NULL
,

101 
	$u¬t_f¡_Ý
(
majÜ
, 
mÜ
, *
¬g
)

104 
	}
}

112 
	$u¬t_Ï¡_þo£
(
majÜ
, 
mÜ
, *
¬g
)

115 
	}
}

124 
	$u¬t_»ad
(
mÜ
)

126 
d©a
;

128 ià(
mÜ
 == 0) {

130 
	`UART_RD_REG
(
UART_PL01x_FR
è& 
UART_PL01x_FR_RXFE
);

131 
d©a
 = 
	`UART_RD_REG
(
UART_PL01x_DR
);

134 ià(
d©a
 & 0xFFFFFF00) {

136 
	`UART_WR_REG
(
UART_PL01x_ECR
, 0xFFFFFFFF);

140  (è
d©a
;

142 
	`´tk
("UnknowÀcÚsÞmÜumb: %d\n", 
mÜ
);

145 
	}
}

154 
ssize_t
 
	$u¬t_wre
(
mÜ
, cÚ¡ 
c
, 
size_t
 
Ën
)

157 
	`UART_RD_REG
(
UART_PL01x_FR
è& 
UART_PL01x_FR_TXFF
);

160 
	`UART_WR_REG
 (
UART_PL01x_DR
, 
c
);

163 
	}
}

167 
	$u¬t_
(
mÜ
)

169 
mp
;

170 
divid
;

171 
»mad
;

172 
äaùiÚ
;

177 
	`UART_WR_REG
(
UART_PL011_CR
, 0x0);

184 
mp
 = 16 * 
UART_BAUDRATE
;

185 
divid
 = 
UART_PL011_CLOCK
 / 
mp
;

186 
»mad
 = 
UART_PL011_CLOCK
 % 
mp
;

187 
mp
 = (8 * 
»mad
è/ 
UART_BAUDRATE
;

188 
äaùiÚ
 = (
mp
 >> 1) + (temp & 1);

190 
	`UART_WR_REG
(
UART_PL011_IBRD
, 
divid
);

191 
	`UART_WR_REG
(
UART_PL011_FBRD
, 
äaùiÚ
);

196 
	`UART_WR_REG
(
UART_PL011_LCRH
, (
UART_PL011_LCRH_WLEN_8
 | 
UART_PL011_LCRH_FEN
));

201 
	`UART_WR_REG
(
UART_PL011_CR
, (
UART_PL011_CR_UARTEN
 |

202 
UART_PL011_CR_TXE
 | 
UART_PL011_CR_RXE
));

203 
	}
}

206 
	$u¬t_wre_pÞËd
(
mÜ
, 
c
)

208 
	`u¬t_wre
(
mÜ
, 
c
, 1);

209 
	}
}

212 
	$u¬t_£t_©ibus
(
mÜ
, cÚ¡ 
rmios
 *
t
)

215 
	}
}

227 
	$u¬t_pÞl_»ad
(
mÜ
)

229  
	`u¬t_»ad
(
mÜ
);

230 
	}
}

238 
	$_BSP_put_ch¬
Ð
c
 ) {

239 
	`u¬t_wre_pÞËd
(0, 
c
);

240 ià(
c
 == '\n') {

241 
	`u¬t_wre_pÞËd
(0, '\r');

243 
	}
}

245 
BSP_ouut_ch¬_funùiÚ_ty³
 
	gBSP_ouut_ch¬
 = 
_BSP_put_ch¬
;

247 
	$_BSP_g_ch¬
()

249  
	`u¬t_pÞl_»ad
(0);

250 
	}
}

252 
BSP_pÞlg_gch¬_funùiÚ_ty³
 
	gBSP_pÞl_ch¬
 = 
_BSP_g_ch¬
;

	@src/lib/libbsp/arm/hi3518e/i2c/i2c.c

19 
	~<dev/i2c/i2c.h
>

20 
	~<i2c.h
>

21 
	~<¶©fÜm.h
>

23 
ut8_t
 
	gi2c__æag
 = 0;

25 
	$i2c_£t_¿
(
ut32_t
 
i2c_¿
)

27 
ut32_t
 
v®
, 
sþH
, 
sþL
;

30 
v®
 = 
	`I2C_RD_REG
(
I2C_CTRL_REG
);

33 
	`I2C_WR_REG
(
I2C_CTRL_REG
, (
v®
 & (~
I2C_UNMASK_TOTAL
)));

34 
sþH
 = (
I2C_DFT_CLK
 / (
i2c_¿
 * 2)) / 2 - 1;

35 
	`I2C_WR_REG
(
I2C_SCL_H_REG
, 
sþH
);

36 
sþL
 = (
I2C_DFT_CLK
 / (
i2c_¿
 * 2)) / 2 - 1;

37 
	`I2C_WR_REG
(
I2C_SCL_L_REG
, 
sþL
);

40 
	`I2C_WR_REG
(
I2C_CTRL_REG
, 
v®
);

41 
	}
}

43 
	$hi_i2c_wa_wrnd
()

45 
ut32_t
 
¤c_»g
, 
i
;

48 
¤c_»g
 = 
	`I2C_RD_REG
(
I2C_SR_REG
);

49 if(
i
 > 
I2C_WAIT_TIME_OUT
){

52 
i
++;

53 }(
¤c_»g
 & 
I2C_OVER_INTR
) != I2C_OVER_INTR);

54 
	`I2C_WR_REG
(
I2C_ICR_REG
, 
I2C_CLEAR_ALL
);

56 
	}
}

58 
	$hi_i2c_wa_»add
()

60 
ut32_t
 
¤c_»g
, 
i
;

63 
¤c_»g
 = 
	`I2C_RD_REG
(
I2C_SR_REG
);

64 if(
i
 > 
I2C_WAIT_TIME_OUT
){

67 
i
++;

68 }(
¤c_»g
 & 
I2C_OVER_INTR
) != I2C_OVER_INTR);

71 
	}
}

73 
	$hi_i2c_
()

75 if(
i2c__æag
)

79 
	`HI_REG_WR
(0x200f0018, 0x1);

80 
	`HI_REG_WR
(0x200f001c, 0x1);

83 
	`HI_REG_WR
(0x200f0008, 0x0);

84 
	`HI_REG_WR
(0x20030030, 0x1);

88 
	`HI_REG_WR
(0x2003002c, 0xa);

93 
	`m¦p
(100);

95 
	`i2c_£t_¿
(
I2C_DFT_RATE
);

97 
i2c__æag
 = 1;

98 
	}
}

100 
	$hi_i2c_wre
(
ut8_t
 
dev_addr
, 
ut32_t
 
»g_addr
, ut32_
»g_by
, ut32_
d©a
, ut32_
d©a_by
)

102 
ut32_t
 
i
;

103 
ut32_t
 
addr
, 
td©a
 = 0;

104 
»t
 = 0;

107 
	`I2C_WR_REG
(
I2C_ICR_REG
, 0x03);

108 
	`I2C_WR_REG
(
I2C_CTRL_REG
, 0x187);

110 
	`I2C_WR_REG
(
I2C_TXR_REG
, (
dev_addr
 & 
WRITE_OPERATION
));

111 
	`I2C_WR_REG
(
I2C_COM_REG
, (
I2C_WRITE
 | 
I2C_START
));

112 
»t
 = 
	`hi_i2c_wa_wrnd
();

113 if(
»t
 < 0)

116 
i
 = 0; i < 
»g_by
; ++i) {

117 
addr
 = 
»g_addr
 >> ((
»g_by
-
i
-1)*8);

118 
	`I2C_WR_REG
(
I2C_TXR_REG
, 
addr
);

119 
	`I2C_WR_REG
(
I2C_COM_REG
, 
I2C_WRITE
);

120 
»t
 = 
	`hi_i2c_wa_wrnd
();

121 if(
»t
 < 0)

126 
i
 = 0; i < 
d©a_by
; ++i) {

127 
td©a
 = 
d©a
 >> ((
d©a_by
-
i
-1)*8);

128 
	`I2C_WR_REG
(
I2C_TXR_REG
, 
td©a
);

129 
	`I2C_WR_REG
(
I2C_COM_REG
, 
I2C_WRITE
);

130 
»t
 = 
	`hi_i2c_wa_wrnd
();

131 if(
»t
 < 0)

135 
	`I2C_WR_REG
(
I2C_COM_REG
, 
I2C_STOP
);

136 
	`hi_i2c_wa_wrnd
();

137 
	`I2C_WR_REG
(
I2C_ICR_REG
, 0x01);

140 
	}
}

142 
	$hi_i2c_»ad
(
ut8_t
 
dev_addr
, 
ut32_t
 
»g_addr
, ut32_
»g_by
, ut32_*
d©a
, ut32_
d©a_by
)

144 
ut32_t
 
tmp
 = 0xFF, 
i
, 
addr
;

145 
ut32_t
 
td©a
 = 0;

146 
»t
 = 0;

149 
	`I2C_WR_REG
(
I2C_ICR_REG
, 0x03);

150 
	`I2C_WR_REG
(
I2C_CTRL_REG
, 0x187);

152 
	`I2C_WR_REG
(
I2C_TXR_REG
, (
dev_addr
 & 
WRITE_OPERATION
));

153 
	`I2C_WR_REG
(
I2C_COM_REG
, (
I2C_WRITE
 | 
I2C_START
));

154 
»t
 = 
	`hi_i2c_wa_wrnd
();

155 if(
»t
 < 0)

158 
i
 = 0; i < 
»g_by
; ++i) {

159 
addr
 = 
»g_addr
 >> ((
»g_by
-
i
-1)*8);

160 
	`I2C_WR_REG
(
I2C_TXR_REG
, 
addr
);

161 
	`I2C_WR_REG
(
I2C_COM_REG
, 
I2C_WRITE
);

162 
»t
 = 
	`hi_i2c_wa_wrnd
();

163 if(
»t
 < 0)

168 
	`I2C_WR_REG
(
I2C_TXR_REG
, (
dev_addr
 & 
READ_OPERATION
));

169 
	`I2C_WR_REG
(
I2C_COM_REG
, (
I2C_WRITE
 | 
I2C_START
));

170 
»t
 = 
	`hi_i2c_wa_wrnd
();

171 if(
»t
 < 0)

175 
i
 = 0; i < 
d©a_by
; ++i) {

176 if(
i
 =ð(
d©a_by
-1)){

177 
	`I2C_WR_REG
(
I2C_COM_REG
, (
I2C_READ
 | (~
I2C_SEND_ACK
)));

179 
	`I2C_WR_REG
(
I2C_COM_REG
, 
I2C_READ
);

181 
»t
 = 
	`hi_i2c_wa_»add
();

182 if(
»t
 < 0)

184 
tmp
 = 
	`I2C_RD_REG
(
I2C_RXR_REG
);

185 
td©a
 |ð(
tmp
 << ((
d©a_by
-
i
-1)*8));

186 
»t
 = 
	`hi_i2c_wa_wrnd
();

187 if(
»t
 < 0)

192 
	`I2C_WR_REG
(
I2C_COM_REG
, 
I2C_STOP
);

193 
»t
 = 
	`hi_i2c_wa_wrnd
();

194 if(
»t
 < 0)

197 *
d©a
 = 
td©a
;

200 
	}
}

	@src/lib/libbsp/arm/hi3518e/include/bsp.h

18 #iâdeà
LIBBSP_ARM_HI3518E_BSP_H


19 
	#LIBBSP_ARM_HI3518E_BSP_H


	)

21 
	~<b¥Ýts.h
>

22 
	~<b¥/deçuÉ-l-exnsiÚ.h
>

24 #ifdeà
__ýlu¥lus


41 #ifdeà
__ýlu¥lus


	@src/lib/libbsp/arm/hi3518e/include/i2c.h

1 #iâdeà
_I2C_H


2 
	#_I2C_H


	)

4 
	#I2C_WAIT_TIME_OUT
 0x1000

	)

5 
	#CFG_I2C_IRQEN
 (1<<20)

	)

8 
	#I2C_DFT_CLK
 (100000000)

9 
	#I2C_DFT_RATE
 (100000)

	)

11 
	#READ_OPERATION
 (1)

	)

12 
	#WRITE_OPERATION
 0xã

	)

13 
	#CMD_I2C_WRITE
 0x01

	)

14 
	#CMD_I2C_READ
 0x03

	)

17 
	#I2C_ENABLE
 (1 << 8)

	)

18 
	#I2C_UNMASK_TOTAL
 (1 << 7)

	)

19 
	#I2C_UNMASK_START
 (1 << 6)

	)

20 
	#I2C_UNMASK_END
 (1 << 5)

	)

21 
	#I2C_UNMASK_SEND
 (1 << 4)

	)

22 
	#I2C_UNMASK_RECEIVE
 (1 << 3)

	)

23 
	#I2C_UNMASK_ACK
 (1 << 2)

	)

24 
	#I2C_UNMASK_ARBITRATE
 (1<< 1)

	)

25 
	#I2C_UNMASK_OVER
 (1 << 0)

	)

26 
	#I2C_UNMASK_ALL
 (
I2C_UNMASK_START
 | 
I2C_UNMASK_END
 | \

27 
I2C_UNMASK_SEND
 | 
I2C_UNMASK_RECEIVE
 | \

28 
I2C_UNMASK_ACK
 | 
I2C_UNMASK_ARBITRATE
 | \

29 
I2C_UNMASK_OVER
)

	)

32 
	#I2C_SEND_ACK
 (~(1 << 4))

	)

33 
	#I2C_START
 (1 << 3)

	)

34 
	#I2C_READ
 (1 << 2)

	)

35 
	#I2C_WRITE
 (1 << 1)

	)

36 
	#I2C_STOP
 (1 << 0)

	)

39 
	#I2C_CLEAR_START
 (1 << 6)

	)

40 
	#I2C_CLEAR_END
 (1 << 5)

	)

41 
	#I2C_CLEAR_SEND
 (1 << 4)

	)

42 
	#I2C_CLEAR_RECEIVE
 (1 << 3)

	)

43 
	#I2C_CLEAR_ACK
 (1 << 2)

	)

44 
	#I2C_CLEAR_ARBITRATE
 (1 << 1)

	)

45 
	#I2C_CLEAR_OVER
 (1 << 0)

	)

46 
	#I2C_CLEAR_ALL
 (
I2C_CLEAR_START
 | 
I2C_CLEAR_END
 | \

47 
I2C_CLEAR_SEND
 | 
I2C_CLEAR_RECEIVE
 | \

48 
I2C_CLEAR_ACK
 | 
I2C_CLEAR_ARBITRATE
 | \

49 
I2C_CLEAR_OVER
)

	)

52 
	#I2C_BUSY
 (1 << 7)

	)

53 
	#I2C_START_INTR
 (1 << 6)

	)

54 
	#I2C_END_INTR
 (1 << 5)

	)

55 
	#I2C_SEND_INTR
 (1 << 4)

	)

56 
	#I2C_RECEIVE_INTR
 (1 << 3)

	)

57 
	#I2C_ACK_INTR
 (1 << 2)

	)

58 
	#I2C_ARBITRATE_INTR
 (1 << 1)

	)

59 
	#I2C_OVER_INTR
 (1 << 0)

	)

61 
hi_i2c_
();

62 
hi_i2c_wre
(
ut8_t
 
dev_addr
, 
ut32_t
 
»g_addr
, ut32_
»g_by
, ut32_
d©a
, ut32_
d©a_by
);

63 
hi_i2c_»ad
(
ut8_t
 
dev_addr
, 
ut32_t
 
»g_addr
, ut32_
»g_by
, ut32_*
d©a
, ut32_
d©a_by
);

	@src/lib/libbsp/arm/hi3518e/include/pinmux.h

1 #iâdeà
_PINMUX_H


2 
	#_PINMUX_H


	)

	@src/lib/libbsp/arm/hi3518e/include/vicap.h

1 #iâdeà
_VICAP_H


2 
	#_VICAP_H


	)

	@src/lib/libbsp/arm/hi3518e/startup/bspreset.c

23 
	~<b¥.h
>

24 
	~<b¥/boÙÿrd.h
>

26 
	$b¥_»£t
()

28 
¹ems_¼u±_Ëv
 
Ëv
;

30 
	`¹ems_¼u±_di§bË
(
Ëv
);

31 ()
Ëv
;

35 
	}
}

	@src/lib/libbsp/arm/hi3518e/startup/bspstart.c

18 
	~<b¥.h
>

19 
	~<b¥/q-gic.h
>

20 
	~<¶©fÜm.h
>

25 
	$b¥_show_fo
()

27 
ut32_t
 
i
, 
sysid
[4], 
vsiÚ
;

29 
i
 = 0; i < 4; i++){

30 
sysid
[
i
] = 
	`HI_REG_RD
(
SYSID_RGE_BASE
+i*4);

31 
vsiÚ
 +ð
sysid
[
i
] << (i*8);

34 
	`´tk
("\n#################################################\n");

35 
	`´tk
("@ RTEMS Real Time Operating System\n");

36 
	`´tk
("@ System version: V4.11\n");

37 
	`´tk
("@ Cpu vsiÚ: Hi%x\n", 
vsiÚ
);

38 
	`´tk
("#################################################\n\n");

39 
	}
}

44 
	$b¥_¡¬t
()

46 
	`b¥_show_fo
();

47 
	`¹ems_exû±iÚ__mngt
();

48 
	`b¥_¼u±_lize
();

49 
	}
}

	@src/lib/libbsp/arm/hi3518e/video/vicap.c

19 
	~<¶©fÜm.h
>

20 
	~<viÿp.h
>

22 
	$viÿp_£t_y_buæ
(
ut32_t
 
buf_Ën
)

24 
ut32_t
 
v®
 = 0;

26 
v®
 = 
	`VICAP_RD_REG
(
VICAP_CH_DES_Y_CFG
);

27 
v®
 = (v®&0x0000FFFF)|(
buf_Ën
<<16);

28 
	`VICAP_WR_REG
(
VICAP_CH_DES_Y_CFG
, 
v®
);

29 
	}
}

31 
	$viÿp_£t_y_çddr
(
ut32_t
 
addr
)

33 
viÿp


34 
	}
}

36 
	$viÿp_»g_
()

39 
	`VICAP_WR_REG
(
VICAP_PT_SEL
, 0x0);

40 
	`VICAP_WR_REG
(
VICAP_PT_INT_MASK
, 0x1);

43 
	`VICAP_WR_REG
(
VICAP_CH_SEL
, 0x0);

47 
	`VICAP_WR_REG
(
VICAP_INT_MASK
, 
PT0_INT_EN
|
CH0_INT_EN
);

50 
	`VICAP_WR_REG
(
VICAP_PT_INTF_MOD
, 
PT_EN
));

53 
	`VICAP_WR_REG
(
VICAP_CH_CTRL
, 
CH_EN
);

56 
	`VICAP_WR_REG
(
VICAP_CH_DES_Y_CFG
, );

57 
	}
}

	@src/lib/libbsp/arm/lpc32xx/console/console-config.c

23 
	~<libch/ns16550.h
>

25 
	~<b¥.h
>

26 
	~<b¥/Íc32xx.h
>

27 
	~<b¥/q.h
>

28 
	~<b¥/hsu.h
>

29 
	~<b¥/cÚsÞe-rmios.h
>

31 
ut8_t
 
	$Íc32xx_u¬t_g_»gi¡
(
u_t
 
addr
, 
ut8_t
 
i
)

33 vÞ©
ut32_t
 *
»g
 = (vÞ©ut32_*è
addr
;

35  (
ut8_t
è
»g
 [
i
];

36 
	}
}

38 
	$Íc32xx_u¬t_£t_»gi¡
(
u_t
 
addr
, 
ut8_t
 
i
, ut8_
v®
)

40 vÞ©
ut32_t
 *
»g
 = (vÞ©ut32_*è
addr
;

42 
»g
 [
i
] = 
v®
;

43 
	}
}

45 #ifdeà
LPC32XX_UART_3_BAUD


46 
boÞ
 
	$Íc32xx_u¬t_´obe_3
(
¹ems_rmios_deviû_cÚxt
 *
cÚxt
)

48 
LPC32XX_UARTCLK_CTRL
 |ð
	`BSP_BIT32
(0);

49 
LPC32XX_U3CLK
 = 
LPC32XX_CONFIG_U3CLK
;

50 
LPC32XX_UART_CLKMODE
 = 
	`BSP_FLD32SET
(LPC32XX_UART_CLKMODE, 0x2, 4, 5);

52  
	`ns16550_´obe
(
cÚxt
);

53 
	}
}

56 #ifdeà
LPC32XX_UART_4_BAUD


57 
boÞ
 
	$Íc32xx_u¬t_´obe_4
(
¹ems_rmios_deviû_cÚxt
 *
cÚxt
)

59 vÞ©
Íc32xx_gpio
 *
gpio
 = &
Íc32xx
.gpio;

65 
gpio
->
p2_mux_£t
 = 
	`BSP_BIT32
(2);

67 
LPC32XX_UARTCLK_CTRL
 |ð
	`BSP_BIT32
(1);

68 
LPC32XX_U4CLK
 = 
LPC32XX_CONFIG_U4CLK
;

69 
LPC32XX_UART_CLKMODE
 = 
	`BSP_FLD32SET
(LPC32XX_UART_CLKMODE, 0x2, 6, 7);

71  
	`ns16550_´obe
(
cÚxt
);

72 
	}
}

75 #ifdeà
LPC32XX_UART_6_BAUD


76 
boÞ
 
	$Íc32xx_u¬t_´obe_6
(
¹ems_rmios_deviû_cÚxt
 *
cÚxt
)

79 
LPC32XX_UART_CTRL
 |ð
	`BSP_BIT32
(5);

81 
LPC32XX_UARTCLK_CTRL
 |ð
	`BSP_BIT32
(3);

82 
LPC32XX_U6CLK
 = 
LPC32XX_CONFIG_U6CLK
;

83 
LPC32XX_UART_CLKMODE
 = 
	`BSP_FLD32SET
(LPC32XX_UART_CLKMODE, 0x2, 10, 11);

85  
	`ns16550_´obe
(
cÚxt
);

86 
	}
}

91 #ifdeà
LPC32XX_UART_5_BAUD


92 
ns16550_cÚxt
 
	gÍc32xx_u¬t_cÚxt_5
 = {

93 .
ba£
 = 
RTEMS_TERMIOS_DEVICE_CONTEXT_INITIALIZER
("UART 5"),

94 .
	gg_»g
 = 
Íc32xx_u¬t_g_»gi¡
,

95 .
	g£t_»g
 = 
Íc32xx_u¬t_£t_»gi¡
,

96 .
	gpÜt
 = 
LPC32XX_BASE_UART_5
,

97 .
	gq
 = 
LPC32XX_IRQ_UART_5
,

98 .
	gþock
 = 16 * 
LPC32XX_UART_5_BAUD
,

99 .
	gl_baud
 = 
LPC32XX_UART_5_BAUD


103 #ifdeà
LPC32XX_UART_3_BAUD


104 
ns16550_cÚxt
 
	gÍc32xx_u¬t_cÚxt_3
 = {

105 .
ba£
 = 
RTEMS_TERMIOS_DEVICE_CONTEXT_INITIALIZER
("UART 3"),

106 .
	gg_»g
 = 
Íc32xx_u¬t_g_»gi¡
,

107 .
	g£t_»g
 = 
Íc32xx_u¬t_£t_»gi¡
,

108 .
	gpÜt
 = 
LPC32XX_BASE_UART_3
,

109 .
	gq
 = 
LPC32XX_IRQ_UART_3
,

110 .
	gþock
 = 16 * 
LPC32XX_UART_3_BAUD
,

111 .
	gl_baud
 = 
LPC32XX_UART_3_BAUD


115 #ifdeà
LPC32XX_UART_4_BAUD


116 
ns16550_cÚxt
 
	gÍc32xx_u¬t_cÚxt_4
 = {

117 .
ba£
 = 
RTEMS_TERMIOS_DEVICE_CONTEXT_INITIALIZER
("UART 4"),

118 .
	gg_»g
 = 
Íc32xx_u¬t_g_»gi¡
,

119 .
	g£t_»g
 = 
Íc32xx_u¬t_£t_»gi¡
,

120 .
	gpÜt
 = 
LPC32XX_BASE_UART_4
,

121 .
	gq
 = 
LPC32XX_IRQ_UART_4
,

122 .
	gþock
 = 16 * 
LPC32XX_UART_4_BAUD
,

123 .
	gl_baud
 = 
LPC32XX_UART_4_BAUD


127 #ifdeà
LPC32XX_UART_6_BAUD


128 
ns16550_cÚxt
 
	gÍc32xx_u¬t_cÚxt_6
 = {

129 .
ba£
 = 
RTEMS_TERMIOS_DEVICE_CONTEXT_INITIALIZER
("UART 6"),

130 .
	gg_»g
 = 
Íc32xx_u¬t_g_»gi¡
,

131 .
	g£t_»g
 = 
Íc32xx_u¬t_£t_»gi¡
,

132 .
	gpÜt
 = 
LPC32XX_BASE_UART_6
,

133 .
	gq
 = 
LPC32XX_IRQ_UART_6
,

134 .
	gþock
 = 16 * 
LPC32XX_UART_6_BAUD
,

135 .
	gl_baud
 = 
LPC32XX_UART_6_BAUD


139 #ifdeà
LPC32XX_UART_1_BAUD


140 
Íc32xx_hsu_cÚxt
 
	gÍc32xx_u¬t_cÚxt_1
 = {

141 .
ba£
 = 
RTEMS_TERMIOS_DEVICE_CONTEXT_INITIALIZER
("UART 1"),

142 .
	ghsu
 = (vÞ©
Íc32xx_hsu
 *è
LPC32XX_BASE_UART_1
,

143 .
	gq
 = 
LPC32XX_IRQ_UART_1
,

144 .
	gl_baud
 = 
LPC32XX_UART_1_BAUD


148 #ifdeà
LPC32XX_UART_2_BAUD


149 
Íc32xx_hsu_cÚxt
 
	gÍc32xx_u¬t_cÚxt_2
 = {

150 .
ba£
 = 
RTEMS_TERMIOS_DEVICE_CONTEXT_INITIALIZER
("UART 2"),

151 .
	ghsu
 = (vÞ©
Íc32xx_hsu
 *è
LPC32XX_BASE_UART_2
,

152 .
	gq
 = 
LPC32XX_IRQ_UART_2
,

153 .
	gl_baud
 = 
LPC32XX_UART_2_BAUD


157 #ifdeà
LPC32XX_UART_7_BAUD


158 
Íc32xx_hsu_cÚxt
 
	gÍc32xx_u¬t_cÚxt_7
 = {

159 .
ba£
 = 
RTEMS_TERMIOS_DEVICE_CONTEXT_INITIALIZER
("UART 7"),

160 .
	ghsu
 = (vÞ©
Íc32xx_hsu
 *è
LPC32XX_BASE_UART_7
,

161 .
	gq
 = 
LPC32XX_IRQ_UART_7
,

162 .
	gl_baud
 = 
LPC32XX_UART_7_BAUD


166 cÚ¡ 
cÚsÞe_deviû
 
	gcÚsÞe_deviû_bË
[] = {

167 #ifdeà
LPC32XX_UART_5_BAUD


169 .
deviû_fe
 = "/dev/ttyS5",

170 .
	g´obe
 = 
cÚsÞe_deviû_´obe_deçuÉ
,

171 .
	ghªdËr
 = &
ns16550_hªdËr_¼u±
,

172 .
	gcÚxt
 = &
Íc32xx_u¬t_cÚxt_5
.
ba£


175 #ifdeà
LPC32XX_UART_3_BAUD


177 .
	gdeviû_fe
 = "/dev/ttyS3",

178 .
	g´obe
 = 
Íc32xx_u¬t_´obe_3
,

179 .
	ghªdËr
 = &
ns16550_hªdËr_¼u±
,

180 .
	gcÚxt
 = &
Íc32xx_u¬t_cÚxt_3
.
ba£


183 #ifdeà
LPC32XX_UART_4_BAUD


185 .
	gdeviû_fe
 = "/dev/ttyS4",

186 .
	g´obe
 = 
Íc32xx_u¬t_´obe_4
,

187 .
	ghªdËr
 = &
ns16550_hªdËr_¼u±
,

188 .
	gcÚxt
 = &
Íc32xx_u¬t_cÚxt_4
.
ba£


191 #ifdeà
LPC32XX_UART_6_BAUD


193 .
	gdeviû_fe
 = "/dev/ttyS6",

194 .
	g´obe
 = 
Íc32xx_u¬t_´obe_6
,

195 .
	ghªdËr
 = &
ns16550_hªdËr_¼u±
,

196 .
	gcÚxt
 = &
Íc32xx_u¬t_cÚxt_6
.
ba£


199 #ifdeà
LPC32XX_UART_1_BAUD


201 .
	gdeviû_fe
 = "/dev/ttyS1",

202 .
	g´obe
 = 
Íc32xx_hsu_´obe
,

203 .
	ghªdËr
 = &
Íc32xx_hsu_âs
,

204 .
	gcÚxt
 = &
Íc32xx_u¬t_cÚxt_1
.
ba£


207 #ifdeà
LPC32XX_UART_2_BAUD


209 .
	gdeviû_fe
 = "/dev/ttyS2",

210 .
	g´obe
 = 
Íc32xx_hsu_´obe
,

211 .
	ghªdËr
 = &
Íc32xx_hsu_âs
,

212 .
	gcÚxt
 = &
Íc32xx_u¬t_cÚxt_2
.
ba£


215 #ifdeà
LPC32XX_UART_7_BAUD


217 .
	gdeviû_fe
 = "/dev/ttyS7",

218 .
	g´obe
 = 
Íc32xx_hsu_´obe
,

219 .
	ghªdËr
 = &
Íc32xx_hsu_âs
,

220 .
	gcÚxt
 = &
Íc32xx_u¬t_cÚxt_7
.
ba£


225 cÚ¡ 
size_t
 
	gcÚsÞe_deviû_couÁ
 = 
RTEMS_ARRAY_SIZE
(
cÚsÞe_deviû_bË
);

	@src/lib/libbsp/arm/lpc32xx/console/hsu.c

23 
	~<b¥.h
>

24 
	~<b¥/Íc32xx.h
>

25 
	~<b¥/q.h
>

26 
	~<b¥/hsu.h
>

28 
	#HSU_FIFO_SIZE
 64

	)

30 
	#HSU_LEVEL_RX_MASK
 0xffU

	)

31 
	#HSU_LEVEL_TX_MASK
 0xff00U

	)

32 
	#HSU_LEVEL_TX_SHIFT
 8

	)

34 
	#HSU_RX_DATA_MASK
 0xffU

	)

35 
	#HSU_RX_EMPTY
 (1U << 8)

	)

36 
	#HSU_RX_ERROR
 (1U << 9)

	)

37 
	#HSU_RX_BREAK
 (1U << 10)

	)

39 
	#HSU_IIR_TX
 (1U << 0)

	)

40 
	#HSU_IIR_RX_TRIG
 (1U << 1)

	)

41 
	#HSU_IIR_RX_TIMEOUT
 (1U << 2)

	)

43 
	#HSU_CTRL_INTR_DISABLED
 0x1280fU

	)

44 
	#HSU_CTRL_RX_INTR_ENABLED
 0x1284fU

	)

45 
	#HSU_CTRL_RX_AND_TX_INTR_ENABLED
 0x1286fU

	)

48 
	#HSU_IIR_MASK
 0x7U

	)

50 
boÞ
 
	$Íc32xx_hsu_´obe
(
¹ems_rmios_deviû_cÚxt
 *
ba£
)

52 
Íc32xx_hsu_cÚxt
 *
ùx
 = (Íc32xx_hsu_cÚx*è
ba£
;

53 vÞ©
Íc32xx_hsu
 *
hsu
 = 
ùx
->hsu;

55 
hsu
->
ù¾
 = 
HSU_CTRL_INTR_DISABLED
;

58 
hsu
->
Ëv
 != 0) {

59 
hsu
->
fifo
;

62  
ue
;

63 
	}
}

65 
	$Íc32xx_hsu_¼u±_hªdËr
(*
¬g
)

67 
¹ems_rmios_y
 *
y
 = 
¬g
;

68 
Íc32xx_hsu_cÚxt
 *
ùx
 = 
	`¹ems_rmios_g_deviû_cÚxt
(
y
);

69 vÞ©
Íc32xx_hsu
 *
hsu
 = 
ùx
->hsu;

73 
rv
 = 0;

74 
i
 = 0;

75 
buf
 [
HSU_FIFO_SIZE
];

78 
i
 < 
HSU_FIFO_SIZE
) {

79 
ut32_t
 

 = 
hsu
->
fifo
;

81 ià((

 & 
HSU_RX_EMPTY
) == 0) {

82 ià((

 & 
HSU_RX_BREAK
) == 0) {

83 
buf
 [
i
] = 

 & 
HSU_RX_DATA_MASK
;

84 ++
i
;

90 
	`¹ems_rmios_queue_¿w_ch¬aùs
(
y
, 
buf
, 
i
);

93 
rv
 = 
	`¹ems_rmios_dequeue_ch¬aùs
(
y
, (è
ùx
->
ch¬s__ªsmissiÚ
);

94 ià(
rv
 == 0) {

97 } (
hsu
->
i
 & 
HSU_IIR_MASK
) != 0);

98 
	}
}

100 
boÞ
 
	$Íc32xx_hsu_f¡_Ý
(

101 
¹ems_rmios_y
 *
y
,

102 
¹ems_rmios_deviû_cÚxt
 *
ba£
,

103 
rmios
 *
rm
,

104 
¹ems_libio_Ý_þo£_¬gs_t
 *
¬gs


107 
Íc32xx_hsu_cÚxt
 *
ùx
 = (Íc32xx_hsu_cÚx*è
ba£
;

108 vÞ©
Íc32xx_hsu
 *
hsu
 = 
ùx
->hsu;

109 
¹ems_¡©us_code
 
sc
;

110 
boÞ
 
ok
;

112 
sc
 = 
	`¹ems_¼u±_hªdËr_¡®l
(

113 
ùx
->
q
,

115 
RTEMS_INTERRUPT_UNIQUE
,

116 
Íc32xx_hsu_¼u±_hªdËr
,

117 
y


119 
ok
 = 
sc
 =ð
RTEMS_SUCCESSFUL
;

121 ià(
ok
) {

122 
	`¹ems_rmios_£t_l_baud
(
y
, 
ùx
->
l_baud
);

123 
hsu
->
ù¾
 = 
HSU_CTRL_RX_INTR_ENABLED
;

126  
ok
;

127 
	}
}

129 
	$Íc32xx_hsu_Ï¡_þo£
(

130 
¹ems_rmios_y
 *
y
,

131 
¹ems_rmios_deviû_cÚxt
 *
ba£
,

132 
¹ems_libio_Ý_þo£_¬gs_t
 *
¬gs


135 
Íc32xx_hsu_cÚxt
 *
ùx
 = (Íc32xx_hsu_cÚx*è
ba£
;

136 vÞ©
Íc32xx_hsu
 *
hsu
 = 
ùx
->hsu;

138 
hsu
->
ù¾
 = 
HSU_CTRL_INTR_DISABLED
;

140 
	`¹ems_¼u±_hªdËr_»move
(

141 
ùx
->
q
,

142 
Íc32xx_hsu_¼u±_hªdËr
,

143 
y


145 
	}
}

147 
	$Íc32xx_hsu_wre
(

148 
¹ems_rmios_deviû_cÚxt
 *
ba£
,

149 cÚ¡ *
buf
,

150 
size_t
 
Ën


153 
Íc32xx_hsu_cÚxt
 *
ùx
 = (Íc32xx_hsu_cÚx*è
ba£
;

154 vÞ©
Íc32xx_hsu
 *
hsu
 = 
ùx
->hsu;

155 
size_t
 
tx_Ëv
 = (
hsu
->
Ëv
 & 
HSU_LEVEL_TX_MASK
è>> 
HSU_LEVEL_TX_SHIFT
;

156 
size_t
 
tx_ä
 = 
HSU_FIFO_SIZE
 - 
tx_Ëv
;

157 
size_t
 
i
 = 0;

158 
size_t
 
out
 = 
Ën
 > 
tx_ä
 ?x_free :en;

160 
i
 = 0; i < 
out
; ++i) {

161 
hsu
->
fifo
 = 
buf
 [
i
];

164 
ùx
->
ch¬s__ªsmissiÚ
 = 
out
;

166 ià(
Ën
 > 0) {

167 
hsu
->
ù¾
 = 
HSU_CTRL_RX_AND_TX_INTR_ENABLED
;

169 
hsu
->
ù¾
 = 
HSU_CTRL_RX_INTR_ENABLED
;

170 
hsu
->
i
 = 
HSU_IIR_TX
;

172 
	}
}

174 
boÞ
 
	$Íc32xx_hsu_£t_©ibus
(

175 
¹ems_rmios_deviû_cÚxt
 *
ba£
,

176 cÚ¡ 
rmios
 *
rm


179 
Íc32xx_hsu_cÚxt
 *
ùx
 = (Íc32xx_hsu_cÚx*è
ba£
;

180 vÞ©
Íc32xx_hsu
 *
hsu
 = 
ùx
->hsu;

181 
baud_æags
 = 
rm
->
c_cæag
 & 
CBAUD
;

183 ià(
baud_æags
 != 0) {

184 
t32_t
 
baud
 = 
	`¹ems_rmios_baud_to_numb
(
baud_æags
);

186 ià(
baud
 > 0) {

187 
ut32_t
 
baud_divisÜ
 = 14 * (ut32_tè
baud
;

188 
ut32_t
 
¿
 = 
LPC32XX_PERIPH_CLK
 / 
baud_divisÜ
;

189 
ut32_t
 
»mad
 = 
LPC32XX_PERIPH_CLK
 - 
¿
 * 
baud_divisÜ
;

191 ià(2 * 
»mad
 >ð
baud_divisÜ
) {

192 ++
¿
;

195 
hsu
->
¿
 =ate - 1;

199  
ue
;

200 
	}
}

202 cÚ¡ 
¹ems_rmios_deviû_hªdËr
 
	gÍc32xx_hsu_âs
 = {

203 .
f¡_Ý
 = 
Íc32xx_hsu_f¡_Ý
,

204 .
	gÏ¡_þo£
 = 
Íc32xx_hsu_Ï¡_þo£
,

205 .
	gwre
 = 
Íc32xx_hsu_wre
,

206 .
	g£t_©ibus
 = 
Íc32xx_hsu_£t_©ibus
,

207 .
	gmode
 = 
TERMIOS_IRQ_DRIVEN


	@src/lib/libbsp/arm/lpc32xx/include/boot.h

22 #iâdeà
LIBBSP_ARM_LPC32XX_BOOT_H


23 
	#LIBBSP_ARM_LPC32XX_BOOT_H


	)

25 
	~<¡dt.h
>

27 
	~<b¥/Çnd-mlc.h
>

29 #ifdeà
__ýlu¥lus


58 
	#LPC32XX_BOOT_BLOCK_0
 0

	)

59 
	#LPC32XX_BOOT_BLOCK_1
 1

	)

61 
	#LPC32XX_BOOT_ICR_SP_3AC_8IF
 0xf0

	)

62 
	#LPC32XX_BOOT_ICR_SP_4AC_8IF
 0xd2

	)

63 
	#LPC32XX_BOOT_ICR_LP_4AC_8IF
 0xb4

	)

64 
	#LPC32XX_BOOT_ICR_LP_5AC_8IF
 0x96

	)

68 
ut8_t
 
d0
;

69 
ut8_t
 
»£rved_0
 [3];

70 
ut8_t
 
d1
;

71 
ut8_t
 
»£rved_1
 [3];

72 
ut8_t
 
d2
;

73 
ut8_t
 
»£rved_2
 [3];

74 
ut8_t
 
d3
;

75 
ut8_t
 
»£rved_3
 [3];

76 
ut8_t
 
d4
;

77 
ut8_t
 
»£rved_4
 [3];

78 
ut8_t
 
d5
;

79 
ut8_t
 
»£rved_5
 [3];

80 
ut8_t
 
d6
;

81 
ut8_t
 
»£rved_6
 [3];

82 
ut8_t
 
d7
;

83 
ut8_t
 
»£rved_7
 [3];

84 
ut8_t
 
d8
;

85 
ut8_t
 
»£rved_8
 [3];

86 
ut8_t
 
d9
;

87 
ut8_t
 
»£rved_9
 [3];

88 
ut8_t
 
d10
;

89 
ut8_t
 
»£rved_10
 [3];

90 
ut8_t
 
d11
;

91 
ut8_t
 
»£rved_11
 [3];

92 
ut8_t
 
d12
;

93 
ut8_t
 
»£rved_12
 [463];

94 } 
fld
;

95 
ut32_t
 
d©a
 [
MLC_SMALL_DATA_WORD_COUNT
];

96 } 
	tÍc32xx_boÙ_block
;

98 
Íc32xx_£tup_boÙ_block
(

99 
Íc32xx_boÙ_block
 *
boÙ_block
,

100 
ut8_t
 
iü
,

101 
ut8_t
 
·ge_couÁ


104 
Íc32xx_£t_boÙ_block_bad
(

105 
Íc32xx_boÙ_block
 *
boÙ_block


110 #ifdeà
__ýlu¥lus


	@src/lib/libbsp/arm/lpc32xx/include/bsp.h

23 #iâdeà
LIBBSP_ARM_LPC32XX_BSP_H


24 
	#LIBBSP_ARM_LPC32XX_BSP_H


	)

26 
	~<b¥Ýts.h
>

28 
	#BSP_FEATURE_IRQ_EXTENSION


	)

30 #iâdeà
ASM


32 
	~<¹ems.h
>

33 
	~<¹ems/cÚsÞe.h
>

34 
	~<¹ems/þockdrv.h
>

36 
	~<b¥/Íc32xx.h
>

37 
	~<b¥/deçuÉ-l-exnsiÚ.h
>

39 #ifdeà
__ýlu¥lus


43 
¹ems_bsdÃt_ifcÚfig
;

58 
Íc_h_©ch_dach
(

59 
¹ems_bsdÃt_ifcÚfig
 *
cÚfig
,

60 
©chg


66 
	#RTEMS_BSP_NETWORK_DRIVER_ATTACH
 
Íc_h_©ch_dach


	)

71 
	#RTEMS_BSP_NETWORK_DRIVER_NAME
 "h0"

	)

93 *
Íc32xx_idË
(
u_t
 
ignÜed
);

95 
	#LPC32XX_STANDARD_TIMER
 (&
Íc32xx
.
tim_1
)

	)

97 
le
 
Íc32xx_tim
()

99 vÞ©
Íc_tim
 *
tim
 = 
LPC32XX_STANDARD_TIMER
;

101  
tim
->
tc
;

104 
le
 
Íc32xx_miüo_£cÚds_day
(
us
)

106 
¡¬t
 = 
Íc32xx_tim
();

107 
day
 = 
us
 * (
LPC32XX_PERIPH_CLK
 / 1000000);

108 
­£d
 = 0;

111 
­£d
 = 
Íc32xx_tim
(è- 
¡¬t
;

112 } 
­£d
 < 
day
);

115 #ià
LPC32XX_OSCILLATOR_MAIN
 == 13000000U

116 
	#LPC32XX_HCLKPLL_CTRL_INIT_VALUE
 \

117 (
HCLK_PLL_POWER
 | 
HCLK_PLL_DIRECT
 | 
	`HCLK_PLL_M
(16 - 1))

	)

118 
	#LPC32XX_HCLKDIV_CTRL_INIT_VALUE
 \

119 (
	`HCLK_DIV_HCLK
(2 - 1è| 
	`HCLK_DIV_PERIPH_CLK
(16 - 1è| 
	`HCLK_DIV_DDRAM_CLK
(0))

	)

124 
boÞ
 
Íc32xx_¡¬t_¶l_£tup
(

125 
ut32_t
 
hþk¶l_ù¾
,

126 
ut32_t
 
hþkdiv_ù¾
,

127 
boÞ
 
fÜû


130 
ut32_t
 
Íc32xx_sysþk
();

132 
ut32_t
 
Íc32xx_hþk¶l_þk
();

134 
ut32_t
 
Íc32xx_³rh_þk
();

136 
ut32_t
 
Íc32xx_hþk
();

138 
ut32_t
 
Íc32xx_¬m_þk
();

140 
ut32_t
 
Íc32xx_dd¿m_þk
();

143 
LPC32XX_NAND_CONTROLLER_NONE
,

144 
LPC32XX_NAND_CONTROLLER_MLC
,

145 
LPC32XX_NAND_CONTROLLER_SLC


146 } 
	tÍc32xx_Çnd_cÚÞËr
;

148 
Íc32xx_£Ëù_Çnd_cÚÞËr
(
Íc32xx_Çnd_cÚÞËr
 
Çnd_cÚÞËr
);

150 
b¥_»¡¬t
(*
addr
);

152 *
b¥_idË_th»ad
(
u_t
 
¬g
);

154 
	#BSP_IDLE_TASK_BODY
 
b¥_idË_th»ad


	)

156 
	#BSP_CONSOLE_UART_BASE
 
LPC32XX_BASE_UART_5


	)

163 
ut32_t
 
Íc32xx_magic_zo_beg
 [];

170 
ut32_t
 
Íc32xx_magic_zo_d
 [];

177 
ut32_t
 
Íc32xx_magic_zo_size
 [];

179 #ifdeà
LPC32XX_SCRATCH_AREA_SIZE


185 
ut8_t
 
Íc32xx_sü©ch_¬
 [
LPC32XX_SCRATCH_AREA_SIZE
]

186 
__©ibu__
((
®igÃd
(32)));

189 
	#LPC32XX_DO_STOP_GPDMA
 \

191 ià((
LPC32XX_DMACLK_CTRL
 & 0x1) != 0) { \

192 ià((
Íc32xx
.
dma
.
cfg
 & 
DMA_CFG_E
) != 0) { \

193 
i
 = 0; \

194 
i
 = 0; i < 8; ++i) { \

195 
Íc32xx
.
dma
.
chªÃls
 [
i
].
cfg
 = 0; \

197 
Íc32xx
.
dma
.
cfg
 &ð~
DMA_CFG_E
; \

199 
LPC32XX_DMACLK_CTRL
 = 0; \

201 } 0)

	)

203 
	#LPC32XX_DO_STOP_ETHERNET
 \

205 ià((
LPC32XX_MAC_CLK_CTRL
 & 0x7) == 0x7) { \

206 
Íc32xx
.
h
.
commªd
 = 0x38; \

207 
Íc32xx
.
h
.
mac1
 = 0xcf00; \

208 
Íc32xx
.
h
.
mac1
 = 0; \

209 
LPC32XX_MAC_CLK_CTRL
 = 0; \

211 } 0)

	)

213 
	#LPC32XX_DO_STOP_USB
 \

215 ià((
LPC32XX_USB_CTRL
 & 0x010e8000) != 0) { \

216 
LPC32XX_OTG_CLK_CTRL
 = 0; \

217 
LPC32XX_USB_CTRL
 = 0x80000; \

219 } 0)

	)

221 
	#LPC32XX_DO_RESTART
(
addr
) \

223 
ARM_SWITCH_REGISTERS
; \

224 
¹ems_¼u±_Ëv
 
Ëv
; \

225 
ut32_t
 
ù¾
 = 0; \

227 
	`¹ems_¼u±_di§bË
(
Ëv
); \

229 
	`¬m_ý15_d©a_ÿche_¡_ªd_þn
(); \

230 
	`¬m_ý15_¡ruùiÚ_ÿche_v®id©e
(); \

232 
ù¾
 = 
	`¬m_ý15_g_cÚÞ
(); \

233 
ù¾
 &ð~(
ARM_CP15_CTRL_I
 | 
ARM_CP15_CTRL_C
 | 
ARM_CP15_CTRL_M
); \

234 
	`¬m_ý15_£t_cÚÞ
(
ù¾
); \

236 
__asm__
 volatile ( \

237 
ARM_SWITCH_TO_ARM
 \

239 
ARM_SWITCH_BACK
 \

240 : 
ARM_SWITCH_OUTPUT
 \

241 : [
addr
] "r" (addr) \

243 } 0)

	)

255 #ifdeà
__ýlu¥lus


	@src/lib/libbsp/arm/lpc32xx/include/emc.h

23 #iâdeà
LIBBSP_ARM_LPC32XX_EMC_H


24 
	#LIBBSP_ARM_LPC32XX_EMC_H


	)

26 
	~<¹ems.h
>

28 
	~<b¥/Íc-emc.h
>

30 #ifdeà
__ýlu¥lus


48 
	#SDRAMCLK_CLOCKS_DIS
 
	`BSP_BIT32
(0)

	)

49 
	#SDRAMCLK_DDR_MODE
 
	`BSP_BIT32
(1)

	)

50 
	#SDRAMCLK_DDR_DQSIN_DELAY
(
v®
è
	`BSP_FLD32
(v®, 2, 6)

	)

51 
	#SDRAMCLK_RTC_TICK_EN
 
	`BSP_BIT32
(7)

	)

52 
	#SDRAMCLK_SW_DDR_CAL
 
	`BSP_BIT32
(8)

	)

53 
	#SDRAMCLK_CAL_DELAY
 
	`BSP_BIT32
(9)

	)

54 
	#SDRAMCLK_SENSITIVITY_FACTOR
(
v®
è
	`BSP_FLD32
(v®, 10, 12)

	)

55 
	#SDRAMCLK_DCA_STATUS
 
	`BSP_BIT32
(13)

	)

56 
	#SDRAMCLK_COMMAND_DELAY
(
v®
è
	`BSP_FLD32
(v®, 14, 18)

	)

57 
	#SDRAMCLK_SW_DDR_RESET
 
	`BSP_BIT32
(19)

	)

58 
	#SDRAMCLK_PIN_1_FAST
 
	`BSP_BIT32
(20)

	)

59 
	#SDRAMCLK_PIN_2_FAST
 
	`BSP_BIT32
(21)

	)

60 
	#SDRAMCLK_PIN_3_FAST
 
	`BSP_BIT32
(22)

	)

70 
	#EMC_AHB_PORT_BUFF_EN
 
	`BSP_BIT32
(0)

	)

80 
	#EMC_AHB_TIMEOUT
(
v®
è
	`BSP_FLD32
(v®, 0, 9)

	)

90 
	#SDRAM_ADDR_ROW_16MB
(
v®
è((
ut32_t
è(v®è<< 10)

	)

91 
	#SDRAM_ADDR_ROW_32MB
(
v®
è((
ut32_t
è(v®è<< 11)

	)

92 
	#SDRAM_ADDR_ROW_64MB
(
v®
è((
ut32_t
è(v®è<< 11)

	)

94 
	#SDRAM_ADDR_BANK_16MB
(
ba1
, 
ba0
) \

95 (((
ut32_t
è(
ba1
è<< 23è| ((ut32_tè(
ba0
è<< 22))

	)

96 
	#SDRAM_ADDR_BANK_32MB
(
ba1
, 
ba0
) \

97 (((
ut32_t
è(
ba1
è<< 23è| ((ut32_tè(
ba0
è<< 24))

	)

98 
	#SDRAM_ADDR_BANK_64MB
(
ba1
, 
ba0
) \

99 (((
ut32_t
è(
ba1
è<< 25è| ((ut32_tè(
ba0
è<< 24))

	)

101 
	#SDRAM_MODE_16MB
(
mode
) \

102 (
	`SDRAM_ADDR_BANK_16MB
(0, 0è| 
	`SDRAM_ADDR_ROW_16MB
(
mode
))

	)

103 
	#SDRAM_MODE_32MB
(
mode
) \

104 (
	`SDRAM_ADDR_BANK_32MB
(0, 0è| 
	`SDRAM_ADDR_ROW_32MB
(
mode
))

	)

105 
	#SDRAM_MODE_64MB
(
mode
) \

106 (
	`SDRAM_ADDR_BANK_64MB
(0, 0è| 
	`SDRAM_ADDR_ROW_64MB
(
mode
))

	)

108 
	#SDRAM_EXTMODE_16MB
(
mode
) \

109 (
	`SDRAM_ADDR_BANK_16MB
(1, 0è| 
	`SDRAM_ADDR_ROW_16MB
(
mode
))

	)

110 
	#SDRAM_EXTMODE_32MB
(
mode
) \

111 (
	`SDRAM_ADDR_BANK_32MB
(1, 0è| 
	`SDRAM_ADDR_ROW_32MB
(
mode
))

	)

112 
	#SDRAM_EXTMODE_64MB
(
mode
) \

113 (
	`SDRAM_ADDR_BANK_64MB
(1, 0è| 
	`SDRAM_ADDR_ROW_64MB
(
mode
))

	)

115 
	#SDRAM_MODE_BURST_LENGTH
(
v®
è
	`BSP_FLD32
(v®, 0, 2)

	)

116 
	#SDRAM_MODE_BURST_INTERLEAVE
 
	`BSP_BIT32
(3)

	)

117 
	#SDRAM_MODE_CAS
(
v®
è
	`BSP_FLD32
(v®, 4, 6)

	)

118 
	#SDRAM_MODE_TEST_MODE
(
v®
è
	`BSP_FLD32
(v®, 7, 8)

	)

119 
	#SDRAM_MODE_WRITE_BURST_SINGLE_BIT
 
	`BSP_BIT32
(9)

	)

121 
	#SDRAM_EXTMODE_PASR
(
v®
è
	`BSP_FLD32
(v®, 0, 2)

	)

122 
	#SDRAM_EXTMODE_DRIVER_STRENGTH
(
v®
è
	`BSP_FLD32
(v®, 5, 6)

	)

127 
ut32_t
 
size
;

128 
ut32_t
 
cÚfig
;

129 
ut32_t
 
¿sÿs
;

130 
ut32_t
 
mode
;

131 
ut32_t
 
extmode
;

132 } 
	tÍc32xx_emc_dyÇmic_ch_cÚfig
;

135 
ut32_t
 
sd¿mþk_ù¾
;

136 
ut32_t
 
nÝ_time__us
;

137 
ut32_t
 
cÚÞ
;

138 
ut32_t
 
»äesh
;

139 
ut32_t
 
»adcÚfig
;

140 
ut32_t
 
p
;

141 
ut32_t
 
as
;

142 
ut32_t
 
t¤ex
;

143 
ut32_t
 
twr
;

144 
ut32_t
 
c
;

145 
ut32_t
 
fc
;

146 
ut32_t
 
tx¤
;

147 
ut32_t
 
rd
;

148 
ut32_t
 
tmrd
;

149 
ut32_t
 
tcdÌ
;

150 
Íc32xx_emc_dyÇmic_ch_cÚfig
 
ch
 [
EMC_DYN_CHIP_COUNT
];

151 } 
	tÍc32xx_emc_dyÇmic_cÚfig
;

153 
Íc32xx_emc_
(cÚ¡ 
Íc32xx_emc_dyÇmic_cÚfig
 *
dyn_cfg
);

157 #ifdeà
__ýlu¥lus


	@src/lib/libbsp/arm/lpc32xx/include/hsu.h

23 #iâdeà
LIBBSP_ARM_LPC32XX_HSU_H


24 
	#LIBBSP_ARM_LPC32XX_HSU_H


	)

26 
	~<¹ems/rmio¡y³s.h
>

28 #ifdeà
__ýlu¥lus


43 
ut32_t
 
fifo
;

44 
ut32_t
 
Ëv
;

45 
ut32_t
 
i
;

46 
ut32_t
 
ù¾
;

47 
ut32_t
 
¿
;

48 } 
	tÍc32xx_hsu
;

51 
¹ems_rmios_deviû_cÚxt
 
ba£
;

52 vÞ©
Íc32xx_hsu
 *
hsu
;

53 
size_t
 
ch¬s__ªsmissiÚ
;

54 
¹ems_veùÜ_numb
 
q
;

55 
ut32_t
 
l_baud
;

56 } 
	tÍc32xx_hsu_cÚxt
;

58 cÚ¡ 
¹ems_rmios_deviû_hªdËr
 
Íc32xx_hsu_âs
;

60 
boÞ
 
Íc32xx_hsu_´obe
(
¹ems_rmios_deviû_cÚxt
 *
ba£
);

64 #ifdeà
__ýlu¥lus


	@src/lib/libbsp/arm/lpc32xx/include/i2c.h

22 #iâdeà
LIBBSP_ARM_LPC32XX_I2C_H


23 
	#LIBBSP_ARM_LPC32XX_I2C_H


	)

25 
	~<¹ems.h
>

27 
	~<b¥/Íc32xx.h
>

29 #ifdeà
__ýlu¥lus


52 
	#I2CCLK_1_EN
 
	`BSP_BIT32
(0)

	)

53 
	#I2CCLK_2_EN
 
	`BSP_BIT32
(1)

	)

54 
	#I2CCLK_1_HIGH_DRIVE
 
	`BSP_BIT32
(2)

	)

55 
	#I2CCLK_2_HIGH_DRIVE
 
	`BSP_BIT32
(3)

	)

56 
	#I2CCLK_USB_HIGH_DRIVE
 
	`BSP_BIT32
(4)

	)

66 
	#I2C_TX_READ
 
	`BSP_BIT32
(0)

	)

67 
	#I2C_TX_ADDR
(
v®
è
	`BSP_FLD32
(v®, 1, 7)

	)

68 
	#I2C_TX_START
 
	`BSP_BIT32
(8)

	)

69 
	#I2C_TX_STOP
 
	`BSP_BIT32
(9)

	)

79 
	#I2C_STAT_TDI
 
	`BSP_BIT32
(0)

	)

80 
	#I2C_STAT_AFI
 
	`BSP_BIT32
(1)

	)

81 
	#I2C_STAT_NAI
 
	`BSP_BIT32
(2)

	)

82 
	#I2C_STAT_DRMI
 
	`BSP_BIT32
(3)

	)

83 
	#I2C_STAT_DRSI
 
	`BSP_BIT32
(4)

	)

84 
	#I2C_STAT_ACTIVE
 
	`BSP_BIT32
(5)

	)

85 
	#I2C_STAT_SCL
 
	`BSP_BIT32
(6)

	)

86 
	#I2C_STAT_SDA
 
	`BSP_BIT32
(7)

	)

87 
	#I2C_STAT_RFF
 
	`BSP_BIT32
(8)

	)

88 
	#I2C_STAT_RFE
 
	`BSP_BIT32
(9)

	)

89 
	#I2C_STAT_TFF
 
	`BSP_BIT32
(10)

	)

90 
	#I2C_STAT_TFE
 
	`BSP_BIT32
(11)

	)

91 
	#I2C_STAT_TFFS
 
	`BSP_BIT32
(12)

	)

92 
	#I2C_STAT_TFES
 
	`BSP_BIT32
(13)

	)

102 
	#I2C_CTRL_TDIE
 
	`BSP_BIT32
(0)

	)

103 
	#I2C_CTRL_AFIE
 
	`BSP_BIT32
(1)

	)

104 
	#I2C_CTRL_NAIE
 
	`BSP_BIT32
(2)

	)

105 
	#I2C_CTRL_DRMIE
 
	`BSP_BIT32
(3)

	)

106 
	#I2C_CTRL_DRSIE
 
	`BSP_BIT32
(4)

	)

107 
	#I2C_CTRL_RFFIE
 
	`BSP_BIT32
(5)

	)

108 
	#I2C_CTRL_RFDAIE
 
	`BSP_BIT32
(6)

	)

109 
	#I2C_CTRL_TFFIO
 
	`BSP_BIT32
(7)

	)

110 
	#I2C_CTRL_RESET
 
	`BSP_BIT32
(8)

	)

111 
	#I2C_CTRL_SEVEN
 
	`BSP_BIT32
(9)

	)

112 
	#I2C_CTRL_TFFSIE
 
	`BSP_BIT32
(10)

	)

125 
¹ems_¡©us_code
 
Íc32xx_i2c_
(

126 vÞ©
Íc32xx_i2c
 *
i2c
,

127 
þock__hz


133 
Íc32xx_i2c_»£t
(vÞ©
Íc32xx_i2c
 *
i2c
);

143 
¹ems_¡©us_code
 
Íc32xx_i2c_þock
(

144 vÞ©
Íc32xx_i2c
 *
i2c
,

145 
þock__hz


159 
¹ems_¡©us_code
 
Íc32xx_i2c_wre_¡¬t
(

160 vÞ©
Íc32xx_i2c
 *
i2c
,

161 
addr


173 
¹ems_¡©us_code
 
Íc32xx_i2c_wre_wh_ÝtiÚ®_¡Ý
(

174 vÞ©
Íc32xx_i2c
 *
i2c
,

175 cÚ¡ 
ut8_t
 *
out
,

176 
size_t
 
n
,

177 
boÞ
 
¡Ý


191 
¹ems_¡©us_code
 
Íc32xx_i2c_»ad_¡¬t
(

192 vÞ©
Íc32xx_i2c
 *
i2c
,

193 
addr


203 
¹ems_¡©us_code
 
Íc32xx_i2c_»ad_wh_ÝtiÚ®_¡Ý
(

204 vÞ©
Íc32xx_i2c
 *
i2c
,

205 
ut8_t
 *

,

206 
size_t
 
n
,

207 
boÞ
 
¡Ý


218 
¹ems_¡©us_code
 
Íc32xx_i2c_wre_ªd_»ad
(

219 vÞ©
Íc32xx_i2c
 *
i2c
,

220 
addr
,

221 cÚ¡ 
ut8_t
 *
out
,

222 
size_t
 
out_size
,

223 
ut8_t
 *

,

224 
size_t
 
_size


235 
le
 
¹ems_¡©us_code
 
Íc32xx_i2c_wre
(

236 vÞ©
Íc32xx_i2c
 *
i2c
,

237 
addr
,

238 cÚ¡ 
ut8_t
 *
out
,

239 
size_t
 
out_size


242  
Íc32xx_i2c_wre_ªd_»ad
(
i2c
, 
addr
, 
out
, 
out_size
, 
NULL
, 0);

253 
le
 
¹ems_¡©us_code
 
Íc32xx_i2c_»ad
(

254 vÞ©
Íc32xx_i2c
 *
i2c
,

255 
addr
,

256 
ut8_t
 *

,

257 
size_t
 
_size


260  
Íc32xx_i2c_wre_ªd_»ad
(
i2c
, 
addr
, 
NULL
, 0, 

, 
_size
);

265 #ifdeà
__ýlu¥lus


	@src/lib/libbsp/arm/lpc32xx/include/irq.h

22 #iâdeà
LIBBSP_ARM_LPC32XX_IRQ_H


23 
	#LIBBSP_ARM_LPC32XX_IRQ_H


	)

25 #iâdeà
ASM


27 
	~<¹ems.h
>

28 
	~<¹ems/q.h
>

29 
	~<¹ems/q-exnsiÚ.h
>

31 #ifdeà
__ýlu¥lus


45 
	#LPC32XX_IRQ_INDEX
(
moduË
, 
subdex
è((moduËè+ (subdex))

	)

47 
	#LPC32XX_IRQ_MODULE_MIC
 0U

	)

48 
	#LPC32XX_IRQ_MODULE_SIC_1
 32U

	)

49 
	#LPC32XX_IRQ_MODULE_SIC_2
 64U

	)

50 
	#LPC32XX_IRQ_MODULE_COUNT
 3U

	)

53 
	#LPC32XX_IRQ_SIC_1_IRQ
 
	`LPC32XX_IRQ_INDEX
(
LPC32XX_IRQ_MODULE_MIC
, 0)

	)

54 
	#LPC32XX_IRQ_SIC_2_IRQ
 
	`LPC32XX_IRQ_INDEX
(
LPC32XX_IRQ_MODULE_MIC
, 1)

	)

55 
	#LPC32XX_IRQ_TIMER_4_OR_MCPWM
 
	`LPC32XX_IRQ_INDEX
(
LPC32XX_IRQ_MODULE_MIC
, 3)

	)

56 
	#LPC32XX_IRQ_TIMER_5
 
	`LPC32XX_IRQ_INDEX
(
LPC32XX_IRQ_MODULE_MIC
, 4)

	)

57 
	#LPC32XX_IRQ_TIMER_HS
 
	`LPC32XX_IRQ_INDEX
(
LPC32XX_IRQ_MODULE_MIC
, 5)

	)

58 
	#LPC32XX_IRQ_WDG
 
	`LPC32XX_IRQ_INDEX
(
LPC32XX_IRQ_MODULE_MIC
, 6)

	)

59 
	#LPC32XX_IRQ_UART_3
 
	`LPC32XX_IRQ_INDEX
(
LPC32XX_IRQ_MODULE_MIC
, 7)

	)

60 
	#LPC32XX_IRQ_UART_4
 
	`LPC32XX_IRQ_INDEX
(
LPC32XX_IRQ_MODULE_MIC
, 8)

	)

61 
	#LPC32XX_IRQ_UART_5
 
	`LPC32XX_IRQ_INDEX
(
LPC32XX_IRQ_MODULE_MIC
, 9)

	)

62 
	#LPC32XX_IRQ_UART_6
 
	`LPC32XX_IRQ_INDEX
(
LPC32XX_IRQ_MODULE_MIC
, 10)

	)

63 
	#LPC32XX_IRQ_NAND_FLASH
 
	`LPC32XX_IRQ_INDEX
(
LPC32XX_IRQ_MODULE_MIC
, 11)

	)

64 
	#LPC32XX_IRQ_SDCARD_1
 
	`LPC32XX_IRQ_INDEX
(
LPC32XX_IRQ_MODULE_MIC
, 13)

	)

65 
	#LPC32XX_IRQ_LCD
 
	`LPC32XX_IRQ_INDEX
(
LPC32XX_IRQ_MODULE_MIC
, 14)

	)

66 
	#LPC32XX_IRQ_SDCARD_2
 
	`LPC32XX_IRQ_INDEX
(
LPC32XX_IRQ_MODULE_MIC
, 15)

	)

67 
	#LPC32XX_IRQ_TIMER_0
 
	`LPC32XX_IRQ_INDEX
(
LPC32XX_IRQ_MODULE_MIC
, 16)

	)

68 
	#LPC32XX_IRQ_TIMER_1
 
	`LPC32XX_IRQ_INDEX
(
LPC32XX_IRQ_MODULE_MIC
, 17)

	)

69 
	#LPC32XX_IRQ_TIMER_2
 
	`LPC32XX_IRQ_INDEX
(
LPC32XX_IRQ_MODULE_MIC
, 18)

	)

70 
	#LPC32XX_IRQ_TIMER_3
 
	`LPC32XX_IRQ_INDEX
(
LPC32XX_IRQ_MODULE_MIC
, 19)

	)

71 
	#LPC32XX_IRQ_SSP_0
 
	`LPC32XX_IRQ_INDEX
(
LPC32XX_IRQ_MODULE_MIC
, 20)

	)

72 
	#LPC32XX_IRQ_SSP_1
 
	`LPC32XX_IRQ_INDEX
(
LPC32XX_IRQ_MODULE_MIC
, 21)

	)

73 
	#LPC32XX_IRQ_I2S_0
 
	`LPC32XX_IRQ_INDEX
(
LPC32XX_IRQ_MODULE_MIC
, 22)

	)

74 
	#LPC32XX_IRQ_I2S_1
 
	`LPC32XX_IRQ_INDEX
(
LPC32XX_IRQ_MODULE_MIC
, 23)

	)

75 
	#LPC32XX_IRQ_UART_7
 
	`LPC32XX_IRQ_INDEX
(
LPC32XX_IRQ_MODULE_MIC
, 24)

	)

76 
	#LPC32XX_IRQ_UART_2
 
	`LPC32XX_IRQ_INDEX
(
LPC32XX_IRQ_MODULE_MIC
, 25)

	)

77 
	#LPC32XX_IRQ_UART_1
 
	`LPC32XX_IRQ_INDEX
(
LPC32XX_IRQ_MODULE_MIC
, 26)

	)

78 
	#LPC32XX_IRQ_TIMER_MS
 
	`LPC32XX_IRQ_INDEX
(
LPC32XX_IRQ_MODULE_MIC
, 27)

	)

79 
	#LPC32XX_IRQ_DMA
 
	`LPC32XX_IRQ_INDEX
(
LPC32XX_IRQ_MODULE_MIC
, 28)

	)

80 
	#LPC32XX_IRQ_ETHERNET
 
	`LPC32XX_IRQ_INDEX
(
LPC32XX_IRQ_MODULE_MIC
, 29)

	)

81 
	#LPC32XX_IRQ_SIC_1_FIQ
 
	`LPC32XX_IRQ_INDEX
(
LPC32XX_IRQ_MODULE_MIC
, 30)

	)

82 
	#LPC32XX_IRQ_SIC_2_FIQ
 
	`LPC32XX_IRQ_INDEX
(
LPC32XX_IRQ_MODULE_MIC
, 31)

	)

85 
	#LPC32XX_IRQ_JTAG_COMM_TX
 
	`LPC32XX_IRQ_INDEX
(
LPC32XX_IRQ_MODULE_SIC_1
, 1)

	)

86 
	#LPC32XX_IRQ_JTAG_COMM_RX
 
	`LPC32XX_IRQ_INDEX
(
LPC32XX_IRQ_MODULE_SIC_1
, 2)

	)

87 
	#LPC32XX_IRQ_GPI_28
 
	`LPC32XX_IRQ_INDEX
(
LPC32XX_IRQ_MODULE_SIC_1
, 4)

	)

88 
	#LPC32XX_IRQ_TS_P
 
	`LPC32XX_IRQ_INDEX
(
LPC32XX_IRQ_MODULE_SIC_1
, 6)

	)

89 
	#LPC32XX_IRQ_TS_IRQ_OR_ADC
 
	`LPC32XX_IRQ_INDEX
(
LPC32XX_IRQ_MODULE_SIC_1
, 7)

	)

90 
	#LPC32XX_IRQ_TS_AUX
 
	`LPC32XX_IRQ_INDEX
(
LPC32XX_IRQ_MODULE_SIC_1
, 8)

	)

91 
	#LPC32XX_IRQ_SPI_2
 
	`LPC32XX_IRQ_INDEX
(
LPC32XX_IRQ_MODULE_SIC_1
, 12)

	)

92 
	#LPC32XX_IRQ_PLL_USB
 
	`LPC32XX_IRQ_INDEX
(
LPC32XX_IRQ_MODULE_SIC_1
, 13)

	)

93 
	#LPC32XX_IRQ_PLL_HCLK
 
	`LPC32XX_IRQ_INDEX
(
LPC32XX_IRQ_MODULE_SIC_1
, 14)

	)

94 
	#LPC32XX_IRQ_PLL_397
 
	`LPC32XX_IRQ_INDEX
(
LPC32XX_IRQ_MODULE_SIC_1
, 17)

	)

95 
	#LPC32XX_IRQ_I2C_2
 
	`LPC32XX_IRQ_INDEX
(
LPC32XX_IRQ_MODULE_SIC_1
, 18)

	)

96 
	#LPC32XX_IRQ_I2C_1
 
	`LPC32XX_IRQ_INDEX
(
LPC32XX_IRQ_MODULE_SIC_1
, 19)

	)

97 
	#LPC32XX_IRQ_RTC
 
	`LPC32XX_IRQ_INDEX
(
LPC32XX_IRQ_MODULE_SIC_1
, 20)

	)

98 
	#LPC32XX_IRQ_KEYSCAN
 
	`LPC32XX_IRQ_INDEX
(
LPC32XX_IRQ_MODULE_SIC_1
, 22)

	)

99 
	#LPC32XX_IRQ_SPI_1
 
	`LPC32XX_IRQ_INDEX
(
LPC32XX_IRQ_MODULE_SIC_1
, 23)

	)

100 
	#LPC32XX_IRQ_SW
 
	`LPC32XX_IRQ_INDEX
(
LPC32XX_IRQ_MODULE_SIC_1
, 24)

	)

101 
	#LPC32XX_IRQ_USB_OTG_TIMER
 
	`LPC32XX_IRQ_INDEX
(
LPC32XX_IRQ_MODULE_SIC_1
, 25)

	)

102 
	#LPC32XX_IRQ_USB_OTG_ATX
 
	`LPC32XX_IRQ_INDEX
(
LPC32XX_IRQ_MODULE_SIC_1
, 26)

	)

103 
	#LPC32XX_IRQ_USB_HOST
 
	`LPC32XX_IRQ_INDEX
(
LPC32XX_IRQ_MODULE_SIC_1
, 27)

	)

104 
	#LPC32XX_IRQ_USB_DEV_DMA
 
	`LPC32XX_IRQ_INDEX
(
LPC32XX_IRQ_MODULE_SIC_1
, 28)

	)

105 
	#LPC32XX_IRQ_USB_DEV_LP
 
	`LPC32XX_IRQ_INDEX
(
LPC32XX_IRQ_MODULE_SIC_1
, 29)

	)

106 
	#LPC32XX_IRQ_USB_DEV_HP
 
	`LPC32XX_IRQ_INDEX
(
LPC32XX_IRQ_MODULE_SIC_1
, 30)

	)

107 
	#LPC32XX_IRQ_USB_I2C
 
	`LPC32XX_IRQ_INDEX
(
LPC32XX_IRQ_MODULE_SIC_1
, 31)

	)

110 
	#LPC32XX_IRQ_GPIO_0
 
	`LPC32XX_IRQ_INDEX
(
LPC32XX_IRQ_MODULE_SIC_2
, 0)

	)

111 
	#LPC32XX_IRQ_GPIO_1
 
	`LPC32XX_IRQ_INDEX
(
LPC32XX_IRQ_MODULE_SIC_2
, 1)

	)

112 
	#LPC32XX_IRQ_GPIO_2
 
	`LPC32XX_IRQ_INDEX
(
LPC32XX_IRQ_MODULE_SIC_2
, 2)

	)

113 
	#LPC32XX_IRQ_GPIO_3
 
	`LPC32XX_IRQ_INDEX
(
LPC32XX_IRQ_MODULE_SIC_2
, 3)

	)

114 
	#LPC32XX_IRQ_GPIO_4
 
	`LPC32XX_IRQ_INDEX
(
LPC32XX_IRQ_MODULE_SIC_2
, 4)

	)

115 
	#LPC32XX_IRQ_GPIO_5
 
	`LPC32XX_IRQ_INDEX
(
LPC32XX_IRQ_MODULE_SIC_2
, 5)

	)

116 
	#LPC32XX_IRQ_SPI_2_DATAIN
 
	`LPC32XX_IRQ_INDEX
(
LPC32XX_IRQ_MODULE_SIC_2
, 6)

	)

117 
	#LPC32XX_IRQ_UART_2_HCTS
 
	`LPC32XX_IRQ_INDEX
(
LPC32XX_IRQ_MODULE_SIC_2
, 7)

	)

118 
	#LPC32XX_IRQ_GPIO_P0_P1_IRQ
 
	`LPC32XX_IRQ_INDEX
(
LPC32XX_IRQ_MODULE_SIC_2
, 8)

	)

119 
	#LPC32XX_IRQ_GPI_8
 
	`LPC32XX_IRQ_INDEX
(
LPC32XX_IRQ_MODULE_SIC_2
, 9)

	)

120 
	#LPC32XX_IRQ_GPI_9
 
	`LPC32XX_IRQ_INDEX
(
LPC32XX_IRQ_MODULE_SIC_2
, 10)

	)

121 
	#LPC32XX_IRQ_GPI_19
 
	`LPC32XX_IRQ_INDEX
(
LPC32XX_IRQ_MODULE_SIC_2
, 11)

	)

122 
	#LPC32XX_IRQ_UART_7_HCTS
 
	`LPC32XX_IRQ_INDEX
(
LPC32XX_IRQ_MODULE_SIC_2
, 12)

	)

123 
	#LPC32XX_IRQ_GPI_7
 
	`LPC32XX_IRQ_INDEX
(
LPC32XX_IRQ_MODULE_SIC_2
, 15)

	)

124 
	#LPC32XX_IRQ_SDIO
 
	`LPC32XX_IRQ_INDEX
(
LPC32XX_IRQ_MODULE_SIC_2
, 18)

	)

125 
	#LPC32XX_IRQ_UART_5_RX
 
	`LPC32XX_IRQ_INDEX
(
LPC32XX_IRQ_MODULE_SIC_2
, 19)

	)

126 
	#LPC32XX_IRQ_SPI_1_DATAIN
 
	`LPC32XX_IRQ_INDEX
(
LPC32XX_IRQ_MODULE_SIC_2
, 20)

	)

127 
	#LPC32XX_IRQ_GPI_0
 
	`LPC32XX_IRQ_INDEX
(
LPC32XX_IRQ_MODULE_SIC_2
, 22)

	)

128 
	#LPC32XX_IRQ_GPI_1
 
	`LPC32XX_IRQ_INDEX
(
LPC32XX_IRQ_MODULE_SIC_2
, 23)

	)

129 
	#LPC32XX_IRQ_GPI_2
 
	`LPC32XX_IRQ_INDEX
(
LPC32XX_IRQ_MODULE_SIC_2
, 24)

	)

130 
	#LPC32XX_IRQ_GPI_3
 
	`LPC32XX_IRQ_INDEX
(
LPC32XX_IRQ_MODULE_SIC_2
, 25)

	)

131 
	#LPC32XX_IRQ_GPI_4
 
	`LPC32XX_IRQ_INDEX
(
LPC32XX_IRQ_MODULE_SIC_2
, 26)

	)

132 
	#LPC32XX_IRQ_GPI_5
 
	`LPC32XX_IRQ_INDEX
(
LPC32XX_IRQ_MODULE_SIC_2
, 27)

	)

133 
	#LPC32XX_IRQ_GPI_6
 
	`LPC32XX_IRQ_INDEX
(
LPC32XX_IRQ_MODULE_SIC_2
, 28)

	)

134 
	#LPC32XX_IRQ_SYSCLK
 
	`LPC32XX_IRQ_INDEX
(
LPC32XX_IRQ_MODULE_SIC_2
, 31)

	)

136 
	#LPC32XX_IRQ_PRIORITY_VALUE_MIN
 0U

	)

137 
	#LPC32XX_IRQ_PRIORITY_VALUE_MAX
 15U

	)

138 
	#LPC32XX_IRQ_PRIORITY_COUNT
 (
LPC32XX_IRQ_PRIORITY_VALUE_MAX
 + 1U)

	)

139 
	#LPC32XX_IRQ_PRIORITY_HIGHEST
 
LPC32XX_IRQ_PRIORITY_VALUE_MIN


	)

140 
	#LPC32XX_IRQ_PRIORITY_LOWEST
 
LPC32XX_IRQ_PRIORITY_VALUE_MAX


	)

142 
	#BSP_INTERRUPT_VECTOR_MIN
 
LPC32XX_IRQ_SIC_1_IRQ


	)

143 
	#BSP_INTERRUPT_VECTOR_MAX
 
LPC32XX_IRQ_SYSCLK


	)

145 
	#LPC32XX_IRQ_COUNT
 (
BSP_INTERRUPT_VECTOR_MAX
 + 1)

	)

147 
Íc32xx_q_£t_´iÜy
(
¹ems_veùÜ_numb
 
veùÜ
, 
´iÜy
);

149 
Íc32xx_q_g_´iÜy
(
¹ems_veùÜ_numb
 
veùÜ
);

152 
LPC32XX_IRQ_ACTIVE_LOW_OR_FALLING_EDGE
,

153 
LPC32XX_IRQ_ACTIVE_HIGH_OR_RISING_EDGE


154 } 
	tÍc32xx_q_aùiv©iÚ_pÞ¬y
;

156 
Íc32xx_q_£t_aùiv©iÚ_pÞ¬y
(
¹ems_veùÜ_numb
 
veùÜ
, 
Íc32xx_q_aùiv©iÚ_pÞ¬y
 
aùiv©iÚ_pÞ¬y
);

158 
Íc32xx_q_aùiv©iÚ_pÞ¬y
 
Íc32xx_q_g_aùiv©iÚ_pÞ¬y
(
¹ems_veùÜ_numb
 
veùÜ
);

161 
LPC32XX_IRQ_LEVEL_SENSITIVE
,

162 
LPC32XX_IRQ_EDGE_SENSITIVE


163 } 
	tÍc32xx_q_aùiv©iÚ_ty³
;

165 
Íc32xx_q_£t_aùiv©iÚ_ty³
(
¹ems_veùÜ_numb
 
veùÜ
, 
Íc32xx_q_aùiv©iÚ_ty³
 
aùiv©iÚ_ty³
);

167 
Íc32xx_q_aùiv©iÚ_ty³
 
Íc32xx_q_g_aùiv©iÚ_ty³
(
¹ems_veùÜ_numb
 
veùÜ
);

169 
Íc32xx_£t_exû±iÚ_hªdËr
(
Arm_symbÞic_exû±iÚ_Çme
 
exû±iÚ
, (*
hªdËr
)());

173 #ifdeà
__ýlu¥lus


	@src/lib/libbsp/arm/lpc32xx/include/lpc-clock-config.h

22 #iâdeà
LIBBSP_ARM_LPC32XX_LPC_CLOCK_CONFIG_H


23 
	#LIBBSP_ARM_LPC32XX_LPC_CLOCK_CONFIG_H


	)

25 
	~<b¥.h
>

26 
	~<b¥/q.h
>

27 
	~<b¥/Íc32xx.h
>

29 #ifdeà
__ýlu¥lus


43 
	#LPC_CLOCK_INTERRUPT
 
LPC32XX_IRQ_TIMER_0


	)

45 
	#LPC_CLOCK_TIMER_BASE
 
LPC32XX_BASE_TIMER_0


	)

47 
	#LPC_CLOCK_TIMECOUNTER_BASE
 
LPC32XX_BASE_TIMER_1


	)

49 
	#LPC_CLOCK_REFERENCE
 
LPC32XX_PERIPH_CLK


	)

51 
	#LPC_CLOCK_MODULE_ENABLE
()

	)

55 #ifdeà
__ýlu¥lus


	@src/lib/libbsp/arm/lpc32xx/include/lpc-ethernet-config.h

22 #iâdeà
LIBBSP_ARM_LPC32XX_LPC_ETHERNET_CONFIG_H


23 
	#LIBBSP_ARM_LPC32XX_LPC_ETHERNET_CONFIG_H


	)

25 
	~<¡dlib.h
>

26 
	~<lims.h
>

28 
	~<¹ems.h
>

29 
	~<¹ems/m®loc.h
>

31 
	~<b¥.h
>

32 
	~<b¥/Íc32xx.h
>

34 #ifdeà
__ýlu¥lus


48 
	#LPC_ETH_CONFIG_INTERRUPT
 
LPC32XX_IRQ_ETHERNET


	)

50 
	#LPC_ETH_CONFIG_REG_BASE
 
LPC32XX_BASE_ETHERNET


	)

52 
	#LPC_ETH_CONFIG_RX_UNIT_COUNT_DEFAULT
 16

	)

53 
	#LPC_ETH_CONFIG_RX_UNIT_COUNT_MAX
 
INT_MAX


	)

55 
	#LPC_ETH_CONFIG_TX_UNIT_COUNT_DEFAULT
 32

	)

56 
	#LPC_ETH_CONFIG_TX_UNIT_COUNT_MAX
 
INT_MAX


	)

58 
	#LPC_ETH_CONFIG_UNIT_MULTIPLE
 8U

	)

60 #ifdeà
LPC32XX_ETHERNET_RMII


61 
	#LPC_ETH_CONFIG_RMII


	)

63 
Íc_h_cÚfig_moduË_abË
()

65 
LPC32XX_MAC_CLK_CTRL
 = 0x1f;

68 
Íc_h_cÚfig_moduË_abË
()

70 
LPC32XX_MAC_CLK_CTRL
 = 0x0f;

74 
Íc_h_cÚfig_moduË_di§bË
()

76 
LPC32XX_MAC_CLK_CTRL
 = 0;

79 
	#LPC_ETH_CONFIG_USE_TRANSMIT_DMA


	)

81 *
Íc_h_cÚfig_®loc_bË_¬
(
size_t
 
size
)

83  
¹ems_hp_®loÿ_®igÃd_wh_bound¬y
(
size
, 32, 0);

86 
Íc_h_cÚfig_ä_bË_¬
(*
bË_¬
)

89 
ä
(
bË_¬
, () 0xdeadbeef);

94 #ifdeà
__ýlu¥lus


	@src/lib/libbsp/arm/lpc32xx/include/lpc32xx.h

22 #iâdeà
LIBBSP_ARM_LPC32XX_LPC32XX_H


23 
	#LIBBSP_ARM_LPC32XX_LPC32XX_H


	)

25 
	~<¡dt.h
>

27 
	~<b¥/uty.h
>

28 
	~<b¥/Íc-tim.h
>

29 
	~<b¥/Íc-dma.h
>

30 
	~<b¥/Íc-i2s.h
>

31 
	~<b¥/Íc-emc.h
>

49 
	#LPC32XX_BASE_ADC
 0x40048000

	)

50 
	#LPC32XX_BASE_SYSCON
 0x40004000

	)

51 
	#LPC32XX_BASE_DEBUG_CTRL
 0x40040000

	)

52 
	#LPC32XX_BASE_DMA
 0x31000000

	)

53 
	#LPC32XX_BASE_EMC
 0x31080000

	)

54 
	#LPC32XX_BASE_EMC_CS_0
 0xe0000000

	)

55 
	#LPC32XX_BASE_EMC_CS_1
 0xe1000000

	)

56 
	#LPC32XX_BASE_EMC_CS_2
 0xe2000000

	)

57 
	#LPC32XX_BASE_EMC_CS_3
 0xe3000000

	)

58 
	#LPC32XX_BASE_EMC_DYCS_0
 0x80000000

	)

59 
	#LPC32XX_BASE_EMC_DYCS_1
 0xa0000000

	)

60 
	#LPC32XX_BASE_ETB_CFG
 0x310c0000

	)

61 
	#LPC32XX_BASE_ETB_DATA
 0x310e0000

	)

62 
	#LPC32XX_BASE_ETHERNET
 0x31060000

	)

63 
	#LPC32XX_BASE_GPIO
 0x40028000

	)

64 
	#LPC32XX_BASE_I2C_1
 0x400a0000

	)

65 
	#LPC32XX_BASE_I2C_2
 0x400a8000

	)

66 
	#LPC32XX_BASE_I2S_0
 0x20094000

	)

67 
	#LPC32XX_BASE_I2S_1
 0x2009c000

	)

68 
	#LPC32XX_BASE_IRAM
 0x08000000

	)

69 
	#LPC32XX_BASE_IROM
 0x0c000000

	)

70 
	#LPC32XX_BASE_KEYSCAN
 0x40050000

	)

71 
	#LPC32XX_BASE_LCD
 0x31040000

	)

72 
	#LPC32XX_BASE_MCPWM
 0x400e8000

	)

73 
	#LPC32XX_BASE_MIC
 0x40008000

	)

74 
	#LPC32XX_BASE_NAND_MLC
 0x200a8000

	)

75 
	#LPC32XX_BASE_NAND_SLC
 0x20020000

	)

76 
	#LPC32XX_BASE_PWM_1
 0x4005c000

	)

77 
	#LPC32XX_BASE_PWM_2
 0x4005c004

	)

78 
	#LPC32XX_BASE_PWM_3
 0x4002c000

	)

79 
	#LPC32XX_BASE_PWM_4
 0x40030000

	)

80 
	#LPC32XX_BASE_RTC
 0x40024000

	)

81 
	#LPC32XX_BASE_RTC_RAM
 0x40024080

	)

82 
	#LPC32XX_BASE_SDCARD
 0x20098000

	)

83 
	#LPC32XX_BASE_SIC_1
 0x4000c000

	)

84 
	#LPC32XX_BASE_SIC_2
 0x40010000

	)

85 
	#LPC32XX_BASE_SPI_1
 0x20088000

	)

86 
	#LPC32XX_BASE_SPI_2
 0x20090000

	)

87 
	#LPC32XX_BASE_SSP_0
 0x20084000

	)

88 
	#LPC32XX_BASE_SSP_1
 0x2008c000

	)

89 
	#LPC32XX_BASE_TIMER_0
 0x40044000

	)

90 
	#LPC32XX_BASE_TIMER_1
 0x4004c000

	)

91 
	#LPC32XX_BASE_TIMER_2
 0x40058000

	)

92 
	#LPC32XX_BASE_TIMER_3
 0x40060000

	)

93 
	#LPC32XX_BASE_TIMER_5
 0x4002c000

	)

94 
	#LPC32XX_BASE_TIMER_6
 0x40030000

	)

95 
	#LPC32XX_BASE_TIMER_HS
 0x40038000

	)

96 
	#LPC32XX_BASE_TIMER_MS
 0x40034000

	)

97 
	#LPC32XX_BASE_UART_1
 0x40014000

	)

98 
	#LPC32XX_BASE_UART_2
 0x40018000

	)

99 
	#LPC32XX_BASE_UART_3
 0x40080000

	)

100 
	#LPC32XX_BASE_UART_4
 0x40088000

	)

101 
	#LPC32XX_BASE_UART_5
 0x40090000

	)

102 
	#LPC32XX_BASE_UART_6
 0x40098000

	)

103 
	#LPC32XX_BASE_UART_7
 0x4001c000

	)

104 
	#LPC32XX_BASE_USB
 0x31020000

	)

105 
	#LPC32XX_BASE_USB_OTG_I2C
 0x31020300

	)

106 
	#LPC32XX_BASE_WDT
 0x4003c000

	)

116 
	#LPC32XX_U3CLK
 (*(vÞ©
ut32_t
 *è0x400040d0)

	)

117 
	#LPC32XX_U4CLK
 (*(vÞ©
ut32_t
 *è0x400040d4)

	)

118 
	#LPC32XX_U5CLK
 (*(vÞ©
ut32_t
 *è0x400040d8)

	)

119 
	#LPC32XX_U6CLK
 (*(vÞ©
ut32_t
 *è0x400040dc)

	)

120 
	#LPC32XX_IRDACLK
 (*(vÞ©
ut32_t
 *è0x400040e0)

	)

121 
	#LPC32XX_UART_CTRL
 (*(vÞ©
ut32_t
 *è0x40054000)

	)

122 
	#LPC32XX_UART_CLKMODE
 (*(vÞ©
ut32_t
 *è0x40054004)

	)

123 
	#LPC32XX_UART_LOOP
 (*(vÞ©
ut32_t
 *è0x40054008)

	)

124 
	#LPC32XX_SW_INT
 (*(vÞ©
ut32_t
 *è0x400040a8)

	)

125 
	#LPC32XX_MAC_CLK_CTRL
 (*(vÞ©
ut32_t
 *è0x40004090)

	)

126 
	#LPC32XX_USB_DIV
 (*(vÞ©
ut32_t
 *è0x4000401c)

	)

127 
	#LPC32XX_OTG_CLK_CTRL
 (*(vÞ©
ut32_t
 *è0x31020ff4)

	)

128 
	#LPC32XX_OTG_CLK_STAT
 (*(vÞ©
ut32_t
 *è0x31020ff8)

	)

129 
	#LPC32XX_OTG_STAT_CTRL
 (*(vÞ©
ut32_t
 *è0x31020110)

	)

130 
	#LPC32XX_I2C_RX
 (*(vÞ©
ut32_t
 *è0x31020300)

	)

131 
	#LPC32XX_I2C_TX
 (*(vÞ©
ut32_t
 *è0x31020300)

	)

132 
	#LPC32XX_I2C_STS
 (*(vÞ©
ut32_t
 *è0x31020304)

	)

133 
	#LPC32XX_I2C_CTL
 (*(vÞ©
ut32_t
 *è0x31020308)

	)

134 
	#LPC32XX_I2C_CLKHI
 (*(vÞ©
ut32_t
 *è0x3102030c)

	)

135 
	#LPC32XX_I2C_CLKLO
 (*(vÞ©
ut32_t
 *è0x31020310)

	)

136 
	#LPC32XX_PWR_CTRL
 (*(vÞ©
ut32_t
 *è0x40004044)

	)

137 
	#LPC32XX_OSC_CTRL
 (*(vÞ©
ut32_t
 *è0x4000404c)

	)

138 
	#LPC32XX_SYSCLK_CTRL
 (*(vÞ©
ut32_t
 *è0x40004050)

	)

139 
	#LPC32XX_PLL397_CTRL
 (*(vÞ©
ut32_t
 *è0x40004048)

	)

140 
	#LPC32XX_HCLKPLL_CTRL
 (*(vÞ©
ut32_t
 *è0x40004058)

	)

141 
	#LPC32XX_HCLKDIV_CTRL
 (*(vÞ©
ut32_t
 *è0x40004040)

	)

142 
	#LPC32XX_TEST_CLK
 (*(vÞ©
ut32_t
 *è0x400040a4)

	)

143 
	#LPC32XX_AUTOCLK_CTRL
 (*(vÞ©
ut32_t
 *è0x400040ec)

	)

144 
	#LPC32XX_START_ER_PIN
 (*(vÞ©
ut32_t
 *è0x40004030)

	)

145 
	#LPC32XX_START_ER_INT
 (*(vÞ©
ut32_t
 *è0x40004020)

	)

146 
	#LPC32XX_P0_INTR_ER
 (*(vÞ©
ut32_t
 *è0x40004018)

	)

147 
	#LPC32XX_START_SR_PIN
 (*(vÞ©
ut32_t
 *è0x40004038)

	)

148 
	#LPC32XX_START_SR_INT
 (*(vÞ©
ut32_t
 *è0x40004028)

	)

149 
	#LPC32XX_START_RSR_PIN
 (*(vÞ©
ut32_t
 *è0x40004034)

	)

150 
	#LPC32XX_START_RSR_INT
 (*(vÞ©
ut32_t
 *è0x40004024)

	)

151 
	#LPC32XX_START_APR_PIN
 (*(vÞ©
ut32_t
 *è0x4000403c)

	)

152 
	#LPC32XX_START_APR_INT
 (*(vÞ©
ut32_t
 *è0x4000402c)

	)

153 
	#LPC32XX_USB_CTRL
 (*(vÞ©
ut32_t
 *è0x40004064)

	)

154 
	#LPC32XX_USBDIV_CTRL
 (*(vÞ©
ut32_t
 *è0x4000401c)

	)

155 
	#LPC32XX_MS_CTRL
 (*(vÞ©
ut32_t
 *è0x40004080)

	)

156 
	#LPC32XX_DMACLK_CTRL
 (*(vÞ©
ut32_t
 *è0x400040e8)

	)

157 
	#LPC32XX_FLASHCLK_CTRL
 (*(vÞ©
ut32_t
 *è0x400040c8)

	)

158 
	#LPC32XX_MACCLK_CTRL
 (*(vÞ©
ut32_t
 *è0x40004090)

	)

159 
	#LPC32XX_LCDCLK_CTRL
 (*(vÞ©
ut32_t
 *è0x40004054)

	)

160 
	#LPC32XX_I2S_CTRL
 (*(vÞ©
ut32_t
 *è0x4000407c)

	)

161 
	#LPC32XX_SSP_CTRL
 (*(vÞ©
ut32_t
 *è0x40004078)

	)

162 
	#LPC32XX_SPI_CTRL
 (*(vÞ©
ut32_t
 *è0x400040c4)

	)

163 
	#LPC32XX_I2CCLK_CTRL
 (*(vÞ©
ut32_t
 *è0x400040ac)

	)

164 
	#LPC32XX_TIMCLK_CTRL1
 (*(vÞ©
ut32_t
 *è0x400040c0)

	)

165 
	#LPC32XX_TIMCLK_CTRL
 (*(vÞ©
ut32_t
 *è0x400040bc)

	)

166 
	#LPC32XX_ADCLK_CTRL
 (*(vÞ©
ut32_t
 *è0x400040b4)

	)

167 
	#LPC32XX_ADCLK_CTRL1
 (*(vÞ©
ut32_t
 *è0x40004060)

	)

168 
	#LPC32XX_KEYCLK_CTRL
 (*(vÞ©
ut32_t
 *è0x400040b0)

	)

169 
	#LPC32XX_PWMCLK_CTRL
 (*(vÞ©
ut32_t
 *è0x400040b8)

	)

170 
	#LPC32XX_UARTCLK_CTRL
 (*(vÞ©
ut32_t
 *è0x400040e4)

	)

171 
	#LPC32XX_POS0_IRAM_CTRL
 (*(vÞ©
ut32_t
 *è0x40004110)

	)

172 
	#LPC32XX_POS1_IRAM_CTRL
 (*(vÞ©
ut32_t
 *è0x40004114)

	)

173 
	#LPC32XX_SDRAMCLK_CTRL
 (*(vÞ©
ut32_t
 *è0x40004068)

	)

183 
	#PWR_STOP
 
	`BSP_BIT32
(0)

	)

184 
	#PWR_HIGHCORE_ALWAYS
 
	`BSP_BIT32
(1)

	)

185 
	#PWR_NORMAL_RUN_MODE
 
	`BSP_BIT32
(2)

	)

186 
	#PWR_SYSCLKEN_ALWAYS
 
	`BSP_BIT32
(3)

	)

187 
	#PWR_SYSCLKEN_HIGH
 
	`BSP_BIT32
(4)

	)

188 
	#PWR_HIGHCORE_HIGH
 
	`BSP_BIT32
(5)

	)

189 
	#PWR_SDRAM_AUTO_REFRESH
 
	`BSP_BIT32
(7)

	)

190 
	#PWR_UPDATE_EMCSREFREQ
 
	`BSP_BIT32
(8)

	)

191 
	#PWR_EMCSREFREQ
 
	`BSP_BIT32
(9)

	)

192 
	#PWR_HCLK_USES_PERIPH_CLK
 
	`BSP_BIT32
(10)

	)

202 
	#HCLK_PLL_LOCK
 
	`BSP_BIT32
(0)

	)

203 
	#HCLK_PLL_M
(
v®
è
	`BSP_FLD32
(v®, 1, 8)

	)

204 
	#HCLK_PLL_M_GET
(
»g
è
	`BSP_FLD32GET
Ôeg, 1, 8)

	)

205 
	#HCLK_PLL_N
(
v®
è
	`BSP_FLD32
(v®, 9, 10)

	)

206 
	#HCLK_PLL_N_GET
(
»g
è
	`BSP_FLD32GET
Ôeg, 9, 10)

	)

207 
	#HCLK_PLL_P
(
v®
è
	`BSP_FLD32
(v®, 11, 12)

	)

208 
	#HCLK_PLL_P_GET
(
»g
è
	`BSP_FLD32GET
Ôeg, 11, 12)

	)

209 
	#HCLK_PLL_FBD_FCLKOUT
 
	`BSP_BIT32
(13)

	)

210 
	#HCLK_PLL_DIRECT
 
	`BSP_BIT32
(14)

	)

211 
	#HCLK_PLL_BYPASS
 
	`BSP_BIT32
(15)

	)

212 
	#HCLK_PLL_POWER
 
	`BSP_BIT32
(16)

	)

222 
	#HCLK_DIV_HCLK
(
v®
è
	`BSP_FLD32
(v®, 0, 1)

	)

223 
	#HCLK_DIV_HCLK_GET
(
»g
è
	`BSP_FLD32GET
Ôeg, 0, 1)

	)

224 
	#HCLK_DIV_PERIPH_CLK
(
v®
è
	`BSP_FLD32
(v®, 2, 6)

	)

225 
	#HCLK_DIV_PERIPH_CLK_GET
(
»g
è
	`BSP_FLD32GET
Ôeg, 2, 6)

	)

226 
	#HCLK_DIV_DDRAM_CLK
(
v®
è
	`BSP_FLD32
(v®, 7, 8)

	)

227 
	#HCLK_DIV_DDRAM_CLK_GET
(
»g
è
	`BSP_FLD32GET
Ôeg, 7, 8)

	)

237 
	#TIMCLK_CTRL_WDT
 
	`BSP_BIT32
(0)

	)

238 
	#TIMCLK_CTRL_HST
 
	`BSP_BIT32
(1)

	)

242 
	#LPC32XX_FILL
(
a
, 
b
, 
s
è
ut8_t
 
»£rved_
 ## b [b - - (s)]

	)

243 
	#LPC32XX_RESERVE
(
a
, 
b
è
ut8_t
 
»£rved_
 ## b [b -]

	)

246 } 
	gÍc32xx_Çnd_¦c
;

249 } 
	gÍc32xx_s¥
;

252 } 
	gÍc32xx_¥i
;

255 } 
	gÍc32xx_sd_ÿrd
;

258 } 
	gÍc32xx_usb
;

261 } 
	gÍc32xx_lcd
;

264 } 
	gÍc32xx_b
;

267 } 
	gÍc32xx_syscÚ
;

270 } 
	gÍc32xx_u¬t_ù¾
;

273 } 
	gÍc32xx_u¬t
;

276 } 
	gÍc32xx_ms_tim
;

279 } 
	gÍc32xx_hs_tim
;

287 
	#WDTTIM_INT_MATCH_INT
 
	`BSP_BIT32
(0)

	)

297 
	#WDTTIM_CTRL_COUNT_ENAB
 
	`BSP_BIT32
(0)

	)

298 
	#WDTTIM_CTRL_RESET_COUNT
 
	`BSP_BIT32
(1)

	)

299 
	#WDTTIM_CTRL_PAUSE_EN
 
	`BSP_BIT32
(2)

	)

309 
	#WDTTIM_MCTRL_MR0_INT
 
	`BSP_BIT32
(0)

	)

310 
	#WDTTIM_MCTRL_RESET_COUNT0
 
	`BSP_BIT32
(1)

	)

311 
	#WDTTIM_MCTRL_STOP_COUNT0
 
	`BSP_BIT32
(2)

	)

312 
	#WDTTIM_MCTRL_M_RES1
 
	`BSP_BIT32
(3)

	)

313 
	#WDTTIM_MCTRL_M_RES2
 
	`BSP_BIT32
(4)

	)

314 
	#WDTTIM_MCTRL_RESFRC1
 
	`BSP_BIT32
(5)

	)

315 
	#WDTTIM_MCTRL_RESFRC2
 
	`BSP_BIT32
(6)

	)

325 
	#WDTTIM_EMR_EXT_MATCH0
 
	`BSP_BIT32
(0)

	)

326 
	#WDTTIM_EMR_MATCH_CTRL
(
v®
è
	`BSP_FLD32
(v®, 4, 5)

	)

327 
	#WDTTIM_EMR_MATCH_CTRL_SET
(
»g
, 
v®
è
	`BSP_FLD32SET
Ôeg, v®, 4, 5)

	)

337 
	#WDTTIM_RES_WDT
 
	`BSP_BIT32
(0)

	)

342 
ut32_t
 
	m
;

343 
ut32_t
 
	mù¾
;

344 
ut32_t
 
	mcouÁ
;

345 
ut32_t
 
	mmù¾
;

346 
ut32_t
 
	mm©ch0
;

347 
ut32_t
 
	memr
;

348 
ut32_t
 
	mpul£
;

349 
ut32_t
 
	m»s
;

350 } 
	tÍc32xx_wdt
;

353 } 
	gÍc32xx_debug
;

356 } 
	gÍc32xx_adc
;

359 } 
	gÍc32xx_keysÿn
;

362 } 
	gÍc32xx_pwm
;

365 } 
	gÍc32xx_mýwm
;

368 
ut32_t
 
	mmac1
;

369 
ut32_t
 
	mmac2
;

370 
ut32_t
 
	mgt
;

371 
ut32_t
 
	mgr
;

372 
ut32_t
 
	mþ¹
;

373 
ut32_t
 
	mmaxf
;

374 
ut32_t
 
	msuµ
;

375 
ut32_t
 
	m¡
;

376 
ut32_t
 
	mmcfg
;

377 
ut32_t
 
	mmcmd
;

378 
ut32_t
 
	mmadr
;

379 
ut32_t
 
	mmwtd
;

380 
ut32_t
 
	mmrdd
;

381 
ut32_t
 
	mmd
;

382 
ut32_t
 
	m»£rved_0
 [2];

383 
ut32_t
 
	m§0
;

384 
ut32_t
 
	m§1
;

385 
ut32_t
 
	m§2
;

386 
ut32_t
 
	m»£rved_1
 [45];

387 
ut32_t
 
	mcommªd
;

388 
ut32_t
 
	m¡©us
;

389 
ut32_t
 
	mrxdesütÜ
;

390 
ut32_t
 
	mrx¡©us
;

391 
ut32_t
 
	mrxdesütÜnum
;

392 
ut32_t
 
	mrx´oduûdex
;

393 
ut32_t
 
	mrxcÚsumedex
;

394 
ut32_t
 
	mtxdesütÜ
;

395 
ut32_t
 
	mtx¡©us
;

396 
ut32_t
 
	mtxdesütÜnum
;

397 
ut32_t
 
	mtx´oduûdex
;

398 
ut32_t
 
	mtxcÚsumedex
;

399 
ut32_t
 
	m»£rved_2
 [10];

400 
ut32_t
 
	mtsv0
;

401 
ut32_t
 
	mtsv1
;

402 
ut32_t
 
	mrsv
;

403 
ut32_t
 
	m»£rved_3
 [3];

404 
ut32_t
 
	mæowcÚÞút
;

405 
ut32_t
 
	mæowcÚÞ¡s
;

406 
ut32_t
 
	m»£rved_4
 [34];

407 
ut32_t
 
	mrxfrù¾
;

408 
ut32_t
 
	mrxfrwÞ¡s
;

409 
ut32_t
 
	mrxfrwÞþr
;

410 
ut32_t
 
	m»£rved_5
 [1];

411 
ut32_t
 
	mhashf¾
;

412 
ut32_t
 
	mhashfrh
;

413 
ut32_t
 
	m»£rved_6
 [882];

414 
ut32_t
 
	mt¡©us
;

415 
ut32_t
 
	mÇbË
;

416 
ut32_t
 
	mtþr
;

417 
ut32_t
 
	mt£t
;

418 
ut32_t
 
	m»£rved_7
 [1];

419 
ut32_t
 
	mpowdown
;

420 } 
	tÍc32xx_h
;

423 
ut32_t
 
	m
;

424 
ut32_t
 
	mr¤
;

425 
ut32_t
 
	m¤
;

426 
ut32_t
 
	m­r
;

427 
ut32_t
 
	m©r
;

428 
ut32_t
 
	mr
;

429 } 
	tÍc32xx_q
;

432 
ut32_t
 
	mp3_p_¡©e
;

433 
ut32_t
 
	mp3_ou_£t
;

434 
ut32_t
 
	mp3_ou_þr
;

435 
ut32_t
 
	mp3_ou_¡©e
;

436 
ut32_t
 
	mp2_d_£t
;

437 
ut32_t
 
	mp2_d_þr
;

438 
ut32_t
 
	mp2_d_¡©e
;

439 
ut32_t
 
	mp2_p_¡©e
;

440 
ut32_t
 
	mp2_ou_£t
;

441 
ut32_t
 
	mp2_ou_þr
;

442 
ut32_t
 
	mp2_mux_£t
;

443 
ut32_t
 
	mp2_mux_þr
;

444 
ut32_t
 
	mp2_mux_¡©e
;

445 
LPC32XX_RESERVE
(0x034, 0x040);

446 
ut32_t
 
	mp0_p_¡©e
;

447 
ut32_t
 
	mp0_ou_£t
;

448 
ut32_t
 
	mp0_ou_þr
;

449 
ut32_t
 
	mp0_ou_¡©e
;

450 
ut32_t
 
	mp0_d_£t
;

451 
ut32_t
 
	mp0_d_þr
;

452 
ut32_t
 
	mp0_d_¡©e
;

453 
LPC32XX_RESERVE
(0x05c, 0x060);

454 
ut32_t
 
	mp1_p_¡©e
;

455 
ut32_t
 
	mp1_ou_£t
;

456 
ut32_t
 
	mp1_ou_þr
;

457 
ut32_t
 
	mp1_ou_¡©e
;

458 
ut32_t
 
	mp1_d_£t
;

459 
ut32_t
 
	mp1_d_þr
;

460 
ut32_t
 
	mp1_d_¡©e
;

461 
LPC32XX_RESERVE
(0x07c, 0x110);

462 
ut32_t
 
	mp3_mux_£t
;

463 
ut32_t
 
	mp3_mux_þr
;

464 
ut32_t
 
	mp3_mux_¡©e
;

465 
LPC32XX_RESERVE
(0x11c, 0x120);

466 
ut32_t
 
	mp0_mux_£t
;

467 
ut32_t
 
	mp0_mux_þr
;

468 
ut32_t
 
	mp0_mux_¡©e
;

469 
LPC32XX_RESERVE
(0x12c, 0x130);

470 
ut32_t
 
	mp1_mux_£t
;

471 
ut32_t
 
	mp1_mux_þr
;

472 
ut32_t
 
	mp1_mux_¡©e
;

473 } 
	tÍc32xx_gpio
;

476 
ut32_t
 
	mrx_Ü_tx
;

477 
ut32_t
 
	m¡©
;

478 
ut32_t
 
	mù¾
;

479 
ut32_t
 
	mþk_hi
;

480 
ut32_t
 
	mþk_lo
;

481 
ut32_t
 
	madr
;

482 
ut32_t
 
	mrxæ
;

483 
ut32_t
 
	mtxæ
;

484 
ut32_t
 
	mrxb
;

485 
ut32_t
 
	mtxb
;

486 
ut32_t
 
	ms_tx
;

487 
ut32_t
 
	ms_txæ
;

488 } 
	tÍc32xx_i2c
;

491 
ut32_t
 
	mucouÁ
;

492 
ut32_t
 
	mdcouÁ
;

493 
ut32_t
 
	mm©ch0
;

494 
ut32_t
 
	mm©ch1
;

495 
ut32_t
 
	mù¾
;

496 
ut32_t
 
	mt¡©
;

497 
ut32_t
 
	mkey
;

498 
ut32_t
 
	m¤am
 [32];

499 } 
	tÍc32xx_¹c
;

502 
ut32_t
 
	mcÚÞ
;

503 
ut32_t
 
	m¡©us
;

504 
ut32_t
 
	mtimeout
;

505 
ut32_t
 
	m»£rved_0
 [5];

506 } 
	tÍc32xx_emc_ahb
;

510 
ut32_t
 
	mw32
;

511 
ut16_t
 
	mw16
;

512 
ut8_t
 
	mw8
;

513 } 
	mbuff
;

514 
ut32_t
 
	m»£rved_0
 [8191];

516 
ut32_t
 
	mw32
;

517 
ut16_t
 
	mw16
;

518 
ut8_t
 
	mw8
;

519 } 
	md©a
;

520 
ut32_t
 
	m»£rved_1
 [8191];

521 
ut32_t
 
	mcmd
;

522 
ut32_t
 
	maddr
;

523 
ut32_t
 
	mecc_c
;

524 
ut32_t
 
	mecc_dec
;

525 
ut32_t
 
	mecc_auto_c
;

526 
ut32_t
 
	mecc_auto_dec
;

527 
ut32_t
 
	m½r
;

528 
ut32_t
 
	mw´
;

529 
ut32_t
 
	mrubp
;

530 
ut32_t
 
	mrobp
;

531 
ut32_t
 
	msw_wp_add_low
;

532 
ut32_t
 
	msw_wp_add_hig
;

533 
ut32_t
 
	miü
;

534 
ut32_t
 
	mtime
;

535 
ut32_t
 
	mq_mr
;

536 
ut32_t
 
	mq_¤
;

537 
ut32_t
 
	m»£rved_2
;

538 
ut32_t
 
	mlock_´
;

539 
ut32_t
 
	mi¤
;

540 
ut32_t
 
	mûh
;

541 } 
	tÍc32xx_Çnd_mlc
;

544 
Íc32xx_Çnd_¦c
 
	mÇnd_¦c
;

545 
LPC32XX_FILL
(0x20020000, 0x20084000, 
Íc32xx_Çnd_¦c
);

546 
Íc32xx_s¥
 
	ms¥_0
;

547 
LPC32XX_FILL
(0x20084000, 0x20088000, 
Íc32xx_s¥
);

548 
Íc32xx_¥i
 
	m¥i_1
;

549 
LPC32XX_FILL
(0x20088000, 0x2008c000, 
Íc32xx_¥i
);

550 
Íc32xx_s¥
 
	ms¥_1
;

551 
LPC32XX_FILL
(0x2008c000, 0x20090000, 
Íc32xx_s¥
);

552 
Íc32xx_¥i
 
	m¥i_2
;

553 
LPC32XX_FILL
(0x20090000, 0x20094000, 
Íc32xx_¥i
);

554 
Íc_i2s
 
	mi2s_0
;

555 
LPC32XX_FILL
(0x20094000, 0x20098000, 
Íc_i2s
);

556 
Íc32xx_sd_ÿrd
 
	msd_ÿrd
;

557 
LPC32XX_FILL
(0x20098000, 0x2009c000, 
Íc32xx_sd_ÿrd
);

558 
Íc_i2s
 
	mi2s_1
;

559 
LPC32XX_FILL
(0x2009c000, 0x200a8000, 
Íc_i2s
);

560 
Íc32xx_Çnd_mlc
 
	mÇnd_mlc
;

561 
LPC32XX_FILL
(0x200a8000, 0x31000000, 
Íc32xx_Çnd_mlc
);

562 
Íc_dma
 
	mdma
;

563 
LPC32XX_FILL
(0x31000000, 0x31020000, 
Íc_dma
);

564 
Íc32xx_usb
 
	musb
;

565 
LPC32XX_FILL
(0x31020000, 0x31040000, 
Íc32xx_usb
);

566 
Íc32xx_lcd
 
	mlcd
;

567 
LPC32XX_FILL
(0x31040000, 0x31060000, 
Íc32xx_lcd
);

568 
Íc32xx_h
 
	mh
;

569 
LPC32XX_FILL
(0x31060000, 0x31080000, 
Íc32xx_h
);

570 
Íc_emc
 
	memc
;

571 
LPC32XX_FILL
(0x31080000, 0x31080400, 
Íc_emc
);

572 
Íc32xx_emc_ahb
 
	memc_ahb
 [5];

573 
LPC32XX_FILL
(0x31080400, 0x310c0000, 
Íc32xx_emc_ahb
 [5]);

574 
Íc32xx_b
 
	mb
;

575 
LPC32XX_FILL
(0x310c0000, 0x40004000, 
Íc32xx_b
);

576 
Íc32xx_syscÚ
 
	msyscÚ
;

577 
LPC32XX_FILL
(0x40004000, 0x40008000, 
Íc32xx_syscÚ
);

578 
Íc32xx_q
 
	mmic
;

579 
LPC32XX_FILL
(0x40008000, 0x4000c000, 
Íc32xx_q
);

580 
Íc32xx_q
 
	msic_1
;

581 
LPC32XX_FILL
(0x4000c000, 0x40010000, 
Íc32xx_q
);

582 
Íc32xx_q
 
	msic_2
;

583 
LPC32XX_FILL
(0x40010000, 0x40014000, 
Íc32xx_q
);

584 
Íc32xx_u¬t
 
	mu¬t_1
;

585 
LPC32XX_FILL
(0x40014000, 0x40018000, 
Íc32xx_u¬t
);

586 
Íc32xx_u¬t
 
	mu¬t_2
;

587 
LPC32XX_FILL
(0x40018000, 0x4001c000, 
Íc32xx_u¬t
);

588 
Íc32xx_u¬t
 
	mu¬t_7
;

589 
LPC32XX_FILL
(0x4001c000, 0x40024000, 
Íc32xx_u¬t
);

590 
Íc32xx_¹c
 
	m¹c
;

591 
LPC32XX_FILL
(0x40024000, 0x40028000, 
Íc32xx_¹c
);

592 
Íc32xx_gpio
 
	mgpio
;

593 
LPC32XX_FILL
(0x40028000, 0x4002c000, 
Íc32xx_gpio
);

594 
Íc_tim
 
	mtim_4
;

595 
LPC32XX_FILL
(0x4002c000, 0x40030000, 
Íc_tim
);

596 
Íc_tim
 
	mtim_5
;

597 
LPC32XX_FILL
(0x40030000, 0x40034000, 
Íc_tim
);

598 
Íc32xx_ms_tim
 
	mms_tim
;

599 
LPC32XX_FILL
(0x40034000, 0x40038000, 
Íc32xx_ms_tim
);

600 
Íc32xx_hs_tim
 
	mhs_tim
;

601 
LPC32XX_FILL
(0x40038000, 0x4003c000, 
Íc32xx_hs_tim
);

602 
Íc32xx_wdt
 
	mwdt
;

603 
LPC32XX_FILL
(0x4003c000, 0x40040000, 
Íc32xx_wdt
);

604 
Íc32xx_debug
 
	mdebug
;

605 
LPC32XX_FILL
(0x40040000, 0x40044000, 
Íc32xx_debug
);

606 
Íc_tim
 
	mtim_0
;

607 
LPC32XX_FILL
(0x40044000, 0x40048000, 
Íc_tim
);

608 
Íc32xx_adc
 
	madc
;

609 
LPC32XX_FILL
(0x40048000, 0x4004c000, 
Íc32xx_adc
);

610 
Íc_tim
 
	mtim_1
;

611 
LPC32XX_FILL
(0x4004c000, 0x40050000, 
Íc_tim
);

612 
Íc32xx_keysÿn
 
	mkeysÿn
;

613 
LPC32XX_FILL
(0x40050000, 0x40054000, 
Íc32xx_keysÿn
);

614 
Íc32xx_u¬t_ù¾
 
	mu¬t_ù¾
;

615 
LPC32XX_FILL
(0x40054000, 0x40058000, 
Íc32xx_u¬t_ù¾
);

616 
Íc_tim
 
	mtim_2
;

617 
LPC32XX_FILL
(0x40058000, 0x4005c000, 
Íc_tim
);

618 
Íc32xx_pwm
 
	mpwm_1_ªd_pwm_2
;

619 
LPC32XX_FILL
(0x4005c000, 0x40060000, 
Íc32xx_pwm
);

620 
Íc_tim
 
	mtim3
;

621 
LPC32XX_FILL
(0x40060000, 0x40080000, 
Íc_tim
);

622 
Íc32xx_u¬t
 
	mu¬t_3
;

623 
LPC32XX_FILL
(0x40080000, 0x40088000, 
Íc32xx_u¬t
);

624 
Íc32xx_u¬t
 
	mu¬t_4
;

625 
LPC32XX_FILL
(0x40088000, 0x40090000, 
Íc32xx_u¬t
);

626 
Íc32xx_u¬t
 
	mu¬t_5
;

627 
LPC32XX_FILL
(0x40090000, 0x40098000, 
Íc32xx_u¬t
);

628 
Íc32xx_u¬t
 
	mu¬t_6
;

629 
LPC32XX_FILL
(0x40098000, 0x400a0000, 
Íc32xx_u¬t
);

630 
Íc32xx_i2c
 
	mi2c_1
;

631 
LPC32XX_FILL
(0x400a0000, 0x400a8000, 
Íc32xx_i2c
);

632 
Íc32xx_i2c
 
	mi2c_2
;

633 
LPC32XX_FILL
(0x400a8000, 0x400e8000, 
Íc32xx_i2c
);

634 
Íc32xx_mýwm
 
	mmýwm
;

635 } 
	tÍc32xx_»gi¡s
;

637 vÞ©
Íc32xx_»gi¡s
 
Íc32xx
;

	@src/lib/libbsp/arm/lpc32xx/include/mmu.h

23 #iâdeà
LIBBSP_ARM_LPC32XX_MMU_H


24 
	#LIBBSP_ARM_LPC32XX_MMU_H


	)

26 
	~<libýu/¬m-ý15.h
>

28 #ifdeà
__ýlu¥lus


42 
	#LPC32XX_MMU_CLIENT_DOMAIN
 15U

	)

44 
	#LPC32XX_MMU_READ_ONLY
 \

45 ((
LPC32XX_MMU_CLIENT_DOMAIN
 << 
ARM_MMU_SECT_DOMAIN_SHIFT
) \

46 | 
ARM_MMU_SECT_DEFAULT
)

	)

48 
	#LPC32XX_MMU_READ_ONLY_CACHED
 \

49 (
LPC32XX_MMU_READ_ONLY
 | 
ARM_MMU_SECT_C
 | 
ARM_MMU_SECT_B
)

	)

51 
	#LPC32XX_MMU_READ_WRITE
 \

52 ((
LPC32XX_MMU_CLIENT_DOMAIN
 << 
ARM_MMU_SECT_DOMAIN_SHIFT
) \

53 | 
ARM_MMU_SECT_AP_0
 \

54 | 
ARM_MMU_SECT_DEFAULT
)

	)

56 
	#LPC32XX_MMU_READ_WRITE_CACHED
 \

57 (
LPC32XX_MMU_READ_WRITE
 | 
ARM_MMU_SECT_C
 | 
ARM_MMU_SECT_B
)

	)

64 
le
 
ut32_t
 
Íc32xx_£t_ª¦©iÚ_bË_s
(

65 cÚ¡ *
beg
,

66 cÚ¡ *
d
,

67 
ut32_t
 
£ùiÚ_æags


70  
¬m_ý15_£t_ª¦©iÚ_bË_s
(
beg
, 
d
, 
£ùiÚ_æags
);

75 #ifdeà
__ýlu¥lus


	@src/lib/libbsp/arm/lpc32xx/include/nand-mlc.h

25 #iâdeà
LIBBSP_ARM_LPC32XX_NAND_MLC_H


26 
	#LIBBSP_ARM_LPC32XX_NAND_MLC_H


	)

28 
	~<¹ems.h
>

30 
	~<b¥/uty.h
>

32 #ifdeà
__ýlu¥lus


74 
	#MLC_SMALL_PAGE_SIZE
 528

	)

75 
	#MLC_SMALL_DATA_SIZE
 512

	)

76 
	#MLC_SMALL_SPARE_SIZE
 16

	)

77 
	#MLC_SMALL_USER_SPARE_SIZE
 6

	)

78 
	#MLC_SMALL_ECC_SPARE_SIZE
 10

	)

79 
	#MLC_SMALL_DATA_WORD_COUNT
 (
MLC_SMALL_DATA_SIZE
 / 4)

	)

80 
	#MLC_SMALL_SPARE_WORD_COUNT
 (
MLC_SMALL_SPARE_SIZE
 / 4)

	)

81 
	#MLC_SMALL_PAGES_PER_LARGE_PAGE
 4

	)

82 
	#MLC_LARGE_PAGE_SIZE
 \

83 (
MLC_SMALL_PAGES_PER_LARGE_PAGE
 * 
MLC_SMALL_PAGE_SIZE
)

	)

84 
	#MLC_LARGE_DATA_SIZE
 \

85 (
MLC_SMALL_PAGES_PER_LARGE_PAGE
 * 
MLC_SMALL_DATA_SIZE
)

	)

86 
	#MLC_LARGE_SPARE_SIZE
 \

87 (
MLC_SMALL_PAGES_PER_LARGE_PAGE
 * 
MLC_SMALL_SPARE_SIZE
)

	)

88 
	#MLC_LARGE_DATA_WORD_COUNT
 (
MLC_LARGE_DATA_SIZE
 / 4)

	)

89 
	#MLC_LARGE_SPARE_WORD_COUNT
 (
MLC_LARGE_SPARE_SIZE
 / 4)

	)

99 
	#FLASHCLK_IRQ_MLC
 
	`BSP_BIT32
(5)

	)

100 
	#FLASHCLK_MLC_DMA_RNB
 
	`BSP_BIT32
(4)

	)

101 
	#FLASHCLK_MLC_DMA_INT
 
	`BSP_BIT32
(3)

	)

102 
	#FLASHCLK_SELECT_SLC
 
	`BSP_BIT32
(2)

	)

103 
	#FLASHCLK_MLC_CLK_ENABLE
 
	`BSP_BIT32
(1)

	)

104 
	#FLASHCLK_SLC_CLK_ENABLE
 
	`BSP_BIT32
(0)

	)

114 
	#MLC_TIME_WR_LOW
(
v®
è
	`BSP_FLD32
(v®, 0, 3)

	)

115 
	#MLC_TIME_WR_HIGH
(
v®
è
	`BSP_FLD32
(v®, 4, 7)

	)

116 
	#MLC_TIME_RD_LOW
(
v®
è
	`BSP_FLD32
(v®, 8, 11)

	)

117 
	#MLC_TIME_RD_HIGH
(
v®
è
	`BSP_FLD32
(v®, 12, 15)

	)

118 
	#MLC_TIME_NAND_TA
(
v®
è
	`BSP_FLD32
(v®, 16, 18)

	)

119 
	#MLC_TIME_BUSY_DELAY
(
v®
è
	`BSP_FLD32
(v®, 19, 23)

	)

120 
	#MLC_TIME_TCEA_DELAY
(
v®
è
	`BSP_FLD32
(v®, 24, 25)

	)

130 
	#MLC_UNLOCK_PROT
 0xa25e

	)

140 
	#MLC_ISR_DECODER_FAILURE
 
	`BSP_BIT32
(6)

	)

141 
	#MLC_ISR_SYMBOL_ERRORS
(
»g
è
	`BSP_FLD32GET
Ôeg, 4, 5)

	)

142 
	#MLC_ISR_ERRORS_DETECTED
 
	`BSP_BIT32
(3)

	)

143 
	#MLC_ISR_ECC_READY
 
	`BSP_BIT32
(2)

	)

144 
	#MLC_ISR_CONTROLLER_READY
 
	`BSP_BIT32
(1)

	)

145 
	#MLC_ISR_NAND_READY
 
	`BSP_BIT32
(0)

	)

155 
	#MLC_ICR_SOFT_WRITE_PROT
 
	`BSP_BIT32
(3)

	)

156 
	#MLC_ICR_LARGE_PAGES
 
	`BSP_BIT32
(2)

	)

157 
	#MLC_ICR_ADDR_WORD_COUNT_4_5
 
	`BSP_BIT32
(1)

	)

158 
	#MLC_ICR_IO_BUS_16
 
	`BSP_BIT32
(0)

	)

168 
	#MLC_ECC_AUTO_ENC_PROGRAM
 
	`BSP_BIT32
(8)

	)

178 
	#NAND_STATUS_ERROR
 (1U << 0)

	)

179 
	#NAND_STATUS_READY
 (1U << 6)

	)

180 
	#NAND_STATUS_NOT_PROTECTED
 (1U << 7)

	)

188 
ut32_t
 
æags
;

190 
ut32_t
 
block_couÁ
;

195 
ut32_t
 
time
;

196 } 
	tÍc32xx_mlc_cÚfig
;

202 
	#MLC_SMALL_PAGES
 0x1U

	)

208 
	#MLC_MANY_ADDRESS_CYCLES
 0x2U

	)

215 
	#MLC_NORMAL_BLOCKS
 0x4U

	)

220 
	#MLC_IO_WIDTH_16_BIT
 0x8U

	)

225 
Íc32xx_mlc_
(cÚ¡ 
Íc32xx_mlc_cÚfig
 *
cfg
);

227 
ut32_t
 
Íc32xx_mlc_·ge_size
();

229 
ut32_t
 
Íc32xx_mlc_·ges_³r_block
();

231 
ut32_t
 
Íc32xx_mlc_block_couÁ
();

233 
ut32_t
 
Íc32xx_mlc_io_width
();

235 
Íc32xx_mlc_wre_´ÙeùiÚ
(

236 
ut32_t
 
·ge_dex_low
,

237 
ut32_t
 
·ge_dex_high


240 
Íc32xx_mlc_»ad_id
(
ut8_t
 *
id
, 
size_t
 
n
);

255 
¹ems_¡©us_code
 
Íc32xx_mlc_»ad_·ge
(

256 
ut32_t
 
·ge_dex
,

257 *
d©a
,

258 *
¥¬e
,

259 
ut32_t
 *
symbÞ_rÜ_couÁ


278 
¹ems_¡©us_code
 
Íc32xx_mlc_is_v®id_block
(
ut32_t
 
block_dex
);

287 
¹ems_¡©us_code
 
Íc32xx_mlc_a£_block
(
ut32_t
 
block_dex
);

302 
¹ems_¡©us_code
 
Íc32xx_mlc_a£_block_§ã
(
ut32_t
 
block_dex
);

312 
¹ems_¡©us_code
 
Íc32xx_mlc_a£_block_§ã_3
(

313 
ut32_t
 
block_dex
,

314 
ut32_t
 
·ge_beg
,

315 
ut32_t
 
·ge_d


324 
Íc32xx_mlc_zo_·ges
(
ut32_t
 
·ge_beg
, ut32_
·ge_d
);

336 
¹ems_¡©us_code
 
Íc32xx_mlc_wre_·ge_wh_ecc
(

337 
ut32_t
 
·ge_dex
,

338 cÚ¡ *
d©a
,

339 cÚ¡ *
¥¬e


352 
¹ems_¡©us_code
 
Íc32xx_mlc_wre_blocks
(

353 
ut32_t
 
block_beg
,

354 
ut32_t
 
block_d
,

355 cÚ¡ *
¤c
,

356 
size_t
 
¤c_size
,

357 
ut32_t
 
·ge_bufãr
 [
MLC_LARGE_DATA_WORD_COUNT
]

368 
boÞ
 (*
	tÍc32xx_mlc_»ad_´oûss
)(

369 *
	t´oûss_¬g
,

370 
	tut32_t
 
	t·ge_dex
,

371 
	tut32_t
 
	t·ge_size
,

372 
	tut32_t
 
	t·ge_d©a
 [
MLC_LARGE_DATA_WORD_COUNT
],

373 
	tut32_t
 
	t·ge_¥¬e
 [
MLC_LARGE_SPARE_WORD_COUNT
]

386 
¹ems_¡©us_code
 
Íc32xx_mlc_»ad_blocks
(

387 
ut32_t
 
block_beg
,

388 
ut32_t
 
block_d
,

389 
Íc32xx_mlc_»ad_´oûss
 
´oûss
,

390 *
´oûss_¬g
,

391 
ut32_t
 
·ge_bufãr_0
 [
MLC_LARGE_DATA_WORD_COUNT
],

392 
ut32_t
 
·ge_bufãr_1
 [
MLC_LARGE_DATA_WORD_COUNT
]

407 
le
 
boÞ
 
Íc32xx_mlc_is_bad_·ge
(cÚ¡ 
ut32_t
 *
¥¬e
)

409 
ut32_t
 
f¡_by_mask
 = 0x000000ff;

410 
ut32_t
 
sixth_by_mask
 = 0x0000ff00;

412  (
¥¬e
 [0] & 
f¡_by_mask
) != first_byte_mask

413 || (
¥¬e
 [1] & 
sixth_by_mask
) != sixth_byte_mask;

418 #ifdeà
__ýlu¥lus


	@src/lib/libbsp/arm/lpc32xx/include/tm27.h

22 #iâdeà
_RTEMS_TMTEST27


26 #iâdeà
__tm27_h


27 
	#__tm27_h


	)

29 
	~<as£¹.h
>

31 
	~<¹ems.h
>

33 
	~<b¥/Íc32xx.h
>

34 
	~<b¥/q.h
>

35 
	~<b¥/q-gic.h
>

37 
	#MUST_WAIT_FOR_INTERRUPT
 1

	)

39 
In¡®l_tm27_veùÜ
((*
hªdËr
)(
¹ems_veùÜ_numb
))

41 
¹ems_¡©us_code
 
sc
 = 
RTEMS_SUCCESSFUL
;

43 
LPC32XX_SW_INT
 = 0;

45 
sc
 = 
	`¹ems_¼u±_hªdËr_¡®l
(

46 
LPC32XX_IRQ_SW
,

48 
RTEMS_INTERRUPT_UNIQUE
,

49 (
¹ems_¼u±_hªdËr
è
hªdËr
,

50 
NULL


52 
	`as£¹
(
sc
 =ð
RTEMS_SUCCESSFUL
);

53 
	}
}

55 
	$Cau£_tm27_
()

57 
LPC32XX_SW_INT
 = 0x1;

58 
	}
}

60 
	$CË¬_tm27_
()

62 
LPC32XX_SW_INT
 = 0;

63 
	`Íc32xx_q_£t_´iÜy
(
LPC32XX_IRQ_SW
, 
LPC32XX_IRQ_PRIORITY_LOWEST
);

64 
	}
}

66 
	$Low_tm27_
()

68 
	`b¥_¼u±_veùÜ_abË
(
LPC32XX_IRQ_SW
);

69 
	`Íc32xx_q_£t_´iÜy
(
LPC32XX_IRQ_SW
, 
LPC32XX_IRQ_PRIORITY_HIGHEST
);

70 
	}
}

	@src/lib/libbsp/arm/lpc32xx/irq/irq.c

22 
	~<¹ems/scÜe/¬mv4.h
>

24 
	~<b¥.h
>

25 
	~<b¥/q.h
>

26 
	~<b¥/q-gic.h
>

27 
	~<b¥/Íc32xx.h
>

28 
	~<b¥/lk-symbÞs.h
>

29 
	~<b¥/mmu.h
>

36 
	#LPC32XX_MIC_STATUS_MASK
 (~0x3U)

	)

40 
ut32_t
 
	mmic
;

41 
ut32_t
 
	msic_1
;

42 
ut32_t
 
	msic_2
;

43 } 
	mfld
;

44 
ut32_t
 
	mflds_bË
 [
LPC32XX_IRQ_MODULE_COUNT
];

45 } 
	tÍc32xx_q_flds
;

47 
ut8_t
 
	gÍc32xx_q_´iÜy_bË
 [
LPC32XX_IRQ_COUNT
];

49 
Íc32xx_q_flds
 
	gÍc32xx_q_´iÜy_masks
 [
LPC32XX_IRQ_PRIORITY_COUNT
];

51 
Íc32xx_q_flds
 
	gÍc32xx_q_abË
;

53 
le
 
boÞ
 
	$Íc32xx_q_is_v®id
(
¹ems_veùÜ_numb
 
veùÜ
)

55  
veùÜ
 <ð
BSP_INTERRUPT_VECTOR_MAX
;

56 
	}
}

58 
le
 
boÞ
 
	$Íc32xx_q_´iÜy_is_v®id
(
´iÜy
)

60  
´iÜy
 <ð
LPC32XX_IRQ_PRIORITY_LOWEST
;

61 
	}
}

63 
	#LPC32XX_IRQ_BIT_OPS_DEFINE
 \

64 
b
 = 
dex
 & 0x1fU; \

65 
moduË
 = 
dex
 >> 5

	)

67 
	#LPC32XX_IRQ_BIT_OPS_FOR_REG_DEFINE
 \

68 
LPC32XX_IRQ_BIT_OPS_DEFINE
; \

69 
moduË_off£t
 = 
moduË
 << 14; \

70 vÞ©
ut32_t
 *
»g
 = (volatile uint32_t *) \

71 ((vÞ©*è&
Íc32xx
.
mic
 + 
moduË_off£t
 + 
»gi¡_off£t
)

	)

73 
	#LPC32XX_IRQ_OFFSET_ER
 0U

	)

74 
	#LPC32XX_IRQ_OFFSET_RSR
 4U

	)

75 
	#LPC32XX_IRQ_OFFSET_SR
 8U

	)

76 
	#LPC32XX_IRQ_OFFSET_APR
 12U

	)

77 
	#LPC32XX_IRQ_OFFSET_ATR
 16U

	)

78 
	#LPC32XX_IRQ_OFFSET_ITR
 20U

	)

80 
le
 
boÞ
 
	$Íc32xx_q_is_b_£t__»gi¡
(
dex
, 
»gi¡_off£t
)

82 
LPC32XX_IRQ_BIT_OPS_FOR_REG_DEFINE
;

84  *
»g
 & (1U << 
b
);

85 
	}
}

87 
le
 
	$Íc32xx_q_£t_b__»gi¡
(
dex
, 
»gi¡_off£t
)

89 
LPC32XX_IRQ_BIT_OPS_FOR_REG_DEFINE
;

91 *
»g
 |ð1U << 
b
;

92 
	}
}

94 
le
 
	$Íc32xx_q_þr_b__»gi¡
(
dex
, 
»gi¡_off£t
)

96 
LPC32XX_IRQ_BIT_OPS_FOR_REG_DEFINE
;

98 *
»g
 &ð~(1U << 
b
);

99 
	}
}

101 
le
 
	$Íc32xx_q_£t_b__fld
(
dex
, 
Íc32xx_q_flds
 *
flds
)

103 
LPC32XX_IRQ_BIT_OPS_DEFINE
;

105 
flds
->
flds_bË
 [
moduË
] |ð1U << 
b
;

106 
	}
}

108 
le
 
	$Íc32xx_q_þr_b__fld
(
dex
, 
Íc32xx_q_flds
 *
flds
)

110 
LPC32XX_IRQ_BIT_OPS_DEFINE
;

112 
flds
->
flds_bË
 [
moduË
] &ð~(1U << 
b
);

113 
	}
}

115 
le
 
	$Íc32xx_q_g_dex
(
ut32_t
 
v®
)

117 
ARM_SWITCH_REGISTERS
;

119 
__asm__
 volatile (

120 
ARM_SWITCH_TO_ARM


123 
ARM_SWITCH_BACK


124 : [
v®
] "ô" (v®è
ARM_SWITCH_ADDITIONAL_OUTPUT


125 : "[v®]" (
v®
)

128  
v®
;

129 
	}
}

131 
	$Íc32xx_q_£t_´iÜy
(
¹ems_veùÜ_numb
 
veùÜ
, 
´iÜy
)

133 ià(
	`Íc32xx_q_is_v®id
(
veùÜ
)) {

134 
¹ems_¼u±_Ëv
 
Ëv
;

135 
i
 = 0;

137 ià(
´iÜy
 > 
LPC32XX_IRQ_PRIORITY_LOWEST
) {

138 
´iÜy
 = 
LPC32XX_IRQ_PRIORITY_LOWEST
;

141 
Íc32xx_q_´iÜy_bË
 [
veùÜ
] = (
ut8_t
è
´iÜy
;

143 
i
 = 
LPC32XX_IRQ_PRIORITY_HIGHEST
; i <ð
´iÜy
; ++i) {

144 
	`¹ems_¼u±_di§bË
(
Ëv
);

145 
	`Íc32xx_q_þr_b__fld
(
veùÜ
, &
Íc32xx_q_´iÜy_masks
 [
i
]);

146 
	`¹ems_¼u±_abË
(
Ëv
);

149 
i
 = 
´iÜy
 + 1; i <ð
LPC32XX_IRQ_PRIORITY_LOWEST
; ++i) {

150 
	`¹ems_¼u±_di§bË
(
Ëv
);

151 
	`Íc32xx_q_£t_b__fld
(
veùÜ
, &
Íc32xx_q_´iÜy_masks
 [
i
]);

152 
	`¹ems_¼u±_abË
(
Ëv
);

155 
	}
}

157 
	$Íc32xx_q_g_´iÜy
(
¹ems_veùÜ_numb
 
veùÜ
)

159 ià(
	`Íc32xx_q_is_v®id
(
veùÜ
)) {

160  
Íc32xx_q_´iÜy_bË
 [
veùÜ
];

162  
LPC32XX_IRQ_PRIORITY_LOWEST
;

164 
	}
}

166 
	$Íc32xx_q_£t_aùiv©iÚ_pÞ¬y
(
¹ems_veùÜ_numb
 
veùÜ
, 
Íc32xx_q_aùiv©iÚ_pÞ¬y
 
aùiv©iÚ_pÞ¬y
)

168 ià(
	`Íc32xx_q_is_v®id
(
veùÜ
)) {

169 
¹ems_¼u±_Ëv
 
Ëv
;

171 
	`¹ems_¼u±_di§bË
(
Ëv
);

172 ià(
aùiv©iÚ_pÞ¬y
 =ð
LPC32XX_IRQ_ACTIVE_HIGH_OR_RISING_EDGE
) {

173 
	`Íc32xx_q_£t_b__»gi¡
(
veùÜ
, 
LPC32XX_IRQ_OFFSET_APR
);

175 
	`Íc32xx_q_þr_b__»gi¡
(
veùÜ
, 
LPC32XX_IRQ_OFFSET_APR
);

177 
	`¹ems_¼u±_abË
(
Ëv
);

179 
	}
}

181 
Íc32xx_q_aùiv©iÚ_pÞ¬y
 
	$Íc32xx_q_g_aùiv©iÚ_pÞ¬y
(
¹ems_veùÜ_numb
 
veùÜ
)

183 ià(
	`Íc32xx_q_is_v®id
(
veùÜ
)) {

184 ià(
	`Íc32xx_q_is_b_£t__»gi¡
(
veùÜ
, 
LPC32XX_IRQ_OFFSET_APR
)) {

185  
LPC32XX_IRQ_ACTIVE_HIGH_OR_RISING_EDGE
;

187  
LPC32XX_IRQ_ACTIVE_LOW_OR_FALLING_EDGE
;

190  
LPC32XX_IRQ_ACTIVE_LOW_OR_FALLING_EDGE
;

192 
	}
}

194 
	$Íc32xx_q_£t_aùiv©iÚ_ty³
(
¹ems_veùÜ_numb
 
veùÜ
, 
Íc32xx_q_aùiv©iÚ_ty³
 
aùiv©iÚ_ty³
)

196 ià(
	`Íc32xx_q_is_v®id
(
veùÜ
)) {

197 
¹ems_¼u±_Ëv
 
Ëv
;

199 
	`¹ems_¼u±_di§bË
(
Ëv
);

200 ià(
aùiv©iÚ_ty³
 =ð
LPC32XX_IRQ_EDGE_SENSITIVE
) {

201 
	`Íc32xx_q_£t_b__»gi¡
(
veùÜ
, 
LPC32XX_IRQ_OFFSET_ATR
);

203 
	`Íc32xx_q_þr_b__»gi¡
(
veùÜ
, 
LPC32XX_IRQ_OFFSET_ATR
);

205 
	`¹ems_¼u±_abË
(
Ëv
);

207 
	}
}

209 
Íc32xx_q_aùiv©iÚ_ty³
 
	$Íc32xx_q_g_aùiv©iÚ_ty³
(
¹ems_veùÜ_numb
 
veùÜ
)

211 ià(
	`Íc32xx_q_is_v®id
(
veùÜ
)) {

212 ià(
	`Íc32xx_q_is_b_£t__»gi¡
(
veùÜ
, 
LPC32XX_IRQ_OFFSET_ATR
)) {

213  
LPC32XX_IRQ_EDGE_SENSITIVE
;

215  
LPC32XX_IRQ_LEVEL_SENSITIVE
;

218  
LPC32XX_IRQ_LEVEL_SENSITIVE
;

220 
	}
}

222 
	$b¥_¼u±_di¥©ch
()

224 
ut32_t
 
¡©us
 = 
Íc32xx
.
mic
.
¤
 & 
LPC32XX_MIC_STATUS_MASK
;

225 
ut32_t
 
_mic
 = 
Íc32xx
.
mic
.

;

226 
ut32_t
 
_sic_1
 = 
Íc32xx
.
sic_1
.

;

227 
ut32_t
 
_sic_2
 = 
Íc32xx
.
sic_2
.

;

228 
ut32_t
 
p¤
 = 0;

229 
Íc32xx_q_flds
 *
masks
 = 
NULL
;

230 
¹ems_veùÜ_numb
 
veùÜ
 = 0;

231 
´iÜy
 = 0;

233 ià(
¡©us
 != 0) {

234 
veùÜ
 = 
	`Íc32xx_q_g_dex
(
¡©us
);

236 
¡©us
 = 
Íc32xx
.
sic_1
.
¤
;

237 ià(
¡©us
 != 0) {

238 
veùÜ
 = 
	`Íc32xx_q_g_dex
(
¡©us
è+ 
LPC32XX_IRQ_MODULE_SIC_1
;

240 
¡©us
 = 
Íc32xx
.
sic_2
.
¤
;

241 ià(
¡©us
 != 0) {

242 
veùÜ
 = 
	`Íc32xx_q_g_dex
(
¡©us
è+ 
LPC32XX_IRQ_MODULE_SIC_2
;

249 
´iÜy
 = 
Íc32xx_q_´iÜy_bË
 [
veùÜ
];

251 
masks
 = &
Íc32xx_q_´iÜy_masks
 [
´iÜy
];

253 
Íc32xx
.
mic
.

 = 
_mic
 & 
masks
->
fld
.mic;

254 
Íc32xx
.
sic_1
.

 = 
_sic_1
 & 
masks
->
fld
.sic_1;

255 
Íc32xx
.
sic_2
.

 = 
_sic_2
 & 
masks
->
fld
.sic_2;

257 
p¤
 = 
	`_ARMV4_Stus_q_abË
();

259 
	`b¥_¼u±_hªdËr_di¥©ch
(
veùÜ
);

261 
	`_ARMV4_Stus_»¡Üe
(
p¤
);

263 
Íc32xx
.
mic
.

 = 
_mic
 & 
Íc32xx_q_abË
.
fld
.mic;

264 
Íc32xx
.
sic_1
.

 = 
_sic_1
 & 
Íc32xx_q_abË
.
fld
.sic_1;

265 
Íc32xx
.
sic_2
.

 = 
_sic_2
 & 
Íc32xx_q_abË
.
fld
.sic_2;

266 
	}
}

268 
¹ems_¡©us_code
 
	$b¥_¼u±_veùÜ_abË
(
¹ems_veùÜ_numb
 
veùÜ
)

270 
¹ems_¼u±_Ëv
 
Ëv
;

272 
	`¹ems_¼u±_di§bË
(
Ëv
);

273 
	`Íc32xx_q_£t_b__»gi¡
(
veùÜ
, 
LPC32XX_IRQ_OFFSET_ER
);

274 
	`Íc32xx_q_£t_b__fld
(
veùÜ
, &
Íc32xx_q_abË
);

275 
	`¹ems_¼u±_abË
(
Ëv
);

277  
RTEMS_SUCCESSFUL
;

278 
	}
}

280 
¹ems_¡©us_code
 
	$b¥_¼u±_veùÜ_di§bË
(
¹ems_veùÜ_numb
 
veùÜ
)

282 
¹ems_¼u±_Ëv
 
Ëv
;

284 
	`¹ems_¼u±_di§bË
(
Ëv
);

285 
	`Íc32xx_q_þr_b__fld
(
veùÜ
, &
Íc32xx_q_abË
);

286 
	`Íc32xx_q_þr_b__»gi¡
(
veùÜ
, 
LPC32XX_IRQ_OFFSET_ER
);

287 
	`¹ems_¼u±_abË
(
Ëv
);

289  
RTEMS_SUCCESSFUL
;

290 
	}
}

292 
Íc32xx_£t_exû±iÚ_hªdËr
(

293 
Arm_symbÞic_exû±iÚ_Çme
 
exû±iÚ
,

294 (*
hªdËr
)()

297 ià((è
exû±iÚ
 < 
MAX_EXCEPTIONS
) {

298 
ut32_t
 *
bË
 = (ut32_*è
b¥_veùÜ_bË_beg
 + 
MAX_EXCEPTIONS
;

300 
bË
 [
exû±iÚ
] = (
ut32_t
è
hªdËr
;

302 #iâdeà
LPC32XX_DISABLE_MMU


303 
	`¹ems_ÿche_æush_muÉË_d©a_les
(
bË
, 64);

304 
	`¹ems_ÿche_v®id©e_muÉË_¡ruùiÚ_les
(
NULL
, 64);

307 
	}
}

309 
¹ems_¡©us_code
 
	$b¥_¼u±_çcy_lize
()

311 
size_t
 
i
 = 0;

314 
i
 = 0; i < 
LPC32XX_IRQ_COUNT
; ++i) {

315 
Íc32xx_q_´iÜy_bË
 [
i
] = 
LPC32XX_IRQ_PRIORITY_LOWEST
;

319 
i
 = 0; i < 
LPC32XX_IRQ_PRIORITY_COUNT
; ++i) {

320 
Íc32xx_q_´iÜy_masks
 [
i
].
fld
.
mic
 = 0xc0000003;

324 
Íc32xx_q_abË
.
fld
.
sic_2
 = 0x0;

325 
Íc32xx_q_abË
.
fld
.
sic_1
 = 0x0;

326 
Íc32xx_q_abË
.
fld
.
mic
 = 0xc0000003;

327 
Íc32xx
.
sic_1
.

 = 0x0;

328 
Íc32xx
.
sic_2
.

 = 0x0;

329 
Íc32xx
.
mic
.

 = 0xc0000003;

332 
Íc32xx
.
mic
.
r
 = 0x0;

333 
Íc32xx
.
sic_1
.
r
 = 0x0;

334 
Íc32xx
.
sic_2
.
r
 = 0x0;

337 
Íc32xx
.
mic
.
­r
 = 0x3ff0efe0;

338 
Íc32xx
.
sic_1
.
­r
 = 0xfbd27184;

339 
Íc32xx
.
sic_2
.
­r
 = 0x801810c0;

342 
Íc32xx
.
mic
.
©r
 = 0x0;

343 
Íc32xx
.
sic_1
.
©r
 = 0x26000;

344 
Íc32xx
.
sic_2
.
©r
 = 0x0;

346 
	`Íc32xx_£t_exû±iÚ_hªdËr
(
ARM_EXCEPTION_IRQ
, 
_ARMV4_Exû±iÚ_¼u±
);

348  
RTEMS_SUCCESSFUL
;

349 
	}
}

	@src/lib/libbsp/arm/lpc32xx/misc/boot.c

22 
	~<¡rg.h
>

24 
	~<b¥/boÙ.h
>

26 
	$Íc32xx_£tup_boÙ_block
(

27 
Íc32xx_boÙ_block
 *
boÙ_block
,

28 
ut8_t
 
iü
,

29 
ut8_t
 
·ge_couÁ


32 
	`mem£t
(
boÙ_block
, 0, (*boot_block));

34 ++
·ge_couÁ
;

36 
boÙ_block
->
fld
.
d0
 = 
iü
;

37 
boÙ_block
->
fld
.
d2
 = 
iü
;

38 
boÙ_block
->
fld
.
d4
 = 
·ge_couÁ
;

39 
boÙ_block
->
fld
.
d6
 = 
·ge_couÁ
;

40 
boÙ_block
->
fld
.
d8
 = 
·ge_couÁ
;

41 
boÙ_block
->
fld
.
d10
 = 
·ge_couÁ
;

43 
iü
 = (
ut8_t
) ~(() icr);

44 
·ge_couÁ
 = (
ut8_t
) ~(()age_count);

46 
boÙ_block
->
fld
.
d1
 = 
iü
;

47 
boÙ_block
->
fld
.
d3
 = 
iü
;

48 
boÙ_block
->
fld
.
d5
 = 
·ge_couÁ
;

49 
boÙ_block
->
fld
.
d7
 = 
·ge_couÁ
;

50 
boÙ_block
->
fld
.
d9
 = 
·ge_couÁ
;

51 
boÙ_block
->
fld
.
d11
 = 
·ge_couÁ
;

53 
boÙ_block
->
fld
.
d12
 = 0xaa;

54 
	}
}

56 
	$Íc32xx_£t_boÙ_block_bad
(

57 
Íc32xx_boÙ_block
 *
boÙ_block


60 
boÙ_block
->
fld
.
d12
 = 0;

61 
	}
}

	@src/lib/libbsp/arm/lpc32xx/misc/emc.c

22 
	~<b¥/emc.h
>

24 
	~<b¥.h
>

25 
	~<b¥/mmu.h
>

27 vÞ©
Íc_emc
 *cÚ¡ 
	gemc
 = &
Íc32xx
.
emc
;

29 vÞ©
Íc32xx_emc_ahb
 *cÚ¡ 
	gemc_ahb
 = &
Íc32xx
.
emc_ahb
 [0];

31 
	$dyÇmic_
(cÚ¡ 
Íc32xx_emc_dyÇmic_cÚfig
 *
cfg
)

33 
ut32_t
 
ch_beg
 = 
LPC32XX_BASE_EMC_DYCS_0
;

34 
ut32_t
 
dyÇmiccÚÞ
 = (
cfg
->
cÚÞ
 | 
EMC_DYN_CTRL_CE
 | 
EMC_DYN_CTRL_CS
)

35 & ~
EMC_DYN_CTRL_I_MASK
;

36 
size_t
 
i
 = 0;

38 
LPC32XX_SDRAMCLK_CTRL
 = 
cfg
->
sd¿mþk_ù¾
;

40 
emc
->
dyÇmiüdcÚfig
 = 
cfg
->
»adcÚfig
;

43 
emc
->
dyÇmiù½
 = 
cfg
->
p
;

44 
emc
->
dyÇmiù¿s
 = 
cfg
->
as
;

45 
emc
->
dyÇmiù¤ex
 = 
cfg
->
t¤ex
;

46 
emc
->
dyÇmiùwr
 = 
cfg
->
twr
;

47 
emc
->
dyÇmiùrc
 = 
cfg
->
c
;

48 
emc
->
dyÇmiùrfc
 = 
cfg
->
fc
;

49 
emc
->
dyÇmiùx¤
 = 
cfg
->
tx¤
;

50 
emc
->
dyÇmiù¼d
 = 
cfg
->
rd
;

51 
emc
->
dyÇmiùmrd
 = 
cfg
->
tmrd
;

52 
emc
->
dyÇmiùcdÌ
 = 
cfg
->
tcdÌ
;

53 
i
 = 0; i < 
EMC_DYN_CHIP_COUNT
; ++i) {

54 ià(
cfg
->
ch
 [
i
].
size
 != 0) {

55 
emc
->
dyÇmic
 [
i
].
cÚfig
 = 
cfg
->
ch
 [i].config;

56 
emc
->
dyÇmic
 [
i
].
¿sÿs
 = 
cfg
->
ch
 [i].rascas;

61 
emc
->
dyÇmiccÚÞ
 = dyÇmiccÚÞ | 
EMC_DYN_CTRL_I_NOP
;

62 
	`Íc32xx_miüo_£cÚds_day
(
cfg
->
nÝ_time__us
);

65 
emc
->
dyÇmiccÚÞ
 = dyÇmiccÚÞ | 
EMC_DYN_CTRL_I_PALL
;

66 
emc
->
dyÇmiüeäesh
 = 1;

68 
	`Íc32xx_miüo_£cÚds_day
(10);

71 
emc
->
dyÇmiüeäesh
 = 
cfg
->
»äesh
;

73 
	`Íc32xx_miüo_£cÚds_day
(16);

76 
i
 = 0; i < 
EMC_DYN_CHIP_COUNT
; ++i) {

77 ià(
cfg
->
ch
 [
i
].
size
 != 0) {

78 
	`Íc32xx_£t_ª¦©iÚ_bË_s
(

79 (*è
ch_beg
,

80 (*è(
ch_beg
 + 
cfg
->
ch
 [
i
].
size
),

81 
LPC32XX_MMU_READ_WRITE


83 
emc
->
dyÇmiccÚÞ
 = dyÇmiccÚÞ | 
EMC_DYN_CTRL_I_MODE
;

84 *(vÞ©
ut32_t
 *)(
ch_beg
 + 
cfg
->
ch
 [
i
].
mode
);

85 
emc
->
dyÇmiccÚÞ
 = dyÇmiccÚÞ | 
EMC_DYN_CTRL_I_MODE
;

86 *(vÞ©
ut32_t
 *)(
ch_beg
 + 
cfg
->
ch
 [
i
].
extmode
);

88 
ch_beg
 += 0x20000000;

91 
emc
->
dyÇmiccÚÞ
 = 
cfg
->
cÚÞ
;

92 
	}
}

94 
	$Íc32xx_emc_
(cÚ¡ 
Íc32xx_emc_dyÇmic_cÚfig
 *
dyn_cfg
)

97 
emc_ahb
 [0].
cÚÞ
 = 
EMC_AHB_PORT_BUFF_EN
;

98 
emc_ahb
 [3].
cÚÞ
 = 
EMC_AHB_PORT_BUFF_EN
;

99 
emc_ahb
 [4].
cÚÞ
 = 
EMC_AHB_PORT_BUFF_EN
;

102 
emc_ahb
 [0].
timeout
 = 
	`EMC_AHB_TIMEOUT
(32);

103 
emc_ahb
 [3].
timeout
 = 
	`EMC_AHB_TIMEOUT
(32);

104 
emc_ahb
 [4].
timeout
 = 
	`EMC_AHB_TIMEOUT
(32);

107 
emc
->
cÚÞ
 = 
EMC_CTRL_E
,

108 
emc
->
cÚfig
 = 0;

110 
	`dyÇmic_
(
dyn_cfg
);

111 
	}
}

	@src/lib/libbsp/arm/lpc32xx/misc/i2c.c

23 
	~<¹ems.h
>

25 
	~<b¥.h
>

26 
	~<b¥/i2c.h
>

28 
	$Íc32xx_i2c_»£t
(vÞ©
Íc32xx_i2c
 *
i2c
)

30 
i2c
->
ù¾
 = 
I2C_CTRL_RESET
;

31 
	}
}

33 
¹ems_¡©us_code
 
	$Íc32xx_i2c_
(

34 vÞ©
Íc32xx_i2c
 *
i2c
,

35 
þock__hz


38 
ut32_t
 
i2cþk
 = 0;

40 ià(
i2c
 =ð&
Íc32xx
.
i2c_1
) {

41 
i2cþk
 |ð
I2CCLK_1_EN
 | 
I2CCLK_1_HIGH_DRIVE
;

42 } ià(
i2c
 =ð&
Íc32xx
.
i2c_2
) {

43 
i2cþk
 |ð
I2CCLK_2_EN
 | 
I2CCLK_2_HIGH_DRIVE
;

45  
RTEMS_INVALID_ID
;

48 
LPC32XX_I2CCLK_CTRL
 |ð
i2cþk
;

50 
	`Íc32xx_i2c_»£t
(
i2c
);

52  
	`Íc32xx_i2c_þock
(
i2c
, 
þock__hz
);

53 
	}
}

55 
¹ems_¡©us_code
 
	$Íc32xx_i2c_þock
(

56 vÞ©
Íc32xx_i2c
 *
i2c
,

57 
þock__hz


60 
ut32_t
 
þk_div
 = 
	`Íc32xx_hþk
(è/ 
þock__hz
;

61 
ut32_t
 
þk_lo
 = 0;

62 
ut32_t
 
þk_hi
 = 0;

64 
þock__hz
) {

66 
þk_lo
 = 
þk_div
 / 2;

69 
þk_lo
 = (64 * 
þk_div
) / 100;

72  
RTEMS_INVALID_CLOCK
;

75 
þk_hi
 = 
þk_div
 - 
þk_lo
;

77 
i2c
->
þk_lo
 = clk_lo;

78 
i2c
->
þk_hi
 = clk_hi;

80  
RTEMS_SUCCESSFUL
;

81 
	}
}

83 
¹ems_¡©us_code
 
	$wa_fÜ_ª§ùiÚ_dÚe
(vÞ©
Íc32xx_i2c
 *
i2c
)

85 
ut32_t
 
¡©
 = 0;

88 
¡©
 = 
i2c
->stat;

89 } (
¡©
 & 
I2C_STAT_TDI
) == 0);

91 ià((
¡©
 & 
I2C_STAT_TFE
) != 0) {

92 
i2c
->
¡©
 = 
I2C_STAT_TDI
;

94  
RTEMS_SUCCESSFUL
;

96 
	`Íc32xx_i2c_»£t
(
i2c
);

98  
RTEMS_IO_ERROR
;

100 
	}
}

102 
¹ems_¡©us_code
 
	$tx
(vÞ©
Íc32xx_i2c
 *
i2c
, 
ut32_t
 
d©a
)

104 
ut32_t
 
¡©
 = 0;

107 
¡©
 = 
i2c
->stat;

108 } (
¡©
 & (
I2C_STAT_TFE
 | 
I2C_STAT_TDI
)) == 0);

110 ià((
¡©
 & 
I2C_STAT_TDI
) == 0) {

111 
i2c
->
rx_Ü_tx
 = 
d©a
;

113  
RTEMS_SUCCESSFUL
;

115 
	`Íc32xx_i2c_»£t
(
i2c
);

117  
RTEMS_IO_ERROR
;

119 
	}
}

121 
¹ems_¡©us_code
 
	$Íc32xx_i2c_wre_¡¬t
(

122 vÞ©
Íc32xx_i2c
 *
i2c
,

123 
addr


126  
	`tx
(
i2c
, 
	`I2C_TX_ADDR
(
addr
è| 
I2C_TX_START
);

127 
	}
}

129 
¹ems_¡©us_code
 
	$Íc32xx_i2c_»ad_¡¬t
(

130 vÞ©
Íc32xx_i2c
 *
i2c
,

131 
addr


134  
	`tx
(
i2c
, 
	`I2C_TX_ADDR
(
addr
è| 
I2C_TX_START
 | 
I2C_TX_READ
);

135 
	}
}

137 
¹ems_¡©us_code
 
	$Íc32xx_i2c_wre_wh_ÝtiÚ®_¡Ý
(

138 vÞ©
Íc32xx_i2c
 *
i2c
,

139 cÚ¡ 
ut8_t
 *
out
,

140 
size_t
 
n
,

141 
boÞ
 
¡Ý


144 
¹ems_¡©us_code
 
sc
 = 
RTEMS_SUCCESSFUL
;

145 
size_t
 
i
 = 0;

147 
i
 = 0; i < 
n
 - 1 && 
sc
 =ð
RTEMS_SUCCESSFUL
; ++i) {

148 
sc
 = 
	`tx
(
i2c
, 
out
 [
i
]);

151 ià(
sc
 =ð
RTEMS_SUCCESSFUL
) {

152 
ut32_t
 
¡Ý_æag
 = 
¡Ý
 ? 
I2C_TX_STOP
 : 0;

154 
sc
 = 
	`tx
(
i2c
, 
out
 [
n
 - 1] | 
¡Ý_æag
);

157 ià(
¡Ý
 && 
sc
 =ð
RTEMS_SUCCESSFUL
) {

158 
sc
 = 
	`wa_fÜ_ª§ùiÚ_dÚe
(
i2c
);

161  
sc
;

162 
	}
}

164 
boÞ
 
	$ÿn_tx_fÜ_rx
(vÞ©
Íc32xx_i2c
 *
i2c
)

166  (
i2c
->
¡©
 & (
I2C_STAT_TFF
 | 
I2C_STAT_RFF
)) == 0;

167 
	}
}

169 
boÞ
 
	$ÿn_rx
(vÞ©
Íc32xx_i2c
 *
i2c
)

171  (
i2c
->
¡©
 & 
I2C_STAT_RFE
) == 0;

172 
	}
}

174 
¹ems_¡©us_code
 
	$Íc32xx_i2c_»ad_wh_ÝtiÚ®_¡Ý
(

175 vÞ©
Íc32xx_i2c
 *
i2c
,

176 
ut8_t
 *

,

177 
size_t
 
n
,

178 
boÞ
 
¡Ý


181 
¹ems_¡©us_code
 
sc
 = 
RTEMS_SUCCESSFUL
;

182 
size_t
 
Ï¡
 = 
n
 - 1;

183 
size_t
 
rx
 = 0;

184 
size_t
 
tx
 = 0;

186 ià(!
¡Ý
) {

187  
RTEMS_NOT_IMPLEMENTED
;

190 
rx
 <ð
Ï¡
) {

191 
tx
 < 
Ï¡
 && 
	`ÿn_tx_fÜ_rx
(
i2c
)) {

192 
i2c
->
rx_Ü_tx
 = 0;

193 ++
tx
;

196 ià(
tx
 =ð
Ï¡
 && 
	`ÿn_tx_fÜ_rx
(
i2c
)) {

197 
ut32_t
 
¡Ý_æag
 = 
¡Ý
 ? 
I2C_TX_STOP
 : 0;

199 
i2c
->
rx_Ü_tx
 = 
¡Ý_æag
;

200 ++
tx
;

203 
rx
 <ð
Ï¡
 && 
	`ÿn_rx
(
i2c
)) {

204 

 [
rx
] = (
ut8_t
è
i2c
->
rx_Ü_tx
;

205 ++
rx
;

209 ià(
¡Ý
) {

210 
sc
 = 
	`wa_fÜ_ª§ùiÚ_dÚe
(
i2c
);

213  
sc
;

214 
	}
}

216 
¹ems_¡©us_code
 
	$Íc32xx_i2c_wre_ªd_»ad
(

217 vÞ©
Íc32xx_i2c
 *
i2c
,

218 
addr
,

219 cÚ¡ 
ut8_t
 *
out
,

220 
size_t
 
out_size
,

221 
ut8_t
 *

,

222 
size_t
 
_size


225 
¹ems_¡©us_code
 
sc
 = 
RTEMS_SUCCESSFUL
;

227 ià(
out_size
 > 0) {

228 
boÞ
 
¡Ý
 = 
_size
 == 0;

230 
sc
 = 
	`Íc32xx_i2c_wre_¡¬t
(
i2c
, 
addr
);

231 ià(
sc
 !ð
RTEMS_SUCCESSFUL
) {

232  
sc
;

235 
sc
 = 
	`Íc32xx_i2c_wre_wh_ÝtiÚ®_¡Ý
(
i2c
, 
out
, 
out_size
, 
¡Ý
);

236 ià(
sc
 !ð
RTEMS_SUCCESSFUL
) {

237  
sc
;

241 ià(
_size
 > 0) {

242 
sc
 = 
	`Íc32xx_i2c_»ad_¡¬t
(
i2c
, 
addr
);

243 ià(
sc
 !ð
RTEMS_SUCCESSFUL
) {

244  
sc
;

247 
	`Íc32xx_i2c_»ad_wh_ÝtiÚ®_¡Ý
(
i2c
, 

, 
_size
, 
ue
);

250  
RTEMS_SUCCESSFUL
;

251 
	}
}

	@src/lib/libbsp/arm/lpc32xx/misc/idle-thread.c

23 
	~<b¥.h
>

25 
	~<libýu/¬m-ý15.h
>

27 *
	$b¥_idË_th»ad
(
u_t
 
¬g
)

29 
ue
) {

30 
	`¬m_ý15_wa_fÜ_¼u±
();

33  
NULL
;

34 
	}
}

	@src/lib/libbsp/arm/lpc32xx/misc/nand-mlc-erase-block-safe.c

24 
	~<b¥/Çnd-mlc.h
>

26 
	~<¡rg.h
>

28 
	~<b¥.h
>

30 
	$Íc32xx_mlc_zo_·ges
(
ut32_t
 
·ge_beg
, ut32_
·ge_d
)

32 
ut32_t
 
·ge
 = 0;

34 
·ge
 = 
·ge_beg
;ag< 
·ge_d
; ++page) {

35 
	`Íc32xx_mlc_wre_·ge_wh_ecc
(

36 
·ge
,

37 
Íc32xx_magic_zo_beg
,

38 
Íc32xx_magic_zo_beg


41 
	}
}

43 
¹ems_¡©us_code
 
	$is_v®id_·ge
(

44 
ut32_t
 
·ge_beg
,

45 
ut32_t
 
·ge_off£t


48 
¹ems_¡©us_code
 
sc
 = 
RTEMS_SUCCESSFUL
;

49 
ut32_t
 
¥¬e
 [
MLC_LARGE_SPARE_WORD_COUNT
];

51 
	`mem£t
(
¥¬e
, 0, 
MLC_LARGE_SPARE_SIZE
);

53 
sc
 = 
	`Íc32xx_mlc_»ad_·ge
(

54 
·ge_beg
 + 
·ge_off£t
,

55 
Íc32xx_magic_zo_beg
,

56 
¥¬e
,

57 
NULL


59 ià(
sc
 =ð
RTEMS_SUCCESSFUL
) {

60 ià(
	`Íc32xx_mlc_is_bad_·ge
(
¥¬e
)) {

61 
sc
 = 
RTEMS_INCORRECT_STATE
;

65  
sc
;

66 
	}
}

68 
¹ems_¡©us_code
 
	$is_v®id_block
(
ut32_t
 
·ge_beg
)

70 
¹ems_¡©us_code
 
sc
 = 
RTEMS_SUCCESSFUL
;

72 ià(
	`Íc32xx_mlc_·ge_size
(è=ð512 && 
	`Íc32xx_mlc_io_width
() == 8) {

73 
sc
 = 
	`is_v®id_·ge
(
·ge_beg
, 0);

74 ià(
sc
 =ð
RTEMS_SUCCESSFUL
) {

75 
sc
 = 
	`is_v®id_·ge
(
·ge_beg
, 1);

78 
sc
 = 
RTEMS_NOT_IMPLEMENTED
;

81  
sc
;

82 
	}
}

84 
¹ems_¡©us_code
 
	$Íc32xx_mlc_is_v®id_block
(
ut32_t
 
block_dex
)

86 
ut32_t
 
·ges_³r_block
 = 
	`Íc32xx_mlc_·ges_³r_block
();

87 
ut32_t
 
·ge_beg
 = 
block_dex
 * 
·ges_³r_block
;

89  
	`is_v®id_block
(
·ge_beg
);

90 
	}
}

92 
¹ems_¡©us_code
 
	$Íc32xx_mlc_a£_block_§ã_3
(

93 
ut32_t
 
block_dex
,

94 
ut32_t
 
·ge_beg
,

95 
ut32_t
 
·ge_d


98 
¹ems_¡©us_code
 
sc
 = 
RTEMS_SUCCESSFUL
;

100 
sc
 = 
	`is_v®id_block
(
·ge_beg
);

101 ià(
sc
 =ð
RTEMS_SUCCESSFUL
) {

102 
sc
 = 
	`Íc32xx_mlc_a£_block
(
block_dex
);

103 ià(
sc
 =ð
RTEMS_UNSATISFIED
) {

104 
	`Íc32xx_mlc_zo_·ges
(
·ge_beg
, 
·ge_d
);

108  
sc
;

109 
	}
}

111 
¹ems_¡©us_code
 
	$Íc32xx_mlc_a£_block_§ã
(
ut32_t
 
block_dex
)

113 
ut32_t
 
·ges_³r_block
 = 
	`Íc32xx_mlc_·ges_³r_block
();

114 
ut32_t
 
·ge_beg
 = 
block_dex
 * 
·ges_³r_block
;

115 
ut32_t
 
·ge_d
 = 
·ge_beg
 + 
·ges_³r_block
;

117  
	`Íc32xx_mlc_a£_block_§ã_3
(

118 
block_dex
,

119 
·ge_beg
,

120 
·ge_d


122 
	}
}

	@src/lib/libbsp/arm/lpc32xx/misc/nand-mlc-read-blocks.c

22 
	~<b¥/Çnd-mlc.h
>

24 
¹ems_¡©us_code
 
	$»ad_·ge
(

25 
ut32_t
 
f¡_·ge_of_block
,

26 
ut32_t
 
·ge
,

27 
ut32_t
 
·ge_d©a
 [
MLC_LARGE_DATA_WORD_COUNT
],

28 
ut32_t
 
·ge_¥¬e
 [
MLC_LARGE_SPARE_WORD_COUNT
]

31 
¹ems_¡©us_code
 
sc
 = 
RTEMS_SUCCESSFUL
;

32 
ut32_t
 
·ge_dex
 = 
f¡_·ge_of_block
 + 
·ge
;

33 
boÞ
 
possibË_bad_·ge
 = 
·ge
 == 0 ||age == 1;

35 ià(
possibË_bad_·ge
) {

36 
	`mem£t
(
·ge_¥¬e
, 0, 
MLC_LARGE_SPARE_SIZE
);

39 
sc
 = 
	`Íc32xx_mlc_»ad_·ge
(
·ge_dex
, 
·ge_d©a
, 
·ge_¥¬e
, 
NULL
);

40 ià(
possibË_bad_·ge
 && 
	`Íc32xx_mlc_is_bad_·ge
(
·ge_¥¬e
)) {

41  
RTEMS_UNSATISFIED
;

42 } ià(
sc
 =ð
RTEMS_SUCCESSFUL
) {

43  
RTEMS_SUCCESSFUL
;

45  
sc
;

47 
	}
}

49 
¹ems_¡©us_code
 
	$Íc32xx_mlc_»ad_blocks
(

50 
ut32_t
 
block_beg
,

51 
ut32_t
 
block_d
,

52 
Íc32xx_mlc_»ad_´oûss
 
´oûss
,

53 *
´oûss_¬g
,

54 
ut32_t
 
·ge_bufãr_0
 [
MLC_LARGE_DATA_WORD_COUNT
],

55 
ut32_t
 
·ge_bufãr_1
 [
MLC_LARGE_DATA_WORD_COUNT
]

58 
¹ems_¡©us_code
 
sc
 = 
RTEMS_SUCCESSFUL
;

59 
ut32_t
 
·ge_¥¬e_0
 [
MLC_LARGE_SPARE_WORD_COUNT
];

60 
ut32_t
 
·ge_¥¬e_1
 [
MLC_LARGE_SPARE_WORD_COUNT
];

61 
ut32_t
 
·ges_³r_block
 = 
	`Íc32xx_mlc_·ges_³r_block
();

62 
ut32_t
 
·ge_size
 = 
	`Íc32xx_mlc_·ge_size
();

63 
ut32_t
 
block
 = 0;

64 
ut32_t
 
f¡_·ge_of_block
 = 
block_beg
 * 
·ges_³r_block
;

67 
block
 = 
block_beg
;

68 
block
 !ð
block_d
;

69 ++
block
, 
f¡_·ge_of_block
 +ð
·ges_³r_block


71 
ut32_t
 
·ge
 = 0;

72 
boÞ
 
dÚe
 = 
çl£
;

74 
sc
 = 
	`»ad_·ge
(
f¡_·ge_of_block
, 0, 
·ge_bufãr_0
, 
·ge_¥¬e_0
);

75 ià(
sc
 =ð
RTEMS_UNSATISFIED
) {

77 } ià(
sc
 !ð
RTEMS_SUCCESSFUL
) {

78 
dÚe
;

81 
sc
 = 
	`»ad_·ge
(
f¡_·ge_of_block
, 1, 
·ge_bufãr_1
, 
·ge_¥¬e_1
);

82 ià(
sc
 =ð
RTEMS_UNSATISFIED
) {

84 } ià(
sc
 !ð
RTEMS_SUCCESSFUL
) {

85 
dÚe
;

88 
dÚe
 = (*
´oûss
)(

89 
´oûss_¬g
,

90 
f¡_·ge_of_block
 + 0,

91 
·ge_size
,

92 
·ge_bufãr_0
,

93 
·ge_¥¬e_0


95 ià(
dÚe
) {

96 
dÚe
;

99 
dÚe
 = (*
´oûss
)(

100 
´oûss_¬g
,

101 
f¡_·ge_of_block
 + 1,

102 
·ge_size
,

103 
·ge_bufãr_1
,

104 
·ge_¥¬e_1


106 ià(
dÚe
) {

107 
dÚe
;

110 
·ge
 = 2;ag< 
·ges_³r_block
; ++page) {

111 
sc
 = 
	`»ad_·ge
(
f¡_·ge_of_block
, 
·ge
, 
·ge_bufãr_1
, 
·ge_¥¬e_1
);

112 ià(
sc
 !ð
RTEMS_SUCCESSFUL
) {

113 
dÚe
;

116 
dÚe
 = (*
´oûss
)(

117 
´oûss_¬g
,

118 
f¡_·ge_of_block
 + 
·ge
,

119 
·ge_size
,

120 
·ge_bufãr_1
,

121 
·ge_¥¬e_1


123 ià(
dÚe
) {

124 
dÚe
;

129 
dÚe
:

131  
sc
;

132 
	}
}

	@src/lib/libbsp/arm/lpc32xx/misc/nand-mlc-write-blocks.c

23 
	~<b¥/Çnd-mlc.h
>

25 cÚ¡ 
ut32_t
 
	gÚes_¥¬e
 [
MLC_LARGE_SPARE_WORD_COUNT
] = {

44 
¹ems_¡©us_code
 
	$Íc32xx_mlc_wre_blocks
(

45 
ut32_t
 
block_beg
,

46 
ut32_t
 
block_d
,

47 cÚ¡ *
¤c
,

48 
size_t
 
¤c_size
,

49 
ut32_t
 *
·ge_d©a_bufãr


52 
¹ems_¡©us_code
 
sc
 = 
RTEMS_SUCCESSFUL
;

53 
ut32_t
 
·ges_³r_block
 = 
	`Íc32xx_mlc_·ges_³r_block
();

54 
ut32_t
 
block_couÁ
 = 
	`Íc32xx_mlc_block_couÁ
();

55 
ut32_t
 
·ge_size
 = 
	`Íc32xx_mlc_·ge_size
();

56 
ut32_t
 
block
 = 0;

57 cÚ¡ 
ut8_t
 *
cu¼t
 = 
¤c
;

58 cÚ¡ 
ut8_t
 *
Ï¡
 = 
cu¼t
;

59 cÚ¡ 
ut8_t
 *
d
 = 
cu¼t
 + 
¤c_size
;

61 ià(
block_beg
 > 
block_d
 || block_d > 
block_couÁ
) {

62  
RTEMS_INVALID_ID
;

65 
block
 = 
block_beg
; block !ð
block_d
; ++block) {

66 
ut32_t
 
·ge_beg
 = 
block
 * 
·ges_³r_block
;

67 
ut32_t
 
·ge_d
 = 
·ge_beg
 + 
·ges_³r_block
;

68 
ut32_t
 
·ge
 = 0;

70 
sc
 = 
	`Íc32xx_mlc_a£_block_§ã_3
(
block
, 
·ge_beg
, 
·ge_d
);

71 ià(
sc
 !ð
RTEMS_SUCCESSFUL
) {

75 
·ge
 = 
·ge_beg
;ag< 
·ge_d
; ++page) {

76 
u_t
 
»mad
 = (u_tè
d
 - (u_tè
cu¼t
;

77 
size_t
 
d
 = 
»mad
 < 
·ge_size
 ?emainder :age_size;

79 ià(
»mad
 > 0) {

80 
	`memýy
(
·ge_d©a_bufãr
, 
cu¼t
, 
d
);

81 
sc
 = 
	`Íc32xx_mlc_wre_·ge_wh_ecc
(

82 
·ge
,

83 
·ge_d©a_bufãr
,

84 
Úes_¥¬e


86 ià(
sc
 !ð
RTEMS_SUCCESSFUL
) {

87 
	`Íc32xx_mlc_a£_block
(
block
);

88 
	`Íc32xx_mlc_zo_·ges
(
·ge_beg
, 
·ge_d
);

89 
cu¼t
 = 
Ï¡
;

93 
cu¼t
 +ð
d
;

95 
dÚe
;

99 
Ï¡
 = 
cu¼t
;

102 
dÚe
:

104 ià(
cu¼t
 !ð
d
) {

105  
RTEMS_IO_ERROR
;

108  
RTEMS_SUCCESSFUL
;

109 
	}
}

	@src/lib/libbsp/arm/lpc32xx/misc/nand-mlc.c

23 
	~<b¥/Íc32xx.h
>

24 
	~<b¥/Çnd-mlc.h
>

26 vÞ©
Íc32xx_Çnd_mlc
 *cÚ¡ 
	gmlc
 = &
Íc32xx
.
Çnd_mlc
;

28 
ut32_t
 
	gmlc_æags
;

30 
ut32_t
 
	gmlc_block_couÁ
;

32 
ut32_t
 
	gmlc_·ge_couÁ
;

34 
boÞ
 
	$mlc_sm®l_·ges
()

36  (
mlc_æags
 & 
MLC_SMALL_PAGES
) != 0;

37 
	}
}

39 
boÞ
 
	$mlc_mªy_add»ss_cyþes
()

41  (
mlc_æags
 & 
MLC_MANY_ADDRESS_CYCLES
) != 0;

42 
	}
}

44 
boÞ
 
	$mlc_nÜm®_blocks
()

46  (
mlc_æags
 & 
MLC_NORMAL_BLOCKS
) != 0;

47 
	}
}

49 
ut32_t
 
	$Íc32xx_mlc_·ge_size
()

51 ià(
	`mlc_sm®l_·ges
()) {

56 
	}
}

58 
ut32_t
 
	$Íc32xx_mlc_·ges_³r_block
()

60 ià(
	`mlc_sm®l_·ges
()) {

63 ià(
	`mlc_nÜm®_blocks
()) {

69 
	}
}

71 
ut32_t
 
	$Íc32xx_mlc_block_couÁ
()

73  
mlc_block_couÁ
;

74 
	}
}

76 
ut32_t
 
	$Íc32xx_mlc_io_width
()

78 ià((
mlc_æags
 & 
MLC_IO_WIDTH_16_BIT
) == 0) {

83 
	}
}

85 
	$mlc_uÆock
()

87 
mlc
->
lock_´
 = 
MLC_UNLOCK_PROT
;

88 
	}
}

90 
	$mlc_wa
(
ut32_t
 
æags
)

92 (
mlc
->
i¤
 & 
æags
) != flags) {

95 
	}
}

97 
	$mlc_wa_uÁ_»ady
()

99 
	`mlc_wa
(
MLC_ISR_CONTROLLER_READY
 | 
MLC_ISR_NAND_READY
);

100 
	}
}

102 
	$mlc_»£t
()

104 
mlc
->
cmd
 = 0xff;

105 
	}
}

107 
ut32_t
 
	$mlc_¡©us
()

109 
	`mlc_wa_uÁ_»ady
();

110 
mlc
->
cmd
 = 0x70;

112  
mlc
->
d©a
.
w8
;

113 
	}
}

115 
boÞ
 
	$mlc_was_Ý©iÚ_sucûssful
()

117  (
	`mlc_¡©us
(è& (
NAND_STATUS_READY
 | 
NAND_STATUS_ERROR
))

118 =ð
NAND_STATUS_READY
;

119 
	}
}

121 
	$mlc_£t_block_add»ss
(
ut32_t
 
block_dex
)

123 ià(
	`mlc_sm®l_·ges
()) {

124 
mlc
->
addr
 = (
ut8_t
è(
block_dex
 << 5);

125 
mlc
->
addr
 = (
ut8_t
è(
block_dex
 >> 3);

126 ià(
	`mlc_mªy_add»ss_cyþes
()) {

127 
mlc
->
addr
 = (
ut8_t
è(
block_dex
 >> 11);

130 ià(
	`mlc_nÜm®_blocks
()) {

131 
mlc
->
addr
 = (
ut8_t
è(
block_dex
 << 6);

132 
mlc
->
addr
 = (
ut8_t
è(
block_dex
 >> 2);

133 ià(
	`mlc_mªy_add»ss_cyþes
()) {

134 
mlc
->
addr
 = (
ut8_t
è(
block_dex
 >> 10);

137 
mlc
->
addr
 = (
ut8_t
è(
block_dex
 << 7);

138 
mlc
->
addr
 = (
ut8_t
è(
block_dex
 >> 1);

139 ià(
	`mlc_mªy_add»ss_cyþes
()) {

140 
mlc
->
addr
 = (
ut8_t
è(
block_dex
 >> 9);

144 
	}
}

146 
	$mlc_£t_·ge_add»ss
(
ut32_t
 
·ge_dex
)

148 
mlc
->
addr
 = 0;

149 ià(
	`mlc_sm®l_·ges
()) {

150 
mlc
->
addr
 = (
ut8_t
è
·ge_dex
;

151 
mlc
->
addr
 = (
ut8_t
è(
·ge_dex
 >> 8);

152 ià(
	`mlc_mªy_add»ss_cyþes
()) {

153 
mlc
->
addr
 = (
ut8_t
è(
·ge_dex
 >> 16);

156 
mlc
->
addr
 = 0;

157 
mlc
->
addr
 = (
ut8_t
è
·ge_dex
;

158 
mlc
->
addr
 = (
ut8_t
è(
·ge_dex
 >> 8);

159 ià(
	`mlc_mªy_add»ss_cyþes
()) {

160 
mlc
->
addr
 = (
ut8_t
è(
·ge_dex
 >> 16);

163 
	}
}

165 
	$Íc32xx_mlc_
(cÚ¡ 
Íc32xx_mlc_cÚfig
 *
cfg
)

167 
ut32_t
 
iü
 = 0;

169 
mlc_æags
 = 
cfg
->
æags
;

170 
mlc_block_couÁ
 = 
cfg
->
block_couÁ
;

171 
mlc_·ge_couÁ
 = 
cfg
->
block_couÁ
 * 
	`Íc32xx_mlc_·ges_³r_block
();

174 
LPC32XX_FLASHCLK_CTRL
 = 
FLASHCLK_IRQ_MLC
 | 
FLASHCLK_MLC_CLK_ENABLE
;

177 
	`mlc_uÆock
();

178 
mlc
->
time
 = 
cfg
->time;

181 ià(!
	`mlc_sm®l_·ges
()) {

182 
iü
 |ð
MLC_ICR_LARGE_PAGES
;

184 ià(
	`mlc_mªy_add»ss_cyþes
()) {

185 
iü
 |ð
MLC_ICR_ADDR_WORD_COUNT_4_5
;

187 
	`mlc_uÆock
();

188 
mlc
->
iü
 = icr;

190 
	`mlc_»£t
();

191 
	}
}

193 
	$Íc32xx_mlc_wre_´ÙeùiÚ
(

194 
ut32_t
 
·ge_dex_low
,

195 
ut32_t
 
·ge_dex_high


198 
	`mlc_uÆock
();

199 
mlc
->
sw_wp_add_low
 = 
·ge_dex_low
;

200 
	`mlc_uÆock
();

201 
mlc
->
sw_wp_add_hig
 = 
·ge_dex_high
;

202 
	`mlc_uÆock
();

203 
mlc
->
iü
 |ð
MLC_ICR_SOFT_WRITE_PROT
;

204 
	}
}

206 
boÞ
 
	$is_wÜd_®igÃd
(cÚ¡ *
d©a
, cÚ¡ *
¥¬e
)

208  (((
u_t
è
d©a
è| ((u_tè
¥¬e
)) % 4 == 0;

209 
	}
}

211 
¹ems_¡©us_code
 
	$Íc32xx_mlc_»ad_·ge
(

212 
ut32_t
 
·ge_dex
,

213 *
d©a
,

214 *
¥¬e
,

215 
ut32_t
 *
symbÞ_rÜ_couÁ_±r


218 
¹ems_¡©us_code
 
sc
 = 
RTEMS_SUCCESSFUL
;

219 
size_t
 
sm®l_·ges_couÁ
 = 
	`mlc_sm®l_·ges
(è? 1 : 
MLC_SMALL_PAGES_PER_LARGE_PAGE
;

220 
size_t
 
¥
 = 0;

221 
size_t
 
i
 = 0;

222 
ut32_t
 
i¤
 = 0;

223 
ut32_t
 
symbÞ_rÜ_couÁ
 = 0xffffffff;

224 
boÞ
 
®igÃd
 = 
	`is_wÜd_®igÃd
(
d©a
, 
¥¬e
);

225 
ut8_t
 *
cu¼t_d©a
 = 
d©a
;

226 
ut8_t
 *
cu¼t_¥¬e
 = 
¥¬e
;

228 ià(
·ge_dex
 >ð
mlc_·ge_couÁ
) {

229  
RTEMS_INVALID_ID
;

232 
	`mlc_wa_uÁ_»ady
();

233 
mlc
->
cmd
 = 0x00;

234 ià(!
	`mlc_sm®l_·ges
()) {

235 
mlc
->
cmd
 = 0x30;

237 
	`mlc_£t_·ge_add»ss
(
·ge_dex
);

238 
	`mlc_wa
(
MLC_ISR_NAND_READY
);

240 
¥
 = 0; 
sc
 =ð
RTEMS_SUCCESSFUL
 && s°< 
sm®l_·ges_couÁ
; ++sp) {

241 
ut32_t
 *
®igÃd_d©a
 = (ut32_*è
cu¼t_d©a
;

242 
ut32_t
 *
®igÃd_¥¬e
 = (ut32_*è
cu¼t_¥¬e
;

244 
mlc
->
ecc_dec
 = 0;

246 ià(
®igÃd
) {

247 
i
 = 0; i < 
MLC_SMALL_DATA_WORD_COUNT
; ++i) {

248 
®igÃd_d©a
 [
i
] = 
mlc
->
d©a
.
w32
;

250 
i
 = 0; i < 
MLC_SMALL_SPARE_WORD_COUNT
; ++i) {

251 
®igÃd_¥¬e
 [
i
] = 
mlc
->
d©a
.
w32
;

254 
i
 = 0; i < 
MLC_SMALL_DATA_SIZE
; ++i) {

255 
cu¼t_d©a
 [
i
] = 
mlc
->
d©a
.
w8
;

257 
i
 = 0; i < 
MLC_SMALL_SPARE_SIZE
; ++i) {

258 
cu¼t_¥¬e
 [
i
] = 
mlc
->
d©a
.
w8
;

262 
	`mlc_wa
(
MLC_ISR_ECC_READY
);

264 
i¤
 = 
mlc
->isr;

265 ià((
i¤
 & 
MLC_ISR_ERRORS_DETECTED
) == 0) {

266 
symbÞ_rÜ_couÁ
 = 0;

268 ià((
i¤
 & 
MLC_ISR_DECODER_FAILURE
) == 0) {

269 
symbÞ_rÜ_couÁ
 = 
	`MLC_ISR_SYMBOL_ERRORS
(
i¤
);

270 ià(
®igÃd
) {

271 
mlc
->
rubp
 = 0;

272 
i
 = 0; i < 
MLC_SMALL_DATA_WORD_COUNT
; ++i) {

273 
®igÃd_d©a
 [
i
] = 
mlc
->
buff
.
w32
;

275 
mlc
->
robp
 = 0;

276 
i
 = 0; i < 
MLC_SMALL_SPARE_WORD_COUNT
; ++i) {

277 
®igÃd_¥¬e
 [
i
] = 
mlc
->
buff
.
w32
;

280 
mlc
->
rubp
 = 0;

281 
i
 = 0; i < 
MLC_SMALL_DATA_SIZE
; ++i) {

282 
cu¼t_d©a
 [
i
] = 
mlc
->
buff
.
w8
;

284 
mlc
->
robp
 = 0;

285 
i
 = 0; i < 
MLC_SMALL_SPARE_SIZE
; ++i) {

286 
cu¼t_¥¬e
 [
i
] = 
mlc
->
buff
.
w8
;

290 
sc
 = 
RTEMS_IO_ERROR
;

294 
cu¼t_d©a
 +ð
MLC_SMALL_DATA_SIZE
;

295 
cu¼t_¥¬e
 +ð
MLC_SMALL_SPARE_SIZE
;

298 ià(
symbÞ_rÜ_couÁ_±r
 !ð
NULL
) {

299 *
symbÞ_rÜ_couÁ_±r
 = 
symbÞ_rÜ_couÁ
;

302  
sc
;

303 
	}
}

305 
	$Íc32xx_mlc_»ad_id
(
ut8_t
 *
id
, 
size_t
 
n
)

307 
size_t
 
i
 = 0;

309 
	`mlc_wa_uÁ_»ady
();

310 
mlc
->
cmd
 = 0x90;

311 
mlc
->
addr
 = 0;

312 
	`mlc_wa
(
MLC_ISR_NAND_READY
);

314 
i
 = 0; i < 
n
; ++i) {

315 
id
 [
i
] = 
mlc
->
d©a
.
w8
;

317 
	}
}

319 
¹ems_¡©us_code
 
	$Íc32xx_mlc_a£_block
(
ut32_t
 
block_dex
)

321 
¹ems_¡©us_code
 
sc
 = 
RTEMS_UNSATISFIED
;

323 ià(
block_dex
 >ð
mlc_block_couÁ
) {

324  
RTEMS_INVALID_ID
;

327 
	`mlc_wa_uÁ_»ady
();

328 
mlc
->
cmd
 = 0x60;

329 
	`mlc_£t_block_add»ss
(
block_dex
);

330 
mlc
->
cmd
 = 0xd0;

332 ià(
	`mlc_was_Ý©iÚ_sucûssful
()) {

333 
sc
 = 
RTEMS_SUCCESSFUL
;

336  
sc
;

337 
	}
}

339 
¹ems_¡©us_code
 
	$Íc32xx_mlc_wre_·ge_wh_ecc
(

340 
ut32_t
 
·ge_dex
,

341 cÚ¡ *
d©a
,

342 cÚ¡ *
¥¬e


345 
¹ems_¡©us_code
 
sc
 = 
RTEMS_IO_ERROR
;

346 
size_t
 
sm®l_·ges_couÁ
 = 
	`mlc_sm®l_·ges
() ?

347 1 : 
MLC_SMALL_PAGES_PER_LARGE_PAGE
;

348 
size_t
 
¥
 = 0;

349 
size_t
 
i
 = 0;

350 
boÞ
 
®igÃd
 = 
	`is_wÜd_®igÃd
(
d©a
, 
¥¬e
);

351 cÚ¡ 
ut8_t
 *
cu¼t_d©a
 = 
d©a
;

352 cÚ¡ 
ut8_t
 *
cu¼t_¥¬e
 = 
¥¬e
;

354 ià(
·ge_dex
 >ð
mlc_·ge_couÁ
) {

355  
RTEMS_INVALID_ID
;

358 
	`mlc_wa_uÁ_»ady
();

359 
mlc
->
cmd
 = 0x80;

360 
	`mlc_£t_·ge_add»ss
(
·ge_dex
);

362 
¥
 = 0; s°< 
sm®l_·ges_couÁ
; ++sp) {

363 
mlc
->
ecc_c
 = 0;

365 ià(
®igÃd
) {

366 cÚ¡ 
ut32_t
 *
®igÃd_d©a
 = (cÚ¡ ut32_*è
cu¼t_d©a
;

367 cÚ¡ 
ut32_t
 *
®igÃd_¥¬e
 = (cÚ¡ ut32_*è
cu¼t_¥¬e
;

369 
i
 = 0; i < 
MLC_SMALL_DATA_WORD_COUNT
; ++i) {

370 
mlc
->
d©a
.
w32
 = 
®igÃd_d©a
 [
i
];

372 
mlc
->
d©a
.
w32
 = 
®igÃd_¥¬e
 [0];

373 
mlc
->
d©a
.
w16
 = (
ut16_t
è
®igÃd_¥¬e
 [1];

375 
i
 = 0; i < 
MLC_SMALL_DATA_SIZE
; ++i) {

376 
mlc
->
d©a
.
w8
 = 
cu¼t_d©a
 [
i
];

378 
i
 = 0; i < 
MLC_SMALL_USER_SPARE_SIZE
; ++i) {

379 
mlc
->
d©a
.
w8
 = 
cu¼t_¥¬e
 [
i
];

382 
mlc
->
w´
 = 0;

384 
	`mlc_wa
(
MLC_ISR_CONTROLLER_READY
);

386 
cu¼t_d©a
 +ð
MLC_SMALL_DATA_SIZE
;

387 
cu¼t_¥¬e
 +ð
MLC_SMALL_SPARE_SIZE
;

390 
mlc
->
cmd
 = 0x10;

392 ià(
	`mlc_was_Ý©iÚ_sucûssful
()) {

393 
sc
 = 
RTEMS_SUCCESSFUL
;

396  
sc
;

397 
	}
}

	@src/lib/libbsp/arm/lpc32xx/misc/nand-select.c

23 
	~<b¥.h
>

24 
	~<b¥/Íc32xx.h
>

25 
	~<b¥/Çnd-mlc.h
>

27 
	$Íc32xx_£Ëù_Çnd_cÚÞËr
(
Íc32xx_Çnd_cÚÞËr
 
Çnd_cÚÞËr
)

29 
ut32_t
 
æashþk_ù¾
 = 
LPC32XX_FLASHCLK_CTRL
 & ~(
FLASHCLK_IRQ_MLC


30 | 
FLASHCLK_SELECT_SLC
 | 
FLASHCLK_MLC_CLK_ENABLE
 | 
FLASHCLK_SLC_CLK_ENABLE
);

32 
Çnd_cÚÞËr
) {

33 
LPC32XX_NAND_CONTROLLER_MLC
:

34 
æashþk_ù¾
 |ð
FLASHCLK_IRQ_MLC
 | 
FLASHCLK_MLC_CLK_ENABLE
;

36 
LPC32XX_NAND_CONTROLLER_SLC
:

37 
æashþk_ù¾
 |ð
FLASHCLK_SELECT_SLC
 | 
FLASHCLK_SLC_CLK_ENABLE
;

43 
LPC32XX_FLASHCLK_CTRL
 = 
æashþk_ù¾
;

44 
	}
}

	@src/lib/libbsp/arm/lpc32xx/misc/restart.c

23 
	~<¹ems.h
>

25 
	~<libýu/¬m-ý15.h
>

27 
	~<b¥.h
>

29 
	$b¥_»¡¬t
(*
addr
)

31 
	`LPC32XX_DO_RESTART
(
addr
);

32 
	}
}

	@src/lib/libbsp/arm/lpc32xx/misc/system-clocks.c

23 
	~<b¥.h
>

24 
	~<b¥/Íc32xx.h
>

26 
ut32_t
 
	$Íc32xx_sysþk
()

28 
ut32_t
 
sysþk_ù¾
 = 
LPC32XX_SYSCLK_CTRL
;

30  (
sysþk_ù¾
 & 0x1) == 0 ?

31 
LPC32XX_OSCILLATOR_MAIN


32 : (397 * 
LPC32XX_OSCILLATOR_RTC
);

33 
	}
}

35 
ut32_t
 
	$Íc32xx_hþk¶l_þk
()

37 
ut32_t
 
sysþk
 = 
	`Íc32xx_sysþk
();

38 
ut32_t
 
hþk¶l_ù¾
 = 
LPC32XX_HCLKPLL_CTRL
;

39 
ut32_t
 
m
 = 
	`HCLK_PLL_M_GET
(
hþk¶l_ù¾
) + 1;

40 
ut32_t
 
n
 = 
	`HCLK_PLL_N_GET
(
hþk¶l_ù¾
) + 1;

41 
ut32_t
 
p
 = 1U << 
	`HCLK_PLL_P_GET
(
hþk¶l_ù¾
);

42 
ut32_t
 
hþk¶l_þk
 = 0;

44 ià((
hþk¶l_ù¾
 & 
HCLK_PLL_BYPASS
) != 0) {

45 ià((
hþk¶l_ù¾
 & 
HCLK_PLL_DIRECT
) != 0) {

46 
hþk¶l_þk
 = 
sysþk
;

48 
hþk¶l_þk
 = 
sysþk
 / (2 * 
p
);

51 ià((
hþk¶l_ù¾
 & 
HCLK_PLL_DIRECT
) != 0) {

52 
hþk¶l_þk
 = (
m
 * 
sysþk
è/ 
n
;

54 ià((
hþk¶l_ù¾
 & 
HCLK_PLL_FBD_FCLKOUT
) != 0) {

55 
hþk¶l_þk
 = 
m
 * (
sysþk
 / 
n
);

57 
hþk¶l_þk
 = (
m
 / (2 * 
p
)è* (
sysþk
 / 
n
);

62  
hþk¶l_þk
;

63 
	}
}

65 
ut32_t
 
	$Íc32xx_³rh_þk
()

67 
ut32_t
 
pwr_ù¾
 = 
LPC32XX_PWR_CTRL
;

68 
ut32_t
 
³rh_þk
 = 0;

70 ià((
pwr_ù¾
 & 
PWR_NORMAL_RUN_MODE
) != 0) {

71 
ut32_t
 
hþkdiv_ù¾
 = 
LPC32XX_HCLKDIV_CTRL
;

72 
ut32_t
 
div
 = 
	`HCLK_DIV_PERIPH_CLK_GET
(
hþkdiv_ù¾
) + 1;

74 
³rh_þk
 = 
	`Íc32xx_hþk¶l_þk
(è/ 
div
;

76 
³rh_þk
 = 
	`Íc32xx_sysþk
();

79  
³rh_þk
;

80 
	}
}

82 
ut32_t
 
	$Íc32xx_hþk
()

84 
ut32_t
 
pwr_ù¾
 = 
LPC32XX_PWR_CTRL
;

85 
ut32_t
 
hþk
 = 0;

87 ià((
pwr_ù¾
 & 
PWR_HCLK_USES_PERIPH_CLK
) != 0) {

88 
hþk
 = 
	`Íc32xx_³rh_þk
();

90 ià((
pwr_ù¾
 & 
PWR_NORMAL_RUN_MODE
) != 0) {

91 
ut32_t
 
hþkdiv_ù¾
 = 
LPC32XX_HCLKDIV_CTRL
;

92 
ut32_t
 
div
 = 1U << 
	`HCLK_DIV_HCLK_GET
(
hþkdiv_ù¾
);

94 
hþk
 = 
	`Íc32xx_hþk¶l_þk
(è/ 
div
;

96 
hþk
 = 
	`Íc32xx_sysþk
();

100  
hþk
;

101 
	}
}

103 
ut32_t
 
	$Íc32xx_¬m_þk
()

105 
ut32_t
 
pwr_ù¾
 = 
LPC32XX_PWR_CTRL
;

106 
ut32_t
 
¬m_þk
 = 0;

108 ià((
pwr_ù¾
 & 
PWR_HCLK_USES_PERIPH_CLK
) != 0) {

109 
¬m_þk
 = 
	`Íc32xx_³rh_þk
();

111 ià((
pwr_ù¾
 & 
PWR_NORMAL_RUN_MODE
) != 0) {

112 
¬m_þk
 = 
	`Íc32xx_hþk¶l_þk
();

114 
¬m_þk
 = 
	`Íc32xx_sysþk
();

118  
¬m_þk
;

119 
	}
}

121 
ut32_t
 
	$Íc32xx_dd¿m_þk
()

123 
ut32_t
 
hþkdiv_ù¾
 = 
LPC32XX_HCLKDIV_CTRL
;

124 
ut32_t
 
div
 = 
	`HCLK_DIV_DDRAM_CLK_GET
(
hþkdiv_ù¾
);

125 
ut32_t
 
dd¿m_þk
 = 0;

127 ià(
div
 != 0) {

128 
ut32_t
 
pwr_ù¾
 = 
LPC32XX_PWR_CTRL
;

130 ià((
pwr_ù¾
 & 
PWR_NORMAL_RUN_MODE
) != 0) {

131 
dd¿m_þk
 = 
	`Íc32xx_hþk¶l_þk
();

133 
dd¿m_þk
 = 
	`Íc32xx_sysþk
();

136 
dd¿m_þk
 /ð
div
;

139  
dd¿m_þk
;

140 
	}
}

	@src/lib/libbsp/arm/lpc32xx/misc/timer.c

22 
	~<¹ems.h
>

23 
	~<¹ems/btim.h
>

25 
	~<b¥.h
>

27 
ut32_t
 
	gbchm¬k_tim_ba£
;

29 
	$bchm¬k_tim_lize
()

31 
bchm¬k_tim_ba£
 = 
	`Íc32xx_tim
();

32 
	}
}

34 
bchm¬k_tim_t
 
	$bchm¬k_tim_»ad
()

36  
	`Íc32xx_tim
(è- 
bchm¬k_tim_ba£
;

37 
	}
}

39 
	$bchm¬k_tim_di§bË_subaùg_avage_ovhd
(
boÞ
 
fd_avage_ovhd
)

42 
	}
}

	@src/lib/libbsp/arm/lpc32xx/rtc/rtc-config.c

23 
	~<libch/¹c.h
>

25 
	~<b¥.h
>

26 
	~<b¥/Íc32xx.h
>

28 
	#LPC32XX_RTC_COUNT
 1U

	)

30 
	#LPC32XX_RTC_COUNTER_DELTA
 0xffffffãU

	)

32 
	#LPC32XX_RTC_KEY
 0xb5c13f27U

	)

34 
	#LPC32XX_RTC_CTRL_FORCE_ONSW
 (1U << 7)

	)

35 
	#LPC32XX_RTC_CTRL_STOP
 (1U << 6)

	)

36 
	#LPC32XX_RTC_CTRL_RESET
 (1U << 4)

	)

37 
	#LPC32XX_RTC_CTRL_MATCH_1_ONSW
 (1U << 3)

	)

38 
	#LPC32XX_RTC_CTRL_MATCH_0_ONSW
 (1U << 2)

	)

39 
	#LPC32XX_RTC_CTRL_MATCH_1_INTR
 (1U << 1)

	)

40 
	#LPC32XX_RTC_CTRL_MATCH_0_INTR
 (1U << 0)

	)

42 
	$Íc32xx_¹c_£t
(
ut32_t
 
v®
)

44 
i
 = 
	`Íc32xx_¬m_þk
(è/ 
LPC32XX_OSCILLATOR_RTC
;

46 
Íc32xx
.
¹c
.
ù¾
 |ð
LPC32XX_RTC_CTRL_STOP
;

47 
Íc32xx
.
¹c
.
ucouÁ
 = 
v®
;

48 
Íc32xx
.
¹c
.
dcouÁ
 = 
LPC32XX_RTC_COUNTER_DELTA
 - 
v®
;

49 
Íc32xx
.
¹c
.
ù¾
 &ð~
LPC32XX_RTC_CTRL_STOP
;

52 
i
 != 0) {

53 
__asm__
 volatile ("nop");

54 --
i
;

56 
	}
}

58 
	$Íc32xx_¹c_»£t
()

60 
Íc32xx
.
¹c
.
ù¾
 = 
LPC32XX_RTC_CTRL_RESET
;

61 
Íc32xx
.
¹c
.
ù¾
 = 0;

62 
Íc32xx
.
¹c
.
key
 = 
LPC32XX_RTC_KEY
;

63 
	`Íc32xx_¹c_£t
(0);

64 
	}
}

66 
	$Íc32xx_¹c_lize
(
mÜ
)

68 
ut32_t
 
up_f¡
 = 0;

69 
ut32_t
 
up_£cÚd
 = 0;

70 
ut32_t
 
down_f¡
 = 0;

71 
ut32_t
 
down_£cÚd
 = 0;

73 ià(
Íc32xx
.
¹c
.
key
 !ð
LPC32XX_RTC_KEY
) {

74 
	`Íc32xx_¹c_»£t
();

78 
up_f¡
 = 
Íc32xx
.
¹c
.
ucouÁ
;

79 
down_f¡
 = 
Íc32xx
.
¹c
.
dcouÁ
;

80 
up_£cÚd
 = 
Íc32xx
.
¹c
.
ucouÁ
;

81 
down_£cÚd
 = 
Íc32xx
.
¹c
.
dcouÁ
;

82 } 
up_f¡
 !ð
up_£cÚd
 || 
down_f¡
 !ð
down_£cÚd
);

84 ià(
up_f¡
 + 
down_f¡
 !ð
LPC32XX_RTC_COUNTER_DELTA
) {

85 
	`Íc32xx_¹c_»£t
();

87 
	}
}

89 
	$Íc32xx_¹c_g_time
(
mÜ
, 
¹ems_time_of_day
 *
tod
)

91 
timev®
 
now
 = {

92 .
tv_£c
 = 
Íc32xx
.
¹c
.
ucouÁ
,

93 .
tv_u£c
 = 0

95 
tm
 
time
;

97 
	`gmtime_r
(&
now
.
tv_£c
, &
time
);

99 
tod
->
yr
 = 
time
.
tm_yr
 + 1900;

100 
tod
->
mÚth
 = 
time
.
tm_mÚ
 + 1;

101 
tod
->
day
 = 
time
.
tm_mday
;

102 
tod
->
hour
 = 
time
.
tm_hour
;

103 
tod
->
mu
 = 
time
.
tm_m
;

104 
tod
->
£cÚd
 = 
time
.
tm_£c
;

105 
tod
->
ticks
 = 0;

107  
RTEMS_SUCCESSFUL
;

108 
	}
}

110 
	$Íc32xx_¹c_£t_time
(
mÜ
, cÚ¡ 
¹ems_time_of_day
 *
tod
)

112 
	`Íc32xx_¹c_£t
(
	`_TOD_To_£cÚds
(
tod
));

115 
	}
}

117 
boÞ
 
	$Íc32xx_¹c_´obe
(
mÜ
)

119  
ue
;

120 
	}
}

122 cÚ¡ 
¹c_âs
 
	gÍc32xx_¹c_Ýs
 = {

123 .
deviûInlize
 = 
Íc32xx_¹c_lize
,

124 .
	gdeviûGTime
 = 
Íc32xx_¹c_g_time
,

125 .
	gdeviûSTime
 = 
Íc32xx_¹c_£t_time


128 
size_t
 
	gRTC_CouÁ
 = 
LPC32XX_RTC_COUNT
;

130 
¹ems_deviû_mÜ_numb
 
	gRTC_MÜ
 = 0;

132 
¹c_tbl
 
	gRTC_TabË
 [
LPC32XX_RTC_COUNT
] = {

134 .
sDeviûName
 = "/dev/rtc",

135 .
	gdeviûTy³
 = 
RTC_CUSTOM
,

136 .
	gpDeviûFns
 = &
Íc32xx_¹c_Ýs
,

137 .
	gdeviûProbe
 = 
Íc32xx_¹c_´obe
,

138 .
	gpDeviûP¬ams
 = 
NULL
,

139 .
	gulClPÜt1
 = 0,

140 .
	gulD©aPÜt
 = 0,

141 .
	ggRegi¡
 = 
NULL
,

142 .
	g£tRegi¡
 = 
NULL


	@src/lib/libbsp/arm/lpc32xx/startup/bspreset.c

23 
	~<¡dboÞ.h
>

25 
	~<b¥Ýts.h
>

26 
	~<b¥/boÙÿrd.h
>

27 
	~<b¥/Íc32xx.h
>

29 
	$w©chdog_»£t
()

31 #ifdeà
LPC32XX_ENABLE_WATCHDOG_RESET


32 
LPC32XX_TIMCLK_CTRL
 |ð
TIMCLK_CTRL_WDT
;

33 
Íc32xx
.
wdt
.
mù¾
 |ð
WDTTIM_MCTRL_M_RES1
 | 
WDTTIM_MCTRL_M_RES2
;

34 
Íc32xx
.
wdt
.
emr
 = 
	`WDTTIM_EMR_MATCH_CTRL_SET
(lpc32xx.wdt.emr, 0x2);

35 
Íc32xx
.
wdt
.
ù¾
 |ð
WDTTIM_CTRL_COUNT_ENAB
;

36 
Íc32xx
.
wdt
.
m©ch0
 = 1;

37 
Íc32xx
.
wdt
.
couÁ
 = 0;

39 
	}
}

41 
	$b¥_»£t
( )

43 
	`w©chdog_»£t
();

45 
ue
) {

48 
	}
}

	@src/lib/libbsp/arm/lpc32xx/startup/bspstart.c

23 
	~<¹ems/couÁ.h
>

25 
	~<b¥.h
>

26 
	~<b¥/boÙÿrd.h
>

27 
	~<b¥/q-gic.h
>

29 
CPU_CouÁ_ticks
 
	$_CPU_CouÁ_»ad
()

31  
	`Íc32xx_tim
();

32 
	}
}

34 
	$b¥_¡¬t
()

36 
	`¹ems_couÁ_lize_cÚvr
(
LPC32XX_PERIPH_CLK
);

37 
	`b¥_¼u±_lize
();

38 
	}
}

	@src/lib/libbsp/arm/lpc32xx/startup/bspstarthooks.c

23 
	#ARM_CP15_TEXT_SECTION
 
BSP_START_TEXT_SECTION


	)

25 
	~<b¥.h
>

26 
	~<b¥/¡¬t.h
>

27 
	~<b¥/Íc32xx.h
>

28 
	~<b¥/mmu.h
>

29 
	~<b¥/¬m-ý15-¡¬t.h
>

30 
	~<b¥/lk-symbÞs.h
>

31 
	~<b¥/u¬t-ouut-ch¬.h
>

33 #ifdeà
LPC32XX_DISABLE_READ_WRITE_DATA_CACHE


34 
	#LPC32XX_MMU_READ_WRITE_DATA
 
LPC32XX_MMU_READ_WRITE


	)

36 
	#LPC32XX_MMU_READ_WRITE_DATA
 
LPC32XX_MMU_READ_WRITE_CACHED


	)

39 #ifdeà
LPC32XX_DISABLE_READ_ONLY_PROTECTION


40 
	#LPC32XX_MMU_READ_ONLY_DATA
 
LPC32XX_MMU_READ_WRITE_CACHED


	)

41 
	#LPC32XX_MMU_CODE
 
LPC32XX_MMU_READ_WRITE_CACHED


	)

43 
	#LPC32XX_MMU_READ_ONLY_DATA
 
LPC32XX_MMU_READ_ONLY_CACHED


	)

44 
	#LPC32XX_MMU_CODE
 
LPC32XX_MMU_READ_ONLY_CACHED


	)

47 #iâdeà
LPC32XX_DISABLE_MMU


48 cÚ¡ 
BSP_START_DATA_SECTION
 
¬m_ý15_¡¬t_£ùiÚ_cÚfig


49 
	gÍc32xx_mmu_cÚfig_bË
 [] = {

51 .
beg
 = (
ut32_t
è
b¥_£ùiÚ_ç¡_xt_beg
,

52 .
	gd
 = (
ut32_t
è
b¥_£ùiÚ_ç¡_xt_d
,

53 .
	gæags
 = 
LPC32XX_MMU_CODE


55 .
	gbeg
 = (
ut32_t
è
b¥_£ùiÚ_ç¡_d©a_beg
,

56 .
	gd
 = (
ut32_t
è
b¥_£ùiÚ_ç¡_d©a_d
,

57 .
	gæags
 = 
LPC32XX_MMU_READ_WRITE_DATA


58 #ifdeà
LPC32XX_SCRATCH_AREA_SIZE


60 .
	gbeg
 = (
ut32_t
è&
Íc32xx_sü©ch_¬
 [0],

61 .
	gd
 = (
ut32_t
è&
Íc32xx_sü©ch_¬
 [
LPC32XX_SCRATCH_AREA_SIZE
],

62 .
	gæags
 = 
LPC32XX_MMU_READ_ONLY_DATA


65 .
	gbeg
 = (
ut32_t
è
b¥_£ùiÚ_¡¬t_beg
,

66 .
	gd
 = (
ut32_t
è
b¥_£ùiÚ_¡¬t_d
,

67 .
	gæags
 = 
LPC32XX_MMU_CODE


69 .
	gbeg
 = (
ut32_t
è
b¥_£ùiÚ_veùÜ_beg
,

70 .
	gd
 = (
ut32_t
è
b¥_£ùiÚ_veùÜ_d
,

71 .
	gæags
 = 
LPC32XX_MMU_READ_WRITE_CACHED


73 .
	gbeg
 = (
ut32_t
è
b¥_£ùiÚ_xt_beg
,

74 .
	gd
 = (
ut32_t
è
b¥_£ùiÚ_xt_d
,

75 .
	gæags
 = 
LPC32XX_MMU_CODE


77 .
	gbeg
 = (
ut32_t
è
b¥_£ùiÚ_rod©a_beg
,

78 .
	gd
 = (
ut32_t
è
b¥_£ùiÚ_rod©a_d
,

79 .
	gæags
 = 
LPC32XX_MMU_READ_ONLY_DATA


81 .
	gbeg
 = (
ut32_t
è
b¥_£ùiÚ_d©a_beg
,

82 .
	gd
 = (
ut32_t
è
b¥_£ùiÚ_d©a_d
,

83 .
	gæags
 = 
LPC32XX_MMU_READ_WRITE_DATA


85 .
	gbeg
 = (
ut32_t
è
b¥_£ùiÚ_bss_beg
,

86 .
	gd
 = (
ut32_t
è
b¥_£ùiÚ_bss_d
,

87 .
	gæags
 = 
LPC32XX_MMU_READ_WRITE_DATA


89 .
	gbeg
 = (
ut32_t
è
b¥_£ùiÚ_wÜk_beg
,

90 .
	gd
 = (
ut32_t
è
b¥_£ùiÚ_wÜk_d
,

91 .
	gæags
 = 
LPC32XX_MMU_READ_WRITE_DATA


93 .
	gbeg
 = (
ut32_t
è
b¥_£ùiÚ_¡ack_beg
,

94 .
	gd
 = (
ut32_t
è
b¥_£ùiÚ_¡ack_d
,

95 .
	gæags
 = 
LPC32XX_MMU_READ_WRITE_DATA


97 .
	gbeg
 = 0x0U,

98 .
	gd
 = 0x100000U,

99 .
	gæags
 = 
LPC32XX_MMU_READ_ONLY_CACHED


101 .
	gbeg
 = 0x20000000U,

102 .
	gd
 = 0x200c0000U,

103 .
	gæags
 = 
LPC32XX_MMU_READ_WRITE


105 .
	gbeg
 = 0x30000000U,

106 .
	gd
 = 0x32000000U,

107 .
	gæags
 = 
LPC32XX_MMU_READ_WRITE


109 .
	gbeg
 = 0x40000000U,

110 .
	gd
 = 0x40100000U,

111 .
	gæags
 = 
LPC32XX_MMU_READ_WRITE


113 .
	gbeg
 = (
ut32_t
è
Íc32xx_magic_zo_beg
,

114 .
	gd
 = (
ut32_t
è
Íc32xx_magic_zo_d
,

115 .
	gæags
 = 
LPC32XX_MMU_READ_WRITE_DATA


120 
BSP_START_TEXT_SECTION
 
	$£tup_mmu_ªd_ÿche
()

122 
ut32_t
 
ù¾
 = 
	`¬m_ý15_¡¬t_£tup_mmu_ªd_ÿche
(

123 
ARM_CP15_CTRL_I
 | 
ARM_CP15_CTRL_R
 | 
ARM_CP15_CTRL_C


124 | 
ARM_CP15_CTRL_V
 | 
ARM_CP15_CTRL_M
,

125 
ARM_CP15_CTRL_S
 | 
ARM_CP15_CTRL_A


128 
	`¬m_ý15_ÿche_v®id©e
();

130 #iâdeà
LPC32XX_DISABLE_MMU


131 
	`¬m_ý15_¡¬t_£tup_ª¦©iÚ_bË_ªd_abË_mmu_ªd_ÿche
(

132 
ù¾
,

133 (
ut32_t
 *è
b¥_ª¦©iÚ_bË_ba£
,

134 
LPC32XX_MMU_CLIENT_DOMAIN
,

135 &
Íc32xx_mmu_cÚfig_bË
 [0],

136 
	`RTEMS_ARRAY_SIZE
(
Íc32xx_mmu_cÚfig_bË
)

139 
	}
}

141 
BSP_START_TEXT_SECTION
 
boÞ
 
	$Íc32xx_¡¬t_¶l_£tup
(

142 
ut32_t
 
hþk¶l_ù¾
,

143 
ut32_t
 
hþkdiv_ù¾
,

144 
boÞ
 
fÜû


147 
ut32_t
 
pwr_ù¾
 = 
LPC32XX_PWR_CTRL
;

148 
boÞ
 
£gs_ok
 =

149 ((
LPC32XX_HCLKPLL_CTRL
 ^ 
hþk¶l_ù¾
è& 
	`BSP_MSK32
(1, 16)) == 0

150 && ((
LPC32XX_HCLKDIV_CTRL
 ^ 
hþkdiv_ù¾
è& 
	`BSP_MSK32
(0, 8)) == 0;

152 ià((
pwr_ù¾
 & 
PWR_NORMAL_RUN_MODE
è=ð0 || (!
£gs_ok
 && 
fÜû
)) {

154 
LPC32XX_PWR_CTRL
 = 
pwr_ù¾
 & ~
PWR_NORMAL_RUN_MODE
;

157 
LPC32XX_HCLKPLL_CTRL
 = 
hþk¶l_ù¾
;

158 (
LPC32XX_HCLKPLL_CTRL
 & 
HCLK_PLL_LOCK
) == 0) {

163 
LPC32XX_HCLKDIV_CTRL
 = 
hþkdiv_ù¾
;

166 
LPC32XX_PWR_CTRL
 = 
pwr_ù¾
 | 
PWR_NORMAL_RUN_MODE
;

169  
£gs_ok
;

170 
	}
}

172 #ià
LPC32XX_OSCILLATOR_MAIN
 != 13000000U

176 
BSP_START_TEXT_SECTION
 
	$£tup_¶l
()

178 
ut32_t
 
hþk¶l_ù¾
 = 
LPC32XX_HCLKPLL_CTRL_INIT_VALUE
;

179 
ut32_t
 
hþkdiv_ù¾
 = 
LPC32XX_HCLKDIV_CTRL_INIT_VALUE
;

181 
	`Íc32xx_¡¬t_¶l_£tup
(
hþk¶l_ù¾
, 
hþkdiv_ù¾
, 
çl£
);

182 
	}
}

184 
BSP_START_TEXT_SECTION
 
	$b¥_¡¬t_hook_0
()

186 
	`£tup_¶l
();

187 
	}
}

189 
BSP_START_TEXT_SECTION
 
	$¡Ý_dma_aùivs
()

191 #ifdeà
LPC32XX_STOP_GPDMA


192 
LPC32XX_DO_STOP_GPDMA
;

195 #ifdeà
LPC32XX_STOP_ETHERNET


196 
LPC32XX_DO_STOP_ETHERNET
;

199 #ifdeà
LPC32XX_STOP_USB


200 
LPC32XX_DO_STOP_USB
;

202 
	}
}

204 
BSP_START_TEXT_SECTION
 
	$£tup_u¬ts
()

206 
LPC32XX_UART_CTRL
 = 0x0;

207 
LPC32XX_UART_LOOP
 = 0x0;

209 #ifdeà
LPC32XX_UART_5_BAUD


210 
LPC32XX_UARTCLK_CTRL
 |= 1U << 2;

211 
LPC32XX_U5CLK
 = 
LPC32XX_CONFIG_U5CLK
;

212 
LPC32XX_UART_CLKMODE
 = 
	`BSP_FLD32SET
(LPC32XX_UART_CLKMODE, 0x2, 8, 9);

213 
	`BSP_CONSOLE_UART_INIT
(0x01);

215 
	}
}

217 
BSP_START_TEXT_SECTION
 
	$£tup_tim
()

219 vÞ©
Íc_tim
 *
tim
 = 
LPC32XX_STANDARD_TIMER
;

221 
LPC32XX_TIMCLK_CTRL1
 = (1U << 2) | (1U << 3);

223 
tim
->
tü
 = 
LPC_TIMER_TCR_RST
;

224 
tim
->
ùü
 = 0x0;

225 
tim
->
´
 = 0x0;

226 
tim
->

 = 0xff;

227 
tim
->
mü
 = 0x0;

228 
tim
->
cü
 = 0x0;

229 
tim
->
tü
 = 
LPC_TIMER_TCR_EN
;

230 
	}
}

232 
BSP_START_TEXT_SECTION
 
	$b¥_¡¬t_hook_1
()

234 
	`¡Ý_dma_aùivs
();

235 
	`b¥_¡¬t_cÝy_£ùiÚs
();

236 
	`£tup_mmu_ªd_ÿche
();

237 
	`£tup_u¬ts
();

238 
	`£tup_tim
();

239 
	`b¥_¡¬t_þr_bss
();

240 
	}
}

	@src/lib/libbsp/arm/shared/abort/abort.c

23 
	~<¹ems/sy¡em.h
>

24 
	~<¹ems.h
>

25 
	~<¹ems/b¥Io.h
>

26 
	~"abÜt.h
"

28 
ut32_t
 
	gg_d©a_abÜt_út
 = 0;

30 
ut32_t
 
	gg_d©a_abÜt_¢_li¡
[1024];

33 *
	g_´t_fuÎ_cÚxt_mode2txt
[0x20]={

43 
	$_´t_fuÎ_cÚxt
(
ut32_t
 
¥¤
)

45 *
mode
;

46 
ut32_t
 
´ev_¥
,
´ev_Ì
,
ý¤
,
¬m_swch_»g
;

47 
i
;

49 
	`´tk
("aùivth»adh»ad 0x%08x\n", 
	`¹ems_sk_£lf
());

51 
mode
=
_´t_fuÎ_cÚxt_mode2txt
[
¥¤
&0x1f];

52 if(!
mode
) mode="unknown";

54 
__asm__
 vÞ©(
ARM_SWITCH_TO_ARM


61 
ARM_SWITCH_BACK


62 : [
¬m_swch_»g
] "=&r" (¬m_swch_»g), [
´ev_¥
] "=&r" (´ev_¥), [
´ev_Ì
] "=&r" (prev_lr),

63 [
ý¤
] "=&r" (cpsr)

64 : [
¥¤
] "r" (spsr)

67 
	`´tk
("Previous sp=0x%08xr=0x%08xndctual cpsr=%08x\n",

68 
´ev_¥
, 
´ev_Ì
, 
ý¤
);

70 
i
=0;i<48;){

71 
	`´tk
(" 0x%08x",((
ut32_t
*)
´ev_¥
)[
i
++]);

72 if((
i
%6) == 0)

73 
	`´tk
("\n");

76 
	}
}

85 
	$do_d©a_abÜt
(

86 
ut32_t
 
¢
,

87 
ut32_t
 
¥¤
,

88 
CÚxt_CÚÞ
 *
ùx


92 
ut8_t
 
decode
;

93 
ut8_t
 
¢_ty³
;

94 
¹ems_¼u±_Ëv
 
Ëv
;

96 
g_d©a_abÜt_¢_li¡
[
g_d©a_abÜt_út
 & 0x3ff] = 
ùx
->
»gi¡_Ì
 - 8;

97 
g_d©a_abÜt_út
++;

99 
decode
 = ((
¢
 >> 20) & 0xff);

101 
¢_ty³
 = 
decode
 & 
INSN_MASK
;

102 
¢_ty³
) {

103 
INSN_STM1
:

104 
	`´tk
("\n\nINSN_STM1\n");

106 
INSN_STM2
:

107 
	`´tk
("\n\nINSN_STM2\n");

109 
INSN_STR
:

110 
	`´tk
("\n\nINSN_STR\n");

112 
INSN_STRB
:

113 
	`´tk
("\n\nINSN_STRB\n");

115 
INSN_LDM1
:

116 
	`´tk
("\n\nINSN_LDM1\n");

118 
INSN_LDM23
:

119 
	`´tk
("\n\nINSN_LDM23\n");

121 
INSN_LDR
:

122 
	`´tk
("\n\nINSN_LDR\n");

124 
INSN_LDRB
:

125 
	`´tk
("\n\nINSN_LDRB\n");

128 
	`´tk
("\n\nUnrecognized instruction\n");

132 
	`´tk
("data_aborttddress 0x%x, instruction: 0x%x, spsr = 0x%x\n",

133 
ùx
->
»gi¡_Ì
 - 8, 
¢
, 
¥¤
);

135 
	`_´t_fuÎ_cÚxt
(
¥¤
);

138 
	`¹ems_¼u±_di§bË
(
Ëv
);

139 (è
Ëv
;

144 
	}
}

	@src/lib/libbsp/arm/shared/abort/abort.h

17 #iâdeà
_BSPABORT_H


18 
	#_BSPABORT_H


	)

20 
	~<¹ems/sy¡em.h
>

21 
	~<¹ems.h
>

22 
	~<¹ems/b¥Io.h
>

24 
	#INSN_MASK
 0xc5

	)

26 
	#INSN_STM1
 0x80

	)

27 
	#INSN_STM2
 0x84

	)

28 
	#INSN_STR
 0x40

	)

29 
	#INSN_STRB
 0x44

	)

31 
	#INSN_LDM1
 0x81

	)

32 
	#INSN_LDM23
 0x85

	)

33 
	#INSN_LDR
 0x41

	)

34 
	#INSN_LDRB
 0x45

	)

36 
	#GET_RD
(
x
è((x & 0x0000f000è>> 12)

	)

37 
	#GET_RN
(
x
è((x & 0x000f0000è>> 16)

	)

39 
	#GET_U
(
x
è((x & 0x00800000è>> 23)

	)

40 
	#GET_I
(
x
è((x & 0x02000000è>> 25)

	)

42 
	#GET_REG
(
r
, 
ùx
è(((
ut32_t
 *)ùx)[r])

	)

43 
	#SET_REG
(
r
, 
ùx
, 
v
è(((
ut32_t
 *)ùx)[r] = v)

	)

44 
	#GET_OFFSET
(
¢
è(¢ & 0xfff)

	)

49 
_´t_fuÎ_cÚxt
(
ut32_t
);

50 
do_d©a_abÜt
(
ut32_t
, ut32_t, 
CÚxt_CÚÞ
 *);

	@src/lib/libbsp/arm/shared/abort/simple_abort.c

21 
	~<¹ems/sy¡em.h
>

22 
	~<¹ems.h
>

23 
	~<¹ems/b¥Io.h
>

24 
	~"abÜt.h
"

26 *
	g_´t_fuÎ_cÚxt_mode2txt
[0x10]={

36 
	$_´t_fuÎ_cÚxt
(
ut32_t
 
¥¤
)

38 *
mode
;

39 
ut32_t
 
´ev_¥
,
´ev_Ì
,
ý¤
,
¬m_swch_»g
;

40 
i
, 
j
;

42 
	`´tk
("aùivth»adh»ad 0x%08x\n", 
	`¹ems_sk_£lf
());

44 
mode
=
_´t_fuÎ_cÚxt_mode2txt
[(
¥¤
&0x1f)-0x10];

45 if(!
mode
) mode="unknown";

47 
__asm__
 volatile (

48 
ARM_SWITCH_TO_ARM


55 
ARM_SWITCH_BACK


56 : [
´ev_¥
] "=&r" (´ev_¥), [
´ev_Ì
] "=&r" (prev_lr),

57 [
ý¤
] "=&r" (ý¤), [
¬m_swch_»g
] "=&r" (arm_switch_reg)

58 : [
¥¤
] "r" (spsr)

62 
	`´tk
(

64 
´ev_¥
,

65 
´ev_Ì
,

66 
ý¤


69 
j
=0;

70 
i
=0;i<48;) {

71 
	`´tk
(" 0x%08x",((
ut32_t
*)
´ev_¥
)[
i
++]);

72 
j
++;

74 if((
j
-6)==0) {

75 
	`´tk
("\n");

76 
j
=0;

79 
	}
}

88 
	$do_d©a_abÜt
(

89 
ut32_t
 
¢
,

90 
ut32_t
 
¥¤
,

91 
CÚxt_CÚÞ
 *
ùx


96 
ut8_t
 
decode
;

97 
ut8_t
 
¢_ty³
;

98 
¹ems_¼u±_Ëv
 
Ëv
;

100 
decode
 = ((
¢
 >> 20) & 0xff);

102 
¢_ty³
 = 
decode
 & 
INSN_MASK
;

103 
¢_ty³
) {

104 
INSN_STM1
:

105 
	`´tk
("\n\nINSN_STM1\n");

107 
INSN_STM2
:

108 
	`´tk
("\n\nINSN_STM2\n");

110 
INSN_STR
:

111 
	`´tk
("\n\nINSN_STR\n");

113 
INSN_STRB
:

114 
	`´tk
("\n\nINSN_STRB\n");

116 
INSN_LDM1
:

117 
	`´tk
("\n\nINSN_LDM1\n");

119 
INSN_LDM23
:

120 
	`´tk
("\n\nINSN_LDM23\n");

122 
INSN_LDR
:

123 
	`´tk
("\n\nINSN_LDR\n");

125 
INSN_LDRB
:

126 
	`´tk
("\n\nINSN_LDRB\n");

129 
	`´tk
("\n\nUnrecognized instruction\n");

133 
	`´tk
("data_aborttddress 0x%x, instruction: 0x%x, spsr = 0x%x\n",

134 
ùx
->
»gi¡_Ì
 - 8, 
¢
, 
¥¤
);

136 
	`_´t_fuÎ_cÚxt
(
¥¤
);

139 
	`¹ems_¼u±_di§bË
(
Ëv
);

140 ()
Ëv
;

145 
	}
}

	@src/lib/libbsp/arm/shared/arm-a9mpcore-clock-config.c

15 
	~<b¥.h
>

16 
	~<b¥/çl.h
>

17 
	~<b¥/q.h
>

18 
	~<b¥/¬m-a9mpcÜe-»gs.h
>

19 
	~<b¥/¬m-a9mpcÜe-þock.h
>

20 
	~<¹ems/timecouÁ.h
>

22 
	#A9MPCORE_GT
 ((vÞ©
a9mpcÜe_gt
 *è
BSP_ARM_A9MPCORE_GT_BASE
)

	)

24 
timecouÁ
 
	ga9mpcÜe_tc
;

27 
Clock_i¤
(
¹ems_q_hdl_·¿m
 
¬g
);

29 
__©ibu__
 ((
wk
)è
ut32_t
 
	$a9mpcÜe_þock_³rhþk
()

32  
BSP_ARM_A9MPCORE_PERIPHCLK
;

33 
	}
}

35 
	$a9mpcÜe_þock_©_tick
()

37 vÞ©
a9mpcÜe_gt
 *
gt
 = 
A9MPCORE_GT
;

39 
gt
->
q¡
 = 
A9MPCORE_GT_IRQST_EFLG
;

40 
	}
}

42 
	$a9mpcÜe_þock_hªdËr_¡®l
()

44 
¹ems_¡©us_code
 
sc
;

46 
sc
 = 
	`¹ems_¼u±_hªdËr_¡®l
(

47 
A9MPCORE_IRQ_GT
,

49 
RTEMS_INTERRUPT_UNIQUE
,

50 (
¹ems_¼u±_hªdËr
è
Clock_i¤
,

51 
NULL


53 ià(
sc
 !ð
RTEMS_SUCCESSFUL
) {

54 
	`b¥_çl
(
BSP_ARM_A9MPCORE_FATAL_CLOCK_IRQ_INSTALL
);

56 
	}
}

58 
ut64_t
 
	$a9mpcÜe_þock_g_couÁ
(vÞ©
a9mpcÜe_gt
 *
gt
)

60 
ut32_t
 
þ
;

61 
ut32_t
 
cu1
;

62 
ut32_t
 
cu2
;

65 
cu1
 = 
gt
->
úuµ
;

66 
þ
 = 
gt
->
úlow
;

67 
cu2
 = 
gt
->
úuµ
;

68 } 
cu1
 !ð
cu2
);

70  ((
ut64_t
è
cu2
 << 32è| 
þ
;

71 
	}
}

73 
ut32_t
 
	$a9mpcÜe_þock_g_timecouÁ
(
timecouÁ
 *
tc
)

75 vÞ©
a9mpcÜe_gt
 *
gt
 = 
A9MPCORE_GT
;

77  
gt
->
úlow
;

78 
	}
}

80 
	$a9mpcÜe_þock_lize
()

82 vÞ©
a9mpcÜe_gt
 *
gt
 = 
A9MPCORE_GT
;

83 
ut64_t
 
³rhþk
 = 
	`a9mpcÜe_þock_³rhþk
();

84 
ut64_t
 
us_³r_tick
 = 
	`¹ems_cÚfigu¿tiÚ_g_miüo£cÚds_³r_tick
();

85 
ut32_t
 
rv®
 = (ut32_tè((
³rhþk
 * 
us_³r_tick
) / 1000000);

86 
ut64_t
 
cmpv®
;

88 
gt
->
ù¾
 &ð
A9MPCORE_GT_CTRL_TMR_EN
;

89 
gt
->
q¡
 = 
A9MPCORE_GT_IRQST_EFLG
;

91 
cmpv®
 = 
	`a9mpcÜe_þock_g_couÁ
(
gt
);

92 
cmpv®
 +ð
rv®
;

94 
gt
->
cmpv®low
 = (
ut32_t
è
cmpv®
;

95 
gt
->
cmpv®uµ
 = (
ut32_t
è(
cmpv®
 >> 32);

96 
gt
->
autoc
 = 
rv®
;

98 
gt
->
ù¾
 = 
A9MPCORE_GT_CTRL_AUTOINC_EN


99 | 
A9MPCORE_GT_CTRL_IRQ_EN


100 | 
A9MPCORE_GT_CTRL_COMP_EN


101 | 
A9MPCORE_GT_CTRL_TMR_EN
;

103 
a9mpcÜe_tc
.
tc_g_timecouÁ
 = 
a9mpcÜe_þock_g_timecouÁ
;

104 
a9mpcÜe_tc
.
tc_couÁ_mask
 = 0xffffffff;

105 
a9mpcÜe_tc
.
tc_äequcy
 = 
³rhþk
;

106 
a9mpcÜe_tc
.
tc_qu®y
 = 
RTEMS_TIMECOUNTER_QUALITY_CLOCK_DRIVER
;

107 
	`¹ems_timecouÁ_¡®l
(&
a9mpcÜe_tc
);

108 
	}
}

110 
CPU_CouÁ_ticks
 
	$_CPU_CouÁ_»ad
()

112 vÞ©
a9mpcÜe_gt
 *
gt
 = 
A9MPCORE_GT
;

114  
gt
->
úlow
;

115 
	}
}

117 
	$a9mpcÜe_þock_þnup_i¤
(*
¬g
)

119 vÞ©
a9mpcÜe_gt
 *
gt
 = 
A9MPCORE_GT
;

121 (è
¬g
;

123 
gt
->
ù¾
 &ð
A9MPCORE_GT_CTRL_TMR_EN
;

124 
gt
->
q¡
 = 
A9MPCORE_GT_IRQST_EFLG
;

125 
	}
}

127 
	$a9mpcÜe_þock_þnup
()

129 
¹ems_¡©us_code
 
sc
;

137 
sc
 = 
	`¹ems_¼u±_hªdËr_¡®l
(

138 
A9MPCORE_IRQ_GT
,

140 
RTEMS_INTERRUPT_REPLACE
,

141 
a9mpcÜe_þock_þnup_i¤
,

142 
NULL


144 ià(
sc
 !ð
RTEMS_SUCCESSFUL
) {

145 
	`b¥_çl
(
BSP_ARM_A9MPCORE_FATAL_CLOCK_IRQ_REMOVE
);

147 
	}
}

149 
	#Clock_driv_suµÜt_©_tick
() \

150 
	`a9mpcÜe_þock_©_tick
()

	)

152 
	#Clock_driv_suµÜt_lize_h¬dw¬e
() \

153 
	`a9mpcÜe_þock_lize
()

	)

155 
	#Clock_driv_suµÜt_¡®l_i¤
(
i¤
, 
Þd_i¤
) \

157 
	`a9mpcÜe_þock_hªdËr_¡®l
(); \

158 
Þd_i¤
 = 
NULL
; \

159 } 0)

	)

161 
	#Clock_driv_suµÜt_shutdown_h¬dw¬e
() \

162 
	`a9mpcÜe_þock_þnup
()

	)

165 
	~"../../sh¬ed/þockdrv_shl.h
"

	@src/lib/libbsp/arm/shared/arm-a9mpcore-smp.c

15 
	~<as£¹.h
>

17 
	~<¹ems/scÜe/smpim¶.h
>

19 
	~<libýu/¬m-ý15.h
>

21 
	~<b¥/q.h
>

22 
	~<b¥/lk-symbÞs.h
>

24 
	$b¥_r_´oûssÜ_¼u±
(*
¬g
)

26 
	`_SMP_IÁ_´oûssÜ_¼u±_hªdËr
();

27 
	}
}

29 
ut32_t
 
	$_CPU_SMP_Inlize
()

31 
ut32_t
 
h¬dw¬e_couÁ
 = 
	`¬m_gic_q_´oûssÜ_couÁ
();

32 
ut32_t
 
lk_couÁ
 = (ut32_tè
b¥_´oûssÜ_couÁ
;

34  
h¬dw¬e_couÁ
 <ð
lk_couÁ
 ? hardware_count :inker_count;

35 
	}
}

37 
	$_CPU_SMP_F®ize_liz©iÚ
(
ut32_t
 
ýu_couÁ
)

39 ià(
ýu_couÁ
 > 0) {

40 
¹ems_¡©us_code
 
sc
;

42 
sc
 = 
	`¹ems_¼u±_hªdËr_¡®l
(

43 
ARM_GIC_IRQ_SGI_0
,

45 
RTEMS_INTERRUPT_UNIQUE
,

46 
b¥_r_´oûssÜ_¼u±
,

47 
NULL


49 
	`as£¹
(
sc
 =ð
RTEMS_SUCCESSFUL
);

51 #ià
	`defed
(
BSP_DATA_CACHE_ENABLED
è|| defed(
BSP_INSTRUCTION_CACHE_ENABLED
)

53 
	`¹ems_ÿche_abË_d©a
();

56 
	}
}

58 
	$_CPU_SMP_P»·»_¡¬t_muÉaskg
( )

61 
	}
}

63 
	$_CPU_SMP_Sd_¼u±
Ð
ut32_t
 
rg_´oûssÜ_dex
 )

65 
	`¬m_gic_q_g©e_soáw¬e_q
(

66 
ARM_GIC_IRQ_SGI_0
,

67 
ARM_GIC_IRQ_SOFTWARE_IRQ_TO_ALL_IN_LIST
,

68 (
ut8_t
è(1U << 
rg_´oûssÜ_dex
)

70 
	}
}

	@src/lib/libbsp/arm/shared/arm-cp15-set-exception-handler.c

15 
	~<libýu/¬m-ý15.h
>

17 
	~<b¥/lk-symbÞs.h
>

19 
¬m_ý15_£t_exû±iÚ_hªdËr
(

20 
Arm_symbÞic_exû±iÚ_Çme
 
exû±iÚ
,

21 (*
hªdËr
)()

24 ià((è
exû±iÚ
 < 
MAX_EXCEPTIONS
) {

25 
ut32_t
 *
ýu_bË
 = (ut32_*è0 + 
MAX_EXCEPTIONS
;

26 
ut32_t
 *
mrÜ_bË
 = (ut32_*è
b¥_veùÜ_bË_beg
 + 
MAX_EXCEPTIONS
;

27 
ut32_t
 
cu¼t_hªdËr
 = 
mrÜ_bË
[
exû±iÚ
];

29 ià(
cu¼t_hªdËr
 !ð(
ut32_t
è
hªdËr
) {

30 
size_t
 
bË_size
 = 
MAX_EXCEPTIONS
 * (
ut32_t
);

31 
ut32_t
 
þs
 = 
	`¬m_ý15_g_m_ÿche_le_size
();

32 
ut32_t
 
ù¾
;

33 
¹ems_¼u±_Ëv
 
Ëv
;

35 
	`¹ems_¼u±_loÿl_di§bË
(
Ëv
);

37 
ù¾
 = 
	`¬m_ý15_mmu_di§bË
(
þs
);

39 
mrÜ_bË
[
exû±iÚ
] = (
ut32_t
è
hªdËr
;

41 
	`¹ems_ÿche_æush_muÉË_d©a_les
(
mrÜ_bË
, 
bË_size
);

47 
	`¹ems_ÿche_v®id©e_muÉË_¡ruùiÚ_les
(
mrÜ_bË
, 
bË_size
);

49 
	`¹ems_ÿche_v®id©e_muÉË_¡ruùiÚ_les
(
ýu_bË
, 
bË_size
);

51 
	`¬m_ý15_£t_cÚÞ
(
ù¾
);

53 
	`¹ems_¼u±_loÿl_abË
(
Ëv
);

56 
	}
}

	@src/lib/libbsp/arm/shared/arm-cp15-set-ttb-entries.c

15 
	~<libýu/¬m-ý15.h
>

17 
ut32_t
 
	$£t_ª¦©iÚ_bË_s
(

18 cÚ¡ *
beg
,

19 cÚ¡ *
d
,

20 
ut32_t
 
£ùiÚ_æags


23 
ut32_t
 
þ_size
 = 
	`¬m_ý15_g_m_ÿche_le_size
();

24 
ut32_t
 *
b
 = 
	`¬m_ý15_g_ª¦©iÚ_bË_ba£
();

25 
ut32_t
 
i
 = 
	`ARM_MMU_SECT_GET_INDEX
(
beg
);

26 
ut32_t
 
nd
 = 
	`ARM_MMU_SECT_GET_INDEX
(
	`ARM_MMU_SECT_MVA_ALIGN_UP
(
d
));

27 
ut32_t
 
dex_mask
 = (1U << (32 - 
ARM_MMU_SECT_BASE_SHIFT
)) - 1U;

28 
ut32_t
 
ù¾
;

29 
ut32_t
 
£ùiÚ_æags_of_f¡_y
;

31 
ù¾
 = 
	`¬m_ý15_mmu_di§bË
(
þ_size
);

32 
	`¬m_ý15_b_v®id©e
();

33 
£ùiÚ_æags_of_f¡_y
 = 
b
 [
i
];

35 
i
 !ð
nd
) {

36 
ut32_t
 
addr
 = 
i
 << 
ARM_MMU_SECT_BASE_SHIFT
;

38 
b
 [
i
] = 
addr
 | 
£ùiÚ_æags
;

40 
i
 = (+ 1Uè& 
dex_mask
;

43 
	`¬m_ý15_£t_cÚÞ
(
ù¾
);

45  
£ùiÚ_æags_of_f¡_y
;

46 
	}
}

48 
ut32_t
 
	$¬m_ý15_£t_ª¦©iÚ_bË_s
(

49 cÚ¡ *
beg
,

50 cÚ¡ *
d
,

51 
ut32_t
 
£ùiÚ_æags


54 
¹ems_¼u±_Ëv
 
Ëv
;

55 
ut32_t
 
£ùiÚ_æags_of_f¡_y
;

57 
	`¹ems_¼u±_di§bË
(
Ëv
);

58 
£ùiÚ_æags_of_f¡_y
 =

59 
	`£t_ª¦©iÚ_bË_s
(
beg
, 
d
, 
£ùiÚ_æags
);

60 
	`¹ems_¼u±_abË
(
Ëv
);

62  
£ùiÚ_æags_of_f¡_y
;

63 
	}
}

	@src/lib/libbsp/arm/shared/arm-gic-irq.c

15 
	~<b¥/¬m-gic.h
>

17 
	~<¹ems/scÜe/¬mv4.h
>

19 
	~<libýu/¬m-ý15.h
>

21 
	~<b¥/q.h
>

22 
	~<b¥/q-gic.h
>

23 
	~<b¥/¡¬t.h
>

25 
	#GIC_CPUIF
 ((vÞ©
gic_ýuif
 *è
BSP_ARM_GIC_CPUIF_BASE
)

	)

27 
	#PRIORITY_DEFAULT
 127

	)

29 
	$b¥_¼u±_di¥©ch
()

31 vÞ©
gic_ýuif
 *
ýuif
 = 
GIC_CPUIF
;

32 
ut32_t
 
iccr
 = 
ýuif
->icciar;

33 
¹ems_veùÜ_numb
 
veùÜ
 = 
	`GIC_CPUIF_ICCIAR_ACKINTID_GET
(
iccr
);

34 
¹ems_veùÜ_numb
 
¥urious
 = 1023;

36 ià(
veùÜ
 !ð
¥urious
) {

37 
ut32_t
 
p¤
 = 
	`_ARMV4_Stus_q_abË
();

39 
	`b¥_¼u±_hªdËr_di¥©ch
(
veùÜ
);

41 
	`_ARMV4_Stus_»¡Üe
(
p¤
);

43 
ýuif
->
icûo
 = 
iccr
;

45 
	}
}

47 
¹ems_¡©us_code
 
	$b¥_¼u±_veùÜ_abË
(
¹ems_veùÜ_numb
 
veùÜ
)

49 
¹ems_¡©us_code
 
sc
 = 
RTEMS_SUCCESSFUL
;

51 ià(
	`b¥_¼u±_is_v®id_veùÜ
(
veùÜ
)) {

52 vÞ©
gic_di¡
 *
di¡
 = 
ARM_GIC_DIST
;

54 
	`gic_id_abË
(
di¡
, 
veùÜ
);

56 
sc
 = 
RTEMS_INVALID_ID
;

59  
sc
;

60 
	}
}

62 
¹ems_¡©us_code
 
	$b¥_¼u±_veùÜ_di§bË
(
¹ems_veùÜ_numb
 
veùÜ
)

64 
¹ems_¡©us_code
 
sc
 = 
RTEMS_SUCCESSFUL
;

66 ià(
	`b¥_¼u±_is_v®id_veùÜ
(
veùÜ
)) {

67 vÞ©
gic_di¡
 *
di¡
 = 
ARM_GIC_DIST
;

69 
	`gic_id_di§bË
(
di¡
, 
veùÜ
);

71 
sc
 = 
RTEMS_INVALID_ID
;

74  
sc
;

75 
	}
}

77 
le
 
ut32_t
 
	$g_id_couÁ
(vÞ©
gic_di¡
 *
di¡
)

79 
ut32_t
 
id_couÁ
 = 
	`GIC_DIST_ICDICTR_IT_LINES_NUMBER_GET
(
di¡
->
icdiùr
);

81 
id_couÁ
 = 32 * (id_count + 1);

82 
id_couÁ
 = id_count <= 1020 ? id_count : 1020;

84  
id_couÁ
;

85 
	}
}

87 
¹ems_¡©us_code
 
	$b¥_¼u±_çcy_lize
()

89 vÞ©
gic_ýuif
 *
ýuif
 = 
GIC_CPUIF
;

90 vÞ©
gic_di¡
 *
di¡
 = 
ARM_GIC_DIST
;

91 
ut32_t
 
id_couÁ
 = 
	`g_id_couÁ
(
di¡
);

92 
ut32_t
 
id
;

94 
	`¬m_ý15_£t_exû±iÚ_hªdËr
(

95 
ARM_EXCEPTION_IRQ
,

96 
_ARMV4_Exû±iÚ_¼u±


99 
id
 = 0; id < 
id_couÁ
; ++id) {

100 
	`gic_id_£t_´iÜy
(
di¡
, 
id
, 
PRIORITY_DEFAULT
);

103 
id
 = 32; id < 
id_couÁ
; ++id) {

104 
	`gic_id_£t_rgs
(
di¡
, 
id
, 0x01);

107 
ýuif
->
icýmr
 = 
	`GIC_CPUIF_ICCPMR_PRIORITY
(0xff);

108 
ýuif
->
iccb´
 = 
	`GIC_CPUIF_ICCBPR_BINARY_POINT
(0x0);

109 
ýuif
->
icciü
 = 
GIC_CPUIF_ICCICR_ENABLE
;

111 
di¡
->
icddü
 = 
GIC_DIST_ICDDCR_ENABLE
;

113  
RTEMS_SUCCESSFUL
;

114 
	}
}

116 #ifdeà
RTEMS_SMP


117 
BSP_START_TEXT_SECTION
 
	$¬m_gic_q_lize_£cÚd¬y_ýu
()

119 vÞ©
gic_ýuif
 *
ýuif
 = 
GIC_CPUIF
;

120 vÞ©
gic_di¡
 *
di¡
 = 
ARM_GIC_DIST
;

122 (
di¡
->
icddü
 & 
GIC_DIST_ICDDCR_ENABLE
) == 0) {

126 
ýuif
->
icýmr
 = 
	`GIC_CPUIF_ICCPMR_PRIORITY
(0xff);

127 
ýuif
->
iccb´
 = 
	`GIC_CPUIF_ICCBPR_BINARY_POINT
(0x0);

128 
ýuif
->
icciü
 = 
GIC_CPUIF_ICCICR_ENABLE
;

129 
	}
}

132 
¹ems_¡©us_code
 
	$¬m_gic_q_£t_´iÜy
(

133 
¹ems_veùÜ_numb
 
veùÜ
,

134 
ut8_t
 
´iÜy


137 
¹ems_¡©us_code
 
sc
 = 
RTEMS_SUCCESSFUL
;

139 ià(
	`b¥_¼u±_is_v®id_veùÜ
(
veùÜ
)) {

140 vÞ©
gic_di¡
 *
di¡
 = 
ARM_GIC_DIST
;

142 
	`gic_id_£t_´iÜy
(
di¡
, 
veùÜ
, 
´iÜy
);

144 
sc
 = 
RTEMS_INVALID_ID
;

147  
sc
;

148 
	}
}

150 
¹ems_¡©us_code
 
	$¬m_gic_q_g_´iÜy
(

151 
¹ems_veùÜ_numb
 
veùÜ
,

152 
ut8_t
 *
´iÜy


155 
¹ems_¡©us_code
 
sc
 = 
RTEMS_SUCCESSFUL
;

157 ià(
	`b¥_¼u±_is_v®id_veùÜ
(
veùÜ
)) {

158 vÞ©
gic_di¡
 *
di¡
 = 
ARM_GIC_DIST
;

160 *
´iÜy
 = 
	`gic_id_g_´iÜy
(
di¡
, 
veùÜ
);

162 
sc
 = 
RTEMS_INVALID_ID
;

165  
sc
;

166 
	}
}

	@src/lib/libbsp/arm/shared/arm-l2c-310/cache_.h

56 #iâdeà
LIBBSP_ARM_SHARED_L2C_310_CACHE_H


57 
	#LIBBSP_ARM_SHARED_L2C_310_CACHE_H


	)

59 
	~<as£¹.h
>

60 
	~<b¥.h
>

61 
	~<b¥/çl.h
>

62 
	~<libýu/¬m-ý15.h
>

63 
	~<¹ems/¹ems/.h
>

64 
	~<b¥/¬m-»Ëa£-id.h
>

65 
	~<b¥/¬m-¿.h
>

66 
	~"../þude/¬m-ÿche-l1.h
"

68 #ifdeà
__ýlu¥lus


73 
	#CPU_DATA_CACHE_ALIGNMENT
 
ARM_CACHE_L1_CPU_DATA_ALIGNMENT


	)

74 
	#CPU_INSTRUCTION_CACHE_ALIGNMENT
 
ARM_CACHE_L1_CPU_INSTRUCTION_ALIGNMENT


	)

75 
	#CPU_CACHE_SUPPORT_PROVIDES_RANGE_FUNCTIONS
 \

76 
ARM_CACHE_L1_CPU_SUPPORT_PROVIDES_RANGE_FUNCTIONS


	)

77 
	#CPU_CACHE_SUPPORT_PROVIDES_CACHE_SIZE_FUNCTIONS


	)

79 
	#L2C_310_DATA_LINE_MASK
 ( 
CPU_DATA_CACHE_ALIGNMENT
 - 1 )

	)

80 
	#L2C_310_INSTRUCTION_LINE_MASK
 \

81 Ð
CPU_INSTRUCTION_CACHE_ALIGNMENT
 \

82 - 1 )

	)

83 
	#L2C_310_NUM_WAYS
 8

	)

84 
	#L2C_310_WAY_MASK
 ( ( 1 << 
L2C_310_NUM_WAYS
 ) - 1 )

	)

86 
	#L2C_310_MIN
Ð
a
, 
b
 ) \

87 ((
a
 < 
b
è? (aè: (b))

	)

89 
	#L2C_310_MAX_LOCKING_BYTES
 (4 * 1024)

	)

93 
	#L2C_310_RTL_RELEASE_R0_P0
 0x0

	)

94 
	#L2C_310_RTL_RELEASE_R1_P0
 0x2

	)

95 
	#L2C_310_RTL_RELEASE_R2_P0
 0x4

	)

96 
	#L2C_310_RTL_RELEASE_R3_P0
 0x5

	)

97 
	#L2C_310_RTL_RELEASE_R3_P1
 0x6

	)

98 
	#L2C_310_RTL_RELEASE_R3_P2
 0x8

	)

99 
	#L2C_310_RTL_RELEASE_R3_P3
 0x9

	)

101 
	#BSP_ARM_L2C_310_RTL_RELEASE
 (
BSP_ARM_L2C_310_ID
 & 
L2C_310_ID_RTL_MASK
)

	)

116 
ut32_t
 
ÿche_id
;

117 
	#L2C_310_ID_RTL_MASK
 0x3f

	)

118 
	#L2C_310_ID_PART_MASK
 ( 0xà<< 6 )

	)

119 
	#L2C_310_ID_PART_L210
 ( 1 << 6 )

	)

120 
	#L2C_310_ID_PART_L310
 ( 3 << 6 )

	)

121 
	#L2C_310_ID_IMPL_MASK
 ( 0xfà<< 24 )

	)

123 
ut32_t
 
ÿche_ty³
;

125 
	#L2C_310_TYPE_DATA_BANKING_MASK
 0x80000000

	)

127 
	#L2C_310_TYPE_CTYPE_MASK
 0x1E000000

	)

129 
	#L2C_310_TYPE_CTYPE_SHIFT
 25

	)

131 
	#L2C_310_TYPE_HARVARD_MASK
 0x01000000

	)

133 
	#L2C_310_TYPE_SIZE_D_WAYS_MASK
 0x00700000

	)

134 
	#L2C_310_TYPE_SIZE_D_WAYS_SHIFT
 20

	)

136 
	#L2C_310_TYPE_NUM_D_WAYS_MASK
 0x00040000

	)

137 
	#L2C_310_TYPE_NUM_D_WAYS_SHIFT
 18

	)

139 
	#L2C_310_TYPE_LENGTH_D_LINE_MASK
 0x00003000

	)

140 
	#L2C_310_TYPE_LENGTH_D_LINE_SHIFT
 12

	)

141 
	#L2C_310_TYPE_LENGTH_D_LINE_VAL_32
 0x0

	)

143 
	#L2C_310_TYPE_SIZE_I_WAYS_MASK
 0x00000700

	)

144 
	#L2C_310_TYPE_SIZE_I_WAYS_SHIFT
 8

	)

146 
	#L2C_310_TYPE_NUM_I_WAYS_MASK
 0x00000040

	)

147 
	#L2C_310_TYPE_NUM_I_WAYS_SHIFT
 6

	)

149 
	#L2C_310_TYPE_LENGTH_I_LINE_MASK
 0x00000003

	)

150 
	#L2C_310_TYPE_LENGTH_I_LINE_SHIFT
 0

	)

151 
	#L2C_310_TYPE_LENGTH_I_LINE_VAL_32
 0x0

	)

153 
ut8_t
 
»£rved_8
[0x100 - 8];

154 
ut32_t
 
ù¾
;

156 
	#L2C_310_CTRL_ENABLE
 0x00000001

	)

158 
	#L2C_310_CTRL_EXCL_CONFIG
 (1 << 12)

	)

161 
ut32_t
 
aux_ù¾
;

164 
	#L2C_310_AUX_EBRESPE_MASK
 0x40000000

	)

167 
	#L2C_310_AUX_IPFE_MASK
 0x20000000

	)

170 
	#L2C_310_AUX_DPFE_MASK
 0x10000000

	)

173 
	#L2C_310_AUX_NSIC_MASK
 0x08000000

	)

176 
	#L2C_310_AUX_NSLE_MASK
 0x04000000

	)

179 
	#L2C_310_AUX_CRP_MASK
 0x02000000

	)

182 
	#L2C_310_AUX_FWE_MASK
 0x01800000

	)

185 
	#L2C_310_AUX_SAOE_MASK
 0x00400000

	)

188 
	#L2C_310_AUX_PE_MASK
 0x00200000

	)

191 
	#L2C_310_AUX_EMBE_MASK
 0x00100000

	)

194 
	#L2C_310_AUX_WAY_SIZE_MASK
 0x000E0000

	)

195 
	#L2C_310_AUX_WAY_SIZE_SHIFT
 17

	)

198 
	#L2C_310_AUX_ASSOC_MASK
 0x00010000

	)

201 
	#L2C_310_AUX_SAIE_MASK
 0x00002000

	)

204 
	#L2C_310_AUX_EXCL_CACHE_MASK
 0x00001000

	)

207 
	#L2C_310_AUX_SBDLE_MASK
 0x00000800

	)

210 
	#L2C_310_AUX_HPSODRE_MASK
 0x00000400

	)

213 
	#L2C_310_AUX_FLZE_MASK
 0x00000001

	)

216 
	#L2C_310_AUX_REG_DEFAULT_MASK
 \

217 Ð
L2C_310_AUX_WAY_SIZE_MASK
 & ( 0x3 << 
L2C_310_AUX_WAY_SIZE_SHIFT
 ) ) \

218 | 
L2C_310_AUX_PE_MASK
 \

219 | 
L2C_310_AUX_SAOE_MASK
 \

220 | 
L2C_310_AUX_CRP_MASK
 \

221 | 
L2C_310_AUX_DPFE_MASK
 \

222 | 
L2C_310_AUX_IPFE_MASK
 \

223 | 
L2C_310_AUX_EBRESPE_MASK


	)

225 
	#L2C_310_AUX_REG_ZERO_MASK
 0xFFF1FFFF

	)

228 
	#L2C_310_RAM_1_CYCLE_LAT_VAL
 0x00000000

	)

230 
	#L2C_310_RAM_2_CYCLE_LAT_VAL
 0x00000001

	)

232 
	#L2C_310_RAM_3_CYCLE_LAT_VAL
 0x00000002

	)

234 
	#L2C_310_RAM_4_CYCLE_LAT_VAL
 0x00000003

	)

236 
	#L2C_310_RAM_5_CYCLE_LAT_VAL
 0x00000004

	)

238 
	#L2C_310_RAM_6_CYCLE_LAT_VAL
 0x00000005

	)

240 
	#L2C_310_RAM_7_CYCLE_LAT_VAL
 0x00000006

	)

242 
	#L2C_310_RAM_8_CYCLE_LAT_VAL
 0x00000007

	)

244 
	#L2C_310_RAM_SETUP_SHIFT
 0x00000000

	)

246 
	#L2C_310_RAM_READ_SHIFT
 0x00000004

	)

248 
	#L2C_310_RAM_WRITE_SHIFT
 0x00000008

	)

250 
	#L2C_310_RAM_SETUP_LAT_MASK
 0x00000007

	)

252 
	#L2C_310_RAM_READ_LAT_MASK
 0x00000070

	)

254 
	#L2C_310_RAM_WRITE_LAT_MASK
 0x00000700

	)

256 
ut32_t
 
g_¿m_ù¾
;

258 
	#L2C_310_TAG_RAM_DEFAULT_LAT
 \

259 ÐÐ
L2C_310_RAM_2_CYCLE_LAT_VAL
 << 
L2C_310_RAM_SETUP_SHIFT
 ) \

260 | ( 
L2C_310_RAM_2_CYCLE_LAT_VAL
 << 
L2C_310_RAM_READ_SHIFT
 ) \

261 | ( 
L2C_310_RAM_2_CYCLE_LAT_VAL
 << 
L2C_310_RAM_WRITE_SHIFT
 ) )

	)

263 
ut32_t
 
d©a_¿m_ù¾
;

265 
	#L2C_310_DATA_RAM_DEFAULT_MASK
 \

266 ÐÐ
L2C_310_RAM_2_CYCLE_LAT_VAL
 << 
L2C_310_RAM_SETUP_SHIFT
 ) \

267 | ( 
L2C_310_RAM_3_CYCLE_LAT_VAL
 << 
L2C_310_RAM_READ_SHIFT
 ) \

268 | ( 
L2C_310_RAM_2_CYCLE_LAT_VAL
 << 
L2C_310_RAM_WRITE_SHIFT
 ) )

	)

270 
ut8_t
 
»£rved_110
[0x200 - 0x110];

273 
ut32_t
 
ev_ù¾
;

276 
ut32_t
 
ev_út1_cfg
;

279 
ut32_t
 
ev_út0_cfg
;

282 
ut32_t
 
ev_út1
;

285 
ut32_t
 
ev_út0
;

288 
ut32_t
 
t_mask
;

291 
ut32_t
 
t_mask_¡©us
;

294 
ut32_t
 
t_¿w_¡©us
;

297 
ut32_t
 
t_þr
;

306 
	#L2C_310_INT_DECERR_MASK
 0x00000100

	)

309 
	#L2C_310_INT_SLVERR_MASK
 0x00000080

	)

312 
	#L2C_310_INT_ERRRD_MASK
 0x00000040

	)

315 
	#L2C_310_INT_ERRRT_MASK
 0x00000020

	)

318 
	#L2C_310_INT_ERRWD_MASK
 0x00000010

	)

321 
	#L2C_310_INT_ERRWT_MASK
 0x00000008

	)

324 
	#L2C_310_INT_PARRD_MASK
 0x00000004

	)

327 
	#L2C_310_INT_PARRT_MASK
 0x00000002

	)

330 
	#L2C_310_INT_ECNTR_MASK
 0x00000001

	)

334 
ut8_t
 
»£rved_224
[0x730 - 0x224];

337 
ut32_t
 
ÿche_sync
;

338 
ut8_t
 
»£rved_734
[0x740 - 0x734];

340 
ut32_t
 
dummy_ÿche_sync_»g
;

341 
ut8_t
 
»£rved_744
[0x770 - 0x744];

344 
ut32_t
 
v_·
;

345 
ut8_t
 
»£rved_774
[0x77c - 0x774];

348 
ut32_t
 
v_way
;

349 
ut8_t
 
»£rved_780
[0x7b0 - 0x780];

352 
ut32_t
 
þn_·
;

353 
ut8_t
 
»£rved_7b4
[0x7b8 - 0x7b4];

356 
ut32_t
 
þn_dex
;

359 
ut32_t
 
þn_way
;

360 
ut8_t
 
»£rved_7c0
[0x7f0 - 0x7c0];

363 
ut32_t
 
þn_v_·
;

364 
ut8_t
 
»£rved_7f4
[0x7f8 - 0x7f4];

367 
ut32_t
 
þn_v_dx
;

370 
ut32_t
 
þn_v_way
;

373 
ut32_t
 
d_lockdown_0
;

376 
ut32_t
 
i_lockdown_0
;

379 
ut32_t
 
d_lockdown_1
;

382 
ut32_t
 
i_lockdown_1
;

385 
ut32_t
 
d_lockdown_2
;

388 
ut32_t
 
i_lockdown_2
;

391 
ut32_t
 
d_lockdown_3
;

394 
ut32_t
 
i_lockdown_3
;

397 
ut32_t
 
d_lockdown_4
;

400 
ut32_t
 
i_lockdown_4
;

403 
ut32_t
 
d_lockdown_5
;

406 
ut32_t
 
i_lockdown_5
;

409 
ut32_t
 
d_lockdown_6
;

412 
ut32_t
 
i_lockdown_6
;

415 
ut32_t
 
d_lockdown_7
;

418 
ut32_t
 
i_lockdown_7
;

420 
ut8_t
 
»£rved_940
[0x950 - 0x940];

423 
ut32_t
 
lock_le_
;

426 
ut32_t
 
uÆock_way
;

428 
ut8_t
 
»£rved_958
[0xc00 - 0x958];

431 
ut32_t
 
addr_frg_¡¬t
;

434 
ut32_t
 
addr_frg_d
;

437 
	#L2C_310_ADDR_FILTER_VALID_MASK
 0xFFF00000

	)

440 
	#L2C_310_ADDR_FILTER_ENABLE_MASK
 0x00000001

	)

442 
ut8_t
 
»£rved_c08
[0xf40 - 0xc08];

445 
ut32_t
 
debug_ù¾
;

448 
	#L2C_310_DEBUG_SPIDEN_MASK
 0x00000004

	)

451 
	#L2C_310_DEBUG_DWB_MASK
 0x00000002

	)

454 
	#L2C_310_DEBUG_DCL_MASK
 0x00000002

	)

456 
ut8_t
 
»£rved_f44
[0xf60 - 0xf44];

459 
ut32_t
 
´eãtch_ù¾
;

461 
	#L2C_310_PREFETCH_OFFSET_MASK
 0x0000001F

	)

462 
ut8_t
 
»£rved_f64
[0xf80 - 0xf64];

465 
ut32_t
 
pow_ù¾
;

466 } 
	tL2CC
;

468 
¹ems_¼u±_lock
 
l2c_310_lock
 = 
RTEMS_INTERRUPT_LOCK_INITIALIZER
(

482 #ià
BSP_ARM_L2C_310_RTL_RELEASE
 =ð
L2C_310_RTL_RELEASE_R3_P0


483 
	#L2C_310_ERRATA_IS_APPLICABLE_753970


	)

486 
boÞ
 
l2c_310_¿_is_­¶iÿbË_727913
(

487 
ut32_t
 
¹l_»Ëa£


490 
boÞ
 
is_­¶iÿbË
 = 
çl£
;

492  
¹l_»Ëa£
 ) {

493 
L2C_310_RTL_RELEASE_R3_P3
:

494 
L2C_310_RTL_RELEASE_R3_P2
:

495 
L2C_310_RTL_RELEASE_R3_P1
:

496 
L2C_310_RTL_RELEASE_R2_P0
:

497 
L2C_310_RTL_RELEASE_R1_P0
:

498 
L2C_310_RTL_RELEASE_R0_P0
:

499 
is_­¶iÿbË
 = 
çl£
;

501 
L2C_310_RTL_RELEASE_R3_P0
:

502 
is_­¶iÿbË
 = 
ue
;

505 
as£¹
( 0 );

509  
is_­¶iÿbË
;

512 
boÞ
 
l2c_310_¿_is_­¶iÿbË_727914
(

513 
ut32_t
 
¹l_»Ëa£


516 
boÞ
 
is_­¶iÿbË
 = 
çl£
;

518  
¹l_»Ëa£
 ) {

519 
L2C_310_RTL_RELEASE_R3_P3
:

520 
L2C_310_RTL_RELEASE_R3_P2
:

521 
L2C_310_RTL_RELEASE_R3_P1
:

522 
L2C_310_RTL_RELEASE_R2_P0
:

523 
L2C_310_RTL_RELEASE_R1_P0
:

524 
L2C_310_RTL_RELEASE_R0_P0
:

525 
is_­¶iÿbË
 = 
çl£
;

527 
L2C_310_RTL_RELEASE_R3_P0
:

528 
is_­¶iÿbË
 = 
ue
;

531 
as£¹
( 0 );

535  
is_­¶iÿbË
;

538 
boÞ
 
l2c_310_¿_is_­¶iÿbË_727915
(

539 
ut32_t
 
¹l_»Ëa£


542 
boÞ
 
is_­¶iÿbË
 = 
çl£
;

544  
¹l_»Ëa£
 ) {

545 
L2C_310_RTL_RELEASE_R3_P3
:

546 
L2C_310_RTL_RELEASE_R3_P2
:

547 
L2C_310_RTL_RELEASE_R3_P1
:

548 
L2C_310_RTL_RELEASE_R1_P0
:

549 
L2C_310_RTL_RELEASE_R0_P0
:

550 
is_­¶iÿbË
 = 
çl£
;

552 
L2C_310_RTL_RELEASE_R3_P0
:

553 
L2C_310_RTL_RELEASE_R2_P0
:

554 
is_­¶iÿbË
 = 
ue
;

557 
as£¹
( 0 );

561  
is_­¶iÿbË
;

564 
boÞ
 
l2c_310_¿_is_­¶iÿbË_729806
(

565 
ut32_t
 
¹l_»Ëa£


568 
boÞ
 
is_­¶iÿbË
 = 
çl£
;

570  
¹l_»Ëa£
 ) {

571 
L2C_310_RTL_RELEASE_R3_P3
:

572 
L2C_310_RTL_RELEASE_R3_P2
:

573 
L2C_310_RTL_RELEASE_R2_P0
:

574 
L2C_310_RTL_RELEASE_R1_P0
:

575 
L2C_310_RTL_RELEASE_R0_P0
:

576 
is_­¶iÿbË
 = 
çl£
;

578 
L2C_310_RTL_RELEASE_R3_P1
:

579 
L2C_310_RTL_RELEASE_R3_P0
:

580 
is_­¶iÿbË
 = 
ue
;

583 
as£¹
( 0 );

587  
is_­¶iÿbË
;

590 
boÞ
 
l2c_310_¿_is_­¶iÿbË_729815
(

591 
ut32_t
 
¹l_»Ëa£


594 
boÞ
 
is_­¶iÿbË
 = 
çl£
;

596  
¹l_»Ëa£
 ) {

597 
L2C_310_RTL_RELEASE_R3_P3
:

598 
L2C_310_RTL_RELEASE_R1_P0
:

599 
L2C_310_RTL_RELEASE_R0_P0
:

600 
is_­¶iÿbË
 = 
çl£
;

602 
L2C_310_RTL_RELEASE_R3_P2
:

603 
L2C_310_RTL_RELEASE_R3_P1
:

604 
L2C_310_RTL_RELEASE_R3_P0
:

605 
L2C_310_RTL_RELEASE_R2_P0
:

606 
is_­¶iÿbË
 = 
ue
;

609 
as£¹
( 0 );

613  
is_­¶iÿbË
;

616 
boÞ
 
l2c_310_¿_is_­¶iÿbË_742884
(

617 
ut32_t
 
¹l_»Ëa£


620 
boÞ
 
is_­¶iÿbË
 = 
çl£
;

622  
¹l_»Ëa£
 ) {

623 
L2C_310_RTL_RELEASE_R3_P3
:

624 
L2C_310_RTL_RELEASE_R3_P2
:

625 
L2C_310_RTL_RELEASE_R3_P0
:

626 
L2C_310_RTL_RELEASE_R2_P0
:

627 
L2C_310_RTL_RELEASE_R1_P0
:

628 
L2C_310_RTL_RELEASE_R0_P0
:

629 
is_­¶iÿbË
 = 
çl£
;

631 
L2C_310_RTL_RELEASE_R3_P1
:

632 
is_­¶iÿbË
 = 
ue
;

635 
as£¹
( 0 );

639  
is_­¶iÿbË
;

642 
boÞ
 
l2c_310_¿_is_­¶iÿbË_752271
(

643 
ut32_t
 
¹l_»Ëa£


646 
boÞ
 
is_­¶iÿbË
 = 
çl£
;

648  
¹l_»Ëa£
 ) {

649 
L2C_310_RTL_RELEASE_R3_P3
:

650 
L2C_310_RTL_RELEASE_R3_P2
:

651 
L2C_310_RTL_RELEASE_R2_P0
:

652 
L2C_310_RTL_RELEASE_R1_P0
:

653 
L2C_310_RTL_RELEASE_R0_P0
:

654 
is_­¶iÿbË
 = 
çl£
;

656 
L2C_310_RTL_RELEASE_R3_P1
:

657 
L2C_310_RTL_RELEASE_R3_P0
:

658 
is_­¶iÿbË
 = 
ue
;

661 
as£¹
( 0 );

665  
is_­¶iÿbË
;

668 
boÞ
 
l2c_310_¿_is_­¶iÿbË_765569
(

669 
ut32_t
 
¹l_»Ëa£


672 
boÞ
 
is_­¶iÿbË
 = 
çl£
;

674  
¹l_»Ëa£
 ) {

675 
L2C_310_RTL_RELEASE_R3_P3
:

676 
L2C_310_RTL_RELEASE_R3_P2
:

677 
L2C_310_RTL_RELEASE_R3_P1
:

678 
L2C_310_RTL_RELEASE_R3_P0
:

679 
L2C_310_RTL_RELEASE_R2_P0
:

680 
L2C_310_RTL_RELEASE_R1_P0
:

681 
L2C_310_RTL_RELEASE_R0_P0
:

682 
is_­¶iÿbË
 = 
ue
;

685 
as£¹
( 0 );

689  
is_­¶iÿbË
;

692 
boÞ
 
l2c_310_¿_is_­¶iÿbË_769419
(

693 
ut32_t
 
¹l_»Ëa£


696 
boÞ
 
is_­¶iÿbË
 = 
çl£
;

698  
¹l_»Ëa£
 ) {

699 
L2C_310_RTL_RELEASE_R3_P3
:

700 
L2C_310_RTL_RELEASE_R3_P2
:

701 
is_­¶iÿbË
 = 
çl£
;

703 
L2C_310_RTL_RELEASE_R3_P1
:

704 
L2C_310_RTL_RELEASE_R3_P0
:

705 
L2C_310_RTL_RELEASE_R2_P0
:

706 
L2C_310_RTL_RELEASE_R1_P0
:

707 
L2C_310_RTL_RELEASE_R0_P0
:

708 
is_­¶iÿbË
 = 
ue
;

711 
as£¹
( 0 );

715  
is_­¶iÿbË
;

718 #ià
BSP_ARM_L2C_310_RTL_RELEASE
 =ð
L2C_310_RTL_RELEASE_R0_P0
 \

719 || 
BSP_ARM_L2C_310_RTL_RELEASE
 =ð
L2C_310_RTL_RELEASE_R1_P0


720 
	#L2C_310_ERRATA_IS_APPLICABLE_588369


	)

723 #ifdeà
CACHE_ERRATA_CHECKS_FOR_IMPLEMENTED_ERRATAS


724 
boÞ
 
l2c_310_¿_is_­¶iÿbË_754670
(

725 
ut32_t
 
¹l_»Ëa£


728 
boÞ
 
is_­¶iÿbË
 = 
çl£
;

730  
¹l_»Ëa£
 ) {

731 
L2C_310_RTL_RELEASE_R3_P3
:

732 
L2C_310_RTL_RELEASE_R3_P2
:

733 
L2C_310_RTL_RELEASE_R3_P1
:

734 
L2C_310_RTL_RELEASE_R3_P0
:

735 
L2C_310_RTL_RELEASE_R2_P0
:

736 
L2C_310_RTL_RELEASE_R1_P0
:

737 
L2C_310_RTL_RELEASE_R0_P0
:

738 
is_­¶iÿbË
 = 
ue
;

741 
as£¹
( 0 );

745  
is_­¶iÿbË
;

753 
	#CACHE_ARM_ERRATA_775420_HANDLER
() \

754 ifÐ
¬m_¿_is_­¶iÿbË_´oûssÜ_¿_775420
 ) { \

756 

	)

757 
l2c_310_check_¿
Ð
ut32_t
 
¹l_»Ëa£
 )

768 
as£¹
Ð! 
l2c_310_¿_is_­¶iÿbË_727913
Ð
¹l_»Ëa£
 ) );

772 
as£¹
Ð! 
l2c_310_¿_is_­¶iÿbË_727914
Ð
¹l_»Ëa£
 ) );

776 
as£¹
Ð! 
l2c_310_¿_is_­¶iÿbË_727915
Ð
¹l_»Ëa£
 ) );

780 
as£¹
Ð! 
l2c_310_¿_is_­¶iÿbË_729806
Ð
¹l_»Ëa£
 ) );

782 ifÐ
l2c_310_¿_is_­¶iÿbË_729815
Ð
¹l_»Ëa£
 ) )

784 vÞ©
L2CC
 *
l2cc
 = (vÞ©L2CC *è
BSP_ARM_L2C_310_BASE
;

786 
as£¹
Ð0 =ðÐ
l2cc
->
aux_ù¾
 & 
L2C_310_AUX_HPSODRE_MASK
 ) );

807 
as£¹
Ð! 
l2c_310_¿_is_­¶iÿbË_742884
Ð
¹l_»Ëa£
 ) );

811 
as£¹
Ð! 
l2c_310_¿_is_­¶iÿbË_752271
Ð
¹l_»Ëa£
 ) );

818 ifÐ
l2c_310_¿_is_­¶iÿbË_765569
Ð
¹l_»Ëa£
 ) )

820 vÞ©
L2CC
 *
l2cc
 = (vÞ©L2CC *è
BSP_ARM_L2C_310_BASE
;

822 
as£¹
Ð!ÐÐ
l2cc
->
aux_ù¾
 & 
L2C_310_AUX_IPFE_MASK


823 || 
l2cc
->
aux_ù¾
 & 
L2C_310_AUX_DPFE_MASK
 )

824 && ( ( 
l2cc
->
´eãtch_ù¾
 & 
L2C_310_PREFETCH_OFFSET_MASK
 )

842 
as£¹
Ð! 
l2c_310_¿_is_­¶iÿbË_769419
Ð
¹l_»Ëa£
 ) );

845 
le
 

846 
l2c_310_sync
ÐvÞ©
L2CC
 *
l2cc
 )

848 #ifdeà
L2C_310_ERRATA_IS_APPLICABLE_753970


849 
l2cc
->
dummy_ÿche_sync_»g
 = 0;

851 
l2cc
->
ÿche_sync
 = 0;

855 
le
 

856 
l2c_310_æush_1_le
ÐvÞ©
L2CC
 *
l2cc
, 
ut32_t
 
d_addr
 )

858 #ifdeà
L2C_310_ERRATA_IS_APPLICABLE_588369


865 
l2cc
->
þn_·
 = 
d_addr
;

866 
l2c_310_sync
Ð
l2cc
 );

867 
l2cc
->
v_·
 = 
d_addr
;

869 
l2cc
->
þn_v_·
 = 
d_addr
;

873 
le
 

874 
l2c_310_æush_¿nge
ÐcÚ¡ * 
d_addr
, cÚ¡ 
size_t
 
n_bys
 )

877 
ut32_t
 
adx
 = (ut32_t)
d_addr


878 & ~
L2C_310_DATA_LINE_MASK
;

879 cÚ¡ 
ut32_t
 
ADDR_LAST
 =

880 (
ut32_t
)Ð(
size_t
)
d_addr
 + 
n_bys
 - 1 );

881 
ut32_t
 
block_d
 =

882 
L2C_310_MIN
Ð
ADDR_LAST
, 
adx
 + 
L2C_310_MAX_LOCKING_BYTES
 );

883 vÞ©
L2CC
 *
l2cc
 = (vÞ©L2CC *è
BSP_ARM_L2C_310_BASE
;

885 iàÐ
n_bys
 == 0 ) {

890 
adx
 <ð
ADDR_LAST
;

891 
adx
 = 
block_d
 + 1,

892 
block_d
 = 
L2C_310_MIN
Ð
ADDR_LAST
, 
adx
 + 
L2C_310_MAX_LOCKING_BYTES
 )) {

893 
¹ems_¼u±_lock_cÚxt
 
lock_cÚxt
;

895 
¹ems_¼u±_lock_acque
Ð&
l2c_310_lock
, &
lock_cÚxt
 );

897 ; 
adx
 <ð
block_d
;dx +ð
CPU_DATA_CACHE_ALIGNMENT
 ) {

898 
l2c_310_æush_1_le
Ð
l2cc
, 
adx
 );

901 
l2c_310_sync
Ð
l2cc
 );

903 
¹ems_¼u±_lock_»Ëa£
Ð&
l2c_310_lock
, &
lock_cÚxt
 );

907 
le
 

908 
l2c_310_æush_te
( )

910 vÞ©
L2CC
 *
l2cc
 = (vÞ©L2CC *è
BSP_ARM_L2C_310_BASE
;

911 
¹ems_¼u±_lock_cÚxt
 
lock_cÚxt
;

914 ifÐÐ
l2cc
->
ù¾
 & 
L2C_310_CTRL_ENABLE
 ) != 0 ) {

917 
_ARM_D©a_memÜy_b¬rr
();

919 
¹ems_¼u±_lock_acque
Ð&
l2c_310_lock
, &
lock_cÚxt
 );

920 
l2cc
->
þn_v_way
 = 
L2C_310_WAY_MASK
;

922  
l2cc
->
þn_v_way
 & 
L2C_310_WAY_MASK
 ) {};

925 
l2c_310_sync
Ð
l2cc
 );

927 
¹ems_¼u±_lock_»Ëa£
Ð&
l2c_310_lock
, &
lock_cÚxt
 );

931 
le
 

932 
l2c_310_v®id©e_1_le
ÐcÚ¡ *
d_addr
 )

934 vÞ©
L2CC
 *
l2cc
 = (vÞ©L2CC *è
BSP_ARM_L2C_310_BASE
;

937 
l2cc
->
v_·
 = (
ut32_t
è
d_addr
;

938 
l2c_310_sync
Ð
l2cc
 );

941 
le
 

942 
l2c_310_v®id©e_¿nge
ÐcÚ¡ * 
d_addr
, cÚ¡ 
size_t
 
n_bys
 )

945 
ut32_t
 
adx
 = (ut32_t)
d_addr


946 & ~
L2C_310_DATA_LINE_MASK
;

947 cÚ¡ 
ut32_t
 
ADDR_LAST
 =

948 (
ut32_t
)Ð(
size_t
)
d_addr
 + 
n_bys
 - 1 );

949 
ut32_t
 
block_d
 =

950 
L2C_310_MIN
Ð
ADDR_LAST
, 
adx
 + 
L2C_310_MAX_LOCKING_BYTES
 );

951 vÞ©
L2CC
 *
l2cc
 = (vÞ©L2CC *è
BSP_ARM_L2C_310_BASE
;

953 iàÐ
n_bys
 == 0 ) {

958 
adx
 <ð
ADDR_LAST
;

959 
adx
 = 
block_d
 + 1,

960 
block_d
 = 
L2C_310_MIN
Ð
ADDR_LAST
, 
adx
 + 
L2C_310_MAX_LOCKING_BYTES
 )) {

961 
¹ems_¼u±_lock_cÚxt
 
lock_cÚxt
;

963 
¹ems_¼u±_lock_acque
Ð&
l2c_310_lock
, &
lock_cÚxt
 );

965 ; 
adx
 <ð
block_d
;dx +ð
CPU_DATA_CACHE_ALIGNMENT
 ) {

967 
l2cc
->
v_·
 = 
adx
;

970 
l2c_310_sync
Ð
l2cc
 );

972 
¹ems_¼u±_lock_»Ëa£
Ð&
l2c_310_lock
, &
lock_cÚxt
 );

977 
le
 

978 
l2c_310_v®id©e_te
( )

980 vÞ©
L2CC
 *
l2cc
 = (vÞ©L2CC *è
BSP_ARM_L2C_310_BASE
;

985 
_ARM_D©a_memÜy_b¬rr
();

987 
l2cc
->
v_way
 = 
L2C_310_WAY_MASK
;

989  
l2cc
->
v_way
 & 
L2C_310_WAY_MASK
 ) ;

992 
l2c_310_sync
Ð
l2cc
 );

995 
le
 

996 
l2c_310_þn_ªd_v®id©e_te
( )

998 vÞ©
L2CC
 *
l2cc
 = (vÞ©L2CC *è
BSP_ARM_L2C_310_BASE
;

999 
¹ems_¼u±_lock_cÚxt
 
lock_cÚxt
;

1001 ifÐÐ
l2cc
->
ù¾
 & 
L2C_310_CTRL_ENABLE
 ) != 0 ) {

1005 
_ARM_D©a_memÜy_b¬rr
();

1007 
¹ems_¼u±_lock_acque
Ð&
l2c_310_lock
, &
lock_cÚxt
 );

1008 
l2cc
->
þn_v_way
 = 
L2C_310_WAY_MASK
;

1010  
l2cc
->
þn_v_way
 & 
L2C_310_WAY_MASK
 ) ;

1013 
l2c_310_sync
Ð
l2cc
 );

1015 
¹ems_¼u±_lock_»Ëa£
Ð&
l2c_310_lock
, &
lock_cÚxt
 );

1019 
le
 

1020 
l2c_310_äze
( )

1026 
le
 

1027 
l2c_310_unäze
( )

1033 
le
 
size_t


1034 
l2c_310_g_ÿche_size
( )

1036 
size_t
 
size
 = 0;

1037 vÞ©
L2CC
 *
l2cc
 = (vÞ©L2CC *è
BSP_ARM_L2C_310_BASE
;

1038 
ut32_t
 
ÿche_ty³
 = 
l2cc
->cache_type;

1039 
ut32_t
 
way_size
;

1040 
ut32_t
 
num_ways
;

1042 
way_size
 = (
ÿche_ty³
 & 
L2C_310_TYPE_SIZE_D_WAYS_MASK
)

1043 >> 
L2C_310_TYPE_SIZE_D_WAYS_SHIFT
;

1044 
num_ways
 = (
ÿche_ty³
 & 
L2C_310_TYPE_NUM_D_WAYS_MASK
)

1045 >> 
L2C_310_TYPE_NUM_D_WAYS_SHIFT
;

1047 
as£¹
Ð
way_size
 <= 0x07 );

1048 
as£¹
Ð
num_ways
 <= 0x01 );

1049 ifÐ
way_size
 <ð0x07 && 
num_ways
 <= 0x01 ) {

1050 ifÐ
way_size
 == 0x00 ) {

1051 
way_size
 = 16 * 1024;

1052 } ifÐ
way_size
 == 0x07 ) {

1053 
way_size
 = 512 * 1024;

1055 
way_size
 = (1 << (way_size - 1)) * 16 * 1024;

1057  
num_ways
 ) {

1059 
num_ways
 = 8;

1062 
num_ways
 = 16;

1065 
num_ways
 = 0;

1068 
size
 = 
way_size
 * 
num_ways
;

1070  
size
;

1073 
l2c_310_uÆock
ÐvÞ©
L2CC
 *
l2cc
 )

1075 
l2cc
->
d_lockdown_0
 = 0;

1076 
l2cc
->
i_lockdown_0
 = 0;

1077 
l2cc
->
d_lockdown_1
 = 0;

1078 
l2cc
->
i_lockdown_1
 = 0;

1079 
l2cc
->
d_lockdown_2
 = 0;

1080 
l2cc
->
i_lockdown_2
 = 0;

1081 
l2cc
->
d_lockdown_3
 = 0;

1082 
l2cc
->
i_lockdown_3
 = 0;

1083 
l2cc
->
d_lockdown_4
 = 0;

1084 
l2cc
->
i_lockdown_4
 = 0;

1085 
l2cc
->
d_lockdown_5
 = 0;

1086 
l2cc
->
i_lockdown_5
 = 0;

1087 
l2cc
->
d_lockdown_6
 = 0;

1088 
l2cc
->
i_lockdown_6
 = 0;

1089 
l2cc
->
d_lockdown_7
 = 0;

1090 
l2cc
->
i_lockdown_7
 = 0;

1093 
l2c_310_wa_fÜ_background_Ýs
ÐvÞ©
L2CC
 *
l2cc
 )

1095  
l2cc
->
v_way
 & 
L2C_310_WAY_MASK
 ) ;

1097  
l2cc
->
þn_way
 & 
L2C_310_WAY_MASK
 ) ;

1099  
l2cc
->
þn_v_way
 & 
L2C_310_WAY_MASK
 ) ;

1104 #ià(
BSP_ARM_L2C_310_ID
 & 
L2C_310_ID_PART_MASK
) \

1105 !ð
L2C_310_ID_PART_L310


1109 #ià(
BSP_ARM_L2C_310_RTL_RELEASE
 !ð
L2C_310_RTL_RELEASE_R3_P2
) \

1110 && (
BSP_ARM_L2C_310_RTL_RELEASE
 !ð
L2C_310_RTL_RELEASE_R3_P3
)

1114 
le
 

1115 
l2c_310_abË
( )

1117 vÞ©
L2CC
 *
l2cc
 = (vÞ©L2CC *è
BSP_ARM_L2C_310_BASE
;

1118 
ut32_t
 
ÿche_id
 = 
l2cc
->cache_id;

1119 
ut32_t
 
¹l_»Ëa£
 = 
ÿche_id
 & 
L2C_310_ID_RTL_MASK
;

1120 
ut32_t
 
id_mask
 = 
L2C_310_ID_IMPL_MASK
 | 
L2C_310_ID_PART_MASK
;

1121 
ut32_t
 
ù¾
;

1128 (
BSP_ARM_L2C_310_ID
 & 
id_mask
è!ð(
ÿche_id
 & id_mask)

1129 || 
¹l_»Ëa£
 < 
BSP_ARM_L2C_310_RTL_RELEASE


1131 
b¥_çl
Ð
ARM_FATAL_L2C_310_UNEXPECTED_ID
 );

1134 
l2c_310_check_¿
Ð
¹l_»Ëa£
 );

1136 
ù¾
 = 
l2cc
->ctrl;

1138 iàÐÐ
ù¾
 & 
L2C_310_CTRL_EXCL_CONFIG
 ) != 0 ) {

1139 
b¥_çl
Ð
ARM_FATAL_L2C_310_EXCLUSIVE_CONFIG
 );

1143 ifÐÐ
ù¾
 & 
L2C_310_CTRL_ENABLE
 ) == 0 ) {

1144 
ut32_t
 
aux_ù¾
;

1145 
ways
;

1148 
l2c_310_uÆock
Ð
l2cc
 );

1150 
l2c_310_wa_fÜ_background_Ýs
Ð
l2cc
 );

1152 
aux_ù¾
 = 
l2cc
->aux_ctrl;

1154 iàÐ(
aux_ù¾
 & ( 1 << 16 )) != 0 ) {

1155 
ways
 = 16;

1157 
ways
 = 8;

1160 iàÐ
ways
 !ð
L2C_310_NUM_WAYS
 ) {

1161 
b¥_çl
Ð
ARM_FATAL_L2C_310_UNEXPECTED_NUM_WAYS
 );

1165 
aux_ù¾
 &ð
L2C_310_AUX_REG_ZERO_MASK
;

1166 
aux_ù¾
 |ð
L2C_310_AUX_REG_DEFAULT_MASK
;

1168 
l2cc
->
aux_ù¾
 =ux_ctrl;

1171 
l2cc
->
g_¿m_ù¾
 = 
L2C_310_TAG_RAM_DEFAULT_LAT
;

1172 
l2cc
->
d©a_¿m_ù¾
 = 
L2C_310_DATA_RAM_DEFAULT_MASK
;

1174 
l2c_310_v®id©e_te
();

1177 
l2cc
->
t_þr
 =2cc->
t_¿w_¡©us
;

1180 
l2cc
->
ù¾
 = cÈ| 
L2C_310_CTRL_ENABLE
;

1184 
le
 

1185 
l2c_310_di§bË
( )

1187 vÞ©
L2CC
 *
l2cc
 = (vÞ©L2CC *è
BSP_ARM_L2C_310_BASE
;

1188 
¹ems_¼u±_lock_cÚxt
 
lock_cÚxt
;

1190 iàÐ
l2cc
->
ù¾
 & 
L2C_310_CTRL_ENABLE
 ) {

1192 
l2c_310_æush_te
();

1193 
¹ems_¼u±_lock_acque
Ð&
l2c_310_lock
, &
lock_cÚxt
 );

1195 
l2c_310_wa_fÜ_background_Ýs
Ð
l2cc
 );

1198 
l2cc
->
ù¾
 &ð~
L2C_310_CTRL_ENABLE
;

1199 
¹ems_¼u±_lock_»Ëa£
Ð&
l2c_310_lock
, &
lock_cÚxt
 );

1203 
le
 

1204 
_CPU_ÿche_abË_d©a
( )

1206 
l2c_310_abË
();

1209 
le
 

1210 
_CPU_ÿche_di§bË_d©a
( )

1212 
¬m_ÿche_l1_di§bË_d©a
();

1213 
l2c_310_di§bË
();

1216 
le
 

1217 
_CPU_ÿche_abË_¡ruùiÚ
( )

1219 
l2c_310_abË
();

1222 
le
 

1223 
_CPU_ÿche_di§bË_¡ruùiÚ
( )

1225 
¬m_ÿche_l1_di§bË_¡ruùiÚ
();

1226 
l2c_310_di§bË
();

1229 
le
 

1230 
_CPU_ÿche_æush_d©a_¿nge
(

1231 cÚ¡ *
d_addr
,

1232 
size_t
 
n_bys


1235 
¬m_ÿche_l1_æush_d©a_¿nge
(

1236 
d_addr
,

1237 
n_bys


1239 
l2c_310_æush_¿nge
(

1240 
d_addr
,

1241 
n_bys


1245 
le
 

1246 
_CPU_ÿche_æush_te_d©a
( )

1248 
¬m_ÿche_l1_æush_te_d©a
();

1249 
l2c_310_æush_te
();

1252 
le
 

1253 
_CPU_ÿche_v®id©e_d©a_¿nge
(

1254 cÚ¡ *
addr_f¡
,

1255 
size_t
 
n_bys


1258 
l2c_310_v®id©e_¿nge
(

1259 
addr_f¡
,

1260 
n_bys


1262 
¬m_ÿche_l1_v®id©e_d©a_¿nge
(

1263 
addr_f¡
,

1264 
n_bys


1268 
le
 

1269 
_CPU_ÿche_v®id©e_te_d©a
( )

1272 
¬m_ÿche_l1_æush_te_d©a
();

1275 
l2c_310_þn_ªd_v®id©e_te
();

1278 
¬m_ÿche_l1_þn_ªd_v®id©e_te_d©a
();

1281 
le
 

1282 
_CPU_ÿche_äze_d©a
( )

1284 
¬m_ÿche_l1_äze_d©a
();

1285 
l2c_310_äze
();

1288 
le
 

1289 
_CPU_ÿche_unäze_d©a
( )

1291 
¬m_ÿche_l1_unäze_d©a
();

1292 
l2c_310_unäze
();

1295 
le
 

1296 
_CPU_ÿche_v®id©e_¡ruùiÚ_¿nge
ÐcÚ¡ *
i_addr
, 
size_t
 
n_bys
)

1298 
¬m_ÿche_l1_v®id©e_¡ruùiÚ_¿nge
Ð
i_addr
, 
n_bys
 );

1301 
le
 

1302 
_CPU_ÿche_v®id©e_te_¡ruùiÚ
( )

1304 
¬m_ÿche_l1_v®id©e_te_¡ruùiÚ
();

1307 
le
 

1308 
_CPU_ÿche_äze_¡ruùiÚ
( )

1310 
¬m_ÿche_l1_äze_¡ruùiÚ
();

1311 
l2c_310_äze
();

1314 
le
 

1315 
_CPU_ÿche_unäze_¡ruùiÚ
( )

1317 
¬m_ÿche_l1_unäze_¡ruùiÚ
();

1318 
l2c_310_unäze
();

1321 
le
 
size_t


1322 
_CPU_ÿche_g_d©a_ÿche_size
ÐcÚ¡ 
ut32_t
 
Ëv
 )

1324 
size_t
 
size
 = 0;

1326  
Ëv
 )

1329 
size
 = 
¬m_ÿche_l1_g_d©a_ÿche_size
();

1333 
size
 = 
l2c_310_g_ÿche_size
();

1336 
size
 = 0;

1339  
size
;

1342 
le
 
size_t


1343 
_CPU_ÿche_g_¡ruùiÚ_ÿche_size
ÐcÚ¡ 
ut32_t
 
Ëv
 )

1345 
size_t
 
size
 = 0;

1347  
Ëv
 )

1350 
size
 = 
¬m_ÿche_l1_g_¡ruùiÚ_ÿche_size
();

1354 
size
 = 
l2c_310_g_ÿche_size
();

1357 
size
 = 0;

1360  
size
;

1366 #ifdeà
__ýlu¥lus


	@src/lib/libbsp/arm/shared/arm-pl011.c

15 
	~<b¥/¬m-¶011.h
>

17 vÞ©
¶011
 *
	$¶011_g_»gs
(
¹ems_rmios_deviû_cÚxt
 *
ba£
)

19 
¬m_¶011_cÚxt
 *
ùx
 = (¬m_¶011_cÚx*è
ba£
;

21  
ùx
->
»gs
;

22 
	}
}

25 
boÞ
 
	$¬m_¶011_´obe
(
¹ems_rmios_deviû_cÚxt
 *
ba£
)

27 vÞ©
¶011
 *
»gs
 = 
	`¶011_g_»gs
(
ba£
);

29 
»gs
->
u¬ü_h
 = 
	`PL011_UARTLCR_H_WLEN
(
PL011_UARTLCR_H_WLEN_8
);

30 
»gs
->
u¬tü
 = 
PL011_UARTCR_RXE


31 | 
PL011_UARTCR_TXE


32 | 
PL011_UARTCR_UARTEN
;

34  
ue
;

35 
	}
}

37 
boÞ
 
	$¶011_f¡_Ý
(

38 
¹ems_rmios_y
 *
y
,

39 
¹ems_rmios_deviû_cÚxt
 *
ba£
,

40 
rmios
 *
rm
,

41 
¹ems_libio_Ý_þo£_¬gs_t
 *
¬gs


44 
¬m_¶011_cÚxt
 *
ùx
 = (¬m_¶011_cÚx*è
ba£
;

46 
	`¹ems_rmios_£t_l_baud
(
y
, 
ùx
->
l_baud
);

48  
ue
;

49 
	}
}

51 
	$¶011_»ad_pÞËd
(
¹ems_rmios_deviû_cÚxt
 *
ba£
)

53 vÞ©
¶011
 *
»gs
 = 
	`¶011_g_»gs
(
ba£
);

55 ià((
»gs
->
u¬tä
 & 
PL011_UARTFR_RXFE
) != 0) {

58  
	`PL011_UARTDR_DATA_GET
(
»gs
->
u¬tdr
);

60 
	}
}

62 
	$¬m_¶011_wre_pÞËd
(
¹ems_rmios_deviû_cÚxt
 *
ba£
, 
c
)

64 vÞ©
¶011
 *
»gs
 = 
	`¶011_g_»gs
(
ba£
);

66 (
»gs
->
u¬tä
 & 
PL011_UARTFR_TXFF
) != 0) {

70 
»gs
->
u¬tdr
 = 
	`PL011_UARTDR_DATA
(
c
);

71 
	}
}

73 
	$¶011_wre_suµÜt_pÞËd
(

74 
¹ems_rmios_deviû_cÚxt
 *
ba£
,

75 cÚ¡ *
s
,

76 
size_t
 
n


79 
size_t
 
i
;

81 
i
 = 0; i < 
n
; ++i) {

82 
	`¬m_¶011_wre_pÞËd
(
ba£
, 
s
[
i
]);

84 
	}
}

86 cÚ¡ 
¹ems_rmios_deviû_hªdËr
 
	g¬m_¶011_âs
 = {

87 .
f¡_Ý
 = 
¶011_f¡_Ý
,

88 .
	gpÞl_»ad
 = 
¶011_»ad_pÞËd
,

89 .
	gwre
 = 
¶011_wre_suµÜt_pÞËd
,

90 .
	gmode
 = 
TERMIOS_POLLED


	@src/lib/libbsp/arm/shared/arm-pl050.c

15 
	~<as£¹.h
>

17 
	~<b¥/q.h
>

18 
	~<b¥/¬m-¶050.h
>

20 vÞ©
¶050
 *
	$¶050_g_»gs
(
¹ems_rmios_deviû_cÚxt
 *
ba£
)

22 
¬m_¶050_cÚxt
 *
ùx
 = (¬m_¶050_cÚx*è
ba£
;

24  
ùx
->
»gs
;

25 
	}
}

27 
	$¶050_¼u±
(*
¬g
)

29 
¹ems_rmios_y
 *
y
 = 
¬g
;

30 
¹ems_rmios_deviû_cÚxt
 *
ba£
 = 
	`¹ems_rmios_g_deviû_cÚxt
(
y
);

31 vÞ©
¶050
 *
»gs
 = 
	`¶050_g_»gs
(
ba£
);

32 
ut32_t
 
kmi_rx
 = 
PL050_KMIIR_KMIRXINTR
;

33 
ut32_t
 
kmi_tx
 = (
»gs
->
kmiü
 & 
PL050_KMICR_KMITXINTREN
) != 0 ?

34 
PL050_KMIIR_KMITXINTR
 : 0;

35 
ut32_t
 
kmi
 = 
»gs
->kmiir;

37 ià((
kmi
 & 
kmi_rx
) != 0) {

38 
c
 = (è
	`PL050_KMIDATA_KMIDATA_GET
(
»gs
->
kmid©a
);

40 
	`¹ems_rmios_queue_¿w_ch¬aùs
(
y
, &
c
, 1);

43 ià((
kmi
 & 
kmi_tx
) != 0) {

44 
	`¹ems_rmios_dequeue_ch¬aùs
(
y
, 1);

46 
	}
}

48 
boÞ
 
	$¶050_f¡_Ý
(

49 
¹ems_rmios_y
 *
y
,

50 
¹ems_rmios_deviû_cÚxt
 *
ba£
,

51 
rmios
 *
rm
,

52 
¹ems_libio_Ý_þo£_¬gs_t
 *
¬gs


55 
¬m_¶050_cÚxt
 *
ùx
 = (¬m_¶050_cÚx*è
ba£
;

56 vÞ©
¶050
 *
»gs
 = 
	`¶050_g_»gs
(
ba£
);

57 
¹ems_¡©us_code
 
sc
;

59 
	`¹ems_rmios_£t_l_baud
(
y
, 
ùx
->
l_baud
);

61 
»gs
->
kmiü
 = 
PL050_KMICR_KMIEN
 | 
PL050_KMICR_KMIRXINTREN
;

63 
sc
 = 
	`¹ems_¼u±_hªdËr_¡®l
(

64 
ùx
->
q
,

66 
RTEMS_INTERRUPT_UNIQUE
,

67 
¶050_¼u±
,

68 
y


70 
	`as£¹
(
sc
 =ð
RTEMS_SUCCESSFUL
);

72  
ue
;

73 
	}
}

75 
	$¶050_Ï¡_þo£
(

76 
¹ems_rmios_y
 *
y
,

77 
¹ems_rmios_deviû_cÚxt
 *
ba£
,

78 
¹ems_libio_Ý_þo£_¬gs_t
 *
¬gs


81 
¬m_¶050_cÚxt
 *
ùx
 = (¬m_¶050_cÚx*è
ba£
;

82 vÞ©
¶050
 *
»gs
 = 
	`¶050_g_»gs
(
ba£
);

83 
¹ems_¡©us_code
 
sc
;

85 
»gs
->
kmiü
 = 0;

87 
sc
 = 
	`¹ems_¼u±_hªdËr_»move
(

88 
ùx
->
q
,

89 
¶050_¼u±
,

90 
y


92 
	`as£¹
(
sc
 =ð
RTEMS_SUCCESSFUL
);

93 
	}
}

95 
	$¶050_wre_suµÜt
(

96 
¹ems_rmios_deviû_cÚxt
 *
ba£
,

97 cÚ¡ *
s
,

98 
size_t
 
n


101 vÞ©
¶050
 *
»gs
 = 
	`¶050_g_»gs
(
ba£
);

103 ià(
n
 > 0) {

104 
»gs
->
kmid©a
 = 
	`PL050_KMIDATA_KMIDATA
(
s
[0]);

105 
»gs
->
kmiü
 |ð
PL050_KMICR_KMITXINTREN
;

107 
»gs
->
kmiü
 &ð~
PL050_KMICR_KMITXINTREN
;

109 
	}
}

111 cÚ¡ 
¹ems_rmios_deviû_hªdËr
 
	g¬m_¶050_âs
 = {

112 .
f¡_Ý
 = 
¶050_f¡_Ý
,

113 .
	gÏ¡_þo£
 = 
¶050_Ï¡_þo£
,

114 .
	gwre
 = 
¶050_wre_suµÜt
,

115 .
	gmode
 = 
TERMIOS_IRQ_DRIVEN


	@src/lib/libbsp/arm/shared/arm-pl111-fb.c

15 
	~<ºo.h
>

16 
	~<as£¹.h
>

17 
	~<¡dlib.h
>

19 
	~<¹ems/äamebufãr.h
>

20 
	~<¹ems/fb.h
>

21 
	~<¹ems/libio.h
>

23 
	~<b¥.h
>

24 
	~<b¥/¬m-¶111-fb.h
>

25 
	~<b¥/çl.h
>

28 
¹ems_id
 
	m£m­hÜe
;

29 *
	mäame_bufãr
;

30 } 
	t¶111_fb_cÚxt
;

32 
¶111_fb_cÚxt
 
	g¶111_fb_¡ªû
;

34 cÚ¡ 
ut8_t
 
	g¶111_bs_³r_pix
[] = { 1, 2, 4, 8, 16, 24, 16, 12 };

36 
ut32_t
 
	$¶111_fb_g_width
(cÚ¡ 
¶111_fb_cÚfig
 *
cfg
)

38  16U * (
	`PL111_LCD_TIMING0_PPL_GET
(
cfg
->
timg0
) + 1U);

39 
	}
}

41 
ut32_t
 
	$¶111_fb_g_height
(cÚ¡ 
¶111_fb_cÚfig
 *
cfg
)

43  
	`PL111_LCD_TIMING1_LPP_GET
(
cfg
->
timg1
) + 1U;

44 
	}
}

46 
ut32_t
 
	$¶111_fb_g_bs_³r_pix
(cÚ¡ 
¶111_fb_cÚfig
 *
cfg
)

48  
¶111_bs_³r_pix
[
	`PL111_LCD_CONTROL_LCD_BPP_GET
(
cfg
->
cÚÞ
)];

49 
	}
}

51 
ut32_t
 
	$¶111_fb_g_le_Ëngth__bys
(cÚ¡ 
¶111_fb_cÚfig
 *
cfg
)

53 
ut32_t
 
width
 = 
	`¶111_fb_g_width
(
cfg
);

54 
ut32_t
 
bs_³r_pix
 = 
	`¶111_fb_g_bs_³r_pix
(
cfg
);

56  
width
 * ((
bs_³r_pix
 + 7U) / 8U);

57 
	}
}

59 
ut32_t
 
	$¶111_fb_g_äame_bufãr_size
(cÚ¡ 
¶111_fb_cÚfig
 *
cfg
)

61 
ut32_t
 
le_Ëngth__bys
 = 
	`¶111_fb_g_le_Ëngth__bys
(
cfg
);

62 
ut32_t
 
height
 = 
	`¶111_fb_g_height
(
cfg
);

64  
height
 * 
le_Ëngth__bys
;

65 
	}
}

67 
	$¶111_fb_pow_day
(cÚ¡ 
¶111_fb_cÚfig
 *
cfg
)

69 
¹ems_rv®
 
day
 = (
cfg
->
pow_day__us
 + 1)

70 / 
	`¹ems_cÚfigu¿tiÚ_g_miüo£cÚds_³r_tick
();

71 
¹ems_¡©us_code
 
sc
 = 
	`¹ems_sk_wake_aá
(
day
);

72 
	`as£¹
(
sc
 =ð
RTEMS_SUCCESSFUL
);

73 
	}
}

75 
¹ems_¡©us_code
 
	$¶111_fb_lize
(
¶111_fb_cÚxt
 *
ùx
)

77 
¹ems_¡©us_code
 
sc
 = 
RTEMS_SUCCESSFUL
;

78 cÚ¡ 
¶111_fb_cÚfig
 *
cfg
 = 
	`¬m_¶111_fb_g_cÚfig
();

80 
ùx
->
äame_bufãr
 = 
	`ÿÎoc
(1, 
	`¶111_fb_g_äame_bufãr_size
(
cfg
));

81 ià(
ùx
->
äame_bufãr
 !ð
NULL
) {

82 vÞ©
¶111
 *
»gs
 = 
cfg
->regs;

84 (*
cfg
->
£t_up
)(cfg);

86 
»gs
->
lcd
.
upba£
 = (
ut32_t
è
ùx
->
äame_bufãr
;

88 
»gs
->
lcd
.
timg0
 = 
cfg
->timing0;

89 
»gs
->
lcd
.
timg1
 = 
cfg
->timing1;

90 
»gs
->
lcd
.
timg2
 = 
cfg
->timing2;

91 
»gs
->
lcd
.
timg3
 = 
cfg
->timing3;

92 
»gs
->
lcd
.
cÚÞ
 = 
cfg
->control;

94 (*
cfg
->
ps_£t_up
)(cfg);

96 
»gs
->
lcd
.
cÚÞ
 = 
cfg
->control

97 | 
PL111_LCD_CONTROL_LCD_EN
;

99 
	`¶111_fb_pow_day
(
cfg
);

101 
»gs
->
lcd
.
cÚÞ
 = 
cfg
->control

102 | 
PL111_LCD_CONTROL_LCD_EN


103 | 
PL111_LCD_CONTROL_LCD_PWR
;

105 
sc
 = 
RTEMS_NO_MEMORY
;

108  
sc
;

109 
	}
}

111 
	$¶111_fb_de¡roy
(cÚ¡ 
¶111_fb_cÚxt
 *
ùx
)

113 cÚ¡ 
¶111_fb_cÚfig
 *
cfg
 = 
	`¬m_¶111_fb_g_cÚfig
();

114 vÞ©
¶111
 *
»gs
 = 
cfg
->regs;

116 
	`ä
(
ùx
->
äame_bufãr
);

118 
»gs
->
lcd
.
cÚÞ
 = 
cfg
->control

119 | 
PL111_LCD_CONTROL_LCD_EN
;

121 
	`¶111_fb_pow_day
(
cfg
);

123 
»gs
->
lcd
.
cÚÞ
 = 
cfg
->control;

125 (*
cfg
->
ps_¬_down
)(cfg);

126 (*
cfg
->
¬_down
)(cfg);

127 
	}
}

129 
	$¶111_fb_g_fix_sün_fo
(
fb_fix_sünfo
 *
fo
)

131 cÚ¡ 
¶111_fb_cÚfig
 *
cfg
 = 
	`¬m_¶111_fb_g_cÚfig
();

132 cÚ¡ 
¶111_fb_cÚxt
 *
ùx
 = &
¶111_fb_¡ªû
;

134 
	`mem£t
(
fo
, 0, (*info));

136 
fo
->
smem_¡¬t
 = 
ùx
->
äame_bufãr
;

137 
fo
->
smem_Ën
 = 
	`¶111_fb_g_äame_bufãr_size
(
cfg
);

138 
fo
->
ty³
 = 
FB_TYPE_PACKED_PIXELS
;

139 
fo
->
visu®
 = 
FB_VISUAL_TRUECOLOR
;

140 
fo
->
le_Ëngth
 = 
	`¶111_fb_g_le_Ëngth__bys
(
cfg
);

141 
	}
}

143 
	$¶111_fb_g_v¬_sün_fo
(
fb_v¬_sünfo
 *
fo
)

145 cÚ¡ 
¶111_fb_cÚfig
 *
cfg
 = 
	`¬m_¶111_fb_g_cÚfig
();

147 
	`mem£t
(
fo
, 0, (*info));

149 
fo
->
x»s
 = 
	`¶111_fb_g_width
(
cfg
);

150 
fo
->
y»s
 = 
	`¶111_fb_g_height
(
cfg
);

151 
fo
->
bs_³r_pix
 = 
	`¶111_fb_g_bs_³r_pix
(
cfg
);

152 
	}
}

154 
	$¶111_fb_»Ëa£
(cÚ¡ 
¶111_fb_cÚxt
 *
ùx
)

156 
¹ems_¡©us_code
 
sc
 = 
	`¹ems_£m­hÜe_»Ëa£
(
ùx
->
£m­hÜe
);

157 ià(
sc
 !ð
RTEMS_SUCCESSFUL
) {

158 
	`b¥_çl
(
BSP_ARM_PL111_FATAL_SEM_RELEASE
);

160 
	}
}

162 
¹ems_deviû_driv
 
	$äame_bufãr_lize
(

163 
¹ems_deviû_majÜ_numb
 
majÜ
,

164 
¹ems_deviû_mÜ_numb
 
mÜ
,

165 *
¬g


168 
¹ems_¡©us_code
 
sc
;

169 
¶111_fb_cÚxt
 *
ùx
 = &
¶111_fb_¡ªû
;

171 
sc
 = 
	`¹ems_io_»gi¡_Çme
(
FRAMEBUFFER_DEVICE_0_NAME
, 
majÜ
, 0);

172 ià(
sc
 !ð
RTEMS_SUCCESSFUL
) {

173 
	`b¥_çl
(
BSP_ARM_PL111_FATAL_REGISTER_DEV
);

176 
sc
 = 
	`¹ems_£m­hÜe_ü
(

177 
	`¹ems_bud_Çme
('F', 'B', ' ', ' '),

179 
RTEMS_COUNTING_SEMAPHORE
,

181 &
ùx
->
£m­hÜe


183 ià(
sc
 !ð
RTEMS_SUCCESSFUL
) {

184 
	`b¥_çl
(
BSP_ARM_PL111_FATAL_SEM_CREATE
);

187  
sc
;

188 
	}
}

190 
¹ems_deviû_driv
 
	$äame_bufãr_Ý
(

191 
¹ems_deviû_majÜ_numb
 
majÜ
,

192 
¹ems_deviû_mÜ_numb
 
mÜ
,

193 *
¬g


196 
¹ems_¡©us_code
 
sc
;

197 
¶111_fb_cÚxt
 *
ùx
 = &
¶111_fb_¡ªû
;

199 
sc
 = 
	`¹ems_£m­hÜe_ob
(

200 
ùx
->
£m­hÜe
,

201 
RTEMS_WAIT
,

202 
RTEMS_NO_TIMEOUT


204 ià(
sc
 =ð
RTEMS_SUCCESSFUL
) {

205 
sc
 = 
	`¶111_fb_lize
(
ùx
);

206 ià(
sc
 !ð
RTEMS_SUCCESSFUL
) {

207 
	`¶111_fb_»Ëa£
(
ùx
);

211  
sc
;

212 
	}
}

214 
¹ems_deviû_driv
 
	$äame_bufãr_þo£
(

215 
¹ems_deviû_majÜ_numb
 
majÜ
,

216 
¹ems_deviû_mÜ_numb
 
mÜ
,

217 *
¬g


220 cÚ¡ 
¶111_fb_cÚxt
 *
ùx
 = &
¶111_fb_¡ªû
;

222 
	`¶111_fb_de¡roy
(
ùx
);

223 
	`¶111_fb_»Ëa£
(
ùx
);

225  
RTEMS_SUCCESSFUL
;

226 
	}
}

228 
¹ems_deviû_driv
 
	$äame_bufãr_»ad
(

229 
¹ems_deviû_majÜ_numb
 
majÜ
,

230 
¹ems_deviû_mÜ_numb
 
mÜ
,

231 *
¬g


234  
RTEMS_IO_ERROR
;

235 
	}
}

237 
¹ems_deviû_driv
 
	$äame_bufãr_wre
(

238 
¹ems_deviû_majÜ_numb
 
majÜ
,

239 
¹ems_deviû_mÜ_numb
 
mÜ
,

240 *
¬g


243  
RTEMS_IO_ERROR
;

244 
	}
}

246 
¹ems_deviû_driv
 
	$äame_bufãr_cÚÞ
(

247 
¹ems_deviû_majÜ_numb
 
majÜ
,

248 
¹ems_deviû_mÜ_numb
 
mÜ
,

249 *
¬g


252 
¹ems_libio_ioùl_¬gs_t
 *
ioùl_¬g
 = 
¬g
;

253 
o
 = 0;

255 
ioùl_¬g
->
commªd
) {

256 
FBIOGET_FSCREENINFO
:

257 
	`¶111_fb_g_fix_sün_fo
(
ioùl_¬g
->
bufãr
);

259 
FBIOGET_VSCREENINFO
:

260 
	`¶111_fb_g_v¬_sün_fo
(
ioùl_¬g
->
bufãr
);

263 
o
 = 
EINVAL
;

267 ià(
o
 == 0) {

268 
ioùl_¬g
->
ioùl_»tuº
 = 0;

270 
ioùl_¬g
->
ioùl_»tuº
 = -1;

271 
ºo
 = 
o
;

274  
RTEMS_SUCCESSFUL
;

275 
	}
}

	@src/lib/libbsp/arm/shared/armv7m/clock/armv7m-clock-config.c

15 
	~<¹ems.h
>

16 
	~<¹ems/timecouÁ.h
>

17 
	~<¹ems/scÜe/¬mv7m.h
>

19 
	~<b¥.h
>

21 #ifdeà
ARM_MULTILIB_ARCH_V7M


24 
Clock_i¤
(*
¬g
);

27 
¹ems_timecouÁ_sim¶e
 
	mba£
;

28 
boÞ
 
	mcouÁæag
;

29 } 
	tARMV7M_TimecouÁ
;

31 
ARMV7M_TimecouÁ
 
	g_ARMV7M_TC
;

33 
ut32_t
 
	$_ARMV7M_TC_g
(
¹ems_timecouÁ_sim¶e
 *
tc
)

35 vÞ©
ARMV7M_Sy¡ick
 *
sy¡ick
 = 
_ARMV7M_Sy¡ick
;

37  
sy¡ick
->
cvr
;

38 
	}
}

40 
boÞ
 
	$_ARMV7M_TC_is_³ndg
(
¹ems_timecouÁ_sim¶e
 *
ba£
)

42 
ARMV7M_TimecouÁ
 *
tc
 = (ARMV7M_TimecouÁ *è
ba£
;

43 
¹ems_¼u±_Ëv
 
Ëv
;

44 
boÞ
 
couÁæag
;

46 
	`¹ems_¼u±_di§bË
(
Ëv
);

48 
couÁæag
 = 
tc
->countflag;

49 ià(!
couÁæag
) {

50 vÞ©
ARMV7M_Sy¡ick
 *
sy¡ick
 = 
_ARMV7M_Sy¡ick
;

52 
couÁæag
 = ((
sy¡ick
->
c¤
 & 
ARMV7M_SYSTICK_CSR_COUNTFLAG
) != 0);

53 
tc
->
couÁæag
 = countflag;

56 
	`¹ems_¼u±_abË
(
Ëv
);

58  
couÁæag
;

59 
	}
}

61 
ut32_t
 
	$_ARMV7M_TC_g_timecouÁ
(
timecouÁ
 *
tc
)

63  
	`¹ems_timecouÁ_sim¶e_downcouÁ_g
(

64 
tc
,

65 
_ARMV7M_TC_g
,

66 
_ARMV7M_TC_is_³ndg


68 
	}
}

70 
	$_ARMV7M_TC_©_tick
(
¹ems_timecouÁ_sim¶e
 *
ba£
)

72 
ARMV7M_TimecouÁ
 *
tc
 = (ARMV7M_TimecouÁ *è
ba£
;

73 vÞ©
ARMV7M_Sy¡ick
 *
sy¡ick
 = 
_ARMV7M_Sy¡ick
;

75 
tc
->
couÁæag
 = 
çl£
;

78 
sy¡ick
->
c¤
;

79 
	}
}

81 
	$_ARMV7M_TC_tick
()

83 
	`¹ems_timecouÁ_sim¶e_downcouÁ_tick
(

84 &
_ARMV7M_TC
.
ba£
,

85 
_ARMV7M_TC_g
,

86 
_ARMV7M_TC_©_tick


88 
	}
}

90 
	$_ARMV7M_Sy¡ick_hªdËr
()

92 
	`_ARMV7M_IÁru±_£rviû_r
();

93 
	`Clock_i¤
(
NULL
);

94 
	`_ARMV7M_IÁru±_£rviû_Ëave
();

95 
	}
}

97 
	$_ARMV7M_Sy¡ick_hªdËr_¡®l
()

99 
	`_ARMV7M_S_exû±iÚ_´iÜy_ªd_hªdËr
(

100 
ARMV7M_VECTOR_SYSTICK
,

101 
BSP_ARMV7M_SYSTICK_PRIORITY
,

102 
_ARMV7M_Sy¡ick_hªdËr


104 
	}
}

106 
	$_ARMV7M_Sy¡ick_lize
()

108 vÞ©
ARMV7M_Sy¡ick
 *
sy¡ick
 = 
_ARMV7M_Sy¡ick
;

109 #ifdeà
BSP_ARMV7M_SYSTICK_FREQUENCY


110 
ut64_t
 
äeq
 = 
BSP_ARMV7M_SYSTICK_FREQUENCY
;

112 
ut64_t
 
äeq
 = 
	`ARMV7M_SYSTICK_CALIB_TENMS_GET
(
sy¡ick
->
ÿlib
) * 100ULL;

114 
ut64_t
 
us_³r_tick
 = 
	`¹ems_cÚfigu¿tiÚ_g_miüo£cÚds_³r_tick
();

115 
ut64_t
 
rv®
 = (
äeq
 * 
us_³r_tick
) / 1000000ULL;

117 
sy¡ick
->
rvr
 = (
ut32_t
è
rv®
;

118 
sy¡ick
->
cvr
 = 0;

119 
sy¡ick
->
c¤
 = 
ARMV7M_SYSTICK_CSR_ENABLE


120 | 
ARMV7M_SYSTICK_CSR_TICKINT


121 | 
ARMV7M_SYSTICK_CSR_CLKSOURCE
;

123 
	`¹ems_timecouÁ_sim¶e_¡®l
(

124 &
_ARMV7M_TC
.
ba£
,

125 
äeq
,

126 
rv®
,

127 
_ARMV7M_TC_g_timecouÁ


129 
	}
}

131 
	$_ARMV7M_Sy¡ick_þnup
()

133 vÞ©
ARMV7M_Sy¡ick
 *
sy¡ick
 = 
_ARMV7M_Sy¡ick
;

135 
sy¡ick
->
c¤
 = 0;

136 
	}
}

138 
	#Clock_driv_timecouÁ_tick
(è
	`_ARMV7M_TC_tick
()

	)

140 
	#Clock_driv_suµÜt_lize_h¬dw¬e
() \

141 
	`_ARMV7M_Sy¡ick_lize
()

	)

143 
	#Clock_driv_suµÜt_¡®l_i¤
(
i¤
, 
Þd_i¤
) \

145 
	`_ARMV7M_Sy¡ick_hªdËr_¡®l
(); \

146 
Þd_i¤
 = 
NULL
; \

147 } 0)

	)

149 
	#Clock_driv_suµÜt_shutdown_h¬dw¬e
() \

150 
	`_ARMV7M_Sy¡ick_þnup
()

	)

153 
	~"../../../../sh¬ed/þockdrv_shl.h
"

	@src/lib/libbsp/arm/shared/armv7m/include/armv7m-irq.h

23 #iâdeà
LIBBSP_ARM_SHARED_ARMV7M_IRQ_H


24 
	#LIBBSP_ARM_SHARED_ARMV7M_IRQ_H


	)

26 #ifdeà
__ýlu¥lus


30 
_ARMV7M_NVIC_IÁru±_di¥©ch
();

32 #ifdeà
__ýlu¥lus


	@src/lib/libbsp/arm/shared/armv7m/irq/armv7m-irq-dispatch.c

15 
	~<¹ems/scÜe/¬mv7m.h
>

17 
	~<b¥/q-gic.h
>

18 
	~<b¥/¬mv7m-q.h
>

20 #ifdeà
ARM_MULTILIB_ARCH_V7M


22 
	$_ARMV7M_NVIC_IÁru±_di¥©ch
()

24 
¹ems_veùÜ_numb
 
veùÜ
 =

25 
	`ARMV7M_SCB_ICSR_VECTACTIVE_GET
(
_ARMV7M_SCB
->
ic¤
);

27 
	`_ARMV7M_IÁru±_£rviû_r
();

28 
	`b¥_¼u±_hªdËr_di¥©ch
(
	`ARMV7M_IRQ_OF_VECTOR
(
veùÜ
));

29 
	`_ARMV7M_IÁru±_£rviû_Ëave
();

30 
	}
}

	@src/lib/libbsp/arm/shared/armv7m/irq/armv7m-irq.c

15 
	~<¹ems/scÜe/¬mv7m.h
>

17 
	~<b¥.h
>

18 
	~<b¥/q.h
>

19 
	~<b¥/q-gic.h
>

20 
	~<b¥/lk-symbÞs.h
>

21 
	~<b¥/¬mv7m-q.h
>

23 #ifdeà
ARM_MULTILIB_ARCH_V7M


25 
¹ems_¡©us_code
 
	$b¥_¼u±_veùÜ_abË
(
¹ems_veùÜ_numb
 
veùÜ
)

27 
	`_ARMV7M_NVIC_S_abË
((è
veùÜ
);

29  
RTEMS_SUCCESSFUL
;

30 
	}
}

32 
¹ems_¡©us_code
 
	$b¥_¼u±_veùÜ_di§bË
(
¹ems_veùÜ_numb
 
veùÜ
)

34 
	`_ARMV7M_NVIC_CË¬_abË
((è
veùÜ
);

36  
RTEMS_SUCCESSFUL
;

37 
	}
}

39 
¹ems_¡©us_code
 
	$b¥_¼u±_çcy_lize
()

41 
i
;

42 
ARMV7M_Exû±iÚ_hªdËr
 *
veùÜ_bË
 =

43 (
ARMV7M_Exû±iÚ_hªdËr
 *è
b¥_veùÜ_bË_beg
;

45 
	`memýy
(

46 
veùÜ_bË
,

47 
b¥_¡¬t_veùÜ_bË_beg
,

48 (
size_t
è
b¥_veùÜ_bË_size


51 
i
 = 
BSP_INTERRUPT_VECTOR_MIN
; i <ð
BSP_INTERRUPT_VECTOR_MAX
; ++i) {

52 
veùÜ_bË
 [
	`ARMV7M_VECTOR_IRQ
(
i
)] = 
_ARMV7M_NVIC_IÁru±_di¥©ch
;

53 
	`_ARMV7M_NVIC_CË¬_abË
(
i
);

54 
	`_ARMV7M_NVIC_CË¬_³ndg
(
i
);

55 
	`_ARMV7M_NVIC_S_´iÜy
(
i
, 
BSP_ARMV7M_IRQ_PRIORITY_DEFAULT
);

58 
_ARMV7M_SCB
->
vtÜ
 = 
veùÜ_bË
;

60  
RTEMS_SUCCESSFUL
;

61 
	}
}

	@src/lib/libbsp/arm/shared/comm/uart.c

15 
	~<b¥.h
>

16 
	~<q.h
>

17 
	~<»gi¡s.h
>

18 
	~<u¬t.h
>

19 
	~<¹ems/libio.h
>

20 
	~<as£¹.h
>

26 
	su¬t_d©a


28 
	mhwFlow
;

29 
	mbaud
;

32 
u¬t_d©a
 
	gu¬t_d©a
[2];

39 
le
 

40 
	$u»ad
(
u¬t
, 
»g
)

42 
v®
;

44 
v®
 = 
Regs
[
»g
];

46  
v®
;

47 
	}
}

49 
le
 

50 
	$uwre
(
u¬t
, 
»g
, 
v®
)

53 
Regs
[
»g
] = 
v®
;

55 
	}
}

57 #ifdeà
UARTDEBUG


59 
	$u¬tE¼Ü
(
u¬t
)

61 
u¬tStus
, 
dummy
;

63 
u¬tStus
 = 
	`u»ad
(
u¬t
, 
LSR
);

64 
dummy
 = 
	`u»ad
(
u¬t
, 
RBR
);

66 ià(
u¬tStus
 & 
OE
)

67 
	`´tk
("********* Overun Error **********\n");

68 ià(
u¬tStus
 & 
PE
)

69 
	`´tk
("********* Parity Error **********\n");

70 ià(
u¬tStus
 & 
FE
)

71 
	`´tk
("********* Framing Error **********\n");

72 ià(
u¬tStus
 & 
BI
)

73 
	`´tk
("********* Parity Error **********\n");

74 ià(
u¬tStus
 & 
ERFIFO
)

75 
	`´tk
("********* Erroreceive Fifo **********\n");

77 
	}
}

79 
le
 
	$u¬tE¼Ü
(
u¬t
)

81 
u¬tStus
;

83 
u¬tStus
 = 
	`u»ad
(
u¬t
, 
LSR
);

84 
u¬tStus
 = 
	`u»ad
(
u¬t
, 
RBR
);

85 
	}
}

95 
	$BSP_u¬t_
(
u¬t
, 
baud
, 
hwFlow
)

97 
tmp
;

100 
	`as£¹
(
u¬t
 =ð
BSP_UART_COM1
 || u¬=ð
BSP_UART_COM2
);

102 
baud
)

119 
	`as£¹
(0);

124 
	`uwre
(
u¬t
, 
CNT
, 
UART_ENABLE
 | 
PAD_ENABLE
);

127 
	`uwre
(
u¬t
, 
LCR
, 
DLAB
);

130 
	`uwre
(
u¬t
, 
DLL
, (
BSPBa£Baud
/
baud
) & 0xff);

131 
	`uwre
(
u¬t
, 
DLM
, ((
BSPBa£Baud
/
baud
) >> 8) & 0xff);

134 
	`uwre
(
u¬t
, 
LCR
, 
CHR_8_BITS
);

137 
	`uwre
(
u¬t
, 
FCR
, 
FIFO_EN
 | 
XMIT_RESET
 | 
RCV_RESET
 | 
RECEIVE_FIFO_TRIGGER12
);

140 
	`uwre
(
u¬t
, 
IER
, 0);

143 
tmp
 = 
	`u»ad
(
u¬t
, 
LSR
);

144 
tmp
 = 
	`u»ad
(
u¬t
, 
RBR
);

147 
u¬t_d©a
[
u¬t
].
hwFlow
 = hwFlow;

148 
u¬t_d©a
[
u¬t
].
baud
 = baud;

150 
	}
}

156 
	$BSP_u¬t_£t_baud
(
u¬t
, 
baud
)

158 
r
;

161 
	`as£¹
(
u¬t
 =ð
BSP_UART_COM1
 || u¬=ð
BSP_UART_COM2
);

169 if(
baud
 =ð
u¬t_d©a
[
u¬t
].baud)

174 
r
 = 
	`u»ad
(
u¬t
, 
IER
);

176 
	`BSP_u¬t_
(
u¬t
, 
baud
, 
u¬t_d©a
[u¬t].
hwFlow
);

178 
	`uwre
(
u¬t
, 
IER
, 
r
);

181 
	}
}

187 
	$BSP_u¬t__ù¾
(
u¬t
, 
cmd
)

190 
	`as£¹
(
u¬t
 =ð
BSP_UART_COM1
 || u¬=ð
BSP_UART_COM2
);

192 
cmd
)

194 
BSP_UART_INTR_CTRL_DISABLE
:

195 
	`uwre
(
u¬t
, 
IER
, 
INTERRUPT_DISABLE
);

197 
BSP_UART_INTR_CTRL_ENABLE
:

198 
	`uwre
(
u¬t
, 
IER
,

199 (
RECEIVE_ENABLE
 |

200 
TRANSMIT_ENABLE
 |

201 
RECEIVER_LINE_ST_ENABLE


205 
BSP_UART_INTR_CTRL_TERMIOS
:

206 
	`uwre
(
u¬t
, 
IER
,

207 (
RECEIVE_ENABLE
 |

208 
RECEIVER_LINE_ST_ENABLE


212 
BSP_UART_INTR_CTRL_GDB
:

213 
	`uwre
(
u¬t
, 
IER
, 
RECEIVE_ENABLE
);

216 
	`as£¹
(0);

221 
	}
}

233 
	$BSP_u¬t_pÞËd_¡©us
(
u¬t
)

235 
v®
;

237 
	`as£¹
(
u¬t
 =ð
BSP_UART_COM1
 || u¬=ð
BSP_UART_COM2
);

239 
v®
 = 
	`u»ad
(
u¬t
, 
LSR
);

241 if(
v®
 & 
BI
)

244 
	`u»ad
(
u¬t
, 
RBR
);

245  
BSP_UART_STATUS_BREAK
;

248 if((
v®
 & (
DR
 | 
OE
 | 
FE
)) == 1)

251  
BSP_UART_STATUS_CHAR
;

254 if((
v®
 & (
DR
 | 
OE
 | 
FE
)) == 0)

257  
BSP_UART_STATUS_NOCHAR
;

264 
	`u»ad
(
u¬t
, 
RBR
);

266  
BSP_UART_STATUS_ERROR
;

267 
	}
}

273 
	$BSP_u¬t_pÞËd_wre
(
u¬t
, 
v®
)

275 
v®1
;

278 
	`as£¹
(
u¬t
 =ð
BSP_UART_COM1
 || u¬=ð
BSP_UART_COM2
);

282 if((
v®1
=
	`u»ad
(
u¬t
, 
LSR
)è& 
THRE
)

288 
	`uwre
(
u¬t
, 
THR
, 
v®
 & 0xff);

291 
	}
}

294 
	$BSP_ouut_ch¬_v_£rl
(
v®
)

296 
	`BSP_u¬t_pÞËd_wre
(
BSPCÚsÞePÜt
, 
v®
);

297 ià(
v®
 =ð'\n'è
	`BSP_u¬t_pÞËd_wre
(
BSPCÚsÞePÜt
,'\r');

298 
	}
}

304 
	$BSP_u¬t_pÞËd_»ad
(
u¬t
)

306 
v®
;

308 
	`as£¹
(
u¬t
 =ð
BSP_UART_COM1
 || u¬=ð
BSP_UART_COM2
);

312 if(
	`u»ad
(
u¬t
, 
LSR
è& 
DR
)

318 
v®
 = 
	`u»ad
(
u¬t
, 
RBR
);

320  ()(
v®
 & 0xff);

321 
	}
}

324 
	$BSP_pÞl_ch¬_v_£rl
()

326  
	`BSP_u¬t_pÞËd_»ad
(
BSPCÚsÞePÜt
);

327 
	}
}

331 vÞ©
	grmios_¡Ý³d_com1
 = 0;

332 vÞ©
	grmios_tx_aùive_com1
 = 0;

333 * 
	grmios_yp_com1
 = 
NULL
;

334 
	grmios_tx_hÞd_com1
 = 0;

335 vÞ©
	grmios_tx_hÞd_v®id_com1
 = 0;

337 vÞ©
	grmios_¡Ý³d_com2
 = 0;

338 vÞ©
	grmios_tx_aùive_com2
 = 0;

339 * 
	grmios_yp_com2
 = 
NULL
;

340 
	grmios_tx_hÞd_com2
 = 0;

341 vÞ©
	grmios_tx_hÞd_v®id_com2
 = 0;

347 
	$BSP_u¬t_rmios_£t
(
u¬t
, *
yp
)

349 
	`as£¹
(
u¬t
 =ð
BSP_UART_COM1
 || u¬=ð
BSP_UART_COM2
);

351 if(
u¬t
 =ð
BSP_UART_COM1
)

353 
rmios_¡Ý³d_com1
 = 0;

354 
rmios_tx_aùive_com1
 = 0;

355 
rmios_yp_com1
 = 
yp
;

356 
rmios_tx_hÞd_com1
 = 0;

357 
rmios_tx_hÞd_v®id_com1
 = 0;

361 
rmios_¡Ý³d_com2
 = 0;

362 
rmios_tx_aùive_com2
 = 0;

363 
rmios_yp_com2
 = 
yp
;

364 
rmios_tx_hÞd_com2
 = 0;

365 
rmios_tx_hÞd_v®id_com2
 = 0;

369 
	}
}

372 
	$BSP_u¬t_rmios_wre_com1
(
mÜ
, cÚ¡ *
buf
, 
Ën
)

374 if(
Ën
 <= 0)

380 
	`as£¹
((
	`u»ad
(
BSP_UART_COM1
, 
LSR
è& 
THRE
) != 0);

382 if(
rmios_¡Ý³d_com1
)

385 
rmios_tx_hÞd_com1
 = *
buf
;

386 
rmios_tx_hÞd_v®id_com1
 = 1;

391 
	`uwre
(
BSP_UART_COM1
, 
THR
, *
buf
 & 0xff);

394 if(!
rmios_tx_aùive_com1
)

396 
rmios_tx_aùive_com1
 = 1;

397 
	`uwre
(
BSP_UART_COM1
, 
IER
,

398 (
RECEIVE_ENABLE
 |

399 
TRANSMIT_ENABLE
 |

400 
RECEIVER_LINE_ST_ENABLE


406 
	}
}

409 
	$BSP_u¬t_rmios_wre_com2
(
mÜ
, cÚ¡ *
buf
, 
Ën
)

411 if(
Ën
 <= 0)

417 
	`as£¹
((
	`u»ad
(
BSP_UART_COM2
, 
LSR
è& 
THRE
) != 0);

419 if(
rmios_¡Ý³d_com2
)

422 
rmios_tx_hÞd_com2
 = *
buf
;

423 
rmios_tx_hÞd_v®id_com2
 = 1;

429 
	`uwre
(
BSP_UART_COM2
, 
THR
, *
buf
 & 0xff);

432 if(!
rmios_tx_aùive_com2
)

434 
rmios_tx_aùive_com2
 = 1;

435 
	`uwre
(
BSP_UART_COM2
, 
IER
,

436 (
RECEIVE_ENABLE
 |

437 
TRANSMIT_ENABLE
 |

438 
RECEIVER_LINE_ST_ENABLE


444 
	}
}

447 
	$BSP_u¬t_rmios_i¤_com1
()

449 
buf
[40];

450 
off
, 
»t
, 
veù
;

452 
off
 = 0;

456 
veù
 = 
	`u»ad
(
BSP_UART_COM1
, 
IIR
) & 0xf;

458 
veù
)

460 
NO_MORE_INTR
 :

462 if(
off
 != 0)

465 
	`¹ems_rmios_queue_¿w_ch¬aùs
(
rmios_yp_com1
,

466 (*)
buf
,

467 
off
);

470 
TRANSMITTER_HODING_REGISTER_EMPTY
 :

476 
»t
 = 
	`¹ems_rmios_dequeue_ch¬aùs
(
rmios_yp_com1
, 1);

479 if(
»t
 == 0)

481 
	`uwre
(
BSP_UART_COM1
, 
IER
,

482 (
RECEIVE_ENABLE
 |

483 
RECEIVER_LINE_ST_ENABLE


486 
rmios_tx_aùive_com1
 = 0;

489 
RECEIVER_DATA_AVAIL
 :

490 
CHARACTER_TIMEOUT_INDICATION
:

492 
	`as£¹
(
off
 < (
buf
));

493 
buf
[
off
++] = 
	`u»ad
(
BSP_UART_COM1
, 
RBR
);

495 
RECEIVER_ERROR
:

497 
	`u¬tE¼Ü
(
BSP_UART_COM1
);

501 
	`as£¹
(0);

505 
	}
}

508 
	$BSP_u¬t_rmios_i¤_com2
()

510 
buf
[40];

511 
off
, 
»t
, 
veù
;

513 
off
 = 0;

517 
veù
 = 
	`u»ad
(
BSP_UART_COM2
, 
IIR
) & 0xf;

519 
veù
)

521 
NO_MORE_INTR
 :

523 if(
off
 != 0)

526 
	`¹ems_rmios_queue_¿w_ch¬aùs
(
rmios_yp_com2
,

527 (*)
buf
,

528 
off
);

531 
TRANSMITTER_HODING_REGISTER_EMPTY
 :

537 
»t
 = 
	`¹ems_rmios_dequeue_ch¬aùs
(
rmios_yp_com2
, 1);

540 if(
»t
 == 0)

542 
	`uwre
(
BSP_UART_COM2
, 
IER
,

543 (
RECEIVE_ENABLE
 |

544 
RECEIVER_LINE_ST_ENABLE


547 
rmios_tx_aùive_com2
 = 0;

550 
RECEIVER_DATA_AVAIL
 :

551 
CHARACTER_TIMEOUT_INDICATION
:

553 
	`as£¹
(
off
 < (
buf
));

554 
buf
[
off
++] = 
	`u»ad
(
BSP_UART_COM2
, 
RBR
);

556 
RECEIVER_ERROR
:

558 
	`u¬tE¼Ü
(
BSP_UART_COM2
);

562 
	`as£¹
(0);

566 
	}
}

	@src/lib/libbsp/arm/shared/comm/uart.h

23 #iâdeà
_BSPUART_H


24 
	#_BSPUART_H


	)

26 
BSP_u¬t_
(
u¬t
, 
baud
, 
hwFlow
);

27 
BSP_u¬t_£t_baud
(
au¹
, 
baud
);

28 
BSP_u¬t__ù¾
(
u¬t
, 
cmd
);

29 
BSP_u¬t_thrÙe
(
u¬t
);

30 
BSP_u¬t_uÁhrÙe
(
u¬t
);

31 
BSP_u¬t_pÞËd_¡©us
(
u¬t
);

32 
BSP_u¬t_pÞËd_wre
(
u¬t
, 
v®
);

33 
BSP_u¬t_pÞËd_»ad
(
u¬t
);

34 
BSP_u¬t_rmios_£t
(
u¬t
, *
yp
);

35 
BSP_u¬t_rmios_wre_com1
(
mÜ
, cÚ¡ *
buf
, 
Ën
);

36 
BSP_u¬t_rmios_wre_com2
(
mÜ
, cÚ¡ *
buf
, 
Ën
);

37 
BSP_u¬t_rmios_i¤_com1
();

38 
BSP_u¬t_rmios_i¤_com2
();

39 
BSP_u¬t_dbgi¤_com1
();

40 
BSP_u¬t_dbgi¤_com2
();

41 
BSP_pÞl_ch¬_v_£rl
();

42 
BSP_ouut_ch¬_v_£rl
(
v®
);

43 
BSPCÚsÞePÜt
;

44 
BSPBa£Baud
;

50 
	#BSP_UART_INTR_CTRL_DISABLE
 (0)

	)

51 
	#BSP_UART_INTR_CTRL_GDB
 (0x¯è

	)

52 
	#BSP_UART_INTR_CTRL_ENABLE
 (0xbbè

	)

53 
	#BSP_UART_INTR_CTRL_TERMIOS
 (0xccè

	)

56 
	#BSP_UART_STATUS_ERROR
 (-1è

	)

57 
	#BSP_UART_STATUS_NOCHAR
 (0è

	)

58 
	#BSP_UART_STATUS_CHAR
 (1è

	)

59 
	#BSP_UART_STATUS_BREAK
 (2è

	)

62 
	#BSP_UART_COM1
 (0)

	)

63 
	#BSP_UART_COM2
 (1)

	)

69 
	#COM1_BASE_IO
 0x3F8

	)

70 
	#COM2_BASE_IO
 0x2F8

	)

77 
	#RBR
 
RSRBR


	)

78 
	#THR
 
RSTHR


	)

79 
	#IER
 
RSIER


	)

82 
	#IIR
 
RSIIR


	)

83 
	#FCR
 
RSFCR


	)

84 
	#LCR
 
RSLCR


	)

85 
	#LSR
 
RSLSR


	)

88 
	#DLL
 
RSDLL


	)

89 
	#DLM
 
RSDLH


	)

92 
	#CNT
 
RSCNT


	)

97 
	#UART_ENABLE
 1

	)

98 
	#PAD_ENABLE
 2

	)

103 
	#NO_MORE_INTR
 1

	)

104 
	#TRANSMITTER_HODING_REGISTER_EMPTY
 2

	)

105 
	#RECEIVER_DATA_AVAIL
 4

	)

106 
	#RECEIVER_ERROR
 6

	)

107 
	#CHARACTER_TIMEOUT_INDICATION
 12

	)

112 
	#RECEIVE_ENABLE
 0x1

	)

113 
	#TRANSMIT_ENABLE
 0x2

	)

114 
	#RECEIVER_LINE_ST_ENABLE
 0x4

	)

115 
	#INTERRUPT_DISABLE
 0x0

	)

120 
	#DR
 0x01

	)

121 
	#OE
 0x02

	)

122 
	#PE
 0x04

	)

123 
	#FE
 0x08

	)

124 
	#BI
 0x10

	)

125 
	#THRE
 0x20

	)

126 
	#TEMT
 0x40

	)

127 
	#ERFIFO
 0x80

	)

132 
	#CHR_5_BITS
 0

	)

133 
	#CHR_6_BITS
 1

	)

134 
	#CHR_7_BITS
 2

	)

135 
	#CHR_8_BITS
 3

	)

137 
	#WL
 0x03

	)

138 
	#STB
 0x04

	)

139 
	#PEN
 0x08

	)

140 
	#EPS
 0x10

	)

141 
	#SP
 0x20

	)

142 
	#BCB
 0x40

	)

143 
	#DLAB
 0x80

	)

149 
	#FIFO_CTRL
 0x01

	)

150 
	#FIFO_EN
 0x01

	)

151 
	#XMIT_RESET
 0x04

	)

152 
	#RCV_RESET
 0x02

	)

153 
	#FCR3
 0x08

	)

155 
	#RECEIVE_FIFO_TRIGGER1
 0x0

	)

156 
	#RECEIVE_FIFO_TRIGGER4
 0x40

	)

157 
	#RECEIVE_FIFO_TRIGGER8
 0x80

	)

158 
	#RECEIVE_FIFO_TRIGGER12
 0xc0

	)

159 
	#TRIG_LEVEL
 0xc0

	)

	@src/lib/libbsp/arm/shared/doxygen.h

	@src/lib/libbsp/arm/shared/include/arm-a8core-start.h

17 #iâdeà
LIBBSP_ARM_SHARED_ARM_A8CORE_START_H


18 
	#LIBBSP_ARM_SHARED_ARM_A8CORE_START_H


	)

20 
	~<libýu/¬m-ý15.h
>

22 
	~<b¥.h
>

23 
	~<b¥/¡¬t.h
>

24 
	~<b¥/¬m-¿.h
>

26 #ifdeà
__ýlu¥lus


30 
BSP_START_TEXT_SECTION
 
le
 
¬m_a8cÜe_¡¬t_£t_veùÜ_ba£
()

35 ià(
b¥_veùÜ_bË_d
 !ð
b¥_veùÜ_bË_size
) {

36 
ut32_t
 
ù¾
;

38 
¬m_ý15_£t_veùÜ_ba£_add»ss
(
b¥_veùÜ_bË_beg
);

40 
ù¾
 = 
¬m_ý15_g_cÚÞ
();

41 
ù¾
 &ð~
ARM_CP15_CTRL_V
;

42 
¬m_ý15_£t_cÚÞ
(
ù¾
);

46 
BSP_START_TEXT_SECTION
 
le
 
¬m_a8cÜe_¡¬t_hook_1
()

48 
¬m_a8cÜe_¡¬t_£t_veùÜ_ba£
();

51 #ifdeà
__ýlu¥lus


	@src/lib/libbsp/arm/shared/include/arm-a9mpcore-clock.h

9 #iâdeà
LIBBSP_ARM_SHARED_ARM_A9MPCORE_CLOCK_H


10 
	#LIBBSP_ARM_SHARED_ARM_A9MPCORE_CLOCK_H


	)

12 
	~<¹ems/couÁ.h
>

14 #ifdeà
__ýlu¥lus


23 
ut32_t
 
a9mpcÜe_þock_³rhþk
();

29 
le
 
a9mpcÜe_þock_lize_¾y
()

31 
¹ems_couÁ_lize_cÚvr
(
a9mpcÜe_þock_³rhþk
());

34 #ifdeà
__ýlu¥lus


	@src/lib/libbsp/arm/shared/include/arm-a9mpcore-irq.h

23 #iâdeà
LIBBSP_ARM_SHARED_ARM_A9MPCORE_IRQ_H


24 
	#LIBBSP_ARM_SHARED_ARM_A9MPCORE_IRQ_H


	)

26 #ifdeà
__ýlu¥lus


30 
	#A9MPCORE_IRQ_GT
 27

	)

31 
	#A9MPCORE_IRQ_NFIQ
 28

	)

32 
	#A9MPCORE_IRQ_PT
 29

	)

33 
	#A9MPCORE_IRQ_PW
 30

	)

34 
	#A9MPCORE_IRQ_NIRQ
 31

	)

36 #ifdeà
__ýlu¥lus


	@src/lib/libbsp/arm/shared/include/arm-a9mpcore-regs.h

23 #iâdeà
LIBBSP_ARM_SHARED_ARM_A9MPCORE_REGS_H


24 
	#LIBBSP_ARM_SHARED_ARM_A9MPCORE_REGS_H


	)

26 
	~<b¥/uty.h
>

29 
ut32_t
 
	mù¾
;

30 
	#A9MPCORE_SCU_CTRL_SCU_EN
 
	`BSP_BIT32
(0)

	)

31 
	#A9MPCORE_SCU_CTRL_ADDR_FLT_EN
 
	`BSP_BIT32
(1)

	)

32 
	#A9MPCORE_SCU_CTRL_RAM_PAR_EN
 
	`BSP_BIT32
(2)

	)

33 
	#A9MPCORE_SCU_CTRL_SCU_SPEC_LINE_FILL_EN
 
	`BSP_BIT32
(3)

	)

34 
	#A9MPCORE_SCU_CTRL_FORCE_PORT_0_EN
 
	`BSP_BIT32
(4)

	)

35 
	#A9MPCORE_SCU_CTRL_SCU_STANDBY_EN
 
	`BSP_BIT32
(5)

	)

36 
	#A9MPCORE_SCU_CTRL_IC_STANDBY_EN
 
	`BSP_BIT32
(6)

	)

37 
ut32_t
 
	mcfg
;

38 
	#A9MPCORE_SCU_CFG_CPU_COUNT
(
v®
è
	`BSP_FLD32
(v®, 0, 1)

	)

39 
	#A9MPCORE_SCU_CFG_CPU_COUNT_GET
(
»g
è
	`BSP_FLD32GET
Ôeg, 0, 1)

	)

40 
	#A9MPCORE_SCU_CFG_CPU_COUNT_SET
(
»g
, 
v®
è
	`BSP_FLD32SET
Ôeg, v®, 0, 1)

	)

41 
	#A9MPCORE_SCU_CFG_SMP_MODE
(
v®
è
	`BSP_FLD32
(v®, 4, 7)

	)

42 
	#A9MPCORE_SCU_CFG_SMP_MODE_GET
(
»g
è
	`BSP_FLD32GET
Ôeg, 4, 7)

	)

43 
	#A9MPCORE_SCU_CFG_SMP_MODE_SET
(
»g
, 
v®
è
	`BSP_FLD32SET
Ôeg, v®, 4, 7)

	)

44 
	#A9MPCORE_SCU_CFG_TAG_RAM_SIZE
(
v®
è
	`BSP_FLD32
(v®, 8, 15)

	)

45 
	#A9MPCORE_SCU_CFG_TAG_RAM_SIZE_GET
(
»g
è
	`BSP_FLD32GET
Ôeg, 8, 15)

	)

46 
	#A9MPCORE_SCU_CFG_TAG_RAM_SIZE_SET
(
»g
, 
v®
è
	`BSP_FLD32SET
Ôeg, v®, 8, 15)

	)

47 
ut32_t
 
	mpwr¡
;

48 
ut32_t
 
	mvss
;

49 
	#A9MPCORE_SCU_INVSS_CPU0
(
ways
è
	`BSP_FLD32
(
v®
, 0, 3)

	)

50 
	#A9MPCORE_SCU_INVSS_CPU0_GET
(
»g
è

	)

51 
	#A9MPCORE_SCU_INVSS_CPU0_SET
(
»g
, 
v®
è
	`BSP_FLD32SET
Ôeg, v®, 0, 3)

	)

52 
	#A9MPCORE_SCU_INVSS_CPU1
(
ways
è
	`BSP_FLD32
(
v®
, 4, 7)

	)

53 
	#A9MPCORE_SCU_INVSS_CPU1_GET
(
»g
è

	)

54 
	#A9MPCORE_SCU_INVSS_CPU1_SET
(
»g
, 
v®
è
	`BSP_FLD32SET
Ôeg, v®, 4, 7)

	)

55 
	#A9MPCORE_SCU_INVSS_CPU2
(
ways
è
	`BSP_FLD32
(
v®
, 8, 11)

	)

56 
	#A9MPCORE_SCU_INVSS_CPU2_GET
(
»g
è

	)

57 
	#A9MPCORE_SCU_INVSS_CPU2_SET
(
»g
, 
v®
è
	`BSP_FLD32SET
Ôeg, v®, 8, 11)

	)

58 
	#A9MPCORE_SCU_INVSS_CPU3
(
ways
è
	`BSP_FLD32
(
v®
, 12, 15)

	)

59 
	#A9MPCORE_SCU_INVSS_CPU3_GET
(
»g
è

	)

60 
	#A9MPCORE_SCU_INVSS_CPU3_SET
(
»g
, 
v®
è
	`BSP_FLD32SET
Ôeg, v®, 12, 15)

	)

61 
ut32_t
 
	m»£rved_09
[8];

62 
ut32_t
 
	mdgn_ù¾
;

63 
	#A9MPCORE_SCU_DIAGN_CTRL_MIGRATORY_BIT_DISABLE
 
	`BSP_BIT32
(0)

	)

64 
ut32_t
 
	m»£rved_10
[3];

65 
ut32_t
 
	mæt¡¬t
;

66 
ut32_t
 
	mænd
;

67 
ut32_t
 
	m»£rved_48
[2];

68 
ut32_t
 
	m§c
;

69 
ut32_t
 
	m¢§c
;

70 } 
	ta9mpcÜe_scu
;

73 } 
	ga9mpcÜe_gic
;

76 
ut32_t
 
	múlow
;

77 
ut32_t
 
	múuµ
;

78 
	#A9MPCORE_GT_CTRL_PRESCALER
(
v®
è
	`BSP_FLD32
(v®, 8, 15)

	)

79 
	#A9MPCORE_GT_CTRL_PRESCALER_GET
(
»g
è
	`BSP_FLD32GET
Ôeg, 8, 15)

	)

80 
	#A9MPCORE_GT_CTRL_PRESCALER_SET
(
»g
, 
v®
è
	`BSP_FLD32SET
Ôeg, v®, 8, 15)

	)

81 
	#A9MPCORE_GT_CTRL_AUTOINC_EN
 
	`BSP_BIT32
(3)

	)

82 
	#A9MPCORE_GT_CTRL_IRQ_EN
 
	`BSP_BIT32
(2)

	)

83 
	#A9MPCORE_GT_CTRL_COMP_EN
 
	`BSP_BIT32
(1)

	)

84 
	#A9MPCORE_GT_CTRL_TMR_EN
 
	`BSP_BIT32
(0)

	)

85 
ut32_t
 
	mù¾
;

86 
	#A9MPCORE_GT_IRQST_EFLG
 
	`BSP_BIT32
(0)

	)

87 
ut32_t
 
	mq¡
;

88 
ut32_t
 
	mcmpv®low
;

89 
ut32_t
 
	mcmpv®uµ
;

90 
ut32_t
 
	mautoc
;

91 } 
	ta9mpcÜe_gt
;

94 
ut32_t
 
	mlßd
;

95 
ut32_t
 
	mú
;

96 
ut32_t
 
	mù¾
;

97 
	#A9MPCORE_PT_CTRL_PRESCALER
(
v®
è
	`BSP_FLD32
(v®, 8, 15)

	)

98 
	#A9MPCORE_PT_CTRL_PRESCALER_GET
(
»g
è
	`BSP_FLD32GET
Ôeg, 8, 15)

	)

99 
	#A9MPCORE_PT_CTRL_PRESCALER_SET
(
»g
, 
v®
è
	`BSP_FLD32SET
Ôeg, v®, 8, 15)

	)

100 
	#A9MPCORE_PT_CTRL_IRQ_EN
 
	`BSP_BIT32
(2)

	)

101 
	#A9MPCORE_PT_CTRL_AUTO_RLD
 
	`BSP_BIT32
(1)

	)

102 
	#A9MPCORE_PT_CTRL_TMR_EN
 
	`BSP_BIT32
(0)

	)

103 
ut32_t
 
	mq¡
;

104 
	#A9MPCORE_PT_IRQST_EFLG
 
	`BSP_BIT32
(0)

	)

105 } 
	ta9mpcÜe_±
;

108 
ut32_t
 
	mlßd
;

109 
ut32_t
 
	mú
;

110 
ut32_t
 
	mù¾
;

111 
ut32_t
 
	mq¡
;

112 
ut32_t
 
	mr¡¡
;

113 
ut32_t
 
	mdis
;

114 } 
	ta9mpcÜe_pw
;

117 } 
	ga9mpcÜe_idi¡
;

120 
a9mpcÜe_scu
 
	mscu
;

121 
ut32_t
 
	m»£rved_58
[42];

122 
a9mpcÜe_gic
 
	mgic
;

123 
ut32_t
 
	m»£rved_100
[64];

124 
a9mpcÜe_gt
 
	mgt
;

125 
ut32_t
 
	m»£rved_21c
[249];

126 
a9mpcÜe_±
 
	m±
;

127 
ut32_t
 
	m»£rved_610
[4];

128 
a9mpcÜe_pw
 
	mpw
;

129 
ut32_t
 
	m»£rved_638
[626];

130 
a9mpcÜe_idi¡
 
	midi¡
;

131 } 
	ta9mpcÜe
;

	@src/lib/libbsp/arm/shared/include/arm-a9mpcore-start.h

23 #iâdeà
LIBBSP_ARM_SHARED_ARM_A9MPCORE_START_H


24 
	#LIBBSP_ARM_SHARED_ARM_A9MPCORE_START_H


	)

26 
	~<¹ems/scÜe/smpim¶.h
>

28 
	~<libýu/¬m-ý15.h
>

30 
	~<b¥.h
>

31 
	~<b¥/¡¬t.h
>

32 
	~<b¥/¬m-a9mpcÜe-»gs.h
>

33 
	~<b¥/¬m-¿.h
>

35 #ifdeà
__ýlu¥lus


39 
BSP_START_TEXT_SECTION
 
le
 

40 
¬m_a9mpcÜe_¡¬t_£t_veùÜ_ba£
()

45 ià(
b¥_veùÜ_bË_d
 !ð
b¥_veùÜ_bË_size
) {

46 
ut32_t
 
ù¾
;

52 
¬m_ý15_£t_veùÜ_ba£_add»ss
(
b¥_veùÜ_bË_beg
);

54 
ù¾
 = 
¬m_ý15_g_cÚÞ
();

55 
ù¾
 &ð~
ARM_CP15_CTRL_V
;

56 
¬m_ý15_£t_cÚÞ
(
ù¾
);

60 
BSP_START_TEXT_SECTION
 
le
 
¬m_a9mpcÜe_¡¬t_scu_v®id©e
(

61 vÞ©
a9mpcÜe_scu
 *
scu
,

62 
ut32_t
 
ýu_id
,

63 
ut32_t
 
ways


66 
scu
->
vss
 = (
ways
 & 0xfè<< ((
ýu_id
 & 0x3) * 4);

69 
BSP_START_TEXT_SECTION
 
le
 

70 
¬m_a9mpcÜe_¡¬t_¿_764369_hªdËr
(vÞ©
a9mpcÜe_scu
 *
scu
)

72 ià(
¬m_¿_is_­¶iÿbË_´oûssÜ_¿_764369
()) {

73 
scu
->
dgn_ù¾
 |ð
A9MPCORE_SCU_DIAGN_CTRL_MIGRATORY_BIT_DISABLE
;

77 
BSP_START_TEXT_SECTION
 
le
 

78 
¬m_a9mpcÜe_¡¬t_scu_abË
(vÞ©
a9mpcÜe_scu
 *
scu
)

80 
scu
->
ù¾
 |ð
A9MPCORE_SCU_CTRL_SCU_EN
;

81 
¬m_a9mpcÜe_¡¬t_¿_764369_hªdËr
(
scu
);

84 #ifdeà
RTEMS_SMP


85 
BSP_START_TEXT_SECTION
 
le
 

86 
¬m_a9mpcÜe_¡¬t_Ú_£cÚd¬y_´oûssÜ
()

88 
ut32_t
 
ù¾
;

90 
¬m_a9mpcÜe_¡¬t_£t_veùÜ_ba£
();

92 
¬m_gic_q_lize_£cÚd¬y_ýu
();

94 
ù¾
 = 
¬m_ý15_¡¬t_£tup_mmu_ªd_ÿche
(

96 
ARM_CP15_CTRL_AFE
 | 
ARM_CP15_CTRL_Z


99 
¬m_ý15_£t_doma_acûss_cÚÞ
(

100 
ARM_CP15_DAC_DOMAIN
(
ARM_MMU_DEFAULT_CLIENT_DOMAIN
, 
ARM_CP15_DAC_CLIENT
)

104 
¬m_ý15_£t_ª¦©iÚ_bË_ba£
(

105 (
ut32_t
 *è
b¥_ª¦©iÚ_bË_ba£


108 
ù¾
 |ð
ARM_CP15_CTRL_I
 | 
ARM_CP15_CTRL_C
 | 
ARM_CP15_CTRL_M
;

109 
¬m_ý15_£t_cÚÞ
(
ù¾
);

111 
_SMP_S¹_muÉaskg_Ú_£cÚd¬y_´oûssÜ
();

114 
BSP_START_TEXT_SECTION
 
le
 

115 
¬m_a9mpcÜe_¡¬t_abË_smp__auxry_cÚÞ
()

121 
ut32_t
 
aùÌ
 = 
¬m_ý15_g_auxry_cÚÞ
();

122 
aùÌ
 |ð
ARM_CORTEX_A9_ACTL_SMP
 | 
ARM_CORTEX_A9_ACTL_FW
;

123 
¬m_ý15_£t_auxry_cÚÞ
(
aùÌ
);

127 
BSP_START_TEXT_SECTION
 
le
 
¬m_a9mpcÜe_¡¬t_hook_0
()

129 vÞ©
a9mpcÜe_scu
 *
scu
 =

130 (vÞ©
a9mpcÜe_scu
 *è
BSP_ARM_A9MPCORE_SCU_BASE
;

131 
ut32_t
 
ýu_id
 = 
¬m_cÜx_a9_g_muÉroûssÜ_ýu_id
();

133 
¬m_ý15_b¿nch_´ediùÜ_v®id©e_®l
();

135 ià(
ýu_id
 == 0) {

136 
¬m_a9mpcÜe_¡¬t_scu_abË
(
scu
);

139 #ifdeà
RTEMS_SMP


140 
¬m_a9mpcÜe_¡¬t_abË_smp__auxry_cÚÞ
();

143 
¬m_a9mpcÜe_¡¬t_scu_v®id©e
(
scu
, 
ýu_id
, 0xf);

145 #ifdeà
RTEMS_SMP


146 ià(
ýu_id
 != 0) {

147 
¬m_a9mpcÜe_¡¬t_Ú_£cÚd¬y_´oûssÜ
();

152 
BSP_START_TEXT_SECTION
 
le
 
¬m_a9mpcÜe_¡¬t_glob®_tim
()

154 vÞ©
a9mpcÜe_gt
 *
gt
 = (vÞ©a9mpcÜe_g*è
BSP_ARM_A9MPCORE_GT_BASE
;

156 
gt
->
ù¾
 = 0;

157 
gt
->
úlow
 = 0;

158 
gt
->
úuµ
 = 0;

159 
gt
->
ù¾
 = 
A9MPCORE_GT_CTRL_TMR_EN
;

162 
BSP_START_TEXT_SECTION
 
le
 
¬m_a9mpcÜe_¡¬t_hook_1
()

164 
¬m_a9mpcÜe_¡¬t_glob®_tim
();

165 
¬m_a9mpcÜe_¡¬t_£t_veùÜ_ba£
();

168 #ifdeà
__ýlu¥lus


	@src/lib/libbsp/arm/shared/include/arm-cache-l1.h

25 #iâdeà
LIBBSP_ARM_SHARED_CACHE_L1_H


26 
	#LIBBSP_ARM_SHARED_CACHE_L1_H


	)

28 
	~<b¥.h
>

29 
	~<libýu/¬m-ý15.h
>

31 #ifdeà
__ýlu¥lus


36 
	#ARM_CACHE_L1_CPU_DATA_ALIGNMENT
 32

	)

37 
	#ARM_CACHE_L1_CPU_INSTRUCTION_ALIGNMENT
 32

	)

38 
	#ARM_CACHE_L1_CPU_SUPPORT_PROVIDES_RANGE_FUNCTIONS


	)

40 
	#ARM_CACHE_L1_CSS_ID_DATA
 0

	)

41 
	#ARM_CACHE_L1_CSS_ID_INSTRUCTION
 1

	)

42 
	#ARM_CACHE_L1_DATA_LINE_MASK
 ( 
ARM_CACHE_L1_CPU_DATA_ALIGNMENT
 - 1 )

	)

43 
	#ARM_CACHE_L1_INSTRUCTION_LINE_MASK
 \

44 Ð
ARM_CACHE_L1_CPU_INSTRUCTION_ALIGNMENT
 \

45 - 1 )

	)

48 
¬m_ÿche_l1_¿_764369_hªdËr
( )

50 #ifdeà
RTEMS_SMP


51 
_ARM_D©a_synchrÚiz©iÚ_b¬rr
();

55 
¬m_ÿche_l1_£Ëù
ÐcÚ¡ 
ut32_t
 
£ËùiÚ
 )

58 
¬m_ý15_£t_ÿche_size_£ËùiÚ
Ð
£ËùiÚ
 );

61 
_ARM_In¡ruùiÚ_synchrÚiz©iÚ_b¬rr
();

72 
le
 
¬m_ÿche_l1_´Ýts
(

73 
ut32_t
 *
l1LeSize
,

74 
ut32_t
 *
l1Assoctivy
,

75 
ut32_t
 *
l1NumSs
 )

77 
ut32_t
 
id
;

79 
_ARM_In¡ruùiÚ_synchrÚiz©iÚ_b¬rr
();

80 
id
 = 
¬m_ý15_g_ÿche_size_id
();

83 *
l1LeSize
 = ( 
id
 & 0x0007U ) + 2 + 2;

85 *
l1Assoctivy
 = ( ( 
id
 >> 3 ) & 0x03ffU ) + 1;

87 *
l1NumSs
 = ( ( 
id
 >> 13 ) & 0x7fffU ) + 1;

99 
le
 
ut32_t
 
¬m_ÿche_l1_g_£t_way_·¿m
(

100 cÚ¡ 
ut32_t
 
log_2_le_bys
,

101 cÚ¡ 
ut32_t
 
assoctivy
,

102 cÚ¡ 
ut32_t
 
ÿche_Ëv_idx
,

103 cÚ¡ 
ut32_t
 
£t
,

104 cÚ¡ 
ut32_t
 
way
 )

106 
ut32_t
 
way_shiá
 = 
__but_þz
Ð
assoctivy
 - 1 );

110 | ( 
way


111 << 
way_shiá
 ) | ( 
£t
 << 
log_2_le_bys
 ) | ( 
ÿche_Ëv_idx
 << 1 ) );

114 
le
 
¬m_ÿche_l1_æush_1_d©a_le
ÐcÚ¡ *
d_addr
 )

117 
¬m_ý15_d©a_ÿche_þn_ªd_v®id©e_le
Ð
d_addr
 );

120 
_ARM_D©a_synchrÚiz©iÚ_b¬rr
();

123 
le
 
¬m_ÿche_l1_æush_te_d©a
( )

125 
ut32_t
 
l1LeSize
, 
l1Assoctivy
, 
l1NumSs
;

126 
ut32_t
 
s
, 
w
;

127 
ut32_t
 
£t_way_·¿m
;

130 
_ARM_D©a_memÜy_b¬rr
();

133 
¬m_ÿche_l1_´Ýts
Ð&
l1LeSize
, &
l1Assoctivy
,

134 &
l1NumSs
 );

136  
w
 = 0; w < 
l1Assoctivy
; ++w ) {

137  
s
 = 0; s < 
l1NumSs
; ++s ) {

138 
£t_way_·¿m
 = 
¬m_ÿche_l1_g_£t_way_·¿m
(

139 
l1LeSize
,

140 
l1Assoctivy
,

142 
s
,

143 
w


145 
¬m_ý15_d©a_ÿche_þn_le_by_£t_ªd_way
Ð
£t_way_·¿m
 );

150 
_ARM_D©a_synchrÚiz©iÚ_b¬rr
();

153 
le
 
¬m_ÿche_l1_v®id©e_te_d©a
( )

155 
ut32_t
 
l1LeSize
, 
l1Assoctivy
, 
l1NumSs
;

156 
ut32_t
 
s
, 
w
;

157 
ut32_t
 
£t_way_·¿m
;

160 
_ARM_D©a_memÜy_b¬rr
();

163 
¬m_ÿche_l1_´Ýts
Ð&
l1LeSize
, &
l1Assoctivy
,

164 &
l1NumSs
 );

166  
w
 = 0; w < 
l1Assoctivy
; ++w ) {

167  
s
 = 0; s < 
l1NumSs
; ++s ) {

168 
£t_way_·¿m
 = 
¬m_ÿche_l1_g_£t_way_·¿m
(

169 
l1LeSize
,

170 
l1Assoctivy
,

172 
s
,

173 
w


175 
¬m_ý15_d©a_ÿche_v®id©e_le_by_£t_ªd_way
Ð
£t_way_·¿m
 );

180 
_ARM_D©a_synchrÚiz©iÚ_b¬rr
();

183 
le
 
¬m_ÿche_l1_þn_ªd_v®id©e_te_d©a
( )

185 
ut32_t
 
l1LeSize
, 
l1Assoctivy
, 
l1NumSs
;

186 
ut32_t
 
s
, 
w
;

187 
ut32_t
 
£t_way_·¿m
;

190 
_ARM_D©a_memÜy_b¬rr
();

194 
¬m_ÿche_l1_´Ýts
Ð&
l1LeSize
, &
l1Assoctivy
,

195 &
l1NumSs
 );

197  
w
 = 0; w < 
l1Assoctivy
; ++w ) {

198  
s
 = 0; s < 
l1NumSs
; ++s ) {

199 
£t_way_·¿m
 = 
¬m_ÿche_l1_g_£t_way_·¿m
(

200 
l1LeSize
,

201 
l1Assoctivy
,

203 
s
,

204 
w


206 
¬m_ý15_d©a_ÿche_þn_ªd_v®id©e_le_by_£t_ªd_way
(

207 
£t_way_·¿m
 );

212 
_ARM_D©a_synchrÚiz©iÚ_b¬rr
();

215 
le
 
¬m_ÿche_l1_æush_d©a_¿nge
(

216 cÚ¡ *
d_addr
,

217 
size_t
 
n_bys


220 iàÐ
n_bys
 != 0 ) {

221 
ut32_t
 
adx
 = (ut32_tè
d_addr


222 & ~
ARM_CACHE_L1_DATA_LINE_MASK
;

223 cÚ¡ 
ut32_t
 
ADDR_LAST
 =

224 (
ut32_t
)Ð(
size_t
è
d_addr
 + 
n_bys
 - 1 );

226 
¬m_ÿche_l1_¿_764369_hªdËr
();

228 ; 
adx
 <ð
ADDR_LAST
;dx +ð
ARM_CACHE_L1_CPU_DATA_ALIGNMENT
 ) {

230 
¬m_ý15_d©a_ÿche_þn_ªd_v®id©e_le
Ð(*)
adx
 );

233 
_ARM_D©a_synchrÚiz©iÚ_b¬rr
();

238 
le
 
¬m_ÿche_l1_v®id©e_1_d©a_le
(

239 cÚ¡ *
d_addr
 )

242 
¬m_ý15_d©a_ÿche_v®id©e_le
Ð
d_addr
 );

245 
_ARM_D©a_synchrÚiz©iÚ_b¬rr
();

248 
le
 
¬m_ÿche_l1_äze_d©a
( )

253 
le
 
¬m_ÿche_l1_unäze_d©a
( )

258 
le
 
¬m_ÿche_l1_v®id©e_1_¡ruùiÚ_le
(

259 cÚ¡ *
i_addr
 )

262 
¬m_ý15_¡ruùiÚ_ÿche_v®id©e_le
Ð
i_addr
 );

265 
_ARM_D©a_synchrÚiz©iÚ_b¬rr
();

268 
le
 
¬m_ÿche_l1_v®id©e_d©a_¿nge
(

269 cÚ¡ *
d_addr
,

270 
size_t
 
n_bys


273 iàÐ
n_bys
 != 0 ) {

274 
ut32_t
 
adx
 = (ut32_tè
d_addr


275 & ~
ARM_CACHE_L1_DATA_LINE_MASK
;

276 cÚ¡ 
ut32_t
 
d
 =

277 (
ut32_t
)Ð(
size_t
)
d_addr
 + 
n_bys
 -1);

279 
¬m_ÿche_l1_¿_764369_hªdËr
();

283 
adx
 <ð
d
;

284 
adx
 +ð
ARM_CACHE_L1_CPU_DATA_ALIGNMENT
 ) {

286 
¬m_ý15_d©a_ÿche_v®id©e_le
Ð(*)
adx
 );

289 
_ARM_D©a_synchrÚiz©iÚ_b¬rr
();

293 
le
 
¬m_ÿche_l1_v®id©e_¡ruùiÚ_¿nge
(

294 cÚ¡ *
i_addr
,

295 
size_t
 
n_bys


298 iàÐ
n_bys
 != 0 ) {

299 
ut32_t
 
adx
 = (ut32_tè
i_addr


300 & ~
ARM_CACHE_L1_INSTRUCTION_LINE_MASK
;

301 cÚ¡ 
ut32_t
 
d
 =

302 (
ut32_t
)Ð(
size_t
)
i_addr
 + 
n_bys
 -1);

304 
¬m_ÿche_l1_¿_764369_hªdËr
();

308 
adx
 <ð
d
;

309 
adx
 +ð
ARM_CACHE_L1_CPU_INSTRUCTION_ALIGNMENT
 ) {

311 
¬m_ý15_¡ruùiÚ_ÿche_v®id©e_le
Ð(*)
adx
 );

314 
_ARM_D©a_synchrÚiz©iÚ_b¬rr
();

318 
le
 
¬m_ÿche_l1_v®id©e_te_¡ruùiÚ
( )

320 
ut32_t
 
ù¾
 = 
¬m_ý15_g_cÚÞ
();

323 #ifdeà
RTEMS_SMP


326 
¬m_ý15_¡ruùiÚ_ÿche_Ãr_sh¬bË_v®id©e_®l
();

329 
¬m_ý15_¡ruùiÚ_ÿche_v®id©e
();

332 
¬m_ý15_¡ruùiÚ_ÿche_v®id©e
();

335 iàÐÐ
ù¾
 & 
ARM_CP15_CTRL_Z
 ) == 0 ) {

336 
¬m_ý15_b¿nch_´ediùÜ_Ãr_sh¬bË_v®id©e_®l
();

337 
¬m_ý15_b¿nch_´ediùÜ_v®id©e_®l
();

341 
le
 
¬m_ÿche_l1_äze_¡ruùiÚ
( )

346 
le
 
¬m_ÿche_l1_unäze_¡ruùiÚ
( )

351 
le
 
¬m_ÿche_l1_di§bË_d©a
( )

354 
¬m_ÿche_l1_æush_te_d©a
();

357 
¬m_ý15_£t_cÚÞ
Ð
¬m_ý15_g_cÚÞ
(è& ~
ARM_CP15_CTRL_C
 );

360 
le
 
¬m_ÿche_l1_di§bË_¡ruùiÚ
( )

363 
_ARM_D©a_synchrÚiz©iÚ_b¬rr
();

366 
¬m_ÿche_l1_v®id©e_te_¡ruùiÚ
();

369 
¬m_ý15_£t_cÚÞ
Ð
¬m_ý15_g_cÚÞ
(è& ~
ARM_CP15_CTRL_I
 );

372 
le
 
size_t
 
¬m_ÿche_l1_g_d©a_ÿche_size
( )

374 
¹ems_¼u±_Ëv
 
Ëv
;

375 
size_t
 
size
;

376 
ut32_t
 
le_size
 = 0;

377 
ut32_t
 
assoctivy
 = 0;

378 
ut32_t
 
num_£ts
 = 0;

380 
¹ems_¼u±_loÿl_di§bË
(
Ëv
);

382 
¬m_ÿche_l1_£Ëù
Ð
ARM_CACHE_L1_CSS_ID_DATA
 );

383 
¬m_ÿche_l1_´Ýts
Ð&
le_size
, &
assoctivy
,

384 &
num_£ts
 );

386 
¹ems_¼u±_loÿl_abË
(
Ëv
);

388 
size
 = (1 << 
le_size
è* 
assoctivy
 * 
num_£ts
;

390  
size
;

393 
le
 
size_t
 
¬m_ÿche_l1_g_¡ruùiÚ_ÿche_size
( )

395 
¹ems_¼u±_Ëv
 
Ëv
;

396 
size_t
 
size
;

397 
ut32_t
 
le_size
 = 0;

398 
ut32_t
 
assoctivy
 = 0;

399 
ut32_t
 
num_£ts
 = 0;

401 
¹ems_¼u±_loÿl_di§bË
(
Ëv
);

403 
¬m_ÿche_l1_£Ëù
Ð
ARM_CACHE_L1_CSS_ID_INSTRUCTION
 );

404 
¬m_ÿche_l1_´Ýts
Ð&
le_size
, &
assoctivy
,

405 &
num_£ts
 );

407 
¹ems_¼u±_loÿl_abË
(
Ëv
);

409 
size
 = (1 << 
le_size
è* 
assoctivy
 * 
num_£ts
;

411  
size
;

414 #ifdeà
__ýlu¥lus


	@src/lib/libbsp/arm/shared/include/arm-cp15-start.h

25 #iâdeà
LIBBSP_ARM_SHARED_ARM_CP15_START_H


26 
	#LIBBSP_ARM_SHARED_ARM_CP15_START_H


	)

28 
	~<libýu/¬m-ý15.h
>

29 
	~<b¥/¡¬t.h
>

30 
	~<b¥/lk-symbÞs.h
>

32 #ifdeà
__ýlu¥lus


37 
ut32_t
 
beg
;

38 
ut32_t
 
d
;

39 
ut32_t
 
æags
;

40 } 
	t¬m_ý15_¡¬t_£ùiÚ_cÚfig
;

42 
	#ARMV7_CP15_START_DEFAULT_SECTIONS
 \

44 .
beg
 = (
ut32_t
è
b¥_£ùiÚ_ç¡_xt_beg
, \

45 .
d
 = (
ut32_t
è
b¥_£ùiÚ_ç¡_xt_d
, \

46 .
æags
 = 
ARMV7_MMU_CODE_CACHED
 \

48 .
beg
 = (
ut32_t
è
b¥_£ùiÚ_ç¡_d©a_beg
, \

49 .
d
 = (
ut32_t
è
b¥_£ùiÚ_ç¡_d©a_d
, \

50 .
æags
 = 
ARMV7_MMU_DATA_READ_WRITE_CACHED
 \

52 .
beg
 = (
ut32_t
è
b¥_£ùiÚ_¡¬t_beg
, \

53 .
d
 = (
ut32_t
è
b¥_£ùiÚ_¡¬t_d
, \

54 .
æags
 = 
ARMV7_MMU_CODE_CACHED
 \

56 .
beg
 = (
ut32_t
è
b¥_£ùiÚ_veùÜ_beg
, \

57 .
d
 = (
ut32_t
è
b¥_£ùiÚ_veùÜ_d
, \

58 .
æags
 = 
ARMV7_MMU_DATA_READ_WRITE_CACHED
 \

60 .
beg
 = (
ut32_t
è
b¥_£ùiÚ_xt_beg
, \

61 .
d
 = (
ut32_t
è
b¥_£ùiÚ_xt_d
, \

62 .
æags
 = 
ARMV7_MMU_CODE_CACHED
 \

64 .
beg
 = (
ut32_t
è
b¥_£ùiÚ_rod©a_beg
, \

65 .
d
 = (
ut32_t
è
b¥_£ùiÚ_rod©a_d
, \

66 .
æags
 = 
ARMV7_MMU_DATA_READ_ONLY_CACHED
 \

68 .
beg
 = (
ut32_t
è
b¥_£ùiÚ_d©a_beg
, \

69 .
d
 = (
ut32_t
è
b¥_£ùiÚ_d©a_d
, \

70 .
æags
 = 
ARMV7_MMU_DATA_READ_WRITE_CACHED
 \

72 .
beg
 = (
ut32_t
è
b¥_£ùiÚ_bss_beg
, \

73 .
d
 = (
ut32_t
è
b¥_£ùiÚ_bss_d
, \

74 .
æags
 = 
ARMV7_MMU_DATA_READ_WRITE_CACHED
 \

76 .
beg
 = (
ut32_t
è
b¥_£ùiÚ_wÜk_beg
, \

77 .
d
 = (
ut32_t
è
b¥_£ùiÚ_wÜk_d
, \

78 .
æags
 = 
ARMV7_MMU_DATA_READ_WRITE_CACHED
 \

80 .
beg
 = (
ut32_t
è
b¥_£ùiÚ_¡ack_beg
, \

81 .
d
 = (
ut32_t
è
b¥_£ùiÚ_¡ack_d
, \

82 .
æags
 = 
ARMV7_MMU_DATA_READ_WRITE_CACHED
 \

84 .
beg
 = (
ut32_t
è
b¥_£ùiÚ_noÿche_beg
, \

85 .
d
 = (
ut32_t
è
b¥_£ùiÚ_noÿche_d
, \

86 .
æags
 = 
ARMV7_MMU_DEVICE
 \

87 }

	)

89 
BSP_START_DATA_SECTION
 cÚ¡ 
¬m_ý15_¡¬t_£ùiÚ_cÚfig


90 
¬m_ý15_¡¬t_mmu_cÚfig_bË
[];

92 
BSP_START_DATA_SECTION
 cÚ¡ 
size_t


93 
¬m_ý15_¡¬t_mmu_cÚfig_bË_size
;

95 
BSP_START_TEXT_SECTION
 
le
 

96 
¬m_ý15_¡¬t_£t_ª¦©iÚ_bË_s
(

97 
ut32_t
 *
b
,

98 cÚ¡ 
¬m_ý15_¡¬t_£ùiÚ_cÚfig
 *
cÚfig


101 
ut32_t
 
	gi
 = 
ARM_MMU_SECT_GET_INDEX
(
cÚfig
->
beg
);

102 
ut32_t
 
	gnd
 =

103 
ARM_MMU_SECT_GET_INDEX
(
ARM_MMU_SECT_MVA_ALIGN_UP
(
cÚfig
->
d
));

104 
ut32_t
 
	gdex_mask
 = (1U << (32 - 
ARM_MMU_SECT_BASE_SHIFT
)) - 1U;

106 ià(
	gcÚfig
->
	gbeg
 !ð
cÚfig
->
d
) {

107 
i
 !ð
nd
) {

108 
b
 [
i
] = (<< 
ARM_MMU_SECT_BASE_SHIFT
è| 
cÚfig
->
æags
;

109 
	gi
 = (
i
 + 1Uè& 
dex_mask
;

114 
BSP_START_TEXT_SECTION
 
le
 

115 
¬m_ý15_¡¬t_£tup_ª¦©iÚ_bË
(

116 
ut32_t
 *
b
,

117 
ut32_t
 
þÁ_doma
,

118 cÚ¡ 
¬m_ý15_¡¬t_£ùiÚ_cÚfig
 *
cÚfig_bË
,

119 
size_t
 
cÚfig_couÁ


122 
ut32_t
 
	gdac
 = 
ARM_CP15_DAC_DOMAIN
(
þÁ_doma
, 
ARM_CP15_DAC_CLIENT
);

123 
size_t
 
	gi
;

125 
¬m_ý15_£t_doma_acûss_cÚÞ
(
dac
);

126 
¬m_ý15_£t_ª¦©iÚ_bË_ba£
(
b
);

129 
	gi
 = 0; i < 
	gARM_MMU_TRANSLATION_TABLE_ENTRY_COUNT
; ++i) {

130 
	gb
 [
i
] = 0;

133 
	gi
 = 0; i < 
	gcÚfig_couÁ
; ++i) {

134 
¬m_ý15_¡¬t_£t_ª¦©iÚ_bË_s
(
b
, &
cÚfig_bË
 [
i
]);

138 
BSP_START_TEXT_SECTION
 
le
 

139 
¬m_ý15_¡¬t_£tup_ª¦©iÚ_bË_ªd_abË_mmu_ªd_ÿche
(

140 
ut32_t
 
ù¾
,

141 
ut32_t
 *
b
,

142 
ut32_t
 
þÁ_doma
,

143 cÚ¡ 
¬m_ý15_¡¬t_£ùiÚ_cÚfig
 *
cÚfig_bË
,

144 
size_t
 
cÚfig_couÁ


147 
¬m_ý15_¡¬t_£tup_ª¦©iÚ_bË
(

148 
b
,

149 
þÁ_doma
,

150 
cÚfig_bË
,

151 
cÚfig_couÁ


155 
	gù¾
 |ð
ARM_CP15_CTRL_I
 | 
ARM_CP15_CTRL_C
 | 
ARM_CP15_CTRL_M
;

157 
¬m_ý15_£t_cÚÞ
(
ù¾
);

160 
BSP_START_TEXT_SECTION
 
le
 
ut32_t


161 
¬m_ý15_¡¬t_£tup_mmu_ªd_ÿche
(
ut32_t
 
ù¾_þr
, ut32_
ù¾_£t
)

163 
ut32_t
 
	gù¾
 = 
¬m_ý15_g_cÚÞ
();

165 
	gù¾
 &ð~
ù¾_þr
;

166 
	gù¾
 |ð
ù¾_£t
;

168 
¬m_ý15_£t_cÚÞ
(
ù¾
);

170 
¬m_ý15_b_v®id©e
();

172  
	gù¾
;

175 #ifdeà
__ýlu¥lus


	@src/lib/libbsp/arm/shared/include/arm-errata.h

23 #iâdeà
ARM_ERRATA_H_


24 
	#ARM_ERRATA_H_


	)

26 
	~<b¥/¬m-»Ëa£-id.h
>

27 
	~<libýu/¬m-ý15.h
>

29 #ifdeà
__ýlu¥lus


33 #ià
defed
Ð
__ARM_ARCH_7A__
 )

34 
¬m_»Ëa£_id
 
	$¬m_¿_g_´oûssÜ_»Ëa£
(

38 cÚ¡ 
ut32_t
 
MIDR
 = 
	`¬m_ý15_g_id_code
();

39 cÚ¡ 
ut8_t
 
REVISION
 = (
MIDR
 & 0xF00000U) >> 20;

40 cÚ¡ 
ut8_t
 
PATCH_LEVEL
 = (
MIDR
 & 0xFU);

42  
	`ARM_RELEASE_ID_FROM_NUMBER_AND_PATCH_LEVEL
(

43 
REVISION
,

44 
PATCH_LEVEL


46 
	}
}

49 #ià
defed
Ð
__ARM_ARCH_7A__
 )

50 #iàÐ
defed
Ð
RTEMS_SMP
 ) )

51 
boÞ
 
	$¬m_¿_is_­¶iÿbË_´oûssÜ_¿_764369
(

55 cÚ¡ 
¬m_»Ëa£_id
 
RELEASE
 = 
	`¬m_¿_g_´oûssÜ_»Ëa£
();

56 
boÞ
 
is_­¶iÿbË
 = 
çl£
;

68  
RELEASE
 ) {

69 
ARM_RELEASE_ID_R4_P1
:

70 
ARM_RELEASE_ID_R4_P4
:

71 
ARM_RELEASE_ID_R3_P0
:

72 
ARM_RELEASE_ID_R2_P10
:

73 
ARM_RELEASE_ID_R2_P8
:

74 
ARM_RELEASE_ID_R2_P6
:

75 
ARM_RELEASE_ID_R2_P4
:

76 
ARM_RELEASE_ID_R2_P3
:

77 
ARM_RELEASE_ID_R2_P2
:

78 
ARM_RELEASE_ID_R2_P0
:

79 
is_­¶iÿbË
 = 
ue
;

82 
is_­¶iÿbË
 = 
çl£
;

86  
is_­¶iÿbË
;

87 
	}
}

89 
	#¬m_¿_is_­¶iÿbË_´oûssÜ_¿_764369
(è
çl£


	)

93 #ià
defed
Ð
__ARM_ARCH_7A__
 )

94 
boÞ
 
¬m_¿_is_­¶iÿbË_´oûssÜ_¿_775420
(

98 cÚ¡ 
¬m_»Ëa£_id
 
RELEASE
 = 
¬m_¿_g_´oûssÜ_»Ëa£
();

99 
boÞ
 
is_­¶iÿbË
 = 
çl£
;

111  
RELEASE
 ) {

112 
ARM_RELEASE_ID_R2_P10
:

113 
ARM_RELEASE_ID_R2_P8
:

114 
ARM_RELEASE_ID_R2_P6
:

115 
ARM_RELEASE_ID_R2_P4
:

116 
ARM_RELEASE_ID_R2_P3
:

117 
ARM_RELEASE_ID_R2_P2
:

118 
is_­¶iÿbË
 = 
ue
;

121 
is_­¶iÿbË
 = 
çl£
;

125  
is_­¶iÿbË
;

129 #ifdeà
__ýlu¥lus


	@src/lib/libbsp/arm/shared/include/arm-gic-irq.h

23 #iâdeà
LIBBSP_ARM_SHARED_ARM_GIC_IRQ_H


24 
	#LIBBSP_ARM_SHARED_ARM_GIC_IRQ_H


	)

26 
	~<b¥.h
>

27 
	~<b¥/¬m-gic.h
>

29 #ifdeà
__ýlu¥lus


33 
	#ARM_GIC_IRQ_SGI_0
 0

	)

34 
	#ARM_GIC_IRQ_SGI_1
 1

	)

35 
	#ARM_GIC_IRQ_SGI_2
 2

	)

36 
	#ARM_GIC_IRQ_SGI_3
 3

	)

37 
	#ARM_GIC_IRQ_SGI_5
 5

	)

38 
	#ARM_GIC_IRQ_SGI_6
 6

	)

39 
	#ARM_GIC_IRQ_SGI_7
 7

	)

40 
	#ARM_GIC_IRQ_SGI_8
 8

	)

41 
	#ARM_GIC_IRQ_SGI_9
 9

	)

42 
	#ARM_GIC_IRQ_SGI_10
 10

	)

43 
	#ARM_GIC_IRQ_SGI_11
 11

	)

44 
	#ARM_GIC_IRQ_SGI_12
 12

	)

45 
	#ARM_GIC_IRQ_SGI_13
 13

	)

46 
	#ARM_GIC_IRQ_SGI_14
 14

	)

47 
	#ARM_GIC_IRQ_SGI_15
 15

	)

49 
	#ARM_GIC_DIST
 ((vÞ©
gic_di¡
 *è
BSP_ARM_GIC_DIST_BASE
)

	)

51 
¹ems_¡©us_code
 
¬m_gic_q_£t_´iÜy
(

52 
¹ems_veùÜ_numb
 
veùÜ
,

53 
ut8_t
 
´iÜy


56 
¹ems_¡©us_code
 
¬m_gic_q_g_´iÜy
(

57 
¹ems_veùÜ_numb
 
veùÜ
,

58 
ut8_t
 *
´iÜy


62 
ARM_GIC_IRQ_SOFTWARE_IRQ_TO_ALL_IN_LIST
,

63 
ARM_GIC_IRQ_SOFTWARE_IRQ_TO_ALL_EXCEPT_SELF
,

64 
ARM_GIC_IRQ_SOFTWARE_IRQ_TO_SELF


65 } 
	t¬m_gic_q_soáw¬e_q_rg_fr
;

67 
le
 
¹ems_¡©us_code
 
¬m_gic_q_g©e_soáw¬e_q
(

68 
¹ems_veùÜ_numb
 
veùÜ
,

69 
¬m_gic_q_soáw¬e_q_rg_fr
 
fr
,

70 
ut8_t
 
rgs


73 
¹ems_¡©us_code
 
sc
 = 
RTEMS_SUCCESSFUL
;

75 ià(
veùÜ
 <ð
ARM_GIC_IRQ_SGI_15
) {

76 vÞ©
gic_di¡
 *
di¡
 = 
ARM_GIC_DIST
;

78 
di¡
->
icdsg
 = 
GIC_DIST_ICDSGIR_TARGET_LIST_FILTER
(
fr
)

79 | 
GIC_DIST_ICDSGIR_CPU_TARGET_LIST
(
rgs
)

80 | 
GIC_DIST_ICDSGIR_SGIINTID
(
veùÜ
);

82 
sc
 = 
RTEMS_INVALID_ID
;

85  
sc
;

88 
le
 
ut32_t
 
¬m_gic_q_´oûssÜ_couÁ
()

90 vÞ©
gic_di¡
 *
di¡
 = 
ARM_GIC_DIST
;

92  
GIC_DIST_ICDICTR_CPU_NUMBER_GET
(
di¡
->
icdiùr
) + 1;

95 
¬m_gic_q_lize_£cÚd¬y_ýu
();

97 #ifdeà
__ýlu¥lus


	@src/lib/libbsp/arm/shared/include/arm-gic-regs.h

23 #iâdeà
LIBBSP_ARM_SHARED_ARM_GIC_REGS_H


24 
	#LIBBSP_ARM_SHARED_ARM_GIC_REGS_H


	)

26 
	~<b¥/uty.h
>

29 
ut32_t
 
	micciü
;

30 
	#GIC_CPUIF_ICCICR_ENABLE
 
	`BSP_BIT32
(0)

	)

31 
ut32_t
 
	micýmr
;

32 
	#GIC_CPUIF_ICCPMR_PRIORITY
(
v®
è
	`BSP_FLD32
(v®, 0, 7)

	)

33 
	#GIC_CPUIF_ICCPMR_PRIORITY_GET
(
»g
è
	`BSP_FLD32GET
Ôeg, 0, 7)

	)

34 
	#GIC_CPUIF_ICCPMR_PRIORITY_SET
(
»g
, 
v®
è
	`BSP_FLD32SET
Ôeg, v®, 0, 7)

	)

35 
ut32_t
 
	miccb´
;

36 
	#GIC_CPUIF_ICCBPR_BINARY_POINT
(
v®
è
	`BSP_FLD32
(v®, 0, 2)

	)

37 
	#GIC_CPUIF_ICCBPR_BINARY_POINT_GET
(
»g
è
	`BSP_FLD32GET
Ôeg, 0, 2)

	)

38 
	#GIC_CPUIF_ICCBPR_BINARY_POINT_SET
(
»g
, 
v®
è
	`BSP_FLD32SET
Ôeg, v®, 0, 2)

	)

39 
ut32_t
 
	miccr
;

40 
	#GIC_CPUIF_ICCIAR_CPUID
(
v®
è
	`BSP_FLD32
(v®, 10, 12)

	)

41 
	#GIC_CPUIF_ICCIAR_CPUID_GET
(
»g
è
	`BSP_FLD32GET
Ôeg, 10, 12)

	)

42 
	#GIC_CPUIF_ICCIAR_CPUID_SET
(
»g
, 
v®
è
	`BSP_FLD32SET
Ôeg, v®, 10, 12)

	)

43 
	#GIC_CPUIF_ICCIAR_ACKINTID
(
v®
è
	`BSP_FLD32
(v®, 0, 9)

	)

44 
	#GIC_CPUIF_ICCIAR_ACKINTID_GET
(
»g
è
	`BSP_FLD32GET
Ôeg, 0, 9)

	)

45 
	#GIC_CPUIF_ICCIAR_ACKINTID_SET
(
»g
, 
v®
è
	`BSP_FLD32SET
Ôeg, v®, 0, 9)

	)

46 
ut32_t
 
	micûo
;

47 
	#GIC_CPUIF_ICCEOIR_CPUID
(
v®
è
	`BSP_FLD32
(v®, 10, 12)

	)

48 
	#GIC_CPUIF_ICCEOIR_CPUID_GET
(
»g
è
	`BSP_FLD32GET
Ôeg, 10, 12)

	)

49 
	#GIC_CPUIF_ICCEOIR_CPUID_SET
(
»g
, 
v®
è
	`BSP_FLD32SET
Ôeg, v®, 10, 12)

	)

50 
	#GIC_CPUIF_ICCEOIR_EOIINTID
(
v®
è
	`BSP_FLD32
(v®, 0, 9)

	)

51 
	#GIC_CPUIF_ICCEOIR_EOIINTID_GET
(
»g
è
	`BSP_FLD32GET
Ôeg, 0, 9)

	)

52 
	#GIC_CPUIF_ICCEOIR_EOIINTID_SET
(
»g
, 
v®
è
	`BSP_FLD32SET
Ôeg, v®, 0, 9)

	)

53 
ut32_t
 
	micü´
;

54 
	#GIC_CPUIF_ICCRPR_PRIORITY
(
v®
è
	`BSP_FLD32
(v®, 0, 7)

	)

55 
	#GIC_CPUIF_ICCRPR_PRIORITY_GET
(
»g
è
	`BSP_FLD32GET
Ôeg, 0, 7)

	)

56 
	#GIC_CPUIF_ICCRPR_PRIORITY_SET
(
»g
, 
v®
è
	`BSP_FLD32SET
Ôeg, v®, 0, 7)

	)

57 
ut32_t
 
	micchp
;

58 
	#GIC_CPUIF_ICCHPIR_CPUID
(
v®
è
	`BSP_FLD32
(v®, 10, 12)

	)

59 
	#GIC_CPUIF_ICCHPIR_CPUID_GET
(
»g
è
	`BSP_FLD32GET
Ôeg, 10, 12)

	)

60 
	#GIC_CPUIF_ICCHPIR_CPUID_SET
(
»g
, 
v®
è
	`BSP_FLD32SET
Ôeg, v®, 10, 12)

	)

61 
	#GIC_CPUIF_ICCHPIR_PENDINTID
(
v®
è
	`BSP_FLD32
(v®, 0, 9)

	)

62 
	#GIC_CPUIF_ICCHPIR_PENDINTID_GET
(
»g
è
	`BSP_FLD32GET
Ôeg, 0, 9)

	)

63 
	#GIC_CPUIF_ICCHPIR_PENDINTID_SET
(
»g
, 
v®
è
	`BSP_FLD32SET
Ôeg, v®, 0, 9)

	)

64 
ut32_t
 
	micÿb´
;

65 
	#GIC_CPUIF_ICCABPR_BINARY_POINT
(
v®
è
	`BSP_FLD32
(v®, 0, 2)

	)

66 
	#GIC_CPUIF_ICCABPR_BINARY_POINT_GET
(
»g
è
	`BSP_FLD32GET
Ôeg, 0, 2)

	)

67 
	#GIC_CPUIF_ICCABPR_BINARY_POINT_SET
(
»g
, 
v®
è
	`BSP_FLD32SET
Ôeg, v®, 0, 2)

	)

68 
ut32_t
 
	m»£rved_20
[55];

69 
ut32_t
 
	micciidr
;

70 
	#GIC_CPUIF_ICCIIDR_PRODUCT_ID
(
v®
è
	`BSP_FLD32
(v®, 24, 31)

	)

71 
	#GIC_CPUIF_ICCIIDR_PRODUCT_ID_GET
(
»g
è
	`BSP_FLD32GET
Ôeg, 24, 31)

	)

72 
	#GIC_CPUIF_ICCIIDR_PRODUCT_ID_SET
(
»g
, 
v®
è
	`BSP_FLD32SET
Ôeg, v®, 24, 31)

	)

73 
	#GIC_CPUIF_ICCIIDR_ARCH_VERSION
(
v®
è
	`BSP_FLD32
(v®, 16, 19)

	)

74 
	#GIC_CPUIF_ICCIIDR_ARCH_VERSION_GET
(
»g
è
	`BSP_FLD32GET
Ôeg, 16, 19)

	)

75 
	#GIC_CPUIF_ICCIIDR_ARCH_VERSION_SET
(
»g
, 
v®
è
	`BSP_FLD32SET
Ôeg, v®, 16, 19)

	)

76 
	#GIC_CPUIF_ICCIIDR_REVISION
(
v®
è
	`BSP_FLD32
(v®, 12, 15)

	)

77 
	#GIC_CPUIF_ICCIIDR_REVISION_GET
(
»g
è
	`BSP_FLD32GET
Ôeg, 12, 15)

	)

78 
	#GIC_CPUIF_ICCIIDR_REVISION_SET
(
»g
, 
v®
è
	`BSP_FLD32SET
Ôeg, v®, 12, 15)

	)

79 
	#GIC_CPUIF_ICCIIDR_IMPLEMENTER
(
v®
è
	`BSP_FLD32
(v®, 0, 11)

	)

80 
	#GIC_CPUIF_ICCIIDR_IMPLEMENTER_GET
(
»g
è
	`BSP_FLD32GET
Ôeg, 0, 11)

	)

81 
	#GIC_CPUIF_ICCIIDR_IMPLEMENTER_SET
(
»g
, 
v®
è
	`BSP_FLD32SET
Ôeg, v®, 0, 11)

	)

82 } 
	tgic_ýuif
;

85 
ut32_t
 
	micddü
;

86 
	#GIC_DIST_ICDDCR_ENABLE
 
	`BSP_BIT32
(0)

	)

87 
ut32_t
 
	micdiùr
;

88 
	#GIC_DIST_ICDICTR_LSPI
(
v®
è
	`BSP_FLD32
(v®, 11, 15)

	)

89 
	#GIC_DIST_ICDICTR_LSPI_GET
(
»g
è
	`BSP_FLD32GET
Ôeg, 11, 15)

	)

90 
	#GIC_DIST_ICDICTR_LSPI_SET
(
»g
, 
v®
è
	`BSP_FLD32SET
Ôeg, v®, 11, 15)

	)

91 
	#GIC_DIST_ICDICTR_SECURITY_EXTN
 
	`BSP_BIT32
(10)

	)

92 
	#GIC_DIST_ICDICTR_CPU_NUMBER
(
v®
è
	`BSP_FLD32
(v®, 5, 7)

	)

93 
	#GIC_DIST_ICDICTR_CPU_NUMBER_GET
(
»g
è
	`BSP_FLD32GET
Ôeg, 5, 7)

	)

94 
	#GIC_DIST_ICDICTR_CPU_NUMBER_SET
(
»g
, 
v®
è
	`BSP_FLD32SET
Ôeg, v®, 5, 7)

	)

95 
	#GIC_DIST_ICDICTR_IT_LINES_NUMBER
(
v®
è
	`BSP_FLD32
(v®, 0, 4)

	)

96 
	#GIC_DIST_ICDICTR_IT_LINES_NUMBER_GET
(
»g
è
	`BSP_FLD32GET
Ôeg, 0, 4)

	)

97 
	#GIC_DIST_ICDICTR_IT_LINES_NUMBER_SET
(
»g
, 
v®
è
	`BSP_FLD32SET
Ôeg, v®, 0, 4)

	)

98 
ut32_t
 
	micdiidr
;

99 
	#GIC_DIST_ICDIIDR_PRODUCT_ID
(
v®
è
	`BSP_FLD32
(v®, 24, 31)

	)

100 
	#GIC_DIST_ICDIIDR_PRODUCT_ID_GET
(
»g
è
	`BSP_FLD32GET
Ôeg, 24, 31)

	)

101 
	#GIC_DIST_ICDIIDR_PRODUCT_ID_SET
(
»g
, 
v®
è
	`BSP_FLD32SET
Ôeg, v®, 24, 31)

	)

102 
	#GIC_DIST_ICDIIDR_VARIANT
(
v®
è
	`BSP_FLD32
(v®, 16, 19)

	)

103 
	#GIC_DIST_ICDIIDR_VARIANT_GET
(
»g
è
	`BSP_FLD32GET
Ôeg, 16, 19)

	)

104 
	#GIC_DIST_ICDIIDR_VARIANT_SET
(
»g
, 
v®
è
	`BSP_FLD32SET
Ôeg, v®, 16, 19)

	)

105 
	#GIC_DIST_ICDIIDR_REVISION
(
v®
è
	`BSP_FLD32
(v®, 12, 15)

	)

106 
	#GIC_DIST_ICDIIDR_REVISION_GET
(
»g
è
	`BSP_FLD32GET
Ôeg, 12, 15)

	)

107 
	#GIC_DIST_ICDIIDR_REVISION_SET
(
»g
, 
v®
è
	`BSP_FLD32SET
Ôeg, v®, 12, 15)

	)

108 
	#GIC_DIST_ICDIIDR_IMPLEMENTER
(
v®
è
	`BSP_FLD32
(v®, 0, 11)

	)

109 
	#GIC_DIST_ICDIIDR_IMPLEMENTER_GET
(
»g
è
	`BSP_FLD32GET
Ôeg, 0, 11)

	)

110 
	#GIC_DIST_ICDIIDR_IMPLEMENTER_SET
(
»g
, 
v®
è
	`BSP_FLD32SET
Ôeg, v®, 0, 11)

	)

111 
ut32_t
 
	m»£rved_0c
[29];

112 
ut32_t
 
	micdi¤
[32];

113 
ut32_t
 
	micdi£r
[32];

114 
ut32_t
 
	micdiûr
[32];

115 
ut32_t
 
	micdi¥r
[32];

116 
ut32_t
 
	micdiýr
[32];

117 
ut32_t
 
	micdabr
[32];

118 
ut32_t
 
	m»£rved_380
[32];

119 
ut8_t
 
	micdr
[256];

120 
ut32_t
 
	m»£rved_500
[192];

121 
ut8_t
 
	micd
[256];

122 
ut32_t
 
	m»£rved_900
[192];

123 
ut32_t
 
	micdicä
[64];

124 
ut32_t
 
	m»£rved_d00
[128];

125 
ut32_t
 
	micdsg
;

126 
	#GIC_DIST_ICDSGIR_TARGET_LIST_FILTER
(
v®
è
	`BSP_FLD32
(v®, 24, 25)

	)

127 
	#GIC_DIST_ICDSGIR_TARGET_LIST_FILTER_GET
(
»g
è
	`BSP_FLD32GET
Ôeg, 24, 25)

	)

128 
	#GIC_DIST_ICDSGIR_TARGET_LIST_FILTER_SET
(
»g
, 
v®
è
	`BSP_FLD32SET
Ôeg, v®, 24, 25)

	)

129 
	#GIC_DIST_ICDSGIR_CPU_TARGET_LIST
(
v®
è
	`BSP_FLD32
(v®, 16, 23)

	)

130 
	#GIC_DIST_ICDSGIR_CPU_TARGET_LIST_GET
(
»g
è
	`BSP_FLD32GET
Ôeg, 16, 23)

	)

131 
	#GIC_DIST_ICDSGIR_CPU_TARGET_LIST_SET
(
»g
, 
v®
è
	`BSP_FLD32SET
Ôeg, v®, 16, 23)

	)

132 
	#GIC_DIST_ICDSGIR_SATT
 
	`BSP_BIT32
(15)

	)

133 
	#GIC_DIST_ICDSGIR_SGIINTID
(
v®
è
	`BSP_FLD32
(v®, 0, 3)

	)

134 
	#GIC_DIST_ICDSGIR_SGIINTID_GET
(
»g
è
	`BSP_FLD32GET
Ôeg, 0, 3)

	)

135 
	#GIC_DIST_ICDSGIR_SGIINTID_SET
(
»g
, 
v®
è
	`BSP_FLD32SET
Ôeg, v®, 0, 3)

	)

136 } 
	tgic_di¡
;

	@src/lib/libbsp/arm/shared/include/arm-gic-tm27.h

23 #iâdeà
_RTEMS_TMTEST27


27 #iâdeà
LIBBSP_ARM_SHARED_ARM_GIC_TM27_H


28 
	#LIBBSP_ARM_SHARED_ARM_GIC_TM27_H


	)

30 
	~<as£¹.h
>

32 
	~<b¥.h
>

33 
	~<b¥/q.h
>

35 
	#MUST_WAIT_FOR_INTERRUPT
 1

	)

37 
	#ARM_GIC_TM27_IRQ_LOW
 
ARM_GIC_IRQ_SGI_12


	)

39 
	#ARM_GIC_TM27_IRQ_HIGH
 
ARM_GIC_IRQ_SGI_13


	)

41 
	#ARM_GIC_TM27_PRIO_LOW
 0x80

	)

43 
	#ARM_GIC_TM27_PRIO_HIGH
 0x00

	)

45 
le
 
In¡®l_tm27_veùÜ
((*
hªdËr
)(
¹ems_veùÜ_numb
))

47 
¹ems_¡©us_code
 
sc
 = 
	`¹ems_¼u±_hªdËr_¡®l
(

48 
ARM_GIC_TM27_IRQ_LOW
,

50 
RTEMS_INTERRUPT_UNIQUE
,

51 (
¹ems_¼u±_hªdËr
è
hªdËr
,

52 
NULL


54 
	`as£¹
(
sc
 =ð
RTEMS_SUCCESSFUL
);

56 
sc
 = 
	`¬m_gic_q_£t_´iÜy
(

57 
ARM_GIC_TM27_IRQ_LOW
,

58 
ARM_GIC_TM27_PRIO_LOW


60 
	`as£¹
(
sc
 =ð
RTEMS_SUCCESSFUL
);

62 
sc
 = 
	`¹ems_¼u±_hªdËr_¡®l
(

63 
ARM_GIC_TM27_IRQ_HIGH
,

65 
RTEMS_INTERRUPT_UNIQUE
,

66 (
¹ems_¼u±_hªdËr
è
hªdËr
,

67 
NULL


69 
	`as£¹
(
sc
 =ð
RTEMS_SUCCESSFUL
);

71 
sc
 = 
	`¬m_gic_q_£t_´iÜy
(

72 
ARM_GIC_TM27_IRQ_HIGH
,

73 
ARM_GIC_TM27_PRIO_HIGH


75 
	`as£¹
(
sc
 =ð
RTEMS_SUCCESSFUL
);

76 
	}
}

78 
le
 
	$Cau£_tm27_
()

80 
¹ems_¡©us_code
 
sc
 = 
	`¬m_gic_q_g©e_soáw¬e_q
(

81 
ARM_GIC_TM27_IRQ_LOW
,

82 
ARM_GIC_IRQ_SOFTWARE_IRQ_TO_SELF
,

85 
	`as£¹
(
sc
 =ð
RTEMS_SUCCESSFUL
);

86 
	}
}

88 
le
 
	$CË¬_tm27_
()

91 
	}
}

93 
le
 
	$Low_tm27_
()

95 
¹ems_¡©us_code
 
sc
 = 
	`¬m_gic_q_g©e_soáw¬e_q
(

96 
ARM_GIC_TM27_IRQ_HIGH
,

97 
ARM_GIC_IRQ_SOFTWARE_IRQ_TO_SELF
,

100 
	`as£¹
(
sc
 =ð
RTEMS_SUCCESSFUL
);

101 
	}
}

	@src/lib/libbsp/arm/shared/include/arm-gic.h

23 #iâdeà
LIBBSP_ARM_SHARED_ARM_GIC_H


24 
	#LIBBSP_ARM_SHARED_ARM_GIC_H


	)

26 
	~<b¥/¬m-gic-»gs.h
>

28 
	~<¡dboÞ.h
>

30 #ifdeà
__ýlu¥lus


42 
	#GIC_ID_TO_ONE_BIT_REG_INDEX
(
id
è((idè>> 5)

	)

43 
	#GIC_ID_TO_ONE_BIT_REG_BIT
(
id
è(1U << ((idè& 0x1fU))

	)

45 
	#GIC_ID_TO_TWO_BITS_REG_INDEX
(
id
è((idè>> 4)

	)

46 
	#GIC_ID_TO_TWO_BITS_REG_OFFSET
(
id
è((idè& 0xfU)

	)

48 
le
 
boÞ
 
gic_id_is_abËd
(vÞ©
gic_di¡
 *
di¡
, 
ut32_t
 
id
)

50 
ut32_t
 
i
 = 
GIC_ID_TO_ONE_BIT_REG_INDEX
(
id
);

51 
ut32_t
 
b
 = 
GIC_ID_TO_ONE_BIT_REG_BIT
(
id
);

53  (
di¡
->
icdi£r
[
i
] & 
b
) != 0;

56 
le
 
gic_id_abË
(vÞ©
gic_di¡
 *
di¡
, 
ut32_t
 
id
)

58 
ut32_t
 
i
 = 
GIC_ID_TO_ONE_BIT_REG_INDEX
(
id
);

59 
ut32_t
 
b
 = 
GIC_ID_TO_ONE_BIT_REG_BIT
(
id
);

61 
di¡
->
icdi£r
[
i
] = 
b
;

64 
le
 
gic_id_di§bË
(vÞ©
gic_di¡
 *
di¡
, 
ut32_t
 
id
)

66 
ut32_t
 
i
 = 
GIC_ID_TO_ONE_BIT_REG_INDEX
(
id
);

67 
ut32_t
 
b
 = 
GIC_ID_TO_ONE_BIT_REG_BIT
(
id
);

69 
di¡
->
icdiûr
[
i
] = 
b
;

72 
le
 
boÞ
 
gic_id_is_³ndg
(vÞ©
gic_di¡
 *
di¡
, 
ut32_t
 
id
)

74 
ut32_t
 
i
 = 
GIC_ID_TO_ONE_BIT_REG_INDEX
(
id
);

75 
ut32_t
 
b
 = 
GIC_ID_TO_ONE_BIT_REG_BIT
(
id
);

77  (
di¡
->
icdi¥r
[
i
] & 
b
) != 0;

80 
le
 
gic_id_£t_³ndg
(vÞ©
gic_di¡
 *
di¡
, 
ut32_t
 
id
)

82 
ut32_t
 
i
 = 
GIC_ID_TO_ONE_BIT_REG_INDEX
(
id
);

83 
ut32_t
 
b
 = 
GIC_ID_TO_ONE_BIT_REG_BIT
(
id
);

85 
di¡
->
icdi¥r
[
i
] = 
b
;

88 
le
 
gic_id_þr_³ndg
(vÞ©
gic_di¡
 *
di¡
, 
ut32_t
 
id
)

90 
ut32_t
 
i
 = 
GIC_ID_TO_ONE_BIT_REG_INDEX
(
id
);

91 
ut32_t
 
b
 = 
GIC_ID_TO_ONE_BIT_REG_BIT
(
id
);

93 
di¡
->
icdiýr
[
i
] = 
b
;

96 
le
 
boÞ
 
gic_id_is_aùive
(vÞ©
gic_di¡
 *
di¡
, 
ut32_t
 
id
)

98 
ut32_t
 
i
 = 
GIC_ID_TO_ONE_BIT_REG_INDEX
(
id
);

99 
ut32_t
 
b
 = 
GIC_ID_TO_ONE_BIT_REG_BIT
(
id
);

101  (
di¡
->
icdabr
[
i
] & 
b
) != 0;

104 
le
 
gic_id_£t_´iÜy
(

105 vÞ©
gic_di¡
 *
di¡
,

106 
ut32_t
 
id
,

107 
ut8_t
 
´iÜy


110 
di¡
->
icdr
[
id
] = 
´iÜy
;

113 
le
 
ut8_t
 
gic_id_g_´iÜy
(vÞ©
gic_di¡
 *
di¡
, 
ut32_t
 
id
)

115  
di¡
->
icdr
[
id
];

118 
le
 
gic_id_£t_rgs
(

119 vÞ©
gic_di¡
 *
di¡
,

120 
ut32_t
 
id
,

121 
ut8_t
 
rgs


124 
di¡
->
icd
[
id
] = 
rgs
;

127 
le
 
ut8_t
 
gic_id_g_rgs
(vÞ©
gic_di¡
 *
di¡
, 
ut32_t
 
id
)

129  
di¡
->
icd
[
id
];

133 
GIC_LEVEL_SENSITIVE
,

134 
GIC_EDGE_TRIGGERED


135 } 
	tgic_igg_mode
;

137 
le
 
gic_igg_mode
 
gic_id_g_igg_mode
(

138 vÞ©
gic_di¡
 *
di¡
,

139 
ut32_t
 
id


142 
ut32_t
 
i
 = 
GIC_ID_TO_TWO_BITS_REG_INDEX
(
id
);

143 
ut32_t
 
o
 = 
GIC_ID_TO_TWO_BITS_REG_OFFSET
(
id
) + 1;

144 
ut32_t
 
b
 = 1U << 
o
;

146  (
di¡
->
icdicä
[
i
] & 
b
) != 0 ?

147 
GIC_EDGE_TRIGGERED
 : 
GIC_LEVEL_SENSITIVE
;

150 
le
 
gic_id_£t_igg_mode
(

151 vÞ©
gic_di¡
 *
di¡
,

152 
ut32_t
 
id
,

153 
gic_igg_mode
 
mode


156 
ut32_t
 
i
 = 
GIC_ID_TO_TWO_BITS_REG_INDEX
(
id
);

157 
ut32_t
 
o
 = 
GIC_ID_TO_TWO_BITS_REG_OFFSET
(
id
) + 1;

158 
ut32_t
 
b
 = 
mode
 << 
o
;

159 
ut32_t
 
mask
 = 1U << 
o
;

160 
ut32_t
 
icdicä
 = 
di¡
->icdicä[
i
];

162 
icdicä
 &ð~
mask
;

163 
icdicä
 |ð
b
;

165 
di¡
->
icdicä
[
i
] = icdicfr;

169 
GIC_N_TO_N
,

170 
GIC_1_TO_N


171 } 
	tgic_hªdlg_mod
;

173 
le
 
gic_hªdlg_mod
 
gic_id_g_hªdlg_mod
(

174 vÞ©
gic_di¡
 *
di¡
,

175 
ut32_t
 
id


178 
ut32_t
 
i
 = 
GIC_ID_TO_TWO_BITS_REG_INDEX
(
id
);

179 
ut32_t
 
o
 = 
GIC_ID_TO_TWO_BITS_REG_OFFSET
(
id
);

180 
ut32_t
 
b
 = 1U << 
o
;

182  (
di¡
->
icdicä
[
i
] & 
b
è!ð0 ? 
GIC_1_TO_N
 : 
GIC_N_TO_N
;

185 
le
 
gic_id_£t_hªdlg_mod
(

186 vÞ©
gic_di¡
 *
di¡
,

187 
ut32_t
 
id
,

188 
gic_hªdlg_mod
 
mod


191 
ut32_t
 
i
 = 
GIC_ID_TO_TWO_BITS_REG_INDEX
(
id
);

192 
ut32_t
 
o
 = 
GIC_ID_TO_TWO_BITS_REG_OFFSET
(
id
);

193 
ut32_t
 
b
 = 
mod
 << 
o
;

194 
ut32_t
 
mask
 = 1U << 
o
;

195 
ut32_t
 
icdicä
 = 
di¡
->icdicä[
i
];

197 
icdicä
 &ð~
mask
;

198 
icdicä
 |ð
b
;

200 
di¡
->
icdicä
[
i
] = icdicfr;

203 #ifdeà
__ýlu¥lus


	@src/lib/libbsp/arm/shared/include/arm-pl011-regs.h

23 #iâdeà
LIBBSP_ARM_SHARED_ARM_PL011_REGS_H


24 
	#LIBBSP_ARM_SHARED_ARM_PL011_REGS_H


	)

26 
	~<b¥/uty.h
>

29 
ut32_t
 
	mu¬tdr
;

30 
	#PL011_UARTDR_OE
 
	`BSP_BIT32
(11)

	)

31 
	#PL011_UARTDR_BE
 
	`BSP_BIT32
(10)

	)

32 
	#PL011_UARTDR_PE
 
	`BSP_BIT32
(9)

	)

33 
	#PL011_UARTDR_FE
 
	`BSP_BIT32
(8)

	)

34 
	#PL011_UARTDR_DATA
(
v®
è
	`BSP_FLD32
(v®, 0, 7)

	)

35 
	#PL011_UARTDR_DATA_GET
(
»g
è
	`BSP_FLD32GET
Ôeg, 0, 7)

	)

36 
	#PL011_UARTDR_DATA_SET
(
»g
, 
v®
è
	`BSP_FLD32SET
Ôeg, v®, 0, 7)

	)

37 
ut32_t
 
	mu¬¤_u¬ü
;

38 
	#PL011_UARTRSR_UARTECR_OE
 
	`BSP_BIT32
(3)

	)

39 
	#PL011_UARTRSR_UARTECR_BE
 
	`BSP_BIT32
(2)

	)

40 
	#PL011_UARTRSR_UARTECR_PE
 
	`BSP_BIT32
(1)

	)

41 
	#PL011_UARTRSR_UARTECR_FE
 
	`BSP_BIT32
(0)

	)

42 
ut32_t
 
	m»£rved_08
[4];

43 
ut32_t
 
	mu¬tä
;

44 
	#PL011_UARTFR_RI
 
	`BSP_BIT32
(8)

	)

45 
	#PL011_UARTFR_TXFE
 
	`BSP_BIT32
(7)

	)

46 
	#PL011_UARTFR_RXFF
 
	`BSP_BIT32
(6)

	)

47 
	#PL011_UARTFR_TXFF
 
	`BSP_BIT32
(5)

	)

48 
	#PL011_UARTFR_RXFE
 
	`BSP_BIT32
(4)

	)

49 
	#PL011_UARTFR_BUSY
 
	`BSP_BIT32
(3)

	)

50 
	#PL011_UARTFR_DCD
 
	`BSP_BIT32
(2)

	)

51 
	#PL011_UARTFR_DSR
 
	`BSP_BIT32
(1)

	)

52 
	#PL011_UARTFR_CTS
 
	`BSP_BIT32
(0)

	)

53 
ut32_t
 
	m»£rved_1c
;

54 
ut32_t
 
	mu¬t´
;

55 
	#PL011_UARTILPR_ILPDVSR
(
v®
è
	`BSP_FLD32
(v®, 0, 7)

	)

56 
	#PL011_UARTILPR_ILPDVSR_GET
(
»g
è
	`BSP_FLD32GET
Ôeg, 0, 7)

	)

57 
	#PL011_UARTILPR_ILPDVSR_SET
(
»g
, 
v®
è
	`BSP_FLD32SET
Ôeg, v®, 0, 7)

	)

58 
ut32_t
 
	mu¬tibrd
;

59 
	#PL011_UARTIBRD_BAUD_DIVINT
(
v®
è
	`BSP_FLD32
(v®, 0, 15)

	)

60 
	#PL011_UARTIBRD_BAUD_DIVINT_GET
(
»g
è
	`BSP_FLD32GET
Ôeg, 0, 15)

	)

61 
	#PL011_UARTIBRD_BAUD_DIVINT_SET
(
»g
, 
v®
è
	`BSP_FLD32SET
Ôeg, v®, 0, 15)

	)

62 
ut32_t
 
	mu¬tfbrd
;

63 
	#PL011_UARTFBRD_BAUD_DIVFRAC
(
v®
è
	`BSP_FLD32
(v®, 0, 5)

	)

64 
	#PL011_UARTFBRD_BAUD_DIVFRAC_GET
(
»g
è
	`BSP_FLD32GET
Ôeg, 0, 5)

	)

65 
	#PL011_UARTFBRD_BAUD_DIVFRAC_SET
(
»g
, 
v®
è
	`BSP_FLD32SET
Ôeg, v®, 0, 5)

	)

66 
ut32_t
 
	mu¬ü_h
;

67 
	#PL011_UARTLCR_H_SPS
 
	`BSP_BIT32
(7)

	)

68 
	#PL011_UARTLCR_H_WLEN
(
v®
è
	`BSP_FLD32
(v®, 5, 6)

	)

69 
	#PL011_UARTLCR_H_WLEN_GET
(
»g
è
	`BSP_FLD32GET
Ôeg, 5, 6)

	)

70 
	#PL011_UARTLCR_H_WLEN_SET
(
»g
, 
v®
è
	`BSP_FLD32SET
Ôeg, v®, 5, 6)

	)

71 
	#PL011_UARTLCR_H_WLEN_5
 0x00U

	)

72 
	#PL011_UARTLCR_H_WLEN_6
 0x01U

	)

73 
	#PL011_UARTLCR_H_WLEN_7
 0x02U

	)

74 
	#PL011_UARTLCR_H_WLEN_8
 0x03U

	)

75 
	#PL011_UARTLCR_H_FEN
 
	`BSP_BIT32
(4)

	)

76 
	#PL011_UARTLCR_H_STP2
 
	`BSP_BIT32
(3)

	)

77 
	#PL011_UARTLCR_H_EPS
 
	`BSP_BIT32
(2)

	)

78 
	#PL011_UARTLCR_H_PEN
 
	`BSP_BIT32
(1)

	)

79 
	#PL011_UARTLCR_H_BRK
 
	`BSP_BIT32
(0)

	)

80 
ut32_t
 
	mu¬tü
;

81 
	#PL011_UARTCR_CTSEN
 
	`BSP_BIT32
(15)

	)

82 
	#PL011_UARTCR_RTSEN
 
	`BSP_BIT32
(14)

	)

83 
	#PL011_UARTCR_OUT2
 
	`BSP_BIT32
(13)

	)

84 
	#PL011_UARTCR_OUT1
 
	`BSP_BIT32
(12)

	)

85 
	#PL011_UARTCR_RTS
 
	`BSP_BIT32
(11)

	)

86 
	#PL011_UARTCR_DTR
 
	`BSP_BIT32
(10)

	)

87 
	#PL011_UARTCR_RXE
 
	`BSP_BIT32
(9)

	)

88 
	#PL011_UARTCR_TXE
 
	`BSP_BIT32
(8)

	)

89 
	#PL011_UARTCR_LBE
 
	`BSP_BIT32
(7)

	)

90 
	#PL011_UARTCR_SIRLP
 
	`BSP_BIT32
(3)

	)

91 
	#PL011_UARTCR_SIREN
 
	`BSP_BIT32
(2)

	)

92 
	#PL011_UARTCR_UARTEN
 
	`BSP_BIT32
(1)

	)

93 
ut32_t
 
	mu¬tiæs
;

94 
	#PL011_UARTIFLS_RXIFLSEL
(
v®
è
	`BSP_FLD32
(v®, 3, 5)

	)

95 
	#PL011_UARTIFLS_RXIFLSEL_GET
(
»g
è
	`BSP_FLD32GET
Ôeg, 3, 5)

	)

96 
	#PL011_UARTIFLS_RXIFLSEL_SET
(
»g
, 
v®
è
	`BSP_FLD32SET
Ôeg, v®, 3, 5)

	)

97 
	#PL011_UARTIFLS_TXIFLSEL
(
v®
è
	`BSP_FLD32
(v®, 0, 2)

	)

98 
	#PL011_UARTIFLS_TXIFLSEL_GET
(
»g
è
	`BSP_FLD32GET
Ôeg, 0, 2)

	)

99 
	#PL011_UARTIFLS_TXIFLSEL_SET
(
»g
, 
v®
è
	`BSP_FLD32SET
Ôeg, v®, 0, 2)

	)

100 
ut32_t
 
	mu¬timsc
;

101 
ut32_t
 
	mu¬is
;

102 
ut32_t
 
	mu¬tmis
;

103 
ut32_t
 
	mu¬tiü
;

104 
	#PL011_UARTI_OEI
 
	`BSP_BIT32
(10)

	)

105 
	#PL011_UARTI_BEI
 
	`BSP_BIT32
(9)

	)

106 
	#PL011_UARTI_PEI
 
	`BSP_BIT32
(8)

	)

107 
	#PL011_UARTI_FEI
 
	`BSP_BIT32
(7)

	)

108 
	#PL011_UARTI_RTI
 
	`BSP_BIT32
(6)

	)

109 
	#PL011_UARTI_TXI
 
	`BSP_BIT32
(5)

	)

110 
	#PL011_UARTI_RXI
 
	`BSP_BIT32
(4)

	)

111 
	#PL011_UARTI_DSRMI
 
	`BSP_BIT32
(3)

	)

112 
	#PL011_UARTI_DCDMI
 
	`BSP_BIT32
(2)

	)

113 
	#PL011_UARTI_CTSMI
 
	`BSP_BIT32
(1)

	)

114 
	#PL011_UARTI_RIMI
 
	`BSP_BIT32
(0)

	)

115 
ut32_t
 
	mu¬tdmaü
;

116 
	#PL011_UARTDMACR_DMAONERR
 
	`BSP_BIT32
(2)

	)

117 
	#PL011_UARTDMACR_TXDMAE
 
	`BSP_BIT32
(1)

	)

118 
	#PL011_UARTDMACR_RXDMAE
 
	`BSP_BIT32
(0)

	)

119 
ut32_t
 
	m»£rved_4c
[997];

120 
ut32_t
 
	mu¬hid0
;

121 
ut32_t
 
	mu¬hid1
;

122 
ut32_t
 
	mu¬hid2
;

123 
ut32_t
 
	mu¬hid3
;

124 
ut32_t
 
	mu¬ûÎid0
;

125 
ut32_t
 
	mu¬ûÎid1
;

126 
ut32_t
 
	mu¬ûÎid2
;

127 
ut32_t
 
	mu¬ûÎid3
;

128 } 
	t¶011
;

	@src/lib/libbsp/arm/shared/include/arm-pl011.h

23 #iâdeà
LIBBSP_ARM_SHARED_ARM_PL011_H


24 
	#LIBBSP_ARM_SHARED_ARM_PL011_H


	)

26 
	~<¹ems/rmio¡y³s.h
>

28 
	~<b¥/¬m-¶011-»gs.h
>

30 #ifdeà
__ýlu¥lus


35 
¹ems_rmios_deviû_cÚxt
 
ba£
;

36 vÞ©
¶011
 *
»gs
;

37 
¹ems_veùÜ_numb
 
q
;

38 
ut32_t
 
l_baud
;

39 } 
	t¬m_¶011_cÚxt
;

41 
boÞ
 
¬m_¶011_´obe
(
¹ems_rmios_deviû_cÚxt
 *
ba£
);

43 
¬m_¶011_wre_pÞËd
(
¹ems_rmios_deviû_cÚxt
 *
ba£
, 
c
);

45 cÚ¡ 
¹ems_rmios_deviû_hªdËr
 
¬m_¶011_âs
;

47 #ifdeà
__ýlu¥lus


	@src/lib/libbsp/arm/shared/include/arm-pl050-regs.h

23 #iâdeà
LIBBSP_ARM_SHARED_ARM_PL050_REGS_H


24 
	#LIBBSP_ARM_SHARED_ARM_PL050_REGS_H


	)

26 
	~<b¥/uty.h
>

29 
ut32_t
 
	mkmiü
;

30 
	#PL050_KMICR_KMITYPE
 
	`BSP_BIT32
(5)

	)

31 
	#PL050_KMICR_KMIRXINTREN
 
	`BSP_BIT32
(4)

	)

32 
	#PL050_KMICR_KMITXINTREN
 
	`BSP_BIT32
(3)

	)

33 
	#PL050_KMICR_KMIEN
 
	`BSP_BIT32
(2)

	)

34 
	#PL050_KMICR_FKMID
 
	`BSP_BIT32
(1)

	)

35 
	#PL050_KMICR_FKMIC
 
	`BSP_BIT32
(0)

	)

36 
ut32_t
 
	mkmi¡©
;

37 
	#PL050_KMISTAT_TXEMPTY
 
	`BSP_BIT32
(6)

	)

38 
	#PL050_KMISTAT_TXBUSY
 
	`BSP_BIT32
(5)

	)

39 
	#PL050_KMISTAT_RXFULL
 
	`BSP_BIT32
(4)

	)

40 
	#PL050_KMISTAT_RXBUSY
 
	`BSP_BIT32
(3)

	)

41 
	#PL050_KMISTAT_RXPARITY
 
	`BSP_BIT32
(2)

	)

42 
	#PL050_KMISTAT_KMIC
 
	`BSP_BIT32
(1)

	)

43 
	#PL050_KMISTAT_KMID
 
	`BSP_BIT32
(0)

	)

44 
ut32_t
 
	mkmid©a
;

45 
	#PL050_KMIDATA_KMIDATA
(
v®
è
	`BSP_FLD32
(v®, 0, 7)

	)

46 
	#PL050_KMIDATA_KMIDATA_GET
(
»g
è
	`BSP_FLD32GET
Ôeg, 0, 7)

	)

47 
	#PL050_KMIDATA_KMIDATA_SET
(
»g
, 
v®
è
	`BSP_FLD32SET
Ôeg, v®, 0, 7)

	)

48 
ut32_t
 
	mkmiþkdiv
;

49 
	#PL050_KMICLKDIV_KMICLKDIV
(
v®
è
	`BSP_FLD32
(v®, 0, 3)

	)

50 
	#PL050_KMICLKDIV_KMICLKDIV_GET
(
»g
è
	`BSP_FLD32GET
Ôeg, 0, 3)

	)

51 
	#PL050_KMICLKDIV_KMICLKDIV_SET
(
»g
, 
v®
è
	`BSP_FLD32SET
Ôeg, v®, 0, 3)

	)

52 
ut32_t
 
	mkmi
;

53 
	#PL050_KMIIR_KMITXINTR
 
	`BSP_BIT32
(1)

	)

54 
	#PL050_KMIIR_KMIRXINTR
 
	`BSP_BIT32
(0)

	)

55 } 
	t¶050
;

	@src/lib/libbsp/arm/shared/include/arm-pl050.h

23 #iâdeà
LIBBSP_ARM_SHARED_ARM_PL050_H


24 
	#LIBBSP_ARM_SHARED_ARM_PL050_H


	)

26 
	~<¹ems/rmio¡y³s.h
>

28 
	~<b¥/¬m-¶050-»gs.h
>

30 #ifdeà
__ýlu¥lus


35 
¹ems_rmios_deviû_cÚxt
 
ba£
;

36 vÞ©
¶050
 *
»gs
;

37 
¹ems_veùÜ_numb
 
q
;

38 
ut32_t
 
l_baud
;

39 } 
	t¬m_¶050_cÚxt
;

41 cÚ¡ 
¹ems_rmios_deviû_hªdËr
 
¬m_¶050_âs
;

43 #ifdeà
__ýlu¥lus


	@src/lib/libbsp/arm/shared/include/arm-pl111-fb.h

23 #iâdeà
LIBBSP_ARM_SHARED_ARM_PL111_FB_H


24 
	#LIBBSP_ARM_SHARED_ARM_PL111_FB_H


	)

26 
	~<b¥/¬m-¶111-»gs.h
>

28 
	s¶111_fb_cÚfig
 {

29 vÞ©
¶111
 *
	m»gs
;

30 
ut32_t
 
	mtimg0
;

31 
ut32_t
 
	mtimg1
;

32 
ut32_t
 
	mtimg2
;

33 
ut32_t
 
	mtimg3
;

34 
ut32_t
 
	mcÚÞ
;

35 
ut32_t
 
	mpow_day__us
;

36 (*
	m£t_up
)(cÚ¡ 
¶111_fb_cÚfig
 *
	mcfg
);

37 (*
	mps_£t_up
)(cÚ¡ 
¶111_fb_cÚfig
 *
	mcfg
);

38 (*
	mps_¬_down
)(cÚ¡ 
¶111_fb_cÚfig
 *
	mcfg
);

39 (*
	m¬_down
)(cÚ¡ 
¶111_fb_cÚfig
 *
	mcfg
);

40 } 
	t¶111_fb_cÚfig
;

42 cÚ¡ 
¶111_fb_cÚfig
 *
¬m_¶111_fb_g_cÚfig
();

	@src/lib/libbsp/arm/shared/include/arm-pl111-regs.h

23 #iâdeà
LIBBSP_ARM_SHARED_ARM_PL111_REGS_H


24 
	#LIBBSP_ARM_SHARED_ARM_PL111_REGS_H


	)

26 
	~<b¥/uty.h
>

29 
ut32_t
 
	mtimg0
;

30 
	#PL111_LCD_TIMING0_PPL
(
v®
è
	`BSP_FLD32
(v®, 2, 7)

	)

31 
	#PL111_LCD_TIMING0_PPL_GET
(
»g
è
	`BSP_FLD32GET
Ôeg, 2, 7)

	)

32 
	#PL111_LCD_TIMING0_PPL_SET
(
»g
, 
v®
è
	`BSP_FLD32SET
Ôeg, v®, 2, 7)

	)

33 
	#PL111_LCD_TIMING0_HSW
(
v®
è
	`BSP_FLD32
(v®, 8, 15)

	)

34 
	#PL111_LCD_TIMING0_HSW_GET
(
»g
è
	`BSP_FLD32GET
Ôeg, 8, 15)

	)

35 
	#PL111_LCD_TIMING0_HSW_SET
(
»g
, 
v®
è
	`BSP_FLD32SET
Ôeg, v®, 8, 15)

	)

36 
	#PL111_LCD_TIMING0_HFP
(
v®
è
	`BSP_FLD32
(v®, 16, 23)

	)

37 
	#PL111_LCD_TIMING0_HFP_GET
(
»g
è
	`BSP_FLD32GET
Ôeg, 16, 23)

	)

38 
	#PL111_LCD_TIMING0_HFP_SET
(
»g
, 
v®
è
	`BSP_FLD32SET
Ôeg, v®, 16, 23)

	)

39 
	#PL111_LCD_TIMING0_HBP
(
v®
è
	`BSP_FLD32
(v®, 24, 31)

	)

40 
	#PL111_LCD_TIMING0_HBP_GET
(
»g
è
	`BSP_FLD32GET
Ôeg, 24, 31)

	)

41 
	#PL111_LCD_TIMING0_HBP_SET
(
»g
, 
v®
è
	`BSP_FLD32SET
Ôeg, v®, 24, 31)

	)

42 
ut32_t
 
	mtimg1
;

43 
	#PL111_LCD_TIMING1_LPP
(
v®
è
	`BSP_FLD32
(v®, 0, 9)

	)

44 
	#PL111_LCD_TIMING1_LPP_GET
(
»g
è
	`BSP_FLD32GET
Ôeg, 0, 9)

	)

45 
	#PL111_LCD_TIMING1_LPP_SET
(
»g
, 
v®
è
	`BSP_FLD32SET
Ôeg, v®, 0, 9)

	)

46 
	#PL111_LCD_TIMING1_VSW
(
v®
è
	`BSP_FLD32
(v®, 10, 15)

	)

47 
	#PL111_LCD_TIMING1_VSW_GET
(
»g
è
	`BSP_FLD32GET
Ôeg, 10, 15)

	)

48 
	#PL111_LCD_TIMING1_VSW_SET
(
»g
, 
v®
è
	`BSP_FLD32SET
Ôeg, v®, 10, 15)

	)

49 
	#PL111_LCD_TIMING1_VFP
(
v®
è
	`BSP_FLD32
(v®, 16, 23)

	)

50 
	#PL111_LCD_TIMING1_VFP_GET
(
»g
è
	`BSP_FLD32GET
Ôeg, 16, 23)

	)

51 
	#PL111_LCD_TIMING1_VFP_SET
(
»g
, 
v®
è
	`BSP_FLD32SET
Ôeg, v®, 16, 23)

	)

52 
	#PL111_LCD_TIMING1_VBP
(
v®
è
	`BSP_FLD32
(v®, 24, 31)

	)

53 
	#PL111_LCD_TIMING1_VBP_GET
(
»g
è
	`BSP_FLD32GET
Ôeg, 24, 31)

	)

54 
	#PL111_LCD_TIMING1_VBP_SET
(
»g
, 
v®
è
	`BSP_FLD32SET
Ôeg, v®, 24, 31)

	)

55 
ut32_t
 
	mtimg2
;

56 
	#PL111_LCD_TIMING2_PCD_LO
(
v®
è
	`BSP_FLD32
(v®, 0, 4)

	)

57 
	#PL111_LCD_TIMING2_PCD_LO_GET
(
»g
è
	`BSP_FLD32GET
Ôeg, 0, 4)

	)

58 
	#PL111_LCD_TIMING2_PCD_LO_SET
(
»g
, 
v®
è
	`BSP_FLD32SET
Ôeg, v®, 0, 4)

	)

59 
	#PL111_LCD_TIMING2_CLKSEL
 
	`BSP_BIT32
(5)

	)

60 
	#PL111_LCD_TIMING2_ACB
(
v®
è
	`BSP_FLD32
(v®, 6, 10)

	)

61 
	#PL111_LCD_TIMING2_ACB_GET
(
»g
è
	`BSP_FLD32GET
Ôeg, 6, 10)

	)

62 
	#PL111_LCD_TIMING2_ACB_SET
(
»g
, 
v®
è
	`BSP_FLD32SET
Ôeg, v®, 6, 10)

	)

63 
	#PL111_LCD_TIMING2_IVS
 
	`BSP_BIT32
(11)

	)

64 
	#PL111_LCD_TIMING2_IHS
 
	`BSP_BIT32
(12)

	)

65 
	#PL111_LCD_TIMING2_IPC
 
	`BSP_BIT32
(13)

	)

66 
	#PL111_LCD_TIMING2_IOE
 
	`BSP_BIT32
(14)

	)

67 
	#PL111_LCD_TIMING2_CPL
(
v®
è
	`BSP_FLD32
(v®, 16, 25)

	)

68 
	#PL111_LCD_TIMING2_CPL_GET
(
»g
è
	`BSP_FLD32GET
Ôeg, 16, 25)

	)

69 
	#PL111_LCD_TIMING2_CPL_SET
(
»g
, 
v®
è
	`BSP_FLD32SET
Ôeg, v®, 16, 25)

	)

70 
	#PL111_LCD_TIMING2_BCD
 
	`BSP_BIT32
(26)

	)

71 
	#PL111_LCD_TIMING2_PCD_HI
(
v®
è
	`BSP_FLD32
(v®, 27, 31)

	)

72 
	#PL111_LCD_TIMING2_PCD_HI_GET
(
»g
è
	`BSP_FLD32GET
Ôeg, 27, 31)

	)

73 
	#PL111_LCD_TIMING2_PCD_HI_SET
(
»g
, 
v®
è
	`BSP_FLD32SET
Ôeg, v®, 27, 31)

	)

74 
ut32_t
 
	mtimg3
;

75 
	#PL111_LCD_TIMING3_LED
(
v®
è
	`BSP_FLD32
(v®, 0, 6)

	)

76 
	#PL111_LCD_TIMING3_LED_GET
(
»g
è
	`BSP_FLD32GET
Ôeg, 0, 6)

	)

77 
	#PL111_LCD_TIMING3_LED_SET
(
»g
, 
v®
è
	`BSP_FLD32SET
Ôeg, v®, 0, 6)

	)

78 
	#PL111_LCD_TIMING3_LEE
 
	`BSP_BIT32
(16)

	)

79 
ut32_t
 
	mupba£
;

80 
ut32_t
 
	mÍba£
;

81 
ut32_t
 
	mcÚÞ
;

82 
	#PL111_LCD_CONTROL_LCD_EN
 
	`BSP_BIT32
(0)

	)

83 
	#PL111_LCD_CONTROL_LCD_BPP
(
v®
è
	`BSP_FLD32
(v®, 1, 3)

	)

84 
	#PL111_LCD_CONTROL_LCD_BPP_GET
(
»g
è
	`BSP_FLD32GET
Ôeg, 1, 3)

	)

85 
	#PL111_LCD_CONTROL_LCD_BPP_SET
(
»g
, 
v®
è
	`BSP_FLD32SET
Ôeg, v®, 1, 3)

	)

86 
	#PL111_LCD_CONTROL_LCD_BPP_1
 0x00U

	)

87 
	#PL111_LCD_CONTROL_LCD_BPP_2
 0x01U

	)

88 
	#PL111_LCD_CONTROL_LCD_BPP_4
 0x02U

	)

89 
	#PL111_LCD_CONTROL_LCD_BPP_8
 0x03U

	)

90 
	#PL111_LCD_CONTROL_LCD_BPP_16
 0x04U

	)

91 
	#PL111_LCD_CONTROL_LCD_BPP_24
 0x05U

	)

92 
	#PL111_LCD_CONTROL_LCD_BPP_16
 0x06U

	)

93 
	#PL111_LCD_CONTROL_LCD_BPP_12
 0x07U

	)

94 
	#PL111_LCD_CONTROL_LCD_BW
 
	`BSP_BIT32
(4)

	)

95 
	#PL111_LCD_CONTROL_LCD_TFT
 
	`BSP_BIT32
(5)

	)

96 
	#PL111_LCD_CONTROL_LCD_MONO8
 
	`BSP_BIT32
(6)

	)

97 
	#PL111_LCD_CONTROL_LCD_DUAL
 
	`BSP_BIT32
(7)

	)

98 
	#PL111_LCD_CONTROL_BGR
 
	`BSP_BIT32
(8)

	)

99 
	#PL111_LCD_CONTROL_BEBO
 
	`BSP_BIT32
(9)

	)

100 
	#PL111_LCD_CONTROL_BEPO
 
	`BSP_BIT32
(10)

	)

101 
	#PL111_LCD_CONTROL_LCD_PWR
 
	`BSP_BIT32
(11)

	)

102 
	#PL111_LCD_CONTROL_LCD_V_COMP
(
v®
è
	`BSP_FLD32
(v®, 12, 13)

	)

103 
	#PL111_LCD_CONTROL_LCD_V_COMP_GET
(
»g
è
	`BSP_FLD32GET
Ôeg, 12, 13)

	)

104 
	#PL111_LCD_CONTROL_LCD_V_COMP_SET
(
»g
, 
v®
è
	`BSP_FLD32SET
Ôeg, v®, 12, 13)

	)

105 
	#PL111_LCD_CONTROL_WATERMARK
 
	`BSP_BIT32
(16)

	)

106 
ut32_t
 
	mimsc
;

107 
ut32_t
 
	mris
;

108 
ut32_t
 
	mmis
;

109 
ut32_t
 
	miü
;

110 
	#PL111_LCD_I_FUF
 
	`BSP_BIT32
(1)

	)

111 
	#PL111_LCD_I_LNBU
 
	`BSP_BIT32
(2)

	)

112 
	#PL111_LCD_I_VCOMP
 
	`BSP_BIT32
(3)

	)

113 
	#PL111_LCD_I_MBERROR
 
	`BSP_BIT32
(4)

	)

114 
ut32_t
 
	mupcu¼
;

115 
ut32_t
 
	mÍcu¼
;

116 
ut32_t
 
	m»£rved_34
[115];

117 
ut16_t
 
	m·l
[256];

118 
	#PL111_LCD_PAL_R
(
v®
è
	`BSP_FLD16
(v®, 0, 4)

	)

119 
	#PL111_LCD_PAL_R_GET
(
»g
è
	`BSP_FLD16GET
Ôeg, 0, 4)

	)

120 
	#PL111_LCD_PAL_R_SET
(
»g
, 
v®
è
	`BSP_FLD16SET
Ôeg, v®, 0, 4)

	)

121 
	#PL111_LCD_PAL_G
(
v®
è
	`BSP_FLD16
(v®, 5, 9)

	)

122 
	#PL111_LCD_PAL_G_GET
(
»g
è
	`BSP_FLD16GET
Ôeg, 5, 9)

	)

123 
	#PL111_LCD_PAL_G_SET
(
»g
, 
v®
è
	`BSP_FLD16SET
Ôeg, v®, 5, 9)

	)

124 
	#PL111_LCD_PAL_B
(
v®
è
	`BSP_FLD16
(v®, 10, 14)

	)

125 
	#PL111_LCD_PAL_B_GET
(
»g
è
	`BSP_FLD16GET
Ôeg, 10, 14)

	)

126 
	#PL111_LCD_PAL_B_SET
(
»g
, 
v®
è
	`BSP_FLD16SET
Ôeg, v®, 10, 14)

	)

127 
	#PL111_LCD_PAL_I
 
	`BSP_BIT16
(15)

	)

128 } 
	t¶111_lcd
;

131 
ut8_t
 
	mimage
[1024];

132 
ut32_t
 
	mù¾
;

133 
	#PL111_CRSR_CTRL_ON
 
	`BSP_BIT32
(0)

	)

134 
	#PL111_CRSR_CTRL_NUMBER
(
v®
è
	`BSP_FLD32
(v®, 4, 5)

	)

135 
	#PL111_CRSR_CTRL_NUMBER_GET
(
»g
è
	`BSP_FLD32GET
Ôeg, 4, 5)

	)

136 
	#PL111_CRSR_CTRL_NUMBER_SET
(
»g
, 
v®
è
	`BSP_FLD32SET
Ôeg, v®, 4, 5)

	)

137 
ut32_t
 
	mcÚfig
;

138 
	#PL111_CRSR_CONFIG_SIZE
 
	`BSP_BIT32
(0)

	)

139 
	#PL111_CRSR_CONFIG_FRAME_SYNC
 
	`BSP_BIT32
(1)

	)

140 
ut32_t
 
	m·Ëe0
;

141 
ut32_t
 
	m·Ëe1
;

142 
	#PL111_CRSR_PALETTE_RED
(
v®
è
	`BSP_FLD32
(v®, 0, 7)

	)

143 
	#PL111_CRSR_PALETTE_RED_GET
(
»g
è
	`BSP_FLD32GET
Ôeg, 0, 7)

	)

144 
	#PL111_CRSR_PALETTE_RED_SET
(
»g
, 
v®
è
	`BSP_FLD32SET
Ôeg, v®, 0, 7)

	)

145 
	#PL111_CRSR_PALETTE_GREEN
(
v®
è
	`BSP_FLD32
(v®, 8, 15)

	)

146 
	#PL111_CRSR_PALETTE_GREEN_GET
(
»g
è
	`BSP_FLD32GET
Ôeg, 8, 15)

	)

147 
	#PL111_CRSR_PALETTE_GREEN_SET
(
»g
, 
v®
è
	`BSP_FLD32SET
Ôeg, v®, 8, 15)

	)

148 
	#PL111_CRSR_PALETTE_BLUE
(
v®
è
	`BSP_FLD32
(v®, 16, 23)

	)

149 
	#PL111_CRSR_PALETTE_BLUE_GET
(
»g
è
	`BSP_FLD32GET
Ôeg, 16, 23)

	)

150 
	#PL111_CRSR_PALETTE_BLUE_SET
(
»g
, 
v®
è
	`BSP_FLD32SET
Ôeg, v®, 16, 23)

	)

151 
ut32_t
 
	mxy
;

152 
	#PL111_CRSR_XY_X
(
v®
è
	`BSP_FLD32
(v®, 0, 9)

	)

153 
	#PL111_CRSR_XY_X_GET
(
»g
è
	`BSP_FLD32GET
Ôeg, 0, 9)

	)

154 
	#PL111_CRSR_XY_X_SET
(
»g
, 
v®
è
	`BSP_FLD32SET
Ôeg, v®, 0, 9)

	)

155 
	#PL111_CRSR_XY_X_EXP
(
v®
è
	`BSP_FLD32
(v®, 10, 11)

	)

156 
	#PL111_CRSR_XY_X_EXP_GET
(
»g
è
	`BSP_FLD32GET
Ôeg, 10, 11)

	)

157 
	#PL111_CRSR_XY_X_EXP_SET
(
»g
, 
v®
è
	`BSP_FLD32SET
Ôeg, v®, 10, 11)

	)

158 
	#PL111_CRSR_XY_Y
(
v®
è
	`BSP_FLD32
(v®, 16, 25)

	)

159 
	#PL111_CRSR_XY_Y_GET
(
»g
è
	`BSP_FLD32GET
Ôeg, 16, 25)

	)

160 
	#PL111_CRSR_XY_Y_SET
(
»g
, 
v®
è
	`BSP_FLD32SET
Ôeg, v®, 16, 25)

	)

161 
	#PL111_CRSR_XY_Y_EXP
(
v®
è
	`BSP_FLD32
(v®, 25, 27)

	)

162 
	#PL111_CRSR_XY_Y_EXP_GET
(
»g
è
	`BSP_FLD32GET
Ôeg, 25, 27)

	)

163 
	#PL111_CRSR_XY_Y_EXP_SET
(
»g
, 
v®
è
	`BSP_FLD32SET
Ôeg, v®, 25, 27)

	)

164 
ut32_t
 
	mþ
;

165 
	#PL111_CRSR_CLIP_X
(
v®
è
	`BSP_FLD32
(v®, 0, 5)

	)

166 
	#PL111_CRSR_CLIP_X_GET
(
»g
è
	`BSP_FLD32GET
Ôeg, 0, 5)

	)

167 
	#PL111_CRSR_CLIP_X_SET
(
»g
, 
v®
è
	`BSP_FLD32SET
Ôeg, v®, 0, 5)

	)

168 
	#PL111_CRSR_CLIP_Y
(
v®
è
	`BSP_FLD32
(v®, 8, 13)

	)

169 
	#PL111_CRSR_CLIP_Y_GET
(
»g
è
	`BSP_FLD32GET
Ôeg, 8, 13)

	)

170 
	#PL111_CRSR_CLIP_Y_SET
(
»g
, 
v®
è
	`BSP_FLD32SET
Ôeg, v®, 8, 13)

	)

171 
ut32_t
 
	mimsc
;

172 
ut32_t
 
	miü
;

173 
ut32_t
 
	mris
;

174 
ut32_t
 
	mmis
;

175 
	#PL111_CRSR_I_CRSR
 
	`BSP_BIT32
(0)

	)

176 } 
	t¶111_ü¤
;

179 
¶111_lcd
 
	mlcd
;

180 
ut32_t
 
	m»£rved_400
[256];

181 
¶111_ü¤
 
	mü¤
;

182 } 
	t¶111
;

	@src/lib/libbsp/arm/shared/include/arm-release-id.h

23 #iâdeà
ARM_RELEASE_ID_H_


24 
	#ARM_RELEASE_ID_H_


	)

26 #ifdeà
__ýlu¥lus


32 
	#ARM_RELEASE_ID_FROM_NUMBER_AND_PATCH_LEVEL
Ð
»Ëa£_no
, 
·tch_Ëv
 ) \

33 ÐÐÐÐ
»Ëa£_no
 ) & 0xFFFF ) << 16 ) + ( ( 
·tch_Ëv
 ) & 0xFFFF ) )

	)

36 
ARM_RELEASE_ID_R0_P0
 = 
ARM_RELEASE_ID_FROM_NUMBER_AND_PATCH_LEVEL
( 0, 0 ),

37 
ARM_RELEASE_ID_R0_P1
 = 
ARM_RELEASE_ID_FROM_NUMBER_AND_PATCH_LEVEL
( 0, 1 ),

38 
ARM_RELEASE_ID_R0_P2
 = 
ARM_RELEASE_ID_FROM_NUMBER_AND_PATCH_LEVEL
( 0, 2 ),

39 
ARM_RELEASE_ID_R0_P3
 = 
ARM_RELEASE_ID_FROM_NUMBER_AND_PATCH_LEVEL
( 0, 3 ),

40 
ARM_RELEASE_ID_R0_P4
 = 
ARM_RELEASE_ID_FROM_NUMBER_AND_PATCH_LEVEL
( 0, 4 ),

41 
ARM_RELEASE_ID_R0_P5
 = 
ARM_RELEASE_ID_FROM_NUMBER_AND_PATCH_LEVEL
( 0, 5 ),

42 
ARM_RELEASE_ID_R0_P6
 = 
ARM_RELEASE_ID_FROM_NUMBER_AND_PATCH_LEVEL
( 0, 6 ),

43 
ARM_RELEASE_ID_R0_P7
 = 
ARM_RELEASE_ID_FROM_NUMBER_AND_PATCH_LEVEL
( 0, 7 ),

44 
ARM_RELEASE_ID_R0_P8
 = 
ARM_RELEASE_ID_FROM_NUMBER_AND_PATCH_LEVEL
( 0, 8 ),

45 
ARM_RELEASE_ID_R0_P9
 = 
ARM_RELEASE_ID_FROM_NUMBER_AND_PATCH_LEVEL
( 0, 9 ),

46 
ARM_RELEASE_ID_R0_P10
 = 
ARM_RELEASE_ID_FROM_NUMBER_AND_PATCH_LEVEL
( 0, 10 ),

47 
ARM_RELEASE_ID_R1_P0
 = 
ARM_RELEASE_ID_FROM_NUMBER_AND_PATCH_LEVEL
( 1, 0 ),

48 
ARM_RELEASE_ID_R1_P1
 = 
ARM_RELEASE_ID_FROM_NUMBER_AND_PATCH_LEVEL
( 1, 1 ),

49 
ARM_RELEASE_ID_R1_P2
 = 
ARM_RELEASE_ID_FROM_NUMBER_AND_PATCH_LEVEL
( 1, 2 ),

50 
ARM_RELEASE_ID_R1_P3
 = 
ARM_RELEASE_ID_FROM_NUMBER_AND_PATCH_LEVEL
( 1, 3 ),

51 
ARM_RELEASE_ID_R1_P4
 = 
ARM_RELEASE_ID_FROM_NUMBER_AND_PATCH_LEVEL
( 1, 4 ),

52 
ARM_RELEASE_ID_R1_P5
 = 
ARM_RELEASE_ID_FROM_NUMBER_AND_PATCH_LEVEL
( 1, 5 ),

53 
ARM_RELEASE_ID_R1_P6
 = 
ARM_RELEASE_ID_FROM_NUMBER_AND_PATCH_LEVEL
( 1, 6 ),

54 
ARM_RELEASE_ID_R1_P7
 = 
ARM_RELEASE_ID_FROM_NUMBER_AND_PATCH_LEVEL
( 1, 7 ),

55 
ARM_RELEASE_ID_R1_P8
 = 
ARM_RELEASE_ID_FROM_NUMBER_AND_PATCH_LEVEL
( 1, 8 ),

56 
ARM_RELEASE_ID_R1_P9
 = 
ARM_RELEASE_ID_FROM_NUMBER_AND_PATCH_LEVEL
( 1, 9 ),

57 
ARM_RELEASE_ID_R1_P10
 = 
ARM_RELEASE_ID_FROM_NUMBER_AND_PATCH_LEVEL
( 1, 10 ),

58 
ARM_RELEASE_ID_R2_P0
 = 
ARM_RELEASE_ID_FROM_NUMBER_AND_PATCH_LEVEL
( 2, 0 ),

59 
ARM_RELEASE_ID_R2_P1
 = 
ARM_RELEASE_ID_FROM_NUMBER_AND_PATCH_LEVEL
( 2, 1 ),

60 
ARM_RELEASE_ID_R2_P2
 = 
ARM_RELEASE_ID_FROM_NUMBER_AND_PATCH_LEVEL
( 2, 2 ),

61 
ARM_RELEASE_ID_R2_P3
 = 
ARM_RELEASE_ID_FROM_NUMBER_AND_PATCH_LEVEL
( 2, 3 ),

62 
ARM_RELEASE_ID_R2_P4
 = 
ARM_RELEASE_ID_FROM_NUMBER_AND_PATCH_LEVEL
( 2, 4 ),

63 
ARM_RELEASE_ID_R2_P5
 = 
ARM_RELEASE_ID_FROM_NUMBER_AND_PATCH_LEVEL
( 2, 5 ),

64 
ARM_RELEASE_ID_R2_P6
 = 
ARM_RELEASE_ID_FROM_NUMBER_AND_PATCH_LEVEL
( 2, 6 ),

65 
ARM_RELEASE_ID_R2_P7
 = 
ARM_RELEASE_ID_FROM_NUMBER_AND_PATCH_LEVEL
( 2, 7 ),

66 
ARM_RELEASE_ID_R2_P8
 = 
ARM_RELEASE_ID_FROM_NUMBER_AND_PATCH_LEVEL
( 2, 8 ),

67 
ARM_RELEASE_ID_R2_P9
 = 
ARM_RELEASE_ID_FROM_NUMBER_AND_PATCH_LEVEL
( 2, 9 ),

68 
ARM_RELEASE_ID_R2_P10
 = 
ARM_RELEASE_ID_FROM_NUMBER_AND_PATCH_LEVEL
( 2, 10 ),

69 
ARM_RELEASE_ID_R3_P0
 = 
ARM_RELEASE_ID_FROM_NUMBER_AND_PATCH_LEVEL
( 3, 0 ),

70 
ARM_RELEASE_ID_R3_P1
 = 
ARM_RELEASE_ID_FROM_NUMBER_AND_PATCH_LEVEL
( 3, 1 ),

71 
ARM_RELEASE_ID_R3_P2
 = 
ARM_RELEASE_ID_FROM_NUMBER_AND_PATCH_LEVEL
( 3, 2 ),

72 
ARM_RELEASE_ID_R3_P3
 = 
ARM_RELEASE_ID_FROM_NUMBER_AND_PATCH_LEVEL
( 3, 3 ),

73 
ARM_RELEASE_ID_R3_P4
 = 
ARM_RELEASE_ID_FROM_NUMBER_AND_PATCH_LEVEL
( 3, 4 ),

74 
ARM_RELEASE_ID_R3_P5
 = 
ARM_RELEASE_ID_FROM_NUMBER_AND_PATCH_LEVEL
( 3, 5 ),

75 
ARM_RELEASE_ID_R3_P6
 = 
ARM_RELEASE_ID_FROM_NUMBER_AND_PATCH_LEVEL
( 3, 6 ),

76 
ARM_RELEASE_ID_R3_P7
 = 
ARM_RELEASE_ID_FROM_NUMBER_AND_PATCH_LEVEL
( 3, 7 ),

77 
ARM_RELEASE_ID_R3_P8
 = 
ARM_RELEASE_ID_FROM_NUMBER_AND_PATCH_LEVEL
( 3, 8 ),

78 
ARM_RELEASE_ID_R3_P9
 = 
ARM_RELEASE_ID_FROM_NUMBER_AND_PATCH_LEVEL
( 3, 9 ),

79 
ARM_RELEASE_ID_R3_P10
 = 
ARM_RELEASE_ID_FROM_NUMBER_AND_PATCH_LEVEL
( 3, 10 ),

80 
ARM_RELEASE_ID_R4_P0
 = 
ARM_RELEASE_ID_FROM_NUMBER_AND_PATCH_LEVEL
( 4, 0 ),

81 
ARM_RELEASE_ID_R4_P1
 = 
ARM_RELEASE_ID_FROM_NUMBER_AND_PATCH_LEVEL
( 4, 1 ),

82 
ARM_RELEASE_ID_R4_P2
 = 
ARM_RELEASE_ID_FROM_NUMBER_AND_PATCH_LEVEL
( 4, 2 ),

83 
ARM_RELEASE_ID_R4_P3
 = 
ARM_RELEASE_ID_FROM_NUMBER_AND_PATCH_LEVEL
( 4, 3 ),

84 
ARM_RELEASE_ID_R4_P4
 = 
ARM_RELEASE_ID_FROM_NUMBER_AND_PATCH_LEVEL
( 4, 4 ),

85 
ARM_RELEASE_ID_R4_P5
 = 
ARM_RELEASE_ID_FROM_NUMBER_AND_PATCH_LEVEL
( 4, 5 ),

86 
ARM_RELEASE_ID_R4_P6
 = 
ARM_RELEASE_ID_FROM_NUMBER_AND_PATCH_LEVEL
( 4, 6 ),

87 
ARM_RELEASE_ID_R4_P7
 = 
ARM_RELEASE_ID_FROM_NUMBER_AND_PATCH_LEVEL
( 4, 7 ),

88 
ARM_RELEASE_ID_R4_P8
 = 
ARM_RELEASE_ID_FROM_NUMBER_AND_PATCH_LEVEL
( 4, 8 ),

89 
ARM_RELEASE_ID_R4_P9
 = 
ARM_RELEASE_ID_FROM_NUMBER_AND_PATCH_LEVEL
( 4, 9 ),

90 
ARM_RELEASE_ID_R4_P10
 = 
ARM_RELEASE_ID_FROM_NUMBER_AND_PATCH_LEVEL
( 4, 10 ),

91 
ARM_RELEASE_ID_R5_P0
 = 
ARM_RELEASE_ID_FROM_NUMBER_AND_PATCH_LEVEL
( 5, 0 ),

92 
ARM_RELEASE_ID_R5_P1
 = 
ARM_RELEASE_ID_FROM_NUMBER_AND_PATCH_LEVEL
( 5, 1 ),

93 
ARM_RELEASE_ID_R5_P2
 = 
ARM_RELEASE_ID_FROM_NUMBER_AND_PATCH_LEVEL
( 5, 2 ),

94 
ARM_RELEASE_ID_R5_P3
 = 
ARM_RELEASE_ID_FROM_NUMBER_AND_PATCH_LEVEL
( 5, 3 ),

95 
ARM_RELEASE_ID_R5_P4
 = 
ARM_RELEASE_ID_FROM_NUMBER_AND_PATCH_LEVEL
( 5, 4 ),

96 
ARM_RELEASE_ID_R5_P5
 = 
ARM_RELEASE_ID_FROM_NUMBER_AND_PATCH_LEVEL
( 5, 5 ),

97 
ARM_RELEASE_ID_R5_P6
 = 
ARM_RELEASE_ID_FROM_NUMBER_AND_PATCH_LEVEL
( 5, 6 ),

98 
ARM_RELEASE_ID_R5_P7
 = 
ARM_RELEASE_ID_FROM_NUMBER_AND_PATCH_LEVEL
( 5, 7 ),

99 
ARM_RELEASE_ID_R5_P8
 = 
ARM_RELEASE_ID_FROM_NUMBER_AND_PATCH_LEVEL
( 5, 8 ),

100 
ARM_RELEASE_ID_R5_P9
 = 
ARM_RELEASE_ID_FROM_NUMBER_AND_PATCH_LEVEL
( 5, 9 ),

101 
ARM_RELEASE_ID_R5_P10
 = 
ARM_RELEASE_ID_FROM_NUMBER_AND_PATCH_LEVEL
( 5, 10 ),

102 
ARM_RELEASE_ID_R6_P0
 = 
ARM_RELEASE_ID_FROM_NUMBER_AND_PATCH_LEVEL
( 6, 0 ),

103 
ARM_RELEASE_ID_R6_P1
 = 
ARM_RELEASE_ID_FROM_NUMBER_AND_PATCH_LEVEL
( 6, 1 ),

104 
ARM_RELEASE_ID_R6_P2
 = 
ARM_RELEASE_ID_FROM_NUMBER_AND_PATCH_LEVEL
( 6, 2 ),

105 
ARM_RELEASE_ID_R6_P3
 = 
ARM_RELEASE_ID_FROM_NUMBER_AND_PATCH_LEVEL
( 6, 3 ),

106 
ARM_RELEASE_ID_R6_P4
 = 
ARM_RELEASE_ID_FROM_NUMBER_AND_PATCH_LEVEL
( 6, 4 ),

107 
ARM_RELEASE_ID_R6_P5
 = 
ARM_RELEASE_ID_FROM_NUMBER_AND_PATCH_LEVEL
( 6, 5 ),

108 
ARM_RELEASE_ID_R6_P6
 = 
ARM_RELEASE_ID_FROM_NUMBER_AND_PATCH_LEVEL
( 6, 6 ),

109 
ARM_RELEASE_ID_R6_P7
 = 
ARM_RELEASE_ID_FROM_NUMBER_AND_PATCH_LEVEL
( 6, 7 ),

110 
ARM_RELEASE_ID_R6_P8
 = 
ARM_RELEASE_ID_FROM_NUMBER_AND_PATCH_LEVEL
( 6, 8 ),

111 
ARM_RELEASE_ID_R6_P9
 = 
ARM_RELEASE_ID_FROM_NUMBER_AND_PATCH_LEVEL
( 6, 9 ),

112 
ARM_RELEASE_ID_R6_P10
 = 
ARM_RELEASE_ID_FROM_NUMBER_AND_PATCH_LEVEL
( 6, 10 ),

113 
ARM_RELEASE_ID_R7_P0
 = 
ARM_RELEASE_ID_FROM_NUMBER_AND_PATCH_LEVEL
( 7, 0 ),

114 
ARM_RELEASE_ID_R7_P1
 = 
ARM_RELEASE_ID_FROM_NUMBER_AND_PATCH_LEVEL
( 7, 1 ),

115 
ARM_RELEASE_ID_R7_P2
 = 
ARM_RELEASE_ID_FROM_NUMBER_AND_PATCH_LEVEL
( 7, 2 ),

116 
ARM_RELEASE_ID_R7_P3
 = 
ARM_RELEASE_ID_FROM_NUMBER_AND_PATCH_LEVEL
( 7, 3 ),

117 
ARM_RELEASE_ID_R7_P4
 = 
ARM_RELEASE_ID_FROM_NUMBER_AND_PATCH_LEVEL
( 7, 4 ),

118 
ARM_RELEASE_ID_R7_P5
 = 
ARM_RELEASE_ID_FROM_NUMBER_AND_PATCH_LEVEL
( 7, 5 ),

119 
ARM_RELEASE_ID_R7_P6
 = 
ARM_RELEASE_ID_FROM_NUMBER_AND_PATCH_LEVEL
( 7, 6 ),

120 
ARM_RELEASE_ID_R7_P7
 = 
ARM_RELEASE_ID_FROM_NUMBER_AND_PATCH_LEVEL
( 7, 7 ),

121 
ARM_RELEASE_ID_R7_P8
 = 
ARM_RELEASE_ID_FROM_NUMBER_AND_PATCH_LEVEL
( 7, 8 ),

122 
ARM_RELEASE_ID_R7_P9
 = 
ARM_RELEASE_ID_FROM_NUMBER_AND_PATCH_LEVEL
( 7, 9 ),

123 
ARM_RELEASE_ID_R7_P10
 = 
ARM_RELEASE_ID_FROM_NUMBER_AND_PATCH_LEVEL
( 7, 10 ),

124 
ARM_RELEASE_ID_R8_P0
 = 
ARM_RELEASE_ID_FROM_NUMBER_AND_PATCH_LEVEL
( 8, 0 ),

125 
ARM_RELEASE_ID_R8_P1
 = 
ARM_RELEASE_ID_FROM_NUMBER_AND_PATCH_LEVEL
( 8, 1 ),

126 
ARM_RELEASE_ID_R8_P2
 = 
ARM_RELEASE_ID_FROM_NUMBER_AND_PATCH_LEVEL
( 8, 2 ),

127 
ARM_RELEASE_ID_R8_P3
 = 
ARM_RELEASE_ID_FROM_NUMBER_AND_PATCH_LEVEL
( 8, 3 ),

128 
ARM_RELEASE_ID_R8_P4
 = 
ARM_RELEASE_ID_FROM_NUMBER_AND_PATCH_LEVEL
( 8, 4 ),

129 
ARM_RELEASE_ID_R8_P5
 = 
ARM_RELEASE_ID_FROM_NUMBER_AND_PATCH_LEVEL
( 8, 5 ),

130 
ARM_RELEASE_ID_R8_P6
 = 
ARM_RELEASE_ID_FROM_NUMBER_AND_PATCH_LEVEL
( 8, 6 ),

131 
ARM_RELEASE_ID_R8_P7
 = 
ARM_RELEASE_ID_FROM_NUMBER_AND_PATCH_LEVEL
( 8, 7 ),

132 
ARM_RELEASE_ID_R8_P8
 = 
ARM_RELEASE_ID_FROM_NUMBER_AND_PATCH_LEVEL
( 8, 8 ),

133 
ARM_RELEASE_ID_R8_P9
 = 
ARM_RELEASE_ID_FROM_NUMBER_AND_PATCH_LEVEL
( 8, 9 ),

134 
ARM_RELEASE_ID_R8_P10
 = 
ARM_RELEASE_ID_FROM_NUMBER_AND_PATCH_LEVEL
( 8, 10 ),

135 
ARM_RELEASE_ID_R9_P0
 = 
ARM_RELEASE_ID_FROM_NUMBER_AND_PATCH_LEVEL
( 9, 0 ),

136 
ARM_RELEASE_ID_R9_P1
 = 
ARM_RELEASE_ID_FROM_NUMBER_AND_PATCH_LEVEL
( 9, 1 ),

137 
ARM_RELEASE_ID_R9_P2
 = 
ARM_RELEASE_ID_FROM_NUMBER_AND_PATCH_LEVEL
( 9, 2 ),

138 
ARM_RELEASE_ID_R9_P3
 = 
ARM_RELEASE_ID_FROM_NUMBER_AND_PATCH_LEVEL
( 9, 3 ),

139 
ARM_RELEASE_ID_R9_P4
 = 
ARM_RELEASE_ID_FROM_NUMBER_AND_PATCH_LEVEL
( 9, 4 ),

140 
ARM_RELEASE_ID_R9_P5
 = 
ARM_RELEASE_ID_FROM_NUMBER_AND_PATCH_LEVEL
( 9, 5 ),

141 
ARM_RELEASE_ID_R9_P6
 = 
ARM_RELEASE_ID_FROM_NUMBER_AND_PATCH_LEVEL
( 9, 6 ),

142 
ARM_RELEASE_ID_R9_P7
 = 
ARM_RELEASE_ID_FROM_NUMBER_AND_PATCH_LEVEL
( 9, 7 ),

143 
ARM_RELEASE_ID_R9_P8
 = 
ARM_RELEASE_ID_FROM_NUMBER_AND_PATCH_LEVEL
( 9, 8 ),

144 
ARM_RELEASE_ID_R9_P9
 = 
ARM_RELEASE_ID_FROM_NUMBER_AND_PATCH_LEVEL
( 9, 9 ),

145 
ARM_RELEASE_ID_R9_P10
 = 
ARM_RELEASE_ID_FROM_NUMBER_AND_PATCH_LEVEL
( 9, 10 )

146 } 
	t¬m_»Ëa£_id
;

148 #ifdeà
__ýlu¥lus


	@src/lib/libbsp/arm/shared/include/linker-symbols.h

23 #iâdeà
LIBBSP_ARM_SHARED_LINKER_SYMBOLS_H


24 
	#LIBBSP_ARM_SHARED_LINKER_SYMBOLS_H


	)

26 #ifdeà
__ýlu¥lus


40 #iâdeà
ASM


41 
	#LINKER_SYMBOL
(
sym
èsym [];

	)

43 
	#LINKER_SYMBOL
(
sym
è.
	)
sym

46 
LINKER_SYMBOL
(
b¥_¡ack_q_beg
)

47 
LINKER_SYMBOL
(
b¥_¡ack_q_d
)

48 
LINKER_SYMBOL
(
b¥_¡ack_q_size
)

50 
LINKER_SYMBOL
(
b¥_¡ack_fiq_beg
)

51 
LINKER_SYMBOL
(
b¥_¡ack_fiq_d
)

52 
LINKER_SYMBOL
(
b¥_¡ack_q_size
)

54 
LINKER_SYMBOL
(
b¥_¡ack_abt_beg
)

55 
LINKER_SYMBOL
(
b¥_¡ack_abt_d
)

56 
LINKER_SYMBOL
(
b¥_¡ack_abt_size
)

58 
LINKER_SYMBOL
(
b¥_¡ack_und_beg
)

59 
LINKER_SYMBOL
(
b¥_¡ack_und_d
)

60 
LINKER_SYMBOL
(
b¥_¡ack_und_size
)

62 
LINKER_SYMBOL
(
b¥_¡ack_svc_beg
)

63 
LINKER_SYMBOL
(
b¥_¡ack_svc_d
)

64 
LINKER_SYMBOL
(
b¥_¡ack_svc_size
)

66 
LINKER_SYMBOL
(
b¥_£ùiÚ_¡¬t_beg
)

67 
LINKER_SYMBOL
(
b¥_£ùiÚ_¡¬t_d
)

68 
LINKER_SYMBOL
(
b¥_£ùiÚ_¡¬t_size
)

70 
LINKER_SYMBOL
(
b¥_£ùiÚ_veùÜ_beg
)

71 
LINKER_SYMBOL
(
b¥_£ùiÚ_veùÜ_d
)

72 
LINKER_SYMBOL
(
b¥_£ùiÚ_veùÜ_size
)

74 
LINKER_SYMBOL
(
b¥_£ùiÚ_xt_beg
)

75 
LINKER_SYMBOL
(
b¥_£ùiÚ_xt_d
)

76 
LINKER_SYMBOL
(
b¥_£ùiÚ_xt_size
)

77 
LINKER_SYMBOL
(
b¥_£ùiÚ_xt_lßd_beg
)

78 
LINKER_SYMBOL
(
b¥_£ùiÚ_xt_lßd_d
)

80 
LINKER_SYMBOL
(
b¥_£ùiÚ_rod©a_beg
)

81 
LINKER_SYMBOL
(
b¥_£ùiÚ_rod©a_d
)

82 
LINKER_SYMBOL
(
b¥_£ùiÚ_rod©a_size
)

83 
LINKER_SYMBOL
(
b¥_£ùiÚ_rod©a_lßd_beg
)

84 
LINKER_SYMBOL
(
b¥_£ùiÚ_rod©a_lßd_d
)

86 
LINKER_SYMBOL
(
b¥_£ùiÚ_d©a_beg
)

87 
LINKER_SYMBOL
(
b¥_£ùiÚ_d©a_d
)

88 
LINKER_SYMBOL
(
b¥_£ùiÚ_d©a_size
)

89 
LINKER_SYMBOL
(
b¥_£ùiÚ_d©a_lßd_beg
)

90 
LINKER_SYMBOL
(
b¥_£ùiÚ_d©a_lßd_d
)

92 
LINKER_SYMBOL
(
b¥_£ùiÚ_ç¡_xt_beg
)

93 
LINKER_SYMBOL
(
b¥_£ùiÚ_ç¡_xt_d
)

94 
LINKER_SYMBOL
(
b¥_£ùiÚ_ç¡_xt_size
)

95 
LINKER_SYMBOL
(
b¥_£ùiÚ_ç¡_xt_lßd_beg
)

96 
LINKER_SYMBOL
(
b¥_£ùiÚ_ç¡_xt_lßd_d
)

98 
LINKER_SYMBOL
(
b¥_£ùiÚ_ç¡_d©a_beg
)

99 
LINKER_SYMBOL
(
b¥_£ùiÚ_ç¡_d©a_d
)

100 
LINKER_SYMBOL
(
b¥_£ùiÚ_ç¡_d©a_size
)

101 
LINKER_SYMBOL
(
b¥_£ùiÚ_ç¡_d©a_lßd_beg
)

102 
LINKER_SYMBOL
(
b¥_£ùiÚ_ç¡_d©a_lßd_d
)

104 
LINKER_SYMBOL
(
b¥_£ùiÚ_bss_beg
)

105 
LINKER_SYMBOL
(
b¥_£ùiÚ_bss_d
)

106 
LINKER_SYMBOL
(
b¥_£ùiÚ_bss_size
)

108 
LINKER_SYMBOL
(
b¥_£ùiÚ_wÜk_beg
)

109 
LINKER_SYMBOL
(
b¥_£ùiÚ_wÜk_d
)

110 
LINKER_SYMBOL
(
b¥_£ùiÚ_wÜk_size
)

112 
LINKER_SYMBOL
(
b¥_£ùiÚ_¡ack_beg
)

113 
LINKER_SYMBOL
(
b¥_£ùiÚ_¡ack_d
)

114 
LINKER_SYMBOL
(
b¥_£ùiÚ_¡ack_size
)

116 
LINKER_SYMBOL
(
b¥_£ùiÚ_noÿche_beg
)

117 
LINKER_SYMBOL
(
b¥_£ùiÚ_noÿche_d
)

118 
LINKER_SYMBOL
(
b¥_£ùiÚ_noÿche_size
)

119 
LINKER_SYMBOL
(
b¥_£ùiÚ_noÿche_lßd_beg
)

120 
LINKER_SYMBOL
(
b¥_£ùiÚ_noÿche_lßd_d
)

122 
LINKER_SYMBOL
(
b¥_veùÜ_bË_beg
)

123 
LINKER_SYMBOL
(
b¥_veùÜ_bË_d
)

124 
LINKER_SYMBOL
(
b¥_veùÜ_bË_size
)

126 
LINKER_SYMBOL
(
b¥_¡¬t_veùÜ_bË_beg
)

127 
LINKER_SYMBOL
(
b¥_¡¬t_veùÜ_bË_d
)

128 
LINKER_SYMBOL
(
b¥_¡¬t_veùÜ_bË_size
)

130 
LINKER_SYMBOL
(
b¥_ª¦©iÚ_bË_ba£
)

131 
LINKER_SYMBOL
(
b¥_ª¦©iÚ_bË_d
)

133 
LINKER_SYMBOL
(
b¥_noÿche_hp_beg
)

134 
LINKER_SYMBOL
(
b¥_noÿche_hp_d
)

135 
LINKER_SYMBOL
(
b¥_noÿche_hp_size
)

137 
	#BSP_FAST_TEXT_SECTION
 
	`__©ibu__
((
	`£ùiÚ
(".b¥_ç¡_xt")))

	)

139 
	#BSP_FAST_DATA_SECTION
 
	`__©ibu__
((
	`£ùiÚ
(".b¥_ç¡_d©a")))

	)

141 
	#BSP_NOCACHE_SECTION
 
	`__©ibu__
((
	`£ùiÚ
(".b¥_noÿche")))

	)

143 
LINKER_SYMBOL
(
b¥_´oûssÜ_couÁ
)

147 #ifdeà
__ýlu¥lus


	@src/lib/libbsp/arm/shared/include/start.h

23 #iâdeà
LIBBSP_ARM_SHARED_START_H


24 
	#LIBBSP_ARM_SHARED_START_H


	)

26 
	~<¡rg.h
>

28 
	~<b¥/lk-symbÞs.h
>

30 #ifdeà
__ýlu¥lus


44 
	#BSP_START_TEXT_SECTION
 
	`__©ibu__
((
	`£ùiÚ
(".b¥_¡¬t_xt")))

	)

46 
	#BSP_START_DATA_SECTION
 
	`__©ibu__
((
	`£ùiÚ
(".b¥_¡¬t_d©a")))

	)

51 
_¡¬t
();

60 
b¥_¡¬t_hook_0
();

68 
b¥_¡¬t_hook_1
();

76 
b¥_¡¬t_memýy
(*
de¡
, cÚ¡ *
¤c
, 
size_t
 
n
);

81 
b¥_¡¬t_memýy_¬m
(*
de¡
, cÚ¡ *
¤c
, 
size_t
 
n
);

86 
BSP_START_TEXT_SECTION
 
le
 
b¥_¡¬t_cÝy_£ùiÚs
()

89 
b¥_¡¬t_memýy
(

90 (*è
b¥_£ùiÚ_xt_beg
,

91 (cÚ¡ *è
b¥_£ùiÚ_xt_lßd_beg
,

92 (
size_t
è
b¥_£ùiÚ_xt_size


96 
b¥_¡¬t_memýy
(

97 (*è
b¥_£ùiÚ_rod©a_beg
,

98 (cÚ¡ *è
b¥_£ùiÚ_rod©a_lßd_beg
,

99 (
size_t
è
b¥_£ùiÚ_rod©a_size


103 
b¥_¡¬t_memýy
(

104 (*è
b¥_£ùiÚ_d©a_beg
,

105 (cÚ¡ *è
b¥_£ùiÚ_d©a_lßd_beg
,

106 (
size_t
è
b¥_£ùiÚ_d©a_size


110 
b¥_¡¬t_memýy
(

111 (*è
b¥_£ùiÚ_ç¡_xt_beg
,

112 (cÚ¡ *è
b¥_£ùiÚ_ç¡_xt_lßd_beg
,

113 (
size_t
è
b¥_£ùiÚ_ç¡_xt_size


117 
b¥_¡¬t_memýy
(

118 (*è
b¥_£ùiÚ_ç¡_d©a_beg
,

119 (cÚ¡ *è
b¥_£ùiÚ_ç¡_d©a_lßd_beg
,

120 (
size_t
è
b¥_£ùiÚ_ç¡_d©a_size


124 
BSP_START_TEXT_SECTION
 
le
 
b¥_¡¬t_þr_bss
()

126 
mem£t
(
b¥_£ùiÚ_bss_beg
, 0, (
size_t
è
b¥_£ùiÚ_bss_size
);

131 #ifdeà
__ýlu¥lus


	@src/lib/libbsp/arm/shared/lpc/clock/lpc-clock-config.c

23 
	~<¹ems.h
>

24 
	~<¹ems/timecouÁ.h
>

26 
	~<b¥/Íc-þock-cÚfig.h
>

27 
	~<b¥/Íc-tim.h
>

29 #ifdeà
ARM_MULTILIB_ARCH_V4


32 
Clock_i¤
(
¹ems_q_hdl_·¿m
 
¬g
);

34 vÞ©
Íc_tim
 *cÚ¡ 
	gÍc_þock
 =

35 (vÞ©
Íc_tim
 *è
LPC_CLOCK_TIMER_BASE
;

37 vÞ©
Íc_tim
 *cÚ¡ 
	gÍc_timecouÁ
 =

38 (vÞ©
Íc_tim
 *è
LPC_CLOCK_TIMECOUNTER_BASE
;

40 
timecouÁ
 
	gÍc_þock_tc
;

42 
ut32_t
 
	$Íc_þock_tc_g_timecouÁ
(
timecouÁ
 *
tc
)

44  
Íc_timecouÁ
->
tc
;

45 
	}
}

47 
	$Íc_þock_©_tick
()

49 
Íc_þock
->

 = 
LPC_TIMER_IR_MR0
;

50 
	}
}

52 
	$Íc_þock_hªdËr_¡®l
()

54 
¹ems_¡©us_code
 
sc
 = 
RTEMS_SUCCESSFUL
;

56 
sc
 = 
	`¹ems_¼u±_hªdËr_¡®l
(

57 
LPC_CLOCK_INTERRUPT
,

59 
RTEMS_INTERRUPT_UNIQUE
,

60 (
¹ems_¼u±_hªdËr
è
Clock_i¤
,

61 
NULL


63 ià(
sc
 !ð
RTEMS_SUCCESSFUL
) {

64 
	`¹ems_çl_rÜ_occu¼ed
(0xdeadbeef);

66 
	}
}

68 
	$Íc_þock_lize
()

70 
ut64_t
 
rv®
 = ((ut64_tè
LPC_CLOCK_REFERENCE


71 * (
ut64_t
è
	`¹ems_cÚfigu¿tiÚ_g_miüo£cÚds_³r_tick
()) / 1000000;

74 
	`LPC_CLOCK_MODULE_ENABLE
();

77 
Íc_þock
->
tü
 = 
LPC_TIMER_TCR_RST
;

80 
Íc_þock
->

 = 
LPC_TIMER_IR_ALL
;

83 
Íc_þock
->
cü
 = 0;

86 
Íc_þock
->
´
 = 0;

89 
Íc_þock
->
mr0
 = (
ut32_t
è
rv®
;

92 
Íc_þock
->
mü
 = 
LPC_TIMER_MCR_MR0_INTR
 | 
LPC_TIMER_MCR_MR0_RST
;

95 
Íc_þock
->
emr
 = 0x0;

98 
Íc_þock
->
tü
 = 
LPC_TIMER_TCR_EN
;

101 
Íc_þock_tc
.
tc_g_timecouÁ
 = 
Íc_þock_tc_g_timecouÁ
;

102 
Íc_þock_tc
.
tc_couÁ_mask
 = 0xffffffff;

103 
Íc_þock_tc
.
tc_äequcy
 = 
LPC_CLOCK_REFERENCE
;

104 
Íc_þock_tc
.
tc_qu®y
 = 
RTEMS_TIMECOUNTER_QUALITY_CLOCK_DRIVER
;

105 
	`¹ems_timecouÁ_¡®l
(&
Íc_þock_tc
);

106 
	}
}

108 
	$Íc_þock_þnup
()

110 
¹ems_¡©us_code
 
sc
 = 
RTEMS_SUCCESSFUL
;

113 
Íc_þock
->
tü
 = 0x0;

116 
sc
 = 
	`¹ems_¼u±_hªdËr_»move
(

117 
LPC_CLOCK_INTERRUPT
,

118 (
¹ems_¼u±_hªdËr
è
Clock_i¤
,

119 
NULL


121 ià(
sc
 !ð
RTEMS_SUCCESSFUL
) {

122 
	`¹ems_çl_rÜ_occu¼ed
(0xdeadbeef);

124 
	}
}

126 
	#Clock_driv_suµÜt_©_tick
(è
	`Íc_þock_©_tick
()

	)

127 
	#Clock_driv_suµÜt_lize_h¬dw¬e
(è
	`Íc_þock_lize
()

	)

128 
	#Clock_driv_suµÜt_¡®l_i¤
(
i¤
, 
Þd_i¤
) \

130 
	`Íc_þock_hªdËr_¡®l
(); \

131 
Þd_i¤
 = 
NULL
; \

132 } 0)

	)

134 
	#Clock_driv_suµÜt_shutdown_h¬dw¬e
(è
	`Íc_þock_þnup
()

	)

137 
	~"../../../../sh¬ed/þockdrv_shl.h
"

	@src/lib/libbsp/arm/shared/lpc/include/lpc-dma.h

23 #iâdeà
LIBBSP_ARM_SHARED_LPC_DMA_H


24 
	#LIBBSP_ARM_SHARED_LPC_DMA_H


	)

26 
	~<b¥Ýts.h
>

27 
	~<b¥/uty.h
>

29 #ifdeà
__ýlu¥lus


48 
ut32_t
 
¤c
;

49 
ut32_t
 
de¡
;

50 
ut32_t
 
Îi
;

51 
ut32_t
 
ù¾
;

52 } 
	tÍc_dma_desütÜ
;

58 
Íc_dma_desütÜ
 
desc
;

59 
ut32_t
 
cfg
;

60 
ut32_t
 
»£rved
 [3];

61 } 
	tÍc_dma_chªÃl
;

67 
ut32_t
 
t_¡©
;

68 
ut32_t
 
t_tc_¡©
;

69 
ut32_t
 
t_tc_þr
;

70 
ut32_t
 
t_r_¡©
;

71 
ut32_t
 
t_r_þr
;

72 
ut32_t
 
¿w_tc_¡©
;

73 
ut32_t
 
¿w_r_¡©
;

74 
ut32_t
 
abËd_chªÃls
;

75 
ut32_t
 
soá_bur¡_»q
;

76 
ut32_t
 
soá_sgË_»q
;

77 
ut32_t
 
soá_Ï¡_bur¡_»q
;

78 
ut32_t
 
soá_Ï¡_sgË_»q
;

79 
ut32_t
 
cfg
;

80 
ut32_t
 
sync
;

81 
ut32_t
 
»£rved
 [50];

82 
Íc_dma_chªÃl
 
chªÃls
 [
LPC_DMA_CHANNEL_COUNT
];

83 } 
	tÍc_dma
;

91 
	#DMA_CFG_E
 
	`BSP_BIT32
(0)

	)

92 
	#DMA_CFG_M_0
 
	`BSP_BIT32
(1)

	)

93 
	#DMA_CFG_M_1
 
	`BSP_BIT32
(2)

	)

103 
	#DMA_CH_CTRL_TSZ
(
v®
è
	`BSP_FLD32
(v®, 0, 11)

	)

104 
	#DMA_CH_CTRL_TSZ_MAX
 
	`DMA_CH_CTRL_TSZ
(0xfff)

	)

106 
	#DMA_CH_CTRL_SB
(
v®
è
	`BSP_FLD32
(v®, 12, 14)

	)

107 
	#DMA_CH_CTRL_SB_1
 
	`DMA_CH_CTRL_SB
(0)

	)

108 
	#DMA_CH_CTRL_SB_4
 
	`DMA_CH_CTRL_SB
(1)

	)

109 
	#DMA_CH_CTRL_SB_8
 
	`DMA_CH_CTRL_SB
(2)

	)

110 
	#DMA_CH_CTRL_SB_16
 
	`DMA_CH_CTRL_SB
(3)

	)

111 
	#DMA_CH_CTRL_SB_32
 
	`DMA_CH_CTRL_SB
(4)

	)

112 
	#DMA_CH_CTRL_SB_64
 
	`DMA_CH_CTRL_SB
(5)

	)

113 
	#DMA_CH_CTRL_SB_128
 
	`DMA_CH_CTRL_SB
(6)

	)

114 
	#DMA_CH_CTRL_SB_256
 
	`DMA_CH_CTRL_SB
(7)

	)

116 
	#DMA_CH_CTRL_DB
(
v®
è
	`BSP_FLD32
(v®, 15, 17)

	)

117 
	#DMA_CH_CTRL_DB_1
 
	`DMA_CH_CTRL_DB
(0)

	)

118 
	#DMA_CH_CTRL_DB_4
 
	`DMA_CH_CTRL_DB
(1)

	)

119 
	#DMA_CH_CTRL_DB_8
 
	`DMA_CH_CTRL_DB
(2)

	)

120 
	#DMA_CH_CTRL_DB_16
 
	`DMA_CH_CTRL_DB
(3)

	)

121 
	#DMA_CH_CTRL_DB_32
 
	`DMA_CH_CTRL_DB
(4)

	)

122 
	#DMA_CH_CTRL_DB_64
 
	`DMA_CH_CTRL_DB
(5)

	)

123 
	#DMA_CH_CTRL_DB_128
 
	`DMA_CH_CTRL_DB
(6)

	)

124 
	#DMA_CH_CTRL_DB_256
 
	`DMA_CH_CTRL_DB
(7)

	)

126 
	#DMA_CH_CTRL_SW
(
v®
è
	`BSP_FLD32
(v®, 18, 20)

	)

127 
	#DMA_CH_CTRL_SW_8
 
	`DMA_CH_CTRL_SW
(0)

	)

128 
	#DMA_CH_CTRL_SW_16
 
	`DMA_CH_CTRL_SW
(1)

	)

129 
	#DMA_CH_CTRL_SW_32
 
	`DMA_CH_CTRL_SW
(2)

	)

131 
	#DMA_CH_CTRL_DW
(
v®
è
	`BSP_FLD32
(v®, 21, 23)

	)

132 
	#DMA_CH_CTRL_DW_8
 
	`DMA_CH_CTRL_DW
(0)

	)

133 
	#DMA_CH_CTRL_DW_16
 
	`DMA_CH_CTRL_DW
(1)

	)

134 
	#DMA_CH_CTRL_DW_32
 
	`DMA_CH_CTRL_DW
(2)

	)

136 
	#DMA_CH_CTRL_S
 
	`BSP_BIT32
(24)

	)

137 
	#DMA_CH_CTRL_D
 
	`BSP_BIT32
(25)

	)

138 
	#DMA_CH_CTRL_SI
 
	`BSP_BIT32
(26)

	)

139 
	#DMA_CH_CTRL_DI
 
	`BSP_BIT32
(27)

	)

140 
	#DMA_CH_CTRL_PROT
(
v®
è
	`BSP_FLD32
(v®, 28, 30)

	)

141 
	#DMA_CH_CTRL_I
 
	`BSP_BIT32
(31)

	)

151 
	#DMA_CH_CFG_E
 
	`BSP_BIT32
(0)

	)

152 
	#DMA_CH_CFG_SPER
(
v®
è
	`BSP_FLD32
(v®, 1, 5)

	)

153 
	#DMA_CH_CFG_DPER
(
v®
è
	`BSP_FLD32
(v®, 6, 10)

	)

155 
	#DMA_CH_CFG_FLOW
(
v®
è
	`BSP_FLD32
(v®, 11, 13)

	)

156 
	#DMA_CH_CFG_FLOW_MEM_TO_MEM_DMA
 
	`DMA_CH_CFG_FLOW
(0)

	)

157 
	#DMA_CH_CFG_FLOW_MEM_TO_PER_DMA
 
	`DMA_CH_CFG_FLOW
(1)

	)

158 
	#DMA_CH_CFG_FLOW_PER_TO_MEM_DMA
 
	`DMA_CH_CFG_FLOW
(2)

	)

159 
	#DMA_CH_CFG_FLOW_PER_TO_PER_DMA
 
	`DMA_CH_CFG_FLOW
(3)

	)

160 
	#DMA_CH_CFG_FLOW_PER_TO_PER_DEST
 
	`DMA_CH_CFG_FLOW
(4)

	)

161 
	#DMA_CH_CFG_FLOW_MEM_TO_PER_PER
 
	`DMA_CH_CFG_FLOW
(5)

	)

162 
	#DMA_CH_CFG_FLOW_PER_TO_MEM_PER
 
	`DMA_CH_CFG_FLOW
(6)

	)

163 
	#DMA_CH_CFG_FLOW_PER_TO_PER_SRC
 
	`DMA_CH_CFG_FLOW
(7)

	)

165 
	#DMA_CH_CFG_IE
 
	`BSP_BIT32
(14)

	)

166 
	#DMA_CH_CFG_ITC
 
	`BSP_BIT32
(15)

	)

167 
	#DMA_CH_CFG_L
 
	`BSP_BIT32
(16)

	)

168 
	#DMA_CH_CFG_A
 
	`BSP_BIT32
(17)

	)

169 
	#DMA_CH_CFG_H
 
	`BSP_BIT32
(18)

	)

179 
	#LPC24XX_DMA_PER_SSP_0_TX
 0

	)

180 
	#LPC24XX_DMA_PER_SSP_0_RX
 1

	)

181 
	#LPC24XX_DMA_PER_SSP_1_TX
 2

	)

182 
	#LPC24XX_DMA_PER_SSP_1_RX
 3

	)

183 
	#LPC24XX_DMA_PER_SD_MMC
 4

	)

184 
	#LPC24XX_DMA_PER_I2S_CH_0
 5

	)

185 
	#LPC24XX_DMA_PER_I2S_CH_1
 6

	)

195 
	#LPC32XX_DMA_PER_I2S_0_CH_0
 0

	)

196 
	#LPC32XX_DMA_PER_I2S_0_CH_1
 13

	)

197 
	#LPC32XX_DMA_PER_I2S_1_CH_0
 2

	)

198 
	#LPC32XX_DMA_PER_I2S_1_CH_1
 10

	)

199 
	#LPC32XX_DMA_PER_NAND_0
 1

	)

200 
	#LPC32XX_DMA_PER_NAND_1
 12

	)

201 
	#LPC32XX_DMA_PER_SD_MMC
 4

	)

202 
	#LPC32XX_DMA_PER_SSP_0_RX
 14

	)

203 
	#LPC32XX_DMA_PER_SSP_0_TX
 15

	)

204 
	#LPC32XX_DMA_PER_SSP_1_RX
 3

	)

205 
	#LPC32XX_DMA_PER_SSP_1_TX
 11

	)

206 
	#LPC32XX_DMA_PER_UART_1_RX
 6

	)

207 
	#LPC32XX_DMA_PER_UART_1_TX
 5

	)

208 
	#LPC32XX_DMA_PER_UART_2_RX
 8

	)

209 
	#LPC32XX_DMA_PER_UART_2_TX
 7

	)

210 
	#LPC32XX_DMA_PER_UART_7_RX
 10

	)

211 
	#LPC32XX_DMA_PER_UART_7_TX
 9

	)

217 #ifdeà
__ýlu¥lus


	@src/lib/libbsp/arm/shared/lpc/include/lpc-emc.h

23 #iâdeà
LIBBSP_ARM_SHARED_LPC_EMC_H


24 
	#LIBBSP_ARM_SHARED_LPC_EMC_H


	)

26 
	~<b¥/uty.h
>

28 #ifdeà
__ýlu¥lus


49 
	#EMC_CTRL_E
 
	`BSP_BIT32
(0)

	)

50 
	#EMC_CTRL_M
 
	`BSP_BIT32
(0)

	)

51 
	#EMC_CTRL_L
 
	`BSP_BIT32
(2)

	)

61 
	#EMC_DYN_CTRL_CE
 
	`BSP_BIT32
(0)

	)

62 
	#EMC_DYN_CTRL_CS
 
	`BSP_BIT32
(1)

	)

63 
	#EMC_DYN_CTRL_SR
 
	`BSP_BIT32
(2)

	)

64 
	#EMC_DYN_CTRL_SRMCC
 
	`BSP_BIT32
(3)

	)

65 
	#EMC_DYN_CTRL_IMCC
 
	`BSP_BIT32
(4)

	)

66 
	#EMC_DYN_CTRL_MCC
 
	`BSP_BIT32
(5)

	)

67 
	#EMC_DYN_CTRL_I_MASK
 
	`BSP_MSK32
(7, 8)

	)

68 
	#EMC_DYN_CTRL_I_NORMAL
 
	`BSP_FLD32
(0x0, 7, 8)

	)

69 
	#EMC_DYN_CTRL_I_MODE
 
	`BSP_FLD32
(0x1, 7, 8)

	)

70 
	#EMC_DYN_CTRL_I_PALL
 
	`BSP_FLD32
(0x2, 7, 8)

	)

71 
	#EMC_DYN_CTRL_I_NOP
 
	`BSP_FLD32
(0x3, 7, 8)

	)

72 
	#EMC_DYN_CTRL_DP
 
	`BSP_BIT32
(13)

	)

82 
	#EMC_DYN_READ_CONFIG_SDR_STRAT
(
v®
è
	`BSP_FLD32
(v®, 0, 1)

	)

83 
	#EMC_DYN_READ_CONFIG_SDR_POL_POS
 
	`BSP_BIT32
(4)

	)

84 
	#EMC_DYN_READ_CONFIG_DDR_STRAT
(
v®
è
	`BSP_FLD32
(v®, 8, 9)

	)

85 
	#EMC_DYN_READ_CONFIG_DDR_POL_POS
 
	`BSP_BIT32
(12)

	)

95 
	#EMC_DYN_CFG_MD_LPC24XX
(
v®
è
	`BSP_FLD32
(v®, 3, 4)

	)

96 
	#EMC_DYN_CFG_MD_LPC32XX
(
v®
è
	`BSP_FLD32
(v®, 0, 2)

	)

97 
	#EMC_DYN_CFG_AM
(
v®
è
	`BSP_FLD32
(v®, 7, 14)

	)

98 
	#EMC_DYN_CFG_B
 
	`BSP_BIT32
(19)

	)

99 
	#EMC_DYN_CFG_P
 
	`BSP_BIT32
(20)

	)

109 
	#EMC_DYN_RASCAS_RAS
(
v®
è
	`BSP_FLD32
(v®, 0, 3)

	)

110 
	#EMC_DYN_RASCAS_CAS
(
v®
, 
h®f
è
	`BSP_FLD32
(((v®è<< 1è| (h®f), 7, 10)

	)

114 
	#EMC_DYN_CHIP_COUNT
 4

	)

116 
	#EMC_STATIC_CHIP_COUNT
 4

	)

119 
ut32_t
 
cÚfig
;

120 
ut32_t
 
¿sÿs
;

121 
ut32_t
 
»£rved_0
 [6];

122 } 
	tÍc_emc_dyÇmic
;

125 
ut32_t
 
cÚfig
;

126 
ut32_t
 
waw
;

127 
ut32_t
 
waÛn
;

128 
ut32_t
 
ward
;

129 
ut32_t
 
wa·ge
;

130 
ut32_t
 
wawr
;

131 
ut32_t
 
watuº
;

132 
ut32_t
 
»£rved_0
 [1];

133 } 
	tÍc_emc_¡©ic
;

136 
ut32_t
 
cÚÞ
;

137 
ut32_t
 
¡©us
;

138 
ut32_t
 
cÚfig
;

139 
ut32_t
 
»£rved_0
 [5];

140 
ut32_t
 
dyÇmiccÚÞ
;

141 
ut32_t
 
dyÇmiüeäesh
;

142 
ut32_t
 
dyÇmiüdcÚfig
;

143 
ut32_t
 
»£rved_1
;

144 
ut32_t
 
dyÇmiù½
;

145 
ut32_t
 
dyÇmiù¿s
;

146 
ut32_t
 
dyÇmiù¤ex
;

147 
ut32_t
 
dyÇmiù­r
;

148 
ut32_t
 
dyÇmiùd®
;

149 
ut32_t
 
dyÇmiùwr
;

150 
ut32_t
 
dyÇmiùrc
;

151 
ut32_t
 
dyÇmiùrfc
;

152 
ut32_t
 
dyÇmiùx¤
;

153 
ut32_t
 
dyÇmiù¼d
;

154 
ut32_t
 
dyÇmiùmrd
;

155 
ut32_t
 
dyÇmiùcdÌ
;

156 
ut32_t
 
»£rved_3
 [8];

157 
ut32_t
 
¡©iûxndedwa
;

158 
ut32_t
 
»£rved_4
 [31];

159 
Íc_emc_dyÇmic
 
dyÇmic
 [
EMC_DYN_CHIP_COUNT
];

160 
ut32_t
 
»£rved_5
 [32];

161 
Íc_emc_¡©ic
 
emc¡©ic
 [
EMC_STATIC_CHIP_COUNT
];

162 } 
	tÍc_emc
;

166 #ifdeà
__ýlu¥lus


	@src/lib/libbsp/arm/shared/lpc/include/lpc-i2s.h

23 #iâdeà
LIBBSP_ARM_SHARED_LPC_I2S_H


24 
	#LIBBSP_ARM_SHARED_LPC_I2S_H


	)

26 
	~<b¥/uty.h
>

28 #ifdeà
__ýlu¥lus


47 
ut32_t
 
dao
;

48 
ut32_t
 
dai
;

49 
ut32_t
 
txfifo
;

50 
ut32_t
 
rxfifo
;

51 
ut32_t
 
¡©e
;

52 
ut32_t
 
dma
 [2];

53 
ut32_t
 
q
;

54 
ut32_t
 
tx¿
;

55 
ut32_t
 
rx¿
;

56 } 
	tÍc_i2s
;

64 
	#I2S_DAIO_WORDWIDTH
(
v®
è
	`BSP_FLD32
(v®, 0, 1)

	)

65 
	#I2S_DAIO_MONO
 
	`BSP_BIT32
(2)

	)

66 
	#I2S_DAIO_STOP
 
	`BSP_BIT32
(3)

	)

67 
	#I2S_DAIO_RESET
 
	`BSP_BIT32
(4)

	)

68 
	#I2S_DAIO_WS_SEL
 
	`BSP_BIT32
(5)

	)

69 
	#I2S_DAIO_WS_HALFPERIOD
(
v®
è
	`BSP_FLD32
(v®, 6, 14)

	)

70 
	#I2S_DAIO_MUTE
 
	`BSP_BIT32
(15)

	)

80 
	#I2S_STATE_IRQ
 
	`BSP_BIT32
(0)

	)

81 
	#I2S_STATE_DMAREQ_0
 
	`BSP_BIT32
(1)

	)

82 
	#I2S_STATE_DMAREQ_1
 
	`BSP_BIT32
(2)

	)

83 
	#I2S_STATE_RX_LEVEL_GET
(
»g
è
	`BSP_FLD32GET
Ôeg, 8, 11)

	)

84 
	#I2S_STATE_TX_LEVEL_GET
(
»g
è
	`BSP_FLD32GET
Ôeg, 16, 19)

	)

94 
	#I2S_DMA_RX_ENABLE
 
	`BSP_BIT32
(0)

	)

95 
	#I2S_DMA_TX_ENABLE
 
	`BSP_BIT32
(1)

	)

96 
	#I2S_DMA_RX_DEPTH
(
v®
è
	`BSP_FLD32
(v®, 8, 11)

	)

97 
	#I2S_DMA_TX_DEPTH
(
v®
è
	`BSP_FLD32
(v®, 16, 19)

	)

107 
	#I2S_IRQ_RX
 
	`BSP_BIT32
(0)

	)

108 
	#I2S_IRQ_TX
 
	`BSP_BIT32
(1)

	)

109 
	#I2S_IRQ_RX_DEPTH
(
v®
è
	`BSP_FLD32
(v®, 8, 11)

	)

110 
	#I2S_IRQ_TX_DEPTH
(
v®
è
	`BSP_FLD32
(v®, 16, 19)

	)

120 
	#LPC24XX_I2S_RATE
(
v®
è
	`BSP_FLD32
(v®, 0, 9)

	)

121 
	#LPC32XX_I2S_RATE_X_DIVIDER
(
v®
è
	`BSP_FLD32
(v®, 0, 7)

	)

122 
	#LPC32XX_I2S_RATE_Y_DIVIDER
(
v®
è
	`BSP_FLD32
(v®, 8, 15)

	)

128 #ifdeà
__ýlu¥lus


	@src/lib/libbsp/arm/shared/lpc/include/lpc-lcd.h

23 #iâdeà
LIBBSP_ARM_SHARED_LPC_LCD_H


24 
	#LIBBSP_ARM_SHARED_LPC_LCD_H


	)

26 
	~<b¥/uty.h
>

28 #ifdeà
__ýlu¥lus


44 
ut8_t
 
img
 [1024];

45 
ut32_t
 
ù¾
;

46 
ut32_t
 
cfg
;

47 
ut32_t
 
·l0
;

48 
ut32_t
 
·l1
;

49 
ut32_t
 
xy
;

50 
ut32_t
 
þ
;

51 
ut32_t
 
tmsk
;

52 
ut32_t
 
tþr
;

53 
ut32_t
 
aw
;

54 
ut32_t
 
t¡©
;

55 } 
	tÍc_cursÜ
;

58 
ut32_t
 
timh
;

59 
ut32_t
 
timv
;

60 
ut32_t
 
pÞ
;

61 
ut32_t
 
Ë
;

62 
ut32_t
 
upba£
;

63 
ut32_t
 
Íba£
;

64 
ut32_t
 
ù¾
;

65 
ut32_t
 
tmsk
;

66 
ut32_t
 
aw
;

67 
ut32_t
 
t¡©
;

68 
ut32_t
 
tþr
;

69 
ut32_t
 
upcu¼
;

70 
ut32_t
 
Ícu¼
;

71 
ut8_t
 
»£rved_0
 [0x200 - 0x034];

72 
ut16_t
 
·l
 [256];

73 
ut8_t
 
»£rved_1
 [0x800 - 0x400];

74 
Íc_cursÜ
 
ü¤
;

75 } 
	tÍc_lcd
;

83 
	#LCD_CFG_CLKDIV
(
v®
è
	`BSP_FLD32
(v®, 0, 4)

	)

84 
	#LCD_CFG_HCLK_ENABLE
 
	`BSP_BIT32
(5)

	)

85 
	#LCD_CFG_MODE_SELECT
(
v®
è
	`BSP_FLD32
(v®, 6, 7)

	)

86 
	#LCD_CFG_DISPLAY_TYPE
 
	`BSP_BIT32
(8)

	)

96 
	#LCD_TIMH_PPL
(
v®
è
	`BSP_FLD32
(v®, 2, 7)

	)

97 
	#LCD_TIMH_PPL_GET
(
»g
è
	`BSP_FLD32GET
Ôeg, 2, 7)

	)

98 
	#LCD_TIMH_HSW
(
v®
è
	`BSP_FLD32
(v®, 8, 15)

	)

99 
	#LCD_TIMH_HSW_GET
(
»g
è
	`BSP_FLD32GET
Ôeg, 8, 15)

	)

100 
	#LCD_TIMH_HFP
(
v®
è
	`BSP_FLD32
(v®, 16, 23)

	)

101 
	#LCD_TIMH_HFP_GET
(
»g
è
	`BSP_FLD32GET
Ôeg, 16, 23)

	)

102 
	#LCD_TIMH_HBP
(
v®
è
	`BSP_FLD32
(v®, 24, 31)

	)

103 
	#LCD_TIMH_HBP_GET
(
»g
è
	`BSP_FLD32GET
Ôeg, 24, 31)

	)

113 
	#LCD_TIMV_LPP
(
v®
è
	`BSP_FLD32
(v®, 0, 9)

	)

114 
	#LCD_TIMV_LPP_GET
(
»g
è
	`BSP_FLD32GET
Ôeg, 0, 9)

	)

115 
	#LCD_TIMV_VSW
(
v®
è
	`BSP_FLD32
(v®, 10, 15)

	)

116 
	#LCD_TIMV_VSW_GET
(
»g
è
	`BSP_FLD32GET
Ôeg, 10, 15)

	)

117 
	#LCD_TIMV_VFP
(
v®
è
	`BSP_FLD32
(v®, 16, 23)

	)

118 
	#LCD_TIMV_VFP_GET
(
»g
è
	`BSP_FLD32GET
Ôeg, 16, 23)

	)

119 
	#LCD_TIMV_VBP
(
v®
è
	`BSP_FLD32
(v®, 24, 31)

	)

120 
	#LCD_TIMV_VBP_GET
(
»g
è
	`BSP_FLD32GET
Ôeg, 24, 31)

	)

130 
	#LCD_POL_PCD_LO
(
v®
è
	`BSP_FLD32
(v®, 0, 4)

	)

131 
	#LCD_POL_PCD_LO_GET
(
»g
è
	`BSP_FLD32GET
Ôeg, 0, 4)

	)

132 
	#LCD_POL_CLKSEL
 
	`BSP_BIT32
(5)

	)

133 
	#LCD_POL_ACB
(
v®
è
	`BSP_FLD32
(v®, 6, 10)

	)

134 
	#LCD_POL_ACB_GET
(
»g
è
	`BSP_FLD32GET
Ôeg, 6, 10)

	)

135 
	#LCD_POL_IVS
 
	`BSP_BIT32
(11)

	)

136 
	#LCD_POL_IHS
 
	`BSP_BIT32
(12)

	)

137 
	#LCD_POL_IPC
 
	`BSP_BIT32
(13)

	)

138 
	#LCD_POL_IOE
 
	`BSP_BIT32
(14)

	)

139 
	#LCD_POL_CPL
(
v®
è
	`BSP_FLD32
(v®, 16, 25)

	)

140 
	#LCD_POL_CPL_GET
(
»g
è
	`BSP_FLD32GET
Ôeg, 16, 25)

	)

141 
	#LCD_POL_BCD
 
	`BSP_BIT32
(26)

	)

142 
	#LCD_POL_PCD_HI
(
v®
è
	`BSP_FLD32
(v®, 27, 31)

	)

143 
	#LCD_POL_PCD_HI_GET
(
»g
è
	`BSP_FLD32GET
Ôeg, 27, 31)

	)

153 
	#LCD_LE_LED
(
v®
è
	`BSP_FLD32
(v®, 0, 6)

	)

154 
	#LCD_LE_LEE
 
	`BSP_BIT32
(16)

	)

164 
	#LCD_CTRL_LCDEN
 
	`BSP_BIT32
(0)

	)

165 
	#LCD_CTRL_LCDBPP
(
v®
è
	`BSP_FLD32
(v®, 1, 3)

	)

166 
	#LCD_CTRL_LCDBPP_GET
(
»g
è
	`BSP_FLD32GET
Ôeg, 1, 3)

	)

167 
	#LCD_CTRL_LCDBW
 
	`BSP_BIT32
(4)

	)

168 
	#LCD_CTRL_LCDTFT
 
	`BSP_BIT32
(5)

	)

169 
	#LCD_CTRL_LCDMONO8
 
	`BSP_BIT32
(6)

	)

170 
	#LCD_CTRL_LCDDUAL
 
	`BSP_BIT32
(7)

	)

171 
	#LCD_CTRL_BGR
 
	`BSP_BIT32
(8)

	)

172 
	#LCD_CTRL_BEBO
 
	`BSP_BIT32
(9)

	)

173 
	#LCD_CTRL_BEPO
 
	`BSP_BIT32
(10)

	)

174 
	#LCD_CTRL_LCDPWR
 
	`BSP_BIT32
(11)

	)

175 
	#LCD_CTRL_LCDVCOMP
(
v®
è
	`BSP_FLD32
(v®, 12, 13)

	)

176 
	#LCD_CTRL_LCDVCOMP_GET
(
»g
è
	`BSP_FLD32GET
Ôeg, 12, 13)

	)

177 
	#LCD_CTRL_WATERMARK
 
	`BSP_BIT32
(16)

	)

187 
	#LCD_INT_FUF
 
	`BSP_BIT32
(1)

	)

188 
	#LCD_INT_LNBU
 
	`BSP_BIT32
(2)

	)

189 
	#LCD_INT_VCOMP
 
	`BSP_BIT32
(3)

	)

190 
	#LCD_INT_BER
 
	`BSP_BIT32
(4)

	)

200 
	#LCD_PAL_R
(
v®
è
	`BSP_FLD16
(v®, 0, 4)

	)

201 
	#LCD_PAL_G
(
v®
è
	`BSP_FLD16
(v®, 5, 9)

	)

202 
	#LCD_PAL_B
(
v®
è
	`BSP_FLD16
(v®, 10, 14)

	)

203 
	#LCD_PAL_I
 
	`BSP_BIT16
(15)

	)

209 #ifdeà
__ýlu¥lus


	@src/lib/libbsp/arm/shared/lpc/include/lpc-timer.h

22 #iâdeà
LIBBSP_ARM_SHARED_LPC_TIMER_H


23 
	#LIBBSP_ARM_SHARED_LPC_TIMER_H


	)

25 
	~<¡dt.h
>

27 #ifdeà
__ýlu¥lus


48 
	#LPC_TIMER_IR_MR0
 0x1U

	)

49 
	#LPC_TIMER_IR_MR1
 0x2U

	)

50 
	#LPC_TIMER_IR_MR2
 0x4U

	)

51 
	#LPC_TIMER_IR_MR3
 0x8U

	)

52 
	#LPC_TIMER_IR_CR0
 0x10U

	)

53 
	#LPC_TIMER_IR_CR1
 0x20U

	)

54 
	#LPC_TIMER_IR_CR2
 0x40U

	)

55 
	#LPC_TIMER_IR_CR3
 0x80U

	)

56 
	#LPC_TIMER_IR_ALL
 0xffU

	)

66 
	#LPC_TIMER_TCR_EN
 0x1U

	)

67 
	#LPC_TIMER_TCR_RST
 0x2U

	)

77 
	#LPC_TIMER_MCR_MR0_INTR
 0x1U

	)

78 
	#LPC_TIMER_MCR_MR0_RST
 0x2U

	)

79 
	#LPC_TIMER_MCR_MR0_STOP
 0x4U

	)

80 
	#LPC_TIMER_MCR_MR1_INTR
 0x8U

	)

81 
	#LPC_TIMER_MCR_MR1_RST
 0x10U

	)

82 
	#LPC_TIMER_MCR_MR1_STOP
 0x20U

	)

83 
	#LPC_TIMER_MCR_MR2_INTR
 0x40U

	)

84 
	#LPC_TIMER_MCR_MR2_RST
 0x80U

	)

85 
	#LPC_TIMER_MCR_MR2_STOP
 0x100U

	)

86 
	#LPC_TIMER_MCR_MR3_INTR
 0x200U

	)

87 
	#LPC_TIMER_MCR_MR3_RST
 0x400U

	)

88 
	#LPC_TIMER_MCR_MR3_STOP
 0x800U

	)

98 
	#LPC_TIMER_CCR_CAP0_RE
 0x1U

	)

99 
	#LPC_TIMER_CCR_CAP0_FE
 0x2U

	)

100 
	#LPC_TIMER_CCR_CAP0_INTR
 0x4U

	)

101 
	#LPC_TIMER_CCR_CAP1_RE
 0x8U

	)

102 
	#LPC_TIMER_CCR_CAP1_FE
 0x10U

	)

103 
	#LPC_TIMER_CCR_CAP1_INTR
 0x20U

	)

104 
	#LPC_TIMER_CCR_CAP2_RE
 0x40U

	)

105 
	#LPC_TIMER_CCR_CAP2_FE
 0x80U

	)

106 
	#LPC_TIMER_CCR_CAP2_INTR
 0x100U

	)

107 
	#LPC_TIMER_CCR_CAP3_RE
 0x200U

	)

108 
	#LPC_TIMER_CCR_CAP3_FE
 0x400U

	)

109 
	#LPC_TIMER_CCR_CAP3_INTR
 0x800U

	)

119 
	#LPC_TIMER_EMR_EM0_RE
 0x1U

	)

120 
	#LPC_TIMER_EMR_EM1_FE
 0x2U

	)

121 
	#LPC_TIMER_EMR_EM2_INTR
 0x4U

	)

122 
	#LPC_TIMER_EMR_EM3_RE
 0x8U

	)

123 
	#LPC_TIMER_EMR_EMC0_FE
 0x10U

	)

124 
	#LPC_TIMER_EMR_EMC1_INTR
 0x20U

	)

125 
	#LPC_TIMER_EMR_EMC2_RE
 0x40U

	)

126 
	#LPC_TIMER_EMR_EMC3_FE
 0x80U

	)

134 
ut32_t
 

;

135 
ut32_t
 
tü
;

136 
ut32_t
 
tc
;

137 
ut32_t
 
´
;

138 
ut32_t
 
pc
;

139 
ut32_t
 
mü
;

140 
ut32_t
 
mr0
;

141 
ut32_t
 
mr1
;

142 
ut32_t
 
mr2
;

143 
ut32_t
 
mr3
;

144 
ut32_t
 
cü
;

145 
ut32_t
 
ü0
;

146 
ut32_t
 
ü1
;

147 
ut32_t
 
ü2
;

148 
ut32_t
 
ü3
;

149 
ut32_t
 
emr
;

150 
ut32_t
 
ùü
;

151 } 
	tÍc_tim
;

155 #ifdeà
__ýlu¥lus


	@src/lib/libbsp/arm/shared/lpc/network/lpc-ethernet.c

23 
	#__INSIDE_RTEMS_BSD_TCPIP_STACK__
 1

	)

24 
	#__BSD_VISIBLE
 1

	)

26 
	~<ºo.h
>

27 
	~<y³s.h
>

28 
	~<¡dlib.h
>

29 
	~<¡dio.h
>

30 
	~<¡rg.h
>

31 
	~<as£¹.h
>

33 
	~<¹ems.h
>

34 
	~<¹ems/¹ems_bsdÃt.h
>

35 
	~<¹ems/¹ems_mii_ioùl.h
>

37 
	~<sys/·¿m.h
>

38 
	~<sys/sock.h
>

39 
	~<sys/sockio.h
>

40 
	~<sys/mbuf.h
>

42 
	~<Ãt/if.h
>

43 
	~<Ãt/if_¬p.h
>

44 
	~<Ãt/.h
>

45 
	~<Ãt/if_h.h
>

46 
	~<Ãt/_sy¡m.h
>

47 
	~<Ãt/.h
>

49 
	~<b¥.h
>

50 
	~<b¥/q.h
>

51 
	~<b¥/Íc-hÃt-cÚfig.h
>

52 
	~<b¥/uty.h
>

54 #ià
MCLBYTES
 > (2 * 1024)

58 #ifdeà
LPC_ETH_CONFIG_USE_TRANSMIT_DMA


59 
	#LPC_ETH_CONFIG_TX_BUF_SIZE
 (
mbuf
 *)

	)

61 
	#LPC_ETH_CONFIG_TX_BUF_SIZE
 1518U

	)

64 
	#DEFAULT_PHY
 0

	)

65 
	#WATCHDOG_TIMEOUT
 5

	)

68 
ut32_t
 
	m¡¬t
;

69 
ut32_t
 
	mcÚÞ
;

70 } 
	tÍc_h_ªsãr_desütÜ
;

73 
ut32_t
 
	mfo
;

74 
ut32_t
 
	mhash_üc
;

75 } 
	tÍc_h_»ûive_¡©us
;

78 
ut32_t
 
	mmac1
;

79 
ut32_t
 
	mmac2
;

80 
ut32_t
 
	mgt
;

81 
ut32_t
 
	mgr
;

82 
ut32_t
 
	mþ¹
;

83 
ut32_t
 
	mmaxf
;

84 
ut32_t
 
	msuµ
;

85 
ut32_t
 
	m¡
;

86 
ut32_t
 
	mmcfg
;

87 
ut32_t
 
	mmcmd
;

88 
ut32_t
 
	mmadr
;

89 
ut32_t
 
	mmwtd
;

90 
ut32_t
 
	mmrdd
;

91 
ut32_t
 
	mmd
;

92 
ut32_t
 
	m»£rved_0
 [2];

93 
ut32_t
 
	m§0
;

94 
ut32_t
 
	m§1
;

95 
ut32_t
 
	m§2
;

96 
ut32_t
 
	m»£rved_1
 [45];

97 
ut32_t
 
	mcommªd
;

98 
ut32_t
 
	m¡©us
;

99 
ut32_t
 
	mrxdesütÜ
;

100 
ut32_t
 
	mrx¡©us
;

101 
ut32_t
 
	mrxdesütÜnum
;

102 
ut32_t
 
	mrx´oduûdex
;

103 
ut32_t
 
	mrxcÚsumedex
;

104 
ut32_t
 
	mtxdesütÜ
;

105 
ut32_t
 
	mtx¡©us
;

106 
ut32_t
 
	mtxdesütÜnum
;

107 
ut32_t
 
	mtx´oduûdex
;

108 
ut32_t
 
	mtxcÚsumedex
;

109 
ut32_t
 
	m»£rved_2
 [10];

110 
ut32_t
 
	mtsv0
;

111 
ut32_t
 
	mtsv1
;

112 
ut32_t
 
	mrsv
;

113 
ut32_t
 
	m»£rved_3
 [3];

114 
ut32_t
 
	mæowcÚÞút
;

115 
ut32_t
 
	mæowcÚÞ¡s
;

116 
ut32_t
 
	m»£rved_4
 [34];

117 
ut32_t
 
	mrxfrù¾
;

118 
ut32_t
 
	mrxfrwÞ¡s
;

119 
ut32_t
 
	mrxfrwÞþr
;

120 
ut32_t
 
	m»£rved_5
 [1];

121 
ut32_t
 
	mhashf¾
;

122 
ut32_t
 
	mhashfrh
;

123 
ut32_t
 
	m»£rved_6
 [882];

124 
ut32_t
 
	mt¡©us
;

125 
ut32_t
 
	mÇbË
;

126 
ut32_t
 
	mtþr
;

127 
ut32_t
 
	mt£t
;

128 
ut32_t
 
	m»£rved_7
 [1];

129 
ut32_t
 
	mpowdown
;

130 } 
	tÍc_h_cÚÞËr
;

132 vÞ©
Íc_h_cÚÞËr
 *cÚ¡ 
	gÍc_h
 =

133 (vÞ©
Íc_h_cÚÞËr
 *è
LPC_ETH_CONFIG_REG_BASE
;

137 
	#ETH_RX_CTRL_SIZE_MASK
 0x000007ffU

	)

138 
	#ETH_RX_CTRL_INTERRUPT
 0x80000000U

	)

142 
	#ETH_RX_STAT_RXSIZE_MASK
 0x000007ffU

	)

143 
	#ETH_RX_STAT_BYTES
 0x00000100U

	)

144 
	#ETH_RX_STAT_CONTROL_FRAME
 0x00040000U

	)

145 
	#ETH_RX_STAT_VLAN
 0x00080000U

	)

146 
	#ETH_RX_STAT_FAIL_FILTER
 0x00100000U

	)

147 
	#ETH_RX_STAT_MULTICAST
 0x00200000U

	)

148 
	#ETH_RX_STAT_BROADCAST
 0x00400000U

	)

149 
	#ETH_RX_STAT_CRC_ERROR
 0x00800000U

	)

150 
	#ETH_RX_STAT_SYMBOL_ERROR
 0x01000000U

	)

151 
	#ETH_RX_STAT_LENGTH_ERROR
 0x02000000U

	)

152 
	#ETH_RX_STAT_RANGE_ERROR
 0x04000000U

	)

153 
	#ETH_RX_STAT_ALIGNMENT_ERROR
 0x08000000U

	)

154 
	#ETH_RX_STAT_OVERRUN
 0x10000000U

	)

155 
	#ETH_RX_STAT_NO_DESCRIPTOR
 0x20000000U

	)

156 
	#ETH_RX_STAT_LAST_FLAG
 0x40000000U

	)

157 
	#ETH_RX_STAT_ERROR
 0x80000000U

	)

161 
	#ETH_TX_CTRL_SIZE_MASK
 0x7ffU

	)

162 
	#ETH_TX_CTRL_SIZE_SHIFT
 0

	)

163 
	#ETH_TX_CTRL_OVERRIDE
 0x04000000U

	)

164 
	#ETH_TX_CTRL_HUGE
 0x08000000U

	)

165 
	#ETH_TX_CTRL_PAD
 0x10000000U

	)

166 
	#ETH_TX_CTRL_CRC
 0x20000000U

	)

167 
	#ETH_TX_CTRL_LAST
 0x40000000U

	)

168 
	#ETH_TX_CTRL_INTERRUPT
 0x80000000U

	)

172 
	#ETH_TX_STAT_COLLISION_COUNT_MASK
 0x01e00000U

	)

173 
	#ETH_TX_STAT_DEFER
 0x02000000U

	)

174 
	#ETH_TX_STAT_EXCESSIVE_DEFER
 0x04000000U

	)

175 
	#ETH_TX_STAT_EXCESSIVE_COLLISION
 0x08000000U

	)

176 
	#ETH_TX_STAT_LATE_COLLISION
 0x10000000U

	)

177 
	#ETH_TX_STAT_UNDERRUN
 0x20000000U

	)

178 
	#ETH_TX_STAT_NO_DESCRIPTOR
 0x40000000U

	)

179 
	#ETH_TX_STAT_ERROR
 0x80000000U

	)

183 
	#ETH_INT_RX_OVERRUN
 0x00000001U

	)

184 
	#ETH_INT_RX_ERROR
 0x00000002U

	)

185 
	#ETH_INT_RX_FINISHED
 0x00000004U

	)

186 
	#ETH_INT_RX_DONE
 0x00000008U

	)

187 
	#ETH_INT_TX_UNDERRUN
 0x00000010U

	)

188 
	#ETH_INT_TX_ERROR
 0x00000020U

	)

189 
	#ETH_INT_TX_FINISHED
 0x00000040U

	)

190 
	#ETH_INT_TX_DONE
 0x00000080U

	)

191 
	#ETH_INT_SOFT
 0x00001000U

	)

192 
	#ETH_INT_WAKEUP
 0x00002000U

	)

196 
	#ETH_RX_FIL_CTRL_ACCEPT_UNICAST
 0x00000001U

	)

197 
	#ETH_RX_FIL_CTRL_ACCEPT_BROADCAST
 0x00000002U

	)

198 
	#ETH_RX_FIL_CTRL_ACCEPT_MULTICAST
 0x00000004U

	)

199 
	#ETH_RX_FIL_CTRL_ACCEPT_UNICAST_HASH
 0x00000008U

	)

200 
	#ETH_RX_FIL_CTRL_ACCEPT_MULTICAST_HASH
 0x00000010U

	)

201 
	#ETH_RX_FIL_CTRL_ACCEPT_PERFECT
 0x00000020U

	)

202 
	#ETH_RX_FIL_CTRL_MAGIC_PACKET_WOL
 0x00001000U

	)

203 
	#ETH_RX_FIL_CTRL_RX_FILTER_WOL
 0x00002000U

	)

207 
	#ETH_CMD_RX_ENABLE
 0x00000001U

	)

208 
	#ETH_CMD_TX_ENABLE
 0x00000002U

	)

209 
	#ETH_CMD_REG_RESET
 0x00000008U

	)

210 
	#ETH_CMD_TX_RESET
 0x00000010U

	)

211 
	#ETH_CMD_RX_RESET
 0x00000020U

	)

212 
	#ETH_CMD_PASS_RUNT_FRAME
 0x00000040U

	)

213 
	#ETH_CMD_PASS_RX_FILTER
 0X00000080U

	)

214 
	#ETH_CMD_TX_FLOW_CONTROL
 0x00000100U

	)

215 
	#ETH_CMD_RMII
 0x00000200U

	)

216 
	#ETH_CMD_FULL_DUPLEX
 0x00000400U

	)

220 
	#ETH_STAT_RX_ACTIVE
 0x00000001U

	)

221 
	#ETH_STAT_TX_ACTIVE
 0x00000002U

	)

225 
	#ETH_MAC2_FULL_DUPLEX
 
	`BSP_BIT32
(8)

	)

229 
	#ETH_SUPP_SPEED
 
	`BSP_BIT32
(8)

	)

233 
	#ETH_MCFG_CLOCK_SELECT
(
v®
è
	`BSP_FLD32
(v®, 2, 4)

	)

235 
	#ETH_MCFG_RESETMIIMGMT
 
	`BSP_BIT32
(15)

	)

239 
	#ETH_MCMD_READ
 
	`BSP_BIT32
(0)

	)

240 
	#ETH_MCMD_SCAN
 
	`BSP_BIT32
(1)

	)

244 
	#ETH_MADR_REG
(
v®
è
	`BSP_FLD32
(v®, 0, 4)

	)

245 
	#ETH_MADR_PHY
(
v®
è
	`BSP_FLD32
(v®, 8, 12)

	)

249 
	#ETH_MIND_BUSY
 
	`BSP_BIT32
(0)

	)

250 
	#ETH_MIND_SCANNING
 
	`BSP_BIT32
(1)

	)

251 
	#ETH_MIND_NOT_VALID
 
	`BSP_BIT32
(2)

	)

252 
	#ETH_MIND_MII_LINK_FAIL
 
	`BSP_BIT32
(3)

	)

256 
	#LPC_ETH_EVENT_INITIALIZE
 
RTEMS_EVENT_1


	)

258 
	#LPC_ETH_EVENT_TXSTART
 
RTEMS_EVENT_2


	)

260 
	#LPC_ETH_EVENT_INTERRUPT
 
RTEMS_EVENT_3


	)

262 
	#LPC_ETH_EVENT_STOP
 
RTEMS_EVENT_4


	)

266 
	#LPC_ETH_INTERRUPT_RECEIVE
 \

267 (
ETH_INT_RX_ERROR
 | 
ETH_INT_RX_FINISHED
 | 
ETH_INT_RX_DONE
)

	)

269 
	#LPC_ETH_INTERRUPT_TRANSMIT
 \

270 (
ETH_INT_TX_DONE
 | 
ETH_INT_TX_FINISHED
 | 
ETH_INT_TX_ERROR
)

	)

272 
	#LPC_ETH_RX_STAT_ERRORS
 \

273 (
ETH_RX_STAT_CRC_ERROR
 \

274 | 
ETH_RX_STAT_SYMBOL_ERROR
 \

275 | 
ETH_RX_STAT_LENGTH_ERROR
 \

276 | 
ETH_RX_STAT_ALIGNMENT_ERROR
 \

277 | 
ETH_RX_STAT_OVERRUN
 \

278 | 
ETH_RX_STAT_NO_DESCRIPTOR
)

	)

280 
	#LPC_ETH_LAST_FRAGMENT_FLAGS
 \

281 (
ETH_TX_CTRL_OVERRIDE
 \

282 | 
ETH_TX_CTRL_PAD
 \

283 | 
ETH_TX_CTRL_CRC
 \

284 | 
ETH_TX_CTRL_INTERRUPT
 \

285 | 
ETH_TX_CTRL_LAST
)

	)

289 #ifdeà
DEBUG


290 
	#LPC_ETH_PRINTF
(...è
	`´tf
(
__VA_ARGS__
)

	)

291 
	#LPC_ETH_PRINTK
(...è
	`´tk
(
__VA_ARGS__
)

	)

293 
	#LPC_ETH_PRINTF
(...)

	)

294 
	#LPC_ETH_PRINTK
(...)

	)

298 
	mLPC_ETH_STATE_NOT_INITIALIZED
 = 0,

299 
	mLPC_ETH_STATE_DOWN
,

300 
	mLPC_ETH_STATE_UP


301 } 
	tÍc_h_¡©e
;

304 
¬pcom
 
	m¬pcom
;

305 
Íc_h_¡©e
 
	m¡©e
;

306 
¹ems_mdio_fo
 
	mmdio
;

307 
ut32_t
 
	mªÍ¬
;

308 
¹ems_id
 
	m»ûive_sk
;

309 
¹ems_id
 
	mªsm_sk
;

310 
	mrx_un_couÁ
;

311 
	mtx_un_couÁ
;

312 vÞ©
Íc_h_ªsãr_desütÜ
 *
	mrx_desc_bË
;

313 vÞ©
Íc_h_»ûive_¡©us
 *
	mrx_¡©us_bË
;

314 
mbuf
 **
	mrx_mbuf_bË
;

315 vÞ©
Íc_h_ªsãr_desütÜ
 *
	mtx_desc_bË
;

316 vÞ©
ut32_t
 *
	mtx_¡©us_bË
;

317 *
	mtx_buf_bË
;

318 
	m»ûived_äames
;

319 
	m»ûive_¼u±s
;

320 
	mªsmd_äames
;

321 
	mªsm_¼u±s
;

322 
	m»ûive_drÝ_rÜs
;

323 
	m»ûive_ovrun_rÜs
;

324 
	m»ûive_äagmt_rÜs
;

325 
	m»ûive_üc_rÜs
;

326 
	m»ûive_symbÞ_rÜs
;

327 
	m»ûive_Ëngth_rÜs
;

328 
	m»ûive_®ignmt_rÜs
;

329 
	m»ûive_no_desütÜ_rÜs
;

330 
	m»ûive_çl_rÜs
;

331 
	mªsm_undrun_rÜs
;

332 
	mªsm_Ï_cÞlisiÚ_rÜs
;

333 
	mªsm_exûssive_cÞlisiÚ_rÜs
;

334 
	mªsm_exûssive_deãr_rÜs
;

335 
	mªsm_no_desütÜ_rÜs
;

336 
	mªsm_ovæow_rÜs
;

337 
	mªsm_çl_rÜs
;

338 
ut32_t
 
	mphy_id
;

339 
	mphy
;

340 
¹ems_veùÜ_numb
 
	m¼u±_numb
;

341 
¹ems_id
 
	mcÚÞ_sk
;

342 } 
	tÍc_h_driv_y
;

344 
Íc_h_driv_y
 
	gÍc_h_driv_d©a
;

346 
	$Íc_h_cÚÞ_»que¡_com¶e
(cÚ¡ 
Íc_h_driv_y
 *
e
)

348 
¹ems_¡©us_code
 
sc
 = 
	`¹ems_evt_ªsÁ_£nd
(
e
->
cÚÞ_sk
);

349 
	`as£¹
(
sc
 =ð
RTEMS_SUCCESSFUL
);

350 
	}
}

352 
	$Íc_h_cÚÞ_»que¡
(

353 
Íc_h_driv_y
 *
e
,

354 
¹ems_id
 
sk
,

355 
¹ems_evt_£t
 
evt


358 
¹ems_¡©us_code
 
sc
 = 
RTEMS_SUCCESSFUL
;

359 
ut32_t
 
Ã¡_couÁ
 = 0;

361 
e
->
cÚÞ_sk
 = 
	`¹ems_sk_£lf
();

363 
sc
 = 
	`¹ems_bsdÃt_evt_£nd
(
sk
, 
evt
);

364 
	`as£¹
(
sc
 =ð
RTEMS_SUCCESSFUL
);

366 
Ã¡_couÁ
 = 
	`¹ems_bsdÃt_£m­hÜe_»Ëa£_»cursive
();

367 
sc
 = 
	`¹ems_evt_ªsÁ_»ûive
(
RTEMS_WAIT
, 
RTEMS_NO_TIMEOUT
);

368 
	`as£¹
(
sc
 =ð
RTEMS_SUCCESSFUL
);

369 
	`¹ems_bsdÃt_£m­hÜe_ob_»cursive
(
Ã¡_couÁ
);

371 
e
->
cÚÞ_sk
 = 0;

372 
	}
}

374 
le
 
ut32_t
 
	$Íc_h_üemt
(

375 
ut32_t
 
v®ue
,

376 
ut32_t
 
cyþe


379 ià(
v®ue
 < 
cyþe
) {

380  ++
v®ue
;

384 
	}
}

386 
	$Íc_h_abË_´omiscous_mode
(
boÞ
 
abË
)

388 ià(
abË
) {

389 
Íc_h
->
rxfrù¾
 = 
ETH_RX_FIL_CTRL_ACCEPT_UNICAST


390 | 
ETH_RX_FIL_CTRL_ACCEPT_MULTICAST


391 | 
ETH_RX_FIL_CTRL_ACCEPT_BROADCAST
;

393 
Íc_h
->
rxfrù¾
 = 
ETH_RX_FIL_CTRL_ACCEPT_PERFECT


394 | 
ETH_RX_FIL_CTRL_ACCEPT_MULTICAST_HASH


395 | 
ETH_RX_FIL_CTRL_ACCEPT_BROADCAST
;

397 
	}
}

399 
	$Íc_h_¼u±_hªdËr
(*
¬g
)

401 
Íc_h_driv_y
 *
e
 = (Íc_h_driv_y *è
¬g
;

402 
¹ems_evt_£t
 
»
 = 0;

403 
¹ems_evt_£t
 

 = 0;

404 
ut32_t
 

 = 0;

407 
ut32_t
 
im
 = 
Íc_h
->
ÇbË
;

408 
ut32_t
 
is
 = 
Íc_h
->
t¡©us
 & 
im
;

411 ià((
is
 & 
ETH_INT_RX_OVERRUN
) != 0) {

412 
»
 = 
LPC_ETH_EVENT_INITIALIZE
;

413 ++
e
->
»ûive_çl_rÜs
;

414 } ià((
is
 & 
LPC_ETH_INTERRUPT_RECEIVE
) != 0) {

415 
»
 = 
LPC_ETH_EVENT_INTERRUPT
;

416 

 |ð
LPC_ETH_INTERRUPT_RECEIVE
;

420 ià(
»
 != 0) {

421 ++
e
->
»ûive_¼u±s
;

422 (è
	`¹ems_bsdÃt_evt_£nd
(
e
->
»ûive_sk
, 
»
);

426 ià((
is
 & 
ETH_INT_TX_UNDERRUN
) != 0) {

427 

 = 
LPC_ETH_EVENT_INITIALIZE
;

428 ++
e
->
ªsm_çl_rÜs
;

429 } ià((
is
 & 
LPC_ETH_INTERRUPT_TRANSMIT
) != 0) {

430 

 = 
LPC_ETH_EVENT_INTERRUPT
;

431 

 |ð
LPC_ETH_INTERRUPT_TRANSMIT
;

435 ià(

 != 0) {

436 ++
e
->
ªsm_¼u±s
;

437 (è
	`¹ems_bsdÃt_evt_£nd
(
e
->
ªsm_sk
, 

);

440 
	`LPC_ETH_PRINTK
("¼u±:x = 0x%08x,x = 0x%08x\n", 
»
, 

);

443 
Íc_h
->
ÇbË
 = 
im
 & ~

;

446 
Íc_h
->
tþr
 = 
is
;

447 
	}
}

449 
	$Íc_h_abË_»ûive_¼u±s
()

451 
¹ems_¼u±_Ëv
 
Ëv
;

453 
	`¹ems_¼u±_di§bË
(
Ëv
);

454 
Íc_h
->
ÇbË
 |ð
LPC_ETH_INTERRUPT_RECEIVE
;

455 
	`¹ems_¼u±_abË
(
Ëv
);

456 
	}
}

458 
	$Íc_h_di§bË_»ûive_¼u±s
()

460 
¹ems_¼u±_Ëv
 
Ëv
;

462 
	`¹ems_¼u±_di§bË
(
Ëv
);

463 
Íc_h
->
ÇbË
 &ð~
LPC_ETH_INTERRUPT_RECEIVE
;

464 
	`¹ems_¼u±_abË
(
Ëv
);

465 
	}
}

467 
	$Íc_h_abË_ªsm_¼u±s
()

469 
¹ems_¼u±_Ëv
 
Ëv
;

471 
	`¹ems_¼u±_di§bË
(
Ëv
);

472 
Íc_h
->
ÇbË
 |ð
LPC_ETH_INTERRUPT_TRANSMIT
;

473 
	`¹ems_¼u±_abË
(
Ëv
);

474 
	}
}

476 
	$Íc_h_di§bË_ªsm_¼u±s
()

478 
¹ems_¼u±_Ëv
 
Ëv
;

480 
	`¹ems_¼u±_di§bË
(
Ëv
);

481 
Íc_h
->
ÇbË
 &ð~
LPC_ETH_INTERRUPT_TRANSMIT
;

482 
	`¹ems_¼u±_abË
(
Ëv
);

483 
	}
}

485 
	#LPC_ETH_RX_DATA_OFFSET
 2

	)

487 
mbuf
 *
	$Íc_h_Ãw_mbuf
(
iâ
 *
iå
, 
boÞ
 
wa
)

489 
mbuf
 *
m
 = 
NULL
;

490 
mw
 = 
wa
 ? 
M_WAIT
 : 
M_DONTWAIT
;

492 
	`MGETHDR
(
m
, 
mw
, 
MT_DATA
);

493 ià(
m
 !ð
NULL
) {

494 
	`MCLGET
(
m
, 
mw
);

495 ià((
m
->
m_æags
 & 
M_EXT
) != 0) {

497 
m
->
m_pkthdr
.
rcvif
 = 
iå
;

500 
m
->
m_d©a
 = 
	`mtod
(m, *è+ 
LPC_ETH_RX_DATA_OFFSET
;

502  
m
;

504 
	`m_ä
(
m
);

508  
NULL
;

509 
	}
}

511 
boÞ
 
	$Íc_h_add_Ãw_mbuf
(

512 
iâ
 *
iå
,

513 vÞ©
Íc_h_ªsãr_desütÜ
 *
desc
,

514 
mbuf
 **
mbufs
,

515 
ut32_t
 
i
,

516 
boÞ
 
wa


520 
mbuf
 *
m
 = 
	`Íc_h_Ãw_mbuf
(
iå
, 
wa
);

523 ià(
m
 !ð
NULL
) {

525 
	`¹ems_ÿche_v®id©e_muÉË_d©a_les
(

526 
	`mtod
(
m
, *),

527 
MCLBYTES
 - 
LPC_ETH_RX_DATA_OFFSET


531 
desc
 [
i
].
¡¬t
 = 
	`mtod
(
m
, 
ut32_t
);

532 
desc
 [
i
].
cÚÞ
 = (
MCLBYTES
 - 
LPC_ETH_RX_DATA_OFFSET
 - 1)

533 | 
ETH_RX_CTRL_INTERRUPT
;

536 
	`¹ems_ÿche_æush_muÉË_d©a_les
(

537 (*è&
desc
 [
i
],

538 (
desc
 [0])

542 
mbufs
 [
i
] = 
m
;

544  
ue
;

546  
çl£
;

548 
	}
}

550 
	$Íc_h_»ûive_sk
(*
¬g
)

552 
¹ems_¡©us_code
 
sc
 = 
RTEMS_SUCCESSFUL
;

553 
¹ems_evt_£t
 
evts
 = 0;

554 
Íc_h_driv_y
 *cÚ¡ 
e
 = (Íc_h_driv_y *è
¬g
;

555 
iâ
 *cÚ¡ 
iå
 = &
e
->
¬pcom
.
ac_if
;

556 vÞ©
Íc_h_ªsãr_desütÜ
 *cÚ¡ 
desc
 = 
e
->
rx_desc_bË
;

557 vÞ©
Íc_h_»ûive_¡©us
 *cÚ¡ 
¡©us
 = 
e
->
rx_¡©us_bË
;

558 
mbuf
 **cÚ¡ 
mbufs
 = 
e
->
rx_mbuf_bË
;

559 
ut32_t
 cÚ¡ 
dex_max
 = 
e
->
rx_un_couÁ
 - 1;

560 
ut32_t
 
´oduû_dex
 = 0;

561 
ut32_t
 
cÚsume_dex
 = 0;

563 
	`LPC_ETH_PRINTF
("%s\n", 
__func__
);

566 
ue
) {

568 
sc
 = 
	`¹ems_bsdÃt_evt_»ûive
(

569 
LPC_ETH_EVENT_INITIALIZE


570 | 
LPC_ETH_EVENT_STOP


571 | 
LPC_ETH_EVENT_INTERRUPT
,

572 
RTEMS_EVENT_ANY
 | 
RTEMS_WAIT
,

573 
RTEMS_NO_TIMEOUT
,

574 &
evts


576 
	`as£¹
(
sc
 =ð
RTEMS_SUCCESSFUL
);

578 
	`LPC_ETH_PRINTF
("rx: wakup: 0x%08" 
PRIx32
 "\n", 
evts
);

581 ià((
evts
 & 
LPC_ETH_EVENT_STOP
) != 0) {

582 
	`Íc_h_cÚÞ_»que¡_com¶e
(
e
);

589 ià((
evts
 & 
LPC_ETH_EVENT_INITIALIZE
) != 0) {

591 
	`Íc_h_di§bË_»ûive_¼u±s
();

594 
Íc_h
->
commªd
 &ð~
ETH_CMD_RX_ENABLE
;

597 (
Íc_h
->
¡©us
 & 
ETH_STAT_RX_ACTIVE
) != 0) {

602 
Íc_h
->
commªd
 |ð
ETH_CMD_RX_RESET
;

605 
Íc_h
->
tþr
 = 
LPC_ETH_INTERRUPT_RECEIVE
;

608 
cÚsume_dex
 = 0;

609 
´oduû_dex
 = 0;roduû_dex <ð
dex_max
; ++produce_index) {

610 ià(
mbufs
 [
´oduû_dex
] !ð
NULL
) {

611 
mbufs
 [
cÚsume_dex
] = mbuf [
´oduû_dex
];

612 ++
cÚsume_dex
;

618 
´oduû_dex
 = 
cÚsume_dex
;

619 
´oduû_dex
 <ð
dex_max
;

620 ++
´oduû_dex


622 
	`Íc_h_add_Ãw_mbuf
(
iå
, 
desc
, 
mbufs
, 
´oduû_dex
, 
ue
);

626 
Íc_h
->
rxdesütÜnum
 = 
dex_max
;

627 
Íc_h
->
rxdesütÜ
 = (
ut32_t
è
desc
;

628 
Íc_h
->
rx¡©us
 = (
ut32_t
è
¡©us
;

631 
´oduû_dex
 = 
Íc_h
->
rx´oduûdex
;

632 
cÚsume_dex
 = 
Íc_h
->
rxcÚsumedex
;

635 
Íc_h
->
commªd
 |ð
ETH_CMD_RX_ENABLE
;

638 
	`Íc_h_abË_»ûive_¼u±s
();

640 
	`Íc_h_cÚÞ_»que¡_com¶e
(
e
);

646 
ue
) {

648 
Íc_h
->
tþr
 = 
LPC_ETH_INTERRUPT_RECEIVE
;

651 
´oduû_dex
 = 
Íc_h
->
rx´oduûdex
;

653 ià(
cÚsume_dex
 !ð
´oduû_dex
) {

654 
ut32_t
 
¡©
 = 0;

657 
	`¹ems_ÿche_v®id©e_muÉË_d©a_les
(

658 (*è&
¡©us
 [
cÚsume_dex
],

659 (
¡©us
 [0])

661 
¡©
 = 
¡©us
 [
cÚsume_dex
].
fo
;

664 (
¡©
 & 
ETH_RX_STAT_LAST_FLAG
) != 0

665 && (
¡©
 & 
LPC_ETH_RX_STAT_ERRORS
) == 0

668 
mbuf
 *
m
 = 
mbufs
 [
cÚsume_dex
];

670 ià(
	`Íc_h_add_Ãw_mbuf
(
iå
, 
desc
, 
mbufs
, 
cÚsume_dex
, 
çl£
)) {

672 
h_hd
 *
eh
 = 
	`mtod
(
m
, ether_header *);

675 
sz
 = (è(
¡©
 & 
ETH_RX_STAT_RXSIZE_MASK
) + 1

676 - 
ETHER_HDR_LEN
 - 
ETHER_CRC_LEN
;

679 
m
->
m_Ën
 = 
sz
;

680 
m
->
m_pkthdr
.
Ën
 = 
sz
;

681 
m
->
m_d©a
 = 
	`mtod
(m, *è+ 
ETHER_HDR_LEN
;

683 
	`LPC_ETH_PRINTF
("rx: %02" 
PRIu32
 ": %u\n", 
cÚsume_dex
, 
sz
);

686 
	`h_put
(
iå
, 
eh
, 
m
);

689 ++
e
->
»ûived_äames
;

691 ++
e
->
»ûive_drÝ_rÜs
;

695 ià((
¡©
 & 
ETH_RX_STAT_OVERRUN
) != 0) {

696 ++
e
->
»ûive_ovrun_rÜs
;

698 ià((
¡©
 & 
ETH_RX_STAT_LAST_FLAG
) == 0) {

699 ++
e
->
»ûive_äagmt_rÜs
;

701 ià((
¡©
 & 
ETH_RX_STAT_CRC_ERROR
) != 0) {

702 ++
e
->
»ûive_üc_rÜs
;

704 ià((
¡©
 & 
ETH_RX_STAT_SYMBOL_ERROR
) != 0) {

705 ++
e
->
»ûive_symbÞ_rÜs
;

707 ià((
¡©
 & 
ETH_RX_STAT_LENGTH_ERROR
) != 0) {

708 ++
e
->
»ûive_Ëngth_rÜs
;

710 ià((
¡©
 & 
ETH_RX_STAT_ALIGNMENT_ERROR
) != 0) {

711 ++
e
->
»ûive_®ignmt_rÜs
;

713 ià((
¡©
 & 
ETH_RX_STAT_NO_DESCRIPTOR
) != 0) {

714 ++
e
->
»ûive_no_desütÜ_rÜs
;

719 
cÚsume_dex
 = 
	`Íc_h_üemt
(cÚsume_dex, 
dex_max
);

720 
Íc_h
->
rxcÚsumedex
 = 
cÚsume_dex
;

723 
	`Íc_h_abË_»ûive_¼u±s
();

728 
	}
}

730 
mbuf
 *
	$Íc_h_Ãxt_äagmt
(

731 
iâ
 *
iå
,

732 
mbuf
 *
m
,

733 
ut32_t
 *
ù¾


736 
mbuf
 *
n
 = 
NULL
;

737 
size
 = 0;

739 
ue
) {

740 ià(
m
 =ð
NULL
) {

742 
	`IF_DEQUEUE
(&
iå
->
if_¢d
, 
m
);

745 ià(
m
 =ð
NULL
) {

746  
m
;

751 
size
 = 
m
->
m_Ën
;

753 ià(
size
 > 0) {

758 
m
 = 
	`m_ä
(m);

763 *
ù¾
 = (
ut32_t
è(
size
 - 1);

766 
n
 = 
m
->
m_Ãxt
;

767 
n
 !ð
NULL
 &&->
m_Ën
 <= 0) {

768 
n
 = 
	`m_ä
(n);

770 
m
->
m_Ãxt
 = 
n
;

773 ià(
n
 =ð
NULL
) {

774 *
ù¾
 |ð
LPC_ETH_LAST_FRAGMENT_FLAGS
;

777  
m
;

778 
	}
}

780 
	$Íc_h_ªsm_sk
(*
¬g
)

782 
¹ems_¡©us_code
 
sc
 = 
RTEMS_SUCCESSFUL
;

783 
¹ems_evt_£t
 
evts
 = 0;

784 
Íc_h_driv_y
 *
e
 = (Íc_h_driv_y *è
¬g
;

785 
iâ
 *
iå
 = &
e
->
¬pcom
.
ac_if
;

786 vÞ©
Íc_h_ªsãr_desütÜ
 *cÚ¡ 
desc
 = 
e
->
tx_desc_bË
;

787 vÞ©
ut32_t
 *cÚ¡ 
¡©us
 = 
e
->
tx_¡©us_bË
;

788 #ifdeà
LPC_ETH_CONFIG_USE_TRANSMIT_DMA


789 
mbuf
 **cÚ¡ 
mbufs
 = 
e
->
tx_buf_bË
;

791 *cÚ¡ 
buf
 = 
e
->
tx_buf_bË
;

793 
mbuf
 *
m
 = 
NULL
;

794 
ut32_t
 cÚ¡ 
dex_max
 = 
e
->
tx_un_couÁ
 - 1;

795 
ut32_t
 
´oduû_dex
 = 0;

796 
ut32_t
 
cÚsume_dex
 = 0;

797 
ut32_t
 
ù¾
 = 0;

798 #iâdeà
LPC_ETH_CONFIG_USE_TRANSMIT_DMA


799 
ut32_t
 
äame_Ëngth
 = 0;

800 *
äame_bufãr
 = 
NULL
;

803 
	`LPC_ETH_PRINTF
("%s\n", 
__func__
);

805 #iâdeà
LPC_ETH_CONFIG_USE_TRANSMIT_DMA


807 
´oduû_dex
 = 0;roduû_dex <ð
dex_max
; ++produce_index) {

808 
desc
 [
´oduû_dex
].
¡¬t
 =

809 (
ut32_t
è(
buf
 + 
´oduû_dex
 * 
LPC_ETH_CONFIG_TX_BUF_SIZE
);

814 
ue
) {

816 
sc
 = 
	`¹ems_bsdÃt_evt_»ûive
(

817 
LPC_ETH_EVENT_INITIALIZE


818 | 
LPC_ETH_EVENT_STOP


819 | 
LPC_ETH_EVENT_TXSTART


820 | 
LPC_ETH_EVENT_INTERRUPT
,

821 
RTEMS_EVENT_ANY
 | 
RTEMS_WAIT
,

822 
RTEMS_NO_TIMEOUT
,

823 &
evts


825 
	`as£¹
(
sc
 =ð
RTEMS_SUCCESSFUL
);

827 
	`LPC_ETH_PRINTF
("tx: wakup: 0x%08" 
PRIx32
 "\n", 
evts
);

830 ià((
evts
 & 
LPC_ETH_EVENT_STOP
) != 0) {

831 
	`Íc_h_cÚÞ_»que¡_com¶e
(
e
);

838 ià((
evts
 & 
LPC_ETH_EVENT_INITIALIZE
) != 0) {

840 
	`Íc_h_di§bË_ªsm_¼u±s
();

843 
Íc_h
->
commªd
 &ð~
ETH_CMD_TX_ENABLE
;

846 (
Íc_h
->
¡©us
 & 
ETH_STAT_TX_ACTIVE
) != 0) {

851 
Íc_h
->
commªd
 |ð
ETH_CMD_TX_RESET
;

854 
Íc_h
->
tþr
 = 
LPC_ETH_INTERRUPT_TRANSMIT
;

857 
Íc_h
->
txdesütÜnum
 = 
dex_max
;

858 
Íc_h
->
txdesütÜ
 = (
ut32_t
è
desc
;

859 
Íc_h
->
tx¡©us
 = (
ut32_t
è
¡©us
;

861 #ifdeà
LPC_ETH_CONFIG_USE_TRANSMIT_DMA


863 
´oduû_dex
 = 0;roduû_dex <ð
dex_max
; ++produce_index) {

864 
mbuf
 *
viùim
 = 
mbufs
 [
´oduû_dex
];

866 ià(
viùim
 !ð
NULL
) {

867 
	`m_ä
(
viùim
);

868 
mbufs
 [
´oduû_dex
] = 
NULL
;

874 
´oduû_dex
 = 
Íc_h
->
tx´oduûdex
;

875 
cÚsume_dex
 = 
Íc_h
->
txcÚsumedex
;

877 #iâdeà
LPC_ETH_CONFIG_USE_TRANSMIT_DMA


879 
äame_Ëngth
 = 0;

880 
äame_bufãr
 = (*è
desc
 [
´oduû_dex
].
¡¬t
;

884 
Íc_h
->
commªd
 |ð
ETH_CMD_TX_ENABLE
;

886 
	`Íc_h_cÚÞ_»que¡_com¶e
(
e
);

890 
ue
) {

892 
ut32_t
 
c
 = 
cÚsume_dex
;

895 
Íc_h
->
tþr
 = 
LPC_ETH_INTERRUPT_TRANSMIT
;

898 
cÚsume_dex
 = 
Íc_h
->
txcÚsumedex
;

901 ià(
c
 =ð
cÚsume_dex
) {

905 
c
 !ð
cÚsume_dex
) {

906 
ut32_t
 
s
 = 
¡©us
 [
c
];

909 ià((
s
 & (
ETH_TX_STAT_ERROR
 | 
ETH_TX_STAT_NO_DESCRIPTOR
)) != 0) {

910 ià((
s
 & 
ETH_TX_STAT_UNDERRUN
) != 0) {

911 ++
e
->
ªsm_undrun_rÜs
;

913 ià((
s
 & 
ETH_TX_STAT_LATE_COLLISION
) != 0) {

914 ++
e
->
ªsm_Ï_cÞlisiÚ_rÜs
;

916 ià((
s
 & 
ETH_TX_STAT_EXCESSIVE_COLLISION
) != 0) {

917 ++
e
->
ªsm_exûssive_cÞlisiÚ_rÜs
;

919 ià((
s
 & 
ETH_TX_STAT_EXCESSIVE_DEFER
) != 0) {

920 ++
e
->
ªsm_exûssive_deãr_rÜs
;

922 ià((
s
 & 
ETH_TX_STAT_NO_DESCRIPTOR
) != 0) {

923 ++
e
->
ªsm_no_desütÜ_rÜs
;

927 #ifdeà
LPC_ETH_CONFIG_USE_TRANSMIT_DMA


929 
	`m_ä
(
mbufs
 [
c
]);

930 
mbufs
 [
c
] = 
NULL
;

934 
c
 = 
	`Íc_h_üemt
(c, 
dex_max
);

939 
ue
) {

941 
ut32_t
 
p
 = 
	`Íc_h_üemt
(
´oduû_dex
, 
dex_max
);

944 
m
 = 
	`Íc_h_Ãxt_äagmt
(
iå
, m, &
ù¾
);

947 ià(
p
 =ð
cÚsume_dex
) {

948 
	`LPC_ETH_PRINTF
("tx: fuÎ queue: 0x%08x\n", 
m
);

955 ià(
m
 !ð
NULL
) {

956 #ifdeà
LPC_ETH_CONFIG_USE_TRANSMIT_DMA


958 
	`¹ems_ÿche_æush_muÉË_d©a_les
(

959 
	`mtod
(
m
, const *),

960 (
size_t
è
m
->
m_Ën


962 
desc
 [
´oduû_dex
].
¡¬t
 = 
	`mtod
(
m
, 
ut32_t
);

963 
desc
 [
´oduû_dex
].
cÚÞ
 = 
ù¾
;

964 
	`¹ems_ÿche_æush_muÉË_d©a_les
(

965 (*è&
desc
 [
´oduû_dex
],

966 (
desc
 [0])

968 
mbufs
 [
´oduû_dex
] = 
m
;

970 
	`LPC_ETH_PRINTF
(

971 "tx: %02" 
PRIu32
 ": %u %s\n",

972 
´oduû_dex
, 
m
->
m_Ën
,

973 (
ù¾
 & 
ETH_TX_CTRL_LAST
) != 0 ? "L" : ""

977 
´oduû_dex
 = 
p
;

980 ià((
ù¾
 & 
ETH_TX_CTRL_LAST
) != 0) {

982 
Íc_h
->
tx´oduûdex
 = 
´oduû_dex
;

985 ++
e
->
ªsmd_äames
;

989 
m
 = m->
m_Ãxt
;

991 
size_t
 
äagmt_Ëngth
 = (size_tè
m
->
m_Ën
;

992 *
äagmt_¡¬t
 = 
	`mtod
(
m
, *);

993 
ut32_t
 
Ãw_äame_Ëngth
 = 
äame_Ëngth
 + 
äagmt_Ëngth
;

996 ià(
Ãw_äame_Ëngth
 > 
LPC_ETH_CONFIG_TX_BUF_SIZE
) {

997 
	`LPC_ETH_PRINTF
("tx: overflow\n");

1000 
Ãw_äame_Ëngth
 = 
LPC_ETH_CONFIG_TX_BUF_SIZE
;

1001 
äagmt_Ëngth
 = 
Ãw_äame_Ëngth
 - 
äame_Ëngth
;

1004 
ù¾
 |ð
LPC_ETH_LAST_FRAGMENT_FLAGS
;

1007 ++
e
->
ªsm_ovæow_rÜs
;

1010 
	`LPC_ETH_PRINTF
(

1011 "tx: cÝy: %" 
PRIu32
 "%s%s\n",

1012 
äagmt_Ëngth
,

1013 (
m
->
m_æags
 & 
M_EXT
) != 0 ? ", E" : "",

1014 (
m
->
m_æags
 & 
M_PKTHDR
) != 0 ? ", H" : ""

1018 
	`memýy
(
äame_bufãr
, 
äagmt_¡¬t
, 
äagmt_Ëngth
);

1020 ià((
ù¾
 & 
ETH_TX_CTRL_LAST
) != 0) {

1022 
desc
 [
´oduû_dex
].
cÚÞ
 = (
ù¾
 & ~
ETH_TX_CTRL_SIZE_MASK
)

1023 | (
Ãw_äame_Ëngth
 - 1);

1025 
	`LPC_ETH_PRINTF
(

1026 "tx: %02" 
PRIu32
 ": %" PRIu32 "\n",

1027 
´oduû_dex
,

1028 
Ãw_äame_Ëngth


1032 
	`¹ems_ÿche_æush_muÉË_d©a_les
(

1033 (cÚ¡ *è
desc
 [
´oduû_dex
].
¡¬t
,

1034 
Ãw_äame_Ëngth


1038 
	`¹ems_ÿche_æush_muÉË_d©a_les
(

1039 (*è&
desc
 [
´oduû_dex
],

1040 (
desc
 [0])

1044 
´oduû_dex
 = 
p
;

1047 
Íc_h
->
tx´oduûdex
 = 
´oduû_dex
;

1050 
äame_Ëngth
 = 0;

1051 
äame_bufãr
 = (*è
desc
 [
´oduû_dex
].
¡¬t
;

1054 ++
e
->
ªsmd_äames
;

1057 
äame_Ëngth
 = 
Ãw_äame_Ëngth
;

1060 
äame_bufãr
 +ð
äagmt_Ëngth
;

1064 
m
 = 
	`m_ä
(m);

1073 ià(
m
 =ð
NULL
) {

1075 
iå
->
if_æags
 &ð~
IFF_OACTIVE
;

1077 
	`LPC_ETH_PRINTF
("tx:nable interrupts\n");

1080 
	`Íc_h_abË_ªsm_¼u±s
();

1083 
	}
}

1085 
	$Íc_h_mdio_wa_fÜ_nÙ_busy
()

1087 
¹ems_rv®
 
Úe_£cÚd
 = 
	`¹ems_þock_g_ticks_³r_£cÚd
();

1088 
¹ems_rv®
 
i
 = 0;

1090 (
Íc_h
->
md
 & 
ETH_MIND_BUSY
è!ð0 && 
i
 < 
Úe_£cÚd
) {

1091 
	`¹ems_sk_wake_aá
(1);

1092 ++
i
;

1095 
	`LPC_ETH_PRINTK
("tx:pc_eth_mdio_wait %sfter %d\n",

1096 
i
 !ð
Úe_£cÚd
? "succeed": "timeout", i);

1098  
i
 !ð
Úe_£cÚd
 ? 0 : 
ETIMEDOUT
;

1099 
	}
}

1101 
ut32_t
 
	$Íc_h_mdio_»ad_ªÍ¬
(
phy
)

1103 
ut32_t
 
madr
 = 
	`ETH_MADR_REG
(
MII_ANLPAR
è| 
	`ETH_MADR_PHY
(
phy
);

1104 
ut32_t
 
ªÍ¬
 = 0;

1105 
o
 = 0;

1107 ià(
Íc_h
->
madr
 != madr) {

1108 
Íc_h
->
madr
 = madr;

1111 ià(
Íc_h
->
mcmd
 !ð
ETH_MCMD_READ
) {

1112 
Íc_h
->
mcmd
 = 0;

1113 
Íc_h
->
mcmd
 = 
ETH_MCMD_READ
;

1116 
o
 = 
	`Íc_h_mdio_wa_fÜ_nÙ_busy
();

1117 ià(
o
 == 0) {

1118 
ªÍ¬
 = 
Íc_h
->
mrdd
;

1122 
Íc_h
->
mcmd
 = 0;

1123 
Íc_h
->
mcmd
 = 
ETH_MCMD_READ
;

1125  
ªÍ¬
;

1126 
	}
}

1128 
Íc_h_mdio_»ad
(

1129 
phy
,

1130 *
¬g
 
__©ibu__
((
unu£d
)),

1131 
»g
,

1132 
ut32_t
 *
v®


1135 
	go
 = 0;

1137 ià(0 <ð
phy
 &&hy <= 31) {

1138 
Íc_h
->
madr
 = 
ETH_MADR_REG
(
»g
è| 
ETH_MADR_PHY
(
phy
);

1139 
	gÍc_h
->
	gmcmd
 = 0;

1140 
	gÍc_h
->
	gmcmd
 = 
ETH_MCMD_READ
;

1141 
	go
 = 
Íc_h_mdio_wa_fÜ_nÙ_busy
();

1143 ià(
	go
 == 0) {

1144 *
v®
 = 
Íc_h
->
mrdd
;

1147 
	go
 = 
EINVAL
;

1150  
	go
;

1153 
Íc_h_mdio_wre
(

1154 
phy
,

1155 *
¬g
 
__©ibu__
((
unu£d
)),

1156 
»g
,

1157 
ut32_t
 
v®


1160 
	go
 = 0;

1162 ià(0 <ð
phy
 &&hy <= 31) {

1163 
Íc_h
->
madr
 = 
ETH_MADR_REG
(
»g
è| 
ETH_MADR_PHY
(
phy
);

1164 
	gÍc_h
->
	gmwtd
 = 
v®
;

1165 
	go
 = 
Íc_h_mdio_wa_fÜ_nÙ_busy
();

1167 
	go
 = 
EINVAL
;

1170  
	go
;

1173 
	$Íc_h_phy_g_id
(
phy
, 
ut32_t
 *
id
)

1175 
ut32_t
 
id1
 = 0;

1176 
o
 = 
	`Íc_h_mdio_»ad
(
phy
, 
NULL
, 
MII_PHYIDR1
, &
id1
);

1178 ià(
o
 == 0) {

1179 
ut32_t
 
id2
 = 0;

1181 
o
 = 
	`Íc_h_mdio_»ad
(
phy
, 
NULL
, 
MII_PHYIDR2
, &
id2
);

1182 ià(
o
 == 0) {

1183 *
id
 = (
id1
 << 16è| (
id2
 & 0xfff0);

1187  
o
;

1188 
	}
}

1190 
	#PHY_KSZ80X1RNL
 0x221550

	)

1191 
	#PHY_DP83848
 0x20005c90

	)

1194 
	m»g
;

1195 
ut32_t
 
	m£t
;

1196 
ut32_t
 
	mþr
;

1197 } 
	tÍc_h_phy_aùiÚ
;

1199 
	$Íc_h_phy_£t_ªd_þr
(

1200 
Íc_h_driv_y
 *
e
,

1201 cÚ¡ 
Íc_h_phy_aùiÚ
 *
aùiÚs
,

1202 
size_t
 
n


1205 
o
 = 0;

1206 
size_t
 
i
;

1208 
i
 = 0; 
o
 =ð0 && i < 
n
; ++i) {

1209 cÚ¡ 
Íc_h_phy_aùiÚ
 *
aùiÚ
 = &
aùiÚs
 [
i
];

1210 
ut32_t
 
v®
;

1212 
o
 = 
	`Íc_h_mdio_»ad
(
e
->
phy
, 
NULL
, 
aùiÚ
->
»g
, &
v®
);

1213 ià(
o
 == 0) {

1214 
v®
 |ð
aùiÚ
->
£t
;

1215 
v®
 &ð~
aùiÚ
->
þr
;

1216 
o
 = 
	`Íc_h_mdio_wre
(
e
->
phy
, 
NULL
, 
aùiÚ
->
»g
, 
v®
);

1220  
o
;

1221 
	}
}

1223 cÚ¡ 
Íc_h_phy_aùiÚ
 
	gÍc_h_phy_up_aùiÚ_deçuÉ
 [] = {

1224 { 
MII_BMCR
, 0, 
BMCR_PDOWN
 },

1225 { 
MII_BMCR
, 
BMCR_RESET
, 0 },

1226 { 
MII_BMCR
, 
BMCR_AUTOEN
, 0 }

1229 cÚ¡ 
Íc_h_phy_aùiÚ
 
	gÍc_h_phy_up_´e_aùiÚ_KSZ80X1RNL
 [] = {

1234 cÚ¡ 
Íc_h_phy_aùiÚ
 
	gÍc_h_phy_up_po¡_aùiÚ_KSZ80X1RNL
 [] = {

1241 
	$Íc_h_phy_up
(
Íc_h_driv_y
 *
e
)

1243 
o
;

1244 
»s
 = 64;

1245 
ut32_t
 
v®
;

1247 
e
->
phy
 = 
DEFAULT_PHY
 - 1;

1248 
ue
) {

1249 
e
->
phy
 = (e->phy + 1) % 32;

1251 --
»s
;

1252 
o
 = 
	`Íc_h_phy_g_id
(
e
->
phy
, &e->
phy_id
);

1254 (
o
 =ð0 && 
e
->
phy_id
 != 0xfffffff0 &&->phy_id != 0)

1255 || 
»s
 <= 0

1260 
	`¹ems_sk_wake_aá
(1);

1263 
	`LPC_ETH_PRINTF
("Íc_h_phy_g_id: 0x%08" 
PRIx32
 " fromhy %detries %d\n",

1264 
e
->
phy_id
,->
phy
, 
»s
);

1266 ià(
o
 == 0) {

1267 
e
->
phy_id
) {

1268 
PHY_KSZ80X1RNL
:

1269 
o
 = 
	`Íc_h_phy_£t_ªd_þr
(

1270 
e
,

1271 &
Íc_h_phy_up_´e_aùiÚ_KSZ80X1RNL
 [0],

1272 
	`RTEMS_ARRAY_SIZE
(
Íc_h_phy_up_´e_aùiÚ_KSZ80X1RNL
)

1275 
PHY_DP83848
:

1276 
o
 = 
	`Íc_h_mdio_»ad
(
e
->
phy
, 
NULL
, 0x17, &
v®
);

1277 
	`LPC_ETH_PRINTF
("phy PHY_DP83848 RBR 0x%08" 
PRIx32
 "\n", 
v®
);

1279 
v®
 = 0x32 ;

1280 
o
 = 
	`Íc_h_mdio_wre
(
e
->
phy
, 
NULL
, 0x17, 
v®
);

1284 
o
 = 
EIO
;

1285 
e
->
phy
 = 
DEFAULT_PHY
;

1291 ià(
o
 == 0) {

1292 
o
 = 
	`Íc_h_phy_£t_ªd_þr
(

1293 
e
,

1294 &
Íc_h_phy_up_aùiÚ_deçuÉ
 [0],

1295 
	`RTEMS_ARRAY_SIZE
(
Íc_h_phy_up_aùiÚ_deçuÉ
)

1299 ià(
o
 == 0) {

1300 
e
->
phy_id
) {

1301 
PHY_KSZ80X1RNL
:

1302 
o
 = 
	`Íc_h_phy_£t_ªd_þr
(

1303 
e
,

1304 &
Íc_h_phy_up_po¡_aùiÚ_KSZ80X1RNL
 [0],

1305 
	`RTEMS_ARRAY_SIZE
(
Íc_h_phy_up_po¡_aùiÚ_KSZ80X1RNL
)

1313 
e
->
phy_id
 = 0;

1316  
o
;

1317 
	}
}

1319 cÚ¡ 
Íc_h_phy_aùiÚ
 
	gÍc_h_phy_down_aùiÚ_deçuÉ
 [] = {

1320 { 
MII_BMCR
, 
BMCR_PDOWN
, 0 }

1323 cÚ¡ 
Íc_h_phy_aùiÚ
 
	gÍc_h_phy_down_po¡_aùiÚ_KSZ80X1RNL
 [] = {

1328 
	$Íc_h_phy_down
(
Íc_h_driv_y
 *
e
)

1330 
o
 = 
	`Íc_h_phy_£t_ªd_þr
(

1331 
e
,

1332 &
Íc_h_phy_down_aùiÚ_deçuÉ
 [0],

1333 
	`RTEMS_ARRAY_SIZE
(
Íc_h_phy_down_aùiÚ_deçuÉ
)

1336 ià(
o
 == 0) {

1337 
e
->
phy_id
) {

1338 
PHY_KSZ80X1RNL
:

1339 
o
 = 
	`Íc_h_phy_£t_ªd_þr
(

1340 
e
,

1341 &
Íc_h_phy_down_po¡_aùiÚ_KSZ80X1RNL
 [0],

1342 
	`RTEMS_ARRAY_SIZE
(
Íc_h_phy_down_po¡_aùiÚ_KSZ80X1RNL
)

1349 
	}
}

1351 
	$Íc_h_soá_»£t
()

1353 
Íc_h
->
commªd
 = 0x38;

1354 
Íc_h
->
mac1
 = 0xcf00;

1355 
Íc_h
->
mac1
 = 0x0;

1356 
	}
}

1358 
	$Íc_h_up_Ü_down
(
Íc_h_driv_y
 *
e
, 
boÞ
 
up
)

1360 
o
 = 0;

1361 
¹ems_¡©us_code
 
sc
 = 
RTEMS_SUCCESSFUL
;

1362 
iâ
 *
iå
 = &
e
->
¬pcom
.
ac_if
;

1364 ià(
up
 && 
e
->
¡©e
 =ð
LPC_ETH_STATE_DOWN
) {

1366 
	`Íc_h_cÚfig_moduË_abË
();

1369 
Íc_h
->
mac1
 = 0xf00;

1373 
Íc_h
->
mcfg
 = 
	`ETH_MCFG_CLOCK_SELECT
(10è| 
ETH_MCFG_RESETMIIMGMT
;

1374 
	`¹ems_sk_wake_aá
(1);

1375 
Íc_h
->
mcfg
 = 
	`ETH_MCFG_CLOCK_SELECT
(10);

1376 
	`¹ems_sk_wake_aá
(1);

1377 
o
 = 
	`Íc_h_phy_up
(
e
);

1379 ià(
o
 == 0) {

1384 
	`Íc_h_soá_»£t
();

1387 
Íc_h
->
mac2
 = 0x31;

1388 
Íc_h
->
gt
 = 0x15;

1389 
Íc_h
->
gr
 = 0x12;

1390 
Íc_h
->
þ¹
 = 0x370f;

1391 
Íc_h
->
maxf
 = 0x0600;

1392 
Íc_h
->
suµ
 = 
ETH_SUPP_SPEED
;

1393 
Íc_h
->
¡
 = 0;

1394 #ifdeà
LPC_ETH_CONFIG_RMII


1395 
Íc_h
->
commªd
 = 0x0600;

1397 
Íc_h
->
commªd
 = 0x0400;

1399 
Íc_h
->
ÇbË
 = 
ETH_INT_RX_OVERRUN
 | 
ETH_INT_TX_UNDERRUN
;

1400 
Íc_h
->
tþr
 = 0x30ff;

1401 
Íc_h
->
powdown
 = 0;

1404 
Íc_h
->
§0
 = ((
ut32_t
è
e
->
¬pcom
.
ac_addr
 [5] << 8)

1405 | (
ut32_t
è
e
->
¬pcom
.
ac_addr
 [4];

1406 
Íc_h
->
§1
 = ((
ut32_t
è
e
->
¬pcom
.
ac_addr
 [3] << 8)

1407 | (
ut32_t
è
e
->
¬pcom
.
ac_addr
 [2];

1408 
Íc_h
->
§2
 = ((
ut32_t
è
e
->
¬pcom
.
ac_addr
 [1] << 8)

1409 | (
ut32_t
è
e
->
¬pcom
.
ac_addr
 [0];

1412 
Íc_h
->
mac1
 = 0x03;

1415 
	`Íc_h_cÚÞ_»que¡
(
e
,->
»ûive_sk
, 
LPC_ETH_EVENT_INITIALIZE
);

1416 
	`Íc_h_cÚÞ_»que¡
(
e
,->
ªsm_sk
, 
LPC_ETH_EVENT_INITIALIZE
);

1419 
sc
 = 
	`¹ems_¼u±_hªdËr_¡®l
(

1420 
e
->
¼u±_numb
,

1422 
RTEMS_INTERRUPT_UNIQUE
,

1423 
Íc_h_¼u±_hªdËr
,

1424 
e


1426 
	`as£¹
(
sc
 =ð
RTEMS_SUCCESSFUL
);

1429 
iå
->
if_tim
 = 1;

1432 
e
->
¡©e
 = 
LPC_ETH_STATE_UP
;

1435 ià(
o
 != 0) {

1436 
iå
->
if_æags
 &ð~
IFF_UP
;

1438 } ià(!
up
 && 
e
->
¡©e
 =ð
LPC_ETH_STATE_UP
) {

1440 
sc
 = 
	`¹ems_¼u±_hªdËr_»move
(

1441 
e
->
¼u±_numb
,

1442 
Íc_h_¼u±_hªdËr
,

1443 
e


1445 
	`as£¹
(
sc
 =ð
RTEMS_SUCCESSFUL
);

1448 
	`Íc_h_cÚÞ_»que¡
(
e
,->
»ûive_sk
, 
LPC_ETH_EVENT_STOP
);

1449 
	`Íc_h_cÚÞ_»que¡
(
e
,->
ªsm_sk
, 
LPC_ETH_EVENT_STOP
);

1451 
	`Íc_h_soá_»£t
();

1452 
	`Íc_h_phy_down
(
e
);

1453 
	`Íc_h_cÚfig_moduË_di§bË
();

1456 
iå
->
if_tim
 = 0;

1459 
e
->
¡©e
 = 
LPC_ETH_STATE_DOWN
;

1462  
o
;

1463 
	}
}

1465 
	$Íc_h_rçû_
(*
¬g
)

1468 
	}
}

1470 
	$Íc_h_rçû_¡©s
(
Íc_h_driv_y
 *
e
)

1472 
o
 = 
EIO
;

1473 
med
 = 0;

1475 ià(
e
->
¡©e
 =ð
LPC_ETH_STATE_UP
) {

1476 
med
 = 
	`IFM_MAKEWORD
(0, 0, 0, 0);

1477 
o
 = 
	`¹ems_mii_ioùl
(&
e
->
mdio
,, 
SIOCGIFMEDIA
, &
med
);

1480 
	`¹ems_bsdÃt_£m­hÜe_»Ëa£
();

1482 ià(
o
 == 0) {

1483 
	`¹ems_ifmed2¡r
(
med
, 
NULL
, 0);

1484 
	`´tf
("\n");

1487 
	`´tf
("»ûived f¿mes: %u\n", 
e
->
»ûived_äames
);

1488 
	`´tf
("»ûiv¼u±s: %u\n", 
e
->
»ûive_¼u±s
);

1489 
	`´tf
("ªsmd f¿mes: %u\n", 
e
->
ªsmd_äames
);

1490 
	`´tf
("ªsm iÁru±s: %u\n", 
e
->
ªsm_¼u±s
);

1491 
	`´tf
("»ûivdrÝ¼Üs: %u\n", 
e
->
»ûive_drÝ_rÜs
);

1492 
	`´tf
("»ûivovruÀrÜs: %u\n", 
e
->
»ûive_ovrun_rÜs
);

1493 
	`´tf
("»ûiväagmrÜs: %u\n", 
e
->
»ûive_äagmt_rÜs
);

1494 
	`´tf
("»ûivCRC¼Üs: %u\n", 
e
->
»ûive_üc_rÜs
);

1495 
	`´tf
("»ûivsymbÞ¼Üs: %u\n", 
e
->
»ûive_symbÞ_rÜs
);

1496 
	`´tf
("»ûivËngth¼Üs: %u\n", 
e
->
»ûive_Ëngth_rÜs
);

1497 
	`´tf
("»ûiv®ignmrÜs: %u\n", 
e
->
»ûive_®ignmt_rÜs
);

1498 
	`´tf
("»ûivnØdesütÜ¼Üs: %u\n", 
e
->
»ûive_no_desütÜ_rÜs
);

1499 
	`´tf
("»ûivçÈrÜs: %u\n", 
e
->
»ûive_çl_rÜs
);

1500 
	`´tf
("ªsm undruÀrÜs: %u\n", 
e
->
ªsm_undrun_rÜs
);

1501 
	`´tf
("ªsm©cÞlisiÚ¼Üs: %u\n", 
e
->
ªsm_Ï_cÞlisiÚ_rÜs
);

1502 
	`´tf
("ªsmxûssivcÞlisiÚ¼Üs: %u\n", 
e
->
ªsm_exûssive_cÞlisiÚ_rÜs
);

1503 
	`´tf
("ªsmxûssivdeã¸rÜs: %u\n", 
e
->
ªsm_exûssive_deãr_rÜs
);

1504 
	`´tf
("ªsmØdesütÜ¼Üs: %u\n", 
e
->
ªsm_no_desütÜ_rÜs
);

1505 
	`´tf
("ªsm ovæow¼Üs: %u\n", 
e
->
ªsm_ovæow_rÜs
);

1506 
	`´tf
("ªsm f©®¼Üs: %u\n", 
e
->
ªsm_çl_rÜs
);

1508 
	`¹ems_bsdÃt_£m­hÜe_ob
();

1509 
	}
}

1511 
	$Íc_h_muÉiÿ¡_cÚÞ
(

1512 
boÞ
 
add
,

1513 
iäeq
 *
iä
,

1514 
¬pcom
 *
ac


1517 
o
 = 0;

1519 ià(
add
) {

1520 
o
 = 
	`h_addmuÉi
(
iä
, 
ac
);

1522 
o
 = 
	`h_dmuÉi
(
iä
, 
ac
);

1525 ià(
o
 =ð
ENETRESET
) {

1526 
h_muÉi¡
 
¡
;

1527 
h_muÉi
 *
m
;

1529 
o
 = 0;

1531 
Íc_h
->
hashf¾
 = 0;

1532 
Íc_h
->
hashfrh
 = 0;

1534 
	`ETHER_FIRST_MULTI
(
¡
, 
ac
, 
m
);

1535 
m
 !ð
NULL
) {

1536 
ut64_t
 
add¾o
 = 0;

1537 
ut64_t
 
addrhi
 = 0;

1539 
	`memýy
(&
add¾o
, 
m
->
m_add¾o
, 
ETHER_ADDR_LEN
);

1540 
	`memýy
(&
addrhi
, 
m
->
m_addrhi
, 
ETHER_ADDR_LEN
);

1541 
add¾o
 <ð
addrhi
) {

1543 
ut32_t
 
üc
 = 
	`h_üc32_be
((
ut8_t
 *è&
add¾o
, 
ETHER_ADDR_LEN
);

1544 
ut32_t
 
dex
 = (
üc
 >> 23) & 0x3f;

1546 ià(
dex
 < 32) {

1547 
Íc_h
->
hashf¾
 |ð1U << 
dex
;

1549 
Íc_h
->
hashfrh
 |ð1U << (
dex
 - 32);

1551 ++
add¾o
;

1553 
	`ETHER_NEXT_MULTI
(
¡
, 
m
);

1557  
o
;

1558 
	}
}

1560 
	$Íc_h_rçû_ioùl
(

1561 
iâ
 *
iå
,

1562 
ioùl_commªd_t
 
cmd
,

1563 
ÿddr_t
 
d©a


1566 
Íc_h_driv_y
 *
e
 = (Íc_h_driv_y *è
iå
->
if_soác
;

1567 
iäeq
 *
iä
 = (iäeq *è
d©a
;

1568 
o
 = 0;

1570 
	`LPC_ETH_PRINTF
("%s\n", 
__func__
);

1572 
cmd
) {

1573 
SIOCGIFMEDIA
:

1574 
SIOCSIFMEDIA
:

1575 
	`¹ems_mii_ioùl
(&
e
->
mdio
,, 
cmd
, &
iä
->
iä_med
);

1577 
SIOCGIFADDR
:

1578 
SIOCSIFADDR
:

1579 
	`h_ioùl
(
iå
, 
cmd
, 
d©a
);

1581 
SIOCSIFFLAGS
:

1582 
o
 = 
	`Íc_h_up_Ü_down
(
e
, (
iå
->
if_æags
 & 
IFF_UP
) != 0);

1583 ià(
o
 =ð0 && (
iå
->
if_æags
 & 
IFF_UP
) != 0) {

1584 
	`Íc_h_abË_´omiscous_mode
((
iå
->
if_æags
 & 
IFF_PROMISC
) != 0);

1587 
SIOCADDMULTI
:

1588 
SIOCDELMULTI
:

1589 
o
 = 
	`Íc_h_muÉiÿ¡_cÚÞ
(
cmd
 =ð
SIOCADDMULTI
, 
iä
, &
e
->
¬pcom
);

1591 
SIO_RTEMS_SHOW_STATS
:

1592 
	`Íc_h_rçû_¡©s
(
e
);

1595 
o
 = 
EINVAL
;

1599  
o
;

1600 
	}
}

1602 
	$Íc_h_rçû_¡¬t
(
iâ
 *
iå
)

1604 
¹ems_¡©us_code
 
sc
 = 
RTEMS_SUCCESSFUL
;

1605 
Íc_h_driv_y
 *
e
 = (Íc_h_driv_y *è
iå
->
if_soác
;

1607 
iå
->
if_æags
 |ð
IFF_OACTIVE
;

1609 ià(
e
->
¡©e
 =ð
LPC_ETH_STATE_UP
) {

1610 
sc
 = 
	`¹ems_bsdÃt_evt_£nd
(
e
->
ªsm_sk
, 
LPC_ETH_EVENT_TXSTART
);

1611 
	`as£¹
(
sc
 =ð
RTEMS_SUCCESSFUL
);

1613 
	}
}

1615 
	$Íc_h_rçû_w©chdog
(
iâ
 *
iå
)

1617 
Íc_h_driv_y
 *
e
 = (Íc_h_driv_y *è
iå
->
if_soác
;

1619 ià(
e
->
¡©e
 =ð
LPC_ETH_STATE_UP
) {

1620 
ut32_t
 
ªÍ¬
 = 
	`Íc_h_mdio_»ad_ªÍ¬
(
e
->
phy
);

1622 ià(
e
->
ªÍ¬
 !=nlpar) {

1623 
boÞ
 
fuÎ_du¶ex
 = 
çl£
;

1624 
boÞ
 
¥d
 = 
çl£
;

1626 
e
->
ªÍ¬
 =nlpar;

1628 ià((
ªÍ¬
 & 
ANLPAR_TX_FD
) != 0) {

1629 
fuÎ_du¶ex
 = 
ue
;

1630 
¥d
 = 
ue
;

1631 } ià((
ªÍ¬
 & 
ANLPAR_T4
) != 0) {

1632 
¥d
 = 
ue
;

1633 } ià((
ªÍ¬
 & 
ANLPAR_TX
) != 0) {

1634 
¥d
 = 
ue
;

1635 } ià((
ªÍ¬
 & 
ANLPAR_10_FD
) != 0) {

1636 
fuÎ_du¶ex
 = 
ue
;

1639 ià(
fuÎ_du¶ex
) {

1640 
Íc_h
->
mac2
 |ð
ETH_MAC2_FULL_DUPLEX
;

1642 
Íc_h
->
mac2
 &ð~
ETH_MAC2_FULL_DUPLEX
;

1645 ià(
¥d
) {

1646 
Íc_h
->
suµ
 |ð
ETH_SUPP_SPEED
;

1648 
Íc_h
->
suµ
 &ð~
ETH_SUPP_SPEED
;

1652 
iå
->
if_tim
 = 
WATCHDOG_TIMEOUT
;

1654 
	}
}

1656 
	$Íc_h_fixup_un_couÁ
(
couÁ
, 
deçuÉ_v®ue
, 
max
)

1658 ià(
couÁ
 <= 0) {

1659 
couÁ
 = 
deçuÉ_v®ue
;

1660 } ià(
couÁ
 > 
max
) {

1661 
couÁ
 = 
max
;

1664  
LPC_ETH_CONFIG_UNIT_MULTIPLE


1665 + (((è
couÁ
 - 1Uè& ~(
LPC_ETH_CONFIG_UNIT_MULTIPLE
 - 1U));

1666 
	}
}

1668 
	$Íc_h_©ch
(
¹ems_bsdÃt_ifcÚfig
 *
cÚfig
)

1670 
Íc_h_driv_y
 *
e
 = &
Íc_h_driv_d©a
;

1671 
iâ
 *
iå
 = &
e
->
¬pcom
.
ac_if
;

1672 *
un_Çme
 = 
NULL
;

1673 
un_dex
 = 
	`¹ems_bsdÃt_·r£_driv_Çme
(
cÚfig
, &
un_Çme
);

1674 
size_t
 
bË_¬_size
 = 0;

1675 *
bË_¬
 = 
NULL
;

1676 *
bË_loÿtiÚ
 = 
NULL
;

1679 ià(
un_dex
 < 0) {

1682 ià(
un_dex
 != 0) {

1683 
þnup
;

1685 ià(
cÚfig
->
h¬dw¬e_add»ss
 =ð
NULL
) {

1686 
þnup
;

1688 ià(
e
->
¡©e
 !ð
LPC_ETH_STATE_NOT_INITIALIZED
) {

1689 
þnup
;

1693 
e
->
mdio
.
mdio_r
 = 
Íc_h_mdio_»ad
;

1694 
e
->
mdio
.
mdio_w
 = 
Íc_h_mdio_wre
;

1695 
e
->
mdio
.
has_gmii
 = 0;

1696 
e
->
ªÍ¬
 = 0;

1699 
cÚfig
->
no
 = 
LPC_ETH_CONFIG_INTERRUPT
;

1702 
cÚfig
->
drv_ù¾
 = 
e
;

1705 
e
->
rx_un_couÁ
 = 
	`Íc_h_fixup_un_couÁ
(

1706 
cÚfig
->
rbuf_couÁ
,

1707 
LPC_ETH_CONFIG_RX_UNIT_COUNT_DEFAULT
,

1708 
LPC_ETH_CONFIG_RX_UNIT_COUNT_MAX


1710 
cÚfig
->
rbuf_couÁ
 = (è
e
->
rx_un_couÁ
;

1713 
e
->
tx_un_couÁ
 = 
	`Íc_h_fixup_un_couÁ
(

1714 
cÚfig
->
xbuf_couÁ
,

1715 
LPC_ETH_CONFIG_TX_UNIT_COUNT_DEFAULT
,

1716 
LPC_ETH_CONFIG_TX_UNIT_COUNT_MAX


1718 
cÚfig
->
xbuf_couÁ
 = (è
e
->
tx_un_couÁ
;

1721 
e
->
¼u±_numb
 = 
cÚfig
->
no
;

1724 
	`memýy
(
e
->
¬pcom
.
ac_addr
, 
cÚfig
->
h¬dw¬e_add»ss
, 
ETHER_ADDR_LEN
);

1727 
bË_¬_size
 =

1728 
e
->
rx_un_couÁ


1729 * ((
Íc_h_ªsãr_desütÜ
)

1730 + (
Íc_h_»ûive_¡©us
)

1731 + (
mbuf
 *))

1732 + 
e
->
tx_un_couÁ


1733 * ((
Íc_h_ªsãr_desütÜ
)

1734 + (
ut32_t
)

1735 + 
LPC_ETH_CONFIG_TX_BUF_SIZE
);

1736 
bË_¬
 = 
	`Íc_h_cÚfig_®loc_bË_¬
(
bË_¬_size
);

1737 ià(
bË_¬
 =ð
NULL
) {

1738 
þnup
;

1740 
	`mem£t
(
bË_¬
, 0, 
bË_¬_size
);

1742 
bË_loÿtiÚ
 = 
bË_¬
;

1748 
e
->
rx_¡©us_bË
 = (vÞ©
Íc_h_»ûive_¡©us
 *è
bË_loÿtiÚ
;

1749 
bË_loÿtiÚ
 +ð
e
->
rx_un_couÁ
 * Ó->
rx_¡©us_bË
 [0]);

1751 
e
->
rx_desc_bË
 = (vÞ©
Íc_h_ªsãr_desütÜ
 *è
bË_loÿtiÚ
;

1752 
bË_loÿtiÚ
 +ð
e
->
rx_un_couÁ
 * Ó->
rx_desc_bË
 [0]);

1754 
e
->
rx_mbuf_bË
 = (
mbuf
 **è
bË_loÿtiÚ
;

1755 
bË_loÿtiÚ
 +ð
e
->
rx_un_couÁ
 * Ó->
rx_mbuf_bË
 [0]);

1757 
e
->
tx_desc_bË
 = (vÞ©
Íc_h_ªsãr_desütÜ
 *è
bË_loÿtiÚ
;

1758 
bË_loÿtiÚ
 +ð
e
->
tx_un_couÁ
 * Ó->
tx_desc_bË
 [0]);

1760 
e
->
tx_¡©us_bË
 = (vÞ©
ut32_t
 *è
bË_loÿtiÚ
;

1761 
bË_loÿtiÚ
 +ð
e
->
tx_un_couÁ
 * Ó->
tx_¡©us_bË
 [0]);

1763 
e
->
tx_buf_bË
 = 
bË_loÿtiÚ
;

1766 
iå
->
if_soác
 = 
e
;

1767 
iå
->
if_un
 = (è
un_dex
;

1768 
iå
->
if_Çme
 = 
un_Çme
;

1769 
iå
->
if_mtu
 = (
cÚfig
->
mtu
 > 0è? (
u_lÚg
ècÚfig->mtu : 
ETHERMTU
;

1770 
iå
->
if_
 = 
Íc_h_rçû_
;

1771 
iå
->
if_ioùl
 = 
Íc_h_rçû_ioùl
;

1772 
iå
->
if_¡¬t
 = 
Íc_h_rçû_¡¬t
;

1773 
iå
->
if_ouut
 = 
h_ouut
;

1774 
iå
->
if_w©chdog
 = 
Íc_h_rçû_w©chdog
;

1775 
iå
->
if_æags
 = 
IFF_MULTICAST
 | 
IFF_BROADCAST
 | 
IFF_SIMPLEX
;

1776 
iå
->
if_¢d
.
ifq_maxËn
 = 
ifqmaxËn
;

1777 
iå
->
if_tim
 = 0;

1780 
e
->
»ûive_sk
 = 
	`¹ems_bsdÃt_Ãw´oc
(

1783 
Íc_h_»ûive_sk
,

1784 
e


1786 
e
->
ªsm_sk
 = 
	`¹ems_bsdÃt_Ãw´oc
(

1789 
Íc_h_ªsm_sk
,

1790 
e


1794 
iå
->
if_æags
 |ð
IFF_RUNNING
;

1795 
e
->
¡©e
 = 
LPC_ETH_STATE_DOWN
;

1798 
	`if_©ch
(
iå
);

1799 
	`h_içach
(
iå
);

1803 
þnup
:

1805 
	`Íc_h_cÚfig_ä_bË_¬
(
bË_¬
);

1808 
	`ä
(
un_Çme
, () 0xdeadbeef);

1811 
	}
}

1813 
Íc_h_dach
(

1814 
¹ems_bsdÃt_ifcÚfig
 *
cÚfig
 
__©ibu__
((
unu£d
))

1820 
	gÍc_h
->
	gcommªd
 = 0x38;

1821 
	gÍc_h
->
	gmac1
 = 0xcf00;

1828 
	$Íc_h_©ch_dach
(

1829 
¹ems_bsdÃt_ifcÚfig
 *
cÚfig
,

1830 
©chg


1835 ià(
©chg
) {

1836  
	`Íc_h_©ch
(
cÚfig
);

1838  
	`Íc_h_dach
(
cÚfig
);

1840 
	}
}

	@src/lib/libbsp/arm/shared/mminit.c

9 
	#ARM_CP15_TEXT_SECTION
 
BSP_START_TEXT_SECTION


	)

11 
	~<b¥/¡¬t.h
>

12 
	~<b¥/¬m-ý15-¡¬t.h
>

13 
	~<b¥/lk-symbÞs.h
>

14 
	~<b¥/mm.h
>

16 
BSP_START_TEXT_SECTION
 
	$b¥_memÜy_mªagemt_lize
()

18 
ut32_t
 
ù¾
 = 
	`¬m_ý15_g_cÚÞ
();

20 
ù¾
 |ð
ARM_CP15_CTRL_AFE
 | 
ARM_CP15_CTRL_S
 | 
ARM_CP15_CTRL_XP
;

22 
	`¬m_ý15_¡¬t_£tup_ª¦©iÚ_bË_ªd_abË_mmu_ªd_ÿche
(

23 
ù¾
,

24 (
ut32_t
 *è
b¥_ª¦©iÚ_bË_ba£
,

25 
ARM_MMU_DEFAULT_CLIENT_DOMAIN
,

26 &
¬m_ý15_¡¬t_mmu_cÚfig_bË
[0],

27 
¬m_ý15_¡¬t_mmu_cÚfig_bË_size


29 
	}
}

	@src/lib/libbsp/arm/smdk2410/include/bsp.h

18 #iâdeà
LIBBSP_ARM_SMDK2410_BSP_H


19 
	#LIBBSP_ARM_SMDK2410_BSP_H


	)

21 
	~<b¥Ýts.h
>

22 
	~<b¥/deçuÉ-l-exnsiÚ.h
>

24 #ifdeà
__ýlu¥lus


41 #ifdeà
__ýlu¥lus


	@src/lib/libbsp/arm/smdk2410/startup/bspreset.c

9 
	~<b¥.h
>

10 
	~<b¥/boÙÿrd.h
>

12 
	$b¥_»£t
()

14 #ià
ON_SKYEYE
 == 1

15 
	#SKYEYE_MAGIC_ADDRESS
 (*(vÞ©*)(0xb0000000))

	)

17 
SKYEYE_MAGIC_ADDRESS
 = 0xff;

20 
¹ems_¼u±_Ëv
 
Ëv
;

22 (è
Ëv
;

23 
	`¹ems_¼u±_di§bË
(
Ëv
);

25 
__asm__
 volatile(""

48 
	}
}

	@src/lib/libbsp/arm/smdk2410/startup/memmap.c

11 
	~<¹ems.h
>

12 
	~<libýu/mmu.h
>

17 
mmu_£ù_m­_t
 
	gmem_m­
[] = {

19 {0x30000000, 0x00000000, 1, 
MMU_CACHE_NONE
},

20 {0x30000000, 0x30000000, 32, 
MMU_CACHE_WTHROUGH
},

21 {0x32000000, 0x32000000, 32, 
MMU_CACHE_NONE
},

22 {0x48000000, 0x48000000, 256, 
MMU_CACHE_NONE
},

23 {0x50000000, 0x50000000, 256, 
MMU_CACHE_NONE
},

	@src/lib/libbsp/arm/stm32f4/console/console-config.c

15 
	~<¹ems/b¥Io.h
>

17 
	~<libch/£rl.h
>

19 
	~<b¥Ýts.h
>

20 
	~<b¥/q.h
>

21 
	~<b¥/u§¹.h
>

22 
	~<b¥/¡m32f4.h
>

24 
cÚsÞe_tbl
 
	gCÚsÞe_CÚfigu¿tiÚ_PÜts
 [] = {

25 #ifdeà
STM32F4_ENABLE_USART_1


27 .
sDeviûName
 = "/dev/ttyS0",

28 .
	gdeviûTy³
 = 
SERIAL_CUSTOM
,

29 .
	gpDeviûFns
 = &
¡m32f4_u§¹_âs
,

30 .
	gulClPÜt1
 = (
ut32_t
è
STM32F4_USART_1
,

31 .
	gulClPÜt2
 = 0,

32 .
	gulClock
 = 
STM32F4_USART_BAUD
,

33 .
	gulIÁVeùÜ
 = 
STM32F4_IRQ_USART1


36 #ifdeà
STM32F4_ENABLE_USART_2


38 .
	gsDeviûName
 = "/dev/ttyS1",

39 .
	gdeviûTy³
 = 
SERIAL_CUSTOM
,

40 .
	gpDeviûFns
 = &
¡m32f4_u§¹_âs
,

41 .
	gulClPÜt1
 = (
ut32_t
è
STM32F4_USART_2
,

42 .
	gulClPÜt2
 = 1,

43 .
	gulClock
 = 
STM32F4_USART_BAUD
,

44 .
	gulIÁVeùÜ
 = 
STM32F4_IRQ_USART2


47 #ifdeà
STM32F4_ENABLE_USART_3


49 .
	gsDeviûName
 = "/dev/ttyS2",

50 .
	gdeviûTy³
 = 
SERIAL_CUSTOM
,

51 .
	gpDeviûFns
 = &
¡m32f4_u§¹_âs
,

52 .
	gulClPÜt1
 = (
ut32_t
è
STM32F4_USART_3
,

53 .
	gulClPÜt2
 = 2,

54 .
	gulClock
 = 
STM32F4_USART_BAUD
,

55 .
	gulIÁVeùÜ
 = 
STM32F4_IRQ_USART3


58 #ifdeà
STM32F4_ENABLE_UART_4


60 .
	gsDeviûName
 = "/dev/ttyS3",

61 .
	gdeviûTy³
 = 
SERIAL_CUSTOM
,

62 .
	gpDeviûFns
 = &
¡m32f4_u§¹_âs
,

63 .
	gulClPÜt1
 = (
ut32_t
è
STM32F4_USART_4
,

64 .
	gulClPÜt2
 = 3,

65 .
	gulClock
 = 
STM32F4_USART_BAUD
,

66 .
	gulIÁVeùÜ
 = 
STM32F4_IRQ_UART4


69 #ifdeà
STM32F4_ENABLE_UART_5


71 .
	gsDeviûName
 = "/dev/ttyS4",

72 .
	gdeviûTy³
 = 
SERIAL_CUSTOM
,

73 .
	gpDeviûFns
 = &
¡m32f4_u§¹_âs
,

74 .
	gulClPÜt1
 = (
ut32_t
è
STM32F4_USART_5
,

75 .
	gulClPÜt2
 = 4,

76 .
	gulClock
 = 
STM32F4_USART_BAUD
,

77 .
	gulIÁVeùÜ
 = 
STM32F4_IRQ_UART5


80 #ifdeà
STM32F4_ENABLE_USART_6


82 .
	gsDeviûName
 = "/dev/ttyS5",

83 .
	gdeviûTy³
 = 
SERIAL_CUSTOM
,

84 .
	gpDeviûFns
 = &
¡m32f4_u§¹_âs
,

85 .
	gulClPÜt1
 = (
ut32_t
è
STM32F4_USART_6
,

86 .
	gulClPÜt2
 = 5,

87 .
	gulClock
 = 
STM32F4_USART_BAUD
,

88 .
	gulIÁVeùÜ
 = 
STM32F4_IRQ_USART6


93 
	#PORT_COUNT
 \

94 ((
CÚsÞe_CÚfigu¿tiÚ_PÜts
) \

95 / (
CÚsÞe_CÚfigu¿tiÚ_PÜts
 [0]))

	)

97 
	gCÚsÞe_CÚfigu¿tiÚ_CouÁ
 = 
PORT_COUNT
;

99 
	$ouut_ch¬
(
c
)

101 cÚ¡ 
cÚsÞe_âs
 *
cÚ
 =

102 
CÚsÞe_CÚfigu¿tiÚ_PÜts
 [
CÚsÞe_PÜt_MÜ
].
pDeviûFns
;

104 ià(
c
 == '\n') {

105 
cÚ
->
	`deviûWrePÞËd
((è
CÚsÞe_PÜt_MÜ
, '\r');

107 
cÚ
->
	`deviûWrePÞËd
((è
CÚsÞe_PÜt_MÜ
, 
c
);

108 
	}
}

110 
BSP_ouut_ch¬_funùiÚ_ty³
 
	gBSP_ouut_ch¬
 = 
ouut_ch¬
;

112 
BSP_pÞlg_gch¬_funùiÚ_ty³
 
	gBSP_pÞl_ch¬
 = 
NULL
;

	@src/lib/libbsp/arm/stm32f4/console/usart.c

15 
	~<libch/£rsuµ.h
>

17 
	~<b¥.h
>

18 
	~<b¥/io.h
>

19 
	~<b¥/rcc.h
>

20 
	~<b¥/q.h
>

21 
	~<b¥/u§¹.h
>

22 
	~<b¥/¡m32f4.h
>

24 vÞ©
¡m32f4_u§¹
 *
	$u§¹_g_»gs
(cÚ¡ 
cÚsÞe_tbl
 *
ù
)

26  (
¡m32f4_u§¹
 *è
ù
->
ulClPÜt1
;

27 
	}
}

30 
¹ems_veùÜ_numb
 
	$u§¹_g_q_numb
(cÚ¡ 
cÚsÞe_tbl
 *
ù
)

32  
ù
->
ulIÁVeùÜ
;

33 
	}
}

36 cÚ¡ 
¡m32f4_rcc_dex
 
	gu§¹_rcc_dex
 [] = {

37 
STM32F4_RCC_USART1
,

38 
STM32F4_RCC_USART2
,

39 
STM32F4_RCC_USART3
,

40 
STM32F4_RCC_UART4
,

41 
STM32F4_RCC_UART5
,

42 #ifdeà
STM32F4_FAMILY_F4XXXX


43 
STM32F4_RCC_USART6


47 
¡m32f4_rcc_dex
 
	$u§¹_g_rcc_dex
(cÚ¡ 
cÚsÞe_tbl
 *
ù
)

49  
u§¹_rcc_dex
 [
ù
->
ulClPÜt2
];

50 
	}
}

52 cÚ¡ 
ut8_t
 
	gu§¹_pþk_dex
 [] = { 1, 0, 0, 0, 0, 1 };

54 cÚ¡ 
ut32_t
 
	gu§¹_pþk_by_dex
 [] = {

55 
STM32F4_PCLK1
,

56 
STM32F4_PCLK2


59 
ut32_t
 
	$u§¹_g_pþk
(cÚ¡ 
cÚsÞe_tbl
 *
ù
)

61  
u§¹_pþk_by_dex
 [
u§¹_pþk_dex
 [
ù
->
ulClPÜt2
]];

62 
	}
}

64 
ut32_t
 
	$u§¹_g_baud
(cÚ¡ 
cÚsÞe_tbl
 *
ù
)

66  
ù
->
ulClock
;

67 
	}
}

84 
ut32_t
 
	$u§¹_g_bbr
(

85 vÞ©
¡m32f4_u§¹
 *
u§¹
,

86 
ut32_t
 
pþk
,

87 
ut32_t
 
baud


90 
ut32_t
 
a
 = 8 * (2 - ((
u§¹
->
ü1
 & 
STM32F4_USART_CR1_OVER8
) != 0));

91 
ut32_t
 
div_mªtis§_low
 = 
pþk
 / (
a
 * 
baud
);

92 
ut32_t
 
div_äaùiÚ_low
 = 
pþk
 / (
baud
 - 
a
 * 
div_mªtis§_low
);

93 
ut32_t
 
div_mªtis§_high
;

94 
ut32_t
 
div_äaùiÚ_high
;

95 
ut32_t
 
high_r
;

96 
ut32_t
 
low_r
;

97 
ut32_t
 
div_mªtis§
;

98 
ut32_t
 
div_äaùiÚ
;

100 ià(
div_äaùiÚ_low
 < 
a
 - 1) {

101 
div_mªtis§_high
 = 
div_äaùiÚ_low
;

102 
div_äaùiÚ_high
 = 
div_äaùiÚ_low
 + 1;

104 
div_mªtis§_high
 = 
div_äaùiÚ_low
 + 1;

105 
div_äaùiÚ_high
 = 0;

108 
high_r
 = 
pþk
 - 
baud
 * (
a
 * 
div_mªtis§_high
 + 
div_äaùiÚ_high
);

109 
low_r
 = 
baud
 * (
a
 * 
div_mªtis§_low
 + 
div_äaùiÚ_low
è- 
pþk
;

111 ià(
low_r
 < 
high_r
) {

112 
div_mªtis§
 = 
div_mªtis§_low
;

113 
div_äaùiÚ
 = 
div_äaùiÚ_low
;

115 
div_mªtis§
 = 
div_mªtis§_high
;

116 
div_äaùiÚ
 = 
div_äaùiÚ_high
;

119  
	`STM32F4_USART_BBR_DIV_MANTISSA
(
div_mªtis§
)

120 | 
	`STM32F4_USART_BBR_DIV_FRACTION
(
div_äaùiÚ
);

121 
	}
}

123 
	$u§¹_lize
(
mÜ
)

125 cÚ¡ 
cÚsÞe_tbl
 *
ù
 = 
CÚsÞe_PÜt_Tbl
 [
mÜ
];

126 vÞ©
¡m32f4_u§¹
 *
u§¹
 = 
	`u§¹_g_»gs
(
ù
);

127 
ut32_t
 
pþk
 = 
	`u§¹_g_pþk
(
ù
);

128 
ut32_t
 
baud
 = 
	`u§¹_g_baud
(
ù
);

129 
¡m32f4_rcc_dex
 
rcc_dex
 = 
	`u§¹_g_rcc_dex
(
ù
);

131 
	`¡m32f4_rcc_£t_þock
(
rcc_dex
, 
ue
);

133 
u§¹
->
ü1
 = 0;

134 
u§¹
->
ü2
 = 0;

135 
u§¹
->
ü3
 = 0;

136 
u§¹
->
bbr
 = 
	`u§¹_g_bbr
(u§¹, 
pþk
, 
baud
);

137 
u§¹
->
ü1
 = 
STM32F4_USART_CR1_UE


138 | 
STM32F4_USART_CR1_TE


139 | 
STM32F4_USART_CR1_RE
;

140 
	}
}

142 
	$u§¹_f¡_Ý
(
majÜ
, 
mÜ
, *
¬g
)

144 
¹ems_libio_Ý_þo£_¬gs_t
 *
oc
 = (¹ems_libio_Ý_þo£_¬gs_*è
¬g
;

145 
¹ems_rmios_y
 *
y
 = (¹ems_rmios_y *è
oc
->
iÝ
->
d©a1
;

146 cÚ¡ 
cÚsÞe_tbl
 *
ù
 = 
CÚsÞe_PÜt_Tbl
 [
mÜ
];

147 
cÚsÞe_d©a
 *
cd
 = &
CÚsÞe_PÜt_D©a
 [
mÜ
];

149 
cd
->
rmios_d©a
 = 
y
;

150 
	`¹ems_rmios_£t_l_baud
(
y
, 
ù
->
ulClock
);

153 
	}
}

155 
	$u§¹_Ï¡_þo£
(
majÜ
, 
mÜ
, *
¬g
)

158 
	}
}

160 
	$u§¹_»ad_pÞËd
(
mÜ
)

162 cÚ¡ 
cÚsÞe_tbl
 *
ù
 = 
CÚsÞe_PÜt_Tbl
 [
mÜ
];

163 vÞ©
¡m32f4_u§¹
 *
u§¹
 = 
	`u§¹_g_»gs
(
ù
);

165 ià((
u§¹
->
¤
 & 
STM32F4_USART_SR_RXNE
) != 0) {

166  
	`STM32F4_USART_DR_GET
(
u§¹
->
dr
);

170 
	}
}

172 
	$u§¹_wre_pÞËd
(
mÜ
, 
c
)

174 cÚ¡ 
cÚsÞe_tbl
 *
ù
 = 
CÚsÞe_PÜt_Tbl
 [
mÜ
];

175 vÞ©
¡m32f4_u§¹
 *
u§¹
 = 
	`u§¹_g_»gs
(
ù
);

177 (
u§¹
->
¤
 & 
STM32F4_USART_SR_TXE
) == 0) {

181 
u§¹
->
dr
 = 
	`STM32F4_USART_DR
(
c
);

182 
	}
}

184 
ssize_t
 
	$u§¹_wre_suµÜt_pÞËd
(

185 
mÜ
,

186 cÚ¡ *
s
,

187 
size_t
 
n


190 
ssize_t
 
i
 = 0;

192 
i
 = 0; i < 
n
; ++i) {

193 
	`u§¹_wre_pÞËd
(
mÜ
, 
s
 [
i
]);

196  
n
;

197 
	}
}

199 
	$u§¹_£t_©ibus
(
mÜ
, cÚ¡ 
rmios
 *
rm
)

202 
	}
}

204 cÚ¡ 
cÚsÞe_âs
 
	g¡m32f4_u§¹_âs
 = {

205 .
deviûProbe
 = 
libch_£rl_deçuÉ_´obe
,

206 .
	gdeviûF¡O³n
 = 
u§¹_f¡_Ý
,

207 .
	gdeviûLa¡Clo£
 = 
u§¹_Ï¡_þo£
,

208 .
	gdeviûRd
 = 
u§¹_»ad_pÞËd
,

209 .
	gdeviûWre
 = 
u§¹_wre_suµÜt_pÞËd
,

210 .
	gdeviûInlize
 = 
u§¹_lize
,

211 .
	gdeviûWrePÞËd
 = 
u§¹_wre_pÞËd
,

212 .
	gdeviûSAribus
 = 
u§¹_£t_©ibus
,

213 .
	gdeviûOuutU£sIÁru±s
 = 
çl£


	@src/lib/libbsp/arm/stm32f4/i2c/i2c-config.c

15 
	~<b¥Ýts.h
>

16 
	~<b¥/i2c.h
>

17 
	~<b¥/q.h
>

19 #ifdeà
STM32F4_ENABLE_I2C1


20 
¡m32f4_i2c_bus_y
 
	g¡m32f4_i2c1_y
 = {

21 .
»gs
 = 
STM32F4_I2C1
,

22 .
	gdex
 = 0,

23 .
	gveùÜ
 = 
STM32F4_IRQ_I2C1_EV
,

26 
¡m32f4_i2c_bus_y
 *cÚ¡ 
	g¡m32f4_i2c1
 = &
¡m32f4_i2c1_y
;

29 #ifdeà
STM32F4_ENABLE_I2C2


30 
¡m32f4_i2c_bus_y
 
	g¡m32f4_i2c2_y
 = {

31 .
»gs
 = 
STM32F4_I2C2
,

32 .
	gdex
 = 1,

33 .
	gveùÜ
 = 
STM32F4_IRQ_I2C2_EV
,

36 
¡m32f4_i2c_bus_y
 *cÚ¡ 
	g¡m32f4_i2c2
 = &
¡m32f4_i2c2_y
;

	@src/lib/libbsp/arm/stm32f4/i2c/i2c.c

20 
	~<b¥.h
>

21 
	~<b¥/i2c.h
>

22 
	~<b¥/rcc.h
>

23 
	~<b¥/q.h
>

24 
	~<b¥/q-gic.h
>

25 
	~<as£¹.h
>

27 
	#RTEMS_STATUS_CHECKS_USE_PRINTK


	)

29 
	~<¹ems/¡©us-checks.h
>

31 
	#STM32F4_I2C_INITIAL_BITRATE
 100000

	)

33 
	#I2C_RW_BIT
 0x1

	)

35 
¡m32f4_rcc_dex
 
	gi2c_rcc_dex
 [] = {

36 
STM32F4_RCC_I2C1
,

37 
STM32F4_RCC_I2C2
,

40 
¡m32f4_rcc_dex
 
	$i2c_g_rcc_dex
(
¡m32f4_i2c_bus_y
 *
e
)

42  
i2c_rcc_dex
 [
e
->
dex
];

43 
	}
}

45 
ut32_t
 
	$i2c_g_pþk
(
¡m32f4_i2c_bus_y
 *
e
)

47  
STM32F4_PCLK1
;

48 
	}
}

50 
¹ems_¡©us_code
 
	$¡m32f4_i2c_£t_b¿
(

51 
¡m32f4_i2c_bus_y
 *
e
,

52 
ut32_t
 
br


55 vÞ©
¡m32f4_i2c
 *
»gs
 = 
e
->regs;

56 
ut32_t
 
cü
;

57 
ut32_t
 
i£
;

58 
ut32_t
 
pþk
 = 
	`i2c_g_pþk
(
e
);

61 if((
»gs
->
ü1
 & 
STM32F4_I2C_CR1_PE
) != 0)

63  
RTEMS_RESOURCE_IN_USE
;

67 
cü
 = 
»gs
->ccr;

68 
i£
 = 
»gs
->trise;

70 if(
br
 <= 100000)

72 
ut32_t
 
cü_v®
 = 
pþk
 / (2 * 
br
);

74 
ut32_t
 
i£_v®
 = 
pþk
 / 1000000 + 1;

75 
i£
 = 
	`STM32F4_I2C_TRISE_SET
Ñri£, 
i£_v®
);

77 if(
cü_v®
 > 
STM32F4_I2C_CCR_CCR_MAX
)

79  
RTEMS_INVALID_NUMBER
;

83 
cü
 &ð~
STM32F4_I2C_CCR_FS
;

84 
cü
 = 
	`STM32F4_I2C_CCR_CCR_SET
(cü, 
cü_v®
);

89  
RTEMS_NOT_IMPLEMENTED
;

92 
»gs
->
cü
 = ccr;

93 
»gs
->
i£
 =rise;

95  
RTEMS_SUCCESSFUL
;

96 
	}
}

98 
	$¡m32f4_i2c_hªdËr
(*
¬g
)

102 
¡m32f4_i2c_bus_y
 *
e
 = 
¬g
;

103 vÞ©
¡m32f4_i2c
 *
»gs
 = 
e
->regs;

104 
ut32_t
 
¤1
 = 
»gs
->sr1;

105 
ut8_t
 *
d©a
 = 
e
->data;

106 
ut8_t
 *
Ï¡
 = 
e
->last;

107 
boÞ
 
»ad
 = 
e
->read;

108 
boÞ
 
wake_sk
 = 
çl£
;

109 
ut32_t
 
ü1
;

111 if(
¤1
 & 
STM32F4_I2C_SR1_SB
) {

113 
»gs
->
dr
 = 
e
->
addr_wh_rw
;

116 if(
»ad
) {

117 
size_t
 
Ën
 = 
e
->len;

119 if(
Ën
 == 1) {

121 if(
¤1
 & 
STM32F4_I2C_SR1_ADDR
) {

122 
ü1
 = 
»gs
->cr1;

123 
ü1
 &ð~
STM32F4_I2C_CR1_ACK
;

124 
»gs
->
ü1
 = cr1;

127 
»gs
->
¤2
;

129 
ü1
 = 
»gs
->cr1;

130 
ü1
 |ð
STM32F4_I2C_CR1_STOP
;

131 
»gs
->
ü1
 = cr1;

132 } if(
¤1
 & 
STM32F4_I2C_SR1_RxNE
) {

133 *
d©a
 = 
»gs
->
dr
;

134 
wake_sk
 = 
ue
;

136 } ià(
Ën
 == 2) {

138 if(
¤1
 & 
STM32F4_I2C_SR1_ADDR
) {

140 
»gs
->
¤2
;

142 
ü1
 = 
»gs
->cr1;

143 
ü1
 &ð~
STM32F4_I2C_CR1_ACK
;

144 
»gs
->
ü1
 = cr1;

145 } if(
¤1
 & 
STM32F4_I2C_SR1_BTF
) {

146 
ü1
 = 
»gs
->cr1;

147 
ü1
 |ð
STM32F4_I2C_CR1_STOP
;

148 
»gs
->
ü1
 = cr1;

150 *
d©a
 = 
»gs
->
dr
;

151 ++
d©a
;

152 *
d©a
 = 
»gs
->
dr
;

153 
wake_sk
 = 
ue
;

157 if(
¤1
 & 
STM32F4_I2C_SR1_ADDR
) {

159 
»gs
->
¤2
;

160 } if(
¤1
 & 
STM32F4_I2C_SR1_BTF
 && 
d©a
 =ð
Ï¡
 - 2) {

161 
ü1
 = 
»gs
->cr1;

162 
ü1
 &ð~
STM32F4_I2C_CR1_ACK
;

163 
»gs
->
ü1
 = cr1;

165 *
d©a
 = 
»gs
->
dr
;

166 ++
d©a
;

168 
ü1
 = 
»gs
->cr1;

169 
ü1
 |ð
STM32F4_I2C_CR1_STOP
;

170 
»gs
->
ü1
 = cr1;

172 *
d©a
 = 
»gs
->
dr
;

173 ++
d©a
;

174 } if((
¤1
 & 
STM32F4_I2C_SR1_RxNE
è&& (
d©a
 !ð
Ï¡
 - 2)) {

175 *
d©a
 = 
»gs
->
dr
;

177 if(
d©a
 =ð
Ï¡
) {

178 
wake_sk
 = 
ue
;

180 ++
d©a
;

185 if(
¤1
 & 
STM32F4_I2C_SR1_ADDR
) {

187 
»gs
->
¤2
;

190 if((
¤1
 & (
STM32F4_I2C_SR1_ADDR
 | 
STM32F4_I2C_SR1_TxE
)è&& (
d©a
 <ð
Ï¡
)) {

191 
»gs
->
dr
 = *
d©a
;

192 ++
d©a
;

193 } if(
¤1
 & 
STM32F4_I2C_SR1_BTF
) {

194 
ut32_t
 
ü1
 = 
»gs
->cr1;

195 
ü1
 |ð
STM32F4_I2C_CR1_STOP
;

196 
»gs
->
ü1
 = cr1;

197 
wake_sk
 = 
ue
;

201 
e
->
d©a
 = data;

203 if(
wake_sk
) {

204 
	`b¥_¼u±_veùÜ_di§bË
(
e
->
veùÜ
);

205 
	`¹ems_evt_ªsÁ_£nd
(
e
->
sk_id
);

207 
	}
}

209 
¹ems_¡©us_code
 
	$i2c_wa_dÚe
(
¡m32f4_i2c_bus_y
 *
e
)

211 
	`b¥_¼u±_veùÜ_abË
(
e
->
veùÜ
);

212 
e
->
sk_id
 = 
	`¹ems_sk_£lf
();

213  
	`¹ems_evt_ªsÁ_»ûive
(
RTEMS_WAIT
, 
RTEMS_NO_TIMEOUT
);

214 
	}
}

216 
¹ems_¡©us_code
 
	$¡m32f4_i2c_
(
¡m32f4_i2c_bus_y
 *
e
)

218 
¹ems_¡©us_code
 
sc
 = 
RTEMS_SUCCESSFUL
;

219 vÞ©
¡m32f4_i2c
 *
»gs
 = 
e
->regs;

220 
¡m32f4_rcc_dex
 
rcc_dex
 = 
	`i2c_g_rcc_dex
(
e
);

221 
ut32_t
 
pþk
 = 
	`i2c_g_pþk
(
e
);

222 
ut32_t
 
ü1
 = 0;

223 
ut32_t
 
ü2
 = 0;

225 
	`as£¹
(
pþk
 >= 2000000);

228 
sc
 = 
	`¹ems_£m­hÜe_ü
 (

229 
	`¹ems_bud_Çme
 ('I', '2', 'C', '1' + 
e
->
dex
),

231 
RTEMS_BINARY_SEMAPHORE
 | 
RTEMS_PRIORITY
 | 
RTEMS_INHERIT_PRIORITY
,

233 &
e
->
mux


235 
	`RTEMS_CHECK_SC
(
sc
, "create mutex");

238 
sc
 = 
	`¹ems_¼u±_hªdËr_¡®l
(

239 
e
->
veùÜ
,

241 
RTEMS_INTERRUPT_UNIQUE
,

242 
¡m32f4_i2c_hªdËr
,

243 
e


245 
	`RTEMS_CHECK_SC
(
sc
, "install interrupt handler");

246 
	`b¥_¼u±_veùÜ_di§bË
(
e
->
veùÜ
);

249 
	`¡m32f4_rcc_£t_þock
(
rcc_dex
, 
ue
);

252 
sc
 = 
	`¡m32f4_i2c_£t_b¿
(
e
, 
STM32F4_I2C_INITIAL_BITRATE
);

253 
	`RTEMS_CHECK_SC
(
sc
, "set bitrate");

256 
ü2
 = 
»gs
->cr2;

257 
ü2
 = 
	`STM32F4_I2C_CR2_FREQ_SET
(ü2, 
pþk
 / 1000000);

258 
ü2
 |ð
STM32F4_I2C_CR2_ITEVTEN
;

259 
ü2
 |ð
STM32F4_I2C_CR2_ITBUFEN
;

260 
»gs
->
ü2
 = cr2;

262 
ü1
 = 
»gs
->cr1;

263 
ü1
 |ð
STM32F4_I2C_CR1_PE
;

264 
»gs
->
ü1
 = cr1;

266  
RTEMS_SUCCESSFUL
;

267 
	}
}

269 
¹ems_¡©us_code
 
	$¡m32f4_i2c_´oûss_mes§ge
(

270 
¡m32f4_i2c_bus_y
 *
e
,

271 
¡m32f4_i2c_mes§ge
 *
msg


274 
¹ems_¡©us_code
 
sc
 = 
RTEMS_SUCCESSFUL
;

275 
¹ems_¡©us_code
 
sc_»tuº
 = 
RTEMS_SUCCESSFUL
;

276 vÞ©
¡m32f4_i2c
 *
»gs
 = 
e
->regs;

277 
ut16_t
 
max_7_b_add»ss
 = (1 << 7) - 1;

278 
ut32_t
 
ü1
 = 
»gs
->cr1;

280 if(
msg
->
addr
 > 
max_7_b_add»ss
) {

281  
RTEMS_NOT_IMPLEMENTED
;

284 if(
msg
->
Ën
 == 0) {

285  
RTEMS_INVALID_SIZE
;

288 
sc
 = 
	`¹ems_£m­hÜe_ob
(
e
->
mux
, 
RTEMS_WAIT
, 
RTEMS_NO_TIMEOUT
);

289 
	`RTEMS_CHECK_SC
(
sc
, "obtaining mutex");

291 
e
->
d©a
 = 
msg
->
buf
;

292 
e
->
Ï¡
 = 
msg
->
buf
 + msg->
Ën
 - 1;

293 
e
->
Ën
 = 
msg
->len;

295 
e
->
addr_wh_rw
 = 
msg
->
addr
 << 1;

296 if(
msg
->
»ad
) {

297 
e
->
addr_wh_rw
 |ð
I2C_RW_BIT
;

299 
e
->
»ad
 = 
msg
->read;

302 if(
ü1
 & 
STM32F4_I2C_CR1_STOP
) {

303  
RTEMS_IO_ERROR
;

307 
ü1
 = 
»gs
->cr1;

308 if(
e
->
Ën
 == 2) {

309 
ü1
 |ð
STM32F4_I2C_CR1_POS
;

311 
ü1
 &ð~
STM32F4_I2C_CR1_POS
;

313 
ü1
 |ð
STM32F4_I2C_CR1_ACK
;

314 
ü1
 |ð
STM32F4_I2C_CR1_START
;

315 
»gs
->
ü1
 = cr1;

318 
sc
 = 
	`i2c_wa_dÚe
(
e
);

320 if(
sc
 !ð
RTEMS_SUCCESSFUL
) {

321 
sc_»tuº
 = 
sc
;

324 
sc
 = 
	`¹ems_£m­hÜe_»Ëa£
(
e
->
mux
);

325 
	`RTEMS_CHECK_SC
(
sc
, "releasing mutex");

327  
sc_»tuº
;

328 
	}
}

	@src/lib/libbsp/arm/stm32f4/include/bsp.h

28 #iâdeà
LIBBSP_ARM_STM32F4_BSP_H


29 
	#LIBBSP_ARM_STM32F4_BSP_H


	)

31 
	~<b¥Ýts.h
>

32 
	~<b¥/deçuÉ-l-exnsiÚ.h
>

34 
	~<¹ems.h
>

35 
	~<¹ems/cÚsÞe.h
>

36 
	~<¹ems/þockdrv.h
>

38 #ifdeà
__ýlu¥lus


42 
	#BSP_FEATURE_IRQ_EXTENSION


	)

44 
	#BSP_ARMV7M_IRQ_PRIORITY_DEFAULT
 (13 << 4)

	)

46 
	#BSP_ARMV7M_SYSTICK_PRIORITY
 (14 << 4)

	)

48 
	#BSP_ARMV7M_SYSTICK_FREQUENCY
 
STM32F4_HCLK


	)

52 #ifdeà
__ýlu¥lus


	@src/lib/libbsp/arm/stm32f4/include/i2c.h

26 #iâdeà
LIBBSP_ARM_STM32F4_I2C_H


27 
	#LIBBSP_ARM_STM32F4_I2C_H


	)

29 
	~<¹ems.h
>

31 
	~<b¥/io.h
>

32 
	~<b¥/¡m32f4.h
>

34 #ifdeà
__ýlu¥lus


50 
ut16_t
 
addr
;

52 
boÞ
 
»ad
;

54 
size_t
 
Ën
;

56 
ut8_t
 *
buf
;

57 } 
	t¡m32f4_i2c_mes§ge
;

60 vÞ©
¡m32f4_i2c
 *
»gs
;

61 
size_t
 
dex
;

62 
¹ems_veùÜ_numb
 
veùÜ
;

63 
¹ems_id
 
mux
;

64 
¹ems_id
 
sk_id
;

65 
ut8_t
 *
d©a
;

66 
ut8_t
 *
Ï¡
;

67 
size_t
 
Ën
;

68 
boÞ
 
»ad
;

69 
ut8_t
 
addr_wh_rw
;

70 } 
	t¡m32f4_i2c_bus_y
;

73 
¹ems_¡©us_code
 
¡m32f4_i2c_
(
¡m32f4_i2c_bus_y
 *
e
);

76 
¹ems_¡©us_code
 
¡m32f4_i2c_´oûss_mes§ge
(

77 
¡m32f4_i2c_bus_y
 *
e
,

78 
¡m32f4_i2c_mes§ge
 *
msg


82 
¹ems_¡©us_code
 
¡m32f4_i2c_£t_b¿
(

83 
¡m32f4_i2c_bus_y
 *
e
,

84 
ut32_t
 
br


87 
¡m32f4_i2c_bus_y
 *cÚ¡ 
¡m32f4_i2c1
;

88 
¡m32f4_i2c_bus_y
 *cÚ¡ 
¡m32f4_i2c2
;

92 #ifdeà
__ýlu¥lus


	@src/lib/libbsp/arm/stm32f4/include/io.h

21 #iâdeà
LIBBSP_ARM_STM32F4_IO_H


22 
	#LIBBSP_ARM_STM32F4_IO_H


	)

24 
	~<¡dboÞ.h
>

25 
	~<¡dt.h
>

26 
	~<b¥Ýts.h
>

28 #ifdeà
__ýlu¥lus


39 
	#STM32F4_GPIO_PIN
(
pÜt
, 
dex
è(((ÕÜtè<< 4è| (dex)è& 0xff)

	)

41 
	#STM32F4_GPIO_PORT_OF_PIN
(
p
è((Õè>> 4è& 0xf)

	)

43 
	#STM32F4_GPIO_INDEX_OF_PIN
(
p
è(Õè& 0xf)

	)

45 #ifdeà
STM32F4_FAMILY_F4XXXX


53 
STM32F4_GPIO_MODE_INPUT
,

54 
STM32F4_GPIO_MODE_OUTPUT
,

55 
STM32F4_GPIO_MODE_AF
,

56 
STM32F4_GPIO_MODE_ANALOG


57 } 
	t¡m32f4_gpio_mode
;

60 
STM32F4_GPIO_OTYPE_PUSH_PULL
,

61 
STM32F4_GPIO_OTYPE_OPEN_DRAIN


62 } 
	t¡m32f4_gpio_Ùy³
;

65 
STM32F4_GPIO_OSPEED_2_MHZ
,

66 
STM32F4_GPIO_OSPEED_25_MHZ
,

67 
STM32F4_GPIO_OSPEED_50_MHZ
,

68 
STM32F4_GPIO_OSPEED_100_MHZ


69 } 
	t¡m32f4_gpio_o¥d
;

72 
STM32F4_GPIO_NO_PULL
,

73 
STM32F4_GPIO_PULL_UP
,

74 
STM32F4_GPIO_PULL_DOWN


75 } 
	t¡m32f4_gpio_puÎ
;

78 
STM32F4_GPIO_AF_SYSTEM
 = 0,

79 
STM32F4_GPIO_AF_TIM1
 = 1,

80 
STM32F4_GPIO_AF_TIM2
 = 1,

81 
STM32F4_GPIO_AF_TIM3
 = 2,

82 
STM32F4_GPIO_AF_TIM4
 = 2,

83 
STM32F4_GPIO_AF_TIM5
 = 2,

84 
STM32F4_GPIO_AF_TIM8
 = 3,

85 
STM32F4_GPIO_AF_TIM9
 = 3,

86 
STM32F4_GPIO_AF_TIM10
 = 3,

87 
STM32F4_GPIO_AF_TIM11
 = 3,

88 
STM32F4_GPIO_AF_I2C1
 = 4,

89 
STM32F4_GPIO_AF_I2C2
 = 4,

90 
STM32F4_GPIO_AF_I2C3
 = 4,

91 
STM32F4_GPIO_AF_SPI1
 = 5,

92 
STM32F4_GPIO_AF_SPI2
 = 5,

93 
STM32F4_GPIO_AF_SPI3
 = 6,

94 
STM32F4_GPIO_AF_USART1
 = 7,

95 
STM32F4_GPIO_AF_USART2
 = 7,

96 
STM32F4_GPIO_AF_USART3
 = 7,

97 
STM32F4_GPIO_AF_UART4
 = 8,

98 
STM32F4_GPIO_AF_UART5
 = 8,

99 
STM32F4_GPIO_AF_USART6
 = 8,

100 
STM32F4_GPIO_AF_CAN1
 = 9,

101 
STM32F4_GPIO_AF_CAN2
 = 9,

102 
STM32F4_GPIO_AF_TIM12
 = 9,

103 
STM32F4_GPIO_AF_TIM13
 = 9,

104 
STM32F4_GPIO_AF_TIM14
 = 9,

105 
STM32F4_GPIO_AF_OTG_FS
 = 10,

106 
STM32F4_GPIO_AF_OTG_HS
 = 10,

107 
STM32F4_GPIO_AF_ETH
 = 11,

108 
STM32F4_GPIO_AF_FSMC
 = 12,

109 
STM32F4_GPIO_AF_OTG_HS_FS
 = 12,

110 
STM32F4_GPIO_AF_SDIO
 = 12,

111 
STM32F4_GPIO_AF_DCMI
 = 13,

112 
STM32F4_GPIO_AF_EVENTOUT
 = 15

113 } 
	t¡m32f4_gpio_af
;

117 
ut32_t
 
p_f¡
 : 8;

118 
ut32_t
 
p_Ï¡
 : 8;

119 
ut32_t
 
mode
 : 2;

120 
ut32_t
 
Ùy³
 : 1;

121 
ut32_t
 
o¥d
 : 2;

122 
ut32_t
 
pupd
 : 2;

123 
ut32_t
 
ouut
 : 1;

124 
ut32_t
 
af
 : 4;

125 
ut32_t
 
»£rved
 : 4;

126 } 
flds
;

128 
ut32_t
 
v®ue
;

129 } 
	t¡m32f4_gpio_cÚfig
;

131 
	#STM32F4_GPIO_CONFIG_TERMINAL
 \

132 { { 0xff, 0xff, 0x3, 0x1, 0x3, 0x3, 0x1, 0xf, 0xà} }

	)

137 #ifdeà
STM32F4_FAMILY_F10XXX


145 
STM32F4_GPIO_MODE_INPUT
,

146 
STM32F4_GPIO_MODE_OUTPUT_10MHz
,

147 
STM32F4_GPIO_MODE_OUTPUT_2MHz
,

148 
STM32F4_GPIO_MODE_OUTPUT_50MHz


149 } 
	t¡m32f4_gpio_mode
;

152 
STM32F4_GPIO_CNF_IN_ANALOG
 = 0,

153 
STM32F4_GPIO_CNF_IN_FLOATING
 = 1,

154 
STM32F4_GPIO_CNF_IN_PULL_UPDOWN
 = 2,

156 
STM32F4_GPIO_CNF_OUT_GPIO_PP
 = 0,

157 
STM32F4_GPIO_CNF_OUT_GPIO_OD
 = 1,

158 
STM32F4_GPIO_CNF_OUT_AF_PP
 = 2,

159 
STM32F4_GPIO_CNF_OUT_AF_OD
 = 3,

160 } 
	t¡m32f4_gpio_úf
;

163 
STM32F4_GPIO_REMAP_DONT_CHANGE
,

164 
STM32F4_GPIO_REMAP_SPI1_0
,

165 
STM32F4_GPIO_REMAP_SPI1_1
,

166 
STM32F4_GPIO_REMAP_I2C1_0
,

167 
STM32F4_GPIO_REMAP_I2C1_1
,

168 
STM32F4_GPIO_REMAP_USART1_0
,

169 
STM32F4_GPIO_REMAP_USART1_1
,

170 
STM32F4_GPIO_REMAP_USART2_0
,

171 
STM32F4_GPIO_REMAP_USART2_1
,

172 
STM32F4_GPIO_REMAP_USART3_0
,

173 
STM32F4_GPIO_REMAP_USART3_1
,

174 
STM32F4_GPIO_REMAP_USART3_3
,

175 
STM32F4_GPIO_REMAP_TIM1_0
,

176 
STM32F4_GPIO_REMAP_TIM1_1
,

177 
STM32F4_GPIO_REMAP_TIM1_3
,

178 
STM32F4_GPIO_REMAP_TIM2_0
,

179 
STM32F4_GPIO_REMAP_TIM2_1
,

180 
STM32F4_GPIO_REMAP_TIM2_2
,

181 
STM32F4_GPIO_REMAP_TIM2_3
,

182 
STM32F4_GPIO_REMAP_TIM3_0
,

183 
STM32F4_GPIO_REMAP_TIM3_2
,

184 
STM32F4_GPIO_REMAP_TIM3_3
,

185 
STM32F4_GPIO_REMAP_TIM4_0
,

186 
STM32F4_GPIO_REMAP_TIM4_1
,

187 
STM32F4_GPIO_REMAP_CAN1_0
,

188 
STM32F4_GPIO_REMAP_CAN1_2
,

189 
STM32F4_GPIO_REMAP_CAN1_3
,

190 
STM32F4_GPIO_REMAP_PD01_0
,

191 
STM32F4_GPIO_REMAP_PD01_1
,

192 
STM32F4_GPIO_REMAP_TIM5CH4_0
,

193 
STM32F4_GPIO_REMAP_TIM5CH4_1
,

194 
STM32F4_GPIO_REMAP_ADC1_ETRGINJ_0
,

195 
STM32F4_GPIO_REMAP_ADC1_ETRGINJ_1
,

196 
STM32F4_GPIO_REMAP_ADC1_ETRGREG_0
,

197 
STM32F4_GPIO_REMAP_ADC1_ETRGREG_1
,

198 
STM32F4_GPIO_REMAP_ADC2_ETRGINJ_0
,

199 
STM32F4_GPIO_REMAP_ADC2_ETRGINJ_1
,

200 
STM32F4_GPIO_REMAP_ADC2_ETRGREG_0
,

201 
STM32F4_GPIO_REMAP_ADC2_ETRGREG_1
,

202 
STM32F4_GPIO_REMAP_ETH_0
,

203 
STM32F4_GPIO_REMAP_ETH_1
,

204 
STM32F4_GPIO_REMAP_CAN2_0
,

205 
STM32F4_GPIO_REMAP_CAN2_1
,

206 
STM32F4_GPIO_REMAP_MII_RMII_0
,

207 
STM32F4_GPIO_REMAP_MII_RMII_1
,

208 
STM32F4_GPIO_REMAP_SWJ_0
,

209 
STM32F4_GPIO_REMAP_SWJ_1
,

210 
STM32F4_GPIO_REMAP_SWJ_2
,

211 
STM32F4_GPIO_REMAP_SWJ_4
,

212 
STM32F4_GPIO_REMAP_SPI3_0
,

213 
STM32F4_GPIO_REMAP_SPI3_1
,

214 
STM32F4_GPIO_REMAP_TIM2ITR1_0
,

215 
STM32F4_GPIO_REMAP_TIM2ITR1_1
,

216 
STM32F4_GPIO_REMAP_PTP_PPS_0
,

217 
STM32F4_GPIO_REMAP_PTP_PPS_1
,

218 
STM32F4_GPIO_REMAP_TIM15_0
,

219 
STM32F4_GPIO_REMAP_TIM15_1
,

220 
STM32F4_GPIO_REMAP_TIM16_0
,

221 
STM32F4_GPIO_REMAP_TIM16_1
,

222 
STM32F4_GPIO_REMAP_TIM17_0
,

223 
STM32F4_GPIO_REMAP_TIM17_1
,

224 
STM32F4_GPIO_REMAP_CEC_0
,

225 
STM32F4_GPIO_REMAP_CEC_1
,

226 
STM32F4_GPIO_REMAP_TIM1_DMA_0
,

227 
STM32F4_GPIO_REMAP_TIM1_DMA_1
,

228 
STM32F4_GPIO_REMAP_TIM9_0
,

229 
STM32F4_GPIO_REMAP_TIM9_1
,

230 
STM32F4_GPIO_REMAP_TIM10_0
,

231 
STM32F4_GPIO_REMAP_TIM10_1
,

232 
STM32F4_GPIO_REMAP_TIM11_0
,

233 
STM32F4_GPIO_REMAP_TIM11_1
,

234 
STM32F4_GPIO_REMAP_TIM13_0
,

235 
STM32F4_GPIO_REMAP_TIM13_1
,

236 
STM32F4_GPIO_REMAP_TIM14_0
,

237 
STM32F4_GPIO_REMAP_TIM14_1
,

238 
STM32F4_GPIO_REMAP_FSMC_0
,

239 
STM32F4_GPIO_REMAP_FSMC_1
,

240 
STM32F4_GPIO_REMAP_TIM67_DAC_DMA_0
,

241 
STM32F4_GPIO_REMAP_TIM67_DAC_DMA_1
,

242 
STM32F4_GPIO_REMAP_TIM12_0
,

243 
STM32F4_GPIO_REMAP_TIM12_1
,

244 
STM32F4_GPIO_REMAP_MISC_0
,

245 
STM32F4_GPIO_REMAP_MISC_1
,

246 } 
	t¡m32f4_gpio_»m­
;

250 
ut32_t
 
p_f¡
 : 8;

251 
ut32_t
 
p_Ï¡
 : 8;

252 
ut32_t
 
mode
 : 2;

253 
ut32_t
 
úf
 : 2;

254 
ut32_t
 
ouut
 : 1;

255 
ut32_t
 
»m­
 : 8;

256 
ut32_t
 
»£rved
 : 3;

257 } 
flds
;

259 
ut32_t
 
v®ue
;

260 } 
	t¡m32f4_gpio_cÚfig
;

262 
	#STM32F4_GPIO_CONFIG_TERMINAL
 \

263 { { 0xff, 0xff, 0x3, 0x3, 0x1, 0xff, 0x7 } }

	)

269 cÚ¡ 
¡m32f4_gpio_cÚfig
 
¡m32f4_¡¬t_cÚfig_gpio
 [];

271 
¡m32f4_gpio_£t_þock
(
p
, 
boÞ
 
£t
);

273 
¡m32f4_gpio_£t_cÚfig
(cÚ¡ 
¡m32f4_gpio_cÚfig
 *
cÚfig
);

279 
¡m32f4_gpio_£t_cÚfig_¬¿y
(cÚ¡ 
¡m32f4_gpio_cÚfig
 *
cÚfigs
);

281 
¡m32f4_gpio_£t_ouut
(
p
, 
boÞ
 
£t
);

283 
boÞ
 
¡m32f4_gpio_g_put
(
p
);

285 #ifdeà
STM32F4_FAMILY_F4XXXX


292 
	#STM32F4_PIN_USART
(
pÜt
, 
idx
, 
®tfunc
) \

295 .
p_f¡
 = 
	`STM32F4_GPIO_PIN
(
pÜt
, 
idx
), \

296 .
p_Ï¡
 = 
	`STM32F4_GPIO_PIN
(
pÜt
, 
idx
), \

297 .
mode
 = 
STM32F4_GPIO_MODE_AF
, \

298 .
Ùy³
 = 
STM32F4_GPIO_OTYPE_PUSH_PULL
, \

299 .
o¥d
 = 
STM32F4_GPIO_OSPEED_2_MHZ
, \

300 .
pupd
 = 
STM32F4_GPIO_PULL_UP
, \

301 .
af
 = 
®tfunc
 \

303 }

	)

305 
	#STM32F4_PIN_USART1_TX_PA9
 
	`STM32F4_PIN_USART
(0, 9, 
STM32F4_GPIO_AF_USART1
)

	)

306 
	#STM32F4_PIN_USART1_TX_PB6
 
	`STM32F4_PIN_USART
(1, 6, 
STM32F4_GPIO_AF_USART1
)

	)

307 
	#STM32F4_PIN_USART1_RX_PA10
 
	`STM32F4_PIN_USART
(0, 10, 
STM32F4_GPIO_AF_USART1
)

	)

308 
	#STM32F4_PIN_USART1_RX_PB7
 
	`STM32F4_PIN_USART
(1, 7, 
STM32F4_GPIO_AF_USART1
)

	)

310 
	#STM32F4_PIN_USART2_TX_PA2
 
	`STM32F4_PIN_USART
(0, 2, 
STM32F4_GPIO_AF_USART2
)

	)

311 
	#STM32F4_PIN_USART2_TX_PD5
 
	`STM32F4_PIN_USART
(3, 5, 
STM32F4_GPIO_AF_USART2
)

	)

312 
	#STM32F4_PIN_USART2_RX_PA3
 
	`STM32F4_PIN_USART
(0, 3, 
STM32F4_GPIO_AF_USART2
)

	)

313 
	#STM32F4_PIN_USART2_RX_PD6
 
	`STM32F4_PIN_USART
(3, 6, 
STM32F4_GPIO_AF_USART2
)

	)

315 
	#STM32F4_PIN_USART3_TX_PC10
 
	`STM32F4_PIN_USART
(2, 10, 
STM32F4_GPIO_AF_USART3
)

	)

316 
	#STM32F4_PIN_USART3_TX_PD8
 
	`STM32F4_PIN_USART
(3, 8, 
STM32F4_GPIO_AF_USART3
)

	)

317 
	#STM32F4_PIN_USART3_RX_PC11
 
	`STM32F4_PIN_USART
(2, 11, 
STM32F4_GPIO_AF_USART3
)

	)

318 
	#STM32F4_PIN_USART3_RX_PD9
 
	`STM32F4_PIN_USART
(3, 9, 
STM32F4_GPIO_AF_USART3
)

	)

320 
	#STM32F4_PIN_UART4_TX_PA0
 
	`STM32F4_PIN_USART
(0, 0, 
STM32F4_GPIO_AF_UART4
)

	)

321 
	#STM32F4_PIN_UART4_TX_PC10
 
	`STM32F4_PIN_USART
(2, 10, 
STM32F4_GPIO_AF_UART4
)

	)

322 
	#STM32F4_PIN_UART4_RX_PA1
 
	`STM32F4_PIN_USART
(0, 1, 
STM32F4_GPIO_AF_UART4
)

	)

323 
	#STM32F4_PIN_UART4_RX_PC11
 
	`STM32F4_PIN_USART
(2, 11, 
STM32F4_GPIO_AF_UART4
)

	)

325 
	#STM32F4_PIN_UART5_TX_PC12
 
	`STM32F4_PIN_USART
(2, 12, 
STM32F4_GPIO_AF_UART5
)

	)

326 
	#STM32F4_PIN_UART5_RX_PD2
 
	`STM32F4_PIN_USART
(3, 2, 
STM32F4_GPIO_AF_UART5
)

	)

328 
	#STM32F4_PIN_USART6_TX_PC6
 
	`STM32F4_PIN_USART
(2, 6, 
STM32F4_GPIO_AF_USART6
)

	)

329 
	#STM32F4_PIN_USART6_RX_PC7
 
	`STM32F4_PIN_USART
(2, 7, 
STM32F4_GPIO_AF_USART6
)

	)

334 #ifdeà
STM32F4_FAMILY_F10XXX


341 
	#STM32F4_PIN_USART_TX
(
pÜt
, 
idx
, 
»m­v®ue
) \

344 .
p_f¡
 = 
	`STM32F4_GPIO_PIN
(
pÜt
, 
idx
), \

345 .
p_Ï¡
 = 
	`STM32F4_GPIO_PIN
(
pÜt
, 
idx
), \

346 .
mode
 = 
STM32F4_GPIO_MODE_OUTPUT_2MHz
, \

347 .
úf
 = 
STM32F4_GPIO_CNF_OUT_AF_PP
, \

348 .
ouut
 = 0, \

349 .
»m­
 = 
»m­v®ue
 \

351 }

	)

353 
	#STM32F4_PIN_USART_RX
(
pÜt
, 
idx
, 
»m­v®ue
) \

356 .
p_f¡
 = 
	`STM32F4_GPIO_PIN
(
pÜt
, 
idx
), \

357 .
p_Ï¡
 = 
	`STM32F4_GPIO_PIN
(
pÜt
, 
idx
), \

358 .
mode
 = 
STM32F4_GPIO_MODE_INPUT
, \

359 .
úf
 = 
STM32F4_GPIO_CNF_IN_FLOATING
, \

360 .
ouut
 = 0, \

361 .
»m­
 = 
»m­v®ue
 \

363 }

	)

365 
	#STM32F4_PIN_USART1_TX_MAP_0
 
	`STM32F4_PIN_USART_TX
(0, 9, 
STM32F4_GPIO_REMAP_USART1_0
)

	)

366 
	#STM32F4_PIN_USART1_RX_MAP_0
 
	`STM32F4_PIN_USART_RX
(0, 10, 
STM32F4_GPIO_REMAP_USART1_0
)

	)

367 
	#STM32F4_PIN_USART1_TX_MAP_1
 
	`STM32F4_PIN_USART_TX
(1, 6, 
STM32F4_GPIO_REMAP_USART1_1
)

	)

368 
	#STM32F4_PIN_USART1_RX_MAP_1
 
	`STM32F4_PIN_USART_RX
(1, 7, 
STM32F4_GPIO_REMAP_USART1_1
)

	)

370 
	#STM32F4_PIN_USART2_TX_MAP_0
 
	`STM32F4_PIN_USART_TX
(0, 2, 
STM32F4_GPIO_REMAP_USART2_0
)

	)

371 
	#STM32F4_PIN_USART2_RX_MAP_0
 
	`STM32F4_PIN_USART_RX
(0, 3, 
STM32F4_GPIO_REMAP_USART2_0
)

	)

372 
	#STM32F4_PIN_USART2_TX_MAP_1
 
	`STM32F4_PIN_USART_TX
(3, 5, 
STM32F4_GPIO_REMAP_USART2_1
)

	)

373 
	#STM32F4_PIN_USART2_RX_MAP_1
 
	`STM32F4_PIN_USART_RX
(3, 6, 
STM32F4_GPIO_REMAP_USART2_1
)

	)

375 
	#STM32F4_PIN_USART3_TX_MAP_0
 
	`STM32F4_PIN_USART_TX
(1, 10, 
STM32F4_GPIO_REMAP_USART3_0
)

	)

376 
	#STM32F4_PIN_USART3_RX_MAP_0
 
	`STM32F4_PIN_USART_RX
(1, 11, 
STM32F4_GPIO_REMAP_USART3_0
)

	)

377 
	#STM32F4_PIN_USART3_TX_MAP_1
 
	`STM32F4_PIN_USART_TX
(2, 10, 
STM32F4_GPIO_REMAP_USART3_1
)

	)

378 
	#STM32F4_PIN_USART3_RX_MAP_1
 
	`STM32F4_PIN_USART_RX
(2, 11, 
STM32F4_GPIO_REMAP_USART3_1
)

	)

379 
	#STM32F4_PIN_USART3_TX_MAP_3
 
	`STM32F4_PIN_USART_TX
(3, 8, 
STM32F4_GPIO_REMAP_USART3_3
)

	)

380 
	#STM32F4_PIN_USART3_RX_MAP_3
 
	`STM32F4_PIN_USART_RX
(3, 9, 
STM32F4_GPIO_REMAP_USART3_3
)

	)

382 
	#STM32F4_PIN_UART4_TX
 
	`STM32F4_PIN_USART_TX
(2, 10, 
STM32F4_GPIO_REMAP_DONT_CHANGE
)

	)

383 
	#STM32F4_PIN_UART4_RX
 
	`STM32F4_PIN_USART_RX
(2, 11, 
STM32F4_GPIO_REMAP_DONT_CHANGE
)

	)

385 
	#STM32F4_PIN_UART5_TX
 
	`STM32F4_PIN_USART_TX
(2, 12, 
STM32F4_GPIO_REMAP_DONT_CHANGE
)

	)

386 
	#STM32F4_PIN_UART5_RX
 
	`STM32F4_PIN_USART_RX
(3, 2, 
STM32F4_GPIO_REMAP_DONT_CHANGE
)

	)

388 
	#STM32F4_PIN_I2C
(
pÜt
, 
idx
, 
»m­v®ue
) \

391 .
p_f¡
 = 
	`STM32F4_GPIO_PIN
(
pÜt
, 
idx
), \

392 .
p_Ï¡
 = 
	`STM32F4_GPIO_PIN
(
pÜt
, 
idx
), \

393 .
mode
 = 
STM32F4_GPIO_MODE_OUTPUT_2MHz
, \

394 .
úf
 = 
STM32F4_GPIO_CNF_OUT_AF_OD
, \

395 .
ouut
 = 0, \

396 .
»m­
 = 
»m­v®ue
 \

398 }

	)

400 
	#STM32F4_PIN_I2C1_SCL_MAP0
 
	`STM32F4_PIN_I2C
(1, 6, 
STM32F4_GPIO_REMAP_I2C1_0
)

	)

401 
	#STM32F4_PIN_I2C1_SDA_MAP0
 
	`STM32F4_PIN_I2C
(1, 7, 
STM32F4_GPIO_REMAP_I2C1_0
)

	)

402 
	#STM32F4_PIN_I2C1_SCL_MAP1
 
	`STM32F4_PIN_I2C
(1, 8, 
STM32F4_GPIO_REMAP_I2C1_1
)

	)

403 
	#STM32F4_PIN_I2C1_SDA_MAP1
 
	`STM32F4_PIN_I2C
(1, 9, 
STM32F4_GPIO_REMAP_I2C1_1
)

	)

405 
	#STM32F4_PIN_I2C2_SCL
 
	`STM32F4_PIN_I2C
(1, 10, 
STM32F4_GPIO_REMAP_DONT_CHANGE
)

	)

406 
	#STM32F4_PIN_I2C2_SDA
 
	`STM32F4_PIN_I2C
(1, 11, 
STM32F4_GPIO_REMAP_DONT_CHANGE
)

	)

412 #ifdeà
__ýlu¥lus


	@src/lib/libbsp/arm/stm32f4/include/irq.h

21 #iâdeà
LIBBSP_ARM_STM32F4_IRQ_H


22 
	#LIBBSP_ARM_STM32F4_IRQ_H


	)

24 #iâdeà
ASM


26 
	~<¹ems.h
>

27 
	~<¹ems/q.h
>

28 
	~<¹ems/q-exnsiÚ.h
>

30 #ifdeà
__ýlu¥lus


34 #ifdeà
__ýlu¥lus


47 
	#STM32F4_IRQ_WWDG
 0

	)

48 
	#STM32F4_IRQ_PVD
 1

	)

49 
	#STM32F4_IRQ_TAMP_STAMP
 2

	)

50 
	#STM32F4_IRQ_RTC_WKUP
 3

	)

51 
	#STM32F4_IRQ_FLASH
 4

	)

52 
	#STM32F4_IRQ_RCC
 5

	)

53 
	#STM32F4_IRQ_EXTI0
 6

	)

54 
	#STM32F4_IRQ_EXTI1
 7

	)

55 
	#STM32F4_IRQ_EXTI2
 8

	)

56 
	#STM32F4_IRQ_EXTI3
 9

	)

57 
	#STM32F4_IRQ_EXTI4
 10

	)

58 
	#STM32F4_IRQ_DMA1_STREAM0
 11

	)

59 
	#STM32F4_IRQ_DMA1_STREAM1
 12

	)

60 
	#STM32F4_IRQ_DMA1_STREAM2
 13

	)

61 
	#STM32F4_IRQ_DMA1_STREAM3
 14

	)

62 
	#STM32F4_IRQ_DMA1_STREAM4
 15

	)

63 
	#STM32F4_IRQ_DMA1_STREAM5
 16

	)

64 
	#STM32F4_IRQ_DMA1_STREAM6
 17

	)

65 
	#STM32F4_IRQ_ADC
 18

	)

66 
	#STM32F4_IRQ_CAN1_TX
 19

	)

67 
	#STM32F4_IRQ_CAN1_RX0
 20

	)

68 
	#STM32F4_IRQ_CAN1_RX1
 21

	)

69 
	#STM32F4_IRQ_CAN1_SCE
 22

	)

70 
	#STM32F4_IRQ_EXTI9_5
 23

	)

71 
	#STM32F4_IRQ_TIM1_BRK_TIM9
 24

	)

72 
	#STM32F4_IRQ_TIM1_UP_TIM10
 25

	)

73 
	#STM32F4_IRQ_TIM1_TRG_COM_TIM11
 26

	)

74 
	#STM32F4_IRQ_TIM1_CC
 27

	)

75 
	#STM32F4_IRQ_TIM2
 28

	)

76 
	#STM32F4_IRQ_TIM3
 29

	)

77 
	#STM32F4_IRQ_TIM4
 30

	)

78 
	#STM32F4_IRQ_I2C1_EV
 31

	)

79 
	#STM32F4_IRQ_I2C1_ER
 32

	)

80 
	#STM32F4_IRQ_I2C2_EV
 33

	)

81 
	#STM32F4_IRQ_I2C2_ER
 34

	)

82 
	#STM32F4_IRQ_SPI1
 35

	)

83 
	#STM32F4_IRQ_SPI2
 36

	)

84 
	#STM32F4_IRQ_USART1
 37

	)

85 
	#STM32F4_IRQ_USART2
 38

	)

86 
	#STM32F4_IRQ_USART3
 39

	)

87 
	#STM32F4_IRQ_EXTI15_10
 40

	)

88 
	#STM32F4_IRQ_RTC_ALARM
 41

	)

89 
	#STM32F4_IRQ_OTG_FS_WKUP
 42

	)

90 
	#STM32F4_IRQ_TIM8_BRK_TIM12
 43

	)

91 
	#STM32F4_IRQ_TIM8_UP_TIM13
 44

	)

92 
	#STM32F4_IRQ_TIM8_TRG_COM_TIM14
 45

	)

93 
	#STM32F4_IRQ_TIM8_CC
 46

	)

94 
	#STM32F4_IRQ_DMA1_STREAM7
 47

	)

95 
	#STM32F4_IRQ_FSMC
 48

	)

96 
	#STM32F4_IRQ_SDIO
 49

	)

97 
	#STM32F4_IRQ_TIM5
 50

	)

98 
	#STM32F4_IRQ_SPI3
 51

	)

99 
	#STM32F4_IRQ_UART4
 52

	)

100 
	#STM32F4_IRQ_UART5
 53

	)

101 
	#STM32F4_IRQ_TIM6_DAC
 54

	)

102 
	#STM32F4_IRQ_TIM7
 55

	)

103 
	#STM32F4_IRQ_DMA2_STREAM0
 56

	)

104 
	#STM32F4_IRQ_DMA2_STREAM1
 57

	)

105 
	#STM32F4_IRQ_DMA2_STREAM2
 58

	)

106 
	#STM32F4_IRQ_DMA2_STREAM3
 59

	)

107 
	#STM32F4_IRQ_DMA2_STREAM4
 60

	)

108 
	#STM32F4_IRQ_ETH
 61

	)

109 
	#STM32F4_IRQ_ETH_WKUP
 62

	)

110 
	#STM32F4_IRQ_CAN2_TX
 63

	)

111 
	#STM32F4_IRQ_CAN2_RX0
 64

	)

112 
	#STM32F4_IRQ_CAN2_RX1
 65

	)

113 
	#STM32F4_IRQ_CAN2_SCE
 66

	)

114 
	#STM32F4_IRQ_OTG_FS
 67

	)

115 
	#STM32F4_IRQ_DMA2_STREAM5
 68

	)

116 
	#STM32F4_IRQ_DMA2_STREAM6
 69

	)

117 
	#STM32F4_IRQ_DMA2_STREAM7
 70

	)

118 
	#STM32F4_IRQ_USART6
 71

	)

119 
	#STM32F4_IRQ_I2C3_EV
 72

	)

120 
	#STM32F4_IRQ_I2C3_ER
 73

	)

121 
	#STM32F4_IRQ_OTG_HS_EP1_OUT
 74

	)

122 
	#STM32F4_IRQ_OTG_HS_EP1_IN
 75

	)

123 
	#STM32F4_IRQ_OTG_HS_WKUP
 76

	)

124 
	#STM32F4_IRQ_OTG_HS
 77

	)

125 
	#STM32F4_IRQ_DCMI
 78

	)

126 
	#STM32F4_IRQ_CRYP
 79

	)

127 
	#STM32F4_IRQ_HASH_RNG
 80

	)

128 
	#STM32F4_IRQ_FPU
 81

	)

130 
	#STM32F4_IRQ_PRIORITY_VALUE_MIN
 0

	)

131 
	#STM32F4_IRQ_PRIORITY_VALUE_MAX
 15

	)

132 
	#STM32F4_IRQ_PRIORITY_COUNT
 (
STM32F4_IRQ_PRIORITY_VALUE_MAX
 + 1)

	)

133 
	#STM32F4_IRQ_PRIORITY_HIGHEST
 
STM32F4_IRQ_PRIORITY_VALUE_MIN


	)

134 
	#STM32F4_IRQ_PRIORITY_LOWEST
 
STM32F4_IRQ_PRIORITY_VALUE_MAX


	)

136 
	#BSP_INTERRUPT_VECTOR_MIN
 0

	)

137 
	#BSP_INTERRUPT_VECTOR_MAX
 81

	)

	@src/lib/libbsp/arm/stm32f4/include/rcc.h

21 #iâdeà
LIBBSP_ARM_STM32F4_RCC_H


22 
	#LIBBSP_ARM_STM32F4_RCC_H


	)

24 
	~<¡dboÞ.h
>

25 
	~<b¥Ýts.h
>

27 #ifdeà
__ýlu¥lus


38 
	#STM32F4_RCC_INDEX
(
»g
, 
idx
è((Ôegè<< 5è| (idx))

	)

41 #ifdeà
STM32F4_FAMILY_F4XXXX


48 
STM32F4_RCC_OTGHS
 = 
STM32F4_RCC_INDEX
(0, 29),

49 
STM32F4_RCC_ETHMAC
 = 
STM32F4_RCC_INDEX
(0, 25),

50 
STM32F4_RCC_DMA2
 = 
STM32F4_RCC_INDEX
(0, 22),

51 
STM32F4_RCC_DMA1
 = 
STM32F4_RCC_INDEX
(0, 21),

52 
STM32F4_RCC_CRC
 = 
STM32F4_RCC_INDEX
(0, 12),

53 
STM32F4_RCC_GPIOI
 = 
STM32F4_RCC_INDEX
(0, 8),

54 
STM32F4_RCC_GPIOH
 = 
STM32F4_RCC_INDEX
(0, 7),

55 
STM32F4_RCC_GPIOG
 = 
STM32F4_RCC_INDEX
(0, 6),

56 
STM32F4_RCC_GPIOF
 = 
STM32F4_RCC_INDEX
(0, 5),

57 
STM32F4_RCC_GPIOE
 = 
STM32F4_RCC_INDEX
(0, 4),

58 
STM32F4_RCC_GPIOD
 = 
STM32F4_RCC_INDEX
(0, 3),

59 
STM32F4_RCC_GPIOC
 = 
STM32F4_RCC_INDEX
(0, 2),

60 
STM32F4_RCC_GPIOB
 = 
STM32F4_RCC_INDEX
(0, 1),

61 
STM32F4_RCC_GPIOA
 = 
STM32F4_RCC_INDEX
(0, 0),

63 
STM32F4_RCC_OTGFS
 = 
STM32F4_RCC_INDEX
(1, 7),

64 
STM32F4_RCC_RNG
 = 
STM32F4_RCC_INDEX
(1, 6),

65 
STM32F4_RCC_HASH
 = 
STM32F4_RCC_INDEX
(1, 5),

66 
STM32F4_RCC_CRYP
 = 
STM32F4_RCC_INDEX
(1, 4),

67 
STM32F4_RCC_DCMI
 = 
STM32F4_RCC_INDEX
(1, 0),

69 
STM32F4_RCC_FSMCR
 = 
STM32F4_RCC_INDEX
(2, 0),

71 
STM32F4_RCC_DAC
 = 
STM32F4_RCC_INDEX
(4, 29),

72 
STM32F4_RCC_PWR
 = 
STM32F4_RCC_INDEX
(4, 28),

73 
STM32F4_RCC_CAN2
 = 
STM32F4_RCC_INDEX
(4, 26),

74 
STM32F4_RCC_CAN1
 = 
STM32F4_RCC_INDEX
(4, 25),

75 
STM32F4_RCC_I2C3
 = 
STM32F4_RCC_INDEX
(4, 23),

76 
STM32F4_RCC_I2C2
 = 
STM32F4_RCC_INDEX
(4, 22),

77 
STM32F4_RCC_I2C1
 = 
STM32F4_RCC_INDEX
(4, 21),

78 
STM32F4_RCC_UART5
 = 
STM32F4_RCC_INDEX
(4, 20),

79 
STM32F4_RCC_UART4
 = 
STM32F4_RCC_INDEX
(4, 19),

80 
STM32F4_RCC_USART3
 = 
STM32F4_RCC_INDEX
(4, 18),

81 
STM32F4_RCC_USART2
 = 
STM32F4_RCC_INDEX
(4, 17),

82 
STM32F4_RCC_SPI3
 = 
STM32F4_RCC_INDEX
(4, 15),

83 
STM32F4_RCC_SPI2
 = 
STM32F4_RCC_INDEX
(4, 14),

84 
STM32F4_RCC_WWDG
 = 
STM32F4_RCC_INDEX
(4, 11),

85 
STM32F4_RCC_TIM14
 = 
STM32F4_RCC_INDEX
(4, 8),

86 
STM32F4_RCC_TIM13
 = 
STM32F4_RCC_INDEX
(4, 7),

87 
STM32F4_RCC_TIM12
 = 
STM32F4_RCC_INDEX
(4, 6),

88 
STM32F4_RCC_TIM7
 = 
STM32F4_RCC_INDEX
(4, 5),

89 
STM32F4_RCC_TIM6
 = 
STM32F4_RCC_INDEX
(4, 4),

90 
STM32F4_RCC_TIM5
 = 
STM32F4_RCC_INDEX
(4, 3),

91 
STM32F4_RCC_TIM4
 = 
STM32F4_RCC_INDEX
(4, 2),

92 
STM32F4_RCC_TIM3
 = 
STM32F4_RCC_INDEX
(4, 1),

93 
STM32F4_RCC_TIM2
 = 
STM32F4_RCC_INDEX
(4, 0),

95 
STM32F4_RCC_TIM11
 = 
STM32F4_RCC_INDEX
(5, 18),

96 
STM32F4_RCC_TIM10
 = 
STM32F4_RCC_INDEX
(5, 17),

97 
STM32F4_RCC_TIM9
 = 
STM32F4_RCC_INDEX
(5, 16),

98 
STM32F4_RCC_SYSCFG
 = 
STM32F4_RCC_INDEX
(5, 14),

99 
STM32F4_RCC_SPI1
 = 
STM32F4_RCC_INDEX
(5, 12),

100 
STM32F4_RCC_SDIO
 = 
STM32F4_RCC_INDEX
(5, 11),

101 
STM32F4_RCC_ADC3
 = 
STM32F4_RCC_INDEX
(5, 10),

102 
STM32F4_RCC_ADC2
 = 
STM32F4_RCC_INDEX
(5, 9),

103 
STM32F4_RCC_ADC1
 = 
STM32F4_RCC_INDEX
(5, 8),

104 
STM32F4_RCC_USART6
 = 
STM32F4_RCC_INDEX
(5, 5),

105 
STM32F4_RCC_USART1
 = 
STM32F4_RCC_INDEX
(5, 4),

106 
STM32F4_RCC_TIM8
 = 
STM32F4_RCC_INDEX
(5, 1),

107 
STM32F4_RCC_TIM1
 = 
STM32F4_RCC_INDEX
(5, 0),

112 #ifdeà
STM32F4_FAMILY_F10XXX


119 
STM32F4_RCC_DMA1
 = 
STM32F4_RCC_INDEX
(0, 0),

120 
STM32F4_RCC_DMA2
 = 
STM32F4_RCC_INDEX
(0, 1),

121 
STM32F4_RCC_SRAM
 = 
STM32F4_RCC_INDEX
(0, 2),

122 
STM32F4_RCC_FLITF
 = 
STM32F4_RCC_INDEX
(0, 4),

123 
STM32F4_RCC_CRCEN
 = 
STM32F4_RCC_INDEX
(0, 6),

124 
STM32F4_RCC_FSMC
 = 
STM32F4_RCC_INDEX
(0, 8),

125 
STM32F4_RCC_SDIO
 = 
STM32F4_RCC_INDEX
(0, 10),

126 
STM32F4_RCC_OTGFS
 = 
STM32F4_RCC_INDEX
(0, 12),

127 
STM32F4_RCC_ETHMAC
 = 
STM32F4_RCC_INDEX
(0, 14),

128 
STM32F4_RCC_ETHMACTX
 = 
STM32F4_RCC_INDEX
(0, 15),

129 
STM32F4_RCC_ETHMACRX
 = 
STM32F4_RCC_INDEX
(0, 16),

131 
STM32F4_RCC_AFIO
 = 
STM32F4_RCC_INDEX
(1, 0),

132 
STM32F4_RCC_GPIOA
 = 
STM32F4_RCC_INDEX
(1, 2),

133 
STM32F4_RCC_GPIOB
 = 
STM32F4_RCC_INDEX
(1, 3),

134 
STM32F4_RCC_GPIOC
 = 
STM32F4_RCC_INDEX
(1, 4),

135 
STM32F4_RCC_GPIOD
 = 
STM32F4_RCC_INDEX
(1, 5),

136 
STM32F4_RCC_GPIOE
 = 
STM32F4_RCC_INDEX
(1, 6),

137 
STM32F4_RCC_GPIOF
 = 
STM32F4_RCC_INDEX
(1, 7),

138 
STM32F4_RCC_GPIOG
 = 
STM32F4_RCC_INDEX
(1, 8),

139 
STM32F4_RCC_ADC1
 = 
STM32F4_RCC_INDEX
(1, 9),

140 
STM32F4_RCC_ADC2
 = 
STM32F4_RCC_INDEX
(1, 10),

141 
STM32F4_RCC_TIM1
 = 
STM32F4_RCC_INDEX
(1, 11),

142 
STM32F4_RCC_SPI1
 = 
STM32F4_RCC_INDEX
(1, 12),

143 
STM32F4_RCC_TIM8
 = 
STM32F4_RCC_INDEX
(1, 13),

144 
STM32F4_RCC_USART1
 = 
STM32F4_RCC_INDEX
(1, 14),

145 
STM32F4_RCC_ADC3
 = 
STM32F4_RCC_INDEX
(1, 15),

146 
STM32F4_RCC_TIM9
 = 
STM32F4_RCC_INDEX
(1, 19),

147 
STM32F4_RCC_TIM10
 = 
STM32F4_RCC_INDEX
(1, 20),

148 
STM32F4_RCC_TIM11
 = 
STM32F4_RCC_INDEX
(1, 21),

150 
STM32F4_RCC_TIM2
 = 
STM32F4_RCC_INDEX
(2, 0),

151 
STM32F4_RCC_TIM3
 = 
STM32F4_RCC_INDEX
(2, 1),

152 
STM32F4_RCC_TIM4
 = 
STM32F4_RCC_INDEX
(2, 2),

153 
STM32F4_RCC_TIM5
 = 
STM32F4_RCC_INDEX
(2, 3),

154 
STM32F4_RCC_TIM6
 = 
STM32F4_RCC_INDEX
(2, 4),

155 
STM32F4_RCC_TIM7
 = 
STM32F4_RCC_INDEX
(2, 5),

156 
STM32F4_RCC_TIM12
 = 
STM32F4_RCC_INDEX
(2, 6),

157 
STM32F4_RCC_TIM13
 = 
STM32F4_RCC_INDEX
(2, 7),

158 
STM32F4_RCC_TIM14
 = 
STM32F4_RCC_INDEX
(2, 8),

159 
STM32F4_RCC_WWDG
 = 
STM32F4_RCC_INDEX
(2, 11),

160 
STM32F4_RCC_SPI2
 = 
STM32F4_RCC_INDEX
(2, 14),

161 
STM32F4_RCC_SPI3
 = 
STM32F4_RCC_INDEX
(2, 15),

162 
STM32F4_RCC_USART2
 = 
STM32F4_RCC_INDEX
(2, 17),

163 
STM32F4_RCC_USART3
 = 
STM32F4_RCC_INDEX
(2, 18),

164 
STM32F4_RCC_UART4
 = 
STM32F4_RCC_INDEX
(2, 19),

165 
STM32F4_RCC_UART5
 = 
STM32F4_RCC_INDEX
(2, 20),

166 
STM32F4_RCC_I2C1
 = 
STM32F4_RCC_INDEX
(2, 21),

167 
STM32F4_RCC_I2C2
 = 
STM32F4_RCC_INDEX
(2, 22),

168 
STM32F4_RCC_USB
 = 
STM32F4_RCC_INDEX
(2, 23),

169 
STM32F4_RCC_CAN1
 = 
STM32F4_RCC_INDEX
(2, 24),

170 
STM32F4_RCC_CAN2
 = 
STM32F4_RCC_INDEX
(2, 25),

171 
STM32F4_RCC_BKP
 = 
STM32F4_RCC_INDEX
(2, 27),

172 
STM32F4_RCC_PWR
 = 
STM32F4_RCC_INDEX
(2, 28),

173 
STM32F4_RCC_DAC
 = 
STM32F4_RCC_INDEX
(2, 29),

178 } 
	t¡m32f4_rcc_dex
;

180 
¡m32f4_rcc_»£t
(
¡m32f4_rcc_dex
 
dex
);

182 
¡m32f4_rcc_£t_»£t
(
¡m32f4_rcc_dex
 
dex
, 
boÞ
 
£t
);

184 
¡m32f4_rcc_£t_þock
(
¡m32f4_rcc_dex
 
dex
, 
boÞ
 
£t
);

186 #ifdeà
STM32F4_FAMILY_F4XXXX


187 
¡m32f4_rcc_£t_low_pow_þock
(
¡m32f4_rcc_dex
 
dex
, 
boÞ
 
£t
);

192 #ifdeà
__ýlu¥lus


	@src/lib/libbsp/arm/stm32f4/include/stm32_i2c.h

21 #iâdeà
LIBBSP_ARM_STM32F4_STM32_I2C_H


22 
	#LIBBSP_ARM_STM32F4_STM32_I2C_H


	)

24 
	~<b¥/uty.h
>

34 
ut32_t
 
	mü1
;

35 
	#STM32F4_I2C_CR1_SWRST
 
	`BSP_BIT32
(15)

	)

36 
	#STM32F4_I2C_CR1_ALERT
 
	`BSP_BIT32
(13)

	)

37 
	#STM32F4_I2C_CR1_PEC
 
	`BSP_BIT32
(12)

	)

38 
	#STM32F4_I2C_CR1_POS
 
	`BSP_BIT32
(11)

	)

39 
	#STM32F4_I2C_CR1_ACK
 
	`BSP_BIT32
(10)

	)

40 
	#STM32F4_I2C_CR1_STOP
 
	`BSP_BIT32
(9)

	)

41 
	#STM32F4_I2C_CR1_START
 
	`BSP_BIT32
(8)

	)

42 
	#STM32F4_I2C_CR1_NOSTRETCH
 
	`BSP_BIT32
(7)

	)

43 
	#STM32F4_I2C_CR1_ENGC
 
	`BSP_BIT32
(6)

	)

44 
	#STM32F4_I2C_CR1_ENPEC
 
	`BSP_BIT32
(5)

	)

45 
	#STM32F4_I2C_CR1_ENARP
 
	`BSP_BIT32
(4)

	)

46 
	#STM32F4_I2C_CR1_SMBTYPE
 
	`BSP_BIT32
(3)

	)

47 
	#STM32F4_I2C_CR1_SMBUS
 
	`BSP_BIT32
(1)

	)

48 
	#STM32F4_I2C_CR1_PE
 
	`BSP_BIT32
(0)

	)

49 
ut32_t
 
	mü2
;

50 
	#STM32F4_I2C_CR2_LAST
 
	`BSP_BIT32
(12)

	)

51 
	#STM32F4_I2C_CR2_DMAEN
 
	`BSP_BIT32
(11)

	)

52 
	#STM32F4_I2C_CR2_ITBUFEN
 
	`BSP_BIT32
(10)

	)

53 
	#STM32F4_I2C_CR2_ITEVTEN
 
	`BSP_BIT32
(9)

	)

54 
	#STM32F4_I2C_CR2_ITERREN
 
	`BSP_BIT32
(8)

	)

55 
	#STM32F4_I2C_CR2_FREQ
(
v®
è
	`BSP_FLD32
(v®, 0, 5)

	)

56 
	#STM32F4_I2C_CR2_FREQ_GET
(
»g
è
	`BSP_FLD32GET
Ôeg, 0, 5)

	)

57 
	#STM32F4_I2C_CR2_FREQ_SET
(
»g
, 
v®
è
	`BSP_FLD32SET
Ôeg, v®, 0, 5)

	)

58 
ut32_t
 
	mßr1
;

59 
	#STM32F4_I2C_OAR1_ADDMODE
 
	`BSP_BIT32
(15)

	)

60 
	#STM32F4_I2C_OAR1_ADD
(
v®
è
	`BSP_FLD32
(v®, 0, 9)

	)

61 
	#STM32F4_I2C_OAR1_ADD_GET
(
»g
è
	`BSP_FLD32GET
Ôeg, 0, 9)

	)

62 
	#STM32F4_I2C_OAR1_ADD_SET
(
»g
, 
v®
è
	`BSP_FLD32SET
Ôeg, v®, 0, 9)

	)

63 
ut32_t
 
	mßr2
;

64 
	#STM32F4_I2C_OAR2_ADD2
(
v®
è
	`BSP_FLD32
(v®, 1, 7)

	)

65 
	#STM32F4_I2C_OAR2_ADD2_GET
(
»g
è
	`BSP_FLD32GET
Ôeg, 1, 7)

	)

66 
	#STM32F4_I2C_OAR2_ADD2_SET
(
»g
, 
v®
è
	`BSP_FLD32SET
Ôeg, v®, 1, 7)

	)

67 
	#STM32F4_I2C_OAR2_ENDUAL
 
	`BSP_BIT32
(0)

	)

68 
ut32_t
 
	mdr
;

69 
	#STM32F4_I2C_DR
(
v®
è
	`BSP_FLD32
(v®, 0, 7)

	)

70 
	#STM32F4_I2C_DR_GET
(
»g
è
	`BSP_FLD32GET
Ôeg, 0, 7)

	)

71 
	#STM32F4_I2C_DR_SET
(
»g
, 
v®
è
	`BSP_FLD32SET
Ôeg, v®, 0, 7)

	)

72 
ut32_t
 
	m¤1
;

73 
	#STM32F4_I2C_SR1_SMBALERT
 
	`BSP_BIT32
(15)

	)

74 
	#STM32F4_I2C_SR1_TIMEOUT
 
	`BSP_BIT32
(14)

	)

75 
	#STM32F4_I2C_SR1_PECERR
 
	`BSP_BIT32
(12)

	)

76 
	#STM32F4_I2C_SR1_OVR
 
	`BSP_BIT32
(11)

	)

77 
	#STM32F4_I2C_SR1_AF
 
	`BSP_BIT32
(10)

	)

78 
	#STM32F4_I2C_SR1_ARLO
 
	`BSP_BIT32
(9)

	)

79 
	#STM32F4_I2C_SR1_BERR
 
	`BSP_BIT32
(8)

	)

80 
	#STM32F4_I2C_SR1_TxE
 
	`BSP_BIT32
(7)

	)

81 
	#STM32F4_I2C_SR1_RxNE
 
	`BSP_BIT32
(6)

	)

82 
	#STM32F4_I2C_SR1_STOPF
 
	`BSP_BIT32
(4)

	)

83 
	#STM32F4_I2C_SR1_ADD10
 
	`BSP_BIT32
(3)

	)

84 
	#STM32F4_I2C_SR1_BTF
 
	`BSP_BIT32
(2)

	)

85 
	#STM32F4_I2C_SR1_ADDR
 
	`BSP_BIT32
(1)

	)

86 
	#STM32F4_I2C_SR1_SB
 
	`BSP_BIT32
(0)

	)

87 
ut32_t
 
	m¤2
;

88 
	#STM32F4_I2C_SR2_PEC
(
v®
è
	`BSP_FLD32
(v®, 8, 15)

	)

89 
	#STM32F4_I2C_SR2_PEC_GET
(
»g
è
	`BSP_FLD32GET
Ôeg, 8, 15)

	)

90 
	#STM32F4_I2C_SR2_PEC_SET
(
»g
, 
v®
è
	`BSP_FLD32SET
Ôeg, v®, 8, 15)

	)

91 
	#STM32F4_I2C_SR2_DUALF
 
	`BSP_BIT32
(7)

	)

92 
	#STM32F4_I2C_SR2_SMBHOST
 
	`BSP_BIT32
(6)

	)

93 
	#STM32F4_I2C_SR2_SMBDEFAULT
 
	`BSP_BIT32
(5)

	)

94 
	#STM32F4_I2C_SR2_GENCALL
 
	`BSP_BIT32
(4)

	)

95 
	#STM32F4_I2C_SR2_TRA
 
	`BSP_BIT32
(2)

	)

96 
	#STM32F4_I2C_SR2_BUSY
 
	`BSP_BIT32
(1)

	)

97 
	#STM32F4_I2C_SR2_MSL
 
	`BSP_BIT32
(0)

	)

98 
ut32_t
 
	mcü
;

99 
	#STM32F4_I2C_CCR_FS
 
	`BSP_BIT32
(15)

	)

100 
	#STM32F4_I2C_CCR_DUTY
 
	`BSP_BIT32
(14)

	)

101 
	#STM32F4_I2C_CCR_CCR
(
v®
è
	`BSP_FLD32
(v®, 0, 11)

	)

102 
	#STM32F4_I2C_CCR_CCR_GET
(
»g
è
	`BSP_FLD32GET
Ôeg, 0, 11)

	)

103 
	#STM32F4_I2C_CCR_CCR_SET
(
»g
, 
v®
è
	`BSP_FLD32SET
Ôeg, v®, 0, 11)

	)

104 
	#STM32F4_I2C_CCR_CCR_MAX
 
	`STM32F4_I2C_CCR_CCR_GET
(
	`BSP_MSK32
(0, 11))

	)

105 
ut32_t
 
	mi£
;

106 
	#STM32F4_I2C_TRISE
(
v®
è
	`BSP_FLD32
(v®, 0, 5)

	)

107 
	#STM32F4_I2C_TRISE_GET
(
»g
è
	`BSP_FLD32GET
Ôeg, 0, 5)

	)

108 
	#STM32F4_I2C_TRISE_SET
(
»g
, 
v®
è
	`BSP_FLD32SET
Ôeg, v®, 0, 5)

	)

109 } 
	t¡m32f4_i2c
;

	@src/lib/libbsp/arm/stm32f4/include/stm32_usart.h

21 #iâdeà
LIBBSP_ARM_STM32F4_STM32_USART_H


22 
	#LIBBSP_ARM_STM32F4_STM32_USART_H


	)

24 
	~<b¥/uty.h
>

34 
ut32_t
 
	m¤
;

35 
	#STM32F4_USART_SR_CTS
 
	`BSP_BIT32
(9)

	)

36 
	#STM32F4_USART_SR_LBD
 
	`BSP_BIT32
(8)

	)

37 
	#STM32F4_USART_SR_TXE
 
	`BSP_BIT32
(7)

	)

38 
	#STM32F4_USART_SR_TC
 
	`BSP_BIT32
(6)

	)

39 
	#STM32F4_USART_SR_RXNE
 
	`BSP_BIT32
(5)

	)

40 
	#STM32F4_USART_SR_IDLE
 
	`BSP_BIT32
(4)

	)

41 
	#STM32F4_USART_SR_ORE
 
	`BSP_BIT32
(3)

	)

42 
	#STM32F4_USART_SR_NF
 
	`BSP_BIT32
(2)

	)

43 
	#STM32F4_USART_SR_FE
 
	`BSP_BIT32
(1)

	)

44 
	#STM32F4_USART_SR_PE
 
	`BSP_BIT32
(0)

	)

45 
ut32_t
 
	mdr
;

46 
	#STM32F4_USART_DR
(
v®
è
	`BSP_FLD32
(v®, 0, 7)

	)

47 
	#STM32F4_USART_DR_GET
(
»g
è
	`BSP_FLD32GET
Ôeg, 0, 7)

	)

48 
	#STM32F4_USART_DR_SET
(
»g
, 
v®
è
	`BSP_FLD32SET
Ôeg, v®, 0, 7)

	)

49 
ut32_t
 
	mbbr
;

50 
	#STM32F4_USART_BBR_DIV_MANTISSA
(
v®
è
	`BSP_FLD32
(v®, 4, 15)

	)

51 
	#STM32F4_USART_BBR_DIV_MANTISSA_GET
(
»g
è
	`BSP_FLD32GET
Ôeg, 4, 15)

	)

52 
	#STM32F4_USART_BBR_DIV_MANTISSA_SET
(
»g
, 
v®
è
	`BSP_FLD32SET
Ôeg, v®, 4, 15)

	)

53 
	#STM32F4_USART_BBR_DIV_FRACTION
(
v®
è
	`BSP_FLD32
(v®, 0, 3)

	)

54 
	#STM32F4_USART_BBR_DIV_FRACTION_GET
(
»g
è
	`BSP_FLD32GET
Ôeg, 0, 3)

	)

55 
	#STM32F4_USART_BBR_DIV_FRACTION_SET
(
»g
, 
v®
è
	`BSP_FLD32SET
Ôeg, v®, 0, 3)

	)

56 
ut32_t
 
	mü1
;

57 
	#STM32F4_USART_CR1_OVER8
 
	`BSP_BIT32
(15)

	)

58 
	#STM32F4_USART_CR1_UE
 
	`BSP_BIT32
(13)

	)

59 
	#STM32F4_USART_CR1_M
 
	`BSP_BIT32
(12)

	)

60 
	#STM32F4_USART_CR1_WAKE
 
	`BSP_BIT32
(11)

	)

61 
	#STM32F4_USART_CR1_PCE
 
	`BSP_BIT32
(10)

	)

62 
	#STM32F4_USART_CR1_PS
 
	`BSP_BIT32
(9)

	)

63 
	#STM32F4_USART_CR1_PEIE
 
	`BSP_BIT32
(8)

	)

64 
	#STM32F4_USART_CR1_TXEIE
 
	`BSP_BIT32
(7)

	)

65 
	#STM32F4_USART_CR1_TCIE
 
	`BSP_BIT32
(6)

	)

66 
	#STM32F4_USART_CR1_RXNEIE
 
	`BSP_BIT32
(5)

	)

67 
	#STM32F4_USART_CR1_IDLEIE
 
	`BSP_BIT32
(4)

	)

68 
	#STM32F4_USART_CR1_TE
 
	`BSP_BIT32
(3)

	)

69 
	#STM32F4_USART_CR1_RE
 
	`BSP_BIT32
(2)

	)

70 
	#STM32F4_USART_CR1_RWU
 
	`BSP_BIT32
(1)

	)

71 
	#STM32F4_USART_CR1_SBK
 
	`BSP_BIT32
(0)

	)

72 
ut32_t
 
	mü2
;

73 
	#STM32F4_USART_CR2_LINEN
 
	`BSP_BIT32
(14)

	)

74 
	#STM32F4_USART_CR2_STOP
(
v®
è
	`BSP_FLD32
(v®, 12, 13)

	)

75 
	#STM32F4_USART_CR2_STOP_GET
(
»g
è
	`BSP_FLD32GET
Ôeg, 12, 13)

	)

76 
	#STM32F4_USART_CR2_STOP_SET
(
»g
, 
v®
è
	`BSP_FLD32SET
Ôeg, v®, 12, 13)

	)

77 
	#STM32F4_USART_CR2_CLKEN
 
	`BSP_BIT32
(11)

	)

78 
	#STM32F4_USART_CR2_CPOL
 
	`BSP_BIT32
(10)

	)

79 
	#STM32F4_USART_CR2_CPHA
 
	`BSP_BIT32
(9)

	)

80 
	#STM32F4_USART_CR2_LBCL
 
	`BSP_BIT32
(8)

	)

81 
	#STM32F4_USART_CR2_LBDIE
 
	`BSP_BIT32
(6)

	)

82 
	#STM32F4_USART_CR2_LBDL
 
	`BSP_BIT32
(5)

	)

83 
	#STM32F4_USART_CR2_ADD
(
v®
è
	`BSP_FLD32
(v®, 0, 3)

	)

84 
	#STM32F4_USART_CR2_ADD_GET
(
»g
è
	`BSP_FLD32GET
Ôeg, 0, 3)

	)

85 
	#STM32F4_USART_CR2_ADD_SET
(
»g
, 
v®
è
	`BSP_FLD32SET
Ôeg, v®, 0, 3)

	)

86 
ut32_t
 
	mü3
;

87 
	#STM32F4_USART_CR3_ONEBIT
 
	`BSP_BIT32
(11)

	)

88 
	#STM32F4_USART_CR3_CTSIE
 
	`BSP_BIT32
(10)

	)

89 
	#STM32F4_USART_CR3_CTSE
 
	`BSP_BIT32
(9)

	)

90 
	#STM32F4_USART_CR3_RTSE
 
	`BSP_BIT32
(8)

	)

91 
	#STM32F4_USART_CR3_DMAT
 
	`BSP_BIT32
(7)

	)

92 
	#STM32F4_USART_CR3_DMAR
 
	`BSP_BIT32
(6)

	)

93 
	#STM32F4_USART_CR3_SCEN
 
	`BSP_BIT32
(5)

	)

94 
	#STM32F4_USART_CR3_NACK
 
	`BSP_BIT32
(4)

	)

95 
	#STM32F4_USART_CR3_HDSEL
 
	`BSP_BIT32
(3)

	)

96 
	#STM32F4_USART_CR3_IRLP
 
	`BSP_BIT32
(2)

	)

97 
	#STM32F4_USART_CR3_IREN
 
	`BSP_BIT32
(1)

	)

98 
	#STM32F4_USART_CR3_EIE
 
	`BSP_BIT32
(0)

	)

99 
ut32_t
 
	mgr
;

100 
	#STM32F4_USART_GTPR_GT
(
v®
è
	`BSP_FLD32
(v®, 8, 15)

	)

101 
	#STM32F4_USART_GTPR_GT_GET
(
»g
è
	`BSP_FLD32GET
Ôeg, 8, 15)

	)

102 
	#STM32F4_USART_GTPR_GT_SET
(
»g
, 
v®
è
	`BSP_FLD32SET
Ôeg, v®, 8, 15)

	)

103 
	#STM32F4_USART_GTPR_PSC
(
v®
è
	`BSP_FLD32
(v®, 0, 7)

	)

104 
	#STM32F4_USART_GTPR_PSC_GET
(
»g
è
	`BSP_FLD32GET
Ôeg, 0, 7)

	)

105 
	#STM32F4_USART_GTPR_PSC_SET
(
»g
, 
v®
è
	`BSP_FLD32SET
Ôeg, v®, 0, 7)

	)

106 } 
	t¡m32f4_u§¹
;

	@src/lib/libbsp/arm/stm32f4/include/stm32f10xxx_exti.h

21 #iâdeà
LIBBSP_ARM_STM32F4_STM32F10XXX_EXTI_H


22 
	#LIBBSP_ARM_STM32F4_STM32F10XXX_EXTI_H


	)

24 
	~<b¥/uty.h
>

34 
ut32_t
 
	mimr
;

35 
	#STM32F4_EXTI_IMR
(
le
è
	`BSP_BIT32
Öe)

	)

36 
ut32_t
 
	memr
;

37 
	#STM32F4_EXTI_EMR
(
le
è
	`BSP_BIT32
Öe)

	)

38 
ut32_t
 
	m¹¤
;

39 
	#STM32F4_EXTI_RTSR
(
le
è
	`BSP_BIT32
Öe)

	)

40 
ut32_t
 
	má¤
;

41 
	#STM32F4_EXTI_FTSR
(
le
è
	`BSP_BIT32
Öe)

	)

42 
ut32_t
 
	mswr
;

43 
	#STM32F4_EXTI_SWIER
(
le
è
	`BSP_BIT32
Öe)

	)

44 
ut32_t
 
	m´
;

45 
	#STM32F4_EXTI_PR
(
le
è
	`BSP_BIT32
Öe)

	)

46 } 
	t¡m32f4_exti
;

	@src/lib/libbsp/arm/stm32f4/include/stm32f10xxx_gpio.h

21 #iâdeà
LIBBSP_ARM_STM32F4_STM32F10XXX_GPIO_H


22 
	#LIBBSP_ARM_STM32F4_STM32F10XXX_GPIO_H


	)

24 
	~<b¥/uty.h
>

34 
ut32_t
 
	mü
[2];

35 
ut32_t
 
	midr
;

36 
ut32_t
 
	modr
;

37 
ut32_t
 
	mb¤r
;

38 
ut32_t
 
	mb¼
;

39 
ut32_t
 
	mlckr
;

40 } 
	t¡m32f4_gpio
;

43 
ut32_t
 
	mevü
;

44 
ut32_t
 
	mm­r
;

45 
ut32_t
 
	mextiü
[4];

46 
ut32_t
 
	mm­r2
;

47 } 
	t¡m32f4_afio
;

	@src/lib/libbsp/arm/stm32f4/include/stm32f10xxx_rcc.h

21 #iâdeà
LIBBSP_ARM_STM32F4_STM32F10XXX_RCC_H


22 
	#LIBBSP_ARM_STM32F4_STM32F10XXX_RCC_H


	)

24 
	~<b¥/uty.h
>

34 
ut32_t
 
	mü
;

35 
ut32_t
 
	mcfgr
;

36 
ut32_t
 
	mc
;

37 
ut32_t
 
	m­br¡r
 [2];

38 
ut32_t
 
	mahbr
 [1];

39 
ut32_t
 
	m­br
 [2];

40 
ut32_t
 
	mbdü
;

41 
ut32_t
 
	mc¤
;

42 
ut32_t
 
	mahb¡r
;

43 
ut32_t
 
	mcfgr2
;

44 } 
	t¡m32f4_rcc
;

	@src/lib/libbsp/arm/stm32f4/include/stm32f4.h

21 #iâdeà
LIBBSP_ARM_STM32F4_STM32F4_H


22 
	#LIBBSP_ARM_STM32F4_STM32F4_H


	)

24 
	~<b¥/uty.h
>

25 
	~<b¥Ýts.h
>

27 
	#STM32F4_BASE
 0x00

	)

29 #ifdeà
STM32F4_FAMILY_F4XXXX


38 
	#STM32F4_APB1_BASE
 (
STM32F4_BASE
 + 0x40000000)

	)

39 
	#STM32F4_APB2_BASE
 (
STM32F4_BASE
 + 0x40010000)

	)

40 
	#STM32F4_AHB1_BASE
 (
STM32F4_BASE
 + 0x40020000)

	)

41 
	#STM32F4_AHB2_BASE
 (
STM32F4_BASE
 + 0x50000000)

	)

48 
	~<b¥/¡m32f4xxxx_gpio.h
>

49 
	#STM32F4_GPIO
(
i
è((vÞ©
¡m32f4_gpio
 *è(
STM32F4_BASE
 + 0x40020000è+ (i))

	)

58 
	~<b¥/¡m32f4xxxx_rcc.h
>

59 
	#STM32F4_RCC
 ((vÞ©
¡m32f4_rcc
 *è(
STM32F4_AHB1_BASE
 + 0x3800))

	)

68 
	~<b¥/¡m32f4xxxx_æash.h
>

69 
	#STM32F4_FLASH
 ((vÞ©
¡m32f4_æash
 *è(
STM32F4_BASE
 + 0x40023C00))

	)

73 
	~<b¥/¡m32_i2c.h
>

80 
	#STM32F4_I2C3
 ((vÞ©
¡m32f4_i2c
 *è(
STM32F4_BASE
 + 0x40005C00))

	)

81 
	#STM32F4_I2C2
 ((vÞ©
¡m32f4_i2c
 *è(
STM32F4_BASE
 + 0x40005800))

	)

82 
	#STM32F4_I2C1
 ((vÞ©
¡m32f4_i2c
 *è(
STM32F4_BASE
 + 0x40005400))

	)

91 
	~<b¥/¡m32_u§¹.h
>

92 
	#STM32F4_USART_1
 ((vÞ©
¡m32f4_u§¹
 *è(
STM32F4_BASE
 + 0x40011000))

	)

93 
	#STM32F4_USART_2
 ((vÞ©
¡m32f4_u§¹
 *è(
STM32F4_BASE
 + 0x40004400))

	)

94 
	#STM32F4_USART_3
 ((vÞ©
¡m32f4_u§¹
 *è(
STM32F4_BASE
 + 0x40004800))

	)

95 
	#STM32F4_USART_4
 ((vÞ©
¡m32f4_u§¹
 *è(
STM32F4_BASE
 + 0x40004c00))

	)

96 
	#STM32F4_USART_5
 ((vÞ©
¡m32f4_u§¹
 *è(
STM32F4_BASE
 + 0x40005000))

	)

97 
	#STM32F4_USART_6
 ((vÞ©
¡m32f4_u§¹
 *è(
STM32F4_BASE
 + 0x40011400))

	)

106 
	~<b¥/¡m32f4xxxx_pwr.h
>

107 
	#STM32F4_PWR
 ((vÞ©
¡m32f4_pwr
 *è(
STM32F4_APB1_BASE
 + 0x7000))

	)

116 
	~<b¥/¡m32f4xxxx_exti.h
>

117 
	#STM32F4_EXTI
 ((vÞ©
¡m32f4_exti
 *è(
STM32F4_APB2_BASE
 + 0x3c00))

	)

126 
	~<b¥/¡m32f4xxxx_syscfg.h
>

127 
	#STM32F4_SYSCFG
 ((vÞ©
¡m32f4_syscfg
 *è(
STM32F4_APB2_BASE
 + 0x3800))

	)

136 
	~<b¥/¡m32f4xxxx_æash.h
>

137 
	#STM32F4_FLASH
 ((vÞ©
¡m32f4_æash
 *è(
STM32F4_AHB1_BASE
 + 0x3c00))

	)

146 
	~<b¥/¡m32f4xxxx_tim.h
>

147 
	#STM32F4_TIM1
 ((vÞ©
¡m32f4_tim
 *è(
STM32F4_APB2_BASE
 + 0x0000))

	)

148 
	#STM32F4_TIM2
 ((vÞ©
¡m32f4_tim
 *è(
STM32F4_APB1_BASE
 + 0x0000))

	)

149 
	#STM32F4_TIM3
 ((vÞ©
¡m32f4_tim
 *è(
STM32F4_APB1_BASE
 + 0x0400))

	)

150 
	#STM32F4_TIM4
 ((vÞ©
¡m32f4_tim
 *è(
STM32F4_APB1_BASE
 + 0x0800))

	)

151 
	#STM32F4_TIM5
 ((vÞ©
¡m32f4_tim
 *è(
STM32F4_APB1_BASE
 + 0x0c00))

	)

152 
	#STM32F4_TIM6
 ((vÞ©
¡m32f4_tim
 *è(
STM32F4_APB1_BASE
 + 0x1000))

	)

153 
	#STM32F4_TIM7
 ((vÞ©
¡m32f4_tim
 *è(
STM32F4_APB1_BASE
 + 0x1400))

	)

154 
	#STM32F4_TIM8
 ((vÞ©
¡m32f4_tim
 *è(
STM32F4_APB2_BASE
 + 0x0400))

	)

155 
	#STM32F4_TIM9
 ((vÞ©
¡m32f4_tim
 *è(
STM32F4_APB2_BASE
 + 0x4000))

	)

156 
	#STM32F4_TIM10
 ((vÞ©
¡m32f4_tim
 *è(
STM32F4_APB2_BASE
 + 0x4400))

	)

157 
	#STM32F4_TIM11
 ((vÞ©
¡m32f4_tim
 *è(
STM32F4_APB2_BASE
 + 0x4800))

	)

158 
	#STM32F4_TIM12
 ((vÞ©
¡m32f4_tim
 *è(
STM32F4_APB1_BASE
 + 0x1800))

	)

159 
	#STM32F4_TIM13
 ((vÞ©
¡m32f4_tim
 *è(
STM32F4_APB1_BASE
 + 0x1c00))

	)

160 
	#STM32F4_TIM14
 ((vÞ©
¡m32f4_tim
 *è(
STM32F4_APB1_BASE
 + 0x2000))

	)

169 
	~<b¥/¡m32f4xxxx_adc.h
>

170 
	#STM32F4_ADC1
 ((vÞ©
¡m32f4_adc_chª
 *è(
STM32F4_APB2_BASE
 + 0x2000))

	)

171 
	#STM32F4_ADC2
 ((vÞ©
¡m32f4_adc_chª
 *è(
STM32F4_APB2_BASE
 + 0x2100))

	)

172 
	#STM32F4_ADC3
 ((vÞ©
¡m32f4_adc_chª
 *è(
STM32F4_APB2_BASE
 + 0x2200))

	)

173 
	#STM32F4_ADC_COMMON
 ((vÞ©
¡m32f4_adc_com
 *è(
STM32F4_APB2_BASE
 + 0x2300))

	)

182 
	~<b¥/¡m32f4xxxx_Ùgfs.h
>

183 
	#STM32F4_OTGFS_BASE
 (
STM32F4_AHB2_BASE
 + 0x0000)

	)

184 
	#STM32F4_OTGFS_CORE
 ((vÞ©
¡m32f4_Ùgfs
 *è(
STM32F4_OTGFS_BASE
 + 0x000))

	)

185 
	#STM32F4_OTGFS_DEV
 ((vÞ©
¡m32f4_Ùgfs_d»gs
 *è(
STM32F4_OTGFS_BASE
 + 0x800))

	)

186 
	#STM32F4_OTGFS_INEP
 ((vÞ©
¡m32f4_Ùgfs_»gs
 *è(
STM32F4_OTGFS_BASE
 + 0x900))

	)

187 
	#STM32F4_OTGFS_OUTEP
 ((vÞ©
¡m32f4_Ùgfs_ou´egs
 *è(
STM32F4_OTGFS_BASE
 + 0xb00))

	)

188 
	#STM32F4_OTGFS_PWRCTL
 ((vÞ©
¡m32f4_Ùgfs_pwrùÌegs
 *è(
STM32F4_OTGFS_BASE
 + 0xe00))

	)

190 
	#STM32F4_OTGFS_FIFO_BASE
 (
STM32F4_OTGFS_BASE
 + 
USB_FIFO_BASE
)

	)

196 #ifdeà
STM32F4_FAMILY_F10XXX


203 
	~<b¥/¡m32f10xxx_exti.h
>

204 
	#STM32F4_EXTI
 ((vÞ©
¡m32f4_exti
 *è(
STM32F4_BASE
 + 0x40010400))

	)

213 
	~<b¥/¡m32f10xxx_gpio.h
>

214 
	#STM32F4_GPIO
(
i
è((vÞ©
¡m32f4_gpio
 *è(
STM32F4_BASE
 + 0x40010800 + i * 0x400))

	)

215 
	#STM32F4_AFIO
 ((vÞ©
¡m32f4_afio
 *è(
STM32F4_BASE
 + 0x40010000))

	)

224 
	~<b¥/¡m32f10xxx_rcc.h
>

225 
	#STM32F4_RCC
 ((vÞ©
¡m32f4_rcc
 *è(
STM32F4_BASE
 + 0x40021000))

	)

234 
	~<b¥/¡m32_i2c.h
>

235 
	#STM32F4_I2C2
 ((vÞ©
¡m32f4_i2c
 *è(
STM32F4_BASE
 + 0x40005800))

	)

236 
	#STM32F4_I2C1
 ((vÞ©
¡m32f4_i2c
 *è(
STM32F4_BASE
 + 0x40005400))

	)

245 
	~<b¥/¡m32_u§¹.h
>

246 
	#STM32F4_USART_1
 ((vÞ©
¡m32f4_u§¹
 *è(
STM32F4_BASE
 + 0x40013800))

	)

247 
	#STM32F4_USART_2
 ((vÞ©
¡m32f4_u§¹
 *è(
STM32F4_BASE
 + 0x40004400))

	)

248 
	#STM32F4_USART_3
 ((vÞ©
¡m32f4_u§¹
 *è(
STM32F4_BASE
 + 0x40004800))

	)

249 
	#STM32F4_USART_4
 ((vÞ©
¡m32f4_u§¹
 *è(
STM32F4_BASE
 + 0x40004c00))

	)

250 
	#STM32F4_USART_5
 ((vÞ©
¡m32f4_u§¹
 *è(
STM32F4_BASE
 + 0x40005000))

	)

	@src/lib/libbsp/arm/stm32f4/include/stm32f4xxxx_adc.h

15 #iâdeà
LIBBSP_ARM_STM32F4_STM32F4XXXX_ADC_H


16 
	#LIBBSP_ARM_STM32F4_STM32F4XXXX_ADC_H


	)

18 
	~<b¥/uty.h
>

20 
	s¡m32f4_adc_chª_s
 {

21 
ut32_t
 
	m¤
;

22 
	#STM32F4_ADC_SR_OVR
 
	`BSP_BIT32
(5)

23 
	#STM32F4_ADC_SR_STRT
 
	`BSP_BIT32
(4)

24 
	#STM32F4_ADC_SR_JSTRT
 
	`BSP_BIT32
(3)

25 
	#STM32F4_ADC_SR_JEOC
 
	`BSP_BIT32
(2)

26 
	#STM32F4_ADC_SR_EOC
 
	`BSP_BIT32
(1)

27 
	#STM32F4_ADC_SR_AWD
 
	`BSP_BIT32
(0)

28 

	)

29 
ut32_t
 
	mü1
;

30 
	#STM32F4_ADC_CR1_OVRIE
 
	`BSP_BIT32
(26)

31 
	#STM32F4_ADC_CR1_RES
(
v®
è
	`BSP_FLD32
(val, 24, 25)

32 
	#STM32F4_ADC_CR1_RES_GET
(
»g
è
	`BSP_FLD32GET
Ôeg, 24, 25)

	)

33 
	#STM32F4_ADC_CR1_RES_SET
(
»g
, 
v®
è
	`BSP_FLD32SET
Ôeg, v®, 24, 25)

	)

34 
	#ADC_CR1_RES_12BIT
 0

	)

35 
	#ADC_CR1_RES_10BIT
 1

	)

36 
	#ADC_CR1_RES_8BIT
 2

	)

37 
	#ADC_CR1_RES_6BIT
 3

	)

38 
	#STM32F4_ADC_CR1_AWDEN
 
	`BSP_BIT32
(23)

39 
	#STM32F4_ADC_CR1_JAWDEN
 
	`BSP_BIT32
(22)

40 
	#STM32F4_ADC_CR1_DISCNUM
(
v®
è
	`BSP_FLD32
(val, 13, 15)

41 
	#STM32F4_ADC_CR1_DISCNUM_GET
(
»g
è
	`BSP_FLD32GET
Ôeg, 13, 15)

	)

42 
	#STM32F4_ADC_CR1_DISCNUM_SET
(
»g
, 
v®
è
	`BSP_FLD32SET
Ôeg, v®, 13, 15)

	)

43 
	#STM32F4_ADC_CR1_JDISCEN
 
	`BSP_BIT32
(12)

44 
	#STM32F4_ADC_CR1_DISCEN
 
	`BSP_BIT32
(11)

45 
	#STM32F4_ADC_CR1_JAUTO
 
	`BSP_BIT32
(10)

46 
	#STM32F4_ADC_CR1_AWDSGL
 
	`BSP_BIT32
(9)

47 
	#STM32F4_ADC_CR1_SCAN
 
	`BSP_BIT32
(8)

48 
	#STM32F4_ADC_CR1_JEOCIE
 
	`BSP_BIT32
(7)

49 
	#STM32F4_ADC_CR1_AWDIE
 
	`BSP_BIT32
(6)

50 
	#STM32F4_ADC_CR1_EOCIE
 
	`BSP_BIT32
(5)

51 
	#STM32F4_ADC_CR1_AWDCH
(
v®
è
	`BSP_FLD32
(val, 0, 4)

52 
	#STM32F4_ADC_CR1_AWDCH_GET
(
»g
è
	`BSP_FLD32GET
Ôeg, 0, 4)

	)

53 
	#STM32F4_ADC_CR1_AWDCH_SET
(
»g
, 
v®
è
	`BSP_FLD32SET
Ôeg, v®, 0, 4)

	)

55 
ut32_t
 
	mü2
;

56 
	#STM32F4_ADC_CR2_SWSTART
 
	`BSP_BIT32
(30)

57 
	#STM32F4_ADC_CR2_EXTEN
(
v®
è
	`BSP_FLD32
(val, 28, 29)

58 
	#STM32F4_ADC_CR2_EXTEN_GET
(
»g
è
	`BSP_FLD32GET
Ôeg, 28, 29)

	)

59 
	#STM32F4_ADC_CR2_EXTEN_SET
(
»g
, 
v®
è
	`BSP_FLD32SET
Ôeg, v®, 28, 29)

	)

60 
	#STM32F4_ADC_CR2_JEXTEN
(
v®
è
	`BSP_FLD32
(val, 20, 21)

61 
	#STM32F4_ADC_CR2_JEXTEN_GET
(
»g
è
	`BSP_FLD32GET
Ôeg, 20, 21)

	)

62 
	#STM32F4_ADC_CR2_JEXTEN_SET
(
»g
, 
v®
è
	`BSP_FLD32SET
Ôeg, v®, 20, 21)

	)

63 
	#ADC_CR2_TRIGGER_DISABLE
 0

	)

64 
	#ADC_CR2_TRIGGER_RISING
 1

	)

65 
	#ADC_CR2_TRIGGER_FALLING
 2

	)

66 
	#ADC_CR2_TRIGGER_BOTH
 3

	)

67 
	#STM32F4_ADC_CR2_EXTSEL
(
v®
è
	`BSP_FLD32
(val, 24, 27)

68 
	#STM32F4_ADC_CR2_EXTSEL_GET
(
»g
è
	`BSP_FLD32GET
Ôeg, 24, 27)

	)

69 
	#STM32F4_ADC_CR2_EXTSEL_SET
(
»g
, 
v®
è
	`BSP_FLD32SET
Ôeg, v®, 24, 27)

	)

70 
	#ADC_CR2_EVT_TIMER1_CC1
 0x0

	)

71 
	#ADC_CR2_EVT_TIMER1_CC2
 0x1

	)

72 
	#ADC_CR2_EVT_TIMER1_CC3
 0x2

	)

73 
	#ADC_CR2_EVT_TIMER2_CC2
 0x3

	)

74 
	#ADC_CR2_EVT_TIMER2_CC3
 0x4

	)

75 
	#ADC_CR2_EVT_TIMER2_CC4
 0x5

	)

76 
	#ADC_CR2_EVT_TIMER2_TRGO
 0x6

	)

77 
	#ADC_CR2_EVT_TIMER3_CC1
 0x7

	)

78 
	#ADC_CR2_EVT_TIMER3_TRGO
 0x8

	)

79 
	#ADC_CR2_EVT_TIMER4_CC1
 0x9

	)

80 
	#ADC_CR2_EVT_TIMER5_CC1
 0xa

	)

81 
	#ADC_CR2_EVT_TIMER5_CC2
 0xb

	)

82 
	#ADC_CR2_EVT_TIMER5_CC3
 0xc

	)

83 
	#ADC_CR2_EVT_TIMER8_CC1
 0xd

	)

84 
	#ADC_CR2_EVT_TIMER8_TRGO
 0xe

	)

85 
	#ADC_CR2_EVT_EXTI_11
 0xf

	)

86 
	#STM32F4_ADC_CR2_JSWSTART
 
	`BSP_BIT32
(22)

87 
	#STM32F4_ADC_CR2_JEXTSEL
(
v®
è
	`BSP_FLD32
(val, 16, 19)

88 
	#STM32F4_ADC_CR2_JEXTSEL_GET
(
»g
è
	`BSP_FLD32GET
Ôeg, 16, 19)

	)

89 
	#STM32F4_ADC_CR2_JEXTSEL_SET
(
»g
, 
v®
è
	`BSP_FLD32SET
Ôeg, v®, 16, 19)

	)

90 
	#ADC_CR2_JEVT_TIMER1_CC4
 0x0

	)

91 
	#ADC_CR2_JEVT_TIMER1_TRGO
 0x1

	)

92 
	#ADC_CR2_JEVT_TIMER2_CC1
 0x2

	)

93 
	#ADC_CR2_JEVT_TIMER2_TRGO
 0x3

	)

94 
	#ADC_CR2_JEVT_TIMER3_CC2
 0x4

	)

95 
	#ADC_CR2_JEVT_TIMER3_CC4
 0x5

	)

96 
	#ADC_CR2_JEVT_TIMER4_CC1
 0x6

	)

97 
	#ADC_CR2_JEVT_TIMER4_CC2
 0x7

	)

98 
	#ADC_CR2_JEVT_TIMER4_CC3
 0x8

	)

99 
	#ADC_CR2_JEVT_TIMER4_TRGO
 0x9

	)

100 
	#ADC_CR2_JEVT_TIMER5_CC4
 0xa

	)

101 
	#ADC_CR2_JEVT_TIMER5_TRGO
 0xb

	)

102 
	#ADC_CR2_JEVT_TIMER8_CC2
 0xc

	)

103 
	#ADC_CR2_JEVT_TIMER8_CC3
 0xd

	)

104 
	#ADC_CR2_JEVT_TIMER8_CC4
 0xe

	)

105 
	#ADC_CR2_JEVT_EXTI_15
 0xf

	)

106 
	#STM32F4_ADC_CR2_ALIGN
 
	`BSP_BIT32
(11)

107 
	#STM32F4_ADC_CR2_ALIGN_RIGHT
 0

	)

108 
	#STM32F4_ADC_CR2_ALIGN_LEFT
 
STM32F4_ADC_CR2_ALIGN


	)

109 
	#STM32F4_ADC_CR2_EOCS
 
	`BSP_BIT32
(10)

110 
	#STM32F4_ADC_CR2_DDS
 
	`BSP_BIT32
(9)

111 
	#STM32F4_ADC_CR2_DMA
 
	`BSP_BIT32
(8)

112 
	#STM32F4_ADC_CR2_CONT
 
	`BSP_BIT32
(1)

113 
	#STM32F4_ADC_CR2_ADON
 
	`BSP_BIT32
(0)

114 

	)

115 
ut32_t
 
	msm´1
;

116 
	#ADC_SAMPLE_3CYCLE
 0

	)

117 
	#ADC_SAMPLE_15CYCLE
 1

	)

118 
	#ADC_SAMPLE_28CYCLE
 2

	)

119 
	#ADC_SAMPLE_56CYCLE
 3

	)

120 
	#ADC_SAMPLE_84CYCLE
 4

	)

121 
	#ADC_SAMPLE_112CYCLE
 5

	)

122 
	#ADC_SAMPLE_144CYCLE
 6

	)

123 
	#ADC_SAMPLE_480CYCLE
 7

	)

124 
	#STM32F4_ADC_SMP18
(
v®
è
	`BSP_FLD32
(val, 24, 26)

125 
	#STM32F4_ADC_SMP18_GET
(
»g
è
	`BSP_FLD32GET
Ôeg, 24, 26)

	)

126 
	#STM32F4_ADC_SMP18_SET
(
»g
, 
v®
è
	`BSP_FLD32SET
Ôeg, v®, 24, 26)

	)

127 
	#STM32F4_ADC_SMP17
(
v®
è
	`BSP_FLD32
(val, 21, 23)

128 
	#STM32F4_ADC_SMP17_GET
(
»g
è
	`BSP_FLD32GET
Ôeg, 21, 23)

	)

129 
	#STM32F4_ADC_SMP17_SET
(
»g
, 
v®
è
	`BSP_FLD32SET
Ôeg, v®, 21, 23)

	)

130 
	#STM32F4_ADC_SMP16
(
v®
è
	`BSP_FLD32
(val, 18, 20)

131 
	#STM32F4_ADC_SMP16_GET
(
»g
è
	`BSP_FLD32GET
Ôeg, 18, 20)

	)

132 
	#STM32F4_ADC_SMP16_SET
(
»g
, 
v®
è
	`BSP_FLD32SET
Ôeg, v®, 18, 20)

	)

133 
	#STM32F4_ADC_SMP15
(
v®
è
	`BSP_FLD32
(val, 15, 17)

134 
	#STM32F4_ADC_SMP15_GET
(
»g
è
	`BSP_FLD32GET
Ôeg, 15, 17)

	)

135 
	#STM32F4_ADC_SMP15_SET
(
»g
, 
v®
è
	`BSP_FLD32SET
Ôeg, v®, 15, 17)

	)

136 
	#STM32F4_ADC_SMP14
(
v®
è
	`BSP_FLD32
(val, 12, 14)

137 
	#STM32F4_ADC_SMP14_GET
(
»g
è
	`BSP_FLD32GET
Ôeg, 12, 14)

	)

138 
	#STM32F4_ADC_SMP14_SET
(
»g
, 
v®
è
	`BSP_FLD32SET
Ôeg, v®, 12, 14)

	)

139 
	#STM32F4_ADC_SMP13
(
v®
è
	`BSP_FLD32
(val, 9, 11)

140 
	#STM32F4_ADC_SMP13_GET
(
»g
è
	`BSP_FLD32GET
Ôeg, 9, 11)

	)

141 
	#STM32F4_ADC_SMP13_SET
(
»g
, 
v®
è
	`BSP_FLD32SET
Ôeg, v®, 9, 11)

	)

142 
	#STM32F4_ADC_SMP12
(
v®
è
	`BSP_FLD32
(val, 6, 8)

143 
	#STM32F4_ADC_SMP12_GET
(
»g
è
	`BSP_FLD32GET
Ôeg, 6, 8)

	)

144 
	#STM32F4_ADC_SMP12_SET
(
»g
, 
v®
è
	`BSP_FLD32SET
Ôeg, v®, 6, 8)

	)

145 
	#STM32F4_ADC_SMP11
(
v®
è
	`BSP_FLD32
(val, 3, 5)

146 
	#STM32F4_ADC_SMP11_GET
(
»g
è
	`BSP_FLD32GET
Ôeg, 3, 5)

	)

147 
	#STM32F4_ADC_SMP11_SET
(
»g
, 
v®
è
	`BSP_FLD32SET
Ôeg, v®, 3, 5)

	)

148 
	#STM32F4_ADC_SMP10
(
v®
è
	`BSP_FLD32
(val, 0, 2)

149 
	#STM32F4_ADC_SMP10_GET
(
»g
è
	`BSP_FLD32GET
Ôeg, 0, 2)

	)

150 
	#STM32F4_ADC_SMP10_SET
(
»g
, 
v®
è
	`BSP_FLD32SET
Ôeg, v®, 0, 2)

	)

152 
ut32_t
 
	msm´2
;

153 
	#STM32F4_ADC_SMP9
(
v®
è
	`BSP_FLD32
(val, 27, 29)

154 
	#STM32F4_ADC_SMP9_GET
(
»g
è
	`BSP_FLD32GET
Ôeg, 27, 29)

	)

155 
	#STM32F4_ADC_SMP9_SET
(
»g
, 
v®
è
	`BSP_FLD32SET
Ôeg, v®, 27, 29)

	)

156 
	#STM32F4_ADC_SMP8
(
v®
è
	`BSP_FLD32
(val, 24, 26)

157 
	#STM32F4_ADC_SMP8_GET
(
»g
è
	`BSP_FLD32GET
Ôeg, 24, 26)

	)

158 
	#STM32F4_ADC_SMP8_SET
(
»g
, 
v®
è
	`BSP_FLD32SET
Ôeg, v®, 24, 26)

	)

159 
	#STM32F4_ADC_SMP7
(
v®
è
	`BSP_FLD32
(val, 21, 23)

160 
	#STM32F4_ADC_SMP7_GET
(
»g
è
	`BSP_FLD32GET
Ôeg, 21, 23)

	)

161 
	#STM32F4_ADC_SMP7_SET
(
»g
, 
v®
è
	`BSP_FLD32SET
Ôeg, v®, 21, 23)

	)

162 
	#STM32F4_ADC_SMP6
(
v®
è
	`BSP_FLD32
(val, 18, 20)

163 
	#STM32F4_ADC_SMP6_GET
(
»g
è
	`BSP_FLD32GET
Ôeg, 18, 20)

	)

164 
	#STM32F4_ADC_SMP6_SET
(
»g
, 
v®
è
	`BSP_FLD32SET
Ôeg, v®, 18, 20)

	)

165 
	#STM32F4_ADC_SMP5
(
v®
è
	`BSP_FLD32
(val, 15, 17)

166 
	#STM32F4_ADC_SMP5_GET
(
»g
è
	`BSP_FLD32GET
Ôeg, 15, 17)

	)

167 
	#STM32F4_ADC_SMP5_SET
(
»g
, 
v®
è
	`BSP_FLD32SET
Ôeg, v®, 15, 17)

	)

168 
	#STM32F4_ADC_SMP4
(
v®
è
	`BSP_FLD32
(val, 12, 14)

169 
	#STM32F4_ADC_SMP4_GET
(
»g
è
	`BSP_FLD32GET
Ôeg, 12, 14)

	)

170 
	#STM32F4_ADC_SMP4_SET
(
»g
, 
v®
è
	`BSP_FLD32SET
Ôeg, v®, 12, 14)

	)

171 
	#STM32F4_ADC_SMP3
(
v®
è
	`BSP_FLD32
(val, 9, 11)

172 
	#STM32F4_ADC_SMP3_GET
(
»g
è
	`BSP_FLD32GET
Ôeg, 9, 11)

	)

173 
	#STM32F4_ADC_SMP3_SET
(
»g
, 
v®
è
	`BSP_FLD32SET
Ôeg, v®, 9, 11)

	)

174 
	#STM32F4_ADC_SMP2
(
v®
è
	`BSP_FLD32
(val, 6, 8)

175 
	#STM32F4_ADC_SMP2_GET
(
»g
è
	`BSP_FLD32GET
Ôeg, 6, 8)

	)

176 
	#STM32F4_ADC_SMP2_SET
(
»g
, 
v®
è
	`BSP_FLD32SET
Ôeg, v®, 6, 8)

	)

177 
	#STM32F4_ADC_SMP1
(
v®
è
	`BSP_FLD32
(val, 3, 5)

178 
	#STM32F4_ADC_SMP1_GET
(
»g
è
	`BSP_FLD32GET
Ôeg, 3, 5)

	)

179 
	#STM32F4_ADC_SMP1_SET
(
»g
, 
v®
è
	`BSP_FLD32SET
Ôeg, v®, 3, 5)

	)

180 
	#STM32F4_ADC_SMP0
(
v®
è
	`BSP_FLD32
(val, 0, 2)

181 
	#STM32F4_ADC_SMP0_GET
(
»g
è
	`BSP_FLD32GET
Ôeg, 0, 2)

	)

182 
	#STM32F4_ADC_SMP0_SET
(
»g
, 
v®
è
	`BSP_FLD32SET
Ôeg, v®, 0, 2)

	)

184 
ut32_t
 
	mjoä
[4];

185 
	#STM32F4_ADC_JOFFSET
(
v®
è
	`BSP_FLD32
(val, 0, 11)

186 
	#STM32F4_ADC_JOFFSET_GET
(
»g
è
	`BSP_FLD32GET
Ôeg, 0, 11)

	)

187 
	#STM32F4_ADC_JOFFSET_SET
(
»g
, 
v®
è
	`BSP_FLD32SET
Ôeg, v®, 0, 11)

	)

189 
ut32_t
 
	mh
;

190 
	#STM32F4_ADC_HT
(
v®
è
	`BSP_FLD32
(val, 0, 11)

191 
	#STM32F4_ADC_HT_GET
(
»g
è
	`BSP_FLD32GET
Ôeg, 0, 11)

	)

192 
	#STM32F4_ADC_HT_SET
(
»g
, 
v®
è
	`BSP_FLD32SET
Ôeg, v®, 0, 11)

	)

194 
ut32_t
 
	mÉr
;

195 
	#STM32F4_ADC_LT
(
v®
è
	`BSP_FLD32
(val, 0, 11)

196 
	#STM32F4_ADC_LT_GET
(
»g
è
	`BSP_FLD32GET
Ôeg, 0, 11)

	)

197 
	#STM32F4_ADC_LT_SET
(
»g
, 
v®
è
	`BSP_FLD32SET
Ôeg, v®, 0, 11)

	)

199 
ut32_t
 
	msqr
[3];

200 
	#STM32F4_ADC_SQR_L
(
v®
è
	`BSP_FLD32
(val, 20, 23)

201 
	#STM32F4_ADC_SQR_L_GET
(
»g
è
	`BSP_FLD32GET
Ôeg, 20, 23)

	)

202 
	#STM32F4_ADC_SQR_L_SET
(
»g
, 
v®
è
	`BSP_FLD32SET
Ôeg, v®, 20, 23)

	)

204 
ut32_t
 
	mjsqr
;

205 
	#STM32F4_ADC_JSQR_JL
(
v®
è
	`BSP_FLD32
(val, 20, 21)

206 
	#STM32F4_ADC_JSQR_JL_GET
(
»g
è
	`BSP_FLD32GET
Ôeg, 20, 21)

	)

207 
	#STM32F4_ADC_JSQR_JL_SET
(
»g
, 
v®
è
	`BSP_FLD32SET
Ôeg, v®, 20, 21)

	)

208 
	#STM32F4_ADC_JSQR_JSQ4
(
v®
è
	`BSP_FLD32
(val, 15, 19)

209 
	#STM32F4_ADC_JSQR_JSQ4_GET
(
»g
è
	`BSP_FLD32GET
Ôeg, 15, 19)

	)

210 
	#STM32F4_ADC_JSQR_JSQ4_SET
(
»g
, 
v®
è
	`BSP_FLD32SET
Ôeg, v®, 15, 19)

	)

211 
	#STM32F4_ADC_JSQR_JSQ3
(
v®
è
	`BSP_FLD32
(val, 10, 14)

212 
	#STM32F4_ADC_JSQR_JSQ3_GET
(
»g
è
	`BSP_FLD32GET
Ôeg, 10, 14)

	)

213 
	#STM32F4_ADC_JSQR_JSQ3_SET
(
»g
, 
v®
è
	`BSP_FLD32SET
Ôeg, v®, 10, 14)

	)

214 
	#STM32F4_ADC_JSQR_JSQ2
(
v®
è
	`BSP_FLD32
(val, 5, 9)

215 
	#STM32F4_ADC_JSQR_JSQ2_GET
(
»g
è
	`BSP_FLD32GET
Ôeg, 5, 9)

	)

216 
	#STM32F4_ADC_JSQR_JSQ2_SET
(
»g
, 
v®
è
	`BSP_FLD32SET
Ôeg, v®, 5, 9)

	)

217 
	#STM32F4_ADC_JSQR_JSQ1
(
v®
è
	`BSP_FLD32
(val, 0, 4)

218 
	#STM32F4_ADC_JSQR_JSQ1_GET
(
»g
è
	`BSP_FLD32GET
Ôeg, 0, 4)

	)

219 
	#STM32F4_ADC_JSQR_JSQ1_SET
(
»g
, 
v®
è
	`BSP_FLD32SET
Ôeg, v®, 0, 4)

	)

221 
ut32_t
 
	mjdr
[4];

222 
	#STM32F4_ADC_JDATA
(
v®
è
	`BSP_FLD32
(val, 0, 15)

223 
	#STM32F4_ADC_JDATA_GET
(
»g
è
	`BSP_FLD32GET
Ôeg, 0, 15)

	)

224 
	#STM32F4_ADC_JDATA_SET
(
»g
, 
v®
è
	`BSP_FLD32SET
Ôeg, v®, 0, 15)

	)

226 
ut32_t
 
	mdr
;

227 
	#STM32F4_ADC_DATA
(
v®
è
	`BSP_FLD32
(val, 0, 15)

228 
	#STM32F4_ADC_DATA_GET
(
»g
è
	`BSP_FLD32GET
Ôeg, 0, 15)

	)

229 
	#STM32F4_ADC_DATA_SET
(
»g
, 
v®
è
	`BSP_FLD32SET
Ôeg, v®, 0, 15)

	)

231 } 
__©ibu__
 ((
·cked
));

232 
¡m32f4_adc_chª_s
 
	t¡m32f4_adc_chª
;

234 
	s¡m32f4_adc_com_s
 {

235 
ut32_t
 
	mc¤
;

236 
	#STM32F4_ADC_CSR_OVR3
 
	`BSP_BIT32
(21)

237 
	#STM32F4_ADC_CSR_STRT3
 
	`BSP_BIT32
(20)

238 
	#STM32F4_ADC_CSR_JSTRT3
 
	`BSP_BIT32
(19)

239 
	#STM32F4_ADC_CSR_JEOC3
 
	`BSP_BIT32
(18)

240 
	#STM32F4_ADC_CSR_EOC3
 
	`BSP_BIT32
(17)

241 
	#STM32F4_ADC_CSR_AWD3
 
	`BSP_BIT32
(16)

242 
	#STM32F4_ADC_CSR_OVR2
 
	`BSP_BIT32
(13)

243 
	#STM32F4_ADC_CSR_STRT2
 
	`BSP_BIT32
(12)

244 
	#STM32F4_ADC_CSR_JSTRT2
 
	`BSP_BIT32
(11)

245 
	#STM32F4_ADC_CSR_JEOC2
 
	`BSP_BIT32
(10)

246 
	#STM32F4_ADC_CSR_EOC2
 
	`BSP_BIT32
(9)

247 
	#STM32F4_ADC_CSR_AWD2
 
	`BSP_BIT32
(8)

248 
	#STM32F4_ADC_CSR_OVR1
 
	`BSP_BIT32
(5)

249 
	#STM32F4_ADC_CSR_STRT1
 
	`BSP_BIT32
(4)

250 
	#STM32F4_ADC_CSR_JSTRT1
 
	`BSP_BIT32
(3)

251 
	#STM32F4_ADC_CSR_JEOC1
 
	`BSP_BIT32
(2)

252 
	#STM32F4_ADC_CSR_EOC1
 
	`BSP_BIT32
(1)

253 
	#STM32F4_ADC_CSR_AWD1
 
	`BSP_BIT32
(0)

254 

	)

255 
ut32_t
 
	mcü
;

256 
	#STM32F4_ADC_CCR_TSVREFE
 
	`BSP_BIT32
(23)

257 
	#STM32F4_ADC_CCR_VBATE
 
	`BSP_BIT32
(22)

258 
	#STM32F4_ADC_CCR_ADCPRE
(
v®
è
	`BSP_FLD32
(val, 16, 17)

259 
	#STM32F4_ADC_CCR_ADCPRE_GET
(
»g
è
	`BSP_FLD32GET
Ôeg, 16, 17)

	)

260 
	#STM32F4_ADC_CCR_ADCPRE_SET
(
»g
, 
v®
è
	`BSP_FLD32SET
Ôeg, v®, 16, 17)

	)

261 
	#ADC_ADCPRE_PCLK2_2
 0

	)

262 
	#ADC_ADCPRE_PCLK2_4
 1

	)

263 
	#ADC_ADCPRE_PCLK2_6
 2

	)

264 
	#ADC_ADCPRE_PCLK2_8
 3

	)

265 
	#STM32F4_ADC_CCR_DMA
(
v®
è
	`BSP_FLD32
(val, 14, 15)

266 
	#STM32F4_ADC_CCR_DMA_GET
(
»g
è
	`BSP_FLD32GET
Ôeg, 14, 15)

	)

267 
	#STM32F4_ADC_CCR_DMA_SET
(
»g
, 
v®
è
	`BSP_FLD32SET
Ôeg, v®, 14, 15)

	)

268 
	#ADC_DMA_DISABLE
 0

	)

269 
	#ADC_DMA_MODE1
 1

	)

270 
	#ADC_DMA_MODE2
 2

	)

271 
	#ADC_DMA_MODE3
 3

	)

272 
	#STM32F4_ADC_CCR_DDS
 
	`BSP_BIT32
(13)

273 
	#STM32F4_ADC_CCR_DELAY
(
v®
è
	`BSP_FLD32
(val, 8, 11)

274 
	#STM32F4_ADC_CCR_DELAY_GET
(
»g
è
	`BSP_FLD32GET
Ôeg, 8, 11)

	)

275 
	#STM32F4_ADC_CCR_DELAY_SET
(
»g
, 
v®
è
	`BSP_FLD32SET
Ôeg, v®, 8, 11)

	)

276 
	#ADC_DELAY_5T
 0

	)

277 
	#ADC_DELAY_6T
 1

	)

278 
	#ADC_DELAY_7T
 2

	)

279 
	#ADC_DELAY_8T
 3

	)

280 
	#ADC_DELAY_9T
 4

	)

281 
	#ADC_DELAY_10T
 5

	)

282 
	#ADC_DELAY_11T
 6

	)

283 
	#ADC_DELAY_12T
 7

	)

284 
	#ADC_DELAY_13T
 8

	)

285 
	#ADC_DELAY_14T
 9

	)

286 
	#ADC_DELAY_15T
 10

	)

287 
	#ADC_DELAY_16T
 11

	)

288 
	#ADC_DELAY_17T
 12

	)

289 
	#ADC_DELAY_18T
 13

	)

290 
	#ADC_DELAY_19T
 14

	)

291 
	#ADC_DELAY_20T
 15

	)

292 
	#STM32F4_ADC_CCR_MULTI
(
v®
è
	`BSP_FLD32
(val, 0, 4)

293 
	#STM32F4_ADC_CCR_MULTI_GET
(
»g
è
	`BSP_FLD32GET
Ôeg, 0, 4)

	)

294 
	#STM32F4_ADC_CCR_MULTI_SET
(
»g
, 
v®
è
	`BSP_FLD32SET
Ôeg, v®, 0, 4)

	)

295 
	#ADC_MULTI_INDEPENDENT
 0x00

	)

296 
	#ADC_MULTI_DUAL_REG_INJ
 0x01

	)

297 
	#ADC_MULTI_DUAL_REG_ALT
 0x02

	)

298 
	#ADC_MULTI_DUAL_INJ
 0x05

	)

299 
	#ADC_MULTI_DUAL_REG
 0x06

	)

300 
	#ADC_MULTI_DUAL_INTRL
 0x07

	)

301 
	#ADC_MULTI_DUAL_ALT_TRIG
 0x09

	)

302 
	#ADC_MULTI_TRIPLE_REG_INJ
 0x11

	)

303 
	#ADC_MULTI_TRIPLE_REG_ALT
 0x12

	)

304 
	#ADC_MULTI_TRIPLE_INJ
 0x15

	)

305 
	#ADC_MULTI_TRIPLE_REG
 0x16

	)

306 
	#ADC_MULTI_TRIPLE_INTRL
 0x17

	)

307 
	#ADC_MULTI_TRIPLE_ALT_TRIG
 0x19

	)

309 
ut32_t
 
	mcdr
;

310 
	#STM32F4_ADC_CDR_DATA2
(
v®
è
	`BSP_FLD32
(val, 16, 31)

311 
	#STM32F4_ADC_CDR_DATA2_GET
(
»g
è
	`BSP_FLD32GET
Ôeg, 16, 31)

	)

312 
	#STM32F4_ADC_CDR_DATA2_SET
(
»g
, 
v®
è
	`BSP_FLD32SET
Ôeg, v®, 16, 31)

	)

313 
	#STM32F4_ADC_CDR_DATA1
(
v®
è
	`BSP_FLD32
(val, 0, 15)

314 
	#STM32F4_ADC_CDR_DATA1_GET
(
»g
è
	`BSP_FLD32GET
Ôeg, 0, 15)

	)

315 
	#STM32F4_ADC_CDR_DATA1_SET
(
»g
, 
v®
è
	`BSP_FLD32SET
Ôeg, v®, 0, 15)

	)

317 } 
__©ibu__
 ((
·cked
));

318 
¡m32f4_adc_com_s
 
	t¡m32f4_adc_com
;

	@src/lib/libbsp/arm/stm32f4/include/stm32f4xxxx_exti.h

15 #iâdeà
LIBBSP_ARM_STM32F4_STM32F4XXXX_EXTI_H


16 
	#LIBBSP_ARM_STM32F4_STM32F4XXXX_EXTI_H


	)

18 
	~<b¥/uty.h
>

20 
	#EXTI_PORTA
 0

	)

21 
	#EXTI_PORTB
 1

	)

22 
	#EXTI_PORTC
 2

	)

23 
	#EXTI_PORTD
 3

	)

24 
	#EXTI_PORTE
 4

	)

25 
	#EXTI_PORTF
 5

	)

26 
	#EXTI_PORTG
 6

	)

27 
	#EXTI_PORTH
 7

	)

28 
	#EXTI_PORTI
 8

	)

30 
	#STM32F4_EXTI_LINE22
 
	`BSP_BIT32
(21)

	)

31 
	#STM32F4_EXTI_LINE21
 
	`BSP_BIT32
(21)

	)

32 
	#STM32F4_EXTI_LINE20
 
	`BSP_BIT32
(20)

	)

33 
	#STM32F4_EXTI_LINE19
 
	`BSP_BIT32
(19)

	)

34 
	#STM32F4_EXTI_LINE18
 
	`BSP_BIT32
(18)

	)

35 
	#STM32F4_EXTI_LINE17
 
	`BSP_BIT32
(17)

	)

36 
	#STM32F4_EXTI_LINE16
 
	`BSP_BIT32
(16)

	)

37 
	#STM32F4_EXTI_LINE15
 
	`BSP_BIT32
(15)

	)

38 
	#STM32F4_EXTI_LINE14
 
	`BSP_BIT32
(14)

	)

39 
	#STM32F4_EXTI_LINE13
 
	`BSP_BIT32
(13)

	)

40 
	#STM32F4_EXTI_LINE12
 
	`BSP_BIT32
(12)

	)

41 
	#STM32F4_EXTI_LINE11
 
	`BSP_BIT32
(11)

	)

42 
	#STM32F4_EXTI_LINE10
 
	`BSP_BIT32
(10)

	)

43 
	#STM32F4_EXTI_LINE9
 
	`BSP_BIT32
(9)

	)

44 
	#STM32F4_EXTI_LINE8
 
	`BSP_BIT32
(8)

	)

45 
	#STM32F4_EXTI_LINE7
 
	`BSP_BIT32
(7)

	)

46 
	#STM32F4_EXTI_LINE6
 
	`BSP_BIT32
(6)

	)

47 
	#STM32F4_EXTI_LINE5
 
	`BSP_BIT32
(5)

	)

48 
	#STM32F4_EXTI_LINE4
 
	`BSP_BIT32
(4)

	)

49 
	#STM32F4_EXTI_LINE3
 
	`BSP_BIT32
(3)

	)

50 
	#STM32F4_EXTI_LINE2
 
	`BSP_BIT32
(2)

	)

51 
	#STM32F4_EXTI_LINE1
 
	`BSP_BIT32
(1)

	)

52 
	#STM32F4_EXTI_LINE0
 
	`BSP_BIT32
(0)

	)

54 
	s¡m32f4_exti_s
 {

55 
ut32_t
 
	mimr
;

56 
ut32_t
 
	memr
;

57 
ut32_t
 
	m¹¤
;

58 
ut32_t
 
	má¤
;

59 
ut32_t
 
	mswr
;

60 
ut32_t
 
	m´
;

61 } 
__©ibu__
 ((
·cked
));

62 
¡m32f4_exti_s
 
	t¡m32f4_exti
;

	@src/lib/libbsp/arm/stm32f4/include/stm32f4xxxx_flash.h

15 #iâdeà
LIBBSP_ARM_STM32F4_STM32F4XXXX_FLASH_H


16 
	#LIBBSP_ARM_STM32F4_STM32F4XXXX_FLASH_H


	)

18 
	~<b¥/uty.h
>

20 
	s¡m32f4_æash_s
 {

22 
ut32_t
 
	maü
;

23 
	#STM32F4_FLASH_ACR_DCRST
 
	`BSP_BIT32
(12)

24 
	#STM32F4_FLASH_ACR_ICRST
 
	`BSP_BIT32
(11)

25 
	#STM32F4_FLASH_ACR_DCEN
 
	`BSP_BIT32
(10)

26 
	#STM32F4_FLASH_ACR_ICEN
 
	`BSP_BIT32
(9)

27 
	#STM32F4_FLASH_ACR_PRFTEN
 
	`BSP_BIT32
(8)

28 
	#STM32F4_FLASH_ACR_LATENCY
(
v®
è
	`BSP_FLD32
(val, 0, 2)

29 
	#STM32F4_FLASH_ACR_LATENCY_GET
(
»g
è
	`BSP_FLD32GET
Ôeg, 0, 2)

	)

30 
	#STM32F4_FLASH_ACR_LATENCY_SET
(
»g
, 
v®
è
	`BSP_FLD32SET
Ôeg, v®, 0, 2)

	)

32 
ut32_t
 
	mkeyr
;

33 
	#STM32F4_FLASH_KEYR_KEY1
 0x45670123

	)

34 
	#STM32F4_FLASH_KEYR_KEY2
 0xCDEF89AB

	)

36 
ut32_t
 
	mÝtkeyr
;

37 
	#STM32F4_FLASH_OPTKEYR_OPTKEY1
 0x08192A3B

	)

38 
	#STM32F4_FLASH_OPTKEYR_OPTKEY2
 0x4C5D6E7F

	)

40 
ut32_t
 
	m¤
;

41 
	#STM32F4_FLASH_SR_BSY
 
	`BSP_BIT32
(16)

42 
	#STM32F4_FLASH_SR_PGSERR
 
	`BSP_BIT32
(7)

43 
	#STM32F4_FLASH_SR_PGPERR
 
	`BSP_BIT32
(6)

44 
	#STM32F4_FLASH_SR_PGAERR
 
	`BSP_BIT32
(5)

45 
	#STM32F4_FLASH_SR_WRPERR
 
	`BSP_BIT32
(4)

46 
	#STM32F4_FLASH_SR_OPERR
 
	`BSP_BIT32
(1)

47 
	#STM32F4_FLASH_SR_EOP
 
	`BSP_BIT32
(0)

48 

	)

49 
ut32_t
 
	mü
;

50 
	#STM32F4_FLASH_CR_LOCK
 
	`BSP_BIT32
(31)

51 
	#STM32F4_FLASH_CR_ERRIE
 
	`BSP_BIT32
(25)

52 
	#STM32F4_FLASH_CR_EOPIE
 
	`BSP_BIT32
(24)

53 
	#STM32F4_FLASH_CR_STRT
 
	`BSP_BIT32
(16)

54 
	#STM32F4_FLASH_CR_PSIZE
(
v®
è
	`BSP_FLD32
(val, 8, 9)

55 
	#STM32F4_FLASH_CR_PSIZE_GET
(
»g
è
	`BSP_FLD32GET
Ôeg, 8, 9)

	)

56 
	#STM32F4_FLASH_CR_PSIZE_SET
(
»g
, 
v®
è
	`BSP_FLD32SET
Ôeg, v®, 8, 9)

	)

57 
	#STM32F4_FLASH_CR_SNB
 
	`BSP_FLD32
(
v®
, 3, 6)

58 
	#STM32F4_FLASH_CR_SNB_GET
(
»g
è
	`BSP_FLD32GET
Ôeg, 3, 6)

	)

59 
	#STM32F4_FLASH_CR_SNB_SET
(
»g
, 
v®
è
	`BSP_FLD32SET
Ôeg, v®, 3, 6)

	)

60 
	#STM32F4_FLASH_CR_MER
 
	`BSP_BIT32
(2)

61 
	#STM32F4_FLASH_CR_SER
 
	`BSP_BIT32
(1)

62 
	#STM32F4_FLASH_CR_PG
 
	`BSP_BIT32
(0)

63 

	)

64 
ut32_t
 
	mÝtü
;

65 
	#STM32F4_FLASH_OPTCR_NWRP
(
v®
è
	`BSP_FLD32
(val, 16, 27)

66 
	#STM32F4_FLASH_OPTCR_NWRP_GET
(
»g
è
	`BSP_FLD32GET
Ôeg, 16, 27)

	)

67 
	#STM32F4_FLASH_OPTCR_NWRP_SET
(
»g
, 
v®
è
	`BSP_FLD32SET
Ôeg, v®, 16, 27)

	)

68 
	#STM32F4_FLASH_OPTCR_RDP
(
v®
è
	`BSP_FLD32
(val, 8, 15)

69 
	#STM32F4_FLASH_OPTCR_RDP_GET
(
»g
è
	`BSP_FLD32GET
Ôeg, 8, 15)

	)

70 
	#STM32F4_FLASH_OPTCR_RDP_SET
(
»g
, 
v®
è
	`BSP_FLD32SET
Ôeg, v®, 8, 15)

	)

71 
	#STM32F4_FLASH_OPTCR_USER
(
v®
è
	`BSP_FLD32
(val, 5, 7)

72 
	#STM32F4_FLASH_OPTCR_USER_GET
(
»g
è
	`BSP_FLD32GET
Ôeg, 5, 7)

	)

73 
	#STM32F4_FLASH_OPTCR_USER_SET
(
»g
, 
v®
è
	`BSP_FLD32SET
Ôeg, v®, 5, 7)

	)

74 
	#STM32F4_FLASH_OPTCR_BOR_LEVEL
(
v®
è
	`BSP_FLD32
(val, 2, 3)

75 
	#STM32F4_FLASH_OPTCR_BOR_LEVEL_GET
(
»g
è
	`BSP_FLD32GET
Ôeg, 2, 3)

	)

76 
	#STM32F4_FLASH_OPTCR_BOR_LEVEL_SET
(
»g
, 
v®
è
	`BSP_FLD32SET
Ôeg, v®, 2, 3)

	)

77 
	#STM32F4_FLASH_CR_OPTSTRT
 
	`BSP_BIT32
(1)

78 
	#STM32F4_FLASH_CR_OPTLOCK
 
	`BSP_BIT32
(0)

79 

	)

80 } 
__©ibu__
 ((
·cked
));

81 
¡m32f4_æash_s
 
	t¡m32f4_æash
;

	@src/lib/libbsp/arm/stm32f4/include/stm32f4xxxx_gpio.h

21 #iâdeà
LIBBSP_ARM_STM32F4_STM32F4XXXX_GPIO_H


22 
	#LIBBSP_ARM_STM32F4_STM32F4XXXX_GPIO_H


	)

24 
	~<b¥/uty.h
>

27 
ut32_t
 
	mmod
;

28 
ut32_t
 
	mÙy³r
;

29 
ut32_t
 
	mo¥dr
;

30 
ut32_t
 
	mpupdr
;

31 
ut32_t
 
	midr
;

32 
ut32_t
 
	modr
;

33 
ut32_t
 
	mb¤r
;

34 
ut32_t
 
	mlckr
;

35 
ut32_t
 
	maä
 [2];

36 
ut32_t
 
	m»£rved_28
 [246];

37 } 
	t¡m32f4_gpio
;

	@src/lib/libbsp/arm/stm32f4/include/stm32f4xxxx_otgfs.h

15 #iâdeà
LIBBSP_ARM_STM32F4_STM32F4XXXX_OTGFS_H


16 
	#LIBBSP_ARM_STM32F4_STM32F4XXXX_OTGFS_H


	)

18 
	~<b¥/uty.h
>

20 
	#USB_OTG_NUM_EPS
 4

	)

21 
	#USB_OTG_MAX_TX_FIFOS
 4

	)

23 
	#USB_FIFO_BASE
 0x1000

	)

24 
	#USB_FIFO_OFFS
 0x1000

	)

26 
	s¡m32f4_Ùgfs_s
 {

27 
ut32_t
 
	mgÙgùl
;

28 
	#STM32F4_OTGFS_GOTGCTL_BSVLD
 
	`BSP_BIT32
(19)

29 
	#STM32F4_OTGFS_GOTGCTL_ASVLD
 
	`BSP_BIT32
(18)

30 
	#STM32F4_OTGFS_GOTGCTL_DBCT
 
	`BSP_BIT32
(17)

31 
	#STM32F4_OTGFS_GOTGCTL_CIDSTS
 
	`BSP_BIT32
(16)

32 
	#STM32F4_OTGFS_GOTGCTL_DHNPEN
 
	`BSP_BIT32
(11)

33 
	#STM32F4_OTGFS_GOTGCTL_HSHNPEN
 
	`BSP_BIT32
(10)

34 
	#STM32F4_OTGFS_GOTGCTL_HNPRQ
 
	`BSP_BIT32
(9)

35 
	#STM32F4_OTGFS_GOTGCTL_HNGSCS
 
	`BSP_BIT32
(8)

36 
	#STM32F4_OTGFS_GOTGCTL_SRQ
 
	`BSP_BIT32
(1)

37 
	#STM32F4_OTGFS_GOTGCTL_SRQSCS
 
	`BSP_BIT32
(0)

38 

	)

39 
ut32_t
 
	mgÙgt
;

40 
	#STM32F4_OTGFS_GOTGINT_DBCDNE
 
	`BSP_BIT32
(19)

41 
	#STM32F4_OTGFS_GOTGINT_ADTOCHG
 
	`BSP_BIT32
(18)

42 
	#STM32F4_OTGFS_GOTGINT_HNGDET
 
	`BSP_BIT32
(17)

43 
	#STM32F4_OTGFS_GOTGINT_HNSSCHG
 
	`BSP_BIT32
(9)

44 
	#STM32F4_OTGFS_GOTGINT_SRSSCHG
 
	`BSP_BIT32
(8)

45 
	#STM32F4_OTGFS_GOTGINT_SEDET
 
	`BSP_BIT32
(2)

46 

	)

47 
ut32_t
 
	mgahbcfg
;

48 
	#STM32F4_OTGFS_GAHBCFG_PTXFELVL
 
	`BSP_BIT32
(8)

49 
	#STM32F4_OTGFS_GAHBCFG_TXFELVL
 
	`BSP_BIT32
(7)

50 
	#STM32F4_OTGFS_GAHBCFG_GINTMSK
 
	`BSP_BIT32
(0)

51 

	)

52 
ut32_t
 
	mgusbcfg
;

53 
	#STM32F4_OTGFS_GUSBCFG_CTXPKT
 
	`BSP_BIT32
(31)

54 
	#STM32F4_OTGFS_GUSBCFG_FDMOD
 
	`BSP_BIT32
(30)

55 
	#STM32F4_OTGFS_GUSBCFG_FHMOD
 
	`BSP_BIT32
(29)

56 
	#STM32F4_OTGFS_GUSBCFG_TRDT
(
v®
è
	`BSP_FLD32
(val, 10, 13)

57 
	#STM32F4_OTGFS_GUSBCFG_TRDT_GET
(
»g
è
	`BSP_FLD32GET
Ôeg, 10, 13)

	)

58 
	#STM32F4_OTGFS_GUSBCFG_TRDT_SET
(
»g
, 
v®
è
	`BSP_FLD32SET
Ôeg, v®, 10, 13)

	)

59 
	#STM32F4_OTGFS_GUSBCFG_HNPCAP
 
	`BSP_BIT32
(9)

60 
	#STM32F4_OTGFS_GUSBCFG_SRPCAP
 
	`BSP_BIT32
(8)

61 
	#STM32F4_OTGFS_GUSBCFG_PHYSEL
 
	`BSP_BIT32
(6)

62 
	#STM32F4_OTGFS_GUSBCFG_TOCAL
(
v®
è
	`BSP_FLD32
(val, 0, 2)

63 
	#STM32F4_OTGFS_GUSBCFG_TOCAL_GET
(
»g
è
	`BSP_FLD32GET
Ôeg, 0, 2)

	)

64 
	#STM32F4_OTGFS_GUSBCFG_TOCAL_SET
(
»g
, 
v®
è
	`BSP_FLD32SET
Ôeg, v®, 0, 2)

	)

66 
ut32_t
 
	mgr¡ùl
;

67 
	#STM32F4_OTGFS_GRSTCTL_AHBIDL
 
	`BSP_BIT32
(31)

68 
	#STM32F4_OTGFS_GRSTCTL_TXFNUM
(
v®
è
	`BSP_FLD32
(val, 6, 10)

69 
	#STM32F4_OTGFS_GRSTCTL_TXFNUM_GET
(
»g
è
	`BSP_FLD32GET
Ôeg, 6, 10)

	)

70 
	#STM32F4_OTGFS_GRSTCTL_TXFNUM_SET
(
»g
, 
v®
è
	`BSP_FLD32SET
Ôeg, v®, 6, 10)

	)

71 
	#STM32F4_OTGFS_GRSTCTL_TXFNUM_ALL
 
	`STM32F4_OTGFS_GRSTCTL_TXFNUM
(0x10)

	)

72 
	#STM32F4_OTGFS_GRSTCTL_TXFFLSH
 
	`BSP_BIT32
(5)

73 
	#STM32F4_OTGFS_GRSTCTL_RXFFLSH
 
	`BSP_BIT32
(4)

74 
	#STM32F4_OTGFS_GRSTCTL_FCRST
 
	`BSP_BIT32
(2)

75 
	#STM32F4_OTGFS_GRSTCTL_HSRST
 
	`BSP_BIT32
(1)

76 
	#STM32F4_OTGFS_GRSTCTL_CSRST
 
	`BSP_BIT32
(0)

77 

	)

78 
ut32_t
 
	mgt¡s
;

79 
	#STM32F4_OTGFS_GINTSTS_WKUPINT
 
	`BSP_BIT32
(31)

80 
	#STM32F4_OTGFS_GINTSTS_SRQINT
 
	`BSP_BIT32
(30)

81 
	#STM32F4_OTGFS_GINTSTS_DISCINT
 
	`BSP_BIT32
(29)

82 
	#STM32F4_OTGFS_GINTSTS_CIDSCHG
 
	`BSP_BIT32
(28)

83 
	#STM32F4_OTGFS_GINTSTS_PTXFE
 
	`BSP_BIT32
(26)

84 
	#STM32F4_OTGFS_GINTSTS_HCINT
 
	`BSP_BIT32
(25)

85 
	#STM32F4_OTGFS_GINTSTS_HPRTINT
 
	`BSP_BIT32
(24)

86 
	#STM32F4_OTGFS_GINTSTS_IPXFR
 
	`BSP_BIT32
(21)

87 
	#STM32F4_OTGFS_GINTSTS_IISOOXFR
 
	`BSP_BIT32
(21)

88 
	#STM32F4_OTGFS_GINTSTS_IISOIXFR
 
	`BSP_BIT32
(20)

89 
	#STM32F4_OTGFS_GINTSTS_OEPINT
 
	`BSP_BIT32
(19)

90 
	#STM32F4_OTGFS_GINTSTS_IEPINT
 
	`BSP_BIT32
(18)

91 
	#STM32F4_OTGFS_GINTSTS_EOPF
 
	`BSP_BIT32
(15)

92 
	#STM32F4_OTGFS_GINTSTS_ISOODRP
 
	`BSP_BIT32
(14)

93 
	#STM32F4_OTGFS_GINTSTS_ENUMDNE
 
	`BSP_BIT32
(13)

94 
	#STM32F4_OTGFS_GINTSTS_USBRST
 
	`BSP_BIT32
(12)

95 
	#STM32F4_OTGFS_GINTSTS_USBSUSP
 
	`BSP_BIT32
(11)

96 
	#STM32F4_OTGFS_GINTSTS_ESUSP
 
	`BSP_BIT32
(10)

97 
	#STM32F4_OTGFS_GINTSTS_GONAKEFF
 
	`BSP_BIT32
(7)

98 
	#STM32F4_OTGFS_GINTSTS_GINAKEFF
 
	`BSP_BIT32
(6)

99 
	#STM32F4_OTGFS_GINTSTS_NPTXFE
 
	`BSP_BIT32
(5)

100 
	#STM32F4_OTGFS_GINTSTS_RXFLVL
 
	`BSP_BIT32
(4)

101 
	#STM32F4_OTGFS_GINTSTS_SOF
 
	`BSP_BIT32
(3)

102 
	#STM32F4_OTGFS_GINTSTS_OTGINT
 
	`BSP_BIT32
(2)

103 
	#STM32F4_OTGFS_GINTSTS_MMIS
 
	`BSP_BIT32
(1)

104 
	#STM32F4_OTGFS_GINTSTS_CMOD
 
	`BSP_BIT32
(0)

105 

	)

106 
ut32_t
 
	mgtmsk
;

108 
ut32_t
 
	mgrx¡¤
;

110 
ut32_t
 
	mgrx¡¥
;

111 
	#STM32F4_OTGFS_GRXSTSP_FRMNUM
(
v®
è
	`BSP_FLD32
(val, 21, 24)

112 
	#STM32F4_OTGFS_GRXSTSP_FRMNUM_GET
(
»g
è
	`BSP_FLD32GET
Ôeg, 21, 24)

	)

113 
	#STM32F4_OTGFS_GRXSTSP_FRMNUM_SET
(
»g
, 
v®
è
	`BSP_FLD32SET
Ôeg, v®, 21, 24)

	)

114 
	#STM32F4_OTGFS_GRXSTSP_PKTSTS
(
v®
è
	`BSP_FLD32
(val, 17, 20)

115 
	#STM32F4_OTGFS_GRXSTSP_PKTSTS_GET
(
»g
è
	`BSP_FLD32GET
Ôeg, 17, 20)

	)

116 
	#STM32F4_OTGFS_GRXSTSP_PKTSTS_SET
(
»g
, 
v®
è
	`BSP_FLD32SET
Ôeg, v®, 17, 20)

	)

117 
	#PKTSTS_IN_DATA
 (0x2)

	)

118 
	#PKTSTS_IN_COMPLETE
 (0x3)

	)

119 
	#PKTSTS_TOGGLE_ERR
 (0x5)

	)

120 
	#PKTSTS_HALTED
 (0x7)

	)

121 
	#PKTSTS_OUTNAK
 (0x1)

	)

122 
	#PKTSTS_OUT_DATA
 (0x2)

	)

123 
	#PKTSTS_OUT_COMPLETE
 (0x3)

	)

124 
	#PKTSTS_SETUP_COMPLETE
 (0x4)

	)

125 
	#PKTSTS_SETUP_DATA
 (0x6)

	)

126 
	#STM32F4_OTGFS_GRXSTSP_DPIG
(
v®
è
	`BSP_FLD32
(val, 15, 16)

127 
	#STM32F4_OTGFS_GRXSTSP_DPID_GET
(
»g
è
	`BSP_FLD32GET
Ôeg, 15, 16)

	)

128 
	#STM32F4_OTGFS_GRXSTSP_DPID_SET
(
»g
, 
v®
è
	`BSP_FLD32SET
Ôeg, v®, 15, 16)

	)

129 
	#STM32F4_OTGFS_GRXSTSP_DPID_DATA0
 
	`STM32F4_OTGFS_GRXSTSP_PKTSTS
(0x0)

	)

130 
	#STM32F4_OTGFS_GRXSTSP_DPID_DATA1
 
	`STM32F4_OTGFS_GRXSTSP_PKTSTS
(0x1)

	)

131 
	#STM32F4_OTGFS_GRXSTSP_DPID_DATA2
 
	`STM32F4_OTGFS_GRXSTSP_PKTSTS
(0x2)

	)

132 
	#STM32F4_OTGFS_GRXSTSP_DPID_MDATA0
 
	`STM32F4_OTGFS_GRXSTSP_PKTSTS
(0x3)

	)

133 
	#STM32F4_OTGFS_GRXSTSP_BCNT
(
v®
è
	`BSP_FLD32
(val, 4, 14)

134 
	#STM32F4_OTGFS_GRXSTSP_BCNT_GET
(
»g
è
	`BSP_FLD32GET
Ôeg, 4, 14)

	)

135 
	#STM32F4_OTGFS_GRXSTSP_BCNT_SET
(
»g
, 
v®
è
	`BSP_FLD32SET
Ôeg, v®, 4, 14)

	)

136 
	#STM32F4_OTGFS_GRXSTSP_CHNUM
(
v®
è
	`BSP_FLD32
(val, 0, 3)

137 
	#STM32F4_OTGFS_GRXSTSP_CHNUM_GET
(
»g
è
	`BSP_FLD32GET
Ôeg, 0, 3)

	)

138 
	#STM32F4_OTGFS_GRXSTSP_CHNUM_SET
(
»g
, 
v®
è
	`BSP_FLD32SET
Ôeg, v®, 0, 3)

	)

139 
	#STM32F4_OTGFS_GRXSTSP_EPNUM
(
v®
è
	`BSP_FLD32
(val, 0, 3)

140 
	#STM32F4_OTGFS_GRXSTSP_EPNUM_GET
(
»g
è
	`BSP_FLD32GET
Ôeg, 0, 3)

	)

141 
	#STM32F4_OTGFS_GRXSTSP_EPNUM_SET
(
»g
, 
v®
è
	`BSP_FLD32SET
Ôeg, v®, 0, 3)

	)

143 
ut32_t
 
	mgrxfsiz
;

144 
	#STM32F4_OTGFS_GRXFSIZ_RXFD
(
v®
è
	`BSP_FLD32
(v®, 0, 15)

	)

145 
	#STM32F4_OTGFS_GRXFSIZ_RXFD_GET
(
»g
è
	`BSP_FLD32GET
Ôeg, 0, 15)

	)

146 
	#STM32F4_OTGFS_GRXFSIZ_RXFD_SET
(
»g
, 
v®
è
	`BSP_FLD32SET
Ôeg, v®, 0, 15)

	)

147 
	#STM32F4_OTGFS_GRXFSIZ_RXFD_MIN
 16

	)

148 
	#STM32F4_OTGFS_GRXFSIZ_RXFD_MAX
 256

	)

150 
ut32_t
 
	md±xf0
;

151 
	#STM32F4_OTGFS_DIEPTXF_DEPTH
(
v®
è
	`BSP_FLD32
(v®, 16, 31)

	)

152 
	#STM32F4_OTGFS_DIEPTXF_DEPTH_GET
(
»g
è
	`BSP_FLD32GET
Ôeg, 16, 31)

	)

153 
	#STM32F4_OTGFS_DIEPTXF_DEPTH_SET
(
»g
, 
v®
è
	`BSP_FLD32SET
Ôeg, v®, 16, 31)

	)

154 
	#STM32F4_OTGFS_DIEPTXF_DEPTH_MIN
 16

	)

155 
	#STM32F4_OTGFS_DIEPTXF_DEPTH_MAX
 256

	)

156 
	#STM32F4_OTGFS_DIEPTXF_SADDR
(
v®
è
	`BSP_FLD32
(v®, 0, 15)

	)

157 
	#STM32F4_OTGFS_DIEPTXF_SADDR_GET
(
»g
è
	`BSP_FLD32GET
Ôeg, 0, 15)

	)

158 
	#STM32F4_OTGFS_DIEPTXF_SADDR_SET
(
»g
, 
v®
è
	`BSP_FLD32SET
Ôeg, v®, 0, 15)

	)

160 
ut32_t
 
	m»sv2C
;

162 
ut32_t
 
	mgi2cùl
;

163 
ut32_t
 
	m»sv34
;

165 
ut32_t
 
	mgccfg
;

166 
	#STM32F4_OTGFS_GCCFG_NOVBUSSENS
 
	`BSP_BIT32
(21)

167 
	#STM32F4_OTGFS_GCCFG_SOFOUTEN
 
	`BSP_BIT32
(20)

168 
	#STM32F4_OTGFS_GCCFG_VBUSBSEN
 
	`BSP_BIT32
(19)

169 
	#STM32F4_OTGFS_GCCFG_VBUSASEN
 
	`BSP_BIT32
(18)

170 
	#STM32F4_OTGFS_GCCFG_PWRDWN
 
	`BSP_BIT32
(16)

171 

	)

172 
ut32_t
 
	mcid
;

174 
ut32_t
 
	m»sv40
[48];

176 
ut32_t
 
	mh±xfsiz
;

178 
ut32_t
 
	md±xf
[
USB_OTG_MAX_TX_FIFOS
];

180 } 
__©ibu__
 ((
·cked
));

181 
¡m32f4_Ùgfs_s
 
	t¡m32f4_Ùgfs
;

183 
	s¡m32f4_Ùgfs_d»gs_s
 {

184 
ut32_t
 
	mdcfg
;

185 
	#STM32F4_OTGFS_DCFG_PFIVL
(
v®
è
	`BSP_FLD32
(val, 11, 12)

186 
	#STM32F4_OTGFS_DCFG_PFIVL_GET
(
»g
è
	`BSP_FLD32GET
Ôeg, 11, 12)

	)

187 
	#STM32F4_OTGFS_DCFG_PFIVL_SET
(
»g
, 
v®
è
	`BSP_FLD32SET
Ôeg, v®, 11, 12)

	)

188 
	#PFIVL_80
 0

	)

189 
	#PFIVL_85
 1

	)

190 
	#PFIVL_90
 2

	)

191 
	#PFIVL_95
 3

	)

192 
	#STM32F4_OTGFS_DCFG_DAD
(
v®
è
	`BSP_FLD32
(val, 4, 10)

193 
	#STM32F4_OTGFS_DCFG_DAD_GET
(
»g
è
	`BSP_FLD32GET
Ôeg, 4, 10)

	)

194 
	#STM32F4_OTGFS_DCFG_DAD_SET
(
»g
, 
v®
è
	`BSP_FLD32SET
Ôeg, v®, 4, 10)

	)

195 
	#STM32F4_OTGFS_DCFG_NZLSOHSK
 
	`BSP_BIT32
(2)

196 
	#STM32F4_OTGFS_DCFG_DSPD
(
v®
è
	`BSP_FLD32
(val, 0, 1)

197 
	#STM32F4_OTGFS_DCFG_DSPD_GET
(
»g
è
	`BSP_FLD32GET
Ôeg, 0, 1)

	)

198 
	#STM32F4_OTGFS_DCFG_DSPD_SET
(
»g
, 
v®
è
	`BSP_FLD32SET
Ôeg, v®, 0, 1)

	)

199 
	#STM32F4_OTGFS_DCFG_DSPD_FULL
 
	`STM32F4_OTGFS_DCFG_DSPD
(0x3)

	)

201 
ut32_t
 
	mdùl
;

202 
	#STM32F4_OTGFS_DCTL_POPRGDNE
 
	`BSP_BIT32
(11)

203 
	#STM32F4_OTGFS_DCTL_CGONAK
 
	`BSP_BIT32
(10)

204 
	#STM32F4_OTGFS_DCTL_SGONAK
 
	`BSP_BIT32
(9)

205 
	#STM32F4_OTGFS_DCTL_CGINAK
 
	`BSP_BIT32
(8)

206 
	#STM32F4_OTGFS_DCTL_SGINAK
 
	`BSP_BIT32
(7)

207 
	#STM32F4_OTGFS_DCTL_TCTL
(
v®
è
	`BSP_FLD32
(val, 4, 6)

208 
	#STM32F4_OTGFS_DCTL_TCTL_GET
(
»g
è
	`BSP_FLD32GET
Ôeg, 4, 6)

	)

209 
	#STM32F4_OTGFS_DCTL_TCTL_SET
(
»g
, 
v®
è
	`BSP_FLD32SET
Ôeg, v®, 4, 6)

	)

210 
	#STM32F4_OTGFS_DCTL_GONSTS
 
	`BSP_BIT32
(3)

211 
	#STM32F4_OTGFS_DCTL_GINSTS
 
	`BSP_BIT32
(2)

212 
	#STM32F4_OTGFS_DCTL_SDIS
 
	`BSP_BIT32
(1)

213 
	#STM32F4_OTGFS_DCTL_RWUSIG
 
	`BSP_BIT32
(0)

214 

	)

215 
ut32_t
 
	md¡s
;

216 
	#STM32F4_OTGFS_DSTS_FNSOF
(
v®
è
	`BSP_FLD32
(val, 8, 21)

217 
	#STM32F4_OTGFS_DSTS_FNSOF_GET
(
»g
è
	`BSP_FLD32GET
Ôeg, 8, 21)

	)

218 
	#STM32F4_OTGFS_DSTS_EERR
 
	`BSP_BIT32
(3)

219 
	#STM32F4_OTGFS_DSTS_ENUMSPD
(
v®
è
	`BSP_FLD32
(val, 1, 2)

220 
	#STM32F4_OTGFS_DSTS_ENUMSPD_GET
(
»g
è
	`BSP_FLD32GET
Ôeg, 1, 2)

	)

221 
	#STM32F4_OTGFS_DSTS_ENUMSPD_FULL
 
	`STM32F4_OTGFS_DSTS_ENUMSPD
(0x3)

	)

222 
	#STM32F4_OTGFS_DSTS_SUSPSTS
 
	`BSP_BIT32
(0)

223 

	)

224 
ut32_t
 
	munu£d4
;

226 
ut32_t
 
	mdpmsk
;

228 
ut32_t
 
	mdÛpmsk
;

230 
ut32_t
 
	mdat
;

231 
	#STM32F4_OTGFS_DAINT_OEPINT15
 
	`BSP_BIT32
(31)

232 
	#STM32F4_OTGFS_DAINT_OEPINT14
 
	`BSP_BIT32
(30)

233 
	#STM32F4_OTGFS_DAINT_OEPINT13
 
	`BSP_BIT32
(29)

234 
	#STM32F4_OTGFS_DAINT_OEPINT12
 
	`BSP_BIT32
(28)

235 
	#STM32F4_OTGFS_DAINT_OEPINT11
 
	`BSP_BIT32
(27)

236 
	#STM32F4_OTGFS_DAINT_OEPINT10
 
	`BSP_BIT32
(26)

237 
	#STM32F4_OTGFS_DAINT_OEPINT9
 
	`BSP_BIT32
(25)

238 
	#STM32F4_OTGFS_DAINT_OEPINT8
 
	`BSP_BIT32
(24)

239 
	#STM32F4_OTGFS_DAINT_OEPINT7
 
	`BSP_BIT32
(23)

240 
	#STM32F4_OTGFS_DAINT_OEPINT6
 
	`BSP_BIT32
(22)

241 
	#STM32F4_OTGFS_DAINT_OEPINT5
 
	`BSP_BIT32
(21)

242 
	#STM32F4_OTGFS_DAINT_OEPINT4
 
	`BSP_BIT32
(20)

243 
	#STM32F4_OTGFS_DAINT_OEPINT3
 
	`BSP_BIT32
(19)

244 
	#STM32F4_OTGFS_DAINT_OEPINT2
 
	`BSP_BIT32
(18)

245 
	#STM32F4_OTGFS_DAINT_OEPINT1
 
	`BSP_BIT32
(17)

246 
	#STM32F4_OTGFS_DAINT_OEPINT0
 
	`BSP_BIT32
(16)

247 
	#STM32F4_OTGFS_DAINT_IEPINT15
 
	`BSP_BIT32
(15)

248 
	#STM32F4_OTGFS_DAINT_IEPINT14
 
	`BSP_BIT32
(14)

249 
	#STM32F4_OTGFS_DAINT_IEPINT13
 
	`BSP_BIT32
(13)

250 
	#STM32F4_OTGFS_DAINT_IEPINT12
 
	`BSP_BIT32
(12)

251 
	#STM32F4_OTGFS_DAINT_IEPINT11
 
	`BSP_BIT32
(11)

252 
	#STM32F4_OTGFS_DAINT_IEPINT10
 
	`BSP_BIT32
(10)

253 
	#STM32F4_OTGFS_DAINT_IEPINT9
 
	`BSP_BIT32
(9)

254 
	#STM32F4_OTGFS_DAINT_IEPINT8
 
	`BSP_BIT32
(8)

255 
	#STM32F4_OTGFS_DAINT_IEPINT7
 
	`BSP_BIT32
(7)

256 
	#STM32F4_OTGFS_DAINT_IEPINT6
 
	`BSP_BIT32
(6)

257 
	#STM32F4_OTGFS_DAINT_IEPINT5
 
	`BSP_BIT32
(5)

258 
	#STM32F4_OTGFS_DAINT_IEPINT4
 
	`BSP_BIT32
(4)

259 
	#STM32F4_OTGFS_DAINT_IEPINT3
 
	`BSP_BIT32
(3)

260 
	#STM32F4_OTGFS_DAINT_IEPINT2
 
	`BSP_BIT32
(2)

261 
	#STM32F4_OTGFS_DAINT_IEPINT1
 
	`BSP_BIT32
(1)

262 
	#STM32F4_OTGFS_DAINT_IEPINT0
 
	`BSP_BIT32
(0)

263 

	)

264 
ut32_t
 
	mdatmsk
;

265 
	#STM32F4_OTGFS_DAINTMSK_OEPM
(
v®
è
	`BSP_FLD32
(val, 16, 31)

266 
	#STM32F4_OTGFS_DAINTMSK_OEPM_GET
(
»g
è
	`BSP_FLD32GET
Ôeg, 16, 31)

	)

267 
	#STM32F4_OTGFS_DAINTMSK_OEPM_SET
(
»g
, 
v®
è
	`BSP_FLD32SET
Ôeg, v®, 16, 31)

	)

268 
	#STM32F4_OTGFS_DAINTMSK_IEPM
(
v®
è
	`BSP_FLD32
(val, 0, 15)

269 
	#STM32F4_OTGFS_DAINTMSK_IEPM_GET
(
»g
è
	`BSP_FLD32GET
Ôeg, 0, 15)

	)

270 
	#STM32F4_OTGFS_DAINTMSK_IEPM_SET
(
»g
, 
v®
è
	`BSP_FLD32SET
Ôeg, v®, 0, 15)

	)

272 
ut32_t
 
	munu£d5
[2];

274 
ut32_t
 
	mdvbusdis
;

275 
	#STM32F4_OTGFS_DVBUSDIS_VBUSDT
(
v®
è
	`BSP_FLD32
(val, 0, 15)

276 
	#STM32F4_OTGFS_DVBUSDIS_VBUSDT_GET
(
»g
è
	`BSP_FLD32GET
Ôeg, 0, 15)

	)

277 
	#STM32F4_OTGFS_DVBUSDIS_VBUSDT_SET
(
»g
, 
v®
è
	`BSP_FLD32SET
Ôeg, v®, 0, 15)

	)

279 
ut32_t
 
	mdvbu¥ul£
;

280 
	#STM32F4_OTGFS_DVBUSPULSE_DVBUSP
(
v®
è
	`BSP_FLD32
(val, 0, 15)

281 
	#STM32F4_OTGFS_DVBUSPULSE_DVBUSP_GET
(
»g
è
	`BSP_FLD32GET
Ôeg, 0, 15)

	)

282 
	#STM32F4_OTGFS_DVBUSPULSE_DVBUSP_SET
(
»g
, 
v®
è
	`BSP_FLD32SET
Ôeg, v®, 0, 15)

	)

284 
ut32_t
 
	munu£d6
;

286 
ut32_t
 
	md³mpmsk
;

287 
	#STM32F4_OTGFS_DIEPEMPMSK_INEPTXFEM15
 
	`BSP_BIT32
(15)

288 
	#STM32F4_OTGFS_DIEPEMPMSK_INEPTXFEM14
 
	`BSP_BIT32
(14)

289 
	#STM32F4_OTGFS_DIEPEMPMSK_INEPTXFEM13
 
	`BSP_BIT32
(13)

290 
	#STM32F4_OTGFS_DIEPEMPMSK_INEPTXFEM12
 
	`BSP_BIT32
(12)

291 
	#STM32F4_OTGFS_DIEPEMPMSK_INEPTXFEM11
 
	`BSP_BIT32
(11)

292 
	#STM32F4_OTGFS_DIEPEMPMSK_INEPTXFEM10
 
	`BSP_BIT32
(10)

293 
	#STM32F4_OTGFS_DIEPEMPMSK_INEPTXFEM9
 
	`BSP_BIT32
(9)

294 
	#STM32F4_OTGFS_DIEPEMPMSK_INEPTXFEM8
 
	`BSP_BIT32
(8)

295 
	#STM32F4_OTGFS_DIEPEMPMSK_INEPTXFEM7
 
	`BSP_BIT32
(7)

296 
	#STM32F4_OTGFS_DIEPEMPMSK_INEPTXFEM6
 
	`BSP_BIT32
(6)

297 
	#STM32F4_OTGFS_DIEPEMPMSK_INEPTXFEM5
 
	`BSP_BIT32
(5)

298 
	#STM32F4_OTGFS_DIEPEMPMSK_INEPTXFEM4
 
	`BSP_BIT32
(4)

299 
	#STM32F4_OTGFS_DIEPEMPMSK_INEPTXFEM3
 
	`BSP_BIT32
(3)

300 
	#STM32F4_OTGFS_DIEPEMPMSK_INEPTXFEM2
 
	`BSP_BIT32
(2)

301 
	#STM32F4_OTGFS_DIEPEMPMSK_INEPTXFEM1
 
	`BSP_BIT32
(1)

302 
	#STM32F4_OTGFS_DIEPEMPMSK_INEPTXFEM0
 
	`BSP_BIT32
(0)

303 

	)

304 } 
__©ibu__
 ((
·cked
));

305 
¡m32f4_Ùgfs_d»gs_s
 
	t¡m32f4_Ùgfs_d»gs
;

307 
	s¡m32f4_Ùgfs_»gs_s
 {

308 
ut32_t
 
	mdpùl
;

309 
	#STM32F4_OTGFS_DIEPCTL_EPENA
 
	`BSP_BIT32
(31)

310 
	#STM32F4_OTGFS_DIEPCTL_EPDIS
 
	`BSP_BIT32
(30)

311 
	#STM32F4_OTGFS_DIEPCTL_SODDFRM
 
	`BSP_BIT32
(29)

312 
	#STM32F4_OTGFS_DIEPCTL_SD0PID
 
	`BSP_BIT32
(28)

313 
	#STM32F4_OTGFS_DIEPCTL_SEVNFRM
 
	`BSP_BIT32
(28)

314 
	#STM32F4_OTGFS_DIEPCTL_SNAK
 
	`BSP_BIT32
(27)

315 
	#STM32F4_OTGFS_DIEPCTL_CNAK
 
	`BSP_BIT32
(26)

316 
	#STM32F4_OTGFS_DIEPCTL_TXFNUM
(
v®
è
	`BSP_FLD32
(val, 22, 25)

317 
	#STM32F4_OTGFS_DIEPCTL_TXFNUM_GET
(
»g
è
	`BSP_FLD32GET
Ôeg, 22, 25)

	)

318 
	#STM32F4_OTGFS_DIEPCTL_TXFNUM_SET
(
»g
, 
v®
è
	`BSP_FLD32SET
Ôeg, v®, 22, 25)

	)

319 
	#STM32F4_OTGFS_DIEPCTL_STALL
 
	`BSP_BIT32
(21)

320 
	#STM32F4_OTGFS_DIEPCTL_EPTYP
(
v®
è
	`BSP_FLD32
(val, 18, 19)

321 
	#STM32F4_OTGFS_DIEPCTL_EPTYP_GET
(
»g
è
	`BSP_FLD32GET
Ôeg, 18, 19)

	)

322 
	#STM32F4_OTGFS_DIEPCTL_EPTYP_SET
(
»g
, 
v®
è
	`BSP_FLD32SET
Ôeg, v®, 18, 19)

	)

323 
	#EPTYPE_CTRL
 0

	)

324 
	#EPTYPE_ISOC
 1

	)

325 
	#EPTYPE_BULK
 2

	)

326 
	#EPTYPE_INTR
 3

	)

327 
	#STM32F4_OTGFS_DIEPCTL_NAKSTS
 
	`BSP_BIT32
(17)

328 
	#STM32F4_OTGFS_DIEPCTL_EONUM_DPID
 
	`BSP_BIT32
(16)

329 
	#STM32F4_OTGFS_DIEPCTL_USBAEP
 
	`BSP_BIT32
(15)

330 
	#STM32F4_OTGFS_DIEPCTL_EP0_MPSIZ
(
v®
è
	`BSP_FLD32
(val, 0, 1)

331 
	#STM32F4_OTGFS_DIEPCTL_EP0_MPSIZ_GET
(
»g
è
	`BSP_FLD32GET
Ôeg, 0, 1)

	)

332 
	#STM32F4_OTGFS_DIEPCTL_EP0_MPSIZ_SET
(
»g
, 
v®
è
	`BSP_FLD32SET
Ôeg, v®, 0, 1)

	)

333 
	#EP0_MPSIZ_8
 3

	)

334 
	#EP0_MPSIZ_16
 2

	)

335 
	#EP0_MPSIZ_32
 1

	)

336 
	#EP0_MPSIZ_64
 0

	)

337 
	#STM32F4_OTGFS_DIEPCTL_EP0_MPSIZ_8
 
	`STM32F4_OTGFS_DIEPCTL_MPSIZ
(
EP0_MPSIZ_8
)

	)

338 
	#STM32F4_OTGFS_DIEPCTL_EP0_MPSIZ_16
 
	`STM32F4_OTGFS_DIEPCTL_MPSIZ
(
EP0_MPSIZ_16
)

	)

339 
	#STM32F4_OTGFS_DIEPCTL_EP0_MPSIZ_32
 
	`STM32F4_OTGFS_DIEPCTL_MPSIZ
(
EP0_MPSIZ_32
)

	)

340 
	#STM32F4_OTGFS_DIEPCTL_EP0_MPSIZ_64
 
	`STM32F4_OTGFS_DIEPCTL_MPSIZ
(
EP0_MPSIZ_64
)

	)

341 
	#STM32F4_OTGFS_DIEPCTL_MPSIZ
(
v®
è
	`BSP_FLD32
(val, 0, 10)

342 
	#STM32F4_OTGFS_DIEPCTL_MPSIZ_GET
(
»g
è
	`BSP_FLD32GET
Ôeg, 0, 10)

	)

343 
	#STM32F4_OTGFS_DIEPCTL_MPSIZ_SET
(
»g
, 
v®
è
	`BSP_FLD32SET
Ôeg, v®, 0, 10)

	)

345 
ut32_t
 
	m»£rved_04
;

347 
ut32_t
 
	mdpt
;

348 
	#STM32F4_OTGFS_DIEPINT_TXFE
 
	`BSP_BIT32
(7)

349 
	#STM32F4_OTGFS_DIEPINT_INEPNE
 
	`BSP_BIT32
(6)

350 
	#STM32F4_OTGFS_DIEPINT_ITTXFE
 
	`BSP_BIT32
(4)

351 
	#STM32F4_OTGFS_DIEPINT_TOC
 
	`BSP_BIT32
(3)

352 
	#STM32F4_OTGFS_DIEPINT_EPDISD
 
	`BSP_BIT32
(1)

353 
	#STM32F4_OTGFS_DIEPINT_XFRC
 
	`BSP_BIT32
(0)

354 

	)

355 
ut32_t
 
	m»£rved_0C
;

357 
ut32_t
 
	md±siz
;

358 
	#STM32F4_OTGFS_DIEPTSIZ_EP0_PKTCNT
(
v®
è
	`BSP_FLD32
(val, 19, 20)

359 
	#STM32F4_OTGFS_DIEPTSIZ_EP0_PKTCNT_GET
(
»g
è
	`BSP_FLD32GET
Ôeg, 19, 20)

	)

360 
	#STM32F4_OTGFS_DIEPTSIZ_EP0_PKTCNT_SET
(
»g
, 
v®
è
	`BSP_FLD32SET
Ôeg, v®, 19, 20)

	)

361 
	#STM32F4_OTGFS_DIEPTSIZ_EP0_XFRSIZ
(
v®
è
	`BSP_FLD32
(val, 0, 6)

362 
	#STM32F4_OTGFS_DIEPTSIZ_EP0_XFRSIZ_GET
(
»g
è
	`BSP_FLD32GET
Ôeg, 0, 6)

	)

363 
	#STM32F4_OTGFS_DIEPTSIZ_EP0_XFRSIZ_SET
(
»g
, 
v®
è
	`BSP_FLD32SET
Ôeg, v®, 0, 6)

	)

364 
	#STM32F4_OTGFS_DIEPTSIZ_MCNT
(
v®
è
	`BSP_FLD32
(val, 29, 30)

365 
	#STM32F4_OTGFS_DIEPTSIZ_MCNT_GET
(
»g
è
	`BSP_FLD32GET
Ôeg, 29, 30)

	)

366 
	#STM32F4_OTGFS_DIEPTSIZ_MCNT_SET
(
»g
, 
v®
è
	`BSP_FLD32SET
Ôeg, v®, 29, 30)

	)

367 
	#STM32F4_OTGFS_DIEPTSIZ_PKTCNT
(
v®
è
	`BSP_FLD32
(val, 19, 28)

368 
	#STM32F4_OTGFS_DIEPTSIZ_PKTCNT_GET
(
»g
è
	`BSP_FLD32GET
Ôeg, 19, 28)

	)

369 
	#STM32F4_OTGFS_DIEPTSIZ_PKTCNT_SET
(
»g
, 
v®
è
	`BSP_FLD32SET
Ôeg, v®, 19, 28)

	)

370 
	#STM32F4_OTGFS_DIEPTSIZ_XFRSIZ
(
v®
è
	`BSP_FLD32
(val, 0, 18)

371 
	#STM32F4_OTGFS_DIEPTSIZ_XFRSIZ_GET
(
»g
è
	`BSP_FLD32GET
Ôeg, 0, 18)

	)

372 
	#STM32F4_OTGFS_DIEPTSIZ_XFRSIZ_SET
(
»g
, 
v®
è
	`BSP_FLD32SET
Ôeg, v®, 0, 18)

	)

374 
ut32_t
 
	m»£rved_14
;

376 
ut32_t
 
	mdtxf¡s
;

377 
	#STM32F4_OTGFS_DTXFSTS_INEPTFSAV
(
v®
è
	`BSP_FLD32
(val, 0, 15)

378 
	#STM32F4_OTGFS_DTXFSTS_INEPTFSAV_GET
(
»g
è
	`BSP_FLD32
Ôeg, 0, 15)

	)

379 
	#STM32F4_OTGFS_DTXFSTS_INEPTFSAV_SET
(
»g
, 
v®
è
	`BSP_FLD32SET
Ôeg, v®, 0, 15)

	)

381 
ut32_t
 
	m»£rved_1C
;

383 } 
__©ibu__
 ((
·cked
));

384 
¡m32f4_Ùgfs_»gs_s
 
	t¡m32f4_Ùgfs_»gs
;

386 
	s¡m32f4_Ùgfs_ou´egs_s
 {

387 
ut32_t
 
	mdÛpùl
;

388 
	#STM32F4_OTGFS_DOEPCTL_EPENA
 
	`BSP_BIT32
(31)

389 
	#STM32F4_OTGFS_DOEPCTL_EPDIS
 
	`BSP_BIT32
(30)

390 
	#STM32F4_OTGFS_DOEPCTL_SD1PID
 
	`BSP_BIT32
(29)

391 
	#STM32F4_OTGFS_DOEPCTL_SD0PID
 
	`BSP_BIT32
(28)

392 
	#STM32F4_OTGFS_DOEPCTL_SNAK
 
	`BSP_BIT32
(27)

393 
	#STM32F4_OTGFS_DOEPCTL_CNAK
 
	`BSP_BIT32
(26)

394 
	#STM32F4_OTGFS_DOEPCTL_STALL
 
	`BSP_BIT32
(21)

395 
	#STM32F4_OTGFS_DOEPCTL_SNPM
 
	`BSP_BIT32
(20)

396 
	#STM32F4_OTGFS_DOEPCTL_EPTYP
(
v®
è
	`BSP_FLD32
(val, 18, 19)

397 
	#STM32F4_OTGFS_DOEPCTL_EPTYP_GET
(
»g
è
	`BSP_FLD32GET
Ôeg, 18, 19)

	)

398 
	#STM32F4_OTGFS_DOEPCTL_EPTYP_SET
(
»g
, 
v®
è
	`BSP_FLD32SET
Ôeg, v®, 18, 19)

	)

399 
	#STM32F4_OTGFS_DOEPCTL_NAKSTS
 
	`BSP_BIT32
(17)

400 
	#STM32F4_OTGFS_DOEPCTL_EONUM_DPID
 
	`BSP_BIT32
(16)

401 
	#STM32F4_OTGFS_DOEPCTL_USBAEP
 
	`BSP_BIT32
(15)

402 
	#STM32F4_OTGFS_DOEPCTL_MPSIZ
(
v®
è
	`BSP_FLD32
(val, 0, 10)

403 
	#STM32F4_OTGFS_DOEPCTL_MPSIZ_GET
(
»g
è
	`BSP_FLD32GET
Ôeg, 0, 10)

	)

404 
	#STM32F4_OTGFS_DOEPCTL_MPSIZ_SET
(
»g
, 
v®
è
	`BSP_FLD32SET
Ôeg, v®, 0, 10)

	)

406 
ut32_t
 
	m»sv04
;

408 
ut32_t
 
	mdÛpt
;

409 
	#STM32F4_OTGFS_DOEPINT_B2BSTUP
 
	`BSP_BIT32
(6)

410 
	#STM32F4_OTGFS_DOEPINT_OTEPDIS
 
	`BSP_BIT32
(4)

411 
	#STM32F4_OTGFS_DOEPINT_STUP
 
	`BSP_BIT32
(3)

412 
	#STM32F4_OTGFS_DOEPINT_EPDISD
 
	`BSP_BIT32
(1)

413 
	#STM32F4_OTGFS_DOEPINT_XFRC
 
	`BSP_BIT32
(0)

414 

	)

415 
ut32_t
 
	mdÛ±siz
;

416 
	#STM32F4_OTGFS_DOEPTSIZ_EP0_STUPCNT
(
v®
è
	`BSP_FLD32
(val, 29, 30)

417 
	#STM32F4_OTGFS_DOEPTSIZ_EP0_STUPCNT_GET
(
»g
è
	`BSP_FLD32GET
Ôeg, 29, 30)

	)

418 
	#STM32F4_OTGFS_DOEPTSIZ_EP0_STUPCNT_SET
(
»g
, 
v®
è
	`BSP_FLD32SET
Ôeg, v®, 29, 30)

	)

419 
	#STM32F4_OTGFS_DOEPTSIZ_EP0_PKTCNT
 
	`BSP_BIT32
(19)

420 
	#STM32F4_OTGFS_DOEPTSIZ_EP0_XFRSIZ
(
v®
è
	`BSP_FLD32
(val, 0, 6)

421 
	#STM32F4_OTGFS_DOEPTSIZ_EP0_XFRSIZ_GET
(
»g
è
	`BSP_FLD32GET
Ôeg, 0, 6)

	)

422 
	#STM32F4_OTGFS_DOEPTSIZ_EP0_XFRSIZ_SET
(
»g
, 
v®
è
	`BSP_FLD32SET
Ôeg, v®, 0, 6)

	)

423 
	#STM32F4_OTGFS_DOEPTSIZ_RXDPID
(
v®
è
	`BSP_FLD32
(val, 29, 30)

424 
	#STM32F4_OTGFS_DOEPTSIZ_RXDPID_GET
(
»g
è
	`BSP_FLD32GET
Ôeg, 29, 30)

	)

425 
	#STM32F4_OTGFS_DOEPTSIZ_RXDPID_SET
(
»g
, 
v®
è
	`BSP_FLD32SET
Ôeg, v®, 29, 30)

	)

426 
	#STM32F4_OTGFS_DOEPTSIZ_PKTCNT
(
v®
è
	`BSP_FLD32
(val, 19, 28)

427 
	#STM32F4_OTGFS_DOEPTSIZ_PKTCNT_GET
(
»g
è
	`BSP_FLD32GET
Ôeg, 19, 28)

	)

428 
	#STM32F4_OTGFS_DOEPTSIZ_PKTCNT_SET
(
»g
, 
v®
è
	`BSP_FLD32SET
Ôeg, v®, 19, 28)

	)

429 
	#STM32F4_OTGFS_DOEPTSIZ_XFRSIZ
(
v®
è
	`BSP_FLD32
(val, 0, 18)

430 
	#STM32F4_OTGFS_DOEPTSIZ_XFRSIZ_GET
(
»g
è
	`BSP_FLD32GET
Ôeg, 0, 18)

	)

431 
	#STM32F4_OTGFS_DOEPTSIZ_XFRSIZ_SET
(
»g
, 
v®
è
	`BSP_FLD32SET
Ôeg, v®, 0, 18)

	)

433 
ut32_t
 
	m»sv14
[3];

434 } 
__©ibu__
 ((
·cked
));

435 
¡m32f4_Ùgfs_ou´egs_s
 
	t¡m32f4_Ùgfs_ou´egs
;

437 
	s¡m32f4_Ùgfs_pwrùÌegs_s
 {

438 
ut32_t
 
	mpcgcùl
;

439 
	#STM32F4_OTGFS_PCGCCTL_PHYSUSP
 
	`BSP_BIT32
(4)

440 
	#STM32F4_OTGFS_PCGCCTL_GATEHCLK
 
	`BSP_BIT32
(1)

441 
	#STM32F4_OTGFS_PCGCCTL_STPPCLK
 
	`BSP_BIT32
(0)

442 } 
	`__©ibu__
 ((
·cked
));

	)

443 
¡m32f4_Ùgfs_pwrùÌegs_s
 
	t¡m32f4_Ùgfs_pwrùÌegs
;

	@src/lib/libbsp/arm/stm32f4/include/stm32f4xxxx_pwr.h

15 #iâdeà
LIBBSP_ARM_STM32F4_STM32F4XXXX_PWR_H


16 
	#LIBBSP_ARM_STM32F4_STM32F4XXXX_PWR_H


	)

18 
	~<b¥/uty.h
>

20 
	s¡m32f4_pwr_s
 {

22 
ut32_t
 
	mü
;

23 
	#STM32F4_PWR_CR_VOS
 
	`BSP_BIT32
(14)

24 
	#STM32F4_PWR_CR_FPDS
 
	`BSP_BIT32
(9)

25 
	#STM32F4_PWR_CR_DBP
 
	`BSP_BIT32
(8)

26 
	#STM32F4_PWR_CR_PLS
 
	`BSP_FLD32
(
v®
, 5, 7)

27 
	#STM32F4_PWR_CR_PLS_GET
(
»g
è
	`BSP_FLD32GET
Ôeg, 5, 7)

	)

28 
	#STM32F4_PWR_CR_PLS_SET
(
»g
, 
v®
è
	`BSP_FLD32SET
Ôeg, v®, 5, 7)

	)

29 
	#STM32F4_PWR_CR_PVDE
 
	`BSP_BIT32
(4)

30 
	#STM32F4_PWR_CR_CSBF
 
	`BSP_BIT32
(3)

31 
	#STM32F4_PWR_CR_CWUF
 
	`BSP_BIT32
(2)

32 
	#STM32F4_PWR_CR_PDDS
 
	`BSP_BIT32
(1)

33 
	#STM32F4_PWR_CR_LPDS
 
	`BSP_BIT32
(0)

34 

	)

35 
ut32_t
 
	mc¤
;

36 
	#STM32F4_PWR_CSR_VOSRDY
 
	`BSP_BIT32
(14)

37 
	#STM32F4_PWR_CSR_BRE
 
	`BSP_BIT32
(9)

38 
	#STM32F4_PWR_CSR_EWUP
 
	`BSP_BIT32
(8)

39 
	#STM32F4_PWR_CSR_BRR
 
	`BSP_BIT32
(3)

40 
	#STM32F4_PWR_CSR_PVDO
 
	`BSP_BIT32
(2)

41 
	#STM32F4_PWR_CSR_SBF
 
	`BSP_BIT32
(1)

42 
	#STM32F4_PWR_CSR_WUF
 
	`BSP_BIT32
(0)

43 

	)

44 } 
__©ibu__
 ((
·cked
));

45 
¡m32f4_pwr_s
 
	t¡m32f4_pwr
;

	@src/lib/libbsp/arm/stm32f4/include/stm32f4xxxx_rcc.h

21 #iâdeà
LIBBSP_ARM_STM32F4_STM32F4XXXX_RCC_H


22 
	#LIBBSP_ARM_STM32F4_STM32F4XXXX_RCC_H


	)

24 
	~<b¥/uty.h
>

34 
ut32_t
 
	mü
;

35 
	#STM32F4_RCC_CR_PLLI2SRDY
 
	`BSP_BIT32
(27)

36 
	#STM32F4_RCC_CR_PLLI2SON
 
	`BSP_BIT32
(26)

37 
	#STM32F4_RCC_CR_PLLRDY
 
	`BSP_BIT32
(25)

38 
	#STM32F4_RCC_CR_PLLON
 
	`BSP_BIT32
(24)

39 
	#STM32F4_RCC_CR_CSSON
 
	`BSP_BIT32
(19)

40 
	#STM32F4_RCC_CR_HSEBYP
 
	`BSP_BIT32
(18)

41 
	#STM32F4_RCC_CR_HSERDY
 
	`BSP_BIT32
(17)

42 
	#STM32F4_RCC_CR_HSEON
 
	`BSP_BIT32
(16)

43 
	#STM32F4_RCC_CR_HSIRDY
 
	`BSP_BIT32
(1)

44 
	#STM32F4_RCC_CR_HSION
 
	`BSP_BIT32
(0)

45 

	)

46 
ut32_t
 
	m¶lcfgr
;

47 
	#STM32F4_RCC_PLLCFGR_PLLQ
(
v®
è
	`BSP_FLD32
(v®, 24, 27)

	)

48 
	#STM32F4_RCC_PLLCFGR_PLLQ_GET
(
»g
è
	`BSP_FLD32GET
Ôeg, 24, 27)

	)

49 
	#STM32F4_RCC_PLLCFGR_PLLQ_SET
(
»g
, 
v®
è
	`BSP_FLD32SET
Ôeg, v®, 24, 27)

	)

50 
	#STM32F4_RCC_PLLCFGR_SRC
 
	`BSP_BIT32
(22)

51 
	#STM32F4_RCC_PLLCFGR_SRC_HSE
 
STM32F4_RCC_PLLCFGR_SRC


	)

52 
	#STM32F4_RCC_PLLCFGR_SRC_HSI
 0

	)

53 
	#STM32F4_RCC_PLLCFGR_PLLP
(
v®
è
	`BSP_FLD32
(v®, 16, 17)

	)

54 
	#STM32F4_RCC_PLLCFGR_PLLP_GET
(
»g
è
	`BSP_FLD32GET
Ôeg, 16, 17)

	)

55 
	#STM32F4_RCC_PLLCFGR_PLLP_SET
(
»g
, 
v®
è
	`BSP_FLD32SET
Ôeg, v®, 16, 17)

	)

56 
	#STM32F4_RCC_PLLCFGR_PLLP_2
 
	`STM32F4_RCC_PLLCFGR_PLLP
(0)

	)

57 
	#STM32F4_RCC_PLLCFGR_PLLP_4
 
	`STM32F4_RCC_PLLCFGR_PLLP
(1)

	)

58 
	#STM32F4_RCC_PLLCFGR_PLLP_6
 
	`STM32F4_RCC_PLLCFGR_PLLP
(2)

	)

59 
	#STM32F4_RCC_PLLCFGR_PLLP_8
 
	`STM32F4_RCC_PLLCFGR_PLLP
(3)

	)

60 
	#STM32F4_RCC_PLLCFGR_PLLN
(
v®
è
	`BSP_FLD32
(v®, 6, 14)

	)

61 
	#STM32F4_RCC_PLLCFGR_PLLN_GET
(
»g
è
	`BSP_FLD32GET
Ôeg, 6, 14)

	)

62 
	#STM32F4_RCC_PLLCFGR_PLLN_SET
(
»g
, 
v®
è
	`BSP_FLD32SET
Ôeg, v®, 6, 14)

	)

63 
	#STM32F4_RCC_PLLCFGR_PLLM
(
v®
è
	`BSP_FLD32
(v®, 0, 5)

	)

64 
	#STM32F4_RCC_PLLCFGR_PLLM_GET
(
»g
è
	`BSP_FLD32GET
Ôeg, 0, 5)

	)

65 
	#STM32F4_RCC_PLLCFGR_PLLM_SET
(
»g
, 
v®
è
	`BSP_FLD32SET
Ôeg, v®, 0, 5)

	)

67 
ut32_t
 
	mcfgr
;

68 
	#STM32F4_RCC_CFGR_MCO2
(
v®
è
	`BSP_FLD32
(val, 30, 31)

69 
	#STM32F4_RCC_CFGR_MCO2_GET
(
»g
è
	`BSP_FLD32GET
Ôeg, 30, 31)

	)

70 
	#STM32F4_RCC_CFGR_MCO2_SET
(
»g
, 
v®
è
	`BSP_FLD32SET
Ôeg, v®, 30, 31)

	)

71 
	#STM32F4_RCC_CFGR_MCO2_SYSCLK
 
	`STM32F4_RCC_CFGR_MCO2
(0)

	)

72 
	#STM32F4_RCC_CFGR_MCO2_PLLI2S
 
	`STM32F4_RCC_CFGR_MCO2
(1)

	)

73 
	#STM32F4_RCC_CFGR_MCO2_HSE
 
	`STM32F4_RCC_CFGR_MCO2
(2)

	)

74 
	#STM32F4_RCC_CFGR_MCO2_PLL
 
	`STM32F4_RCC_CFGR_MCO2
(3)

	)

75 
	#STM32F4_RCC_CFGR_MCO2_PRE
(
v®
è
	`BSP_FLD32
(val, 27, 29)

76 
	#STM32F4_RCC_CFGR_MCO2_PRE_GET
(
»g
è
	`BSP_FLD32GET
Ôeg, 27, 29)

	)

77 
	#STM32F4_RCC_CFGR_MCO2_PRE_SET
(
»g
, 
v®
è
	`BSP_FLD32SET
Ôeg, v®, 27, 29)

	)

78 
	#STM32F4_RCC_CFGR_MCO2_DIV1
 
	`STM32F4_RCC_CFGR_MCO2_PRE
(0)

	)

79 
	#STM32F4_RCC_CFGR_MCO2_DIV2
 
	`STM32F4_RCC_CFGR_MCO2_PRE
(4)

	)

80 
	#STM32F4_RCC_CFGR_MCO2_DIV3
 
	`STM32F4_RCC_CFGR_MCO2_PRE
(5)

	)

81 
	#STM32F4_RCC_CFGR_MCO2_DIV4
 
	`STM32F4_RCC_CFGR_MCO2_PRE
(6)

	)

82 
	#STM32F4_RCC_CFGR_MCO2_DIV5
 
	`STM32F4_RCC_CFGR_MCO2_PRE
(7)

	)

83 
	#STM32F4_RCC_CFGR_MCO1_PRE
(
v®
è
	`BSP_FLD32
(val, 24, 26)

84 
	#STM32F4_RCC_CFGR_MCO1_PRE_GET
(
»g
è
	`BSP_FLD32GET
Ôeg, 24, 26)

	)

85 
	#STM32F4_RCC_CFGR_MCO1_PRE_SET
(
»g
, 
v®
è
	`BSP_FLD32SET
Ôeg, v®, 24, 26)

	)

86 
	#STM32F4_RCC_CFGR_MCO1_DIV1
 
	`STM32F4_RCC_CFGR_MCO1_PRE
(0)

	)

87 
	#STM32F4_RCC_CFGR_MCO1_DIV2
 
	`STM32F4_RCC_CFGR_MCO1_PRE
(4)

	)

88 
	#STM32F4_RCC_CFGR_MCO1_DIV3
 
	`STM32F4_RCC_CFGR_MCO1_PRE
(5)

	)

89 
	#STM32F4_RCC_CFGR_MCO1_DIV4
 
	`STM32F4_RCC_CFGR_MCO1_PRE
(6)

	)

90 
	#STM32F4_RCC_CFGR_MCO1_DIV5
 
	`STM32F4_RCC_CFGR_MCO1_PRE
(7)

	)

91 
	#STM32F4_RCC_CFGR_I2SSCR
 
	`BSP_BIT32
(23)

92 
	#STM32F4_RCC_CFGR_MCO1
(
v®
è
	`BSP_FLD32
(val, 21, 22)

93 
	#STM32F4_RCC_CFGR_MCO1_GET
(
»g
è
	`BSP_FLD32GET
Ôeg, 21, 22)

	)

94 
	#STM32F4_RCC_CFGR_MCO1_SET
(
»g
, 
v®
è
	`BSP_FLD32SET
Ôeg, v®, 21, 22)

	)

95 
	#STM32F4_RCC_CFGR_MCO1_HSI
 
	`STM32F4_RCC_CFGR_MCO1
(0)

	)

96 
	#STM32F4_RCC_CFGR_MCO1_LSE
 
	`STM32F4_RCC_CFGR_MCO1
(1)

	)

97 
	#STM32F4_RCC_CFGR_MCO1_HSE
 
	`STM32F4_RCC_CFGR_MCO1
(2)

	)

98 
	#STM32F4_RCC_CFGR_MCO1_PLL
 
	`STM32F4_RCC_CFGR_MCO1
(3)

	)

99 
	#STM32F4_RCC_CFGR_RTCPRE
(
v®
è
	`BSP_FLD32
(val, 16, 20)

100 
	#STM32F4_RCC_CFGR_RTCPRE_GET
(
»g
è
	`BSP_FLD32GET
Ôeg, 16, 20)

	)

101 
	#STM32F4_RCC_CFGR_RTCPRE_SET
(
»g
, 
v®
è
	`BSP_FLD32SET
Ôeg, v®, 16, 20)

	)

102 
	#STM32F4_RCC_CFGR_PPRE2
(
v®
è
	`BSP_FLD32
(val, 13, 15)

103 
	#STM32F4_RCC_CFGR_PPRE2_GET
(
»g
è
	`BSP_FLD32GET
Ôeg, 13, 15)

	)

104 
	#STM32F4_RCC_CFGR_PPRE2_SET
(
»g
, 
v®
è
	`BSP_FLD32SET
Ôeg, v®, 13, 15)

	)

105 
	#STM32F4_RCC_CFGR_PPRE2_DIV1
 
	`STM32F4_RCC_CFGR_PPRE2
(0)

	)

106 
	#STM32F4_RCC_CFGR_PPRE2_DIV2
 
	`STM32F4_RCC_CFGR_PPRE2
(4)

	)

107 
	#STM32F4_RCC_CFGR_PPRE2_DIV4
 
	`STM32F4_RCC_CFGR_PPRE2
(5)

	)

108 
	#STM32F4_RCC_CFGR_PPRE2_DIV8
 
	`STM32F4_RCC_CFGR_PPRE2
(6)

	)

109 
	#STM32F4_RCC_CFGR_PPRE2_DIV16
 
	`STM32F4_RCC_CFGR_PPRE2
(7)

	)

110 
	#STM32F4_RCC_CFGR_PPRE1
(
v®
è
	`BSP_FLD32
(val, 10, 12)

111 
	#STM32F4_RCC_CFGR_PPRE1_GET
(
»g
è
	`BSP_FLD32GET
Ôeg, 10, 12)

	)

112 
	#STM32F4_RCC_CFGR_PPRE1_SET
(
»g
, 
v®
è
	`BSP_FLD32SET
Ôeg, v®, 10, 12)

	)

113 
	#STM32F4_RCC_CFGR_PPRE1_DIV1
 
	`STM32F4_RCC_CFGR_PPRE1
(0)

	)

114 
	#STM32F4_RCC_CFGR_PPRE1_DIV2
 
	`STM32F4_RCC_CFGR_PPRE1
(4)

	)

115 
	#STM32F4_RCC_CFGR_PPRE1_DIV4
 
	`STM32F4_RCC_CFGR_PPRE1
(5)

	)

116 
	#STM32F4_RCC_CFGR_PPRE1_DIV8
 
	`STM32F4_RCC_CFGR_PPRE1
(6)

	)

117 
	#STM32F4_RCC_CFGR_PPRE1_DIV16
 
	`STM32F4_RCC_CFGR_PPRE1
(7)

	)

118 
	#STM32F4_RCC_CFGR_HPRE
(
v®
è
	`BSP_FLD32
(val, 4, 15)

119 
	#STM32F4_RCC_CFGR_HPRE_GET
(
»g
è
	`BSP_FLD32GET
Ôeg, 4, 7)

	)

120 
	#STM32F4_RCC_CFGR_HPRE_SET
(
»g
, 
v®
è
	`BSP_FLD32SET
Ôeg, v®, 4, 7)

	)

121 
	#STM32F4_RCC_CFGR_HPRE_DIV1
 
	`STM32F4_RCC_CFGR_HPRE
(0)

	)

122 
	#STM32F4_RCC_CFGR_HPRE_DIV2
 
	`STM32F4_RCC_CFGR_HPRE
(8)

	)

123 
	#STM32F4_RCC_CFGR_HPRE_DIV4
 
	`STM32F4_RCC_CFGR_HPRE
(9)

	)

124 
	#STM32F4_RCC_CFGR_HPRE_DIV8
 
	`STM32F4_RCC_CFGR_HPRE
(10)

	)

125 
	#STM32F4_RCC_CFGR_HPRE_DIV16
 
	`STM32F4_RCC_CFGR_HPRE
(11)

	)

126 
	#STM32F4_RCC_CFGR_HPRE_DIV64
 
	`STM32F4_RCC_CFGR_HPRE
(12)

	)

127 
	#STM32F4_RCC_CFGR_HPRE_DIV128
 
	`STM32F4_RCC_CFGR_HPRE
(13)

	)

128 
	#STM32F4_RCC_CFGR_HPRE_DIV256
 
	`STM32F4_RCC_CFGR_HPRE
(14)

	)

129 
	#STM32F4_RCC_CFGR_HPRE_DIV512
 
	`STM32F4_RCC_CFGR_HPRE
(15)

	)

130 
	#STM32F4_RCC_CFGR_SWS
(
v®
è
	`BSP_FLD32
(val, 2, 3)

131 
	#STM32F4_RCC_CFGR_SWS_GET
(
»g
è
	`BSP_FLD32GET
Ôeg, 2, 3)

	)

132 
	#STM32F4_RCC_CFGR_SWS_SET
(
»g
, 
v®
è
	`BSP_FLD32SET
Ôeg, v®, 2, 3)

	)

133 
	#STM32F4_RCC_CFGR_SWS_HSI
 
	`STM32F4_RCC_CFGR_SWS
(0)

	)

134 
	#STM32F4_RCC_CFGR_SWS_HSE
 
	`STM32F4_RCC_CFGR_SWS
(1)

	)

135 
	#STM32F4_RCC_CFGR_SWS_PLL
 
	`STM32F4_RCC_CFGR_SWS
(2)

	)

136 
	#STM32F4_RCC_CFGR_SW
(
v®
è
	`BSP_FLD32
(val, 0, 1)

137 
	#STM32F4_RCC_CFGR_SW_GET
(
»g
è
	`BSP_FLD32GET
Ôeg, 0, 1)

	)

138 
	#STM32F4_RCC_CFGR_SW_SET
(
»g
, 
v®
è
	`BSP_FLD32SET
Ôeg, v®, 0, 1)

	)

139 
	#STM32F4_RCC_CFGR_SW_HSI
 
	`STM32F4_RCC_CFGR_SW
(0)

	)

140 
	#STM32F4_RCC_CFGR_SW_HSE
 
	`STM32F4_RCC_CFGR_SW
(1)

	)

141 
	#STM32F4_RCC_CFGR_SW_PLL
 
	`STM32F4_RCC_CFGR_SW
(2)

	)

143 
ut32_t
 
	mc
;

145 
ut32_t
 
	mahbr¡r
 [3];

147 
ut32_t
 
	m»£rved_1c
;

149 
ut32_t
 
	m­br¡r
 [2];

151 
ut32_t
 
	m»£rved_28
 [2];

153 
ut32_t
 
	mahbr
 [3];

155 
ut32_t
 
	m»£rved_3c
;

157 
ut32_t
 
	m­br
 [2];

159 
ut32_t
 
	m»£rved_48
 [2];

161 
ut32_t
 
	mahbÍr
 [3];

163 
ut32_t
 
	m»£rved_5c
;

165 
ut32_t
 
	m­bÍr
 [2];

167 
ut32_t
 
	m»£rved_68
 [2];

169 
ut32_t
 
	mbdü
;

171 
ut32_t
 
	mc¤
;

173 
ut32_t
 
	m»£rved_78
 [2];

175 
ut32_t
 
	msscgr
;

177 
ut32_t
 
	m¶li2scfgr
;

179 } 
	t¡m32f4_rcc
;

183 
	#RCC_CR_HSION
 
	`BSP_BIT32
Ð0 )

	)

184 
	#RCC_CR_HSIRDY
 
	`BSP_BIT32
Ð1 )

	)

185 
	#RCC_CR_HSITRIM
Ð
v®
 ) 
	`BSP_FLD32
Ðv®, 3, 7 )

	)

186 
	#RCC_CR_HSITRIM_MSK
 
	`BSP_MSK32
Ð3, 7 )

	)

187 
	#RCC_CR_HSICAL
Ð
v®
 ) 
	`BSP_FLD32
Ðv®, 8, 15 )

	)

188 
	#RCC_CR_HSICAL_MSK
 
	`BSP_MSK32
Ð8, 15 )

	)

189 
	#RCC_CR_HSEON
 
	`BSP_BIT32
Ð16 )

	)

190 
	#RCC_CR_HSERDY
 
	`BSP_BIT32
Ð17 )

	)

191 
	#RCC_CR_HSEBYP
 
	`BSP_BIT32
Ð18 )

	)

192 
	#RCC_CR_CSSON
 
	`BSP_BIT32
Ð19 )

	)

193 
	#RCC_CR_PLLON
 
	`BSP_BIT32
Ð24 )

	)

194 
	#RCC_CR_PLLRDY
 
	`BSP_BIT32
Ð25 )

	)

195 
	#RCC_CR_PLLI2SON
 
	`BSP_BIT32
Ð26 )

	)

196 
	#RCC_CR_PLLI2SRDY
 
	`BSP_BIT32
Ð27 )

	)

198 
	#RCC_PLLCFGR_PLLM
Ð
v®
 ) 
	`BSP_FLD32
Ðv®, 0, 5 )

	)

199 
	#RCC_PLLCFGR_PLLM_MSK
 
	`BSP_MSK32
Ð0, 5 )

	)

200 
	#RCC_PLLCFGR_PLLN
Ð
v®
 ) 
	`BSP_FLD32
Ðv®, 6, 14 )

	)

201 
	#RCC_PLLCFGR_PLLN_MSK
 
	`BSP_MSK32
Ð6, 14 )

	)

203 
	#RCC_PLLCFGR_PLLP
 16

	)

204 
	#RCC_PLLCFGR_PLLP_MSK
 
	`BSP_MSK32
Ð16, 17 )

	)

205 
	#RCC_PLLCFGR_PLLP_BY_2
 0

	)

206 
	#RCC_PLLCFGR_PLLP_BY_4
 
	`BSP_FLD32
Ð1, 16, 17 )

	)

207 
	#RCC_PLLCFGR_PLLP_BY_6
 
	`BSP_FLD32
Ð2, 16, 17 )

	)

208 
	#RCC_PLLCFGR_PLLP_BY_8
 
	`BSP_FLD32
Ð3, 16, 17 )

	)

210 
	#RCC_PLLCFGR_PLLSRC_HSE
 
	`BSP_BIT32
Ð22 )

	)

211 
	#RCC_PLLCFGR_PLLSRC_HSI
 0

	)

213 
	#RCC_PLLCFGR_PLLQ
Ð
v®
 ) 
	`BSP_FLD32
Ðv®, 24, 27 )

	)

214 
	#RCC_PLLCFGR_PLLQ_MSK
 
	`BSP_MSK32
Ð24, 27 )

	)

216 
	#RCC_CFGR_SW
 0

	)

217 
	#RCC_CFGR_SW_MSK
 
	`BSP_MSK32
Ð0, 1 )

	)

218 
	#RCC_CFGR_SW_HSI
 0

	)

219 
	#RCC_CFGR_SW_HSE
 1

	)

220 
	#RCC_CFGR_SW_PLL
 2

	)

222 
	#RCC_CFGR_SWS
 2

	)

223 
	#RCC_CFGR_SWS_MSK
 
	`BSP_MSK32
Ð2, 3 )

	)

224 
	#RCC_CFGR_SWS_HSI
 0

	)

225 
	#RCC_CFGR_SWS_HSE
 
	`BSP_FLD32
Ð1, 2, 3 )

	)

226 
	#RCC_CFGR_SWS_PLL
 
	`BSP_FLD32
Ð2, 2, 3 )

	)

228 
	#RCC_CFGR_HPRE
 4

	)

229 
	#RCC_CFGR_HPRE_BY_1
 0

	)

230 
	#RCC_CFGR_HPRE_BY_2
 
	`BSP_FLD32
Ð8, 4, 7 )

	)

231 
	#RCC_CFGR_HPRE_BY_4
 
	`BSP_FLD32
Ð9, 4, 7 )

	)

232 
	#RCC_CFGR_HPRE_BY_8
 
	`BSP_FLD32
Ð10, 4, 7 )

	)

233 
	#RCC_CFGR_HPRE_BY_16
 
	`BSP_FLD32
Ð11, 4, 7 )

	)

234 
	#RCC_CFGR_HPRE_BY_64
 
	`BSP_FLD32
Ð12, 4, 7 )

	)

235 
	#RCC_CFGR_HPRE_BY_128
 
	`BSP_FLD32
Ð13, 4, 7 )

	)

236 
	#RCC_CFGR_HPRE_BY_256
 
	`BSP_FLD32
Ð14, 4, 7 )

	)

237 
	#RCC_CFGR_HPRE_BY_512
 
	`BSP_FLD32
Ð15, 4, 7 )

	)

239 
	#RCC_CFGR_PPRE1
 10

	)

240 
	#RCC_CFGR_PPRE1_BY_1
 0

	)

241 
	#RCC_CFGR_PPRE1_BY_2
 
	`BSP_FLD32
Ð4, 10, 12 )

	)

242 
	#RCC_CFGR_PPRE1_BY_4
 
	`BSP_FLD32
Ð5, 10, 12 )

	)

243 
	#RCC_CFGR_PPRE1_BY_8
 
	`BSP_FLD32
Ð6, 10, 12 )

	)

244 
	#RCC_CFGR_PPRE1_BY_16
 
	`BSP_FLD32
Ð7, 10, 12 )

	)

246 
	#RCC_CFGR_PPRE2
 13

	)

247 
	#RCC_CFGR_PPRE2
 
	`BSP_MSK32
Ð13, 15 )

	)

248 
	#RCC_CFGR_PPRE2_BY_1
 0

	)

249 
	#RCC_CFGR_PPRE2_BY_2
 
	`BSP_FLD32
Ð4, 13, 15 )

	)

250 
	#RCC_CFGR_PPRE2_BY_4
 
	`BSP_FLD32
Ð5, 13, 15 )

	)

251 
	#RCC_CFGR_PPRE2_BY_8
 
	`BSP_FLD32
Ð6, 13, 15 )

	)

252 
	#RCC_CFGR_PPRE2_BY_16
 
	`BSP_FLD32
Ð7, 13, 15 )

	)

254 
	#RCC_CFGR_RTCPRE
Ð
v®
 ) 
	`BSP_FLD32
Ðv®, 16, 20 )

	)

255 
	#RCC_CFGR_RTCPRE_MSK
 
	`BSP_MSK32
Ð16, 20 )

	)

257 
	#RCC_CFGR_MCO1
 21

	)

258 
	#RCC_CFGR_MCO1_MSK
 
	`BSP_MSK32
Ð21, 22 )

	)

259 
	#RCC_CFGR_MCO1_HSI
 0

	)

260 
	#RCC_CFGR_MCO1_LSE
 
	`BSP_FLD32
Ð1, 21, 22 )

	)

261 
	#RCC_CFGR_MCO1_HSE
 
	`BSP_FLD32
Ð2, 21, 22 )

	)

262 
	#RCC_CFGR_MCO1_PLL
 
	`BSP_FLD32
Ð3, 21, 22 )

	)

264 
	#RCC_CFGR_I2SSRC
 
	`BSP_BIT32
Ð23 )

	)

266 
	#RCC_CFGR_MCO1PRE
 24

	)

267 
	#RCC_CFGR_MCO1PRE_MSK
 
	`BSP_MSK32
Ð24, 26 )

	)

268 
	#RCC_CFGR_MCO1PRE_BY_1
 0

	)

269 
	#RCC_CFGR_MCO1PRE_BY_2
 
	`BSP_FLD32
Ð4, 24, 26 )

	)

270 
	#RCC_CFGR_MCO1PRE_BY_3
 
	`BSP_FLD32
Ð5, 24, 26 )

	)

271 
	#RCC_CFGR_MCO1PRE_BY_4
 
	`BSP_FLD32
Ð6, 24, 26 )

	)

272 
	#RCC_CFGR_MCO1PRE_BY_5
 
	`BSP_FLD32
Ð7, 24, 26 )

	)

274 
	#RCC_CFGR_MCO2PRE
 27

	)

275 
	#RCC_CFGR_MCO2PRE_MSK
 
	`BSP_MSK32
Ð27, 29 )

	)

276 
	#RCC_CFGR_MCO2PRE_BY_1
 0

	)

277 
	#RCC_CFGR_MCO2PRE_BY_2
 
	`BSP_FLD32
Ð4, 27, 29 )

	)

278 
	#RCC_CFGR_MCO2PRE_BY_3
 
	`BSP_FLD32
Ð5, 27, 29 )

	)

279 
	#RCC_CFGR_MCO2PRE_BY_4
 
	`BSP_FLD32
Ð6, 27, 29 )

	)

280 
	#RCC_CFGR_MCO2PRE_BY_5
 
	`BSP_FLD32
Ð7, 27, 29 )

	)

282 
	#RCC_CFGR_MCO2
 30

	)

283 
	#RCC_CFGR_MCO2_MSK
 
	`BSP_MSK32
Ð30, 31 )

	)

284 
	#RCC_CFGR_MCO2_SYSCLK
 0

	)

285 
	#RCC_CFGR_MCO2_PLLI2S
 
	`BSP_FLD32
Ð1, 30, 31 )

	)

286 
	#RCC_CFGR_MCO2_HSE
 
	`BSP_FLD32
Ð2, 30, 31 )

	)

287 
	#RCC_CFGR_MCO2_PLL
 
	`BSP_FLD32
Ð3, 30, 31 )

	)

	@src/lib/libbsp/arm/stm32f4/include/stm32f4xxxx_syscfg.h

15 #iâdeà
LIBBSP_ARM_STM32F4_STM32F4XXXX_SYSCFG_H


16 
	#LIBBSP_ARM_STM32F4_STM32F4XXXX_SYSCFG_H


	)

18 
	~<b¥/uty.h
>

20 
	#EXTI_PORTA
 0

	)

21 
	#EXTI_PORTB
 1

	)

22 
	#EXTI_PORTC
 2

	)

23 
	#EXTI_PORTD
 3

	)

24 
	#EXTI_PORTE
 4

	)

25 
	#EXTI_PORTF
 5

	)

26 
	#EXTI_PORTG
 6

	)

27 
	#EXTI_PORTH
 7

	)

28 
	#EXTI_PORTI
 8

	)

30 
	s¡m32f4_syscfg_s
 {

31 
ut32_t
 
	mmemrmp
;

32 
	#STM32F4_SYSCFG_MEM_MODE
(
v®
è
	`BSP_FLD32
(v®, 0, 1)

	)

33 
	#STM32F4_SYSCFG_MEM_MODE_GET
(
»g
è
	`BSP_FLD32GET
Ôeg, 0, 1)

	)

34 
	#STM32F4_SYSCFG_MEM_MODE_SET
(
»g
, 
v®
è
	`BSP_FLD32SET
Ôeg, v®, 0, 1)

	)

35 
ut32_t
 
	mpmc
;

36 
	#STM32F4_SYSCFG_RMII_SEL
 
	`BSP_BIT32
(23)

	)

37 
ut32_t
 
	mextiü
[4];

38 
	#STM32F4_SYSCFG_EXTI0_IDX
 0

	)

39 
	#STM32F4_SYSCFG_EXTI0
(
v®
è
	`BSP_FLD32
(v®, 0, 3)

	)

40 
	#STM32F4_SYSCFG_EXTI0_GET
(
»g
è
	`BSP_FLD32GET
Ôeg, 0, 3)

	)

41 
	#STM32F4_SYSCFG_EXTI0_SET
(
»g
, 
v®
è
	`BSP_FLD32SET
Ôeg, v®, 0, 3)

	)

42 
	#STM32F4_SYSCFG_EXTI1_IDX
 0

	)

43 
	#STM32F4_SYSCFG_EXTI1
(
v®
è
	`BSP_FLD32
(v®, 4, 7)

	)

44 
	#STM32F4_SYSCFG_EXTI1_GET
(
»g
è
	`BSP_FLD32GET
Ôeg, 4, 7)

	)

45 
	#STM32F4_SYSCFG_EXTI1_SET
(
»g
, 
v®
è
	`BSP_FLD32SET
Ôeg, v®, 4, 7)

	)

46 
	#STM32F4_SYSCFG_EXTI2_IDX
 0

	)

47 
	#STM32F4_SYSCFG_EXTI2
(
v®
è
	`BSP_FLD32
(v®, 8, 11)

	)

48 
	#STM32F4_SYSCFG_EXTI2_GET
(
»g
è
	`BSP_FLD32GET
Ôeg, 8, 11)

	)

49 
	#STM32F4_SYSCFG_EXTI2_SET
(
»g
, 
v®
è
	`BSP_FLD32SET
Ôeg, v®, 8, 11)

	)

50 
	#STM32F4_SYSCFG_EXTI3_IDX
 0

	)

51 
	#STM32F4_SYSCFG_EXTI3
(
v®
è
	`BSP_FLD32
(v®, 12, 15)

	)

52 
	#STM32F4_SYSCFG_EXTI3_GET
(
»g
è
	`BSP_FLD32GET
Ôeg, 12, 15)

	)

53 
	#STM32F4_SYSCFG_EXTI3_SET
(
»g
, 
v®
è
	`BSP_FLD32SET
Ôeg, v®, 12, 15)

	)

54 
	#STM32F4_SYSCFG_EXTI4_IDX
 1

	)

55 
	#STM32F4_SYSCFG_EXTI4
(
v®
è
	`BSP_FLD32
(v®, 0, 3)

	)

56 
	#STM32F4_SYSCFG_EXTI4_GET
(
»g
è
	`BSP_FLD32GET
Ôeg, 0, 3)

	)

57 
	#STM32F4_SYSCFG_EXTI4_SET
(
»g
, 
v®
è
	`BSP_FLD32SET
Ôeg, v®, 0, 3)

	)

58 
	#STM32F4_SYSCFG_EXTI5_IDX
 1

	)

59 
	#STM32F4_SYSCFG_EXTI5
(
v®
è
	`BSP_FLD32
(v®, 4, 7)

	)

60 
	#STM32F4_SYSCFG_EXTI5_GET
(
»g
è
	`BSP_FLD32GET
Ôeg, 4, 7)

	)

61 
	#STM32F4_SYSCFG_EXTI5_SET
(
»g
, 
v®
è
	`BSP_FLD32SET
Ôeg, v®, 4, 7)

	)

62 
	#STM32F4_SYSCFG_EXTI6_IDX
 1

	)

63 
	#STM32F4_SYSCFG_EXTI6
(
v®
è
	`BSP_FLD32
(v®, 8, 11)

	)

64 
	#STM32F4_SYSCFG_EXTI6_GET
(
»g
è
	`BSP_FLD32GET
Ôeg, 8, 11)

	)

65 
	#STM32F4_SYSCFG_EXTI6_SET
(
»g
, 
v®
è
	`BSP_FLD32SET
Ôeg, v®, 8, 11)

	)

66 
	#STM32F4_SYSCFG_EXTI7_IDX
 1

	)

67 
	#STM32F4_SYSCFG_EXTI7
(
v®
è
	`BSP_FLD32
(v®, 12, 15)

	)

68 
	#STM32F4_SYSCFG_EXTI7_GET
(
»g
è
	`BSP_FLD32GET
Ôeg, 12, 15)

	)

69 
	#STM32F4_SYSCFG_EXTI7_SET
(
»g
, 
v®
è
	`BSP_FLD32SET
Ôeg, v®, 12, 15)

	)

70 
	#STM32F4_SYSCFG_EXTI8_IDX
 2

	)

71 
	#STM32F4_SYSCFG_EXTI8
(
v®
è
	`BSP_FLD32
(v®, 0, 3)

	)

72 
	#STM32F4_SYSCFG_EXTI8_GET
(
»g
è
	`BSP_FLD32GET
Ôeg, 0, 3)

	)

73 
	#STM32F4_SYSCFG_EXTI8_SET
(
»g
, 
v®
è
	`BSP_FLD32SET
Ôeg, v®, 0, 3)

	)

74 
	#STM32F4_SYSCFG_EXTI9_IDX
 2

	)

75 
	#STM32F4_SYSCFG_EXTI9
(
v®
è
	`BSP_FLD32
(v®, 4, 7)

	)

76 
	#STM32F4_SYSCFG_EXTI9_GET
(
»g
è
	`BSP_FLD32GET
Ôeg, 4, 7)

	)

77 
	#STM32F4_SYSCFG_EXTI9_SET
(
»g
, 
v®
è
	`BSP_FLD32SET
Ôeg, v®, 4, 7)

	)

78 
	#STM32F4_SYSCFG_EXTI10_IDX
 2

	)

79 
	#STM32F4_SYSCFG_EXTI10
(
v®
è
	`BSP_FLD32
(v®, 8, 11)

	)

80 
	#STM32F4_SYSCFG_EXTI10_GET
(
»g
è
	`BSP_FLD32GET
Ôeg, 8, 11)

	)

81 
	#STM32F4_SYSCFG_EXTI10_SET
(
»g
, 
v®
è
	`BSP_FLD32SET
Ôeg, v®, 8, 11)

	)

82 
	#STM32F4_SYSCFG_EXTI11_IDX
 2

	)

83 
	#STM32F4_SYSCFG_EXTI11
(
v®
è
	`BSP_FLD32
(v®, 12, 15)

	)

84 
	#STM32F4_SYSCFG_EXTI11_GET
(
»g
è
	`BSP_FLD32GET
Ôeg, 12, 15)

	)

85 
	#STM32F4_SYSCFG_EXTI11_SET
(
»g
, 
v®
è
	`BSP_FLD32SET
Ôeg, v®, 12, 15)

	)

86 
	#STM32F4_SYSCFG_EXTI12_IDX
 3

	)

87 
	#STM32F4_SYSCFG_EXTI12
(
v®
è
	`BSP_FLD32
(v®, 0, 3)

	)

88 
	#STM32F4_SYSCFG_EXTI12_GET
(
»g
è
	`BSP_FLD32GET
Ôeg, 0, 3)

	)

89 
	#STM32F4_SYSCFG_EXTI12_SET
(
»g
, 
v®
è
	`BSP_FLD32SET
Ôeg, v®, 0, 3)

	)

90 
	#STM32F4_SYSCFG_EXTI13_IDX
 3

	)

91 
	#STM32F4_SYSCFG_EXTI13
(
v®
è
	`BSP_FLD32
(v®, 4, 7)

	)

92 
	#STM32F4_SYSCFG_EXTI13_GET
(
»g
è
	`BSP_FLD32GET
Ôeg, 4, 7)

	)

93 
	#STM32F4_SYSCFG_EXTI13_SET
(
»g
, 
v®
è
	`BSP_FLD32SET
Ôeg, v®, 4, 7)

	)

94 
	#STM32F4_SYSCFG_EXTI14_IDX
 3

	)

95 
	#STM32F4_SYSCFG_EXTI14
(
v®
è
	`BSP_FLD32
(v®, 8, 11)

	)

96 
	#STM32F4_SYSCFG_EXTI14_GET
(
»g
è
	`BSP_FLD32GET
Ôeg, 8, 11)

	)

97 
	#STM32F4_SYSCFG_EXTI14_SET
(
»g
, 
v®
è
	`BSP_FLD32SET
Ôeg, v®, 8, 11)

	)

98 
	#STM32F4_SYSCFG_EXTI15_IDX
 3

	)

99 
	#STM32F4_SYSCFG_EXTI15
(
v®
è
	`BSP_FLD32
(v®, 12, 15)

	)

100 
	#STM32F4_SYSCFG_EXTI15_GET
(
»g
è
	`BSP_FLD32GET
Ôeg, 12, 15)

	)

101 
	#STM32F4_SYSCFG_EXTI15_SET
(
»g
, 
v®
è
	`BSP_FLD32SET
Ôeg, v®, 12, 15)

	)

102 
ut32_t
 
	mcmpü
;

103 
	#STM32F4_SYSCFG_CMPCR_READY
 
	`BSP_BIT32
(8)

	)

104 
	#STM32F4_SYSCFG_CMPCR_PD
 
	`BSP_BIT32
(0)

	)

105 } 
__©ibu__
 ((
·cked
));

106 
¡m32f4_syscfg_s
 
	t¡m32f4_syscfg
;

	@src/lib/libbsp/arm/stm32f4/include/stm32f4xxxx_tim.h

15 #iâdeà
LIBBSP_ARM_STM32F4_STM32F4XXXX_TIM_H


16 
	#LIBBSP_ARM_STM32F4_STM32F4XXXX_TIM_H


	)

18 
	~<b¥/uty.h
>

20 
	s¡m32f4_tim_s
 {

21 
ut16_t
 
	mü1
;

22 
	#STM32F4_TIMER_CR1_CKD_DIV
 0x0300

	)

23 
	#STM32F4_TIMER_CR1_CKD_DIV1
 0x0000

	)

24 
	#STM32F4_TIMER_CR1_CKD_DIV2
 0x0100

	)

25 
	#STM32F4_TIMER_CR1_CKD_DIV3
 0x0200

	)

26 
	#STM32F4_TIMER_CR1_ARPE
 
	`BSP_BIT16
(7)

	)

27 
	#STM32F4_TIMER_CR1_CMS
 0x0060

	)

28 
	#STM32F4_TIMER_CR1_CMS_EDGE
 0x0000

	)

29 
	#STM32F4_TIMER_CR1_CMS_CENTER1
 0x0020

	)

30 
	#STM32F4_TIMER_CR1_CMS_CENTER2
 0x0040

	)

31 
	#STM32F4_TIMER_CR1_CMS_CENTER3
 0x0060

	)

32 
	#STM32F4_TIMER_CR1_DIR
 
	`BSP_BIT16
(4)

	)

33 
	#STM32F4_TIMER_CR1_DIR_UP
 0x0000

	)

34 
	#STM32F4_TIMER_CR1_DIR_DOWN
 0x0010

	)

35 
	#STM32F4_TIMER_CR1_DIR_OPM
 0x0008

	)

36 
	#STM32F4_TIMER_CR1_DIR_OPM_CONT
 0x0000

	)

37 
	#STM32F4_TIMER_CR1_DIR_OPM_STOP
 0x0008

	)

38 
	#STM32F4_TIMER_CR1_DIR_URS
 0x0004

	)

39 
	#STM32F4_TIMER_CR1_DIR_UDIS
 0x0002

	)

40 
	#STM32F4_TIMER_CR1_DIR_UDIS_EN
 0x0000

	)

41 
	#STM32F4_TIMER_CR1_DIR_UDIS_DIS
 0x0002

	)

42 
	#STM32F4_TIMER_CR1_CEN
 0x0001

	)

43 
ut16_t
 
	m»£rved_02
;

44 
ut16_t
 
	mü2
;

45 
ut16_t
 
	m»£rved_06
;

46 
ut16_t
 
	msmü
;

47 
ut16_t
 
	m»£rved_0a
;

48 
ut16_t
 
	mdr
;

49 
	#STM32F4_TIMER_DIER_TDE
 
	`BSP_BIT16
(14)

50 
	#STM32F4_TIMER_DIER_CC4DE
 
	`BSP_BIT16
(12)

51 
	#STM32F4_TIMER_DIER_CC3DE
 
	`BSP_BIT16
(11)

52 
	#STM32F4_TIMER_DIER_CC2DE
 
	`BSP_BIT16
(10)

53 
	#STM32F4_TIMER_DIER_CC1DE
 
	`BSP_BIT16
(9)

54 
	#STM32F4_TIMER_DIER_UDE
 
	`BSP_BIT16
(8)

55 
	#STM32F4_TIMER_DIER_TIE
 
	`BSP_BIT16
(6)

56 
	#STM32F4_TIMER_DIER_CC4IE
 
	`BSP_BIT16
(4)

57 
	#STM32F4_TIMER_DIER_CC3IE
 
	`BSP_BIT16
(3)

58 
	#STM32F4_TIMER_DIER_CC2IE
 
	`BSP_BIT16
(2)

59 
	#STM32F4_TIMER_DIER_CC1IE
 
	`BSP_BIT16
(1)

60 
	#STM32F4_TIMER_DIER_UIE
 
	`BSP_BIT16
(0)

61 

	)

62 
ut16_t
 
	m»£rved_0e
;

63 
ut16_t
 
	m¤
;

64 
	#STM32F4_TIMER_SR_CC4OF
 
	`BSP_BIT16
(12)

65 
	#STM32F4_TIMER_SR_CC3OF
 
	`BSP_BIT16
(11)

66 
	#STM32F4_TIMER_SR_CC2OF
 
	`BSP_BIT16
(10)

67 
	#STM32F4_TIMER_SR_CC1OF
 
	`BSP_BIT16
(9)

68 
	#STM32F4_TIMER_SR_TIF
 
	`BSP_BIT16
(6)

69 
	#STM32F4_TIMER_SR_CC4IF
 
	`BSP_BIT16
(4)

70 
	#STM32F4_TIMER_SR_CC3IF
 
	`BSP_BIT16
(3)

71 
	#STM32F4_TIMER_SR_CC2IF
 
	`BSP_BIT16
(2)

72 
	#STM32F4_TIMER_SR_CC1IF
 
	`BSP_BIT16
(1)

73 
	#STM32F4_TIMER_SR_UIF
 
	`BSP_BIT16
(0)

74 
ut16_t
 
»£rved_12
;

	)

75 
ut16_t
 
	megr
;

76 
	#STM32F4_TIMER_EGR_TG
 
	`BSP_BIT16
(6)

77 
	#STM32F4_TIMER_EGR_CC4G
 
	`BSP_BIT16
(4)

78 
	#STM32F4_TIMER_EGR_CC3G
 
	`BSP_BIT16
(3)

79 
	#STM32F4_TIMER_EGR_CC2G
 
	`BSP_BIT16
(2)

80 
	#STM32F4_TIMER_EGR_CC1G
 
	`BSP_BIT16
(1)

81 
	#STM32F4_TIMER_EGR_UG
 
	`BSP_BIT16
(0)

82 
ut16_t
 
»£rved_16
;

	)

83 
ut16_t
 
	mccmr1
;

84 
	#STM32F4_TIMER_CCMR1_OC2CE
 
	`BSP_BIT16
(15)

85 
	#STM32F4_TIMER_CCMR1_OC2M
(
v®
è
	`BSP_FLD16
(v®, 12, 14)

	)

86 
	#STM32F4_TIMER_CCMR1_OC2M_GET
(
»g
è
	`BSP_FLD16GET
Ôeg, 12, 14)

	)

87 
	#STM32F4_TIMER_CCMR1_OC2M_SET
(
»g
, 
v®
è
	`BSP_FLD16SET
Ôeg, v®, 12, 14)

	)

88 
	#STM32F4_TIMER_CCMR1_OC2M_FROZEN
 
	`STM32F4_TIMER_CCMR1_OC2M
(0)

	)

89 
	#STM32F4_TIMER_CCMR1_OC2M_ACTIVE
 
	`STM32F4_TIMER_CCMR1_OC2M
(1)

	)

90 
	#STM32F4_TIMER_CCMR1_OC2M_INACTIVE
 
	`STM32F4_TIMER_CCMR1_OC2M
(2)

	)

91 
	#STM32F4_TIMER_CCMR1_OC2M_TOGGLE
 
	`STM32F4_TIMER_CCMR1_OC2M
(3)

	)

92 
	#STM32F4_TIMER_CCMR1_OC2M_FORCE_LOW
 
	`STM32F4_TIMER_CCMR1_OC2M
(4)

	)

93 
	#STM32F4_TIMER_CCMR1_OC2M_FORCE_HIGH
 
	`STM32F4_TIMER_CCMR1_OC2M
(5)

	)

94 
	#STM32F4_TIMER_CCMR1_OC2M_PWM1
 
	`STM32F4_TIMER_CCMR1_OC2M
(6)

	)

95 
	#STM32F4_TIMER_CCMR1_OC2M_PWM2
 
	`STM32F4_TIMER_CCMR1_OC2M
(7)

	)

96 
	#STM32F4_TIMER_CCMR1_OC2PE
 
	`BSP_BIT16
(11)

97 
	#STM32F4_TIMER_CCMR1_OC2FE
 
	`BSP_BIT16
(10)

98 
	#STM32F4_TIMER_CCMR1_CC2S
(
v®
è
	`BSP_FLD16
(v®, 8, 9)

	)

99 
	#STM32F4_TIMER_CCMR1_CC2S_GET
(
»g
è
	`BSP_FLD16GET
Ôeg, 8, 9)

	)

100 
	#STM32F4_TIMER_CCMR1_CC2S_SET
(
»g
, 
v®
è
	`BSP_FLD16SET
Ôeg, v®, 8, 9)

	)

101 
	#STM32F4_TIMER_CCMR1_CC2S_OUTPUT
 
	`STM32F4_TIMER_CCMR1_OC2S
(0)

	)

102 
	#STM32F4_TIMER_CCMR1_CC2S_TI2
 
	`STM32F4_TIMER_CCMR1_OC2S
(1)

	)

103 
	#STM32F4_TIMER_CCMR1_CC2S_TI1
 
	`STM32F4_TIMER_CCMR1_OC2S
(2)

	)

104 
	#STM32F4_TIMER_CCMR1_CC2S_TRC
 
	`STM32F4_TIMER_CCMR1_OC2S
(3)

	)

105 
	#STM32F4_TIMER_CCMR1_OC1CE
 
	`BSP_BIT16
(7)

106 
	#STM32F4_TIMER_CCMR1_OC1M
(
v®
è
	`BSP_FLD16
(v®, 4, 6)

	)

107 
	#STM32F4_TIMER_CCMR1_OC1M_GET
(
»g
è
	`BSP_FLD16GET
Ôeg, 4, 6)

	)

108 
	#STM32F4_TIMER_CCMR1_OC1M_SET
(
»g
, 
v®
è
	`BSP_FLD16SET
Ôeg, v®, 4, 6)

	)

109 
	#STM32F4_TIMER_CCMR1_OC1M_FROZEN
 
	`STM32F4_TIMER_CCMR1_OC1M
(0)

	)

110 
	#STM32F4_TIMER_CCMR1_OC1M_ACTIVE
 
	`STM32F4_TIMER_CCMR1_OC1M
(1)

	)

111 
	#STM32F4_TIMER_CCMR1_OC1M_INACTIVE
 
	`STM32F4_TIMER_CCMR1_OC1M
(2)

	)

112 
	#STM32F4_TIMER_CCMR1_OC1M_TOGGLE
 
	`STM32F4_TIMER_CCMR1_OC1M
(3)

	)

113 
	#STM32F4_TIMER_CCMR1_OC1M_FORCE_LOW
 
	`STM32F4_TIMER_CCMR1_OC1M
(4)

	)

114 
	#STM32F4_TIMER_CCMR1_OC1M_FORCE_HIGH
 
	`STM32F4_TIMER_CCMR1_OC1M
(5)

	)

115 
	#STM32F4_TIMER_CCMR1_OC1M_PWM1
 
	`STM32F4_TIMER_CCMR1_OC1M
(6)

	)

116 
	#STM32F4_TIMER_CCMR1_OC1M_PWM2
 
	`STM32F4_TIMER_CCMR1_OC1M
(7)

	)

117 
	#STM32F4_TIMER_CCMR1_OC1PE
 
	`BSP_BIT16
(3)

118 
	#STM32F4_TIMER_CCMR1_OC1FE
 
	`BSP_BIT16
(2)

119 
	#STM32F4_TIMER_CCMR1_CC1S
(
v®
è
	`BSP_FLD16
(v®, 0, 1)

	)

120 
	#STM32F4_TIMER_CCMR1_CC1S_GET
(
»g
è
	`BSP_FLD16GET
Ôeg, 0, 1)

	)

121 
	#STM32F4_TIMER_CCMR1_CC1S_SET
(
»g
, 
v®
è
	`BSP_FLD16SET
Ôeg, v®, 0, 1)

	)

122 
	#STM32F4_TIMER_CCMR1_CC1S_OUTPUT
 
	`STM32F4_TIMER_CCMR1_OC1S
(0)

	)

123 
	#STM32F4_TIMER_CCMR1_CC1S_TI2
 
	`STM32F4_TIMER_CCMR1_OC1S
(1)

	)

124 
	#STM32F4_TIMER_CCMR1_CC1S_TI1
 
	`STM32F4_TIMER_CCMR1_OC1S
(2)

	)

125 
	#STM32F4_TIMER_CCMR1_CC1S_TRC
 
	`STM32F4_TIMER_CCMR1_OC1S
(3)

	)

126 
ut16_t
 
	m»£rved_1a
;

127 
ut16_t
 
	mccmr2
;

128 
	#STM32F4_TIMER_CCMR2_OC4CE
 
	`BSP_BIT16
(15)

129 
	#STM32F4_TIMER_CCMR2_OC4M
(
v®
è
	`BSP_FLD16
(v®, 12, 14)

	)

130 
	#STM32F4_TIMER_CCMR2_OC4M_GET
(
»g
è
	`BSP_FLD16GET
Ôeg, 12, 14)

	)

131 
	#STM32F4_TIMER_CCMR2_OC4M_SET
(
»g
, 
v®
è
	`BSP_FLD16SET
Ôeg, v®, 12, 14)

	)

132 
	#STM32F4_TIMER_CCMR2_OC4M_FROZEN
 
	`STM32F4_TIMER_CCMR2_OC4M
(0)

	)

133 
	#STM32F4_TIMER_CCMR2_OC4M_ACTIVE
 
	`STM32F4_TIMER_CCMR2_OC4M
(1)

	)

134 
	#STM32F4_TIMER_CCMR2_OC4M_INACTIVE
 
	`STM32F4_TIMER_CCMR2_OC4M
(2)

	)

135 
	#STM32F4_TIMER_CCMR2_OC4M_TOGGLE
 
	`STM32F4_TIMER_CCMR2_OC4M
(3)

	)

136 
	#STM32F4_TIMER_CCMR2_OC4M_FORCE_LOW
 
	`STM32F4_TIMER_CCMR2_OC4M
(4)

	)

137 
	#STM32F4_TIMER_CCMR2_OC4M_FORCE_HIGH
 
	`STM32F4_TIMER_CCMR2_OC4M
(5)

	)

138 
	#STM32F4_TIMER_CCMR2_OC4M_PWM1
 
	`STM32F4_TIMER_CCMR2_OC4M
(6)

	)

139 
	#STM32F4_TIMER_CCMR2_OC4M_PWM2
 
	`STM32F4_TIMER_CCMR2_OC4M
(7)

	)

140 
	#STM32F4_TIMER_CCMR2_OC4PE
 
	`BSP_BIT16
(11)

141 
	#STM32F4_TIMER_CCMR2_OC4FE
 
	`BSP_BIT16
(10)

142 
	#STM32F4_TIMER_CCMR2_CC4S
(
v®
è
	`BSP_FLD16
(v®, 8, 9)

	)

143 
	#STM32F4_TIMER_CCMR2_CC4S_GET
(
»g
è
	`BSP_FLD16GET
Ôeg, 8, 9)

	)

144 
	#STM32F4_TIMER_CCMR2_CC4S_SET
(
»g
, 
v®
è
	`BSP_FLD16SET
Ôeg, v®, 8, 9)

	)

145 
	#STM32F4_TIMER_CCMR2_CC4S_OUTPUT
 
	`STM32F4_TIMER_CCMR2_OC4S
(0)

	)

146 
	#STM32F4_TIMER_CCMR2_CC4S_TI2
 
	`STM32F4_TIMER_CCMR2_OC4S
(1)

	)

147 
	#STM32F4_TIMER_CCMR2_CC4S_TI1
 
	`STM32F4_TIMER_CCMR2_OC4S
(2)

	)

148 
	#STM32F4_TIMER_CCMR2_CC4S_TRC
 
	`STM32F4_TIMER_CCMR2_OC4S
(3)

	)

149 
	#STM32F4_TIMER_CCMR2_OC3CE
 
	`BSP_BIT16
(7)

150 
	#STM32F4_TIMER_CCMR2_OC3M
(
v®
è
	`BSP_FLD16
(v®, 4, 6)

	)

151 
	#STM32F4_TIMER_CCMR2_OC3M_GET
(
»g
è
	`BSP_FLD16GET
Ôeg, 4, 6)

	)

152 
	#STM32F4_TIMER_CCMR2_OC3M_SET
(
»g
, 
v®
è
	`BSP_FLD16SET
Ôeg, v®, 4, 6)

	)

153 
	#STM32F4_TIMER_CCMR2_OC3M_FROZEN
 
	`STM32F4_TIMER_CCMR2_OC3M
(0)

	)

154 
	#STM32F4_TIMER_CCMR2_OC3M_ACTIVE
 
	`STM32F4_TIMER_CCMR2_OC3M
(1)

	)

155 
	#STM32F4_TIMER_CCMR2_OC3M_INACTIVE
 
	`STM32F4_TIMER_CCMR2_OC3M
(2)

	)

156 
	#STM32F4_TIMER_CCMR2_OC3M_TOGGLE
 
	`STM32F4_TIMER_CCMR2_OC3M
(3)

	)

157 
	#STM32F4_TIMER_CCMR2_OC3M_FORCE_LOW
 
	`STM32F4_TIMER_CCMR2_OC3M
(4)

	)

158 
	#STM32F4_TIMER_CCMR2_OC3M_FORCE_HIGH
 
	`STM32F4_TIMER_CCMR2_OC3M
(5)

	)

159 
	#STM32F4_TIMER_CCMR2_OC3M_PWM1
 
	`STM32F4_TIMER_CCMR2_OC3M
(6)

	)

160 
	#STM32F4_TIMER_CCMR2_OC3M_PWM2
 
	`STM32F4_TIMER_CCMR2_OC3M
(7)

	)

161 
	#STM32F4_TIMER_CCMR2_OC3PE
 
	`BSP_BIT16
(3)

162 
	#STM32F4_TIMER_CCMR2_OC3FE
 
	`BSP_BIT16
(2)

163 
	#STM32F4_TIMER_CCMR2_CC3S
(
v®
è
	`BSP_FLD16
(v®, 0, 1)

	)

164 
	#STM32F4_TIMER_CCMR2_CC3S_GET
(
»g
è
	`BSP_FLD16GET
Ôeg, 0, 1)

	)

165 
	#STM32F4_TIMER_CCMR2_CC3S_SET
(
»g
, 
v®
è
	`BSP_FLD16SET
Ôeg, v®, 0, 1)

	)

166 
	#STM32F4_TIMER_CCMR2_CC3S_OUTPUT
 
	`STM32F4_TIMER_CCMR2_OC3S
(0)

	)

167 
	#STM32F4_TIMER_CCMR2_CC3S_TI2
 
	`STM32F4_TIMER_CCMR2_OC3S
(1)

	)

168 
	#STM32F4_TIMER_CCMR2_CC3S_TI1
 
	`STM32F4_TIMER_CCMR2_OC3S
(2)

	)

169 
	#STM32F4_TIMER_CCMR2_CC3S_TRC
 
	`STM32F4_TIMER_CCMR2_OC3S
(3)

	)

170 
ut16_t
 
	m»£rved_1e
;

171 
ut16_t
 
	mcûr
;

172 
	#STM32F4_TIMER_CCER_CC4NP
 
	`BSP_BIT16
(15)

173 
	#STM32F4_TIMER_CCER_CC4P
 
	`BSP_BIT16
(13)

174 
	#STM32F4_TIMER_CCER_CC4E
 
	`BSP_BIT16
(12)

175 
	#STM32F4_TIMER_CCER_CC3NP
 
	`BSP_BIT16
(11)

176 
	#STM32F4_TIMER_CCER_CC3P
 
	`BSP_BIT16
(9)

177 
	#STM32F4_TIMER_CCER_CC3E
 
	`BSP_BIT16
(8)

178 
	#STM32F4_TIMER_CCER_CC2NP
 
	`BSP_BIT16
(7)

179 
	#STM32F4_TIMER_CCER_CC2P
 
	`BSP_BIT16
(5)

180 
	#STM32F4_TIMER_CCER_CC2E
 
	`BSP_BIT16
(4)

181 
	#STM32F4_TIMER_CCER_CC1NP
 
	`BSP_BIT16
(3)

182 
	#STM32F4_TIMER_CCER_CC1P
 
	`BSP_BIT16
(1)

183 
	#STM32F4_TIMER_CCER_CC1E
 
	`BSP_BIT16
(0)

184 
ut16_t
 
»£rved_22
;

	)

185 
ut32_t
 
	mút
;

186 
	#STM32F4_TIMER_DR
(
v®
è
	`BSP_FLD32
(v®, 0, 31)

	)

187 
	#STM32F4_TIMER_DR_GET
(
»g
è
	`BSP_FLD32GET
Ôeg, 0, 31)

	)

188 
	#STM32F4_TIMER_DR_SET
(
»g
, 
v®
è
	`BSP_FLD32SET
Ôeg, v®, 0, 31)

	)

189 
ut16_t
 
	mpsc
;

190 
ut16_t
 
	m»£rved_2a
;

191 
ut32_t
 
	m¬r
;

192 
ut16_t
 
	mrü
;

193 
ut16_t
 
	mr£rved_32
;

194 
ut32_t
 
	mcü
[4];

195 
ut16_t
 
	mbd
;

196 
ut16_t
 
	m»£rved_46
;

197 
ut16_t
 
	mdü
;

198 
ut16_t
 
	m»£rved_4a
;

199 
ut16_t
 
	mdm¬
;

200 
ut16_t
 
	m»£rved_4e
;

201 
ut16_t
 
	mÜ
;

202 
ut16_t
 
	m»£rved_52
;

203 } 
__©ibu__
 ((
·cked
));

204 
¡m32f4_tim_s
 
	t¡m32f4_tim
;

	@src/lib/libbsp/arm/stm32f4/include/usart.h

21 #iâdeà
LIBBSP_ARM_STM32F4_USART_H


22 
	#LIBBSP_ARM_STM32F4_USART_H


	)

24 
	~<libch/£rl.h
>

33 #ifdeà
__ýlu¥lus


37 cÚ¡ 
cÚsÞe_âs
 
¡m32f4_u§¹_âs
;

41 #ifdeà
__ýlu¥lus


	@src/lib/libbsp/arm/stm32f4/startup/bspreset.c

15 
	~<¹ems.h
>

17 
	~<b¥/boÙÿrd.h
>

19 
	$b¥_»£t
()

21 
¹ems_¼u±_Ëv
 
Ëv
;

23 (è
Ëv
;

24 
	`¹ems_¼u±_di§bË
(
Ëv
);

27 
	}
}

	@src/lib/libbsp/arm/stm32f4/startup/bspstart.c

15 
	~<b¥.h
>

16 
	~<b¥/io.h
>

17 
	~<b¥/q.h
>

18 
	~<b¥/boÙÿrd.h
>

19 
	~<b¥/q-gic.h
>

20 
	~<as£¹.h
>

21 
	~<b¥/¡m32f4.h
>

23 #ifdeà
STM32F4_FAMILY_F4XXXX


25 
	~<b¥/¡m32f4xxxx_rcc.h
>

26 
	~<b¥/¡m32f4xxxx_æash.h
>

28 
¹ems_¡©us_code
 
£t_sy¡em_þk
(

29 
ut32_t
 
sys_þk
,

30 
ut32_t
 
h£_þk
,

31 
ut32_t
 
h£_æag


34 
	$_ma_osc
( )

36 vÞ©
¡m32f4_rcc
 *
rcc
 = 
STM32F4_RCC
;

37 
¹ems_¡©us_code
 
¡©us
;

40 
rcc
->
ü
 |ð
RCC_CR_HSION
;

42  !Ð
rcc
->
ü
 & 
RCC_CR_HSIRDY
 ) ) ;

44 
rcc
->
cfgr
 &= 0x00000300;

46 
rcc
->
ü
 &= 0xF0F0FFFD;

48 
¡©us
 = 
	`£t_sy¡em_þk
Ð
STM32F4_SYSCLK
 / 1000000L,

49 
STM32F4_HSE_OSCILLATOR
 / 1000000L,

52 
	`as£¹
Ð
	`¹ems_is_¡©us_sucûssful
Ð
¡©us
 ) );

53 
	}
}

81 
¹ems_¡©us_code
 
	$£t_sy¡em_þk
(

82 
ut32_t
 
sys_þk
,

83 
ut32_t
 
h£_þk
,

84 
ut32_t
 
h£_æag


87 vÞ©
¡m32f4_rcc
 *
rcc
 = 
STM32F4_RCC
;

88 vÞ©
¡m32f4_æash
 *
æash
 = 
STM32F4_FLASH
;

89 
timeout
 = 0;

91 
¤c_þk
 = 0;

93 
ut32_t
 
¶l_m
 = 0;

94 
ut32_t
 
¶l_n
 = 0;

95 
ut32_t
 
¶l_p
 = 0;

96 
ut32_t
 
¶l_q
 = 0;

98 
ut32_t
 
ahb´e
 = 0;

99 
ut32_t
 
­b´e1
 = 0;

100 
ut32_t
 
­b´e2
 = 0;

102 iàÐ
sys_þk
 =ð16 && 
h£_þk
 != 16 ) {

104 
rcc
->
ü
 |ð
RCC_CR_HSION
;

106  !Ð
rcc
->
ü
 & 
RCC_CR_HSIRDY
 ) ) ;

109 
rcc
->
cfgr
 &ð0x00000300 | 
RCC_CFGR_SW_HSI
;

110 
rcc
->
ü
 &= 0xF0F0FFFD;

111 
æash
->
aü
 = 0;

113  
RTEMS_SUCCESSFUL
;

116 iàÐ
sys_þk
 =ð
h£_þk
 ) {

118 
rcc
->
ü
 |ð
RCC_CR_HSEON
;

119 
timeout
 = 400;

121  !Ð
rcc
->
ü
 & 
RCC_CR_HSERDY
 ) && --
timeout
 ) ;

123 
	`as£¹
Ð
timeout
 != 0 );

125 iàÐ
timeout
 == 0 ) {

126  
RTEMS_TIMEOUT
;

130 
rcc
->
cfgr
 &= 0x00000300;

131 
rcc
->
cfgr
 |ð
RCC_CFGR_SW_HSE
;

133 
rcc
->
ü
 &ð0xF0F0FFFC | 
RCC_CR_HSEON
;

134 
æash
->
aü
 = 0;

136  
RTEMS_SUCCESSFUL
;

150 iàÐ
sys_þk
 > 180 ) {

151  
RTEMS_INVALID_NUMBER
;

152 } iàÐ
sys_þk
 >= 96 ) {

153 
¶l_n
 = 
sys_þk
 << 1;

154 
¶l_p
 = 
RCC_PLLCFGR_PLLP_BY_2
;

155 } iàÐ
sys_þk
 >= 48 ) {

156 
¶l_n
 = 
sys_þk
 << 2;

157 
¶l_p
 = 
RCC_PLLCFGR_PLLP_BY_4
;

158 } iàÐ
sys_þk
 >= 24 ) {

159 
¶l_n
 = 
sys_þk
 << 3;

160 
¶l_p
 = 
RCC_PLLCFGR_PLLP_BY_8
;

162  
RTEMS_INVALID_NUMBER
;

165 iàÐ
h£_þk
 =ð0 || 
h£_æag
 == 0 ) {

166 
¤c_þk
 = 16;

167 
h£_æag
 = 0;

169 
¤c_þk
 = 
h£_þk
;

172 
¶l_m
 = 
¤c_þk
;

177 
¶l_q
 = ( (èÐ
¤c_þk
 * 
¶l_n
 ) ) / 
¶l_m
 / 48;

179 iàÐ
¶l_q
 < 2 ) {

180 
¶l_q
 = 2;

184 
­b´e1
 = ( 
sys_þk
 * 100 ) / 42;

186 iàÐ
­b´e1
 <= 100 ) {

187 
­b´e1
 = 
RCC_CFGR_PPRE1_BY_1
;

188 } iàÐ
­b´e1
 <= 200 ) {

189 
­b´e1
 = 
RCC_CFGR_PPRE1_BY_2
;

190 } iàÐ
­b´e1
 <= 400 ) {

191 
­b´e1
 = 
RCC_CFGR_PPRE1_BY_4
;

192 } iàÐ
­b´e1
 <= 800 ) {

193 
­b´e1
 = 
RCC_CFGR_PPRE1_BY_8
;

194 } iàÐ
­b´e1
 ) {

195 
­b´e1
 = 
RCC_CFGR_PPRE1_BY_16
;

199 
­b´e2
 = ( 
sys_þk
 * 100 ) / 84;

201 iàÐ
­b´e2
 <= 100 ) {

202 
­b´e2
 = 
RCC_CFGR_PPRE2_BY_1
;

203 } iàÐ
­b´e2
 <= 200 ) {

204 
­b´e2
 = 
RCC_CFGR_PPRE2_BY_2
;

205 } iàÐ
­b´e2
 <= 400 ) {

206 
­b´e2
 = 
RCC_CFGR_PPRE2_BY_4
;

207 } iàÐ
­b´e2
 <= 800 ) {

208 
­b´e2
 = 
RCC_CFGR_PPRE2_BY_8
;

210 
­b´e2
 = 
RCC_CFGR_PPRE2_BY_16
;

213 
rcc
->
ü
 |ð
RCC_CR_HSION
;

215  ( !Ð
rcc
->
ü
 & 
RCC_CR_HSIRDY
 ) ) ) ;

218 
rcc
->
cfgr
 &= 0x00000300;

219 
rcc
->
cfgr
 |ð
RCC_CFGR_SW_HSI
;

221  ( ( 
rcc
->
cfgr
 & 
RCC_CFGR_SWS_MSK
 ) !ð
RCC_CFGR_SWS_HSI
 ) ) ;

224 
rcc
->
ü
 &ð~Ð
RCC_CR_PLLON
 | 
RCC_CR_PLLRDY
 );

227 iàÐ
h£_æag
 ) {

228 
rcc
->
ü
 |ð
RCC_CR_HSEON
;

229 
timeout
 = 400;

231  ( !Ð
rcc
->
ü
 & 
RCC_CR_HSERDY
 ) ) && 
timeout
-- ) ;

233 
	`as£¹
Ð
timeout
 != 0 );

235 iàÐ
timeout
 == 0 ) {

236  
RTEMS_TIMEOUT
;

240 
rcc
->
¶lcfgr
 &= 0xF0BC8000;

243 
rcc
->
¶lcfgr
 |ð
	`RCC_PLLCFGR_PLLM
Ð
¶l_m
 ) |

244 
	`RCC_PLLCFGR_PLLN
Ð
¶l_n
 ) |

245 
¶l_p
 |

247 Ð
h£_æag
 ? 
RCC_PLLCFGR_PLLSRC_HSE
 : 
RCC_PLLCFGR_PLLSRC_HSI
 )

249 
	`RCC_PLLCFGR_PLLQ
Ð
¶l_q
 );

252 
rcc
->
cfgr
 |ð
­b´e1
 |

253 
­b´e2
 |

254 
ahb´e
;

260 
æash
->
aü
 = 
	`STM32F4_FLASH_ACR_LATENCY
( 5 ) |

261 
STM32F4_FLASH_ACR_ICEN
 |

262 
STM32F4_FLASH_ACR_DCEN
 |

263 
STM32F4_FLASH_ACR_PRFTEN
;

266 
rcc
->
ü
 |ð
RCC_CR_PLLON
;

267 
timeout
 = 40000;

269  ( !Ð
rcc
->
ü
 & 
RCC_CR_PLLRDY
 ) ) && --
timeout
 ) ;

271 
	`as£¹
Ð
timeout
 != 0 );

273 iàÐ
timeout
 == 0 ) {

274  
RTEMS_TIMEOUT
;

278 
rcc
->
cfgr
 = (cc->cfg¸& ~
RCC_CFGR_SW_MSK
 ) | 
RCC_CFGR_SW_PLL
;

280  ( ( 
rcc
->
cfgr
 & 
RCC_CFGR_SWS_MSK
 ) !ð
RCC_CFGR_SWS_PLL
 ) ) ;

282  
RTEMS_SUCCESSFUL
;

283 
	}
}

287 #ifdeà
STM32F4_FAMILY_F10XXX


289 
	$_ma_osc
( )

292 
	}
}

296 
	$b¥_¡¬t
( )

298 
	`_ma_osc
();

300 
	`¡m32f4_gpio_£t_cÚfig_¬¿y
Ð&
¡m32f4_¡¬t_cÚfig_gpio
[ 0 ] );

302 
	`b¥_¼u±_lize
();

303 
	}
}

	@src/lib/libbsp/arm/stm32f4/startup/bspstarthook.c

15 
	~<b¥.h
>

16 
	~<b¥/¡¬t.h
>

18 
BSP_START_TEXT_SECTION
 
	$b¥_¡¬t_hook_0
()

21 
	}
}

23 
BSP_START_TEXT_SECTION
 
	$b¥_¡¬t_hook_1
()

25 
	`b¥_¡¬t_cÝy_£ùiÚs
();

26 
	`b¥_¡¬t_þr_bss
();

29 
	}
}

	@src/lib/libbsp/arm/stm32f4/startup/io.c

15 
	~<b¥/io.h
>

16 
	~<b¥/rcc.h
>

17 
	~<b¥/¡m32f4.h
>

19 
	~<¹ems.h
>

21 
RTEMS_STATIC_ASSERT
((
¡m32f4_gpio_cÚfig
è=ð4, 
size_of_cÚfig
);

23 
	$¡m32f4_gpio_£t_þock
(
p
, 
boÞ
 
£t
)

25 
pÜt
 = 
	`STM32F4_GPIO_PORT_OF_PIN
(
p
);

26 
¡m32f4_rcc_dex
 
dex
 = 
STM32F4_RCC_GPIOA
 + 
pÜt
;

28 
	`¡m32f4_rcc_£t_þock
(
dex
, 
£t
);

29 
	}
}

31 
	$þr_ªd_£t
(

32 vÞ©
ut32_t
 *
»g
,

33 
dex
,

34 
width
,

35 
ut32_t
 
£t


38 
ut32_t
 
mask
 = (1U << 
width
) - 1U;

39 
shiá
 = 
width
 * 
dex
;

40 
ut32_t
 
v®
 = *
»g
;

42 
v®
 &ð~(
mask
 << 
shiá
);

43 
v®
 |ð
£t
 << 
shiá
;

45 *
»g
 = 
v®
;

46 
	}
}

48 #ifdeà
STM32F4_FAMILY_F10XXX


49 
	#STM32F4_AFIO_REMAP_ENTRY
(
mod
, 
afio_»g_v
, 
¡¬t_v
, 
width_v
, 
v®ue_v
) \

50 [
mod
] = { \

51 .
afio_»g
 = 
afio_»g_v
, \

52 .
¡¬t
 = 
¡¬t_v
, \

53 .
width
 = 
width_v
, \

54 .
v®ue
 = 
v®ue_v
, \

55 .
»£rved
 = 0 \

56 }

	)

59 
ut16_t
 
	mafio_»g
 : 3;

60 
ut16_t
 
	m¡¬t
 : 5;

61 
ut16_t
 
	mwidth
 : 2;

62 
ut16_t
 
	mv®ue
 : 3;

63 
ut16_t
 
	m»£rved
 : 3;

64 } 
	t¡m32f4_afio_»m­_y
;

66 cÚ¡ 
¡m32f4_afio_»m­_y
 
	g¡m32f4_afio_»m­_bË
 [] = {

67 
STM32F4_AFIO_REMAP_ENTRY
(
STM32F4_GPIO_REMAP_DONT_CHANGE
, 0, 0, 0, 0),

68 
STM32F4_AFIO_REMAP_ENTRY
(
STM32F4_GPIO_REMAP_SPI1_0
, 1, 0, 1, 0),

69 
STM32F4_AFIO_REMAP_ENTRY
(
STM32F4_GPIO_REMAP_SPI1_1
, 1, 0, 1, 1),

70 
STM32F4_AFIO_REMAP_ENTRY
(
STM32F4_GPIO_REMAP_I2C1_0
, 1, 1, 1, 0),

71 
STM32F4_AFIO_REMAP_ENTRY
(
STM32F4_GPIO_REMAP_I2C1_1
, 1, 1, 1, 1),

72 
STM32F4_AFIO_REMAP_ENTRY
(
STM32F4_GPIO_REMAP_USART1_0
, 1, 2, 1, 0),

73 
STM32F4_AFIO_REMAP_ENTRY
(
STM32F4_GPIO_REMAP_USART1_1
, 1, 2, 1, 1),

74 
STM32F4_AFIO_REMAP_ENTRY
(
STM32F4_GPIO_REMAP_USART2_0
, 1, 3, 1, 0),

75 
STM32F4_AFIO_REMAP_ENTRY
(
STM32F4_GPIO_REMAP_USART2_1
, 1, 3, 1, 1),

76 
STM32F4_AFIO_REMAP_ENTRY
(
STM32F4_GPIO_REMAP_USART3_0
, 1, 4, 2, 0),

77 
STM32F4_AFIO_REMAP_ENTRY
(
STM32F4_GPIO_REMAP_USART3_1
, 1, 4, 2, 1),

78 
STM32F4_AFIO_REMAP_ENTRY
(
STM32F4_GPIO_REMAP_USART3_3
, 1, 4, 2, 3),

79 
STM32F4_AFIO_REMAP_ENTRY
(
STM32F4_GPIO_REMAP_TIM1_0
, 1, 6, 2, 0),

80 
STM32F4_AFIO_REMAP_ENTRY
(
STM32F4_GPIO_REMAP_TIM1_1
, 1, 6, 2, 1),

81 
STM32F4_AFIO_REMAP_ENTRY
(
STM32F4_GPIO_REMAP_TIM1_3
, 1, 6, 2, 3),

82 
STM32F4_AFIO_REMAP_ENTRY
(
STM32F4_GPIO_REMAP_TIM2_0
, 1, 8, 2, 0),

83 
STM32F4_AFIO_REMAP_ENTRY
(
STM32F4_GPIO_REMAP_TIM2_1
, 1, 8, 2, 1),

84 
STM32F4_AFIO_REMAP_ENTRY
(
STM32F4_GPIO_REMAP_TIM2_2
, 1, 8, 2, 2),

85 
STM32F4_AFIO_REMAP_ENTRY
(
STM32F4_GPIO_REMAP_TIM2_3
, 1, 8, 2, 3),

86 
STM32F4_AFIO_REMAP_ENTRY
(
STM32F4_GPIO_REMAP_TIM3_0
, 1, 10, 2, 0),

87 
STM32F4_AFIO_REMAP_ENTRY
(
STM32F4_GPIO_REMAP_TIM3_2
, 1, 10, 2, 2),

88 
STM32F4_AFIO_REMAP_ENTRY
(
STM32F4_GPIO_REMAP_TIM3_3
, 1, 10, 2, 3),

89 
STM32F4_AFIO_REMAP_ENTRY
(
STM32F4_GPIO_REMAP_TIM4_0
, 1, 12, 1, 0),

90 
STM32F4_AFIO_REMAP_ENTRY
(
STM32F4_GPIO_REMAP_TIM4_1
, 1, 12, 1, 1),

91 
STM32F4_AFIO_REMAP_ENTRY
(
STM32F4_GPIO_REMAP_CAN1_0
, 1, 13, 2, 0),

92 
STM32F4_AFIO_REMAP_ENTRY
(
STM32F4_GPIO_REMAP_CAN1_2
, 1, 13, 2, 2),

93 
STM32F4_AFIO_REMAP_ENTRY
(
STM32F4_GPIO_REMAP_CAN1_3
, 1, 13, 2, 3),

94 
STM32F4_AFIO_REMAP_ENTRY
(
STM32F4_GPIO_REMAP_PD01_0
, 1, 15, 1, 0),

95 
STM32F4_AFIO_REMAP_ENTRY
(
STM32F4_GPIO_REMAP_PD01_1
, 1, 15, 1, 1),

96 
STM32F4_AFIO_REMAP_ENTRY
(
STM32F4_GPIO_REMAP_TIM5CH4_0
, 1, 16, 1, 0),

97 
STM32F4_AFIO_REMAP_ENTRY
(
STM32F4_GPIO_REMAP_TIM5CH4_1
, 1, 16, 1, 1),

98 
STM32F4_AFIO_REMAP_ENTRY
(
STM32F4_GPIO_REMAP_ADC1_ETRGINJ_0
, 1, 17, 1, 0),

99 
STM32F4_AFIO_REMAP_ENTRY
(
STM32F4_GPIO_REMAP_ADC1_ETRGINJ_1
, 1, 17, 1, 1),

100 
STM32F4_AFIO_REMAP_ENTRY
(
STM32F4_GPIO_REMAP_ADC1_ETRGREG_0
, 1, 18, 1, 0),

101 
STM32F4_AFIO_REMAP_ENTRY
(
STM32F4_GPIO_REMAP_ADC1_ETRGREG_1
, 1, 18, 1, 1),

102 
STM32F4_AFIO_REMAP_ENTRY
(
STM32F4_GPIO_REMAP_ADC2_ETRGINJ_0
, 1, 19, 1, 0),

103 
STM32F4_AFIO_REMAP_ENTRY
(
STM32F4_GPIO_REMAP_ADC2_ETRGINJ_1
, 1, 19, 1, 1),

104 
STM32F4_AFIO_REMAP_ENTRY
(
STM32F4_GPIO_REMAP_ADC2_ETRGREG_0
, 1, 20, 1, 0),

105 
STM32F4_AFIO_REMAP_ENTRY
(
STM32F4_GPIO_REMAP_ADC2_ETRGREG_1
, 1, 20, 1, 1),

106 
STM32F4_AFIO_REMAP_ENTRY
(
STM32F4_GPIO_REMAP_ETH_0
, 1, 21, 1, 0),

107 
STM32F4_AFIO_REMAP_ENTRY
(
STM32F4_GPIO_REMAP_ETH_1
, 1, 21, 1, 1),

108 
STM32F4_AFIO_REMAP_ENTRY
(
STM32F4_GPIO_REMAP_CAN2_0
, 1, 22, 1, 0),

109 
STM32F4_AFIO_REMAP_ENTRY
(
STM32F4_GPIO_REMAP_CAN2_1
, 1, 22, 1, 1),

110 
STM32F4_AFIO_REMAP_ENTRY
(
STM32F4_GPIO_REMAP_MII_RMII_0
, 1, 23, 1, 0),

111 
STM32F4_AFIO_REMAP_ENTRY
(
STM32F4_GPIO_REMAP_MII_RMII_1
, 1, 23, 1, 1),

112 
STM32F4_AFIO_REMAP_ENTRY
(
STM32F4_GPIO_REMAP_SWJ_0
, 1, 24, 3, 0),

113 
STM32F4_AFIO_REMAP_ENTRY
(
STM32F4_GPIO_REMAP_SWJ_1
, 1, 24, 3, 1),

114 
STM32F4_AFIO_REMAP_ENTRY
(
STM32F4_GPIO_REMAP_SWJ_2
, 1, 24, 3, 2),

115 
STM32F4_AFIO_REMAP_ENTRY
(
STM32F4_GPIO_REMAP_SWJ_4
, 1, 24, 3, 4),

116 
STM32F4_AFIO_REMAP_ENTRY
(
STM32F4_GPIO_REMAP_SPI3_0
, 1, 28, 1, 0),

117 
STM32F4_AFIO_REMAP_ENTRY
(
STM32F4_GPIO_REMAP_SPI3_1
, 1, 28, 1, 1),

118 
STM32F4_AFIO_REMAP_ENTRY
(
STM32F4_GPIO_REMAP_TIM2ITR1_0
, 1, 29, 1, 0),

119 
STM32F4_AFIO_REMAP_ENTRY
(
STM32F4_GPIO_REMAP_TIM2ITR1_1
, 1, 29, 1, 1),

120 
STM32F4_AFIO_REMAP_ENTRY
(
STM32F4_GPIO_REMAP_PTP_PPS_0
, 1, 30, 1, 0),

121 
STM32F4_AFIO_REMAP_ENTRY
(
STM32F4_GPIO_REMAP_PTP_PPS_1
, 1, 30, 1, 1),

122 
STM32F4_AFIO_REMAP_ENTRY
(
STM32F4_GPIO_REMAP_TIM15_0
, 6, 0, 1, 0),

123 
STM32F4_AFIO_REMAP_ENTRY
(
STM32F4_GPIO_REMAP_TIM15_1
, 6, 0, 1, 1),

124 
STM32F4_AFIO_REMAP_ENTRY
(
STM32F4_GPIO_REMAP_TIM16_0
, 6, 1, 1, 0),

125 
STM32F4_AFIO_REMAP_ENTRY
(
STM32F4_GPIO_REMAP_TIM16_1
, 6, 1, 1, 1),

126 
STM32F4_AFIO_REMAP_ENTRY
(
STM32F4_GPIO_REMAP_TIM17_0
, 6, 2, 1, 0),

127 
STM32F4_AFIO_REMAP_ENTRY
(
STM32F4_GPIO_REMAP_TIM17_1
, 6, 2, 1, 1),

128 
STM32F4_AFIO_REMAP_ENTRY
(
STM32F4_GPIO_REMAP_CEC_0
, 6, 3, 1, 0),

129 
STM32F4_AFIO_REMAP_ENTRY
(
STM32F4_GPIO_REMAP_CEC_1
, 6, 3, 1, 1),

130 
STM32F4_AFIO_REMAP_ENTRY
(
STM32F4_GPIO_REMAP_TIM1_DMA_0
, 6, 4, 1, 0),

131 
STM32F4_AFIO_REMAP_ENTRY
(
STM32F4_GPIO_REMAP_TIM1_DMA_1
, 6, 4, 1, 1),

132 
STM32F4_AFIO_REMAP_ENTRY
(
STM32F4_GPIO_REMAP_TIM9_0
, 6, 5, 1, 0),

133 
STM32F4_AFIO_REMAP_ENTRY
(
STM32F4_GPIO_REMAP_TIM9_1
, 6, 5, 1, 1),

134 
STM32F4_AFIO_REMAP_ENTRY
(
STM32F4_GPIO_REMAP_TIM10_0
, 6, 6, 1, 0),

135 
STM32F4_AFIO_REMAP_ENTRY
(
STM32F4_GPIO_REMAP_TIM10_1
, 6, 6, 1, 1),

136 
STM32F4_AFIO_REMAP_ENTRY
(
STM32F4_GPIO_REMAP_TIM11_0
, 6, 7, 1, 0),

137 
STM32F4_AFIO_REMAP_ENTRY
(
STM32F4_GPIO_REMAP_TIM11_1
, 6, 7, 1, 1),

138 
STM32F4_AFIO_REMAP_ENTRY
(
STM32F4_GPIO_REMAP_TIM13_0
, 6, 8, 1, 0),

139 
STM32F4_AFIO_REMAP_ENTRY
(
STM32F4_GPIO_REMAP_TIM13_1
, 6, 8, 1, 1),

140 
STM32F4_AFIO_REMAP_ENTRY
(
STM32F4_GPIO_REMAP_TIM14_0
, 6, 9, 1, 0),

141 
STM32F4_AFIO_REMAP_ENTRY
(
STM32F4_GPIO_REMAP_TIM14_1
, 6, 9, 1, 1),

142 
STM32F4_AFIO_REMAP_ENTRY
(
STM32F4_GPIO_REMAP_FSMC_0
, 6, 10, 1, 0),

143 
STM32F4_AFIO_REMAP_ENTRY
(
STM32F4_GPIO_REMAP_FSMC_1
, 6, 10, 1, 1),

144 
STM32F4_AFIO_REMAP_ENTRY
(
STM32F4_GPIO_REMAP_TIM67_DAC_DMA_0
, 6, 11, 1, 0),

145 
STM32F4_AFIO_REMAP_ENTRY
(
STM32F4_GPIO_REMAP_TIM67_DAC_DMA_1
, 6, 11, 1, 1),

146 
STM32F4_AFIO_REMAP_ENTRY
(
STM32F4_GPIO_REMAP_TIM12_0
, 6, 12, 1, 0),

147 
STM32F4_AFIO_REMAP_ENTRY
(
STM32F4_GPIO_REMAP_TIM12_1
, 6, 12, 1, 1),

148 
STM32F4_AFIO_REMAP_ENTRY
(
STM32F4_GPIO_REMAP_MISC_0
, 6, 13, 1, 0),

149 
STM32F4_AFIO_REMAP_ENTRY
(
STM32F4_GPIO_REMAP_MISC_1
, 6, 13, 1, 1),

152 
	$£t_»m­_cÚfig
(
¡m32f4_gpio_»m­
 
»m­
)

154 if(
»m­
 !ð
STM32F4_GPIO_REMAP_DONT_CHANGE
)

156 
¡m32f4_afio_»m­_y
 
y
 = 
¡m32f4_afio_»m­_bË
[
»m­
];

157 vÞ©
¡m32f4_afio
 *
afio
 = 
STM32F4_AFIO
;

158 vÞ©
ut32_t
 *
»g
 = ((ut32_t*è
afio
è+ 
y
.
afio_»g
;

159 
ut32_t
 
mask
 = (1 << 
y
.
width
) - 1;

160 
ut32_t
 
v®ue
 = *
»g
;

162 
v®ue
 &ð
mask
 << 
y
.
¡¬t
;

163 
v®ue
 |ð
y
.v®u<<Áry.
¡¬t
;

165 *
»g
 = 
v®ue
;

167 
	}
}

171 
	$£t_cÚfig
(
p
, cÚ¡ 
¡m32f4_gpio_cÚfig
 *
cÚfig
)

173 
pÜt
 = 
	`STM32F4_GPIO_PORT_OF_PIN
(
p
);

174 vÞ©
¡m32f4_gpio
 *
gpio
 = 
	`STM32F4_GPIO
(
pÜt
);

175 
dex
 = 
	`STM32F4_GPIO_INDEX_OF_PIN
(
p
);

176 
¹ems_¼u±_Ëv
 
Ëv
;

177 
£t_Ü_þr_off£t
 = 
cÚfig
->
flds
.
ouut
 ? 0 : 16;

178 #ifdeà
STM32F4_FAMILY_F4XXXX


179 
af_»g
 = 
dex
 >> 3;

180 
af_dex
 = 
dex
 & 0x7;

182 
	`¹ems_¼u±_di§bË
(
Ëv
);

183 
gpio
->
b¤r
 = 1U << (
dex
 + 
£t_Ü_þr_off£t
);

184 
	`þr_ªd_£t
(&
gpio
->
pupdr
, 
dex
, 2, 
cÚfig
->
flds
.
pupd
);

185 
	`þr_ªd_£t
(&
gpio
->
Ùy³r
, 
dex
, 1, 
cÚfig
->
flds
.
Ùy³
);

186 
	`þr_ªd_£t
(&
gpio
->
o¥dr
, 
dex
, 2, 
cÚfig
->
flds
.
o¥d
);

187 
	`þr_ªd_£t
(&
gpio
->
aä
 [
af_»g
], 
af_dex
, 4, 
cÚfig
->
flds
.
af
);

188 
	`þr_ªd_£t
(&
gpio
->
mod
, 
dex
, 2, 
cÚfig
->
flds
.
mode
);

189 
	`¹ems_¼u±_abË
(
Ëv
);

192 #ifdeà
STM32F4_FAMILY_F10XXX


193 
ü_»g
 = 
dex
 >> 3;

194 
ü_dex
 = 
dex
 & 0x7;

196 
	`¹ems_¼u±_di§bË
(
Ëv
);

197 
gpio
->
b¤r
 = 1U << (
dex
 + 
£t_Ü_þr_off£t
);

198 
	`þr_ªd_£t
(&
gpio
->
ü
[
ü_»g
], 
ü_dex
, 4,

199 (
cÚfig
->
flds
.
úf
 << 2è| cÚfig->flds.
mode
);

200 
	`£t_»m­_cÚfig
(
cÚfig
->
flds
.
»m­
);

201 
	`¹ems_¼u±_abË
(
Ëv
);

204 
	}
}

206 
	$¡m32f4_gpio_£t_cÚfig
(cÚ¡ 
¡m32f4_gpio_cÚfig
 *
cÚfig
)

208 
cu¼t
 = 
cÚfig
->
flds
.
p_f¡
;

209 
Ï¡
 = 
cÚfig
->
flds
.
p_Ï¡
;

211 #ifdeà
STM32F4_FAMILY_F10XXX


212 
	`¡m32f4_rcc_£t_þock
(
STM32F4_RCC_AFIO
, 
ue
);

215 
cu¼t
 <ð
Ï¡
) {

216 
	`¡m32f4_gpio_£t_þock
(
cu¼t
, 
ue
);

217 
	`£t_cÚfig
(
cu¼t
, 
cÚfig
);

218 ++
cu¼t
;

220 
	}
}

222 
	$¡m32f4_gpio_£t_cÚfig_¬¿y
(cÚ¡ 
¡m32f4_gpio_cÚfig
 *
cÚfigs
)

224 
¡m32f4_gpio_cÚfig
 
rm®
 = 
STM32F4_GPIO_CONFIG_TERMINAL
;

226 
cÚfigs
->
v®ue
 !ð
rm®
.value) {

227 
	`¡m32f4_gpio_£t_cÚfig
(
cÚfigs
);

228 ++
cÚfigs
;

230 
	}
}

232 
	$¡m32f4_gpio_£t_ouut
(
p
, 
boÞ
 
£t
)

234 
pÜt
 = 
	`STM32F4_GPIO_PORT_OF_PIN
(
p
);

235 vÞ©
¡m32f4_gpio
 *
gpio
 = 
	`STM32F4_GPIO
(
pÜt
);

236 
dex
 = 
	`STM32F4_GPIO_INDEX_OF_PIN
(
p
);

237 
£t_Ü_þr_off£t
 = 
£t
 ? 0 : 16;

239 
gpio
->
b¤r
 = 1U << (
dex
 + 
£t_Ü_þr_off£t
);

240 
	}
}

242 
boÞ
 
	$¡m32f4_gpio_g_put
(
p
)

244 
pÜt
 = 
	`STM32F4_GPIO_PORT_OF_PIN
(
p
);

245 vÞ©
¡m32f4_gpio
 *
gpio
 = 
	`STM32F4_GPIO
(
pÜt
);

246 
dex
 = 
	`STM32F4_GPIO_INDEX_OF_PIN
(
p
);

248  (
gpio
->
idr
 & (1U << 
dex
)) != 0;

249 
	}
}

	@src/lib/libbsp/arm/stm32f4/startup/rcc.c

15 
	~<b¥/rcc.h
>

16 
	~<b¥/¡m32f4.h
>

18 
	~<¹ems.h
>

20 
	$rcc_£t
(

21 
¡m32f4_rcc_dex
 
dex
,

22 
boÞ
 
£t
,

23 vÞ©
ut32_t
 *
»gs


26 
»g
 = 
dex
 >> 5;

27 
ut32_t
 
Úe
 = 1;

28 
ut32_t
 
b
 = 
Úe
 << (
dex
 & 0x1f);

29 
¹ems_¼u±_Ëv
 
Ëv
;

30 
ut32_t
 
v®
;

32 
	`¹ems_¼u±_di§bË
(
Ëv
);

33 
v®
 = 
»gs
 [
»g
];

34 ià(
£t
) {

35 
v®
 |ð
b
;

37 
v®
 &ð~
b
;

39 
»gs
 [
»g
] = 
v®
;

40 
	`¹ems_¼u±_abË
(
Ëv
);

41 
	}
}

43 
	$¡m32f4_rcc_»£t
(
¡m32f4_rcc_dex
 
dex
)

45 
	`¡m32f4_rcc_£t_»£t
(
dex
, 
ue
);

46 
	`¡m32f4_rcc_£t_»£t
(
dex
, 
çl£
);

47 
	}
}

49 
	$¡m32f4_rcc_£t_»£t
(
¡m32f4_rcc_dex
 
dex
, 
boÞ
 
£t
)

51 vÞ©
¡m32f4_rcc
 *
rcc
 = 
STM32F4_RCC
;

53 #ifdeà
STM32F4_FAMILY_F4XXXX


54 
	`rcc_£t
(
dex
, 
£t
, &
rcc
->
ahbr¡r
 [0]);

56 #ifdeà
STM32F4_FAMILY_F10XXX


58 
	`rcc_£t
(
dex
, 
£t
, &
rcc
->
c
);

60 
	}
}

62 
	$¡m32f4_rcc_£t_þock
(
¡m32f4_rcc_dex
 
dex
, 
boÞ
 
£t
)

64 vÞ©
¡m32f4_rcc
 *
rcc
 = 
STM32F4_RCC
;

66 
	`rcc_£t
(
dex
, 
£t
, &
rcc
->
ahbr
 [0]);

67 
	}
}

69 #ifdeà
STM32F4_FAMILY_F4XXXX


70 
	$¡m32f4_rcc_£t_low_pow_þock
(
¡m32f4_rcc_dex
 
dex
, 
boÞ
 
£t
)

72 vÞ©
¡m32f4_rcc
 *
rcc
 = 
STM32F4_RCC
;

74 
	`rcc_£t
(
dex
, 
£t
, &
rcc
->
ahbÍr
 [0]);

75 
	}
}

	@src/lib/libbsp/arm/stm32f4/startup/start-config-io.c

15 
	~<b¥/io.h
>

16 
	~<b¥.h
>

18 cÚ¡ 
¡m32f4_gpio_cÚfig
 
	g¡m32f4_¡¬t_cÚfig_gpio
 [] = {

19 #ifdeà
STM32F4_FAMILY_F4XXXX


20 #ifdeà
STM32F4_ENABLE_USART_1


21 
STM32F4_PIN_USART1_TX_PA9
,

22 
STM32F4_PIN_USART1_RX_PA10
,

24 #ifdeà
STM32F4_ENABLE_USART_2


25 
STM32F4_PIN_USART2_TX_PA2
,

26 
STM32F4_PIN_USART2_RX_PA3
,

28 #ifdeà
STM32F4_ENABLE_USART_3


29 
STM32F4_PIN_USART3_TX_PD8
,

30 
STM32F4_PIN_USART3_RX_PD9
,

32 #ifdeà
STM32F4_ENABLE_UART_4


33 
STM32F4_PIN_UART4_TX_PA0
,

34 
STM32F4_PIN_UART4_RX_PA1
,

36 #ifdeà
STM32F4_ENABLE_UART_5


37 
STM32F4_PIN_UART5_TX_PC12
,

38 
STM32F4_PIN_UART5_RX_PD2
,

40 #ifdeà
STM32F4_ENABLE_USART_6


41 
STM32F4_PIN_USART6_TX_PC6
,

42 
STM32F4_PIN_USART6_RX_PC7
,

44 #ifdeà
STM32F4_ENABLE_I2C1


45 #rÜ 
NÙ
 
im¶emd
.

47 #ifdeà
STM32F4_ENABLE_I2C2


48 #rÜ 
NÙ
 
im¶emd
.

51 #ifdeà
STM32F4_FAMILY_F10XXX


52 #ifdeà
STM32F4_ENABLE_USART_1


53 
STM32F4_PIN_USART1_TX_MAP_0
,

54 
STM32F4_PIN_USART1_RX_MAP_0
,

56 #ifdeà
STM32F4_ENABLE_USART_2


57 
STM32F4_PIN_USART2_TX_MAP_0
,

58 
STM32F4_PIN_USART2_RX_MAP_0
,

60 #ifdeà
STM32F4_ENABLE_USART_3


61 
STM32F4_PIN_USART3_TX_MAP_0
,

62 
STM32F4_PIN_USART3_RX_MAP_0
,

64 #ifdeà
STM32F4_ENABLE_UART_4


65 
STM32F4_PIN_UART4_TX
,

66 
STM32F4_PIN_UART4_RX
,

68 #ifdeà
STM32F4_ENABLE_UART_5


69 
STM32F4_PIN_UART5_TX
,

70 
STM32F4_PIN_UART5_RX
,

72 #ifdeà
STM32F4_ENABLE_USART_6


73 #rÜ 
STM32F10XXX
 
has
 
no
 
USART
 6

75 #ifdeà
STM32F4_ENABLE_I2C1


76 
STM32F4_PIN_I2C1_SCL_MAP0
,

77 
STM32F4_PIN_I2C1_SDA_MAP0
,

79 #ifdeà
STM32F4_ENABLE_I2C2


80 
STM32F4_PIN_I2C2_SCL
,

81 
STM32F4_PIN_I2C2_SDA
,

84 
STM32F4_GPIO_CONFIG_TERMINAL


	@src/lib/libbsp/arm/xilinx-zynq/console/console-config.c

15 
	~<libch/£rl.h
>

17 
	~<b¥.h
>

18 
	~<b¥/q.h
>

19 
	~<b¥/zynq-u¬t.h
>

21 
cÚsÞe_tbl
 
	gCÚsÞe_CÚfigu¿tiÚ_PÜts
[] = {

23 .
sDeviûName
 = "/dev/ttyS0",

24 .
	gdeviûTy³
 = 
SERIAL_CUSTOM
,

25 .
	gpDeviûFns
 = &
zynq_u¬t_âs
,

26 .
	gdeviûProbe
 = 
NULL
,

27 .
	gpDeviûFlow
 = 
NULL
,

28 .
	gulM¬g
 = 0,

29 .
	gulHy¡esis
 = 0,

30 .
	gpDeviûP¬ams
 = (*) 115200,

31 .
	gulClPÜt1
 = 0xe0000000,

32 .
	gulClPÜt2
 = 0,

33 .
	gulD©aPÜt
 = 0,

34 .
	ggRegi¡
 = 
NULL
,

35 .
	g£tRegi¡
 = 
NULL
,

36 .
	ggD©a
 = 
NULL
,

37 .
	g£tD©a
 = 
NULL
,

38 .
	gulClock
 = 0,

39 .
	gulIÁVeùÜ
 = 
ZYNQ_IRQ_UART_0


41 .
	gsDeviûName
 = "/dev/ttyS1",

42 .
	gdeviûTy³
 = 
SERIAL_CUSTOM
,

43 .
	gpDeviûFns
 = &
zynq_u¬t_âs
,

44 .
	gdeviûProbe
 = 
NULL
,

45 .
	gpDeviûFlow
 = 
NULL
,

46 .
	gulM¬g
 = 0,

47 .
	gulHy¡esis
 = 0,

48 .
	gpDeviûP¬ams
 = (*) 115200,

49 .
	gulClPÜt1
 = 0xe0001000,

50 .
	gulClPÜt2
 = 0,

51 .
	gulD©aPÜt
 = 0,

52 .
	ggRegi¡
 = 
NULL
,

53 .
	g£tRegi¡
 = 
NULL
,

54 .
	ggD©a
 = 
NULL
,

55 .
	g£tD©a
 = 
NULL
,

56 .
	gulClock
 = 0,

57 .
	gulIÁVeùÜ
 = 
ZYNQ_IRQ_UART_1


61 
	gCÚsÞe_CÚfigu¿tiÚ_CouÁ
 =

62 
RTEMS_ARRAY_SIZE
(
CÚsÞe_CÚfigu¿tiÚ_PÜts
);

64 
	$ouut_ch¬
(
c
)

66 
mÜ
 = (è
CÚsÞe_PÜt_MÜ
;

67 cÚ¡ 
cÚsÞe_tbl
 *
ù
 = 
CÚsÞe_PÜt_Tbl
 !ð
NULL
 ?

68 
CÚsÞe_PÜt_Tbl
[
mÜ
] : &
CÚsÞe_CÚfigu¿tiÚ_PÜts
[minor];

69 cÚ¡ 
cÚsÞe_âs
 *
cf
 = 
ù
->
pDeviûFns
;

71 ià(
c
 == '\n') {

72 (*
cf
->
deviûWrePÞËd
)(
mÜ
, '\r');

75 (*
cf
->
deviûWrePÞËd
)(
mÜ
, 
c
);

76 
	}
}

78 
	$ouut_ch¬_
(
c
)

80 ià(
CÚsÞe_PÜt_Tbl
 =ð
NULL
) {

81 
mÜ
;

82 cÚ¡ 
cÚsÞe_âs
 *
cf
;

84 
	`b¥_cÚsÞe_£Ëù
();

86 
mÜ
 = (è
CÚsÞe_PÜt_MÜ
;

87 
cf
 = 
CÚsÞe_CÚfigu¿tiÚ_PÜts
[
mÜ
].
pDeviûFns
;

89 (*
cf
->
deviûInlize
)(
mÜ
);

92 
BSP_ouut_ch¬
 = 
ouut_ch¬
;

93 
	`ouut_ch¬
(
c
);

94 
	}
}

96 
BSP_ouut_ch¬_funùiÚ_ty³
 
	gBSP_ouut_ch¬
 = 
ouut_ch¬_
;

98 
BSP_pÞlg_gch¬_funùiÚ_ty³
 
	gBSP_pÞl_ch¬
 = 
NULL
;

	@src/lib/libbsp/arm/xilinx-zynq/console/zynq-uart.c

15 
	~<b¥/zynq-u¬t.h
>

16 
	~<b¥/zynq-u¬t-»gs.h
>

18 
	~<b¥Ýts.h
>

20 
	~<libch/£rsuµ.h
>

22 vÞ©
zynq_u¬t
 *
	$zynq_u¬t_g_»gs
(
mÜ
)

24 cÚ¡ 
cÚsÞe_tbl
 *
ù
 = 
CÚsÞe_PÜt_Tbl
 !ð
NULL
 ?

25 
CÚsÞe_PÜt_Tbl
[
mÜ
] : &
CÚsÞe_CÚfigu¿tiÚ_PÜts
[minor];

27  (vÞ©
zynq_u¬t
 *è
ù
->
ulClPÜt1
;

28 
	}
}

33 
ut32_t
 
	$zynq_u¬t_put_þock
(è
	`__©ibu__
 ((
wk
));

35 
ut32_t
 
	$zynq_u¬t_put_þock
()

37  
ZYNQ_CLOCK_UART
;

38 
	}
}

40 
	$zynq_ÿl_baud_¿
(
ut32_t
 
baud¿
,

41 
ut32_t
* 
brgr
,

42 
ut32_t
* 
bauddiv
,

43 
ut32_t
 
modeg
)

45 
ut32_t
 
brgr_v®ue
;

46 
ut32_t
 
ÿlcbaud¿
;

47 
ut32_t
 
baudrÜ
;

48 
ut32_t
 
be¡_rÜ
 = 0xFFFFFFFF;

49 
ut32_t
 
³rûÁrÜ
;

50 
ut32_t
 
bdiv
;

51 
ut32_t
 
putþk
 = 
	`zynq_u¬t_put_þock
();

57 ià((
baud¿
 * 2è> 
putþk
) {

63 if(
modeg
 & 
ZYNQ_UART_MODE_CLKS
) {

64 
putþk
 = inputclk / 8;

71 
bdiv
 = 4; bdiv < 255; bdiv++) {

76 
brgr_v®ue
 = 
putþk
 / (
baud¿
 * (
bdiv
 + 1));

81 
ÿlcbaud¿
 = 
putþk
/ (
brgr_v®ue
 * (
bdiv
 + 1));

86 ià(
baud¿
 > 
ÿlcbaud¿
) {

87 
baudrÜ
 = 
baud¿
 - 
ÿlcbaud¿
;

90 
baudrÜ
 = 
ÿlcbaud¿
 - 
baud¿
;

96 ià(
be¡_rÜ
 > 
baudrÜ
) {

97 *
brgr
 = 
brgr_v®ue
;

98 *
bauddiv
 = 
bdiv
;

99 
be¡_rÜ
 = 
baudrÜ
;

106 
³rûÁrÜ
 = (
be¡_rÜ
 * 100è/ 
baud¿
;

107 
	#XUARTPS_MAX_BAUD_ERROR_RATE
 3

	)

108 ià(
XUARTPS_MAX_BAUD_ERROR_RATE
 < 
³rûÁrÜ
) {

113 
	}
}

115 
	$zynq_u¬t_lize
(
mÜ
)

117 vÞ©
zynq_u¬t
 *
»gs
 = 
	`zynq_u¬t_g_»gs
(
mÜ
);

118 
ut32_t
 
brgr
 = 0x3e;

119 
ut32_t
 
bauddiv
 = 0x6;

121 
	`zynq_ÿl_baud_¿
(115200, &
brgr
, &
bauddiv
, 
»gs
->
mode
);

123 
»gs
->
cÚÞ
 &ð~(
ZYNQ_UART_CONTROL_RXEN
 | 
ZYNQ_UART_CONTROL_TXEN
);

124 
»gs
->
cÚÞ
 = 
ZYNQ_UART_CONTROL_RXDIS


125 | 
ZYNQ_UART_CONTROL_TXDIS


126 | 
ZYNQ_UART_CONTROL_RXRES


127 | 
ZYNQ_UART_CONTROL_TXRES
;

128 
»gs
->
mode
 = 
	`ZYNQ_UART_MODE_CHMODE
(
ZYNQ_UART_MODE_CHMODE_NORMAL
)

129 | 
	`ZYNQ_UART_MODE_PAR
(
ZYNQ_UART_MODE_PAR_NONE
)

130 | 
	`ZYNQ_UART_MODE_CHRL
(
ZYNQ_UART_MODE_CHRL_8
);

131 
»gs
->
baud_¿_g
 = 
	`ZYNQ_UART_BAUD_RATE_GEN_CD
(
brgr
);

132 
»gs
->
baud_¿_div
 = 
	`ZYNQ_UART_BAUD_RATE_DIV_BDIV
(
bauddiv
);

133 
»gs
->
rx_fifo_g_lvl
 = 
	`ZYNQ_UART_RX_FIFO_TRG_LVL_RTRIG
(0);

134 
»gs
->
rx_timeout
 = 
	`ZYNQ_UART_RX_TIMEOUT_RTO
(0);

135 
»gs
->
cÚÞ
 = 
ZYNQ_UART_CONTROL_RXEN


136 | 
ZYNQ_UART_CONTROL_TXEN


137 | 
ZYNQ_UART_CONTROL_RSTTO
;

138 
	}
}

140 
	$zynq_u¬t_f¡_Ý
(
majÜ
, 
mÜ
, *
¬g
)

142 
¹ems_libio_Ý_þo£_¬gs_t
 *
oc
 = (¹ems_libio_Ý_þo£_¬gs_*è
¬g
;

143 
¹ems_rmios_y
 *
y
 = (¹ems_rmios_y *è
oc
->
iÝ
->
d©a1
;

144 
cÚsÞe_d©a
 *
cd
 = &
CÚsÞe_PÜt_D©a
[
mÜ
];

145 cÚ¡ 
cÚsÞe_tbl
 *
ù
 = 
CÚsÞe_PÜt_Tbl
[
mÜ
];

147 
cd
->
rmios_d©a
 = 
y
;

148 
	`¹ems_rmios_£t_l_baud
(
y
, (
¹ems_rmios_baud_t
è
ù
->
pDeviûP¬ams
);

151 
	}
}

153 
	$zynq_u¬t_Ï¡_þo£
(
majÜ
, 
mÜ
, *
¬g
)

156 
	}
}

158 
	$zynq_u¬t_»ad_pÞËd
(
mÜ
)

160 vÞ©
zynq_u¬t
 *
»gs
 = 
	`zynq_u¬t_g_»gs
(
mÜ
);

162 ià((
»gs
->
chªÃl_¡s
 & 
ZYNQ_UART_CHANNEL_STS_REMPTY
) != 0) {

165  
	`ZYNQ_UART_TX_RX_FIFO_FIFO_GET
(
»gs
->
tx_rx_fifo
);

167 
	}
}

169 
	$zynq_u¬t_wre_pÞËd
(
mÜ
, 
c
)

171 vÞ©
zynq_u¬t
 *
»gs
 = 
	`zynq_u¬t_g_»gs
(
mÜ
);

173 (
»gs
->
chªÃl_¡s
 & 
ZYNQ_UART_CHANNEL_STS_TFUL
) != 0) {

177 
»gs
->
tx_rx_fifo
 = 
	`ZYNQ_UART_TX_RX_FIFO_FIFO
(
c
);

178 
	}
}

180 
ssize_t
 
	$zynq_u¬t_wre_suµÜt_pÞËd
(

181 
mÜ
,

182 cÚ¡ *
s
,

183 
size_t
 
n


186 
ssize_t
 
i
 = 0;

188 
i
 = 0; i < 
n
; ++i) {

189 
	`zynq_u¬t_wre_pÞËd
(
mÜ
, 
s
[
i
]);

192  
n
;

193 
	}
}

195 
	$zynq_u¬t_£t_©ibues
(
mÜ
, cÚ¡ 
rmios
 *
rm
)

198 vÞ©
zynq_u¬t
 *
»gs
 = 
	`zynq_u¬t_g_»gs
(
mÜ
);

199 
ut32_t
 
brgr
 = 0;

200 
ut32_t
 
bauddiv
 = 0;

201 
rc
;

203 
rc
 = 
	`zynq_ÿl_baud_¿
(115200, &
brgr
, &
bauddiv
, 
»gs
->
mode
);

204 ià(
rc
 != 0)

205  
rc
;

207 
»gs
->
cÚÞ
 &ð~(
ZYNQ_UART_CONTROL_RXEN
 | 
ZYNQ_UART_CONTROL_TXEN
);

208 
»gs
->
baud_¿_g
 = 
	`ZYNQ_UART_BAUD_RATE_GEN_CD
(
brgr
);

209 
»gs
->
baud_¿_div
 = 
	`ZYNQ_UART_BAUD_RATE_DIV_BDIV
(
bauddiv
);

210 
»gs
->
cÚÞ
 |ð
ZYNQ_UART_CONTROL_RXEN
 | 
ZYNQ_UART_CONTROL_TXEN
;

216 
	}
}

218 cÚ¡ 
cÚsÞe_âs
 
	gzynq_u¬t_âs
 = {

219 .
deviûProbe
 = 
libch_£rl_deçuÉ_´obe
,

220 .
	gdeviûF¡O³n
 = 
zynq_u¬t_f¡_Ý
,

221 .
	gdeviûLa¡Clo£
 = 
zynq_u¬t_Ï¡_þo£
,

222 .
	gdeviûRd
 = 
zynq_u¬t_»ad_pÞËd
,

223 .
	gdeviûWre
 = 
zynq_u¬t_wre_suµÜt_pÞËd
,

224 .
	gdeviûInlize
 = 
zynq_u¬t_lize
,

225 .
	gdeviûWrePÞËd
 = 
zynq_u¬t_wre_pÞËd
,

226 .
	gdeviûSAribus
 = 
zynq_u¬t_£t_©ibues
,

227 .
	gdeviûOuutU£sIÁru±s
 = 
çl£


	@src/lib/libbsp/arm/xilinx-zynq/i2c/cadence-i2c.c

15 
	~<b¥/ÿdû-i2c.h
>

16 
	~<b¥/ÿdû-i2c-»gs.h
>

18 
	~<¹ems/q-exnsiÚ.h
>

19 
	~<¹ems/scÜe/as£¹.h
>

21 
	~<dev/i2c/i2c.h
>

23 
	#CADENCE_I2C_DIV_A_MAX
 4

	)

25 
	#CADENCE_I2C_DIV_B_MAX
 64

	)

27 
	#CADENCE_I2C_FIFO_DEPTH
 16

	)

29 
	#CADENCE_I2C_DATA_IRQ_DEPTH
 (
CADENCE_I2C_FIFO_DEPTH
 - 2)

	)

31 
	#CADENCE_I2C_TRANSFER_SIZE_MAX
 255

	)

33 
	#CADENCE_I2C_TRANSFER_SIZE_ONCE_MAX
 (18 * 
CADENCE_I2C_DATA_IRQ_DEPTH
)

	)

35 
	#CADENCE_I2C_IRQ_ERROR
 \

36 (
CADENCE_I2C_IXR_ARB_LOST
 \

37 | 
CADENCE_I2C_IXR_RX_UNF
 \

38 | 
CADENCE_I2C_IXR_TX_OVR
 \

39 | 
CADENCE_I2C_IXR_RX_OVR
 \

40 | 
CADENCE_I2C_IXR_NACK
)

	)

42 
	#CADENCE_I2C_IRQ_USED
 \

43 (
CADENCE_I2C_IRQ_ERROR
 \

44 | 
CADENCE_I2C_IXR_DATA
 \

45 | 
CADENCE_I2C_IXR_COMP
)

	)

48 
i2c_bus
 
	mba£
;

49 vÞ©
ÿdû_i2c
 *
	m»gs
;

50 
i2c_msg
 *
	mmsgs
;

51 
ut32_t
 
	mmsg_todo
;

52 
ut32_t
 
	mcu¼t_msg_todo
;

53 
ut8_t
 *
	mcu¼t_msg_by
;

54 
ut32_t
 
	mcu¼t_todo
;

55 
ut32_t
 
	mq¡©us
;

56 
boÞ
 
	m»ad
;

57 
boÞ
 
	mhÞd
;

58 
¹ems_id
 
	msk_id
;

59 
ut32_t
 
	mput_þock
;

60 
¹ems_veùÜ_numb
 
	mq
;

61 } 
	tÿdû_i2c_bus
;

63 
	$ÿdû_i2c_di§bË_¼u±s
(vÞ©
ÿdû_i2c
 *
»gs
)

65 
»gs
->
qdi§bË
 = 0xffff;

66 
	}
}

68 
	$ÿdû_i2c_þr_q_¡©us
(vÞ©
ÿdû_i2c
 *
»gs
)

70 
»gs
->
q¡©us
 =egs->irqstatus;

71 
	}
}

73 
	$ÿdû_i2c_»£t
(
ÿdû_i2c_bus
 *
bus
)

75 vÞ©
ÿdû_i2c
 *
»gs
 = 
bus
->regs;

76 
ut32_t
 
v®
;

78 
	`ÿdû_i2c_di§bË_¼u±s
(
»gs
);

80 
v®
 = 
»gs
->
cÚÞ
;

81 
v®
 &ð~
CADENCE_I2C_CONTROL_HOLD
;

82 
v®
 |ð
CADENCE_I2C_CONTROL_ACKEN


83 | 
CADENCE_I2C_CONTROL_MS


84 | 
CADENCE_I2C_CONTROL_CLR_FIFO
;

85 
»gs
->
cÚÞ
 = 
v®
;

87 
»gs
->
ªsãr_size
 = 0;

88 
»gs
->
¡©us
 =egs->status;

90 
	`ÿdû_i2c_þr_q_¡©us
(
»gs
);

91 
	}
}

93 
ut32_t
 
	$ÿdû_i2c_£t_add»ss_size
(

94 cÚ¡ 
i2c_msg
 *
msg
,

95 
ut32_t
 
cÚÞ


98 ià((
msg
->
æags
 & 
I2C_M_TEN
) == 0) {

99 
cÚÞ
 |ð
CADENCE_I2C_CONTROL_NEA
;

101 
cÚÞ
 &ð~
CADENCE_I2C_CONTROL_NEA
;

104  
cÚÞ
;

105 
	}
}

107 
	$ÿdû_i2c_£tup_»ad_ªsãr
(

108 
ÿdû_i2c_bus
 *
bus
,

109 vÞ©
ÿdû_i2c
 *
»gs
,

110 
ut32_t
 
cÚÞ


113 
cÚÞ
 |ð
CADENCE_I2C_CONTROL_RW
;

114 
»gs
->
cÚÞ
 = control;

116 ià(
bus
->
cu¼t_todo
 <ð
CADENCE_I2C_TRANSFER_SIZE_MAX
) {

117 
»gs
->
ªsãr_size
 = 
bus
->
cu¼t_todo
;

119 
»gs
->
ªsãr_size
 = 
CADENCE_I2C_TRANSFER_SIZE_ONCE_MAX
;

121 
	}
}

123 
	$ÿdû_i2c_Ãxt_by
(
ÿdû_i2c_bus
 *
bus
)

125 --
bus
->
cu¼t_msg_todo
;

126 ++
bus
->
cu¼t_msg_by
;

128 ià(
bus
->
cu¼t_msg_todo
 == 0) {

129 
i2c_msg
 *
msg
;

131 ++
bus
->
msgs
;

132 --
bus
->
msg_todo
;

134 
msg
 = &
bus
->
msgs
[0];

136 
bus
->
cu¼t_msg_todo
 = 
msg
->
Ën
;

137 
bus
->
cu¼t_msg_by
 = 
msg
->
buf
;

139 
	}
}

141 
	$ÿdû_i2c_wre_to_fifo
(

142 
ÿdû_i2c_bus
 *
bus
,

143 vÞ©
ÿdû_i2c
 *
»gs


146 
ut32_t
 
¥aû_avaabË
;

147 
ut32_t
 
todo_now
;

148 
ut32_t
 
i
;

150 
¥aû_avaabË
 = 
CADENCE_I2C_FIFO_DEPTH
 - 
»gs
->
ªsãr_size
;

152 ià(
bus
->
cu¼t_todo
 > 
¥aû_avaabË
) {

153 
todo_now
 = 
¥aû_avaabË
;

155 
todo_now
 = 
bus
->
cu¼t_todo
;

158 
bus
->
cu¼t_todo
 -ð
todo_now
;

160 
i
 = 0; i < 
todo_now
; ++i) {

161 
»gs
->
d©a
 = *
bus
->
cu¼t_msg_by
;

163 
	`ÿdû_i2c_Ãxt_by
(
bus
);

165 
	}
}

167 
	$ÿdû_i2c_£tup_wre_ªsãr
(

168 
ÿdû_i2c_bus
 *
bus
,

169 vÞ©
ÿdû_i2c
 *
»gs
,

170 
ut32_t
 
cÚÞ


173 
cÚÞ
 &ð~
CADENCE_I2C_CONTROL_RW
;

174 
»gs
->
cÚÞ
 = control;

176 
	`ÿdû_i2c_wre_to_fifo
(
bus
, 
»gs
);

177 
	}
}

179 
	$ÿdû_i2c_£tup_ªsãr
(

180 
ÿdû_i2c_bus
 *
bus
,

181 vÞ©
ÿdû_i2c
 *
»gs


184 cÚ¡ 
i2c_msg
 *
msgs
 = 
bus
->msgs;

185 
ut32_t
 
msg_todo
 = 
bus
->msg_todo;

186 
ut32_t
 
i
;

187 
ut32_t
 
cÚÞ
;

189 
bus
->
cu¼t_todo
 = 
msgs
[0].
Ën
;

190 
i
 = 1; i < 
msg_todo
 && (
msgs
[i].
æags
 & 
I2C_M_NOSTART
) != 0; ++i) {

191 
bus
->
cu¼t_todo
 +ð
msgs
[
i
].
Ën
;

194 
»gs
 = 
bus
->regs;

196 
cÚÞ
 = 
»gs
->control;

197 
cÚÞ
 |ð
CADENCE_I2C_CONTROL_CLR_FIFO
;

199 
bus
->
hÞd
 = 
i
 < 
msg_todo
;

201 ià(
bus
->
hÞd
 || bus->
cu¼t_todo
 > 
CADENCE_I2C_FIFO_DEPTH
) {

202 
cÚÞ
 |ð
CADENCE_I2C_CONTROL_HOLD
;

204 
cÚÞ
 &ð~
CADENCE_I2C_CONTROL_HOLD
;

207 
cÚÞ
 = 
	`ÿdû_i2c_£t_add»ss_size
(
msgs
, control);

209 
bus
->
»ad
 = (
msgs
->
æags
 & 
I2C_M_RD
) != 0;

210 ià(
bus
->
»ad
) {

211 
	`ÿdû_i2c_£tup_»ad_ªsãr
(
bus
, 
»gs
, 
cÚÞ
);

213 
	`ÿdû_i2c_£tup_wre_ªsãr
(
bus
, 
»gs
, 
cÚÞ
);

216 
	`ÿdû_i2c_þr_q_¡©us
(
»gs
);

218 
»gs
->
add»ss
 = 
	`CADENCE_I2C_ADDRESS
(
msgs
->
addr
);

219 
	}
}

221 
	$ÿdû_i2c_cÚtue_»ad_ªsãr
(

222 
ÿdû_i2c_bus
 *
bus
,

223 vÞ©
ÿdû_i2c
 *
»gs


226 
ut32_t
 
i
;

228 
bus
->
cu¼t_todo
 -ð
CADENCE_I2C_DATA_IRQ_DEPTH
;

237 ià(
»gs
->
ªsãr_size
 == 0) {

238 ià(
bus
->
cu¼t_todo
 <ð
CADENCE_I2C_TRANSFER_SIZE_MAX
) {

239 
»gs
->
ªsãr_size
 = 
bus
->
cu¼t_todo
;

241 
»gs
->
ªsãr_size
 = 
CADENCE_I2C_TRANSFER_SIZE_ONCE_MAX
;

245 
i
 = 0; i < 
CADENCE_I2C_DATA_IRQ_DEPTH
; ++i) {

246 *
bus
->
cu¼t_msg_by
 = (
ut8_t
è
»gs
->
d©a
;

248 
	`ÿdû_i2c_Ãxt_by
(
bus
);

251 ià(!
bus
->
hÞd
 && bus->
cu¼t_todo
 <ð
CADENCE_I2C_FIFO_DEPTH
) {

252 
»gs
->
cÚÞ
 &ð~
CADENCE_I2C_CONTROL_HOLD
;

254 
	}
}

256 
	$ÿdû_i2c_¼u±
(*
¬g
)

258 
ÿdû_i2c_bus
 *
bus
 = 
¬g
;

259 vÞ©
ÿdû_i2c
 *
»gs
 = 
bus
->regs;

260 
ut32_t
 
q¡©us
 = 
»gs
->irqstatus;

261 
boÞ
 
dÚe
 = 
çl£
;

264 
»gs
->
q¡©us
 = irqstatus;

266 ià((
q¡©us
 & (
CADENCE_I2C_IXR_ARB_LOST
 | 
CADENCE_I2C_IXR_NACK
)) != 0) {

267 
dÚe
 = 
ue
;

271 (
q¡©us
 & 
CADENCE_I2C_IXR_DATA
) != 0

272 && 
bus
->
»ad


273 && 
bus
->
cu¼t_todo
 >ð
CADENCE_I2C_DATA_IRQ_DEPTH


275 
	`ÿdû_i2c_cÚtue_»ad_ªsãr
(
bus
, 
»gs
);

278 ià((
q¡©us
 & 
CADENCE_I2C_IXR_COMP
) != 0) {

279 ià(
bus
->
»ad
) {

280 
ut32_t
 
todo_now
 = 
bus
->
cu¼t_todo
;

281 
ut32_t
 
i
;

283 
i
 = 0; i < 
todo_now
; ++i) {

284 *
bus
->
cu¼t_msg_by
 = (
ut8_t
è
»gs
->
d©a
;

286 
	`ÿdû_i2c_Ãxt_by
(
bus
);

289 
bus
->
cu¼t_todo
 = 0;

291 
dÚe
 = 
ue
;

293 ià(
bus
->
cu¼t_todo
 > 0) {

294 
	`ÿdû_i2c_wre_to_fifo
(
bus
, 
»gs
);

296 
dÚe
 = 
ue
;

299 ià(!
bus
->
hÞd
 && bus->
cu¼t_todo
 == 0) {

300 
»gs
->
cÚÞ
 &ð~
CADENCE_I2C_CONTROL_HOLD
;

305 ià(
dÚe
) {

306 
ut32_t
 
r
 = 
q¡©us
 & 
CADENCE_I2C_IRQ_ERROR
;

308 ià(
bus
->
msg_todo
 =ð0 || 
r
 != 0) {

309 
¹ems_¡©us_code
 
sc
;

311 
	`ÿdû_i2c_di§bË_¼u±s
(
»gs
);

313 
bus
->
q¡©us
 = 
r
;

315 
sc
 = 
	`¹ems_evt_ªsÁ_£nd
(
bus
->
sk_id
);

316 
	`_As£¹
(
sc
 =ð
RTEMS_SUCCESSFUL
);

317 (è
sc
;

319 
	`ÿdû_i2c_£tup_ªsãr
(
bus
, 
»gs
);

322 
	}
}

324 
	$ÿdû_i2c_ªsãr
(

325 
i2c_bus
 *
ba£
,

326 
i2c_msg
 *
msgs
,

327 
ut32_t
 
msg_couÁ


330 
ÿdû_i2c_bus
 *
bus
 = (ÿdû_i2c_bu *è
ba£
;

331 vÞ©
ÿdû_i2c
 *
»gs
;

332 
¹ems_¡©us_code
 
sc
;

333 
ut32_t
 
i
;

335 
	`_As£¹
(
msg_couÁ
 > 0);

337 
i
 = 0; i < 
msg_couÁ
; ++i) {

339 ià((
msgs
[
i
].
æags
 & 
I2C_M_RECV_LEN
) != 0) {

340  -
EINVAL
;

344 
bus
->
msgs
 = &msgs[0];

345 
bus
->
msg_todo
 = 
msg_couÁ
;

346 
bus
->
cu¼t_msg_todo
 = 
msgs
[0].
Ën
;

347 
bus
->
cu¼t_msg_by
 = 
msgs
[0].
buf
;

348 
bus
->
sk_id
 = 
	`¹ems_sk_£lf
();

350 
»gs
 = 
bus
->regs;

351 
	`ÿdû_i2c_£tup_ªsãr
(
bus
, 
»gs
);

352 
»gs
->
qabË
 = 
CADENCE_I2C_IRQ_USED
;

354 
sc
 = 
	`¹ems_evt_ªsÁ_»ûive
(
RTEMS_WAIT
, 
bus
->
ba£
.
timeout
);

355 ià(
sc
 !ð
RTEMS_SUCCESSFUL
) {

356 
	`ÿdû_i2c_»£t
(
bus
);

357 
	`¹ems_evt_ªsÁ_þr
();

359  -
ETIMEDOUT
;

362  
bus
->
q¡©us
 =ð0 ? 0 : -
EIO
;

363 
	}
}

365 
	$ÿdû_i2c_£t_þock
(
i2c_bus
 *
ba£
, 
þock
)

367 
ÿdû_i2c_bus
 *
bus
 = (ÿdû_i2c_bu *è
ba£
;

368 vÞ©
ÿdû_i2c
 *
»gs
 = 
bus
->regs;

369 
ut32_t
 
rÜ
 = 0xffffffff;

370 
ut32_t
 
be¡_div_a
 = 
CADENCE_I2C_DIV_A_MAX
 - 1;

371 
ut32_t
 
be¡_div_b
 = 
CADENCE_I2C_DIV_B_MAX
 - 1;

372 
ut32_t
 
div
 = 
bus
->
put_þock
 / (22 * 
þock
);

373 
ut32_t
 
div_a
;

374 
ut32_t
 
cÚÞ
;

376 ià(
div
 <ð0 || div > (
CADENCE_I2C_DIV_A_MAX
 * 
CADENCE_I2C_DIV_B_MAX
)) {

377  -
EIO
;

380 
div_a
 = 0; div_¨< 
CADENCE_I2C_DIV_A_MAX
; ++div_a) {

381 
ut32_t
 
a
 = 22 * 
þock
 * (
div_a
 + 1);

382 
ut32_t
 
b
 = (
bus
->
put_þock
 + 
a
 - 1) /;

384 ià(
b
 > 0 && b <ð
CADENCE_I2C_DIV_B_MAX
) {

385 
ut32_t
 
aùu®_þock
 = 
bus
->
put_þock
 / (22 * (
div_a
 + 1è* 
b
);

386 
ut32_t
 
e
 = 
þock
 < 
aùu®_þock
 ?

387 
aùu®_þock
 - 
þock
 : clock -ctual_clock;

394 ià(
e
 <ð
rÜ
 && 
aùu®_þock
 <ð
þock
) {

395 
rÜ
 = 
e
;

396 
be¡_div_a
 = 
div_a
;

397 
be¡_div_b
 = 
b
 - 1;

402 
cÚÞ
 = 
»gs
->control;

403 
cÚÞ
 = 
	`CADENCE_I2C_CONTROL_DIV_A_SET
(cÚÞ, 
be¡_div_a
);

404 
cÚÞ
 = 
	`CADENCE_I2C_CONTROL_DIV_B_SET
(cÚÞ, 
be¡_div_b
);

405 
»gs
->
cÚÞ
 = control;

408 
	}
}

410 
	$ÿdû_i2c_de¡roy
(
i2c_bus
 *
ba£
)

412 
ÿdû_i2c_bus
 *
bus
 = (ÿdû_i2c_bu *è
ba£
;

413 
¹ems_¡©us_code
 
sc
;

415 
sc
 = 
	`¹ems_¼u±_hªdËr_»move
(
bus
->
q
, 
ÿdû_i2c_¼u±
, bus);

416 
	`_As£¹
(
sc
 =ð
RTEMS_SUCCESSFUL
);

417 (è
sc
;

419 
	`i2c_bus_de¡roy_ªd_ä
(&
bus
->
ba£
);

420 
	}
}

422 
	$i2c_bus_»gi¡_ÿdû
(

423 cÚ¡ *
bus_·th
,

424 
u_t
 
»gi¡_ba£
,

425 
ut32_t
 
put_þock
,

426 
¹ems_veùÜ_numb
 
q


429 
ÿdû_i2c_bus
 *
bus
;

430 
¹ems_¡©us_code
 
sc
;

431 
r
;

433 
bus
 = (
ÿdû_i2c_bus
 *è
	`i2c_bus_®loc_ªd_
((*bus));

434 ià(
bus
 =ð
NULL
) {

438 
bus
->
»gs
 = (vÞ©
ÿdû_i2c
 *è
»gi¡_ba£
;

439 
bus
->
put_þock
 = input_clock;

440 
bus
->
q
 = irq;

442 
	`ÿdû_i2c_»£t
(
bus
);

444 
r
 = 
	`ÿdû_i2c_£t_þock
(&
bus
->
ba£
, 
I2C_BUS_CLOCK_DEFAULT
);

445 ià(
r
 != 0) {

446 (*
bus
->
ba£
.
de¡roy
)(&bus->base);

448 
	`¹ems_£t_ºo_ªd_»tuº_mus_Úe
(-
r
);

451 
sc
 = 
	`¹ems_¼u±_hªdËr_¡®l
(

452 
q
,

454 
RTEMS_INTERRUPT_UNIQUE
,

455 
ÿdû_i2c_¼u±
,

456 
bus


458 ià(
sc
 !ð
RTEMS_SUCCESSFUL
) {

459 (*
bus
->
ba£
.
de¡roy
)(&bus->base);

461 
	`¹ems_£t_ºo_ªd_»tuº_mus_Úe
(
EIO
);

464 
bus
->
ba£
.
ªsãr
 = 
ÿdû_i2c_ªsãr
;

465 
bus
->
ba£
.
£t_þock
 = 
ÿdû_i2c_£t_þock
;

466 
bus
->
ba£
.
de¡roy
 = 
ÿdû_i2c_de¡roy
;

468  
	`i2c_bus_»gi¡
(&
bus
->
ba£
, 
bus_·th
);

469 
	}
}

	@src/lib/libbsp/arm/xilinx-zynq/include/bsp.h

21 #iâdeà
LIBBSP_ARM_XILINX_ZYNQ_BSP_H


22 
	#LIBBSP_ARM_XILINX_ZYNQ_BSP_H


	)

24 
	~<b¥Ýts.h
>

26 
	#BSP_FEATURE_IRQ_EXTENSION


	)

28 #iâdeà
ASM


30 
	~<¹ems.h
>

31 
	~<¹ems/cÚsÞe.h
>

32 
	~<¹ems/þockdrv.h
>

34 
	~<b¥/deçuÉ-l-exnsiÚ.h
>

35 
	~<b¥/¡¬t.h
>

37 #ifdeà
__ýlu¥lus


48 
	#BSP_ARM_A9MPCORE_SCU_BASE
 0xf8f00000

	)

50 
	#BSP_ARM_GIC_CPUIF_BASE
 0xf8f00100

	)

52 
	#BSP_ARM_A9MPCORE_GT_BASE
 0xf8f00200

	)

54 
	#BSP_ARM_A9MPCORE_PT_BASE
 0xf8f00600

	)

56 
	#BSP_ARM_GIC_DIST_BASE
 0xf8f01000

	)

58 
	#BSP_ARM_L2C_310_BASE
 0xf8f02000

	)

60 
	#BSP_ARM_L2C_310_ID
 0x410000c8

	)

70 
BSP_START_TEXT_SECTION
 
zynq_£tup_mmu_ªd_ÿche
();

72 
ut32_t
 
zynq_þock_ýu_1x
();

76 #ifdeà
__ýlu¥lus


	@src/lib/libbsp/arm/xilinx-zynq/include/cadence-i2c-regs.h

15 #iâdeà
LIBBSP_ARM_XILINX_ZYNQ_CADENCE_I2C_REGS_H


16 
	#LIBBSP_ARM_XILINX_ZYNQ_CADENCE_I2C_REGS_H


	)

18 
	~<b¥/uty.h
>

21 
ut32_t
 
	mcÚÞ
;

22 
	#CADENCE_I2C_CONTROL_DIV_A
(
v®
è
	`BSP_FLD32
(v®, 14, 15)

	)

23 
	#CADENCE_I2C_CONTROL_DIV_A_GET
(
»g
è
	`BSP_FLD32GET
Ôeg, 14, 15)

	)

24 
	#CADENCE_I2C_CONTROL_DIV_A_SET
(
»g
, 
v®
è
	`BSP_FLD32SET
Ôeg, v®, 14, 15)

	)

25 
	#CADENCE_I2C_CONTROL_DIV_B
(
v®
è
	`BSP_FLD32
(v®, 8, 13)

	)

26 
	#CADENCE_I2C_CONTROL_DIV_B_GET
(
»g
è
	`BSP_FLD32GET
Ôeg, 8, 13)

	)

27 
	#CADENCE_I2C_CONTROL_DIV_B_SET
(
»g
, 
v®
è
	`BSP_FLD32SET
Ôeg, v®, 8, 13)

	)

28 
	#CADENCE_I2C_CONTROL_CLR_FIFO
 
	`BSP_BIT32
(6)

	)

29 
	#CADENCE_I2C_CONTROL_SLVMON
 
	`BSP_BIT32
(5)

	)

30 
	#CADENCE_I2C_CONTROL_HOLD
 
	`BSP_BIT32
(4)

	)

31 
	#CADENCE_I2C_CONTROL_ACKEN
 
	`BSP_BIT32
(3)

	)

32 
	#CADENCE_I2C_CONTROL_NEA
 
	`BSP_BIT32
(2)

	)

33 
	#CADENCE_I2C_CONTROL_MS
 
	`BSP_BIT32
(1)

	)

34 
	#CADENCE_I2C_CONTROL_RW
 
	`BSP_BIT32
(0)

	)

35 
ut32_t
 
	m¡©us
;

36 
	#CADENCE_I2C_STATUS_BA
 
	`BSP_BIT32
(8)

	)

37 
	#CADENCE_I2C_STATUS_RXOVF
 
	`BSP_BIT32
(7)

	)

38 
	#CADENCE_I2C_STATUS_TXDV
 
	`BSP_BIT32
(6)

	)

39 
	#CADENCE_I2C_STATUS_RXDV
 
	`BSP_BIT32
(5)

	)

40 
	#CADENCE_I2C_STATUS_RXRW
 
	`BSP_BIT32
(3)

	)

41 
ut32_t
 
	madd»ss
;

42 
	#CADENCE_I2C_ADDRESS
(
v®
è
	`BSP_FLD32
(v®, 0, 9)

	)

43 
	#CADENCE_I2C_ADDRESS_GET
(
»g
è
	`BSP_FLD32GET
Ôeg, 0, 9)

	)

44 
	#CADENCE_I2C_ADDRESS_SET
(
»g
, 
v®
è
	`BSP_FLD32SET
Ôeg, v®, 0, 9)

	)

45 
ut32_t
 
	md©a
;

46 
ut32_t
 
	mq¡©us
;

47 
	#CADENCE_I2C_IXR_ARB_LOST
 
	`BSP_BIT32
(9)

	)

48 
	#CADENCE_I2C_IXR_RX_UNF
 
	`BSP_BIT32
(7)

	)

49 
	#CADENCE_I2C_IXR_TX_OVR
 
	`BSP_BIT32
(6)

	)

50 
	#CADENCE_I2C_IXR_RX_OVR
 
	`BSP_BIT32
(5)

	)

51 
	#CADENCE_I2C_IXR_SLV_RDY
 
	`BSP_BIT32
(4)

	)

52 
	#CADENCE_I2C_IXR_TO
 
	`BSP_BIT32
(3)

	)

53 
	#CADENCE_I2C_IXR_NACK
 
	`BSP_BIT32
(2)

	)

54 
	#CADENCE_I2C_IXR_DATA
 
	`BSP_BIT32
(1)

	)

55 
	#CADENCE_I2C_IXR_COMP
 
	`BSP_BIT32
(0)

	)

56 
ut32_t
 
	mªsãr_size
;

57 
	#CADENCE_I2C_TRANSFER_SIZE
(
v®
è
	`BSP_FLD32
(v®, 0, 7)

	)

58 
	#CADENCE_I2C_TRANSFER_SIZE_GET
(
»g
è
	`BSP_FLD32GET
Ôeg, 0, 7)

	)

59 
	#CADENCE_I2C_TRANSFER_SIZE_SET
(
»g
, 
v®
è
	`BSP_FLD32SET
Ôeg, v®, 0, 7)

	)

60 
ut32_t
 
	m¦ave_mÚ_·u£
;

61 
	#CADENCE_I2C_SLAVE_MON_PAUSE
(
v®
è
	`BSP_FLD32
(v®, 0, 3)

	)

62 
	#CADENCE_I2C_SLAVE_MON_PAUSE_GET
(
»g
è
	`BSP_FLD32GET
Ôeg, 0, 3)

	)

63 
	#CADENCE_I2C_SLAVE_MON_PAUSE_SET
(
»g
, 
v®
è
	`BSP_FLD32SET
Ôeg, v®, 0, 3)

	)

64 
ut32_t
 
	mtimeout
;

65 
	#CADENCE_I2C_TIMEOUT
(
v®
è
	`BSP_FLD32
(v®, 0, 7)

	)

66 
	#CADENCE_I2C_TIMEOUT_GET
(
»g
è
	`BSP_FLD32GET
Ôeg, 0, 7)

	)

67 
	#CADENCE_I2C_TIMEOUT_SET
(
»g
, 
v®
è
	`BSP_FLD32SET
Ôeg, v®, 0, 7)

	)

68 
ut32_t
 
	mqmask
;

69 
ut32_t
 
	mqabË
;

70 
ut32_t
 
	mqdi§bË
;

71 } 
	tÿdû_i2c
;

	@src/lib/libbsp/arm/xilinx-zynq/include/cadence-i2c.h

15 #iâdeà
LIBBSP_ARM_XILINX_ZYNQ_CADENCE_I2C_H


16 
	#LIBBSP_ARM_XILINX_ZYNQ_CADENCE_I2C_H


	)

18 
	~<¹ems.h
>

20 #ifdeà
__ýlu¥lus


24 
i2c_bus_»gi¡_ÿdû
(

25 cÚ¡ *
bus_·th
,

26 
u_t
 
»gi¡_ba£
,

27 
ut32_t
 
put_þock
,

28 
¹ems_veùÜ_numb
 
q


31 #ifdeà
__ýlu¥lus


	@src/lib/libbsp/arm/xilinx-zynq/include/i2c.h

15 #iâdeà
LIBBSP_ARM_XILINX_ZYNQ_I2C_H


16 
	#LIBBSP_ARM_XILINX_ZYNQ_I2C_H


	)

18 
	~<b¥/ÿdû-i2c.h
>

19 
	~<b¥/q.h
>

20 
	~<b¥.h
>

22 #ifdeà
__ýlu¥lus


26 
le
 
zynq_»gi¡_i2c_0
()

28  
i2c_bus_»gi¡_ÿdû
(

31 
zynq_þock_ýu_1x
(),

32 
ZYNQ_IRQ_I2C_0


36 
le
 
zynq_»gi¡_i2c_1
()

38  
i2c_bus_»gi¡_ÿdû
(

41 
zynq_þock_ýu_1x
(),

42 
ZYNQ_IRQ_I2C_1


46 #ifdeà
__ýlu¥lus


	@src/lib/libbsp/arm/xilinx-zynq/include/irq.h

21 #iâdeà
LIBBSP_ARM_XILINX_ZYNQ_IRQ_H


22 
	#LIBBSP_ARM_XILINX_ZYNQ_IRQ_H


	)

24 #iâdeà
ASM


26 
	~<¹ems/q.h
>

27 
	~<¹ems/q-exnsiÚ.h
>

29 
	~<b¥/¬m-a9mpcÜe-q.h
>

30 
	~<b¥/¬m-gic-q.h
>

32 #ifdeà
__ýlu¥lus


43 
	#ZYNQ_IRQ_CPU_0
 32

	)

44 
	#ZYNQ_IRQ_CPU_1
 33

	)

45 
	#ZYNQ_IRQ_L2_CACHE
 34

	)

46 
	#ZYNQ_IRQ_OCM
 35

	)

47 
	#ZYNQ_IRQ_PMU_0
 37

	)

48 
	#ZYNQ_IRQ_PMU_1
 38

	)

49 
	#ZYNQ_IRQ_XADC
 39

	)

50 
	#ZYNQ_IRQ_DVI
 40

	)

51 
	#ZYNQ_IRQ_SWDT
 41

	)

52 
	#ZYNQ_IRQ_TTC_0_0
 42

	)

53 
	#ZYNQ_IRQ_TTC_1_0
 43

	)

54 
	#ZYNQ_IRQ_TTC_2_0
 44

	)

55 
	#ZYNQ_IRQ_DMAC_ABORT
 45

	)

56 
	#ZYNQ_IRQ_DMAC_0
 46

	)

57 
	#ZYNQ_IRQ_DMAC_1
 47

	)

58 
	#ZYNQ_IRQ_DMAC_2
 48

	)

59 
	#ZYNQ_IRQ_DMAC_3
 49

	)

60 
	#ZYNQ_IRQ_SMC
 50

	)

61 
	#ZYNQ_IRQ_QUAD_SPI
 51

	)

62 
	#ZYNQ_IRQ_GPIO
 52

	)

63 
	#ZYNQ_IRQ_USB_0
 53

	)

64 
	#ZYNQ_IRQ_ETHERNET_0
 54

	)

65 
	#ZYNQ_IRQ_ETHERNET_0_WAKEUP
 55

	)

66 
	#ZYNQ_IRQ_SDIO_0
 56

	)

67 
	#ZYNQ_IRQ_I2C_0
 57

	)

68 
	#ZYNQ_IRQ_SPI_0
 58

	)

69 
	#ZYNQ_IRQ_UART_0
 59

	)

70 
	#ZYNQ_IRQ_CAN_0
 60

	)

71 
	#ZYNQ_IRQ_FPGA_0
 61

	)

72 
	#ZYNQ_IRQ_FPGA_1
 62

	)

73 
	#ZYNQ_IRQ_FPGA_2
 63

	)

74 
	#ZYNQ_IRQ_FPGA_3
 64

	)

75 
	#ZYNQ_IRQ_FPGA_4
 65

	)

76 
	#ZYNQ_IRQ_FPGA_5
 66

	)

77 
	#ZYNQ_IRQ_FPGA_6
 67

	)

78 
	#ZYNQ_IRQ_FPGA_7
 68

	)

79 
	#ZYNQ_IRQ_TTC_0_1
 69

	)

80 
	#ZYNQ_IRQ_TTC_1_1
 70

	)

81 
	#ZYNQ_IRQ_TTC_2_1
 71

	)

82 
	#ZYNQ_IRQ_DMAC_4
 72

	)

83 
	#ZYNQ_IRQ_DMAC_5
 73

	)

84 
	#ZYNQ_IRQ_DMAC_6
 74

	)

85 
	#ZYNQ_IRQ_DMAC_7
 75

	)

86 
	#ZYNQ_IRQ_USB_1
 76

	)

87 
	#ZYNQ_IRQ_ETHERNET_1
 77

	)

88 
	#ZYNQ_IRQ_ETHERNET_1_WAKEUP
 78

	)

89 
	#ZYNQ_IRQ_SDIO_1
 79

	)

90 
	#ZYNQ_IRQ_I2C_1
 80

	)

91 
	#ZYNQ_IRQ_SPI_1
 81

	)

92 
	#ZYNQ_IRQ_UART_1
 82

	)

93 
	#ZYNQ_IRQ_CAN_1
 83

	)

94 
	#ZYNQ_IRQ_FPGA_8
 84

	)

95 
	#ZYNQ_IRQ_FPGA_9
 85

	)

96 
	#ZYNQ_IRQ_FPGA_10
 86

	)

97 
	#ZYNQ_IRQ_FPGA_11
 87

	)

98 
	#ZYNQ_IRQ_FPGA_12
 88

	)

99 
	#ZYNQ_IRQ_FPGA_13
 89

	)

100 
	#ZYNQ_IRQ_FPGA_14
 90

	)

101 
	#ZYNQ_IRQ_FPGA_15
 91

	)

102 
	#ZYNQ_IRQ_PARITY
 92

	)

104 
	#BSP_INTERRUPT_VECTOR_MIN
 0

	)

105 
	#BSP_INTERRUPT_VECTOR_MAX
 92

	)

109 #ifdeà
__ýlu¥lus


	@src/lib/libbsp/arm/xilinx-zynq/include/tm27.h

21 #iâdeà
_RTEMS_TMTEST27


25 #iâdeà
__tm27_h


26 
	#__tm27_h


	)

34 
	~<b¥/¬m-gic-tm27.h
>

	@src/lib/libbsp/arm/xilinx-zynq/include/zynq-uart-regs.h

28 #iâdeà
LIBBSP_ARM_XILINX_ZYNQ_UART_REGS_H


29 
	#LIBBSP_ARM_XILINX_ZYNQ_UART_REGS_H


	)

31 
	~<b¥/uty.h
>

34 
ut32_t
 
	mcÚÞ
;

35 
	#ZYNQ_UART_CONTROL_STPBRK
 
	`BSP_BIT32
(8)

	)

36 
	#ZYNQ_UART_CONTROL_STTBRK
 
	`BSP_BIT32
(7)

	)

37 
	#ZYNQ_UART_CONTROL_RSTTO
 
	`BSP_BIT32
(6)

	)

38 
	#ZYNQ_UART_CONTROL_TXDIS
 
	`BSP_BIT32
(5)

	)

39 
	#ZYNQ_UART_CONTROL_TXEN
 
	`BSP_BIT32
(4)

	)

40 
	#ZYNQ_UART_CONTROL_RXDIS
 
	`BSP_BIT32
(3)

	)

41 
	#ZYNQ_UART_CONTROL_RXEN
 
	`BSP_BIT32
(2)

	)

42 
	#ZYNQ_UART_CONTROL_TXRES
 
	`BSP_BIT32
(1)

	)

43 
	#ZYNQ_UART_CONTROL_RXRES
 
	`BSP_BIT32
(0)

	)

44 
ut32_t
 
	mmode
;

45 
	#ZYNQ_UART_MODE_CHMODE
(
v®
è
	`BSP_FLD32
(v®, 8, 9)

	)

46 
	#ZYNQ_UART_MODE_CHMODE_GET
(
»g
è
	`BSP_FLD32GET
Ôeg, 8, 9)

	)

47 
	#ZYNQ_UART_MODE_CHMODE_SET
(
»g
, 
v®
è
	`BSP_FLD32SET
Ôeg, v®, 8, 9)

	)

48 
	#ZYNQ_UART_MODE_CHMODE_NORMAL
 0x00U

	)

49 
	#ZYNQ_UART_MODE_CHMODE_AUTO_ECHO
 0x01U

	)

50 
	#ZYNQ_UART_MODE_CHMODE_LOCAL_LOOPBACK
 0x02U

	)

51 
	#ZYNQ_UART_MODE_CHMODE_REMOTE_LOOPBACK
 0x03U

	)

52 
	#ZYNQ_UART_MODE_NBSTOP
(
v®
è
	`BSP_FLD32
(v®, 6, 7)

	)

53 
	#ZYNQ_UART_MODE_NBSTOP_GET
(
»g
è
	`BSP_FLD32GET
Ôeg, 6, 7)

	)

54 
	#ZYNQ_UART_MODE_NBSTOP_SET
(
»g
, 
v®
è
	`BSP_FLD32SET
Ôeg, v®, 6, 7)

	)

55 
	#ZYNQ_UART_MODE_NBSTOP_STOP_1
 0x00U

	)

56 
	#ZYNQ_UART_MODE_NBSTOP_STOP_1_5
 0x01U

	)

57 
	#ZYNQ_UART_MODE_NBSTOP_STOP_2
 0x02U

	)

58 
	#ZYNQ_UART_MODE_PAR
(
v®
è
	`BSP_FLD32
(v®, 3, 5)

	)

59 
	#ZYNQ_UART_MODE_PAR_GET
(
»g
è
	`BSP_FLD32GET
Ôeg, 3, 5)

	)

60 
	#ZYNQ_UART_MODE_PAR_SET
(
»g
, 
v®
è
	`BSP_FLD32SET
Ôeg, v®, 3, 5)

	)

61 
	#ZYNQ_UART_MODE_PAR_EVEN
 0x00U

	)

62 
	#ZYNQ_UART_MODE_PAR_ODD
 0x01U

	)

63 
	#ZYNQ_UART_MODE_PAR_SPACE
 0x02U

	)

64 
	#ZYNQ_UART_MODE_PAR_MARK
 0x03U

	)

65 
	#ZYNQ_UART_MODE_PAR_NONE
 0x04U

	)

66 
	#ZYNQ_UART_MODE_CHRL
(
v®
è
	`BSP_FLD32
(v®, 1, 2)

	)

67 
	#ZYNQ_UART_MODE_CHRL_GET
(
»g
è
	`BSP_FLD32GET
Ôeg, 1, 2)

	)

68 
	#ZYNQ_UART_MODE_CHRL_SET
(
»g
, 
v®
è
	`BSP_FLD32SET
Ôeg, v®, 1, 2)

	)

69 
	#ZYNQ_UART_MODE_CHRL_8
 0x00U

	)

70 
	#ZYNQ_UART_MODE_CHRL_7
 0x02U

	)

71 
	#ZYNQ_UART_MODE_CHRL_6
 0x03U

	)

72 
	#ZYNQ_UART_MODE_CLKS
 
	`BSP_BIT32
(0)

	)

73 
ut32_t
 
	mq_
;

74 
ut32_t
 
	mq_dis
;

75 
ut32_t
 
	mq_mask
;

76 
ut32_t
 
	mq_¡s
;

77 
	#ZYNQ_UART_TOVR
 
	`BSP_BIT32
(12)

	)

78 
	#ZYNQ_UART_TNFUL
 
	`BSP_BIT32
(11)

	)

79 
	#ZYNQ_UART_TTRIG
 
	`BSP_BIT32
(10)

	)

80 
	#ZYNQ_UART_DMSI
 
	`BSP_BIT32
(9)

	)

81 
	#ZYNQ_UART_TIMEOUT
 
	`BSP_BIT32
(8)

	)

82 
	#ZYNQ_UART_PARE
 
	`BSP_BIT32
(7)

	)

83 
	#ZYNQ_UART_FRAME
 
	`BSP_BIT32
(6)

	)

84 
	#ZYNQ_UART_ROVR
 
	`BSP_BIT32
(5)

	)

85 
	#ZYNQ_UART_TFUL
 
	`BSP_BIT32
(4)

	)

86 
	#ZYNQ_UART_TEMPTY
 
	`BSP_BIT32
(3)

	)

87 
	#ZYNQ_UART_RFUL
 
	`BSP_BIT32
(2)

	)

88 
	#ZYNQ_UART_REMPTY
 
	`BSP_BIT32
(1)

	)

89 
	#ZYNQ_UART_RTRIG
 
	`BSP_BIT32
(0)

	)

90 
ut32_t
 
	mbaud_¿_g
;

91 
	#ZYNQ_UART_BAUD_RATE_GEN_CD
(
v®
è
	`BSP_FLD32
(v®, 0, 15)

	)

92 
	#ZYNQ_UART_BAUD_RATE_GEN_CD_GET
(
»g
è
	`BSP_FLD32GET
Ôeg, 0, 15)

	)

93 
	#ZYNQ_UART_BAUD_RATE_GEN_CD_SET
(
»g
, 
v®
è
	`BSP_FLD32SET
Ôeg, v®, 0, 15)

	)

94 
ut32_t
 
	mrx_timeout
;

95 
	#ZYNQ_UART_RX_TIMEOUT_RTO
(
v®
è
	`BSP_FLD32
(v®, 0, 7)

	)

96 
	#ZYNQ_UART_RX_TIMEOUT_RTO_GET
(
»g
è
	`BSP_FLD32GET
Ôeg, 0, 7)

	)

97 
	#ZYNQ_UART_RX_TIMEOUT_RTO_SET
(
»g
, 
v®
è
	`BSP_FLD32SET
Ôeg, v®, 0, 7)

	)

98 
ut32_t
 
	mrx_fifo_g_lvl
;

99 
	#ZYNQ_UART_RX_FIFO_TRG_LVL_RTRIG
(
v®
è
	`BSP_FLD32
(v®, 0, 5)

	)

100 
	#ZYNQ_UART_RX_FIFO_TRG_LVL_RTRIG_GET
(
»g
è
	`BSP_FLD32GET
Ôeg, 0, 5)

	)

101 
	#ZYNQ_UART_RX_FIFO_TRG_LVL_RTRIG_SET
(
»g
, 
v®
è
	`BSP_FLD32SET
Ôeg, v®, 0, 5)

	)

102 
ut32_t
 
	mmodem_ù¾
;

103 
	#ZYNQ_UART_MODEM_CTRL_FCM
 
	`BSP_BIT32
(5)

	)

104 
	#ZYNQ_UART_MODEM_CTRL_RTS
 
	`BSP_BIT32
(1)

	)

105 
	#ZYNQ_UART_MODEM_CTRL_DTR
 
	`BSP_BIT32
(0)

	)

106 
ut32_t
 
	mmodem_¡s
;

107 
	#ZYNQ_UART_MODEM_STS_FCMS
 
	`BSP_BIT32
(8)

	)

108 
	#ZYNQ_UART_MODEM_STS_DCD
 
	`BSP_BIT32
(7)

	)

109 
	#ZYNQ_UART_MODEM_STS_RI
 
	`BSP_BIT32
(6)

	)

110 
	#ZYNQ_UART_MODEM_STS_DSR
 
	`BSP_BIT32
(5)

	)

111 
	#ZYNQ_UART_MODEM_STS_CTS
 
	`BSP_BIT32
(4)

	)

112 
	#ZYNQ_UART_MODEM_STS_DDCD
 
	`BSP_BIT32
(3)

	)

113 
	#ZYNQ_UART_MODEM_STS_TERI
 
	`BSP_BIT32
(2)

	)

114 
	#ZYNQ_UART_MODEM_STS_DDSR
 
	`BSP_BIT32
(1)

	)

115 
	#ZYNQ_UART_MODEM_STS_DCTS
 
	`BSP_BIT32
(0)

	)

116 
ut32_t
 
	mchªÃl_¡s
;

117 
	#ZYNQ_UART_CHANNEL_STS_TNFUL
 
	`BSP_BIT32
(14)

	)

118 
	#ZYNQ_UART_CHANNEL_STS_TTRIG
 
	`BSP_BIT32
(13)

	)

119 
	#ZYNQ_UART_CHANNEL_STS_FDELT
 
	`BSP_BIT32
(12)

	)

120 
	#ZYNQ_UART_CHANNEL_STS_TACTIVE
 
	`BSP_BIT32
(11)

	)

121 
	#ZYNQ_UART_CHANNEL_STS_RACTIVE
 
	`BSP_BIT32
(10)

	)

122 
	#ZYNQ_UART_CHANNEL_STS_TFUL
 
	`BSP_BIT32
(4)

	)

123 
	#ZYNQ_UART_CHANNEL_STS_TEMPTY
 
	`BSP_BIT32
(3)

	)

124 
	#ZYNQ_UART_CHANNEL_STS_RFUL
 
	`BSP_BIT32
(2)

	)

125 
	#ZYNQ_UART_CHANNEL_STS_REMPTY
 
	`BSP_BIT32
(1)

	)

126 
	#ZYNQ_UART_CHANNEL_STS_RTRIG
 
	`BSP_BIT32
(0)

	)

127 
ut32_t
 
	mtx_rx_fifo
;

128 
	#ZYNQ_UART_TX_RX_FIFO_FIFO
(
v®
è
	`BSP_FLD32
(v®, 0, 7)

	)

129 
	#ZYNQ_UART_TX_RX_FIFO_FIFO_GET
(
»g
è
	`BSP_FLD32GET
Ôeg, 0, 7)

	)

130 
	#ZYNQ_UART_TX_RX_FIFO_FIFO_SET
(
»g
, 
v®
è
	`BSP_FLD32SET
Ôeg, v®, 0, 7)

	)

131 
ut32_t
 
	mbaud_¿_div
;

132 
	#ZYNQ_UART_BAUD_RATE_DIV_BDIV
(
v®
è
	`BSP_FLD32
(v®, 0, 7)

	)

133 
	#ZYNQ_UART_BAUD_RATE_DIV_BDIV_GET
(
»g
è
	`BSP_FLD32GET
Ôeg, 0, 7)

	)

134 
	#ZYNQ_UART_BAUD_RATE_DIV_BDIV_SET
(
»g
, 
v®
è
	`BSP_FLD32SET
Ôeg, v®, 0, 7)

	)

135 
ut32_t
 
	mæow_day
;

136 
	#ZYNQ_UART_FLOW_DELAY_FDEL
(
v®
è
	`BSP_FLD32
(v®, 0, 5)

	)

137 
	#ZYNQ_UART_FLOW_DELAY_FDEL_GET
(
»g
è
	`BSP_FLD32GET
Ôeg, 0, 5)

	)

138 
	#ZYNQ_UART_FLOW_DELAY_FDEL_SET
(
»g
, 
v®
è
	`BSP_FLD32SET
Ôeg, v®, 0, 5)

	)

139 
ut32_t
 
	m»£rved_3c
[2];

140 
ut32_t
 
	mtx_fifo_g_lvl
;

141 
	#ZYNQ_UART_TX_FIFO_TRG_LVL_TTRIG
(
v®
è
	`BSP_FLD32
(v®, 0, 5)

	)

142 
	#ZYNQ_UART_TX_FIFO_TRG_LVL_TTRIG_GET
(
»g
è
	`BSP_FLD32GET
Ôeg, 0, 5)

	)

143 
	#ZYNQ_UART_TX_FIFO_TRG_LVL_TTRIG_SET
(
»g
, 
v®
è
	`BSP_FLD32SET
Ôeg, v®, 0, 5)

	)

144 } 
	tzynq_u¬t
;

	@src/lib/libbsp/arm/xilinx-zynq/include/zynq-uart.h

21 #iâdeà
LIBBSP_ARM_XILINX_ZYNQ_UART_H


22 
	#LIBBSP_ARM_XILINX_ZYNQ_UART_H


	)

24 
	~<libch/£rl.h
>

26 #ifdeà
__ýlu¥lus


36 cÚ¡ 
cÚsÞe_âs
 
zynq_u¬t_âs
;

38 #ifdeà
__ýlu¥lus


	@src/lib/libbsp/arm/xilinx-zynq/startup/bspreset.c

15 
	~<b¥/boÙÿrd.h
>

17 
	$b¥_»£t
()

19 vÞ©
ut32_t
 *
¦ü_uÆock
 = (volatile uint32_t *) 0xf8000008;

20 vÞ©
ut32_t
 *
pss_r¡_ù¾
 = (volatile uint32_t *) 0xf8000200;

22 
ue
) {

23 *
¦ü_uÆock
 = 0xdf0d;

24 *
pss_r¡_ù¾
 = 0x1;

26 
	}
}

	@src/lib/libbsp/arm/xilinx-zynq/startup/bspsmp.c

15 
	~<¹ems/scÜe/smpim¶.h
>

17 
boÞ
 
	$_CPU_SMP_S¹_´oûssÜ
(
ut32_t
 
ýu_dex
)

23  
	`_P_CPU_S_wa_fÜ_nÚ_l_¡©e
(
ýu_dex
, 0);

24 
	}
}

	@src/lib/libbsp/arm/xilinx-zynq/startup/bspstart.c

15 
	~<b¥.h
>

16 
	~<b¥/boÙÿrd.h
>

17 
	~<b¥/¬m-a9mpcÜe-þock.h
>

18 
	~<b¥/q-gic.h
>

19 
	~<b¥/lk-symbÞs.h
>

21 
__©ibu__
 ((
wk
)è
ut32_t
 
	$zynq_þock_ýu_1x
()

23  
ZYNQ_CLOCK_CPU_1X
;

24 
	}
}

26 
	$b¥_¡¬t
()

28 
	`a9mpcÜe_þock_lize_¾y
();

29 
	`b¥_¼u±_lize
();

30 
	`¹ems_ÿche_coht_add_¬
(

31 
b¥_noÿche_hp_beg
,

32 (
u_t
è
b¥_noÿche_hp_size


34 
	}
}

	@src/lib/libbsp/arm/xilinx-zynq/startup/bspstarthooks.c

15 
	#ARM_CP15_TEXT_SECTION
 
BSP_START_TEXT_SECTION


	)

17 
	~<b¥.h
>

18 
	~<b¥/¡¬t.h
>

19 
	~<b¥/¬m-ý15-¡¬t.h
>

20 
	~<b¥/¬m-a9mpcÜe-¡¬t.h
>

22 
BSP_START_TEXT_SECTION
 
	$b¥_¡¬t_hook_0
()

24 
	`¬m_a9mpcÜe_¡¬t_hook_0
();

25 
	}
}

27 
BSP_START_TEXT_SECTION
 
	$b¥_¡¬t_hook_1
()

29 
	`¬m_a9mpcÜe_¡¬t_hook_1
();

30 
	`b¥_¡¬t_cÝy_£ùiÚs
();

31 
	`zynq_£tup_mmu_ªd_ÿche
();

33 #ià!
	`defed
(
RTEMS_SMP
) \

34 && (
	`defed
(
BSP_DATA_CACHE_ENABLED
) \

35 || 
	`defed
(
BSP_INSTRUCTION_CACHE_ENABLED
))

37 
	`¹ems_ÿche_abË_d©a
();

40 
	`b¥_¡¬t_þr_bss
();

41 
	}
}

	@src/lib/libbsp/arm/xilinx-zynq/startup/bspstartmmu.c

15 
	#ARM_CP15_TEXT_SECTION
 
BSP_START_TEXT_SECTION


	)

17 
	~<b¥.h
>

18 
	~<b¥/¡¬t.h
>

19 
	~<b¥/¬m-ý15-¡¬t.h
>

20 
	~<b¥/¬m-a9mpcÜe-¡¬t.h
>

22 
BSP_START_DATA_SECTION
 cÚ¡ 
¬m_ý15_¡¬t_£ùiÚ_cÚfig


23 
	gzynq_mmu_cÚfig_bË
[] = {

24 
ARMV7_CP15_START_DEFAULT_SECTIONS
,

26 .
beg
 = 0xe0000000U,

27 .
	gd
 = 0xe0200000U,

28 .
	gæags
 = 
ARMV7_MMU_DEVICE


30 .
	gbeg
 = 0xf8000000U,

31 .
	gd
 = 0xf9000000U,

32 .
	gæags
 = 
ARMV7_MMU_DEVICE


39 
BSP_START_TEXT_SECTION
 
	$zynq_£tup_mmu_ªd_ÿche
(è
	`__©ibu__
 ((
wk
));

41 
BSP_START_TEXT_SECTION
 
	$zynq_£tup_mmu_ªd_ÿche
()

43 
ut32_t
 
ù¾
 = 
	`¬m_ý15_¡¬t_£tup_mmu_ªd_ÿche
(

44 
ARM_CP15_CTRL_A
,

45 
ARM_CP15_CTRL_AFE
 | 
ARM_CP15_CTRL_Z


48 
	`¬m_ý15_¡¬t_£tup_ª¦©iÚ_bË_ªd_abË_mmu_ªd_ÿche
(

49 
ù¾
,

50 (
ut32_t
 *è
b¥_ª¦©iÚ_bË_ba£
,

51 
ARM_MMU_DEFAULT_CLIENT_DOMAIN
,

52 &
zynq_mmu_cÚfig_bË
[0],

53 
	`RTEMS_ARRAY_SIZE
(
zynq_mmu_cÚfig_bË
)

55 
	}
}

	@src/lib/libbsp/shared/bootcard.c

49 
	~<b¥/boÙÿrd.h
>

50 
	~<i2c.h
>

51 
	~<¹ems.h
>

57 cÚ¡ *
	gb¥_boÙ_cmdle
;

65 
	$boÙ_ÿrd
(

66 cÚ¡ *
cmdle


69 
¹ems_¼u±_Ëv
 
b¥_i¤_Ëv
;

74 (è
b¥_i¤_Ëv
;

75 
	`¹ems_¼u±_loÿl_di§bË
Ð
b¥_i¤_Ëv
 );

77 
b¥_boÙ_cmdle
 = 
cmdle
;

82 
	`b¥_¡¬t
();

87 
	`b¥_wÜk_¬_lize
();

92 
	`¹ems_lize_d©a_¡ruùu»s
();

98 
	`b¥_libc_
();

108 
	`b¥_´askg_hook
();

117 #ifdeà
RTEMS_DEBUG


118 
	`¹ems_debug_abË
Ð
RTEMS_DEBUG_ALL_MASK
 );

125 
	`¹ems_lize_befÜe_drivs
();

135 
	`b¥_´edriv_hook
();

140 
	`¹ems_lize_deviû_drivs
();

146 
	`b¥_po¡driv_hook
();

152 
	`¹ems_lize_¡¬t_muÉaskg
();

159 
	}
}

	@src/lib/libbsp/shared/bspclean.c

10 
	~<b¥.h
>

11 
	~<b¥/boÙÿrd.h
>

12 
	~<¹ems/b¥Io.h
>

14 
	$b¥_çl_exnsiÚ
(

15 
¹ems_çl_sourû
 
sourû
,

16 
boÞ
 
is_º®
,

17 
¹ems_çl_code
 
code


20 #ià(
BSP_PRESS_KEY_FOR_RESET
)

21 
	`´tk
( "\nEXECUTIVE SHUTDOWN! Any keyoeboot..." );

26  
	`gch¬k
() == -1 )

29 
	`´tk
("\n");

32 #ià(
BSP_PRINT_EXCEPTION_CONTEXT
)

33 iàÐ
sourû
 =ð
RTEMS_FATAL_SOURCE_EXCEPTION
 ) {

34 
	`¹ems_exû±iÚ_äame_´t
Ð(cÚ¡ 
¹ems_exû±iÚ_äame
 *è
code
 );

42 #ià(
BSP_PRESS_KEY_FOR_RESET
è|| (
BSP_RESET_BOARD_AT_EXIT
)

43 
	`b¥_»£t
();

45 
	}
}

	@src/lib/libbsp/shared/bspdriverlevelhook.c

12 
	~<b¥/boÙÿrd.h
>

14 
	$b¥_driv_Ëv_hook
Ð
Ëv
 )

16 
	}
}

	@src/lib/libbsp/shared/bspgetworkarea.c

16 
	~<b¥.h
>

17 
	~<b¥/boÙÿrd.h
>

18 #ifdeà
BSP_INTERRUPT_STACK_AT_WORK_AREA_BEGIN


19 
	~<¹ems/cÚfig.h
>

22 #ià
defed
(
HAS_UBOOT
è&& !defed(
BSP_DISABLE_UBOOT_WORK_AREA_CONFIG
)

23 
	#USE_UBOOT


	)

29 
WÜkA»aBa£
[];

34 #ifdeà
USE_UBOOT


35 
	~<b¥/u-boÙ.h
>

37 
RamBa£
[];

38 
RamSize
[];

41 
	$b¥_wÜk_¬_lize
()

43 
u_t
 
wÜk_ba£
 = (u_tè
WÜkA»aBa£
;

44 
u_t
 
¿m_d
;

46 #ifdeà
USE_UBOOT


47 
¿m_d
 = (
u_t
è
b¥_uboÙ_bßrd_fo
.
bi_mem¡¬t
 +

48 
b¥_uboÙ_bßrd_fo
.
bi_memsize
;

50 
¿m_d
 = (
u_t
)
RamBa£
 + (u_t)
RamSize
;

53 #ifdeà
BSP_INTERRUPT_STACK_AT_WORK_AREA_BEGIN


54 
wÜk_ba£
 +ð
	`¹ems_cÚfigu¿tiÚ_g_¼u±_¡ack_size
();

57 
	`b¥_wÜk_¬_lize_deçuÉ
Ð(*è
wÜk_ba£
, 
¿m_d
 - work_base );

58 
	}
}

	@src/lib/libbsp/shared/bsplibc.c

6 
	~<¹ems/libio.h
>

7 
	~<¹ems/libcsuµÜt.h
>

9 
	~<b¥/boÙÿrd.h
>

11 
	$b¥_libc_
()

18 (*
¹ems_libio__h³r
)();

23 
	`libc_
();

24 
	}
}

	@src/lib/libbsp/shared/bsppost.c

15 
	~<¹ems/libio.h
>

17 
	~<b¥/boÙÿrd.h
>

19 
	$b¥_po¡driv_hook
()

21 (*
¹ems_libio_po¡_driv_h³r
)();

22 
	}
}

	@src/lib/libbsp/shared/bsppredriverhook.c

12 
	~<b¥/boÙÿrd.h
>

14 
	$b¥_´edriv_hook
( )

16 
	}
}

	@src/lib/libbsp/shared/bsppretaskinghook.c

12 
	~<b¥/boÙÿrd.h
>

14 
	$b¥_´askg_hook
()

17 
	}
}

	@src/lib/libbsp/shared/bspreset.c

12 
	~<¹ems.h
>

13 
	~<b¥/boÙÿrd.h
>

15 
	$b¥_»£t
( )

17 
	}
}

	@src/lib/libbsp/shared/bspreset_loop.c

10 
	~<¹ems.h
>

11 
	~<b¥/boÙÿrd.h
>

13 
	$b¥_»£t
( )

17 
	}
}

	@src/lib/libbsp/shared/bspsmp.c

12 
	~<¹ems/scÜe/ýu.h
>

14 
ut32_t
 
	$_CPU_SMP_Inlize
( )

18 
	}
}

20 
boÞ
 
	$_CPU_SMP_S¹_´oûssÜ
Ð
ut32_t
 
ýu_dex
 )

22  
ue
;

23 
	}
}

25 
	$_CPU_SMP_F®ize_liz©iÚ
Ð
ut32_t
 
ýu_couÁ
 )

27 
	}
}

29 
	$_CPU_SMP_P»·»_¡¬t_muÉaskg
( )

31 
	}
}

33 
	$_CPU_SMP_Sd_¼u±
Ð
ut32_t
 
rg_´oûssÜ_dex
 )

35 
	}
}

	@src/lib/libbsp/shared/bspsmpgetcurrentprocessor.c

10 
	~<¹ems/scÜe/ýu.h
>

12 
ut32_t
 
	$_CPU_SMP_G_cu¼t_´oûssÜ
( )

15 
	}
}

	@src/lib/libbsp/shared/bspstart.c

10 
	~<b¥.h
>

11 
	~<b¥/boÙÿrd.h
>

18 
	$b¥_¡¬t
( )

20 
	}
}

	@src/lib/libbsp/shared/clock_driver_simidle.c

8 
	~<¹ems.h
>

9 
	~<¹ems/scÜe/³rýu.h
>

10 
	~<¹ems/scÜe/th»addi¥©ch.h
>

12 
	#CLOCK_VECTOR
 0

	)

14 
	#Clock_driv_suµÜt_©_tick
()

	)

16 
	#Clock_driv_suµÜt_¡®l_i¤
Ð
_Ãw
, 
_Þd
 ) \

17 dØ{ 
_Þd
 = 0; } 0)

	)

19 vÞ©
boÞ
 
	gþock_driv_abËd
;

21 
	#Clock_driv_suµÜt_lize_h¬dw¬e
() \

23 
þock_driv_abËd
 = 
ue
; \

24 } 0)

	)

26 
	#Clock_driv_suµÜt_shutdown_h¬dw¬e
() \

28 
þock_driv_abËd
 = 
çl£
; \

29 } 0)

	)

31 
	#CLOCK_DRIVER_USE_DUMMY_TIMECOUNTER


	)

33 
	~"þockdrv_shl.h
"

40 #iâdeà
BSP_CLOCK_DRIVER_DELAY


41 
	#BSP_CLOCK_DRIVER_DELAY
()

	)

49 
Th»ad
 
	$þock_driv_sim_idË_body
(

50 
u_t
 
ignÜed


54 iàÐ
þock_driv_abËd
 ) {

55 
	`_Th»ad_Di§bË_di¥©ch
();

56 
_ISR_Ne¡_Ëv
++;

57 
	`¹ems_þock_tick
();

58 
_ISR_Ne¡_Ëv
--;

59 
	`_Th»ad_EÇbË_di¥©ch
();

60 
	`BSP_CLOCK_DRIVER_DELAY
();

64 
	}
}

	@src/lib/libbsp/shared/clockdrv_shell.h

18 
	~<¡dlib.h
>

20 
	~<b¥.h
>

21 
	~<¹ems/þockdrv.h
>

22 
	~<¹ems/scÜe/³rýu.h
>

24 #ifdeà
Clock_driv_Çno£cÚds_sû_Ï¡_tick


36 #ià
CLOCK_DRIVER_USE_FAST_IDLE
 && 
CLOCK_DRIVER_ISRS_PER_TICK


43 #iâdeà
Clock_driv_suµÜt_fd_tim


44 
	#Clock_driv_suµÜt_fd_tim
()

	)

50 #iâdeà
Clock_driv_suµÜt_©_tick


51 
	#Clock_driv_suµÜt_©_tick
()

	)

58 #iâdeà
Clock_driv_timecouÁ_tick


59 #ifdeà
CLOCK_DRIVER_USE_DUMMY_TIMECOUNTER


60 
	#Clock_driv_timecouÁ_tick
(è
	`¹ems_þock_tick
()

	)

62 
	#Clock_driv_timecouÁ_tick
(è
	`¹ems_timecouÁ_tick
()

	)

69 #ià
CLOCK_DRIVER_ISRS_PER_TICK


70 vÞ©
ut32_t
 
	gClock_driv_i¤s
;

76 vÞ©
ut32_t
 
	gClock_driv_ticks
;

78 
Clock_ex
( );

87 #ià
defed
(
BSP_FEATURE_IRQ_EXTENSION
) || \

88 (
	gCPU_SIMPLE_VECTORED_INTERRUPTS
 !ð
TRUE
)

89 
Clock_i¤
(*
¬g
);

90 
	$Clock_i¤
(*
¬g
)

93 
¹ems_i¤
 
	`Clock_i¤
(
¹ems_veùÜ_numb
 
veùÜ
);

94 
¹ems_i¤
 
	$Clock_i¤
(

95 
¹ems_veùÜ_numb
 
veùÜ


102 
Clock_driv_ticks
 += 1;

104 #ià
CLOCK_DRIVER_USE_FAST_IDLE


106 
timecouÁ
 *
tc
 = 
_TimecouÁ
;

107 
ut64_t
 
us_³r_tick
 = 
	`¹ems_cÚfigu¿tiÚ_g_miüo£cÚds_³r_tick
();

108 
ut32_t
 
rv®
 = (uint32_t)

109 ((
tc
->
tc_äequcy
 * 
us_³r_tick
) / 1000000);

111 
	`Clock_driv_timecouÁ_tick
();

114 
_Th»ad_He
 =ð
_Th»ad_Executg


115 && 
_Th»ad_Executg
->
S¹
.
y_pot


116 =ð(
Th»ad_EÁry
è
	`¹ems_cÚfigu¿tiÚ_g_idË_sk
()

118 
ISR_lock_CÚxt
 
lock_cÚxt
;

120 
	`_TimecouÁ_Acque
(&
lock_cÚxt
);

121 
	`_TimecouÁ_Tick_sim¶e
(

122 
rv®
,

123 (*
tc
->
tc_g_timecouÁ
)(tc),

124 &
lock_cÚxt


128 
	`Clock_driv_suµÜt_©_tick
();

136 
	`Clock_driv_suµÜt_©_tick
();

138 #ià
CLOCK_DRIVER_ISRS_PER_TICK


142 iàÐ!
Clock_driv_i¤s
 ) {

143 
	`Clock_driv_timecouÁ_tick
();

145 
Clock_driv_i¤s
 = 
CLOCK_DRIVER_ISRS_PER_TICK
;

147 
Clock_driv_i¤s
--;

152 
	`Clock_driv_timecouÁ_tick
();

155 
	}
}

163 
	$Clock_ex
( )

165 
	`Clock_driv_suµÜt_shutdown_h¬dw¬e
();

168 
	}
}

181 
¹ems_deviû_driv
 
	$Clock_lize
(

182 
¹ems_deviû_majÜ_numb
 
majÜ
,

183 
¹ems_deviû_mÜ_numb
 
mÜ
,

184 *
·rgp


187 
¹ems_i¤_y
 
Old_tick
;

189 
Clock_driv_ticks
 = 0;

194 
	`Clock_driv_suµÜt_fd_tim
();

199 (è
Old_tick
;

200 
	`Clock_driv_suµÜt_¡®l_i¤
Ð
Clock_i¤
, 
Old_tick
 );

205 
	`Clock_driv_suµÜt_lize_h¬dw¬e
();

207 
	`©ex
Ð
Clock_ex
 );

212 #ià
CLOCK_DRIVER_ISRS_PER_TICK


213 
Clock_driv_i¤s
 = 
CLOCK_DRIVER_ISRS_PER_TICK_VALUE
;

216  
RTEMS_SUCCESSFUL
;

217 
	}
}

	@src/lib/libbsp/shared/console-output-char.c

15 
	~<libch/£rl.h
>

17 
	$ouut_ch¬
(
c
)

19 
mÜ
 = (è
CÚsÞe_PÜt_MÜ
;

20 cÚ¡ 
cÚsÞe_tbl
 *
ù
 = 
CÚsÞe_PÜt_Tbl
 !ð
NULL
 ?

21 
CÚsÞe_PÜt_Tbl
[
mÜ
] : &
CÚsÞe_CÚfigu¿tiÚ_PÜts
[minor];

22 cÚ¡ 
cÚsÞe_âs
 *
cf
 = 
ù
->
pDeviûFns
;

24 ià(
c
 == '\n') {

25 (*
cf
->
deviûWrePÞËd
)(
mÜ
, '\r');

28 (*
cf
->
deviûWrePÞËd
)(
mÜ
, 
c
);

29 
	}
}

31 
	$ouut_ch¬_
(
c
)

33 ià(
CÚsÞe_PÜt_Tbl
 =ð
NULL
) {

34 
mÜ
 = (è
CÚsÞe_PÜt_MÜ
;

35 cÚ¡ 
cÚsÞe_âs
 *
cf
 = 
CÚsÞe_CÚfigu¿tiÚ_PÜts
[
mÜ
].
pDeviûFns
;

37 (*
cf
->
deviûInlize
)(
mÜ
);

40 
BSP_ouut_ch¬
 = 
ouut_ch¬
;

41 
	`ouut_ch¬
(
c
);

42 
	}
}

44 
BSP_ouut_ch¬_funùiÚ_ty³
 
	gBSP_ouut_ch¬
 = 
ouut_ch¬_
;

46 
BSP_pÞlg_gch¬_funùiÚ_ty³
 
	gBSP_pÞl_ch¬
 = 
NULL
;

	@src/lib/libbsp/shared/console-polled.c

16 
	~<b¥.h
>

17 
	~<¹ems/libio.h
>

18 
	~<¡dlib.h
>

19 
	~<as£¹.h
>

21 
	~<b¥/cÚsÞe-pÞËd.h
>

26 
ssize_t
 
cÚsÞe_wre_suµÜt
(, cÚ¡ *, 
size_t
);

32 
ssize_t
 
	$cÚsÞe_wre_suµÜt
 (

33 
mÜ
,

34 cÚ¡ *
buçrg
,

35 
size_t
 
Ën


38 
nwre
 = 0;

39 cÚ¡ *
buf
 = 
buçrg
;

41 
nwre
 < 
Ën
) {

42 
	`cÚsÞe_outby_pÞËd
Ð
mÜ
, *
buf
++ );

43 
nwre
++;

45  
nwre
;

46 
	}
}

53 
¹ems_deviû_driv
 
	$cÚsÞe_lize
(

54 
¹ems_deviû_majÜ_numb
 
majÜ
,

55 
¹ems_deviû_mÜ_numb
 
mÜ
,

56 *
¬g


59 
¹ems_¡©us_code
 
¡©us
;

64 
	`¹ems_rmios_lize
();

69 
	`cÚsÞe_lize_h¬dw¬e
();

74 
¡©us
 = 
	`¹ems_io_»gi¡_Çme
Ð"/dev/cÚsÞe", 
majÜ
, 0 );

75 ià(
¡©us
 !ð
RTEMS_SUCCESSFUL
)

76 
	`¹ems_çl_rÜ_occu¼ed
(
¡©us
);

78  
RTEMS_SUCCESSFUL
;

79 
	}
}

81 
¹ems_deviû_driv
 
	$cÚsÞe_Ý
(

82 
¹ems_deviû_majÜ_numb
 
majÜ
,

83 
¹ems_deviû_mÜ_numb
 
mÜ
,

84 * 
¬g


87 cÚ¡ 
¹ems_rmios_ÿÎbacks
 
pÞlC®lbacks
 = {

88 
NULL
,

89 
NULL
,

90 
cÚsÞe_by_nÚblockg
,

91 
cÚsÞe_wre_suµÜt
,

92 
NULL
,

93 
NULL
,

94 
NULL
,

98 
	`as£¹
Ð
mÜ
 <= 1 );

99 iàÐ
mÜ
 > 1 )

100  
RTEMS_INVALID_NUMBER
;

102 
	`¹ems_rmios_Ý
Ð
majÜ
, 
mÜ
, 
¬g
, &
pÞlC®lbacks
 );

104  
RTEMS_SUCCESSFUL
;

105 
	}
}

107 
¹ems_deviû_driv
 
	$cÚsÞe_þo£
(

108 
¹ems_deviû_majÜ_numb
 
majÜ
,

109 
¹ems_deviû_mÜ_numb
 
mÜ
,

110 * 
¬g


113  
	`¹ems_rmios_þo£
Ð
¬g
 );

114 
	}
}

116 
¹ems_deviû_driv
 
	$cÚsÞe_»ad
(

117 
¹ems_deviû_majÜ_numb
 
majÜ
,

118 
¹ems_deviû_mÜ_numb
 
mÜ
,

119 * 
¬g


122  
	`¹ems_rmios_»ad
Ð
¬g
 );

123 
	}
}

125 
¹ems_deviû_driv
 
	$cÚsÞe_wre
(

126 
¹ems_deviû_majÜ_numb
 
majÜ
,

127 
¹ems_deviû_mÜ_numb
 
mÜ
,

128 * 
¬g


131  
	`¹ems_rmios_wre
Ð
¬g
 );

132 
	}
}

134 
¹ems_deviû_driv
 
	$cÚsÞe_cÚÞ
(

135 
¹ems_deviû_majÜ_numb
 
majÜ
,

136 
¹ems_deviû_mÜ_numb
 
mÜ
,

137 * 
¬g


140  
	`¹ems_rmios_ioùl
Ð
¬g
 );

141 
	}
}

	@src/lib/libbsp/shared/console-termios-init.c

15 
	~<b¥/cÚsÞe-rmios.h
>

16 
	~<b¥/çl.h
>

18 
	~<¹ems/cÚsÞe.h
>

20 
RTEMS_INTERRUPT_LOCK_DEFINE
Ð, 
cÚsÞe_lock
, "console" )

22 
¹ems_deviû_majÜ_numb
 
	gcÚsÞe_majÜ
 = 
UINT32_MAX
;

24 
¹ems_deviû_mÜ_numb
 
	gcÚsÞe_mÜ
;

26 
¹ems_¡©us_code
 
	$cÚsÞe_deviû_¡®l
(

27 cÚ¡ *
deviû_fe
,

28 cÚ¡ 
¹ems_rmios_deviû_hªdËr
 *
hªdËr
,

29 cÚ¡ 
¹ems_rmios_deviû_æow
 *
æow
,

30 
¹ems_rmios_deviû_cÚxt
 *
cÚxt


33 
¹ems_¼u±_lock_cÚxt
 
lock_cÚxt
;

34 
¹ems_deviû_mÜ_numb
 
mÜ
;

36 
	`¹ems_¼u±_lock_acque
Ð&
cÚsÞe_lock
, &
lock_cÚxt
 );

37 
mÜ
 = 
cÚsÞe_mÜ
;

38 ++
cÚsÞe_mÜ
;

39 
	`¹ems_¼u±_lock_»Ëa£
Ð&
cÚsÞe_lock
, &
lock_cÚxt
 );

41  
	`¹ems_rmios_deviû_¡®l
(

42 
deviû_fe
,

43 
cÚsÞe_majÜ
,

44 
mÜ
,

45 
hªdËr
,

46 
æow
,

47 
cÚxt


49 
	}
}

51 
boÞ
 
	$cÚsÞe_deviû_´obe_deçuÉ
(
¹ems_rmios_deviû_cÚxt
 *
cÚxt
)

53 (è
cÚxt
;

55  
ue
;

56 
	}
}

58 
¹ems_deviû_driv
 
	$cÚsÞe_lize
(

59 
¹ems_deviû_majÜ_numb
 
majÜ
,

60 
¹ems_deviû_mÜ_numb
 
mÜ
,

61 *
¬g


64 
boÞ
 
cÚsÞe_deviû_dÚe
 = 
çl£
;

66 
	`¹ems_rmios_lize
();

68  
mÜ
 = 0; mÜ < 
cÚsÞe_deviû_couÁ
; ++minor ) {

69 cÚ¡ 
cÚsÞe_deviû
 *
ùx
 = &
cÚsÞe_deviû_bË
[ 
mÜ
 ];

70 
¹ems_¡©us_code
 
sc
;

72 iàÐÐ*
ùx
->
´obe
 )Ðùx->
cÚxt
 ) ) {

73 
sc
 = 
	`¹ems_rmios_deviû_¡®l
(

74 
ùx
->
deviû_fe
,

75 
majÜ
,

76 
mÜ
,

77 
ùx
->
hªdËr
,

78 
ùx
->
æow
,

79 
ùx
->
cÚxt


81 iàÐ
sc
 !ð
RTEMS_SUCCESSFUL
 ) {

82 
	`b¥_çl
Ð
BSP_FATAL_CONSOLE_INSTALL_0
 );

85 iàÐ!
cÚsÞe_deviû_dÚe
 ) {

86 
cÚsÞe_deviû_dÚe
 = 
ue
;

88 
sc
 = 
	`¹ems_io_»gi¡_Çme
Ð
CONSOLE_DEVICE_NAME
, 
majÜ
, 
mÜ
 );

89 iàÐ
sc
 !ð
RTEMS_SUCCESSFUL
 ) {

90 
	`b¥_çl
Ð
BSP_FATAL_CONSOLE_INSTALL_1
 );

96 
cÚsÞe_majÜ
 = 
majÜ
;

97 
cÚsÞe_mÜ
 = 
mÜ
;

99  
RTEMS_SUCCESSFUL
;

100 
	}
}

	@src/lib/libbsp/shared/console-termios.c

15 
	~<¹ems/cÚsÞe.h
>

16 
	~<¹ems/rmio¡y³s.h
>

18 
¹ems_deviû_driv
 
	$cÚsÞe_Ý
(

19 
¹ems_deviû_majÜ_numb
 
majÜ
,

20 
¹ems_deviû_mÜ_numb
 
mÜ
,

21 *
¬g


24  
	`¹ems_rmios_deviû_Ý
Ð
majÜ
, 
mÜ
, 
¬g
 );

25 
	}
}

27 
¹ems_deviû_driv
 
	$cÚsÞe_þo£
(

28 
¹ems_deviû_majÜ_numb
 
majÜ
,

29 
¹ems_deviû_mÜ_numb
 
mÜ
,

30 *
¬g


33 (è
majÜ
;

34 (è
mÜ
;

36  
	`¹ems_rmios_deviû_þo£
Ð
¬g
 );

37 
	}
}

39 
¹ems_deviû_driv
 
	$cÚsÞe_»ad
(

40 
¹ems_deviû_majÜ_numb
 
majÜ
,

41 
¹ems_deviû_mÜ_numb
 
mÜ
,

42 *
¬g


45 (è
majÜ
;

46 (è
mÜ
;

48  
	`¹ems_rmios_»ad
Ð
¬g
 );

49 
	}
}

51 
¹ems_deviû_driv
 
	$cÚsÞe_wre
(

52 
¹ems_deviû_majÜ_numb
 
majÜ
,

53 
¹ems_deviû_mÜ_numb
 
mÜ
,

54 *
¬g


57 (è
majÜ
;

58 (è
mÜ
;

60  
	`¹ems_rmios_wre
Ð
¬g
 );

61 
	}
}

63 
¹ems_deviû_driv
 
	$cÚsÞe_cÚÞ
(

64 
¹ems_deviû_majÜ_numb
 
majÜ
,

65 
¹ems_deviû_mÜ_numb
 
mÜ
,

66 *
¬g


69 (è
majÜ
;

70 (è
mÜ
;

72  
	`¹ems_rmios_ioùl
Ð
¬g
 );

73 
	}
}

	@src/lib/libbsp/shared/console.c

18 
	~<b¥.h
>

19 
	~<b¥/çl.h
>

20 
	~<¹ems/libio.h
>

21 
	~<¹ems/cÚsÞe.h
>

22 
	~<¡dlib.h
>

23 
	~<as£¹.h
>

24 
	~<rmios.h
>

26 
	~<¹ems/rmio¡y³s.h
>

27 
	~<libch/£rl.h
>

28 
	~"cÚsÞe_´iv©e.h
"

30 
	gCÚsÞe_PÜt_CouÁ
 = 0;

31 
cÚsÞe_tbl
 **
	gCÚsÞe_PÜt_Tbl
 = 
NULL
;

32 
cÚsÞe_d©a
 *
	gCÚsÞe_PÜt_D©a
 = 
NULL
;

33 
¹ems_deviû_mÜ_numb
 
	gCÚsÞe_PÜt_MÜ
 = 0;

34 
boÞ
 
	gcÚsÞe_lized
 = 
çl£
;

42 
	$cÚsÞe_lize_pors
()

44 
i
;

46 iàÐ
CÚsÞe_PÜt_Tbl
 )

49 
CÚsÞe_PÜt_CouÁ
 = 
CÚsÞe_CÚfigu¿tiÚ_CouÁ
;

50 
CÚsÞe_PÜt_Tbl
 = 
	`m®loc
Ð
CÚsÞe_PÜt_CouÁ
 * Ð
cÚsÞe_tbl
 * ) );

51 ià(
CÚsÞe_PÜt_Tbl
 =ð
NULL
)

52 
	`b¥_çl
Ð
BSP_FATAL_CONSOLE_NO_MEMORY_0
 );

54 
i
=0 ; i < 
CÚsÞe_PÜt_CouÁ
 ; i++)

55 
CÚsÞe_PÜt_Tbl
[
i
] = &
CÚsÞe_CÚfigu¿tiÚ_PÜts
[i];

56 
	}
}

64 
	$cÚsÞe_»gi¡_deviûs
(

65 
cÚsÞe_tbl
 *
Ãw_pÜts
,

66 
size_t
 
numb_of_pÜts


69 
Þd_numb_of_pÜts
;

70 
i
;

72 
	`cÚsÞe_lize_pors
();

78 iàÐ
cÚsÞe_lized
 ) {

79 
	`b¥_çl
Ð
BSP_FATAL_CONSOLE_MULTI_INIT
 );

85 
Þd_numb_of_pÜts
 = 
CÚsÞe_PÜt_CouÁ
;

86 
CÚsÞe_PÜt_CouÁ
 +ð
numb_of_pÜts
;

87 
CÚsÞe_PÜt_Tbl
 = 
	`»®loc
(

88 
CÚsÞe_PÜt_Tbl
,

89 
CÚsÞe_PÜt_CouÁ
 * Ð
cÚsÞe_tbl
 * )

91 iàÐ
CÚsÞe_PÜt_Tbl
 =ð
NULL
 ) {

92 
	`b¥_çl
Ð
BSP_FATAL_CONSOLE_NO_MEMORY_1
 );

95 
CÚsÞe_PÜt_D©a
 = 
	`ÿÎoc
Ð
CÚsÞe_PÜt_CouÁ
, Ð
cÚsÞe_d©a
 ) );

96 iàÐ
CÚsÞe_PÜt_D©a
 =ð
NULL
 ) {

97 
	`b¥_çl
Ð
BSP_FATAL_CONSOLE_NO_MEMORY_2
 );

104 
i
=0 ; i < 
numb_of_pÜts
 ; i++) {

105 
CÚsÞe_PÜt_Tbl
[
Þd_numb_of_pÜts
 + 
i
] = &
Ãw_pÜts
[i];

107 
	}
}

114 
¹ems_deviû_driv
 
	$cÚsÞe_Ý
(

115 
¹ems_deviû_majÜ_numb
 
majÜ
,

116 
¹ems_deviû_mÜ_numb
 
mÜ
,

117 * 
¬g


120 
¹ems_¡©us_code
 
¡©us
;

121 
¹ems_libio_Ý_þo£_¬gs_t
 *
¬gs
 = 
¬g
;

122 
¹ems_libio_ioùl_¬gs_t
 
IoùlArgs
;

123 
rmios
 
Tmios
;

124 
¹ems_rmios_ÿÎbacks
 
C®lbacks
;

125 
cÚsÞe_tbl
 *
ý
;

126 
¹ems_rmios_y
 *
cu¼t_y
;

131 iàÐ
mÜ
 > 
CÚsÞe_PÜt_CouÁ
 ) {

132  
RTEMS_INVALID_NUMBER
;

139 
ý
 = 
CÚsÞe_PÜt_Tbl
[
mÜ
];

140 
C®lbacks
.
f¡O³n
 = 
ý
->
pDeviûFns
->
deviûF¡O³n
;

141 
C®lbacks
.
Ï¡Clo£
 = 
ý
->
pDeviûFns
->
deviûLa¡Clo£
;

142 
C®lbacks
.
pÞlRd
 = 
ý
->
pDeviûFns
->
deviûRd
;

143 
C®lbacks
.
wre
 = 
ý
->
pDeviûFns
->
deviûWre
;

144 
C®lbacks
.
£tAribus
 = 
ý
->
pDeviûFns
->
deviûSAribus
;

145 ià(
ý
->
pDeviûFlow
 !ð
NULL
) {

146 
C®lbacks
.
¡ÝRemÙeTx
 = 
ý
->
pDeviûFlow
->
deviûStÝRemÙeTx
;

147 
C®lbacks
.
¡¬tRemÙeTx
 = 
ý
->
pDeviûFlow
->
deviûS¹RemÙeTx
;

149 
C®lbacks
.
¡ÝRemÙeTx
 = 
NULL
;

150 
C®lbacks
.
¡¬tRemÙeTx
 = 
NULL
;

152 
C®lbacks
.
ouutU£sIÁru±s
 = 
ý
->
pDeviûFns
->
deviûOuutU£sIÁru±s
;

159 
¡©us
 = 
	`¹ems_rmios_Ý
Ð
majÜ
, 
mÜ
, 
¬g
, &
C®lbacks
 );

160 
CÚsÞe_PÜt_D©a
[
mÜ
].
rmios_d©a
 = 
¬gs
->
iÝ
->
d©a1
;

163 
cu¼t_y
 = 
CÚsÞe_PÜt_D©a
[
mÜ
].
rmios_d©a
;

165 iàÐ(
cu¼t_y
->
»fcouÁ
 == 1) ) {

170 #ià
	`defed
(
BSP_DEFAULT_BAUD_RATE
)

171 
	`¹ems_rmios_£t_l_baud
Ð
cu¼t_y
, 
BSP_DEFAULT_BAUD_RATE
 );

177 iàÐ
mÜ
 !ð
CÚsÞe_PÜt_MÜ
 ) {

181 
IoùlArgs
.
iÝ
 = 
¬gs
->iop;

182 
IoùlArgs
.
commªd
 = 
RTEMS_IO_GET_ATTRIBUTES
;

183 
IoùlArgs
.
bufãr
 = &
Tmios
;

184 
	`¹ems_rmios_ioùl
Ð&
IoùlArgs
 );

186 
Tmios
.
c_læag
 = 
ICANON
;

187 
IoùlArgs
.
commªd
 = 
RTEMS_IO_SET_ATTRIBUTES
;

188 
	`¹ems_rmios_ioùl
Ð&
IoùlArgs
 );

192 iàÐ(
¬gs
->
iÝ
->
æags
&
LIBIO_FLAGS_READ
) &&

193 
ý
->
pDeviûFlow
 &&

194 
ý
->
pDeviûFlow
->
deviûS¹RemÙeTx
) {

195 
ý
->
pDeviûFlow
->
	`deviûS¹RemÙeTx
(
mÜ
);

198  
¡©us
;

199 
	}
}

206 
¹ems_deviû_driv
 
	$cÚsÞe_þo£
(

207 
¹ems_deviû_majÜ_numb
 
majÜ
,

208 
¹ems_deviû_mÜ_numb
 
mÜ
,

209 * 
¬g


212 
¹ems_libio_Ý_þo£_¬gs_t
 *
¬gs
 = 
¬g
;

213 
¹ems_rmios_y
 *
cu¼t_y
;

214 
cÚsÞe_tbl
 *
ý
;

216 
ý
 = 
CÚsÞe_PÜt_Tbl
[
mÜ
];

219 
cu¼t_y
 = 
CÚsÞe_PÜt_D©a
[
mÜ
].
rmios_d©a
;

224 iàÐ(
cu¼t_y
->
»fcouÁ
 == 1) ) {

225 iàÐ(
¬gs
->
iÝ
->
æags
&
LIBIO_FLAGS_READ
) &&

226 
ý
->
pDeviûFlow
 &&

227 
ý
->
pDeviûFlow
->
deviûStÝRemÙeTx
) {

228 
ý
->
pDeviûFlow
->
	`deviûStÝRemÙeTx
(
mÜ
);

232  
	`¹ems_rmios_þo£
 (
¬g
);

233 
	}
}

240 
¹ems_deviû_driv
 
	$cÚsÞe_lize
(

241 
¹ems_deviû_majÜ_numb
 
majÜ
,

242 
¹ems_deviû_mÜ_numb
 
mÜ_¬g
,

243 *
¬g


246 
¹ems_¡©us_code
 
¡©us
;

247 
¹ems_deviû_mÜ_numb
 
mÜ
;

248 
cÚsÞe_tbl
 *
pÜt
;

254 iàÐ! 
CÚsÞe_PÜt_Tbl
 ) {

255 
	`cÚsÞe_lize_pors
();

256 
CÚsÞe_PÜt_D©a
 = 
	`ÿÎoc
Ð
CÚsÞe_PÜt_CouÁ
, Ð
cÚsÞe_d©a
 ) );

257 iàÐ
CÚsÞe_PÜt_D©a
 =ð
NULL
 ) {

258 
	`b¥_çl
Ð
BSP_FATAL_CONSOLE_NO_MEMORY_3
 );

266 
cÚsÞe_lized
 = 
ue
;

273 
	`¹ems_rmios_lize
();

274 
	`b¥_cÚsÞe_£Ëù
();

280 
mÜ
=0 ; mÜ < 
CÚsÞe_PÜt_CouÁ
 ; minor++) {

285 
pÜt
 = 
CÚsÞe_PÜt_Tbl
[
mÜ
];

287 iàÐ(!
pÜt
->
deviûProbe
 ||Üt->
	`deviûProbe
(
mÜ
)) &&

288 
pÜt
->
pDeviûFns
->
	`deviûProbe
(
mÜ
)) {

290 ià(
pÜt
->
sDeviûName
 !ð
NULL
) {

291 
¡©us
 = 
	`¹ems_io_»gi¡_Çme
Ð
pÜt
->
sDeviûName
, 
majÜ
, 
mÜ
 );

292 ià(
¡©us
 !ð
RTEMS_SUCCESSFUL
) {

293 
	`b¥_çl
Ð
BSP_FATAL_CONSOLE_REGISTER_DEV_0
 );

297 ià(
mÜ
 =ð
CÚsÞe_PÜt_MÜ
) {

298 
¡©us
 = 
	`¹ems_io_»gi¡_Çme
Ð
CONSOLE_DEVICE_NAME
, 
majÜ
, 
mÜ
 );

299 ià(
¡©us
 !ð
RTEMS_SUCCESSFUL
) {

300 
	`b¥_çl
Ð
BSP_FATAL_CONSOLE_REGISTER_DEV_1
 );

307 
pÜt
->
pDeviûFns
->
	`deviûInlize
(
mÜ
);

312  
RTEMS_SUCCESSFUL
;

313 
	}
}

	@src/lib/libbsp/shared/console_control.c

22 
	~<b¥.h
>

23 
	~<¹ems/libio.h
>

24 
	~<¡dlib.h
>

25 
	~<as£¹.h
>

26 
	~<rmios.h
>

28 
	~<¹ems/rmio¡y³s.h
>

29 
	~<¹ems/cÚsÞe.h
>

30 
	~<libch/£rl.h
>

31 
	~"cÚsÞe_´iv©e.h
"

38 
¹ems_deviû_driv
 
	$cÚsÞe_cÚÞ
(

39 
¹ems_deviû_majÜ_numb
 
majÜ
,

40 
¹ems_deviû_mÜ_numb
 
mÜ
,

41 * 
¬g


44  
	`¹ems_rmios_ioùl
 (
¬g
);

45 
	}
}

	@src/lib/libbsp/shared/console_private.h

18 #iâdeà
_PC386_CONSOLE_PRIVATE_h


19 
	#_PC386_CONSOLE_PRIVATE_h


	)

21 
	~<¹ems.h
>

23 
	~<libch/£rl.h
>

25 #ifdeà
__ýlu¥lus


29 
¹ems_deviû_mÜ_numb
 
BSPPrtkPÜt
;

38 
b¥_com_outch
(
ch
);

49 
b¥_com_ch
();

58 
vt_ioùl
Ð
cmd
, 
¬g
);

71 
cÚsÞe_»gi¡_deviûs
(

72 
cÚsÞe_tbl
 *
Ãw_pÜts
,

73 
size_t
 
numb_of_pÜts


76 #ifdeà
__ýlu¥lus


	@src/lib/libbsp/shared/console_read.c

21 
	~<b¥.h
>

22 
	~<¹ems/libio.h
>

23 
	~<¡dlib.h
>

24 
	~<as£¹.h
>

25 
	~<rmios.h
>

27 
	~<¹ems/rmio¡y³s.h
>

28 
	~<¹ems/cÚsÞe.h
>

29 
	~<libch/£rl.h
>

30 
	~"cÚsÞe_´iv©e.h
"

37 
¹ems_deviû_driv
 
	$cÚsÞe_»ad
(

38 
¹ems_deviû_majÜ_numb
 
majÜ
,

39 
¹ems_deviû_mÜ_numb
 
mÜ
,

40 * 
¬g


43  
	`¹ems_rmios_»ad
 (
¬g
);

44 
	}
}

	@src/lib/libbsp/shared/console_select.c

21 
	~<b¥.h
>

22 
	~<b¥/çl.h
>

23 
	~<¹ems/libio.h
>

24 
	~<¡dlib.h
>

25 
	~<as£¹.h
>

26 
	~<rmios.h
>

28 
	~<¹ems/rmio¡y³s.h
>

29 
	~<libch/£rl.h
>

30 
	~"cÚsÞe_´iv©e.h
"

36 
boÞ
 
	$b¥_Is_AvaabË
Ð
¹ems_deviû_mÜ_numb
 
mÜ
 )

38 
cÚsÞe_tbl
 *
ý
 = 
CÚsÞe_PÜt_Tbl
[
mÜ
];

44 ià((!
ý
->
deviûProbe
 || c±r->
	`deviûProbe
(
mÜ
)) &&

45 
ý
->
pDeviûFns
->
	`deviûProbe
(
mÜ
)) {

46  
ue
;

48  
çl£
;

49 
	}
}

54 
¹ems_deviû_mÜ_numb
 
	$b¥_F¡_AvaabË_Deviû
( )

56 
¹ems_deviû_mÜ_numb
 
mÜ
;

58 
mÜ
=0; mÜ < 
CÚsÞe_PÜt_CouÁ
 ; minor++) {

59 
cÚsÞe_tbl
 *
ý
 = 
CÚsÞe_PÜt_Tbl
[
mÜ
];

66 ià((!
ý
->
deviûProbe
 || c±r->
	`deviûProbe
(
mÜ
)) &&

67 
ý
->
pDeviûFns
->
	`deviûProbe
(
mÜ
)) {

68  
mÜ
;

75 
	`b¥_çl
(
BSP_FATAL_CONSOLE_NO_DEV
);

76 
	}
}

78 
	$b¥_cÚsÞe_£Ëù
()

94 iàÐ!
	`b¥_Is_AvaabË
Ð
CÚsÞe_PÜt_MÜ
 ) ) {

95 
CÚsÞe_PÜt_MÜ
 = 
	`b¥_F¡_AvaabË_Deviû
();

97 
	}
}

	@src/lib/libbsp/shared/console_select_simple.c

15 
	~<libch/£rl.h
>

17 
	~<b¥.h
>

19 
	$b¥_cÚsÞe_£Ëù
()

21 
CÚsÞe_PÜt_MÜ
 = 
BSP_CONSOLE_MINOR
;

22 
	}
}

	@src/lib/libbsp/shared/console_write.c

21 
	~<b¥.h
>

22 
	~<¹ems/libio.h
>

23 
	~<¡dlib.h
>

24 
	~<as£¹.h
>

25 
	~<rmios.h
>

27 
	~<¹ems/rmio¡y³s.h
>

28 
	~<¹ems/cÚsÞe.h
>

29 
	~<libch/£rl.h
>

30 
	~"cÚsÞe_´iv©e.h
"

37 
¹ems_deviû_driv
 
	$cÚsÞe_wre
(

38 
¹ems_deviû_majÜ_numb
 
majÜ
,

39 
¹ems_deviû_mÜ_numb
 
mÜ
,

40 * 
¬g


43  
	`¹ems_rmios_wre
 (
¬g
);

44 
	}
}

	@src/lib/libbsp/shared/cpucounterdiff.c

15 
	~<¹ems/scÜe/ýu.h
>

17 
CPU_CouÁ_ticks
 
	$_CPU_CouÁ_difã»nû
(

18 
CPU_CouÁ_ticks
 
£cÚd
,

19 
CPU_CouÁ_ticks
 
f¡


22  
£cÚd
 - 
f¡
;

23 
	}
}

	@src/lib/libbsp/shared/cpucounterread.c

15 
	~<¹ems/scÜe/ýu.h
>

17 
CPU_CouÁ_ticks
 
	$_CPU_CouÁ_»ad
( )

19 
CPU_CouÁ_ticks
 
couÁ
;

21 
CPU_CouÁ_ticks
 
¢­shÙ
;

23 
¢­shÙ
 = 
couÁ
;

24 
couÁ
 = 
¢­shÙ
 + 1;

26  
¢­shÙ
;

27 
	}
}

	@src/lib/libbsp/shared/doxygen.h

	@src/lib/libbsp/shared/dummy_printk_support.c

22 
	~<¹ems.h
>

23 
	~<¹ems/b¥Io.h
>

25 
	$BSP_ouut_ch¬_f
(
c
)

28 
	}
}

30 
BSP_ouut_ch¬_funùiÚ_ty³
 
	gBSP_ouut_ch¬
 = 
BSP_ouut_ch¬_f
;

31 
BSP_pÞlg_gch¬_funùiÚ_ty³
 
	gBSP_pÞl_ch¬
 = 
NULL
;

	@src/lib/libbsp/shared/gdbstub/rtems-stub-glue.c

31 
	~<¹ems.h
>

32 
	~<¹ems/scÜe/sys¡©e.h
>

33 
	~<¹ems/scÜe/objeùim¶.h
>

34 
	~<¡rg.h
>

36 
	~"gdb_if.h
"

39 #undeà
ASSERT


40 
	#ASSERT
(
x
)

	)

42 cÚ¡ 
gdb_hexch¬s
[];

49 
¹ems_gdb_¡ub_g_»gi¡s_äom_cÚxt
(

50 *
»gi¡s
,

51 
Th»ad_CÚÞ
 *
th


55 
	$¹ems_gdb_¡ub_th»ad_suµÜt_ok
()

57 ià(
	`_Sy¡em_¡©e_G
(è=ð
SYSTEM_STATE_UP
) {

61 
	}
}

69 
	$¹ems_gdb_¡ub_id_to_dex
(

70 
Objeùs_Id
 
th»ad_obj_id


73 
gdb_dex
 = 0;

74 
f¡
 = 1;

75 
size_t
 
­i_dex
;

77 ià(
	`_Sy¡em_¡©e_G
(è!ð
SYSTEM_STATE_UP
) {

79 
gdb_dex
 = 1;

83 
­i_dex
 = 1;

84 
gdb_dex
 =ð0 && 
­i_dex
 <ð
OBJECTS_APIS_LAST
;

85 ++
­i_dex


87 ià(
_Objeùs_InfÜm©iÚ_bË
[
­i_dex
] !ð
NULL
) {

88 cÚ¡ 
Objeùs_InfÜm©iÚ
 *
fo
 =

89 
_Objeùs_InfÜm©iÚ_bË
[
­i_dex
][1];

90 
Objeùs_Id
 
m_id
 = 
fo
->
mimum_id
;

91 
Objeùs_Id
 
max_id
 = 
fo
->
maximum_id
;

92 
Ï¡
 = 
f¡
 + (è(
max_id
 - 
m_id
);

94 ià(
th»ad_obj_id
 >ð
m_id
 &&h»ad_obj_id < 
max_id
) {

95 
gdb_dex
 = 
f¡
 + (è(
th»ad_obj_id
 - 
m_id
);

98 
f¡
 = 
Ï¡
 + 1;

102  
gdb_dex
;

103 
	}
}

106 
Th»ad_CÚÞ
 *
	$¹ems_gdb_dex_to_¡ub_id
(

107 
gdb_dex


110 
Th»ad_CÚÞ
 *
th
 = 
NULL
;

111 
f¡
 = 1;

112 
size_t
 
­i_dex
;

114 
	`ASSERT
(
»gi¡s
 !ð
NULL
);

116 ià(
	`_Sy¡em_¡©e_G
(è!ð
SYSTEM_STATE_UP
 || 
gdb_dex
 <= 0) {

118  
NULL
;

122 
­i_dex
 = 1;

123 
th
 =ð
NULL
 && 
­i_dex
 <ð
OBJECTS_APIS_LAST
;

124 ++
­i_dex


126 ià(
_Objeùs_InfÜm©iÚ_bË
[
­i_dex
] !ð
NULL
) {

127 cÚ¡ 
Objeùs_InfÜm©iÚ
 *
fo
 =

128 
_Objeùs_InfÜm©iÚ_bË
[
­i_dex
][1];

129 
Objeùs_Id
 
m_id
 = 
fo
->
mimum_id
;

130 
Objeùs_Id
 
max_id
 = 
fo
->
maximum_id
;

131 
Ï¡
 = 
f¡
 + (è(
max_id
 - 
m_id
);

133 ià(
gdb_dex
 <ð
f¡
 + (è(
max_id
 - 
m_id
)) {

134 
th
 = (
Th»ad_CÚÞ
 *)

135 
fo
->
loÿl_bË
[
gdb_dex
 - 
f¡
 + 1];

138 
f¡
 = 
Ï¡
 + 1;

142  
th
;

143 
	}
}

146 
	$¹ems_gdb_¡ub_g_cu¼t_th»ad
()

148  
	`¹ems_gdb_¡ub_id_to_dex
Ð
	`¹ems_sk_£lf
() );

149 
	}
}

153 
	$¹ems_gdb_¡ub_g_Ãxt_th»ad
(
gdb_dex
)

155 
Ãxt_gdb_dex
 = 0;

156 
f¡
 = 1;

157 
size_t
 
­i_dex
;

159 ià(
	`_Sy¡em_¡©e_G
(è!ð
SYSTEM_STATE_UP
) {

161  (
gdb_dex
 < 1) ? 1 : 0;

165 
­i_dex
 = 1;

166 
Ãxt_gdb_dex
 =ð0 && 
­i_dex
 <ð
OBJECTS_APIS_LAST
;

167 ++
­i_dex


169 ià(
_Objeùs_InfÜm©iÚ_bË
[
­i_dex
] !ð
NULL
) {

170 cÚ¡ 
Objeùs_InfÜm©iÚ
 *
fo
 =

171 
_Objeùs_InfÜm©iÚ_bË
[
­i_dex
][1];

172 
Objeùs_Id
 
m_id
 = 
fo
->
mimum_id
;

173 
Objeùs_Id
 
max_id
 = 
fo
->
maximum_id
;

174 
Ï¡
 = 
f¡
 + (è(
max_id
 - 
m_id
);

176 ià(
gdb_dex
 <ð
Ï¡
) {

177 
¡¬t
 = 
gdb_dex
 < 
f¡
 ? first : gdb_index + 1;

178 
pÙtl_Ãxt
;

181 
pÙtl_Ãxt
 = 
¡¬t
;

182 
Ãxt_gdb_dex
 =ð0 && 
pÙtl_Ãxt
 <ð
Ï¡
;

183 ++
pÙtl_Ãxt


185 ià(
fo
->
loÿl_bË
[
pÙtl_Ãxt
 - 
f¡
 + 1] !ð
NULL
) {

186 
Ãxt_gdb_dex
 = 
pÙtl_Ãxt
;

191 
f¡
 = 
Ï¡
 + 1;

195  
Ãxt_gdb_dex
;

196 
	}
}

200 
	$¹ems_gdb_¡ub_g_th»ad_»gs
(

201 
th»ad
,

202 *
»gi¡s


205 
Th»ad_CÚÞ
 *
th
;

207 
th
ð
	`¹ems_gdb_dex_to_¡ub_id
(
th»ad
);

209 ifÐ
th
 )

211 
	`¹ems_gdb_¡ub_g_»gi¡s_äom_cÚxt
Ð
»gi¡s
, 
th
 );

215 
	}
}

221 
	$¹ems_gdb_¡ub_£t_th»ad_»gs
(

222 
th»ad
,

223 *
»gi¡s


231 
	}
}

235 
	$¹ems_gdb_¡ub_g_th»ad_fo
(

236 
gdb_dex
,

237 
¹ems_gdb_¡ub_th»ad_fo
 *
fo


240 
f¡
 = 1;

241 
size_t
 
­i_dex
;

243 
	`ASSERT
(
fo
 !ð
NULL
);

245 ià(
gdb_dex
 <= 0) {

249 ià(
	`_Sy¡em_¡©e_G
(è!ð
SYSTEM_STATE_UP
 || 
gdb_dex
 == 1) {

252 
	`¡rýy
(
fo
->
di¥Ïy
, "idlehread");

253 
	`¡rýy
(
fo
->
Çme
, "IDLE");

254 
fo
->
mÜe_di¥Ïy
[0] = 0;

260 
­i_dex
 = 1;

261 
­i_dex
 <ð
OBJECTS_APIS_LAST
;

262 ++
­i_dex


264 ià(
_Objeùs_InfÜm©iÚ_bË
[
­i_dex
] !ð
NULL
) {

265 cÚ¡ 
Objeùs_InfÜm©iÚ
 *
obj_fo
 =

266 
_Objeùs_InfÜm©iÚ_bË
[
­i_dex
][1];

267 
Objeùs_Id
 
m_id
 = 
obj_fo
->
mimum_id
;

268 
Objeùs_Id
 
max_id
 = 
obj_fo
->
maximum_id
;

269 
Ï¡
 = 
f¡
 + (è(
max_id
 - 
m_id
);

271 ià(
gdb_dex
 <ð
Ï¡
) {

272 
Th»ad_CÚÞ
 *
th
 = (Thread_Control *)

273 
obj_fo
->
loÿl_bË
[
gdb_dex
 - 
f¡
 + 1];

275 ià(
th
 !ð
NULL
) {

276 
tmp_buf
[9];

278 
	`¡rýy
(
fo
->
di¥Ïy
, "task: controlt 0x");

280 
tmp_buf
[0] = 
gdb_hexch¬s
[((()
th
) >> 28) & 0xf];

281 
tmp_buf
[1] = 
gdb_hexch¬s
[((()
th
) >> 24) & 0xf];

282 
tmp_buf
[2] = 
gdb_hexch¬s
[((()
th
) >> 20) & 0xf];

283 
tmp_buf
[3] = 
gdb_hexch¬s
[((()
th
) >> 16) & 0xf];

284 
tmp_buf
[4] = 
gdb_hexch¬s
[((()
th
) >> 12) & 0xf];

285 
tmp_buf
[5] = 
gdb_hexch¬s
[((()
th
) >> 8) & 0xf];

286 
tmp_buf
[6] = 
gdb_hexch¬s
[((()
th
) >> 4) & 0xf];

287 
tmp_buf
[7] = 
gdb_hexch¬s
[(()
th
) & 0xf];

288 
tmp_buf
[8] = 0;

290 
	`¡rÿt
(
fo
->
di¥Ïy
, 
tmp_buf
);

291 
	`¹ems_objeù_g_Çme
Ð
th
->
Objeù
.
id
, 5, 
fo
->
Çme
 );

292 
fo
->
mÜe_di¥Ïy
[0] = 0;

301 
f¡
 = 
Ï¡
 + 1;

306 
	}
}

311 
	$·r£_zb»ak
(cÚ¡ *

, *
ty³
, **
addr
, *
Ën
)

313 
mp
, 
©mp
, 
Émp
;

315 
	`ASSERT
(

 !ð
NULL
);

316 
	`ASSERT
(
ty³
 !ð
NULL
);

317 
	`ASSERT
(
addr
 !ð
NULL
);

318 
	`ASSERT
(
Ën
 !ð
NULL
);

320 
	`ASSERT
(*

 == 'z' || *in == 'Z');

322 

++;

324 ià(!
	`h¡r2nibbË
(

, &
mp
) || *(in+1) != ',')

328 

 += 2;

330 

 = 
	`vh¡r2t
(, &
©mp
);

331 ià(

 =ð
NULL
 || *in != ',')

335 

++;

337 

 = 
	`vh¡r2t
(, &
Émp
);

338 ià(

 =ð
NULL
 || 
Émp
 < 1)

343 *
ty³
 = 
mp
;

344 *
addr
 = (*)
©mp
;

345 *
Ën
 = 
Émp
;

348 
	}
}

352 
	$·r£_qp
(cÚ¡ *

, *
mask
, *
th»ad
)

354 cÚ¡ *
±r
;

356 
	`ASSERT
(

 !ð
NULL
);

357 
	`ASSERT
(*

 == 'q');

358 
	`ASSERT
(*(

+1) == 'P');

360 
±r
 = 
	`fh¡r2t
(

+2, 
mask
);

361 ià(
±r
 =ð
NULL
)

366 
±r
 = 
	`fh¡r2th»ad
Õ, 
th»ad
);

367 ià(
±r
 =ð
NULL
)

373 
	}
}

377 
	$·ck_qq
(*
out
, 
mask
, 
th»ad
, 
¹ems_gdb_¡ub_th»ad_fo
 *
fo
)

379 
Ën
;

381 
	`ASSERT
(
out
 !ð
NULL
);

382 
	`ASSERT
(
fo
 !ð
NULL
);

384 *
out
++ = 'q';

385 *
out
++ = 'Q';

386 
out
 = 
	`t2fh¡r
(out, 
mask
);

387 
out
 = 
	`th»ad2fh¡r
(out, 
th»ad
);

389 ià(
mask
 & 0x1) {

391 
	`memýy
(
out
, "00000001", 8);

392 
out
 += 8;

393 *
out
++ = '1';

394 *
out
++ = '0';

395 
out
 = 
	`th»ad2fh¡r
(out, 
th»ad
);

398 ià(
mask
 & 0x2) {

400 
	`memýy
(
out
, "00000002", 8);

401 
out
 += 8;

402 *
out
++ = '0';

403 *
out
++ = '1';

404 *
out
++ = '1';

407 ià(
mask
 & 0x4) {

409 
	`memýy
(
out
, "00000004", 8);

410 
out
 += 8;

412 
fo
->
di¥Ïy
[(info->display)-1] = 0;

414 
Ën
 = 
	`¡¾
(
fo
->
di¥Ïy
);

416 *
out
++ = 
gdb_hexch¬s
[
Ën
 >> 4];

417 *
out
++ = 
gdb_hexch¬s
[
Ën
 & 0x0f];

419 
	`memýy
(
out
, 
fo
->
di¥Ïy
, 
Ën
);

421 
out
 +ð
Ën
;

424 ià(
mask
 & 0x8) {

426 
	`memýy
(
out
, "00000008", 8);

427 
out
 += 8;

429 
fo
->
Çme
[(info->name)-1] = 0;

431 
Ën
 = 
	`¡¾
(
fo
->
Çme
);

433 *
out
++ = 
gdb_hexch¬s
[
Ën
 >> 4];

434 *
out
++ = 
gdb_hexch¬s
[
Ën
 & 0x0f];

436 
	`memýy
(
out
, 
fo
->
Çme
, 
Ën
);

438 
out
 +ð
Ën
;

441 ià(
mask
 & 0x10) {

443 
	`memýy
(
out
, "00000010", 8);

444 
out
 += 8;

446 
fo
->
mÜe_di¥Ïy
[(info->more_display)-1] = 0;

448 
Ën
 = 
	`¡¾
(
fo
->
mÜe_di¥Ïy
);

450 *
out
++ = 
gdb_hexch¬s
[
Ën
 >> 4];

451 *
out
++ = 
gdb_hexch¬s
[
Ën
 & 0x0f];

453 
	`memýy
(
out
, 
fo
->
mÜe_di¥Ïy
, 
Ën
);

455 
out
 +ð
Ën
;

458 *
out
 = 0;

461 
	}
}

465 
	$·r£_ql
(cÚ¡ *

, *
f¡
, *
max_couÁ
, *
©h»ad
)

467 cÚ¡ *
±r
;

469 
	`ASSERT
(

 !ð
NULL
);

470 
	`ASSERT
(*

 == 'q');

471 
	`ASSERT
(*(

+1) == 'L');

472 
	`ASSERT
(
f¡
 !ð
NULL
);

473 
	`ASSERT
(
max_couÁ
 !ð
NULL
);

474 
	`ASSERT
(
©h»ad
 !ð
NULL
);

476 
±r
 = 

 + 2;

479 ià(!
	`h¡r2nibbË
(
±r
, 
f¡
))

483 
±r
++;

486 ià(!
	`h¡r2by
(
±r
, 
max_couÁ
))

490 
±r
 += 2;

493 
±r
 = 
	`fh¡r2th»ad
Õ, 
©h»ad
);

494 ià(
±r
 =ð
NULL
)

500 
	}
}

504 
	$»£rve_qm_hd
(*
out
)

506 
	`ASSERT
(
out
 !ð
NULL
);

508  
out
 + 21;

509 
	}
}

513 
	$·ck_qm_th»ad
(*
out
, 
th»ad
)

515 
	`ASSERT
(
out
 != 0);

517  
	`th»ad2fh¡r
(
out
, 
th»ad
);

518 
	}
}

522 
	$·ck_qm_hd
(*
out
, 
couÁ
, 
dÚe
, 
©h»ad
)

524 
	`ASSERT
(
out
 != 0);

525 
	`ASSERT
(
couÁ
 >= 0 && count < 256);

527 *
out
++ = 'q';

528 *
out
++ = 'M';

530 *
out
++ = 
gdb_hexch¬s
[(
couÁ
 >> 4) & 0x0f];

531 *
out
++ = 
gdb_hexch¬s
[
couÁ
 & 0x0f];

533 ià(
dÚe
) {

534 *
out
++ = '1';

536 *
out
++ = '0';

539 
	`th»ad2fh¡r
(
out
, 
©h»ad
);

541 
	}
}

543 
	$¹ems_gdb_´oûss_quy
(

544 *
bufãr
,

545 *
outbufãr
,

546 
do_th»ads
,

547 
th»ad


550 *
Ý
;

552 
bufãr
[1]) {

555 ià(!
do_th»ads
) {

559 
Ý
 = 
outbufãr
;

561 *
Ý
++ = 'Q';

562 *
Ý
++ = 'C';

563 
Ý
 = 
	`th»ad2vh¡r
(Ý, 
th»ad
);

564 *
Ý
 = 0;

569 ià(!
do_th»ads
) {

574 
»t
, 
¹h»ad
, 
mask
;

575 
¹ems_gdb_¡ub_th»ad_fo
 
fo
;

577 
»t
 = 
	`·r£_qp
(
bufãr
, &
mask
, &
¹h»ad
);

578 ià(!
»t
|| 
mask
 & ~0x1f) {

579 
	`¡rýy
(
outbufãr
, "E01");

583 
»t
 = 
	`¹ems_gdb_¡ub_g_th»ad_fo
(
¹h»ad
, &
fo
);

584 ià(!
»t
) {

587 
	`¡rýy
(
outbufãr
, "E02");

592 
	`·ck_qq
(
outbufãr
, 
mask
, 
¹h»ad
, &
fo
);

598 ià(!
do_th»ads
) {

603 
»t
, 
©h»ad
, 
f¡
, 
max_út
, 
i
, 
dÚe
, 
¹h»ad
;

605 
»t
 = 
	`·r£_ql
(
bufãr
, &
f¡
, &
max_út
, &
©h»ad
);

606 ià(!
»t
) {

607 
	`¡rýy
(
outbufãr
, "E02");

611 ià(
max_út
 == 0) {

612 
	`¡rýy
(
outbufãr
, "E02");

616 ià(
max_út
 > 
QM_MAX_THREADS
) {

618 
max_út
 = 
QM_MAX_THREADS
;

622 
Ý
 = 
	`»£rve_qm_hd
(
outbufãr
);

624 ià(
f¡
) {

625 
¹h»ad
 = 0;

627 
¹h»ad
 = 
©h»ad
;

630 
dÚe
 = 0;

632 
i
=0; i<
max_út
; i++) {

633 
¹h»ad
 = 
	`¹ems_gdb_¡ub_g_Ãxt_th»ad
(rthread);

635 ià(
¹h»ad
 <= 0) {

636 
dÚe
 = 1;

640 
Ý
 = 
	`·ck_qm_th»ad
(Ý, 
¹h»ad
);

643 *
Ý
 = 0;

645 
	`ASSERT
((
Ý
 - 
outbufãr
è< 
BUFMAX
);

648 
	`·ck_qm_hd
(
outbufãr
, 
i
, 
dÚe
, 
©h»ad
);

653 ià(
	`memcmp
(
bufãr
, "qOffsets", 8) == 0) {

654 *
t
, *
d
, *
b
;

655 *
out
;

657 ià(!
	`¹ems_gdb_¡ub_g_off£ts
(&
t
, &
d
, &
b
)) {

661 
out
 = 
outbufãr
;

663 *
out
++ = 'T';

664 *
out
++ = 'e';

665 *
out
++ = 'x';

666 *
out
++ = 't';

667 *
out
++ = '=';

669 
out
 = 
	`t2vh¡r
(out, ()
t
);

671 *
out
++ = ';';

672 *
out
++ = 'D';

673 *
out
++ = 'a';

674 *
out
++ = 't';

675 *
out
++ = 'a';

676 *
out
++ = '=';

678 
out
 = 
	`t2vh¡r
(out, ()
d
);

680 *
out
++ = ';';

681 *
out
++ = 'B';

682 *
out
++ = 's';

683 *
out
++ = 's';

684 *
out
++ = '=';

686 
out
 = 
	`t2vh¡r
(out, ()
b
);

688 *
out
++ = ';';

689 *
out
++ = 0;

697 
	}
}

701 
	$th»ad2vh¡r
(*
buf
, 
th»ad
)

703 
i
, 
nibbË
, 
shiá
;

705 
	`ASSERT
(
buf
 !ð
NULL
);

707 
i
=0, 
shiá
=28; i<8; i++, shift-=4)

709 
nibbË
 = (
th»ad
 >> 
shiá
) & 0x0f;

711 ià(
nibbË
 != 0)

717 ià(
i
 == 8)

719 *
buf
++ = '0';

720  
buf
;

723 *
buf
++ = 
gdb_hexch¬s
[
nibbË
];

725 
i
++, 
shiá
-=4; i<8; i++, shiá-=4, 
buf
++)

727 
nibbË
 = (
th»ad
 >> 
shiá
) & 0x0f;

728 *
buf
 = 
gdb_hexch¬s
[
nibbË
];

731  
buf
;

732 
	}
}

736 
	$th»ad2fh¡r
(*
buf
, 
th»ad
)

738 
i
, 
nibbË
, 
shiá
;

740 
	`ASSERT
(
buf
 !ð
NULL
);

742 
i
=0; i<8; i++, 
buf
++)

744 *
buf
 = '0';

747 
i
=0, 
shiá
=28; i<8; i++, shiá-=4, 
buf
++)

749 
nibbË
 = (
th»ad
 >> 
shiá
) & 0x0f;

750 *
buf
 = 
gdb_hexch¬s
[
nibbË
];

753  
buf
;

754 
	}
}

758 
	$fh¡r2th»ad
(cÚ¡ *
buf
, *
th»ad
)

760 
i
, 
v®
, 
nibbË
;

762 
	`ASSERT
(
buf
 !ð
NULL
);

763 
	`ASSERT
(
th»ad
 !ð
NULL
);

765 
i
=0; i<8; i++, 
buf
++)

767 ià(*
buf
 != '0')

769  
NULL
;

773 
v®
 = 0;

775 
i
=0; i<8; i++, 
buf
++)

777 ià(!
	`h¡r2nibbË
(
buf
, &
nibbË
))

779  
NULL
;

782 
	`ASSERT
(
nibbË
 >=0 &&ibble < 16);

784 
v®
 = (v® << 4è| 
nibbË
;

787 *
th»ad
 = 
v®
;

789  
buf
;

790 
	}
}

794 
	$vh¡r2th»ad
(cÚ¡ *
buf
, *
th»ad
)

796 
i
, 
v®
, 
nibbË
;

797 
found_zo
, 
lim
;

799 
	`ASSERT
(
buf
 !ð
NULL
);

800 
	`ASSERT
(
th»ad
 !ð
NULL
);

803 
found_zo
 = 0;

805 
i
=0; i<16; i++, 
buf
++)

807 ià(*
buf
 != '0')

812 
found_zo
 = 1;

816 
lim
 = 16 - 
i
;

817 
v®
 = 0;

819 
i
=0; i<
lim
; i++, 
buf
++)

821 ià(!
	`h¡r2nibbË
(
buf
, &
nibbË
))

823 ià(
i
 =ð0 && !
found_zo
)

826  
NULL
;

829 *
th»ad
 = 
v®
;

830  
buf
;

833 
	`ASSERT
(
nibbË
 >= 0 &&ibble < 16);

835 
v®
 = (v® << 4è| 
nibbË
;

838 ià(
	`h¡r2nibbË
(
buf
, &
nibbË
))

841  
NULL
;

844 *
th»ad
 = 
v®
;

845  
buf
;

846 
	}
}

850 
	$t2vh¡r
(*
buf
, 
v®
)

852 
i
, 
nibbË
, 
shiá
;

854 
	`ASSERT
(
buf
 !ð
NULL
);

856 
i
=0, 
shiá
=28; i<8; i++, shift-=4)

858 
nibbË
 = (
v®
 >> 
shiá
) & 0x0f;

860 ià(
nibbË
 != 0)

866 ià(
i
 == 8)

868 *
buf
++ = '0';

869  
buf
;

872 *
buf
++ = 
gdb_hexch¬s
[
nibbË
];

874 
i
++, 
shiá
-=4; i<8; i++, shiá-=4, 
buf
++)

876 
nibbË
 = (
v®
 >> 
shiá
) & 0x0f;

877 *
buf
 = 
gdb_hexch¬s
[
nibbË
];

880  
buf
;

881 
	}
}

885 
	$t2fh¡r
(*
buf
, 
v®
)

887 
i
, 
nibbË
, 
shiá
;

889 
	`ASSERT
(
buf
 !ð
NULL
);

891 
i
=0, 
shiá
=28; i<8; i++, shiá-=4, 
buf
++)

893 
nibbË
 = (
v®
 >> 
shiá
) & 0x0f;

894 *
buf
 = 
gdb_hexch¬s
[
nibbË
];

897  
buf
;

898 
	}
}

902 
	$fh¡r2t
(cÚ¡ *
buf
, *
iv®
)

904 
i
, 
v®
, 
nibbË
;

906 
	`ASSERT
(
buf
 !ð
NULL
);

907 
	`ASSERT
(
iv®
 !ð
NULL
);

909 
v®
 = 0;

911 
i
=0; i<8; i++, 
buf
++)

913 ià(!
	`h¡r2nibbË
(
buf
, &
nibbË
))

915  
NULL
;

918 
	`ASSERT
(
nibbË
 >=0 &&ibble < 16);

920 
v®
 = (v® << 4è| 
nibbË
;

923 *
iv®
 = 
v®
;

925  
buf
;

926 
	}
}

930 
	$vh¡r2t
(cÚ¡ *
buf
, *
iv®
)

932 
i
, 
v®
, 
nibbË
;

933 
found_zo
, 
lim
;

935 
	`ASSERT
(
buf
 !ð
NULL
);

936 
	`ASSERT
(
iv®
 !ð
NULL
);

939 
found_zo
 = 0;

941 
i
=0; i<8; i++, 
buf
++)

943 ià(*
buf
 != '0')

948 
found_zo
 = 1;

952 
lim
 = 8 - 
i
;

953 
v®
 = 0;

955 
i
=0; i<
lim
; i++, 
buf
++)

957 ià(!
	`h¡r2nibbË
(
buf
, &
nibbË
))

959 ià(
i
 =ð0 && !
found_zo
)

962  
NULL
;

965 *
iv®
 = 
v®
;

966  
buf
;

969 
	`ASSERT
(
nibbË
 >= 0 &&ibble < 16);

971 
v®
 = (v® << 4è| 
nibbË
;

974 ià(
	`h¡r2nibbË
(
buf
, &
nibbË
))

977  
NULL
;

980 *
iv®
 = 
v®
;

981  
buf
;

982 
	}
}

985 
	$h¡r2by
(cÚ¡ *
buf
, *
bv®
)

987 
hnib
, 
Êib
;

989 
	`ASSERT
(
buf
 !ð
NULL
);

990 
	`ASSERT
(
bv®
 !ð
NULL
);

992 ià(!
	`h¡r2nibbË
(
buf
, &
hnib
è|| !h¡r2nibbË(buf+1, &
Êib
))

997 *
bv®
 = (
hnib
 << 4è| 
Êib
;

999 
	}
}

1002 
	$h¡r2nibbË
(cÚ¡ *
buf
, *
nibbË
)

1004 
ch
;

1006 
	`ASSERT
(
buf
 !ð
NULL
);

1007 
	`ASSERT
(
nibbË
 !ð
NULL
);

1009 
ch
 = *
buf
;

1011 ià(
ch
 >= '0' && ch <= '9')

1013 *
nibbË
 = 
ch
 - '0';

1017 ià(
ch
 >= 'a' && ch <= 'f')

1019 *
nibbË
 = 
ch
 - 'a' + 10;

1023 ià(
ch
 >= 'A' && ch <= 'F')

1025 *
nibbË
 = 
ch
 - 'A' + 10;

1030 
	}
}

1032 vÞ©
	gmem_r
 = 0;

1033 
£t_mem_r
();

1034 (*vÞ©
mem_çuÉ_route
è(èð
NULL
;

1040 
	$mem2h¡r
(*
buf
, cÚ¡ *
mem
, 
couÁ
)

1042 
i
;

1043 
ch
;

1045 
mem_r
 = 0;

1047 
mem_çuÉ_route
 = 
£t_mem_r
;

1049 
i
 = 0; i<
couÁ
; i++, 
mem
++)

1051 
ch
 = 
	`g_by
 (
mem
);

1052 ià(
mem_r
)

1054 
mem_çuÉ_route
 = 
NULL
;

1055  
NULL
;

1058 *
buf
++ = 
gdb_hexch¬s
[
ch
 >> 4];

1059 *
buf
++ = 
gdb_hexch¬s
[
ch
 & 0x0f];

1062 *
buf
 = 0;

1064 
mem_çuÉ_route
 = 
NULL
;

1066  
buf
;

1067 
	}
}

1072 
	$h¡r2mem
 (*
mem
, cÚ¡ *
buf
, 
couÁ
)

1074 
i
;

1075 
bv®
;

1077 
mem_r
 = 0;

1079 
mem_çuÉ_route
 = 
£t_mem_r
;

1081 
i
 = 0; i < 
couÁ
; i++, 
mem
++, 
buf
+=2)

1083 ià(!
	`h¡r2by
(
buf
, &
bv®
))

1085 
mem_çuÉ_route
 = 
NULL
;

1089 
	`ASSERT
(
bv®
 >=0 && bval < 256);

1091 
	`£t_by
 (
mem
, 
bv®
);

1093 ià(
mem_r
)

1095 
mem_çuÉ_route
 = 
NULL
;

1100 
mem_çuÉ_route
 = 
NULL
;

1102 
	}
}

1105 
	$£t_mem_r
 ()

1107 
mem_r
 = 1;

1108 
	}
}

1116 
	$g_by
 (cÚ¡ *
addr
)

1118  *
addr
;

1119 
	}
}

1122 
	$£t_by
 (*
addr
, 
v®
)

1124 *
addr
 = 
v®
;

1125 
	}
}

1132 #ià
defed
(
__i386__
)

1134 
	~"i386-¡ub.h
"

1137 
	ei386_¡ub_»gÇmes
 {

1138 
	mI386_STUB_REG_EAX
, 
	mI386_STUB_REG_ECX
, 
	mI386_STUB_REG_EDX
, 
	mI386_STUB_REG_EBX
,

1139 
	mI386_STUB_REG_ESP
, 
	mI386_STUB_REG_EBP
, 
	mI386_STUB_REG_ESI
, 
	mI386_STUB_REG_EDI
,

1140 
	mI386_STUB_REG_PC
 ,

1141 
	mI386_STUB_REG_PS
 ,

1142 
	mI386_STUB_REG_CS
, 
	mI386_STUB_REG_SS
, 
	mI386_STUB_REG_DS
, 
	mI386_STUB_REG_ES
,

1143 
	mI386_STUB_REG_FS
, 
	mI386_STUB_REG_GS


1146 
	$¹ems_gdb_¡ub_g_»gi¡s_äom_cÚxt
(

1147 *
»gi¡s
,

1148 
Th»ad_CÚÞ
 *
th


1151 
»gi¡s
[
I386_STUB_REG_EAX
] = 0;

1152 
»gi¡s
[
I386_STUB_REG_ECX
] = 0;

1153 
»gi¡s
[
I386_STUB_REG_EDX
] = 0;

1154 
»gi¡s
[
I386_STUB_REG_EBX
] = ()
th
->
Regi¡s
.
ebx
;

1155 
»gi¡s
[
I386_STUB_REG_ESP
] = ()
th
->
Regi¡s
.
e¥
;

1156 
»gi¡s
[
I386_STUB_REG_EBP
] = ()
th
->
Regi¡s
.
ebp
;

1157 
»gi¡s
[
I386_STUB_REG_ESI
] = ()
th
->
Regi¡s
.
esi
;

1158 
»gi¡s
[
I386_STUB_REG_EDI
] = ()
th
->
Regi¡s
.
edi
;

1159 
»gi¡s
[
I386_STUB_REG_PC
] = *(*)
th
->
Regi¡s
.
e¥
;

1160 
»gi¡s
[
I386_STUB_REG_PS
] = ()
th
->
Regi¡s
.
eæags
;

1165 
»gi¡s
[
I386_STUB_REG_CS
] = 0x8;

1166 
»gi¡s
[
I386_STUB_REG_SS
] = 0x10;

1167 
»gi¡s
[
I386_STUB_REG_DS
] = 0x10;

1168 
»gi¡s
[
I386_STUB_REG_ES
] = 0x10;

1169 
»gi¡s
[
I386_STUB_REG_FS
] = 0x10;

1170 
»gi¡s
[
I386_STUB_REG_GS
] = 0x10;

1171 
	}
}

1173 
	$¹ems_gdb_¡ub_g_off£ts
(

1174 **
xt_addr
,

1175 **
d©a_addr
,

1176 **
bss_addr


1179 
_xt_¡¬t
;

1180 
_d©a_¡¬t
;

1181 
_bss_¡¬t
;

1183 *
xt_addr
 = &
_xt_¡¬t
;

1184 *
d©a_addr
 = &
_d©a_¡¬t
;

1185 *
bss_addr
 = &
_bss_¡¬t
;

1188 
	}
}

1190 #ià
defed
(
__ms__
)

1192 
	$¹ems_gdb_¡ub_g_»gi¡s_äom_cÚxt
(

1193 *
»gi¡s
,

1194 
Th»ad_CÚÞ
 *
th


1197 
»gi¡s
[
S0
] = ()
th
->
Regi¡s
.
s0
;

1198 
»gi¡s
[
S1
] = ()
th
->
Regi¡s
.
s1
;

1199 
»gi¡s
[
S2
] = ()
th
->
Regi¡s
.
s2
;

1200 
»gi¡s
[
S3
] = ()
th
->
Regi¡s
.
s3
;

1201 
»gi¡s
[
S4
] = ()
th
->
Regi¡s
.
s4
;

1202 
»gi¡s
[
S5
] = ()
th
->
Regi¡s
.
s5
;

1203 
»gi¡s
[
S6
] = ()
th
->
Regi¡s
.
s6
;

1204 
»gi¡s
[
S7
] = ()
th
->
Regi¡s
.
s7
;

1206 
»gi¡s
[
SP
] = ()
th
->
Regi¡s
.
¥
;

1207 
»gi¡s
[
RA
] = ()
th
->
Regi¡s
.
¿
;

1209 
»gi¡s
[
SR
] = ()
th
->
Regi¡s
.
c0_¤
;

1210 
»gi¡s
[
PC
] = ()
th
->
Regi¡s
.
c0_c
;

1211 
	}
}

1213 
	$¹ems_gdb_¡ub_g_off£ts
(

1214 **
xt_addr
,

1215 **
d©a_addr
,

1216 **
bss_addr


1228 *
xt_addr
 = 0;

1229 *
d©a_addr
 = 0;

1230 *
bss_addr
 = 0;

1232 
	}
}

1234 #ià
defed
(
__mc68000__
)

1236 
	$¹ems_gdb_¡ub_g_»gi¡s_äom_cÚxt
(

1237 *
»gi¡s
,

1238 
Th»ad_CÚÞ
 *
th


1246 
»gi¡s
[
D0
] = 0;

1247 
»gi¡s
[
D1
] = 0;

1248 
»gi¡s
[
D2
] = (
ut32_t
)
th
->
Regi¡s
.
d2
;

1249 
»gi¡s
[
D3
] = (
ut32_t
)
th
->
Regi¡s
.
d3
;

1250 
»gi¡s
[
D4
] = (
ut32_t
)
th
->
Regi¡s
.
d4
;

1251 
»gi¡s
[
D5
] = (
ut32_t
)
th
->
Regi¡s
.
d5
;

1252 
»gi¡s
[
D6
] = (
ut32_t
)
th
->
Regi¡s
.
d6
;

1253 
»gi¡s
[
D7
] = (
ut32_t
)
th
->
Regi¡s
.
d7
;

1255 
»gi¡s
[
A0
] = 0;

1256 
»gi¡s
[
A1
] = 0;

1257 
»gi¡s
[
A2
] = (
ut32_t
)
th
->
Regi¡s
.
a2
;

1258 
»gi¡s
[
A3
] = (
ut32_t
)
th
->
Regi¡s
.
a3
;

1259 
»gi¡s
[
A4
] = (
ut32_t
)
th
->
Regi¡s
.
a4
;

1260 
»gi¡s
[
A5
] = (
ut32_t
)
th
->
Regi¡s
.
a5
;

1261 
»gi¡s
[
A6
] = (
ut32_t
)
th
->
Regi¡s
.
a6
;

1262 
»gi¡s
[
A7
] = (
ut32_t
)
th
->
Regi¡s
.
a7_m¥
;

1264 
»gi¡s
[
PS
] = (
ut32_t
)
th
->
Regi¡s
.
¤
;

1266 
»gi¡s
[
PC
] = *(
ut32_t
*)
th
->
Regi¡s
.
a7_m¥
;

1268 
»gi¡s
[
PC
] = (
ut32_t
)
_CPU_CÚxt_swch
;

1270 
	}
}

1272 
	$¹ems_gdb_¡ub_g_off£ts
(

1273 **
xt_addr
,

1274 **
d©a_addr
,

1275 **
bss_addr


1287 *
xt_addr
 = 0;

1288 *
d©a_addr
 = 0;

1289 *
bss_addr
 = 0;

1291 
	}
}

1293 #ià
defed
(
__lm32__
)

1295 
	$¹ems_gdb_¡ub_g_»gi¡s_äom_cÚxt
(

1296 *
»gi¡s
,

1297 
Th»ad_CÚÞ
 *
th


1300 
»gi¡s
[
LM32_REG_R11
] = (
ut32_t
)
th
->
Regi¡s
.
r11
;

1301 
»gi¡s
[
LM32_REG_R12
] = (
ut32_t
)
th
->
Regi¡s
.
r12
;

1302 
»gi¡s
[
LM32_REG_R13
] = (
ut32_t
)
th
->
Regi¡s
.
r13
;

1303 
»gi¡s
[
LM32_REG_R14
] = (
ut32_t
)
th
->
Regi¡s
.
r14
;

1304 
»gi¡s
[
LM32_REG_R15
] = (
ut32_t
)
th
->
Regi¡s
.
r15
;

1305 
»gi¡s
[
LM32_REG_R16
] = (
ut32_t
)
th
->
Regi¡s
.
r16
;

1306 
»gi¡s
[
LM32_REG_R17
] = (
ut32_t
)
th
->
Regi¡s
.
r17
;

1307 
»gi¡s
[
LM32_REG_R18
] = (
ut32_t
)
th
->
Regi¡s
.
r18
;

1308 
»gi¡s
[
LM32_REG_R19
] = (
ut32_t
)
th
->
Regi¡s
.
r19
;

1309 
»gi¡s
[
LM32_REG_R20
] = (
ut32_t
)
th
->
Regi¡s
.
r20
;

1310 
»gi¡s
[
LM32_REG_R21
] = (
ut32_t
)
th
->
Regi¡s
.
r21
;

1311 
»gi¡s
[
LM32_REG_R22
] = (
ut32_t
)
th
->
Regi¡s
.
r22
;

1312 
»gi¡s
[
LM32_REG_R23
] = (
ut32_t
)
th
->
Regi¡s
.
r23
;

1313 
»gi¡s
[
LM32_REG_R24
] = (
ut32_t
)
th
->
Regi¡s
.
r24
;

1314 
»gi¡s
[
LM32_REG_R25
] = (
ut32_t
)
th
->
Regi¡s
.
r25
;

1315 
»gi¡s
[
LM32_REG_GP
] = (
ut32_t
)
th
->
Regi¡s
.
gp
;

1316 
»gi¡s
[
LM32_REG_FP
] = (
ut32_t
)
th
->
Regi¡s
.
å
;

1317 
»gi¡s
[
LM32_REG_SP
] = (
ut32_t
)
th
->
Regi¡s
.
¥
;

1318 
»gi¡s
[
LM32_REG_RA
] = (
ut32_t
)
th
->
Regi¡s
.
¿
;

1319 
»gi¡s
[
LM32_REG_IE
] = (
ut32_t
)
th
->
Regi¡s
.

;

1321 
»gi¡s
[
LM32_REG_PC
] = (
ut32_t
)
th
->
Regi¡s
.
c
;

1323 
»gi¡s
[
LM32_REG_PC
] = (
ut32_t
)
_CPU_CÚxt_swch
;

1325 
	}
}

1327 
	$¹ems_gdb_¡ub_g_off£ts
(

1328 **
xt_addr
,

1329 **
d©a_addr
,

1330 **
bss_addr


1333 *
xt_addr
 = 0;

1334 *
d©a_addr
 = 0;

1335 *
bss_addr
 = 0;

1337 
	}
}

	@src/lib/libbsp/shared/get-serial-mouse-ps2.c

15 
	~<¹ems/£rl_mou£.h
>

17 
boÞ
 
	$b¥_g_£rl_mou£_deviû
(

18 cÚ¡ **
Çme
,

19 cÚ¡ **
ty³


22 *
Çme
 = 
SERIAL_MOUSE_DEVICE_PS2
;

23 *
ty³
 = "ps2";

25  
ue
;

26 
	}
}

	@src/lib/libbsp/shared/gnatinstallhandler.c

	@src/lib/libbsp/shared/include/bootcard.h

23 #iâdeà
LIBBSP_SHARED_BOOTCARD_H


24 
	#LIBBSP_SHARED_BOOTCARD_H


	)

26 
	~<¡rg.h
>

28 
	~<¹ems/cÚfig.h
>

29 
	~<¹ems/b¥Io.h
>

30 
	~<¹ems/m®loc.h
>

31 
	~<¹ems/scÜe/wk¥aû.h
>

33 
	~<b¥Ýts.h
>

35 #ifdeà
__ýlu¥lus


52 cÚ¡ *
b¥_boÙ_cmdle
;

54 
b¥_show_fo
();

56 
b¥_¡¬t
();

58 
b¥_´askg_hook
();

60 
b¥_´edriv_hook
();

62 
b¥_driv_Ëv_hook
Ð
Ëv
 );

64 
b¥_po¡driv_hook
();

66 
b¥_»£t
();

105 
boÙ_ÿrd
(cÚ¡ *
cmdle
è
	gRTEMS_COMPILER_NO_RETURN_ATTRIBUTE
;

107 #ifdeà
CONFIGURE_MALLOC_BSP_SUPPORTS_SBRK


119 
±rdiff_t
 
b¥_sbrk_
(
Hp_A»a
 *
¬
, 
u_t
 
m_size
);

122 
le
 
b¥_wÜk_¬_lize_deçuÉ
(

123 *
¬_beg
,

124 
u_t
 
¬_size


127 
Hp_A»a
 
	g¬
 = {

128 .
beg
 = 
¬_beg
,

129 .
	gsize
 = 
¬_size


132 #ià
BSP_DIRTY_MEMORY
 == 1

133 
mem£t
(
¬
.
beg
, 0xCF,»a.
size
);

136 #ifdeà
CONFIGURE_MALLOC_BSP_SUPPORTS_SBRK


138 
u_t
 
	govhd
 = 
_Hp_A»a_ovhd
(
CPU_HEAP_ALIGNMENT
);

139 
u_t
 
	gwÜk_¥aû_size
 = 
¹ems_cÚfigu¿tiÚ_g_wÜk_¥aû_size
();

140 
±rdiff_t
 
	gsbrk_amouÁ
 = 
b¥_sbrk_
(

141 &
¬
,

142 
wÜk_¥aû_size


143 + 
ovhd


144 + (
¹ems_cÚfigu¿tiÚ_g_unifd_wÜk_¬
(è? 0 : 
ovhd
)

147 
¹ems_hp_£t_sbrk_amouÁ
(
sbrk_amouÁ
);

155 #ifdeà
BSP_GET_WORK_AREA_DEBUG


157 *
	g¥
 = 
__but_äame_add»ss
(0);

158 *
	gd
 = (*è
¬
.
beg
 +»a.
size
;

159 
´tk
(

164 
¬
.
beg
,

165 (è
¬
.
size
,

166 (è
¬
.
size
,

167 
d
,

168 
¥
,

169 (
u_t
è
¥
 >ð(u_tè
¬
.
beg


170 && (
u_t
è
¥
 <ð(u_tè
d
 ?

176 
_WÜk¥aû_HªdËr_liz©iÚ
(&
¬
, 1, 
NULL
);

178 #ifdeà
BSP_GET_WORK_AREA_DEBUG


179 
´tk
(

182 
¬
.
beg
,

183 (è
¬
.
size


187 
RTEMS_M®loc_Inlize
(&
¬
, 1, 
NULL
);

190 
le
 
b¥_wÜk_¬_lize_wh_bË
(

191 
Hp_A»a
 *
¬s
,

192 
size_t
 
¬_couÁ


195 
_WÜk¥aû_HªdËr_liz©iÚ
(
¬s
, 
¬_couÁ
, 
_Hp_Exnd
);

196 
RTEMS_M®loc_Inlize
(
¬s
, 
¬_couÁ
, 
_Hp_Exnd
);

199 
b¥_wÜk_¬_lize
();

201 
b¥_libc_
();

211 
b¥_¡¬t_Ú_£cÚd¬y_´oûssÜ
();

215 #ifdeà
__ýlu¥lus


	@src/lib/libbsp/shared/include/cache_.h

	@src/lib/libbsp/shared/include/console-polled.h

16 #iâdeà
__BSP_CONSOLE_POLLED_h


17 
	#__BSP_CONSOLE_POLLED_h


	)

26 
cÚsÞe_outby_pÞËd
(
pÜt
, 
ch
);

36 
cÚsÞe_by_nÚblockg
(
pÜt
);

41 
cÚsÞe_lize_h¬dw¬e
();

	@src/lib/libbsp/shared/include/console-termios.h

15 #iâdeà
BSP_CONSOLE_TERMIOS_H


16 
	#BSP_CONSOLE_TERMIOS_H


	)

18 
	~<¹ems/rmio¡y³s.h
>

20 #ifdeà
__ýlu¥lus


54 
boÞ
 (*
	tcÚsÞe_deviû_´obe
)(
	t¹ems_rmios_deviû_cÚxt
 *
	tcÚxt
);

66 cÚ¡ *
deviû_fe
;

71 
cÚsÞe_deviû_´obe
 
´obe
;

76 cÚ¡ 
¹ems_rmios_deviû_hªdËr
 *
hªdËr
;

81 cÚ¡ 
¹ems_rmios_deviû_æow
 *
æow
;

86 
¹ems_rmios_deviû_cÚxt
 *
cÚxt
;

87 } 
	tcÚsÞe_deviû
;

101 
¹ems_¡©us_code
 
cÚsÞe_deviû_¡®l
(

102 cÚ¡ *
deviû_fe
,

103 cÚ¡ 
¹ems_rmios_deviû_hªdËr
 *
hªdËr
,

104 cÚ¡ 
¹ems_rmios_deviû_æow
 *
æow
,

105 
¹ems_rmios_deviû_cÚxt
 *
cÚxt


111 
boÞ
 
cÚsÞe_deviû_´obe_deçuÉ
(
¹ems_rmios_deviû_cÚxt
 *
cÚxt
);

121 cÚ¡ 
cÚsÞe_deviû
 
cÚsÞe_deviû_bË
[];

128 cÚ¡ 
size_t
 
cÚsÞe_deviû_couÁ
;

132 #ifdeà
__ýlu¥lus


	@src/lib/libbsp/shared/include/coverhd.h

20 #iâdeà
__COVERHD_h


21 
	#__COVERHD_h


	)

23 #ifdeà
__ýlu¥lus


27 
	#CALLING_OVERHEAD_INITIALIZE_EXECUTIVE
 0

	)

28 
	#CALLING_OVERHEAD_SHUTDOWN_EXECUTIVE
 0

	)

29 
	#CALLING_OVERHEAD_TASK_CREATE
 0

	)

30 
	#CALLING_OVERHEAD_TASK_IDENT
 0

	)

31 
	#CALLING_OVERHEAD_TASK_START
 0

	)

32 
	#CALLING_OVERHEAD_TASK_RESTART
 0

	)

33 
	#CALLING_OVERHEAD_TASK_DELETE
 0

	)

34 
	#CALLING_OVERHEAD_TASK_SUSPEND
 0

	)

35 
	#CALLING_OVERHEAD_TASK_RESUME
 0

	)

36 
	#CALLING_OVERHEAD_TASK_SET_PRIORITY
 0

	)

37 
	#CALLING_OVERHEAD_TASK_MODE
 0

	)

38 
	#CALLING_OVERHEAD_TASK_GET_NOTE
 0

	)

39 
	#CALLING_OVERHEAD_TASK_SET_NOTE
 0

	)

40 
	#CALLING_OVERHEAD_TASK_WAKE_WHEN
 0

	)

41 
	#CALLING_OVERHEAD_TASK_WAKE_AFTER
 0

	)

42 
	#CALLING_OVERHEAD_INTERRUPT_CATCH
 0

	)

43 
	#CALLING_OVERHEAD_CLOCK_GET
 0

	)

44 
	#CALLING_OVERHEAD_CLOCK_SET
 0

	)

45 
	#CALLING_OVERHEAD_CLOCK_TICK
 0

	)

47 
	#CALLING_OVERHEAD_TIMER_CREATE
 0

	)

48 
	#CALLING_OVERHEAD_TIMER_IDENT
 0

	)

49 
	#CALLING_OVERHEAD_TIMER_DELETE
 0

	)

50 
	#CALLING_OVERHEAD_TIMER_FIRE_AFTER
 0

	)

51 
	#CALLING_OVERHEAD_TIMER_FIRE_WHEN
 0

	)

52 
	#CALLING_OVERHEAD_TIMER_RESET
 0

	)

53 
	#CALLING_OVERHEAD_TIMER_CANCEL
 0

	)

54 
	#CALLING_OVERHEAD_SEMAPHORE_CREATE
 0

	)

55 
	#CALLING_OVERHEAD_SEMAPHORE_DELETE
 0

	)

56 
	#CALLING_OVERHEAD_SEMAPHORE_IDENT
 0

	)

57 
	#CALLING_OVERHEAD_SEMAPHORE_OBTAIN
 0

	)

58 
	#CALLING_OVERHEAD_SEMAPHORE_RELEASE
 0

	)

59 
	#CALLING_OVERHEAD_MESSAGE_QUEUE_CREATE
 0

	)

60 
	#CALLING_OVERHEAD_MESSAGE_QUEUE_IDENT
 0

	)

61 
	#CALLING_OVERHEAD_MESSAGE_QUEUE_DELETE
 0

	)

62 
	#CALLING_OVERHEAD_MESSAGE_QUEUE_SEND
 0

	)

63 
	#CALLING_OVERHEAD_MESSAGE_QUEUE_URGENT
 0

	)

64 
	#CALLING_OVERHEAD_MESSAGE_QUEUE_BROADCAST
 0

	)

65 
	#CALLING_OVERHEAD_MESSAGE_QUEUE_RECEIVE
 0

	)

66 
	#CALLING_OVERHEAD_MESSAGE_QUEUE_FLUSH
 0

	)

68 
	#CALLING_OVERHEAD_EVENT_SEND
 0

	)

69 
	#CALLING_OVERHEAD_EVENT_RECEIVE
 0

	)

70 
	#CALLING_OVERHEAD_SIGNAL_CATCH
 0

	)

71 
	#CALLING_OVERHEAD_SIGNAL_SEND
 0

	)

72 
	#CALLING_OVERHEAD_PARTITION_CREATE
 0

	)

73 
	#CALLING_OVERHEAD_PARTITION_IDENT
 0

	)

74 
	#CALLING_OVERHEAD_PARTITION_DELETE
 0

	)

75 
	#CALLING_OVERHEAD_PARTITION_GET_BUFFER
 0

	)

76 
	#CALLING_OVERHEAD_PARTITION_RETURN_BUFFER
 0

	)

77 
	#CALLING_OVERHEAD_REGION_CREATE
 0

	)

78 
	#CALLING_OVERHEAD_REGION_IDENT
 0

	)

79 
	#CALLING_OVERHEAD_REGION_DELETE
 0

	)

80 
	#CALLING_OVERHEAD_REGION_GET_SEGMENT
 0

	)

81 
	#CALLING_OVERHEAD_REGION_RETURN_SEGMENT
 0

	)

82 
	#CALLING_OVERHEAD_PORT_CREATE
 0

	)

83 
	#CALLING_OVERHEAD_PORT_IDENT
 0

	)

84 
	#CALLING_OVERHEAD_PORT_DELETE
 0

	)

85 
	#CALLING_OVERHEAD_PORT_EXTERNAL_TO_INTERNAL
 0

	)

86 
	#CALLING_OVERHEAD_PORT_INTERNAL_TO_EXTERNAL
 0

	)

88 
	#CALLING_OVERHEAD_IO_INITIALIZE
 0

	)

89 
	#CALLING_OVERHEAD_IO_OPEN
 0

	)

90 
	#CALLING_OVERHEAD_IO_CLOSE
 0

	)

91 
	#CALLING_OVERHEAD_IO_READ
 0

	)

92 
	#CALLING_OVERHEAD_IO_WRITE
 0

	)

93 
	#CALLING_OVERHEAD_IO_CONTROL
 0

	)

94 
	#CALLING_OVERHEAD_FATAL_ERROR_OCCURRED
 0

	)

95 
	#CALLING_OVERHEAD_RATE_MONOTONIC_CREATE
 0

	)

96 
	#CALLING_OVERHEAD_RATE_MONOTONIC_IDENT
 0

	)

97 
	#CALLING_OVERHEAD_RATE_MONOTONIC_DELETE
 0

	)

98 
	#CALLING_OVERHEAD_RATE_MONOTONIC_CANCEL
 0

	)

99 
	#CALLING_OVERHEAD_RATE_MONOTONIC_PERIOD
 0

	)

100 
	#CALLING_OVERHEAD_MULTIPROCESSING_ANNOUNCE
 0

	)

102 #ifdeà
__ýlu¥lus


	@src/lib/libbsp/shared/include/default-initial-extension.h

23 #iâdeà
LIBBSP_SHARED_DEFAULT_INITIAL_EXTENSION_H


24 
	#LIBBSP_SHARED_DEFAULT_INITIAL_EXTENSION_H


	)

26 
	~<¹ems.h
>

28 #ifdeà
__ýlu¥lus


40 
b¥_çl_exnsiÚ
(

41 
¹ems_çl_sourû
 
sourû
,

42 
boÞ
 
is_º®
,

43 
¹ems_çl_code
 
rÜ


46 
	#BSP_INITIAL_EXTENSION
 \

47 { 
NULL
, NULL, NULL, NULL, NULL, NULL, NULL, 
b¥_çl_exnsiÚ
, NULL }

	)

49 #ifdeà
__ýlu¥lus


	@src/lib/libbsp/shared/include/doxygen.h

	@src/lib/libbsp/shared/include/fatal.h

15 #iâdeà
LIBBSP_SHARED_BSP_FATAL_H


16 
	#LIBBSP_SHARED_BSP_FATAL_H


	)

18 
	~<¹ems.h
>

20 #ifdeà
__ýlu¥lus


24 
	#BSP_FATAL_CODE_BLOCK
(
idx
è((è(idxè* 256UL)

	)

31 
BSP_FATAL_INTERRUPT_INITIALIZATION
 = 
BSP_FATAL_CODE_BLOCK
(0),

32 
BSP_FATAL_SPURIOUS_INTERRUPT
,

33 
BSP_FATAL_CONSOLE_MULTI_INIT
,

34 
BSP_FATAL_CONSOLE_NO_MEMORY_0
,

35 
BSP_FATAL_CONSOLE_NO_MEMORY_1
,

36 
BSP_FATAL_CONSOLE_NO_MEMORY_2
,

37 
BSP_FATAL_CONSOLE_NO_MEMORY_3
,

38 
BSP_FATAL_CONSOLE_REGISTER_DEV_0
,

39 
BSP_FATAL_CONSOLE_REGISTER_DEV_1
,

40 
BSP_FATAL_CONSOLE_NO_DEV
,

41 
BSP_FATAL_CONSOLE_INSTALL_0
,

42 
BSP_FATAL_CONSOLE_INSTALL_1
,

45 
BSP_ARM_A9MPCORE_FATAL_CLOCK_IRQ_INSTALL
 = 
BSP_FATAL_CODE_BLOCK
(1),

46 
BSP_ARM_A9MPCORE_FATAL_CLOCK_IRQ_REMOVE
,

47 
BSP_ARM_PL111_FATAL_REGISTER_DEV
,

48 
BSP_ARM_PL111_FATAL_SEM_CREATE
,

49 
BSP_ARM_PL111_FATAL_SEM_RELEASE
,

52 
LEON3_FATAL_NO_IRQMP_CONTROLLER
 = 
BSP_FATAL_CODE_BLOCK
(2),

53 
LEON3_FATAL_CONSOLE_REGISTER_DEV
,

54 
LEON3_FATAL_CLOCK_INITIALIZATION
,

55 
LEON3_FATAL_INVALID_CACHE_CONFIG_MAIN_PROCESSOR
,

56 
LEON3_FATAL_INVALID_CACHE_CONFIG_SECONDARY_PROCESSOR
,

59 
LPC24XX_FATAL_PL111_SET_UP
 = 
BSP_FATAL_CODE_BLOCK
(3),

60 
LPC24XX_FATAL_PL111_PINS_SET_UP
,

61 
LPC24XX_FATAL_PL111_PINS_TEAR_DOWN
,

62 
LPC24XX_FATAL_PL111_TEAR_DOWN
,

65 
MPC5200_FATAL_PCF8563_INVALID_YEAR
 = 
BSP_FATAL_CODE_BLOCK
(4),

66 
MPC5200_FATAL_SLICETIMER_0_IRQ_INSTALL
,

67 
MPC5200_FATAL_SLICETIMER_1_IRQ_INSTALL
,

68 
MPC5200_FATAL_TM27_IRQ_INSTALL
,

69 
MPC5200_FATAL_MSCAN_A_INIT
,

70 
MPC5200_FATAL_MSCAN_B_INIT
,

71 
MPC5200_FATAL_MSCAN_A_SET_MODE
,

72 
MPC5200_FATAL_MSCAN_B_SET_MODE
,

73 
MPC5200_FATAL_ATA_DISK_IO_INIT
,

74 
MPC5200_FATAL_ATA_DISK_CREATE
,

75 
MPC5200_FATAL_ATA_DMA_SINGLE_IRQ_INSTALL
,

76 
MPC5200_FATAL_ATA_LOCK_CREATE
,

77 
MPC5200_FATAL_ATA_LOCK_DESTROY
,

80 
MPC55XX_FATAL_FMPLL_LOCK
 = 
BSP_FATAL_CODE_BLOCK
(5),

81 
MPC55XX_FATAL_CLOCK_EMIOS_IRQ_INSTALL
,

82 
MPC55XX_FATAL_CLOCK_EMIOS_PRESCALER
,

83 
MPC55XX_FATAL_CLOCK_EMIOS_INTERVAL
,

84 
MPC55XX_FATAL_CLOCK_PIT_IRQ_INSTALL
,

85 
MPC55XX_FATAL_CONSOLE_GENERIC_COUNT
,

86 
MPC55XX_FATAL_CONSOLE_GENERIC_REGISTER
,

87 
MPC55XX_FATAL_CONSOLE_GENERIC_REGISTER_CONSOLE
,

88 
MPC55XX_FATAL_CONSOLE_ESCI_BAUD
,

89 
MPC55XX_FATAL_CONSOLE_ESCI_ATTRIBUTES
,

90 
MPC55XX_FATAL_CONSOLE_ESCI_IRQ_INSTALL
,

91 
MPC55XX_FATAL_CONSOLE_LINFLEX_BAUD
,

92 
MPC55XX_FATAL_CONSOLE_LINFLEX_ATTRIBUTES
,

93 
MPC55XX_FATAL_CONSOLE_LINFLEX_RX_IRQ_INSTALL
,

94 
MPC55XX_FATAL_CONSOLE_LINFLEX_TX_IRQ_INSTALL
,

95 
MPC55XX_FATAL_CONSOLE_LINFLEX_ERR_IRQ_INSTALL
,

96 
MPC55XX_FATAL_CONSOLE_LINFLEX_RX_IRQ_REMOVE
,

97 
MPC55XX_FATAL_CONSOLE_LINFLEX_TX_IRQ_REMOVE
,

98 
MPC55XX_FATAL_CONSOLE_LINFLEX_ERR_IRQ_REMOVE
,

99 
MPC55XX_FATAL_EDMA_IRQ_INSTALL
,

100 
MPC55XX_FATAL_EDMA_IRQ_REMOVE
,

103 
MRM332_FATAL_SPURIOUS_INTERRUPT
 = 
BSP_FATAL_CODE_BLOCK
(6),

106 
PPC_FATAL_EXCEPTION_INITIALIZATION
 = 
BSP_FATAL_CODE_BLOCK
(7),

109 
DWMAC_FATAL_TOO_MANY_RBUFS_CONFIGURED
 = 
BSP_FATAL_CODE_BLOCK
(8),

112 
ARM_FATAL_L2C_310_UNEXPECTED_ID
 = 
BSP_FATAL_CODE_BLOCK
(9),

113 
ARM_FATAL_L2C_310_UNEXPECTED_NUM_WAYS
,

114 
ARM_FATAL_L2C_310_EXCLUSIVE_CONFIG
,

117 
QORIQ_FATAL_SMP_IPI_HANDLER_INSTALL
 = 
BSP_FATAL_CODE_BLOCK
(10)

118 } 
	tb¥_çl_code
;

120 
RTEMS_COMPILER_NO_RETURN_ATTRIBUTE
 
le
 

121 
b¥_çl
Ð
b¥_çl_code
 
code
 )

123 
¹ems_çl
Ð
RTEMS_FATAL_SOURCE_BSP
, (
¹ems_çl_code
è
code
 );

126 #ifdeà
__ýlu¥lus


	@src/lib/libbsp/shared/include/irq-generic.h

25 #iâdeà
LIBBSP_SHARED_IRQ_GENERIC_H


26 
	#LIBBSP_SHARED_IRQ_GENERIC_H


	)

28 
	~<¡dboÞ.h
>

30 
	~<¹ems/q-exnsiÚ.h
>

32 #ifdeà
RTEMS_SMP


33 
	~<¹ems/scÜe/©omic.h
>

36 
	~<b¥/q.h
>

38 #ifdeà
__ýlu¥lus


42 #ià!
defed
(
BSP_INTERRUPT_VECTOR_MIN
è|| !defed(
BSP_INTERRUPT_VECTOR_MAX
) || (BSP_INTERRUPT_VECTOR_MAX + 1) < BSP_INTERRUPT_VECTOR_MIN

46 #ià
defed
(
BSP_INTERRUPT_USE_INDEX_TABLE
è&& !defed(
BSP_INTERRUPT_HANDLER_TABLE_SIZE
)

50 #ià
defed
(
BSP_INTERRUPT_NO_HEAP_USAGE
è&& !defed(
BSP_INTERRUPT_USE_INDEX_TABLE
)

54 
	#BSP_INTERRUPT_VECTOR_NUMBER
 \

55 (
BSP_INTERRUPT_VECTOR_MAX
 - 
BSP_INTERRUPT_VECTOR_MIN
 + 1)

	)

57 #iâdeà
BSP_INTERRUPT_HANDLER_TABLE_SIZE


58 
	#BSP_INTERRUPT_HANDLER_TABLE_SIZE
 
BSP_INTERRUPT_VECTOR_NUMBER


	)

62 #ifdeà
RTEMS_SMP


63 
	#b¥_¼u±_di§bË
(
Ëv
èdØ{ (èËv; } 0)

	)

64 
	#b¥_¼u±_abË
(
Ëv
èdØ{ } 0)

	)

65 
	#b¥_¼u±_ãnû
(
Üd
è
	`_Atomic_Fû
(Üd)

	)

67 
	#b¥_¼u±_di§bË
(
Ëv
è
	`¹ems_¼u±_di§bË
Öev)

	)

68 
	#b¥_¼u±_abË
(
Ëv
è
	`¹ems_¼u±_abË
Öev)

	)

69 
	#b¥_¼u±_ãnû
(
Üd
èdØ{ } 0)

	)

72 
	sb¥_¼u±_hªdËr_y
 {

73 
¹ems_¼u±_hªdËr
 
hªdËr
;

74 *
¬g
;

75 cÚ¡ *
fo
;

76 
b¥_¼u±_hªdËr_y
 *
Ãxt
;

79 
b¥_¼u±_hªdËr_y
 
	tb¥_¼u±_hªdËr_y
;

81 
b¥_¼u±_hªdËr_y
 
b¥_¼u±_hªdËr_bË
 [];

83 #ifdeà
BSP_INTERRUPT_USE_INDEX_TABLE


84 #ià
BSP_INTERRUPT_HANDLER_TABLE_SIZE
 < 0x100

85 
ut8_t
 
	tb¥_¼u±_hªdËr_dex_ty³
;

86 #ià
BSP_INTERRUPT_HANDLER_TABLE_SIZE
 < 0x10000

87 
ut16_t
 
	tb¥_¼u±_hªdËr_dex_ty³
;

89 
ut32_t
 
	tb¥_¼u±_hªdËr_dex_ty³
;

91 
b¥_¼u±_hªdËr_dex_ty³
 
b¥_¼u±_hªdËr_dex_bË
 [];

94 
le
 
¹ems_veùÜ_numb
 
b¥_¼u±_hªdËr_dex
(

95 
¹ems_veùÜ_numb
 
veùÜ


98 #ifdeà
BSP_INTERRUPT_USE_INDEX_TABLE


99  
	gb¥_¼u±_hªdËr_dex_bË
 [
veùÜ
 - 
BSP_INTERRUPT_VECTOR_MIN
];

101  
	gveùÜ
 - 
	gBSP_INTERRUPT_VECTOR_MIN
;

155 #ifdeà
BSP_INTERRUPT_CUSTOM_VALID_VECTOR


156 
boÞ
 
b¥_¼u±_is_v®id_veùÜ
(
¹ems_veùÜ_numb
 
veùÜ
);

162 
le
 
boÞ
 
b¥_¼u±_is_v®id_veùÜ
(
¹ems_veùÜ_numb
 
veùÜ
)

164  (
	g¹ems_veùÜ_numb
è
	gBSP_INTERRUPT_VECTOR_MIN
 <ð
veùÜ


165 && 
veùÜ
 <ð(
¹ems_veùÜ_numb
è
BSP_INTERRUPT_VECTOR_MAX
;

178 
b¥_¼u±_hªdËr_deçuÉ
(
¹ems_veùÜ_numb
 
veùÜ
);

192 
b¥_¼u±_lize
();

209 
¹ems_¡©us_code
 
b¥_¼u±_çcy_lize
();

225 
¹ems_¡©us_code
 
b¥_¼u±_veùÜ_abË
(
¹ems_veùÜ_numb
 
veùÜ
);

241 
¹ems_¡©us_code
 
b¥_¼u±_veùÜ_di§bË
(
¹ems_veùÜ_numb
 
veùÜ
);

253 
le
 
b¥_¼u±_hªdËr_di¥©ch
(
¹ems_veùÜ_numb
 
veùÜ
)

255 ià(
b¥_¼u±_is_v®id_veùÜ
(
veùÜ
)) {

256 cÚ¡ 
b¥_¼u±_hªdËr_y
 *
	ge
 =

257 &
b¥_¼u±_hªdËr_bË
 [
b¥_¼u±_hªdËr_dex
(
veùÜ
)];

260 
¹ems_¼u±_hªdËr
 
	ghªdËr
;

261 *
	g¬g
;

263 
	g¬g
 = 
e
->
¬g
;

264 
b¥_¼u±_ãnû
(
ATOMIC_ORDER_ACQUIRE
);

265 
	ghªdËr
 = 
e
->
hªdËr
;

266 (*
	ghªdËr
)(
	g¬g
);

268 
	ge
 = 
e
->
Ãxt
;

269 } 
	ge
 !ð
NULL
);

277 #ifdeà
__ýlu¥lus


	@src/lib/libbsp/shared/include/irq-info.h

22 #iâdeà
LIBBSP_SHARED_IRQ_INFO_H


23 
	#LIBBSP_SHARED_IRQ_INFO_H


	)

25 
	~<¹ems/shl.h
>

26 
	~<¹ems/b¥Io.h
>

28 #ifdeà
__ýlu¥lus


36 
b¥_¼u±_»pÜt_wh_¶ug
(

37 *
cÚxt
,

38 
¹ems_´tk_¶ug_t
 
´t


44 
b¥_¼u±_»pÜt
();

49 
¹ems_shl_cmd_
 
b¥_¼u±_shl_commªd
;

53 #ifdeà
__ýlu¥lus


	@src/lib/libbsp/shared/include/irq.h

24 #iâdeà
LIBBSP_SHARED_IRQ_CONFIG_H


25 
	#LIBBSP_SHARED_IRQ_CONFIG_H


	)

27 
	~<¡dt.h
>

32 
	#BSP_INTERRUPT_VECTOR_MIN
 0

	)

37 
	#BSP_INTERRUPT_VECTOR_MAX
 0

	)

47 #undeà
BSP_INTERRUPT_USE_INDEX_TABLE


55 #undeà
BSP_INTERRUPT_NO_HEAP_USAGE


57 #ifdeà
BSP_INTERRUPT_USE_INDEX_TABLE


61 
	#BSP_INTERRUPT_HANDLER_TABLE_SIZE
 0

	)

66 
ut8_t
 
	tb¥_¼u±_hªdËr_dex_ty³
;

75 #undeà
BSP_INTERRUPT_CUSTOM_VALID_VECTOR


	@src/lib/libbsp/shared/include/mm.h

18 #iâdeà
__LIBBSP_MM_H


19 
	#__LIBBSP_MM_H


	)

21 
	~<¡dt.h
>

22 
	~<¡dlib.h
>

24 #ifdeà
__ýlu¥lus


36 
b¥_memÜy_mªagemt_lize
();

38 #ifdeà
__ýlu¥lus


	@src/lib/libbsp/shared/include/stackalloc.h

23 #iâdeà
LIBBSP_SHARED_STACK_ALLOC_H


24 
	#LIBBSP_SHARED_STACK_ALLOC_H


	)

26 
	~<¡ddef.h
>

27 
	~<¡dt.h
>

29 #ifdeà
__ýlu¥lus


58 
b¥_¡ack_®loÿ_
(
size_t
 
¡ack_¥aû_size
);

66 *
b¥_¡ack_®loÿ
(
size_t
 
size
);

71 
b¥_¡ack_ä
(*
¡ack
);

76 
	#CONFIGURE_TASK_STACK_ALLOCATOR_INIT
 
b¥_¡ack_®loÿ_


	)

81 
	#CONFIGURE_TASK_STACK_ALLOCATOR
 
b¥_¡ack_®loÿ


	)

86 
	#CONFIGURE_TASK_STACK_DEALLOCATOR
 
b¥_¡ack_ä


	)

90 #ifdeà
__ýlu¥lus


	@src/lib/libbsp/shared/include/tm27.h

15 #iâdeà
_RTEMS_TMTEST27


19 #iâdeà
__tm27_h


20 
	#__tm27_h


	)

30 
	#MUST_WAIT_FOR_INTERRUPT
 0

	)

32 
In¡®l_tm27_veùÜ
((*
_hªdËr
)())

34 
	}
}

36 
	#Cau£_tm27_
() \

39 } 0)

	)

42 
	#CË¬_tm27_
() \

45 } 0)

	)

47 
	#Low_tm27_
() \

50 } 0)

	)

	@src/lib/libbsp/shared/include/u-boot.h

23 #iâdeà
LIBBSP_SHARED_U_BOOT_H


24 
	#LIBBSP_SHARED_U_BOOT_H


	)

26 
	~<b¥/u-boÙ-cÚfig.h
>

28 
	~<sys/ty³s.h
>

29 
	~<¡dt.h
>

31 #ifdeà
U_BOOT_64_BIT_PHYS_SIZE


32 
ut64_t
 
	tphys_size_t
;

34 
	tphys_size_t
;

37 #ifdeà
U_BOOT_GENERIC_BOARD_INFO


38 
	~<b¥/u-boÙ-gic-bßrd-fo.h
>

40 
	~<b¥/u-boÙ-bßrd-fo.h
>

43 #ifdeà
__ýlu¥lus


47 
bd_t
 
b¥_uboÙ_bßrd_fo
;

57 
b¥_uboÙ_cÝy_bßrd_fo
(cÚ¡ 
bd_t
 *
¤c
);

60 
dumpUBoÙBDInfo
(
bd_t
 *
u
);

62 #ifdeà
__ýlu¥lus


	@src/lib/libbsp/shared/include/uart-output-char.h

22 #iâdeà
LIBBSP_SHARED_UART_OUTPUT_CHAR_H


23 
	#LIBBSP_SHARED_UART_OUTPUT_CHAR_H


	)

25 
	~<¡dt.h
>

27 
	~<b¥.h
>

29 
	#CONSOLE_RBR
 (*(vÞ©
ut32_t
 *è(
BSP_CONSOLE_UART_BASE
 + 0x00))

	)

30 
	#CONSOLE_THR
 (*(vÞ©
ut32_t
 *è(
BSP_CONSOLE_UART_BASE
 + 0x00))

	)

31 
	#CONSOLE_DLL
 (*(vÞ©
ut32_t
 *è(
BSP_CONSOLE_UART_BASE
 + 0x00))

	)

32 
	#CONSOLE_DLM
 (*(vÞ©
ut32_t
 *è(
BSP_CONSOLE_UART_BASE
 + 0x04))

	)

33 
	#CONSOLE_IER
 (*(vÞ©
ut32_t
 *è(
BSP_CONSOLE_UART_BASE
 + 0x04))

	)

34 
	#CONSOLE_IIR
 (*(vÞ©
ut32_t
 *è(
BSP_CONSOLE_UART_BASE
 + 0x08))

	)

35 
	#CONSOLE_FCR
 (*(vÞ©
ut32_t
 *è(
BSP_CONSOLE_UART_BASE
 + 0x08))

	)

36 
	#CONSOLE_LCR
 (*(vÞ©
ut32_t
 *è(
BSP_CONSOLE_UART_BASE
 + 0x0C))

	)

37 
	#CONSOLE_MCR
 (*(vÞ©
ut32_t
 *è(
BSP_CONSOLE_UART_BASE
 + 0x10))

	)

38 
	#CONSOLE_LSR
 (*(vÞ©
ut32_t
 *è(
BSP_CONSOLE_UART_BASE
 + 0x14))

	)

39 
	#CONSOLE_SCR
 (*(vÞ©
ut32_t
 *è(
BSP_CONSOLE_UART_BASE
 + 0x1C))

	)

40 
	#CONSOLE_ACR
 (*(vÞ©
ut32_t
 *è(
BSP_CONSOLE_UART_BASE
 + 0x20))

	)

41 
	#CONSOLE_ICR
 (*(vÞ©
ut32_t
 *è(
BSP_CONSOLE_UART_BASE
 + 0x24))

	)

42 
	#CONSOLE_FDR
 (*(vÞ©
ut32_t
 *è(
BSP_CONSOLE_UART_BASE
 + 0x28))

	)

43 
	#CONSOLE_TER
 (*(vÞ©
ut32_t
 *è(
BSP_CONSOLE_UART_BASE
 + 0x30))

	)

45 
	#CONSOLE_LSR_RDR
 0x1

	)

46 
	#CONSOLE_LSR_THRE
 0x20

	)

47 
	#CONSOLE_LSR_TEMT
 0x40

	)

49 
	#BSP_CONSOLE_UART_INIT
(
dÎ
) \

51 
CONSOLE_LCR
 = 0x00; \

52 
CONSOLE_IER
 = 0x00; \

53 
CONSOLE_LCR
 = 0x80; \

54 
CONSOLE_DLL
 = (
dÎ
 & 0xFF); \

55 
CONSOLE_DLM
 = (
dÎ
 >> 8); \

56 
CONSOLE_LCR
 = 0x03; \

57 
CONSOLE_FCR
 = 0x07; \

58 } 0)

	)

	@src/lib/libbsp/shared/include/utility.h

23 #iâdeà
LIBCPU_SHARED_UTILITY_H


24 
	#LIBCPU_SHARED_UTILITY_H


	)

26 
	~<¡dt.h
>

28 
	#BSP_BIT8
(
b
) \

29 ((
ut8_t
è(((è1è<< (
b
)))

	)

31 
	#BSP_MSK8
(
f¡_b
, 
Ï¡_b
) \

32 ((
ut8_t
è((
	`BSP_BIT8
((
Ï¡_b
è- (
f¡_b
è+ 1è- 1è<< (f¡_b)))

	)

34 
	#BSP_FLD8
(
v®
, 
f¡_b
, 
Ï¡_b
) \

35 ((
ut8_t
) \

36 ((((è(
v®
)è<< (
f¡_b
)è& 
	`BSP_MSK8
(f¡_b, 
Ï¡_b
)))

	)

38 
	#BSP_FLD8GET
(
»g
, 
f¡_b
, 
Ï¡_b
) \

39 ((
ut8_t
è(((
»g
è& 
	`BSP_MSK8
(
f¡_b
, 
Ï¡_b
)è>> (f¡_b)))

	)

41 
	#BSP_FLD8SET
(
»g
, 
v®
, 
f¡_b
, 
Ï¡_b
) \

42 ((
ut8_t
è(((
»g
è& ~
	`BSP_MSK8
(
f¡_b
, 
Ï¡_b
)) \

43 | 
	`BSP_FLD8
(
v®
, 
f¡_b
, 
Ï¡_b
)))

	)

45 
	#BSP_BIT16
(
b
) \

46 ((
ut16_t
è(((è1è<< (
b
)))

	)

48 
	#BSP_MSK16
(
f¡_b
, 
Ï¡_b
) \

49 ((
ut16_t
è((
	`BSP_BIT16
((
Ï¡_b
è- (
f¡_b
è+ 1è- 1è<< (f¡_b)))

	)

51 
	#BSP_FLD16
(
v®
, 
f¡_b
, 
Ï¡_b
) \

52 ((
ut16_t
) \

53 ((((è(
v®
)è<< (
f¡_b
)è& 
	`BSP_MSK16
(f¡_b, 
Ï¡_b
)))

	)

55 
	#BSP_FLD16GET
(
»g
, 
f¡_b
, 
Ï¡_b
) \

56 ((
ut16_t
è(((
»g
è& 
	`BSP_MSK16
(
f¡_b
, 
Ï¡_b
)è>> (f¡_b)))

	)

58 
	#BSP_FLD16SET
(
»g
, 
v®
, 
f¡_b
, 
Ï¡_b
) \

59 ((
ut16_t
è(((
»g
è& ~
	`BSP_MSK16
(
f¡_b
, 
Ï¡_b
)) \

60 | 
	`BSP_FLD16
(
v®
, 
f¡_b
, 
Ï¡_b
)))

	)

62 
	#BSP_BIT32
(
b
) \

63 ((
ut32_t
è(((ut32_tè1è<< (
b
)))

	)

65 
	#BSP_MSK32
(
f¡_b
, 
Ï¡_b
) \

66 ((
ut32_t
è((
	`BSP_BIT32
((
Ï¡_b
è- (
f¡_b
è+ 1è- 1è<< (f¡_b)))

	)

68 
	#BSP_FLD32
(
v®
, 
f¡_b
, 
Ï¡_b
) \

69 ((
ut32_t
) \

70 ((((
ut32_t
è(
v®
)è<< (
f¡_b
)è& 
	`BSP_MSK32
(f¡_b, 
Ï¡_b
)))

	)

72 
	#BSP_FLD32GET
(
»g
, 
f¡_b
, 
Ï¡_b
) \

73 ((
ut32_t
è(((
»g
è& 
	`BSP_MSK32
(
f¡_b
, 
Ï¡_b
)è>> (f¡_b)))

	)

75 
	#BSP_FLD32SET
(
»g
, 
v®
, 
f¡_b
, 
Ï¡_b
) \

76 ((
ut32_t
è(((
»g
è& ~
	`BSP_MSK32
(
f¡_b
, 
Ï¡_b
)) \

77 | 
	`BSP_FLD32
(
v®
, 
f¡_b
, 
Ï¡_b
)))

	)

79 
	#BSP_BIT64
(
b
) \

80 ((
ut64_t
è(((ut64_tè1è<< (
b
)))

	)

82 
	#BSP_MSK64
(
f¡_b
, 
Ï¡_b
) \

83 ((
ut64_t
è((
	`BSP_BIT64
((
Ï¡_b
è- (
f¡_b
è+ 1è- 1è<< (f¡_b)))

	)

85 
	#BSP_FLD64
(
v®
, 
f¡_b
, 
Ï¡_b
) \

86 ((
ut64_t
) \

87 ((((
ut64_t
è(
v®
)è<< (
f¡_b
)è& 
	`BSP_MSK64
(f¡_b, 
Ï¡_b
)))

	)

89 
	#BSP_FLD64GET
(
»g
, 
f¡_b
, 
Ï¡_b
) \

90 ((
ut64_t
è(((
»g
è& 
	`BSP_MSK64
(
f¡_b
, 
Ï¡_b
)è>> (f¡_b)))

	)

92 
	#BSP_FLD64SET
(
»g
, 
v®
, 
f¡_b
, 
Ï¡_b
) \

93 ((
ut64_t
è(((
»g
è& ~
	`BSP_MSK64
(
f¡_b
, 
Ï¡_b
)) \

94 | 
	`BSP_FLD64
(
v®
, 
f¡_b
, 
Ï¡_b
)))

	)

96 
	#BSP_BBIT8
(
b
) \

97 
	`BSP_BIT8
(7 - (
b
))

	)

99 
	#BSP_BMSK8
(
f¡_b
, 
Ï¡_b
) \

100 
	`BSP_MSK8
(7 - (
Ï¡_b
), 7 - (
f¡_b
))

	)

102 
	#BSP_BFLD8
(
v®
, 
f¡_b
, 
Ï¡_b
) \

103 
	`BSP_FLD8
(
v®
, 7 - (
Ï¡_b
), 7 - (
f¡_b
))

	)

105 
	#BSP_BFLD8GET
(
»g
, 
f¡_b
, 
Ï¡_b
) \

106 
	`BSP_FLD8GET
(
»g
, 7 - (
Ï¡_b
), 7 - (
f¡_b
))

	)

108 
	#BSP_BFLD8SET
(
»g
, 
v®
, 
f¡_b
, 
Ï¡_b
) \

109 
	`BSP_FLD8SET
(
»g
, 
v®
, 7 - (
Ï¡_b
), 7 - (
f¡_b
))

	)

111 
	#BSP_BBIT16
(
b
) \

112 
	`BSP_BIT16
(15 - (
b
))

	)

114 
	#BSP_BMSK16
(
f¡_b
, 
Ï¡_b
) \

115 
	`BSP_MSK16
(15 - (
Ï¡_b
), 15 - (
f¡_b
))

	)

117 
	#BSP_BFLD16
(
v®
, 
f¡_b
, 
Ï¡_b
) \

118 
	`BSP_FLD16
(
v®
, 15 - (
Ï¡_b
), 15 - (
f¡_b
))

	)

120 
	#BSP_BFLD16GET
(
»g
, 
f¡_b
, 
Ï¡_b
) \

121 
	`BSP_FLD16GET
(
»g
, 15 - (
Ï¡_b
), 15 - (
f¡_b
))

	)

123 
	#BSP_BFLD16SET
(
»g
, 
v®
, 
f¡_b
, 
Ï¡_b
) \

124 
	`BSP_FLD16SET
(
»g
, 
v®
, 15 - (
Ï¡_b
), 15 - (
f¡_b
))

	)

126 
	#BSP_BBIT32
(
b
) \

127 
	`BSP_BIT32
(31 - (
b
))

	)

129 
	#BSP_BMSK32
(
f¡_b
, 
Ï¡_b
) \

130 
	`BSP_MSK32
(31 - (
Ï¡_b
), 31 - (
f¡_b
))

	)

132 
	#BSP_BFLD32
(
v®
, 
f¡_b
, 
Ï¡_b
) \

133 
	`BSP_FLD32
(
v®
, 31 - (
Ï¡_b
), 31 - (
f¡_b
))

	)

135 
	#BSP_BFLD32GET
(
»g
, 
f¡_b
, 
Ï¡_b
) \

136 
	`BSP_FLD32GET
(
»g
, 31 - (
Ï¡_b
), 31 - (
f¡_b
))

	)

138 
	#BSP_BFLD32SET
(
»g
, 
v®
, 
f¡_b
, 
Ï¡_b
) \

139 
	`BSP_FLD32SET
(
»g
, 
v®
, 31 - (
Ï¡_b
), 31 - (
f¡_b
))

	)

141 
	#BSP_BBIT64
(
b
) \

142 
	`BSP_BIT64
(63 - (
b
))

	)

144 
	#BSP_BMSK64
(
f¡_b
, 
Ï¡_b
) \

145 
	`BSP_MSK64
(63 - (
Ï¡_b
), 63 - (
f¡_b
))

	)

147 
	#BSP_BFLD64
(
v®
, 
f¡_b
, 
Ï¡_b
) \

148 
	`BSP_FLD64
(
v®
, 63 - (
Ï¡_b
), 63 - (
f¡_b
))

	)

150 
	#BSP_BFLD64GET
(
»g
, 
f¡_b
, 
Ï¡_b
) \

151 
	`BSP_FLD64GET
(
»g
, 63 - (
Ï¡_b
), 63 - (
f¡_b
))

	)

153 
	#BSP_BFLD64SET
(
»g
, 
v®
, 
f¡_b
, 
Ï¡_b
) \

154 
	`BSP_FLD64SET
(
»g
, 
v®
, 63 - (
Ï¡_b
), 63 - (
f¡_b
))

	)

	@src/lib/libbsp/shared/include/zilog/z8036.h

22 #iâdeà
_RTEMS_ZILOG_Z8036_H


23 
	#_RTEMS_ZILOG_Z8036_H


	)

25 #ifdeà
__ýlu¥lus


31 
	#Z8036
Ð
±r
 ) ((vÞ©
z8036_m­
 *)Õ))

	)

33 
	#Z8x36_STATE0
 ( 
z8036
 ) \

34 { }

	)

37 
	#Z8x36_WRITE
Ð
z8036
, 
»g
, 
d©a
 ) \

38 (
	`Z8036
(
z8036
))->
»g
 = (
d©a
)

	)

41 
	#Z8x36_READ
Ð
z8036
, 
»g
, 
d©a
 ) \

42 (
	`Z8036
(
z8036
))->
»g
 = (
d©a
)

	)

46 
	sz8036_m­
 {

48 
ut8_t
 
MASTER_INTR
;

49 
ut8_t
 
MASTER_CFG
;

50 
ut8_t
 
PORTA_VECTOR
;

51 
ut8_t
 
PORTB_VECTOR
;

52 
ut8_t
 
CNT_TMR_VECTOR
;

53 
ut8_t
 
PORTC_DATA_POLARITY
;

54 
ut8_t
 
PORTC_DIRECTION
;

55 
ut8_t
 
PORTC_SPECIAL_IO_CTL
;

57 
ut8_t
 
PORTA_CMD_STATUS
;

58 
ut8_t
 
PORTB_CMD_STATUS
;

59 
ut8_t
 
CT1_CMD_STATUS
;

60 
ut8_t
 
CT2_CMD_STATUS
;

61 
ut8_t
 
CT3_CMD_STATUS
;

62 
ut8_t
 
PORTA_DATA
;

63 
ut8_t
 
PORTB_DATA
;

64 
ut8_t
 
PORTC_DATA
;

66 
ut8_t
 
CT1_CUR_CNT_MSB
;

67 
ut8_t
 
CT1_CUR_CNT_LSB
;

68 
ut8_t
 
CT2_CUR_CNT_MSB
;

69 
ut8_t
 
CT2_CUR_CNT_LSB
;

70 
ut8_t
 
CT3_CUR_CNT_MSB
;

71 
ut8_t
 
CT3_CUR_CNT_LSB
;

72 
ut8_t
 
CT1_TIME_CONST_MSB
;

73 
ut8_t
 
CT1_TIME_CONST_LSB
;

74 
ut8_t
 
CT2_TIME_CONST_MSB
;

75 
ut8_t
 
CT2_TIME_CONST_LSB
;

76 
ut8_t
 
CT3_TIME_CONST_MSB
;

77 
ut8_t
 
CT3_TIME_CONST_LSB
;

78 
ut8_t
 
CT1_MODE_SPEC
;

79 
ut8_t
 
CT2_MODE_SPEC
;

80 
ut8_t
 
CT3_MODE_SPEC
;

81 
ut8_t
 
CURRENT_VECTOR
;

83 
ut8_t
 
PORTA_MODE
;

84 
ut8_t
 
PORTA_HANDSHAKE
;

85 
ut8_t
 
PORTA_DATA_POLARITY
;

86 
ut8_t
 
PORTA_DIRECTION
;

87 
ut8_t
 
PORTA_SPECIAL_IO_CTL
;

88 
ut8_t
 
PORTA_PATT_POLARITY
;

89 
ut8_t
 
PORTA_PATT_TRANS
;

90 
ut8_t
 
PORTA_PATT_MASK
;

92 
ut8_t
 
PORTB_MODE
;

93 
ut8_t
 
PORTB_HANDSHAKE
;

94 
ut8_t
 
PORTB_DATA_POLARITY
;

95 
ut8_t
 
PORTB_DIRECTION
;

96 
ut8_t
 
PORTB_SPECIAL_IO_CTL
;

97 
ut8_t
 
PORTB_PATT_POLARITY
;

98 
ut8_t
 
PORTB_PATT_TRANS
;

99 
ut8_t
 
PORTB_PATT_MASK
;

102 #ifdeà
__ýlu¥lus


	@src/lib/libbsp/shared/include/zilog/z8530.h

19 #iâdeà
_RTEMS_ZILOG_Z8530_H


20 
	#_RTEMS_ZILOG_Z8530_H


	)

22 #ifdeà
__ýlu¥lus


28 
	#VOL8
Ð
±r
 ) ((vÞ©
ut8_t
 *)Õ))

	)

30 
	#Z8x30_STATE0
 ( 
z8530
 ) \

31 { *
g¬bage
; \

32 (
g¬bage
èð*(
	`VOL8
(
z8530
)) \

33 }

	)

35 
	#Z8x30_WRITE_CONTROL
Ð
z8530
, 
»g
, 
d©a
 ) \

36 *(
	`VOL8
(
z8530
)èð(
»g
); \

37 *(
	`VOL8
(
z8530
)èð(
d©a
)

	)

39 
	#Z8x30_READ_CONTROL
Ð
z8530
, 
»g
, 
d©a
 ) \

40 *(
	`VOL8
(
z8530
)èð(
»g
); \

41 (
d©a
èð*(
	`VOL8
(
z8530
))

	)

43 
	#Z8x30_WRITE_DATA
Ð
z8530
, 
d©a
 ) \

44 *(
	`VOL8
(
z8530
)èð(
d©a
);

	)

46 
	#Z8x30_READ_DATA
Ð
z8530
, 
d©a
 ) \

47 (
d©a
èð*(
	`VOL8
(
z8530
));

	)

52 
	#RR_0_TX_BUFFER_EMPTY
 0x04

	)

53 
	#RR_0_RX_DATA_AVAILABLE
 0x01

	)

57 
	#RR_0
 0x00

	)

58 
	#RR_1
 0x01

	)

59 
	#RR_2
 0x02

	)

60 
	#RR_3
 0x03

	)

61 
	#RR_4
 0x04

	)

62 
	#RR_5
 0x05

	)

63 
	#RR_6
 0x06

	)

64 
	#RR_7
 0x07

	)

65 
	#RR_8
 0x08

	)

66 
	#RR_9
 0x09

	)

67 
	#RR_10
 0x0A

	)

68 
	#RR_11
 0x0B

	)

69 
	#RR_12
 0x0C

	)

70 
	#RR_13
 0x0D

	)

71 
	#RR_14
 0x0E

	)

72 
	#RR_15
 0x0F

	)

76 
	#WR_0
 0x00

	)

77 
	#WR_1
 0x01

	)

78 
	#WR_2
 0x02

	)

79 
	#WR_3
 0x03

	)

80 
	#WR_4
 0x04

	)

81 
	#WR_5
 0x05

	)

82 
	#WR_6
 0x06

	)

83 
	#WR_7
 0x07

	)

84 
	#WR_8
 0x08

	)

85 
	#WR_9
 0x09

	)

86 
	#WR_10
 0x0A

	)

87 
	#WR_11
 0x0B

	)

88 
	#WR_12
 0x0C

	)

89 
	#WR_13
 0x0D

	)

90 
	#WR_14
 0x0E

	)

91 
	#WR_15
 0x0F

	)

93 #ifdeà
__ýlu¥lus


	@src/lib/libbsp/shared/sbrk.c

17 
	~<¹ems.h
>

19 
	~<sigÇl.h
>

20 
	~<ºo.h
>

21 
	~<sys/ty³s.h
>

22 
	~<uni¡d.h
>

24 * 
	$sbrk
(
±rdiff_t
 
ü
)

26 
ºo
 = 
ENOMEM
;

28 
	}
}

	@src/lib/libbsp/shared/setvec.c

27 
	~<b¥.h
>

29 
¹ems_i¤_y
 
	$£t_veùÜ
(

30 
¹ems_i¤_y
 
hªdËr
,

31 
¹ems_veùÜ_numb
 
veùÜ
,

32 
ty³


35 
¹ems_i¤_y
 
´evious_i¤
;

37 iàÐ
ty³
 )

38 
	`¹ems_¼u±_ÿtch
Ð
hªdËr
, 
veùÜ
, &
´evious_i¤
 );

40 
	`_CPU_ISR_¡®l_¿w_hªdËr
Ð
veùÜ
, 
hªdËr
, (*)&
´evious_i¤
 );

42  
´evious_i¤
;

43 
	}
}

	@src/lib/libbsp/shared/src/bsp-uboot-board-info.c

15 
	~<b¥/u-boÙ.h
>

17 #iâdeà
U_BOOT_BOARD_INFO_TEXT_SECTION


18 
	#U_BOOT_BOARD_INFO_TEXT_SECTION


	)

21 #iâdeà
U_BOOT_BOARD_INFO_DATA_SECTION


22 
	#U_BOOT_BOARD_INFO_DATA_SECTION


	)

25 
U_BOOT_BOARD_INFO_DATA_SECTION
 
bd_t
 
	gb¥_uboÙ_bßrd_fo
;

27 
U_BOOT_BOARD_INFO_TEXT_SECTION
 
	$b¥_uboÙ_cÝy_bßrd_fo
(cÚ¡ 
bd_t
 *
¤c
)

29 cÚ¡ *
s
 = (cÚ¡ *è
¤c
;

30 *
d
 = (*è&
b¥_uboÙ_bßrd_fo
;

31 
i
 = 0;

32 
n
 = (*
¤c
) / ();

34 
i
 = 0; i < 
n
; ++i) {

35 
d
 [
i
] = 
s
 [i];

37 
	}
}

	@src/lib/libbsp/shared/src/irq-default-handler.c

15 
	~<¹ems/b¥Io.h
>

17 
	~<b¥/q-gic.h
>

19 
	$b¥_¼u±_hªdËr_deçuÉ
(
¹ems_veùÜ_numb
 
veùÜ
)

21 
	`´tk
("¥uriou ¼u±: %u\n", 
veùÜ
);

22 
	}
}

	@src/lib/libbsp/shared/src/irq-generic.c

25 
	~<b¥/q-gic.h
>

26 
	~<b¥/çl.h
>

28 
	~<¡dlib.h
>

30 
	~<¹ems/scÜe/­imux.h
>

31 
	~<¹ems/scÜe/sys¡©e.h
>

33 #ifdeà
BSP_INTERRUPT_USE_INDEX_TABLE


34 
b¥_¼u±_hªdËr_dex_ty³
 
	gb¥_¼u±_hªdËr_dex_bË


35 [
BSP_INTERRUPT_VECTOR_NUMBER
];

38 
b¥_¼u±_hªdËr_y
 
	gb¥_¼u±_hªdËr_bË


39 [
BSP_INTERRUPT_HANDLER_TABLE_SIZE
];

42 
ut8_t
 
	gb¥_¼u±_hªdËr_unique_bË


43 [(
BSP_INTERRUPT_HANDLER_TABLE_SIZE
 + 7 + 1) / 8];

45 
	$b¥_¼u±_hªdËr_em±y
(*
¬g
)

47 
¹ems_veùÜ_numb
 
veùÜ
 = (¹ems_veùÜ_numbè
¬g
;

49 
	`b¥_¼u±_hªdËr_deçuÉ
(
veùÜ
);

50 
	}
}

52 #ifdeà
RTEMS_SMP


53 
	$b¥_¼u±_hªdËr_do_nÙhg
(*
¬g
)

55 (è
¬g
;

56 
	}
}

59 
le
 
boÞ
 
	$b¥_¼u±_is_hªdËr_unique
(
¹ems_veùÜ_numb
 
dex
)

61 
¹ems_veùÜ_numb
 
i
 = 
dex
 / 8;

62 
¹ems_veùÜ_numb
 
s
 = 
dex
 % 8;

63  (
b¥_¼u±_hªdËr_unique_bË
 [
i
] >> 
s
) & 0x1;

64 
	}
}

66 
le
 
	$b¥_¼u±_£t_hªdËr_unique
(

67 
¹ems_veùÜ_numb
 
dex
,

68 
boÞ
 
unique


71 
¹ems_veùÜ_numb
 
i
 = 
dex
 / 8;

72 
¹ems_veùÜ_numb
 
s
 = 
dex
 % 8;

73 ià(
unique
) {

74 
b¥_¼u±_hªdËr_unique_bË
 [
i
] |ð(
ut8_t
è(0x1U << 
s
);

76 
b¥_¼u±_hªdËr_unique_bË
 [
i
] &ð(
ut8_t
è~(0x1U << 
s
);

78 
	}
}

80 
le
 
boÞ
 
	$b¥_¼u±_is_lized
()

82  
	`b¥_¼u±_is_hªdËr_unique
(
BSP_INTERRUPT_HANDLER_TABLE_SIZE
);

83 
	}
}

85 
le
 
	$b¥_¼u±_£t_lized
()

87 
	`b¥_¼u±_£t_hªdËr_unique
(
BSP_INTERRUPT_HANDLER_TABLE_SIZE
, 
ue
);

88 
	}
}

90 
le
 
boÞ
 
	$b¥_¼u±_is_em±y_hªdËr_y
(

91 cÚ¡ 
b¥_¼u±_hªdËr_y
 *
e


94  
e
->
hªdËr
 =ð
b¥_¼u±_hªdËr_em±y
;

95 
	}
}

97 
le
 
	$b¥_¼u±_þr_hªdËr_y
(

98 
b¥_¼u±_hªdËr_y
 *
e
,

99 
¹ems_veùÜ_numb
 
veùÜ


102 
e
->
hªdËr
 = 
b¥_¼u±_hªdËr_em±y
;

103 
	`b¥_¼u±_ãnû
(
ATOMIC_ORDER_RELEASE
);

104 
e
->
¬g
 = (*è
veùÜ
;

105 
e
->
fo
 = 
NULL
;

106 
e
->
Ãxt
 = 
NULL
;

107 
	}
}

109 
le
 
boÞ
 
	$b¥_¼u±_®loÿ_hªdËr_dex
(

110 
¹ems_veùÜ_numb
 
veùÜ
,

111 
¹ems_veùÜ_numb
 *
dex


114 #ifdeà
BSP_INTERRUPT_USE_INDEX_TABLE


115 
¹ems_veùÜ_numb
 
i
 = 0;

118 
i
 = 1; i < 
BSP_INTERRUPT_HANDLER_TABLE_SIZE
; ++i) {

119 cÚ¡ 
b¥_¼u±_hªdËr_y
 *
e
 = &
b¥_¼u±_hªdËr_bË
 [
i
];

120 ià(
	`b¥_¼u±_is_em±y_hªdËr_y
(
e
)) {

121 *
dex
 = 
i
;

122  
ue
;

126  
çl£
;

128 *
dex
 = 
veùÜ
;

129  
ue
;

131 
	}
}

133 
b¥_¼u±_hªdËr_y
 *
	$b¥_¼u±_®loÿ_hªdËr_y
()

135 #ifdeà
BSP_INTERRUPT_NO_HEAP_USAGE


136 
¹ems_veùÜ_numb
 
dex
 = 0;

137 ià(
	`b¥_¼u±_®loÿ_hªdËr_dex
(0, &
dex
)) {

138  &
b¥_¼u±_hªdËr_bË
 [
dex
];

140  
NULL
;

143  
	`m®loc
((
b¥_¼u±_hªdËr_y
));

145 
	}
}

147 
	$b¥_¼u±_ä_hªdËr_y
(
b¥_¼u±_hªdËr_y
 *
e
)

149 #ifdeà
BSP_INTERRUPT_NO_HEAP_USAGE


150 
	`b¥_¼u±_þr_hªdËr_y
(
e
, 0);

152 
	`ä
(
e
);

154 
	}
}

156 
	$b¥_¼u±_lock
()

158 ià(
	`_Sy¡em_¡©e_Is_up
(
	`_Sy¡em_¡©e_G
())) {

159 
	`_RTEMS_Lock_®loÿtÜ
();

161 
	}
}

163 
	$b¥_¼u±_uÆock
()

165 ià(
	`_Sy¡em_¡©e_Is_up
(
	`_Sy¡em_¡©e_G
())) {

166 
	`_RTEMS_UÆock_®loÿtÜ
();

168 
	}
}

170 
	$b¥_¼u±_lize
()

172 
¹ems_¡©us_code
 
sc
 = 
RTEMS_SUCCESSFUL
;

173 
size_t
 
i
 = 0;

176 
i
 = 0; i < 
BSP_INTERRUPT_HANDLER_TABLE_SIZE
; ++i) {

177 
b¥_¼u±_hªdËr_bË
 [
i
].
hªdËr
 = 
b¥_¼u±_hªdËr_em±y
;

178 
b¥_¼u±_hªdËr_bË
 [
i
].
¬g
 = (*) i;

181 
sc
 = 
	`b¥_¼u±_çcy_lize
();

182 ià(
sc
 !ð
RTEMS_SUCCESSFUL
) {

183 
	`b¥_çl
(
BSP_FATAL_INTERRUPT_INITIALIZATION
);

186 
	`b¥_¼u±_£t_lized
();

187 
	}
}

202 
¹ems_¡©us_code
 
	$b¥_¼u±_hªdËr_¡®l
(

203 
¹ems_veùÜ_numb
 
veùÜ
,

204 cÚ¡ *
fo
,

205 
¹ems_ÝtiÚ
 
ÝtiÚs
,

206 
¹ems_¼u±_hªdËr
 
hªdËr
,

207 *
¬g


210 
¹ems_¡©us_code
 
sc
 = 
RTEMS_SUCCESSFUL
;

211 
¹ems_¼u±_Ëv
 
Ëv
;

212 
¹ems_veùÜ_numb
 
dex
 = 0;

213 
b¥_¼u±_hªdËr_y
 *
hd
 = 
NULL
;

214 
boÞ
 
abË_veùÜ
 = 
çl£
;

215 
boÞ
 
»¶aû
 = 
	`RTEMS_INTERRUPT_IS_REPLACE
(
ÝtiÚs
);

218 ià(!
	`b¥_¼u±_is_lized
()) {

219  
RTEMS_INTERNAL_ERROR
;

220 } ià(!
	`b¥_¼u±_is_v®id_veùÜ
(
veùÜ
)) {

221  
RTEMS_INVALID_ID
;

222 } ià(
hªdËr
 =ð
NULL
) {

223  
RTEMS_INVALID_ADDRESS
;

224 } ià(
	`¹ems_¼u±_is__´og»ss
()) {

225  
RTEMS_CALLED_FROM_ISR
;

229 
	`b¥_¼u±_lock
();

232 
dex
 = 
	`b¥_¼u±_hªdËr_dex
(
veùÜ
);

235 
hd
 = &
b¥_¼u±_hªdËr_bË
 [
dex
];

237 ià(
	`b¥_¼u±_is_em±y_hªdËr_y
(
hd
)) {

238 ià(
»¶aû
) {

240 
	`b¥_¼u±_uÆock
();

241  
RTEMS_UNSATISFIED
;

248 ià(
	`b¥_¼u±_®loÿ_hªdËr_dex
(
veùÜ
, &
dex
)) {

249 
	`b¥_¼u±_di§bË
(
Ëv
);

250 
b¥_¼u±_hªdËr_bË
 [
dex
].
¬g
 =rg;

251 
	`b¥_¼u±_ãnû
(
ATOMIC_ORDER_RELEASE
);

252 
b¥_¼u±_hªdËr_bË
 [
dex
].
hªdËr
 = handler;

253 #ifdeà
BSP_INTERRUPT_USE_INDEX_TABLE


254 
b¥_¼u±_hªdËr_dex_bË
 [
veùÜ
] = 
dex
;

256 
	`b¥_¼u±_abË
(
Ëv
);

257 
b¥_¼u±_hªdËr_bË
 [
dex
].
fo
 = info;

260 
	`b¥_¼u±_uÆock
();

261  
RTEMS_NO_MEMORY
;

265 
abË_veùÜ
 = 
ue
;

267 
b¥_¼u±_hªdËr_y
 *
cu¼t
 = 
hd
;

268 
b¥_¼u±_hªdËr_y
 *

 = 
NULL
;

269 
b¥_¼u±_hªdËr_y
 *
m©ch
 = 
NULL
;

273 !
»¶aû


274 && (
	`RTEMS_INTERRUPT_IS_UNIQUE
(
ÝtiÚs
)

275 || 
	`b¥_¼u±_is_hªdËr_unique
(
dex
))

281 
	`b¥_¼u±_uÆock
();

282  
RTEMS_RESOURCE_IN_USE
;

291 
m©ch
 =ð
NULL


292 && (
cu¼t
->
hªdËr
 =ðhªdË¸|| 
»¶aû
)

293 && 
cu¼t
->
¬g
 ==rg

295 
m©ch
 = 
cu¼t
;

297 

 = 
cu¼t
;

298 
cu¼t
 = cu¼t->
Ãxt
;

299 } 
cu¼t
 !ð
NULL
);

301 ià(
»¶aû
) {

303 ià(
m©ch
 =ð
NULL
) {

304 
	`b¥_¼u±_uÆock
();

305  
RTEMS_UNSATISFIED
;

309 
cu¼t
 = 
m©ch
;

312 ià(
m©ch
 !ð
NULL
) {

314 
	`b¥_¼u±_uÆock
();

315  
RTEMS_TOO_MANY
;

319 
cu¼t
 = 
	`b¥_¼u±_®loÿ_hªdËr_y
();

320 ià(
cu¼t
 =ð
NULL
) {

322 
	`b¥_¼u±_uÆock
();

323  
RTEMS_NO_MEMORY
;

328 
cu¼t
->
hªdËr
 = handler;

329 
cu¼t
->
fo
 = info;

331 ià(!
»¶aû
) {

333 
cu¼t
->
¬g
 =rg;

334 
cu¼t
->
Ãxt
 = 
NULL
;

337 
	`b¥_¼u±_di§bË
(
Ëv
);

338 
	`b¥_¼u±_ãnû
(
ATOMIC_ORDER_RELEASE
);

339 

->
Ãxt
 = 
cu¼t
;

340 
	`b¥_¼u±_abË
(
Ëv
);

345 
	`b¥_¼u±_£t_hªdËr_unique
(
dex
, 
	`RTEMS_INTERRUPT_IS_UNIQUE
(
ÝtiÚs
));

348 ià(
abË_veùÜ
) {

349 
sc
 = 
	`b¥_¼u±_veùÜ_abË
(
veùÜ
);

350 ià(
sc
 !ð
RTEMS_SUCCESSFUL
) {

351 
	`b¥_¼u±_uÆock
();

352  
sc
;

357 
	`b¥_¼u±_uÆock
();

359  
RTEMS_SUCCESSFUL
;

360 
	}
}

372 
¹ems_¡©us_code
 
	$b¥_¼u±_hªdËr_»move
(

373 
¹ems_veùÜ_numb
 
veùÜ
,

374 
¹ems_¼u±_hªdËr
 
hªdËr
,

375 *
¬g


378 
¹ems_¡©us_code
 
sc
 = 
RTEMS_SUCCESSFUL
;

379 
¹ems_¼u±_Ëv
 
Ëv
;

380 
¹ems_veùÜ_numb
 
dex
 = 0;

381 
b¥_¼u±_hªdËr_y
 *
hd
 = 
NULL
;

382 
b¥_¼u±_hªdËr_y
 *
cu¼t
 = 
NULL
;

383 
b¥_¼u±_hªdËr_y
 *
´evious
 = 
NULL
;

384 
b¥_¼u±_hªdËr_y
 *
m©ch
 = 
NULL
;

387 ià(!
	`b¥_¼u±_is_lized
()) {

388  
RTEMS_INTERNAL_ERROR
;

389 } ià(!
	`b¥_¼u±_is_v®id_veùÜ
(
veùÜ
)) {

390  
RTEMS_INVALID_ID
;

391 } ià(
hªdËr
 =ð
NULL
) {

392  
RTEMS_INVALID_ADDRESS
;

393 } ià(
	`¹ems_¼u±_is__´og»ss
()) {

394  
RTEMS_CALLED_FROM_ISR
;

398 
	`b¥_¼u±_lock
();

401 
dex
 = 
	`b¥_¼u±_hªdËr_dex
(
veùÜ
);

404 
hd
 = &
b¥_¼u±_hªdËr_bË
 [
dex
];

407 
cu¼t
 = 
hd
;

409 ià(
cu¼t
->
hªdËr
 =ðhªdË¸&& cu¼t->
¬g
 ==rg) {

410 
m©ch
 = 
cu¼t
;

413 
´evious
 = 
cu¼t
;

414 
cu¼t
 = cu¼t->
Ãxt
;

415 } 
cu¼t
 !ð
NULL
);

418 ià(
m©ch
 !ð
NULL
) {

419 ià(
m©ch
->
Ãxt
 !ð
NULL
) {

425 
cu¼t
 = 
m©ch
->
Ãxt
;

427 
	`b¥_¼u±_di§bË
(
Ëv
);

428 #ifdeà
RTEMS_SMP


429 
m©ch
->
hªdËr
 = 
b¥_¼u±_hªdËr_do_nÙhg
;

430 
	`b¥_¼u±_ãnû
(
ATOMIC_ORDER_RELEASE
);

432 
m©ch
->
¬g
 = 
cu¼t
->arg;

433 
	`b¥_¼u±_ãnû
(
ATOMIC_ORDER_RELEASE
);

434 
m©ch
->
hªdËr
 = 
cu¼t
->handler;

435 
m©ch
->
fo
 = 
cu¼t
->info;

436 
m©ch
->
Ãxt
 = 
cu¼t
->next;

437 
	`b¥_¼u±_abË
(
Ëv
);

439 
	`b¥_¼u±_ä_hªdËr_y
(
cu¼t
);

440 } ià(
m©ch
 =ð
hd
) {

449 
sc
 = 
	`b¥_¼u±_veùÜ_di§bË
(
veùÜ
);

452 
	`b¥_¼u±_di§bË
(
Ëv
);

453 
	`b¥_¼u±_þr_hªdËr_y
(
hd
, 
veùÜ
);

454 #ifdeà
BSP_INTERRUPT_USE_INDEX_TABLE


455 
b¥_¼u±_hªdËr_dex_bË
 [
veùÜ
] = 0;

457 
	`b¥_¼u±_abË
(
Ëv
);

460 
	`b¥_¼u±_£t_hªdËr_unique
(
dex
, 
çl£
);

463 ià(
sc
 !ð
RTEMS_SUCCESSFUL
) {

464 
	`b¥_¼u±_uÆock
();

465  
sc
;

472 
	`b¥_¼u±_di§bË
(
Ëv
);

473 
´evious
->
Ãxt
 = 
NULL
;

474 
	`b¥_¼u±_ãnû
(
ATOMIC_ORDER_RELEASE
);

475 
	`b¥_¼u±_abË
(
Ëv
);

477 
	`b¥_¼u±_ä_hªdËr_y
(
m©ch
);

481 
	`b¥_¼u±_uÆock
();

482  
RTEMS_UNSATISFIED
;

486 
	`b¥_¼u±_uÆock
();

488  
RTEMS_SUCCESSFUL
;

489 
	}
}

501 
¹ems_¡©us_code
 
	$b¥_¼u±_hªdËr_©e
(

502 
¹ems_veùÜ_numb
 
veùÜ
,

503 
¹ems_¼u±_³r_hªdËr_route
 
route
,

504 *
¬g


507 
b¥_¼u±_hªdËr_y
 *
cu¼t
 = 
NULL
;

508 
¹ems_ÝtiÚ
 
ÝtiÚs
 = 0;

509 
¹ems_veùÜ_numb
 
dex
 = 0;

512 ià(!
	`b¥_¼u±_is_lized
()) {

513  
RTEMS_INTERNAL_ERROR
;

514 } ià(!
	`b¥_¼u±_is_v®id_veùÜ
(
veùÜ
)) {

515  
RTEMS_INVALID_ID
;

516 } ià(
	`¹ems_¼u±_is__´og»ss
()) {

517  
RTEMS_CALLED_FROM_ISR
;

521 
	`b¥_¼u±_lock
();

524 
dex
 = 
	`b¥_¼u±_hªdËr_dex
(
veùÜ
);

525 
cu¼t
 = &
b¥_¼u±_hªdËr_bË
 [
dex
];

526 ià(!
	`b¥_¼u±_is_em±y_hªdËr_y
(
cu¼t
)) {

528 
ÝtiÚs
 = 
	`b¥_¼u±_is_hªdËr_unique
(
dex
) ?

529 
RTEMS_INTERRUPT_UNIQUE
 : 
RTEMS_INTERRUPT_SHARED
;

530 
	`route
(
¬g
, 
cu¼t
->
fo
, 
ÝtiÚs
, cu¼t->
hªdËr
, current->arg);

531 
cu¼t
 = cu¼t->
Ãxt
;

532 } 
cu¼t
 !ð
NULL
);

536 
	`b¥_¼u±_uÆock
();

538  
RTEMS_SUCCESSFUL
;

539 
	}
}

541 
¹ems_¡©us_code
 
	$¹ems_¼u±_hªdËr_¡®l
(

542 
¹ems_veùÜ_numb
 
veùÜ
,

543 cÚ¡ *
fo
,

544 
¹ems_ÝtiÚ
 
ÝtiÚs
,

545 
¹ems_¼u±_hªdËr
 
hªdËr
,

546 *
¬g


549  
	`b¥_¼u±_hªdËr_¡®l
(
veùÜ
, 
fo
, 
ÝtiÚs
, 
hªdËr
, 
¬g
);

550 
	}
}

552 
¹ems_¡©us_code
 
	$¹ems_¼u±_hªdËr_»move
(

553 
¹ems_veùÜ_numb
 
veùÜ
,

554 
¹ems_¼u±_hªdËr
 
hªdËr
,

555 *
¬g


558  
	`b¥_¼u±_hªdËr_»move
(
veùÜ
, 
hªdËr
, 
¬g
);

559 
	}
}

561 
¹ems_¡©us_code
 
	$¹ems_¼u±_hªdËr_©e
(

562 
¹ems_veùÜ_numb
 
veùÜ
,

563 
¹ems_¼u±_³r_hªdËr_route
 
route
,

564 *
¬g


567  
	`b¥_¼u±_hªdËr_©e
(
veùÜ
, 
route
, 
¬g
);

568 
	}
}

	@src/lib/libbsp/shared/src/irq-info.c

22 
	~<y³s.h
>

24 
	~<b¥/q-gic.h
>

25 
	~<b¥/q-fo.h
>

28 *
	mcÚxt
;

29 
¹ems_´tk_¶ug_t
 
	m´t
;

30 
¹ems_veùÜ_numb
 
	mveùÜ
;

31 } 
	tb¥_¼u±_»pÜt_y
;

33 
	$b¥_¼u±_»pÜt_³r_hªdËr_route
(

34 *
¬g
,

35 cÚ¡ *
fo
,

36 
¹ems_ÝtiÚ
 
ÝtiÚs
,

37 
¹ems_¼u±_hªdËr
 
hªdËr
,

38 *
hªdËr_¬g


41 
b¥_¼u±_»pÜt_y
 *
e
 = (b¥_¼u±_»pÜt_y *è
¬g
;

42 cÚ¡ *
Ýt
 = 
ÝtiÚs
 =ð
RTEMS_INTERRUPT_UNIQUE
 ? "UNIQUE" : "SHARED";

44 
e
->
	`´t
(

45 
e
->
cÚxt
,

46 "%7" 
PRIu32
 " | %-32s | %7s | %010p | %010p\n",

47 
e
->
veùÜ
,

48 
fo
,

49 
Ýt
,

50 
hªdËr
,

51 
hªdËr_¬g


53 
	}
}

55 
	$b¥_¼u±_»pÜt_wh_¶ug
(

56 *
cÚxt
,

57 
¹ems_´tk_¶ug_t
 
´t


60 
¹ems_veùÜ_numb
 
v
 = 0;

61 
b¥_¼u±_»pÜt_y
 
e
 = {

62 .
cÚxt
 = context,

63 .
´t
 =rint,

64 .
veùÜ
 = 0

67 
	`´t
(

68 
cÚxt
,

76 
v
 = 
BSP_INTERRUPT_VECTOR_MIN
; v <ð
BSP_INTERRUPT_VECTOR_MAX
; ++v) {

77 
e
.
veùÜ
 = 
v
;

78 
	`¹ems_¼u±_hªdËr_©e
(

79 
v
,

80 
b¥_¼u±_»pÜt_³r_hªdËr_route
,

81 &
e


85 
	`´t
(

86 
cÚxt
,

89 
	}
}

91 
	$b¥_¼u±_»pÜt
()

93 
	`b¥_¼u±_»pÜt_wh_¶ug
(
NULL
, 
´tk_¶ug
);

94 
	}
}

	@src/lib/libbsp/shared/src/irq-legacy.c

22 
	~<¡rg.h
>

24 
	#BSP_SHARED_HANDLER_SUPPORT


	)

26 
	~<¹ems.h
>

27 
	~<¹ems/q.h
>

29 
	~<b¥/q-gic.h
>

34 
	$BSP_g_cu¼t_¹ems_q_hªdËr
(
¹ems_q_cÚÃù_d©a
 *
cd
)

36 
	`mem£t
(
cd
, 0, (*cd));

39 
	}
}

44 
	$BSP_¡®l_¹ems_q_hªdËr
(cÚ¡ 
¹ems_q_cÚÃù_d©a
 *
cd
)

46 
¹ems_¡©us_code
 
sc
 = 
RTEMS_SUCCESSFUL
;

48 
sc
 = 
	`¹ems_¼u±_hªdËr_¡®l
(

49 
cd
->
Çme
,

51 
RTEMS_INTERRUPT_UNIQUE
,

52 
cd
->
hdl
,

53 
cd
->
hªdË


55 ià(
sc
 !ð
RTEMS_SUCCESSFUL
) {

59 ià(
cd
->
Ú
 !ð
NULL
) {

60 
cd
->
	`Ú
(cd);

64 
	}
}

69 
	$BSP_¡®l_¹ems_sh¬ed_q_hªdËr
(cÚ¡ 
¹ems_q_cÚÃù_d©a
 *
cd
)

71 
¹ems_¡©us_code
 
sc
 = 
RTEMS_SUCCESSFUL
;

73 
sc
 = 
	`¹ems_¼u±_hªdËr_¡®l
(

74 
cd
->
Çme
,

76 
RTEMS_INTERRUPT_SHARED
,

77 
cd
->
hdl
,

78 
cd
->
hªdË


80 ià(
sc
 !ð
RTEMS_SUCCESSFUL
) {

84 ià(
cd
->
Ú
 !ð
NULL
) {

85 (*
cd
->
Ú
)(cd);

89 
	}
}

94 
	$BSP_»move_¹ems_q_hªdËr
(cÚ¡ 
¹ems_q_cÚÃù_d©a
 *
cd
)

96 
¹ems_¡©us_code
 
sc
 = 
RTEMS_SUCCESSFUL
;

98 ià(
cd
->
off
 !ð
NULL
) {

99 (*
cd
->
off
)(cd);

102 
sc
 = 
	`¹ems_¼u±_hªdËr_»move
(
cd
->
Çme
, cd->
hdl
, cd->
hªdË
);

103 ià(
sc
 !ð
RTEMS_SUCCESSFUL
) {

108 
	}
}

113 
	$BSP_¹ems_q_mngt_£t
(
¹ems_q_glob®_£gs
 *
cÚfig
)

116 
	}
}

121 
	$BSP_¹ems_q_mngt_g
(
¹ems_q_glob®_£gs
 **
cÚfig
)

123 *
cÚfig
 = 
NULL
;

125 
	}
}

	@src/lib/libbsp/shared/src/irq-server.c

23 
	~<¡dlib.h
>

25 
	~<¹ems.h
>

26 
	~<¹ems/cha.h
>

28 
	~<b¥/q-gic.h
>

30 
	#BSP_INTERRUPT_EVENT
 
RTEMS_EVENT_13


	)

32 
RTEMS_INTERRUPT_LOCK_DEFINE
(

34 
b¥_¼u±_£rv_lock
,

38 
	sb¥_¼u±_£rv_y
 {

39 
¹ems_cha_node
 
	mnode
;

40 
¹ems_veùÜ_numb
 
	mveùÜ
;

41 
¹ems_¼u±_hªdËr
 
	mhªdËr
;

42 *
	m¬g
;

43 } 
	tb¥_¼u±_£rv_y
;

45 
¹ems_id
 
	gb¥_¼u±_£rv_id
 = 
RTEMS_ID_NONE
;

47 
RTEMS_CHAIN_DEFINE_EMPTY
(
b¥_¼u±_£rv_cha
);

49 
¹ems_¡©us_code
 
	$b¥_¼u±_£rv_is_lized
()

51 ià(
b¥_¼u±_£rv_id
 !ð
RTEMS_ID_NONE
) {

52  
RTEMS_SUCCESSFUL
;

54  
RTEMS_INCORRECT_STATE
;

56 
	}
}

58 
	gb¥_¼u±_£rv_rÜs
;

60 
	$b¥_¼u±_£rv_igg
(*
¬g
)

62 
b¥_¼u±_£rv_y
 *
e
 = 
¬g
;

64 
	`b¥_¼u±_veùÜ_di§bË
(
e
->
veùÜ
);

66 ià(
e
->
node
.
Ãxt
 =ð
NULL
) {

67 
¹ems_¼u±_lock_cÚxt
 
lock_cÚxt
;

69 
	`¹ems_¼u±_lock_acque
(&
b¥_¼u±_£rv_lock
, &
lock_cÚxt
);

70 
	`¹ems_cha_­³nd_uÅrÙeùed
(&
b¥_¼u±_£rv_cha
, &
e
->
node
);

71 
	`¹ems_¼u±_lock_»Ëa£
(&
b¥_¼u±_£rv_lock
, &
lock_cÚxt
);

73 ++
b¥_¼u±_£rv_rÜs
;

76 
	`¹ems_evt_£nd
(
b¥_¼u±_£rv_id
, 
BSP_INTERRUPT_EVENT
);

77 
	}
}

79 
b¥_¼u±_£rv_y
 *
	$b¥_¼u±_£rv_g_y
()

81 
¹ems_¼u±_lock_cÚxt
 
lock_cÚxt
;

82 
b¥_¼u±_£rv_y
 *
e
;

84 
	`¹ems_¼u±_lock_acque
(&
b¥_¼u±_£rv_lock
, &
lock_cÚxt
);

86 
e
 = (
b¥_¼u±_£rv_y
 *)

87 
	`¹ems_cha_g_uÅrÙeùed
(&
b¥_¼u±_£rv_cha
);

88 ià(
e
 !ð
NULL
) {

89 
e
->
node
.
Ãxt
 = 
NULL
;

92 
	`¹ems_¼u±_lock_»Ëa£
(&
b¥_¼u±_£rv_lock
, &
lock_cÚxt
);

94  
e
;

95 
	}
}

97 
	$b¥_¼u±_£rv_sk
(
¹ems_sk_¬gumt
 
¬g
)

99 
¹ems_¡©us_code
 
sc
 = 
RTEMS_SUCCESSFUL
;

101 
ue
) {

102 
¹ems_evt_£t
 
evts
 = 0;

103 
b¥_¼u±_£rv_y
 *
e
 = 
NULL
;

105 
sc
 = 
	`¹ems_evt_»ûive
(

106 
BSP_INTERRUPT_EVENT
,

107 
RTEMS_EVENT_ALL
 | 
RTEMS_WAIT
,

108 
RTEMS_NO_TIMEOUT
,

109 &
evts


111 ià(
sc
 !ð
RTEMS_SUCCESSFUL
) {

115 (
e
 = 
	`b¥_¼u±_£rv_g_y
()è!ð
NULL
) {

116 (*
e
->
hªdËr
)Ó->
¬g
);

118 
	`b¥_¼u±_veùÜ_abË
(
e
->
veùÜ
);

122 
	`¹ems_sk_de
(
RTEMS_SELF
);

123 
	}
}

126 
¹ems_¼u±_hªdËr
 
	mhªdËr
;

127 *
	m¬g
;

128 
b¥_¼u±_£rv_y
 *
	my
;

129 } 
	tb¥_¼u±_£rv_©e_y
;

131 
	$b¥_¼u±_£rv_³r_hªdËr_route
(

132 *
©e_¬g
,

133 cÚ¡ *
fo
,

134 
¹ems_ÝtiÚ
 
ÝtiÚs
,

135 
¹ems_¼u±_hªdËr
 
hªdËr
,

136 *
hªdËr_¬g


139 
b¥_¼u±_£rv_©e_y
 *

 = 
©e_¬g
;

140 
b¥_¼u±_£rv_y
 *
e
 = 
hªdËr_¬g
;

142 ià(
hªdËr
 =ð
b¥_¼u±_£rv_igg
) {

143 ià(
e
->
hªdËr
 =ð

->hªdË¸&&->
¬g
 == ie->arg) {

144 

->
y
 = 
e
;

147 
	}
}

149 
¹ems_¡©us_code
 
	$¹ems_¼u±_£rv_hªdËr_¡®l
(

150 
¹ems_id
 
£rv
,

151 
¹ems_veùÜ_numb
 
veùÜ
,

152 cÚ¡ *
fo
,

153 
¹ems_ÝtiÚ
 
ÝtiÚs
,

154 
¹ems_¼u±_hªdËr
 
hªdËr
,

155 *
¬g


158 
¹ems_¡©us_code
 
sc
 = 
RTEMS_SUCCESSFUL
;

159 
b¥_¼u±_£rv_y
 *
e
 = 
NULL
;

161 
sc
 = 
	`b¥_¼u±_£rv_is_lized
();

162 ià(
sc
 !ð
RTEMS_SUCCESSFUL
) {

163  
sc
;

166 ià(
£rv
 !ð
RTEMS_ID_NONE
) {

167  
RTEMS_NOT_IMPLEMENTED
;

170 ià(
	`RTEMS_INTERRUPT_IS_SHARED
(
ÝtiÚs
)) {

171  
RTEMS_NOT_IMPLEMENTED
;

174 
e
 = 
	`ÿÎoc
(1, (*e));

175 ià(
e
 =ð
NULL
) {

176  
RTEMS_NO_MEMORY
;

179 
e
->
veùÜ
 = vector;

180 
e
->
hªdËr
 = handler;

181 
e
->
¬g
 =rg;

183 
sc
 = 
	`¹ems_¼u±_hªdËr_¡®l
(

184 
veùÜ
,

185 
fo
,

186 
ÝtiÚs
,

187 
b¥_¼u±_£rv_igg
,

188 
e


190 ià(
sc
 !ð
RTEMS_SUCCESSFUL
) {

191 
	`ä
(
e
);

193  
sc
;

196  
RTEMS_SUCCESSFUL
;

197 
	}
}

199 
¹ems_¡©us_code
 
	$¹ems_¼u±_£rv_hªdËr_»move
(

200 
¹ems_id
 
£rv
,

201 
¹ems_veùÜ_numb
 
veùÜ
,

202 
¹ems_¼u±_hªdËr
 
hªdËr
,

203 *
¬g


206 
¹ems_¡©us_code
 
sc
 = 
RTEMS_SUCCESSFUL
;

207 
b¥_¼u±_£rv_©e_y
 

 = {

208 .
hªdËr
 = handler,

209 .
¬g
 =rg,

210 .
y
 = 
NULL


213 
sc
 = 
	`b¥_¼u±_£rv_is_lized
();

214 ià(
sc
 !ð
RTEMS_SUCCESSFUL
) {

215  
sc
;

218 ià(
£rv
 !ð
RTEMS_ID_NONE
) {

219  
RTEMS_NOT_IMPLEMENTED
;

223 
sc
 = 
	`¹ems_¼u±_hªdËr_©e
(

224 
veùÜ
,

225 
b¥_¼u±_£rv_³r_hªdËr_route
,

226 &



228 ià(
sc
 !ð
RTEMS_SUCCESSFUL
) {

229  
sc
;

230 } ià(

.
y
 =ð
NULL
) {

231  
RTEMS_INVALID_ID
;

234 
sc
 = 
	`¹ems_¼u±_hªdËr_»move
(

235 
veùÜ
,

236 
b¥_¼u±_£rv_igg
,

237 

.
y


239 ià(
sc
 !ð
RTEMS_SUCCESSFUL
) {

240  
sc
;

243 
	`ä
(

.
y
);

245  
RTEMS_SUCCESSFUL
;

246 
	}
}

248 
¹ems_¡©us_code
 
	$¹ems_¼u±_£rv_lize
(

249 
¹ems_sk_´iÜy
 
´iÜy
,

250 
size_t
 
¡ack_size
,

251 
¹ems_mode
 
modes
,

252 
¹ems_©ibu
 
©ibus
,

253 
¹ems_id
 *
£rv


256 
¹ems_¡©us_code
 
sc
 = 
RTEMS_SUCCESSFUL
;

258 ià(
£rv
 !ð
NULL
) {

259  
RTEMS_NOT_IMPLEMENTED
;

262 
sc
 = 
	`¹ems_sk_ü
(

263 
	`¹ems_bud_Çme
('I', 'R', 'Q', 'S'),

264 
´iÜy
,

265 
¡ack_size
,

266 
modes
,

267 
©ibus
,

268 &
b¥_¼u±_£rv_id


270 ià(
sc
 !ð
RTEMS_SUCCESSFUL
) {

271  
RTEMS_TOO_MANY
;

274 
sc
 = 
	`¹ems_sk_¡¬t
(

275 
b¥_¼u±_£rv_id
,

276 
b¥_¼u±_£rv_sk
,

279 ià(
sc
 !ð
RTEMS_SUCCESSFUL
) {

281 
	`¹ems_sk_de
(
b¥_¼u±_£rv_id
);

282 
b¥_¼u±_£rv_id
 = 
RTEMS_ID_NONE
;

284  
RTEMS_TOO_MANY
;

287  
RTEMS_SUCCESSFUL
;

288 
	}
}

	@src/lib/libbsp/shared/src/irq-shell.c

22 
	~<¡dio.h
>

24 
	~<¹ems/shl.h
>

26 
	~<b¥/q-fo.h
>

28 
	$b¥_¼u±_shl_ma
(
¬gc
, **
¬gv
)

30 
	`b¥_¼u±_»pÜt_wh_¶ug
(
¡dout
, (
¹ems_´tk_¶ug_t
è
årtf
);

33 
	}
}

35 
¹ems_shl_cmd_
 
	gb¥_¼u±_shl_commªd
 = {

36 .
Çme
 = "irq",

37 .
	gu§ge
 = "Prints interrupt information",

38 .
	gtÝic
 = "rtems",

39 .
	gcommªd
 = 
b¥_¼u±_shl_ma
,

40 .
	g®s
 = 
NULL
,

41 .
	gÃxt
 = 
NULL


	@src/lib/libbsp/shared/src/stackalloc.c

23 
	~<b¥/¡ack®loc.h
>

25 
	~<¹ems.h
>

26 
	~<¹ems/scÜe/hpim¶.h
>

27 
	~<¹ems/scÜe/wk¥aû.h
>

29 
	~<b¥/lk-symbÞs.h
>

31 
Hp_CÚÞ
 
	gb¥_¡ack_hp
;

33 
	$b¥_¡ack_®loÿ_
(
size_t
 
¡ack_¥aû_size
)

35 
	`_Hp_Inlize
(

36 &
b¥_¡ack_hp
,

37 
b¥_£ùiÚ_¡ack_beg
,

38 (
u_t
è
b¥_£ùiÚ_¡ack_size
,

39 
CPU_STACK_ALIGNMENT


41 
	}
}

43 *
	$b¥_¡ack_®loÿ
(
size_t
 
size
)

45 *
¡ack
 = 
NULL
;

47 ià(
b¥_¡ack_hp
.
¬_beg
 != 0) {

48 
¡ack
 = 
	`_Hp_AÎoÿ
(&
b¥_¡ack_hp
, 
size
);

51 ià(
¡ack
 =ð
NULL
) {

52 
¡ack
 = 
	`_WÜk¥aû_AÎoÿ
(
size
);

55  
¡ack
;

56 
	}
}

58 
	$b¥_¡ack_ä
(*
¡ack
)

60 
boÞ
 
ok
 = 
	`_Hp_F»e
(&
b¥_¡ack_hp
, 
¡ack
);

62 ià(!
ok
) {

63 
	`_WÜk¥aû_F»e
(
¡ack
);

65 
	}
}

	@src/lib/libbsp/shared/src/uart-output-char.c

23 
	~<¹ems/b¥Io.h
>

25 
	~<b¥/u¬t-ouut-ch¬.h
>

27 
	$u¬t_ouut_¿w
(
c
)

29 (
CONSOLE_LSR
 & 
CONSOLE_LSR_THRE
) == 0) {

33 
CONSOLE_THR
 = 
c
;

34 
	}
}

36 
	$u¬t_ouut
(
c
)

38 ià(
c
 == '\n') {

39 
	`u¬t_ouut_¿w
('\r');

42 
	`u¬t_ouut_¿w
(
c
);

43 
	}
}

45 
	$u¬t_put
()

47 ià((
CONSOLE_LSR
 & 
CONSOLE_LSR_RDR
) != 0) {

48  
CONSOLE_RBR
;

52 
	}
}

54 
BSP_ouut_ch¬_funùiÚ_ty³
 
	gBSP_ouut_ch¬
 = 
u¬t_ouut
;

56 
BSP_pÞlg_gch¬_funùiÚ_ty³
 
	gBSP_pÞl_ch¬
 = 
u¬t_put
;

	@src/lib/libbsp/shared/timerstub.c

9 
	~<b¥.h
>

10 
	~<¹ems/btim.h
>

12 
boÞ
 
	gbchm¬k_tim_fd_avage_ovhd
;

14 
	$bchm¬k_tim_lize
()

16 
	}
}

18 
bchm¬k_tim_t
 
	$bchm¬k_tim_»ad
()

20 ià(
bchm¬k_tim_fd_avage_ovhd
)

23 
	}
}

25 
	$bchm¬k_tim_di§bË_subaùg_avage_ovhd
(

26 
boÞ
 
fd_æag


29 
bchm¬k_tim_fd_avage_ovhd
 = 
fd_æag
;

30 
	}
}

	@src/lib/libbsp/shared/tod.c

11 
	~<¹ems.h
>

12 
	~<¹ems/¹c.h
>

13 
	~<¹ems/tod.h
>

14 
	~<¹ems/libio.h
>

16 
	~<libch/¹c.h
>

21 
size_t
 
RTC_CouÁ
;

22 
¹ems_deviû_mÜ_numb
 
RTC_MÜ
;

24 
	gRTC_P»£Á
;

26 
£tRlTimeToRTEMS
();

33 
¹ems_deviû_driv
 
	$¹c_lize
(

34 
¹ems_deviû_majÜ_numb
 
majÜ
,

35 
¹ems_deviû_mÜ_numb
 
mÜ_¬g
,

36 *
¬g


39 
¹ems_deviû_mÜ_numb
 
mÜ
;

40 
¹ems_¡©us_code
 
¡©us
;

42 
mÜ
=0; mÜ < 
RTC_CouÁ
 ; minor++) {

48 ià(
RTC_TabË
[
mÜ
].
deviûProbe
 && RTC_TabË[mÜ].
	`deviûProbe
(minor)) {

52 
RTC_MÜ
 = 
mÜ
;

53 
RTC_P»£Á
 = 1;

58 iàÐ!
RTC_P»£Á
 ) {

63  
RTEMS_INVALID_NUMBER
;

69 
¡©us
 = 
	`¹ems_io_»gi¡_Çme
Ð
RTC_DEVICE_NAME
, 
majÜ
, 
RTC_MÜ
 );

70 ià(
¡©us
 !ð
RTEMS_SUCCESSFUL
) {

71 
	`¹ems_çl_rÜ_occu¼ed
(
¡©us
);

74 
RTC_TabË
[
mÜ
].
pDeviûFns
->
	`deviûInlize
Ð
RTC_MÜ
 );

79  
mÜ
++ ; mÜ<
RTC_CouÁ
 ; minor++) {

85 ià(
RTC_TabË
[
mÜ
].
deviûProbe
 && RTC_TabË[mÜ].
	`deviûProbe
(minor)) {

86 
¡©us
 = 
	`¹ems_io_»gi¡_Çme
(

87 
RTC_TabË
[
mÜ
].
sDeviûName
,

88 
majÜ
,

89 
mÜ
 );

90 ià(
¡©us
 !ð
RTEMS_SUCCESSFUL
) {

91 
	`¹ems_çl_rÜ_occu¼ed
(
¡©us
);

97 
RTC_TabË
[
mÜ
].
pDeviûFns
->
	`deviûInlize
(minor);

102 
	`£tRlTimeToRTEMS
();

103  
RTEMS_SUCCESSFUL
;

104 
	}
}

106 
¹ems_deviû_driv
 
	$¹c_»ad
(

107 
¹ems_deviû_majÜ_numb
 
majÜ
,

108 
¹ems_deviû_mÜ_numb
 
mÜ
,

109 *
¬g


112 
rv
 = 0;

113 
¹ems_libio_rw_¬gs_t
 *
rw
 = 
¬g
;

114 
¹ems_time_of_day
 *
tod
 = (¹ems_time_of_day *è
rw
->
bufãr
;

116 
rw
->
off£t
 = 0;

117 
rw
->
bys_moved
 = 0;

119 ià(!
RTC_P»£Á
) {

120  
RTEMS_NOT_CONFIGURED
;

123 ià(
rw
->
couÁ
 !ðÐ
¹ems_time_of_day
)) {

124  
RTEMS_INVALID_SIZE
;

127 
rv
 = 
RTC_TabË
 [
RTC_MÜ
].
pDeviûFns
->
	`deviûGTime
(

128 
RTC_MÜ
,

129 
tod


131 ià(
rv
 != 0) {

132  
RTEMS_IO_ERROR
;

135 
rw
->
bys_moved
 =w->
couÁ
;

137  
RTEMS_SUCCESSFUL
;

138 
	}
}

140 
¹ems_deviû_driv
 
	$¹c_wre
(

141 
¹ems_deviû_majÜ_numb
 
majÜ
,

142 
¹ems_deviû_mÜ_numb
 
mÜ
,

143 *
¬g


146 
rv
 = 0;

147 
¹ems_libio_rw_¬gs_t
 *
rw
 = 
¬g
;

148 cÚ¡ 
¹ems_time_of_day
 *
tod
 = (cÚ¡ms_time_of_day *è
rw
->
bufãr
;

150 
rw
->
off£t
 = 0;

151 
rw
->
bys_moved
 = 0;

153 ià(!
RTC_P»£Á
) {

154  
RTEMS_NOT_CONFIGURED
;

157 ià(
rw
->
couÁ
 !ðÐ
¹ems_time_of_day
)) {

158  
RTEMS_INVALID_SIZE
;

161 
rv
 = 
RTC_TabË
 [
RTC_MÜ
].
pDeviûFns
->
	`deviûSTime
(

162 
RTC_MÜ
,

163 
tod


165 ià(
rv
 != 0) {

166  
RTEMS_IO_ERROR
;

169 
rw
->
bys_moved
 =w->
couÁ
;

171  
RTEMS_SUCCESSFUL
;

172 
	}
}

174 
¹ems_deviû_driv
 
	$¹c_Ý
(

175 
¹ems_deviû_majÜ_numb
 
majÜ
,

176 
¹ems_deviû_mÜ_numb
 
mÜ
,

177 *
¬g


180  
RTEMS_SUCCESSFUL
;

181 
	}
}

183 
¹ems_deviû_driv
 
	$¹c_þo£
(

184 
¹ems_deviû_majÜ_numb
 
majÜ
,

185 
¹ems_deviû_mÜ_numb
 
mÜ
,

186 *
¬g


189  
RTEMS_SUCCESSFUL
;

190 
	}
}

192 
¹ems_deviû_driv
 
	$¹c_cÚÞ
(

193 
¹ems_deviû_majÜ_numb
 
majÜ
,

194 
¹ems_deviû_mÜ_numb
 
mÜ
,

195 *
¬g


198  
RTEMS_NOT_IMPLEMENTED
;

199 
	}
}

204 
	$£tRlTimeToRTEMS
()

206 
¹ems_time_of_day
 
¹c_tod
;

208 ià(!
RTC_P»£Á
)

211 
RTC_TabË
[
RTC_MÜ
].
pDeviûFns
->
	`deviûGTime
(RTC_MÜ, &
¹c_tod
);

212 
	`¹ems_þock_£t
Ð&
¹c_tod
 );

213 
	}
}

220 
	$£tRlTimeFromRTEMS
()

222 
¹ems_time_of_day
 
¹ems_tod
;

224 ià(!
RTC_P»£Á
)

227 
	`¹ems_þock_g_tod
Ð&
¹ems_tod
 );

228 
RTC_TabË
[
RTC_MÜ
].
pDeviûFns
->
	`deviûSTime
(RTC_MÜ, &
¹ems_tod
);

229 
	}
}

236 
	$gRlTime
(

237 
¹ems_time_of_day
 *
tod


240 ià(!
RTC_P»£Á
)

243 
RTC_TabË
[
RTC_MÜ
].
pDeviûFns
->
	`deviûGTime
(RTC_MÜ, 
tod
);

244 
	}
}

251 
	$£tRlTime
(

252 cÚ¡ 
¹ems_time_of_day
 *
tod


255 ià(!
RTC_P»£Á
)

258 iàÐ!
	`_TOD_V®id©e
(
tod
) )

261 
RTC_TabË
[
RTC_MÜ
].
pDeviûFns
->
	`deviûSTime
(RTC_MÜ, 
tod
);

263 
	}
}

271 
	$checkRlTime
()

273 
¹ems_time_of_day
 
¹ems_tod
;

274 
¹ems_time_of_day
 
¹c_tod
;

275 
ut32_t
 
¹ems_time
;

276 
ut32_t
 
¹c_time
;

278 ià(!
RTC_P»£Á
)

281 
	`¹ems_þock_g_tod
Ð&
¹ems_tod
 );

282 
RTC_TabË
[
RTC_MÜ
].
pDeviûFns
->
	`deviûGTime
(RTC_MÜ, &
¹c_tod
);

284 
¹ems_time
 = 
	`_TOD_To_£cÚds
Ð&
¹ems_tod
 );

285 
¹c_time
 = 
	`_TOD_To_£cÚds
Ð&
¹c_tod
 );

287  
¹ems_time
 - 
¹c_time
;

288 
	}
}

	@src/lib/libbsp/shared/umon/cli.h

39 #iâdeà
_þi_h


40 
	#_þi_h


	)

42 #ifdeà
__ýlu¥lus


54 
	smÚCommªd
 {

55 *
Çme
;

56 (*
func
)(,**);

57 **
h±xt
;

58 
æags
;

62 #ifdeà
__ýlu¥lus


69 
	#CMDFLAG_NOMONRC
 1

	)

73 #iâdeà
CMDLINESIZE


74 
	#CMDLINESIZE
 128

	)

79 
	#ARGCNT
 24

	)

114 
	#CMD_SUCCESS
 0

	)

115 
	#CMD_FAILURE
 -1

	)

116 
	#CMD_PARAM_ERROR
 -2

	)

117 
	#CMD_LINE_ERROR
 -3

	)

118 
	#CMD_ULVL_DENIED
 -4

	)

119 
	#CMD_NOT_FOUND
 -5

	)

120 
	#CMD_MONRC_DENIED
 -6

	)

	@src/lib/libbsp/shared/umon/doxygen.h

	@src/lib/libbsp/shared/umon/monlib.c

46 
	~<umÚ/mÚlib.h
>

48 (*
_tfs£ek
)(,,);

49 (*
_tfsgle
)(,*,);

50 (*
_tfsmod
)(*,*,,);

51 (*
_tfs
)();

52 (*
_tf§dd
)(*,*,*,*,);

53 (*
_tfsuÆk
)(*);

54 (*
_tf¤un
)(**,);

55 (*
_tf¤d
)(,*,);

56 (*
_tfswre
)(,*,);

57 (*
_tfsÝ
)(*,,*);

58 (*
_tfsþo£
)(,*);

59 (*
_´tf
)(

61 (*
_ýrtf
)(

63 (*
_¥rtf
)(

65 (*
_mÚ»¡¬t
)();

66 (*
_½utch¬
)(
c
);

67 (*
_gch¬
)();

68 (*
_gÙach¬
)();

69 (*
_gbys
)(*,,);

70 (*
_addcommªd
)(
mÚCommªd
 *,*);

71 (*
_docommªd
)(*,);

72 (*
_gle
)(*,,);

73 (*
_tfsf¡©
)(*,
tfshdr
 *);

74 (*
_tf£of
)();

75 (*
_decom´ess
)(*,,*);

76 (*
_tf¡runÿ
)(,);

77 (*
_h³xnd
)(*,);

78 (*
_tf¦k
)(*,*);

79 (*
_pcicfgwre
)(,,,,,);

80 (*
_i2cwre
)(,,*,);

81 (*
_i2üd
)(,,*,);

82 (*
_æashwre
)(*,*,);

83 (*
_æasha£
)();

84 (*
_æashfo
)(,*,**);

85 (*
_æashovride
)(*,,);

86 (*
_£nd
)(*,);

87 (*
_»cv
)(*,);

88 (*
_´kt
)(*,,);

89 (*
_£nv
)(*,*);

90 (*
_w©chdog
)();

91 (*
_timeofday
)(,*);

92 (*
_mÚtim
)(
cmd
, *
¬g
);

94 *(*
_gv
)(*);

95 *(*
_vsiÚ
)();

96 *(*
_gvp
)();

97 #ifdeà
MALLOC_DEBUG


98 *(*
_m®loc
)(,*,);

99 *(*
_»®loc
)(*
buf
,,*,);

101 *(*
_m®loc
)();

102 *(*
_»®loc
)(*,);

104 *(*
_gsym
)(*,*,);

106 (*
_t¤e¡Üe
)();

107 (*
_­³x
)();

108 (*
_ä
)(*);

109 (*
_g¬gv
)(*,***);

110 (*
_´of
)(*);

111 (*
_bbc
)(*,);

112 (*
_memaû
)(

114 (*
_­pw¬m¡¬t
)();

115 (*
_mÚday
)();

116 (*
_´tmem
)(*,,);

118 (*
_tfsù¾
)(,,);

119 (*
_tf¡l
)();

120 (*
_pÜtcmd
)(,*);

122 
tfshdr
 *(*
_tf¢ext
)(tfshdr *);

123 
tfshdr
 *(*
_tfs¡©
)(*);

125 (*
_i2cù¾
)(,,,);

126 (*
_pcicfg»ad
)(,,,,);

127 (*
_pciù¾
)(,,,);

128 (*
_üc32
)(*,);

129 (*
_tsoff
)();

130 (*
_assign_hªdËr
)(,,);

132 (*
_xüc16
)(*,);

135 (*
_mÚlock
)();

136 (*
_mÚuÆock
)();

137 (*
_mÚcom
)(,*,*, *);

150 
	#TFS_MONLOCK
 
mÚLock


	)

151 
	#TFS_MONUNLOCK
 
mÚUÆock


	)

156 
	#ENV_MONLOCK
 
mÚLock


	)

157 
	#ENV_MONUNLOCK
 
mÚUÆock


	)

162 
	#CONSOLE_MONLOCK
 
mÚLock


	)

163 
	#CONSOLE_MONUNLOCK
 
mÚUÆock


	)

168 
	#HEAP_MONLOCK
 
mÚLock


	)

169 
	#HEAP_MONUNLOCK
 
mÚUÆock


	)

175 
	#BLOCKING_MONLOCK
 
mÚLock


	)

176 
	#BLOCKING_MONUNLOCK
 
mÚUÆock


	)

181 
	#GENERIC_MONLOCK
 
mÚLock


	)

182 
	#GENERIC_MONUNLOCK
 
mÚUÆock


	)

187 
	`mÚ_memaû
(

188 *
fmt
,

189 
a1
, 
a2
, 
a3
, 
a4
, 
a5
, 
a6
,

190 
a7
, 
a8
, 
a9
, 
a10
, 
a11
, 
a12


192 
	`mÚ_´tf
(

193 *
fmt
,

194 
a1
, 
a2
, 
a3
, 
a4
, 
a5
, 
a6
,

195 
a7
, 
a8
, 
a9
, 
a10
, 
a11
, 
a12


197 
	`mÚ_ýrtf
(

198 *
fmt
,

199 
a1
, 
a2
, 
a3
, 
a4
, 
a5
, 
a6
,

200 
a7
, 
a8
, 
a9
, 
a10
, 
a11
, 
a12


202 
	`mÚ_¥rtf
(

203 *
buf
,

204 *
fmt
,

205 
a1
, 
a2
, 
a3
, 
a4
, 
a5
, 
a6
,

206 
a7
, 
a8
, 
a9
, 
a10
, 
a11
, 
a12


227 
	`mÚCÚÃù
((*
mÚ
)(,*,*,*),

228 (*
lock
)(), (*
uÆock
)())

230 
rc
 = 0;

233 
_mÚlock
 = 
lock
;

234 
_mÚuÆock
 = 
uÆock
;

237 ià(
mÚ
) {

239 
_mÚcom
 = 
mÚ
;

244 
rc
 +ð
	`_mÚcom
(
GETMONFUNC_PUTCHAR
,&
_½utch¬
,0,0);

245 
rc
 +ð
	`_mÚcom
(
GETMONFUNC_GETCHAR
,&
_gch¬
,0,0);

246 
rc
 +ð
	`_mÚcom
(
GETMONFUNC_GOTACHAR
,&
_gÙach¬
,0,0);

247 
rc
 +ð
	`_mÚcom
(
GETMONFUNC_GETBYTES
,&
_gbys
,0,0);

248 
rc
 +ð
	`_mÚcom
(
GETMONFUNC_PRINTF
,&
_´tf
,0,0);

249 
rc
 +ð
	`_mÚcom
(
GETMONFUNC_CPRINTF
,&
_ýrtf
,0,0);

250 
rc
 +ð
	`_mÚcom
(
GETMONFUNC_SPRINTF
,&
_¥rtf
,0,0);

251 
rc
 +ð
	`_mÚcom
(
GETMONFUNC_RESTART
,&
_mÚ»¡¬t
,0,0);

252 
rc
 +ð
	`_mÚcom
(
GETMONFUNC_GETENV
,&
_gv
,0,0);

253 
rc
 +ð
	`_mÚcom
(
GETMONFUNC_SETENV
,&
_£nv
,0,0);

254 
rc
 +ð
	`_mÚcom
(
GETMONFUNC_TFSINIT
,&
_tfs
,0,0);

255 
rc
 +ð
	`_mÚcom
(
GETMONFUNC_TFSADD
,&
_tf§dd
,0,0);

256 
rc
 +ð
	`_mÚcom
(
GETMONFUNC_TFSUNLINK
,&
_tfsuÆk
,0,0);

257 
rc
 +ð
	`_mÚcom
(
GETMONFUNC_TFSRUN
,&
_tf¤un
,0,0);

258 
rc
 +ð
	`_mÚcom
(
GETMONFUNC_TFSNEXT
,&
_tf¢ext
,0,0);

259 
rc
 +ð
	`_mÚcom
(
GETMONFUNC_TFSSTAT
,&
_tfs¡©
,0,0);

260 
rc
 +ð
	`_mÚcom
(
GETMONFUNC_TFSREAD
,&
_tf¤d
,0,0);

261 
rc
 +ð
	`_mÚcom
(
GETMONFUNC_TFSWRITE
,&
_tfswre
,0,0);

262 
rc
 +ð
	`_mÚcom
(
GETMONFUNC_TFSOPEN
,&
_tfsÝ
,0,0);

263 
rc
 +ð
	`_mÚcom
(
GETMONFUNC_TFSCLOSE
,&
_tfsþo£
,0,0);

264 
rc
 +ð
	`_mÚcom
(
GETMONFUNC_TFSSEEK
,&
_tfs£ek
,0,0);

265 
rc
 +ð
	`_mÚcom
(
GETMONFUNC_TFSGETLINE
,&
_tfsgle
,0,0);

266 
rc
 +ð
	`_mÚcom
(
GETMONFUNC_TFSIPMOD
,&
_tfsmod
,0,0);

267 
rc
 +ð
	`_mÚcom
(
GETMONFUNC_TFSCTRL
,&
_tfsù¾
,0,0);

268 
rc
 +ð
	`_mÚcom
(
GETMONFUNC_ADDCOMMAND
,&
_addcommªd
,0,0);

269 
rc
 +ð
	`_mÚcom
(
GETMONFUNC_DOCOMMAND
,&
_docommªd
,0,0);

270 
rc
 +ð
	`_mÚcom
(
GETMONFUNC_GETARGV
,&
_g¬gv
,0,0);

271 
rc
 +ð
	`_mÚcom
(
GETMONFUNC_CRC16
,&
_xüc16
,0,0);

272 
rc
 +ð
	`_mÚcom
(
GETMONFUNC_CRC32
,&
_üc32
,0,0);

273 
rc
 +ð
	`_mÚcom
(
GETMONFUNC_INTSOFF
,&
_tsoff
,0,0);

274 
rc
 +ð
	`_mÚcom
(
GETMONFUNC_INTSRESTORE
,&
_t¤e¡Üe
,0,0);

275 
rc
 +ð
	`_mÚcom
(
GETMONFUNC_APPEXIT
,&
_­³x
,0,0);

276 
rc
 +ð
	`_mÚcom
(
GETMONFUNC_MALLOC
,&
_m®loc
,0,0);

277 
rc
 +ð
	`_mÚcom
(
GETMONFUNC_FREE
,&
_ä
,0,0);

278 
rc
 +ð
	`_mÚcom
(
GETMONFUNC_GETLINE
,&
_gle
,0,0);

279 
rc
 +ð
	`_mÚcom
(
GETMONFUNC_TFSFSTAT
,&
_tfsf¡©
,0,0);

280 
rc
 +ð
	`_mÚcom
(
GETMONFUNC_TFSEOF
,&
_tf£of
,0,0);

281 
rc
 +ð
	`_mÚcom
(
GETMONFUNC_DECOMPRESS
,&
_decom´ess
,0,0);

282 
rc
 +ð
	`_mÚcom
(
GETMONFUNC_TFSTRUNCATE
,&
_tf¡runÿ
,0,0);

283 
rc
 +ð
	`_mÚcom
(
GETMONFUNC_HEAPXTEND
,&
_h³xnd
,0,0);

284 
rc
 +ð
	`_mÚcom
(
GETMONFUNC_PROFILER
,&
_´of
,0,0);

285 
rc
 +ð
	`_mÚcom
(
GETMONFUNC_TFSLINK
,&
_tf¦k
,0,0);

286 
rc
 +ð
	`_mÚcom
(
GETMONFUNC_BBC
,&
_bbc
,0,0);

287 
rc
 +ð
	`_mÚcom
(
GETMONFUNC_MEMTRACE
,&
_memaû
,0,0);

288 
rc
 +ð
	`_mÚcom
(
GETMONFUNC_TFSTELL
,&
_tf¡l
,0,0);

289 
rc
 +ð
	`_mÚcom
(
GETMONFUNC_VERSION
,&
_vsiÚ
,0,0);

290 
rc
 +ð
	`_mÚcom
(
GETMONFUNC_WARMSTART
,&
_­pw¬m¡¬t
,0,0);

291 
rc
 +ð
	`_mÚcom
(
GETMONFUNC_PCICFGREAD
,&
_pcicfg»ad
,0,0);

292 
rc
 +ð
	`_mÚcom
(
GETMONFUNC_PCICFGWRITE
,&
_pcicfgwre
,0,0);

293 
rc
 +ð
	`_mÚcom
(
GETMONFUNC_PCICONTROL
,&
_pciù¾
,0,0);

294 
rc
 +ð
	`_mÚcom
(
GETMONFUNC_I2CREAD
,&
_i2üd
,0,0);

295 
rc
 +ð
	`_mÚcom
(
GETMONFUNC_I2CWRITE
,&
_i2cwre
,0,0);

296 
rc
 +ð
	`_mÚcom
(
GETMONFUNC_I2CCONTROL
,&
_i2cù¾
,0,0);

297 
rc
 +ð
	`_mÚcom
(
GETMONFUNC_MONDELAY
,&
_mÚday
,0,0);

298 
rc
 +ð
	`_mÚcom
(
GETMONFUNC_GETENVP
,&
_gvp
,0,0);

299 
rc
 +ð
	`_mÚcom
(
GETMONFUNC_REALLOC
,&
_»®loc
,0,0);

300 
rc
 +ð
	`_mÚcom
(
GETMONFUNC_SENDENETPKT
,&
_£nd
,0,0);

301 
rc
 +ð
	`_mÚcom
(
GETMONFUNC_RECVENETPKT
,&
_»cv
,0,0);

302 
rc
 +ð
	`_mÚcom
(
GETMONFUNC_GETSYM
,&
_gsym
,0,0);

303 
rc
 +ð
	`_mÚcom
(
GETMONFUNC_PRINTPKT
,&
_´kt
,0,0);

304 
rc
 +ð
	`_mÚcom
(
GETMONFUNC_FLASHWRITE
,&
_æashwre
,0,0);

305 
rc
 +ð
	`_mÚcom
(
GETMONFUNC_FLASHERASE
,&
_æasha£
,0,0);

306 
rc
 +ð
	`_mÚcom
(
GETMONFUNC_FLASHINFO
,&
_æashfo
,0,0);

307 
rc
 +ð
	`_mÚcom
(
GETMONFUNC_ASSIGNHDLR
,&
_assign_hªdËr
,0,0);

308 
rc
 +ð
	`_mÚcom
(
GETMONFUNC_WATCHDOG
,&
_w©chdog
,0,0);

309 
rc
 +ð
	`_mÚcom
(
GETMONFUNC_PRINTMEM
,&
_´tmem
,0,0);

310 
rc
 +ð
	`_mÚcom
(
GETMONFUNC_PORTCMD
,&
_pÜtcmd
,0,0);

311 
rc
 +ð
	`_mÚcom
(
GETMONFUNC_TIMEOFDAY
,&
_timeofday
,0,0);

312 
rc
 +ð
	`_mÚcom
(
GETMONFUNC_TIMER
,&
_mÚtim
,0,0);

313 
rc
 +ð
	`_mÚcom
(
GETMONFUNC_FLASHOVRRD
,&
_æashovride
,0,0);

315 (
rc
);

316 
	}
}

337 
	gignÜock
 = 0;

339 #ià
KEEP_TO_STAY_IN_SYNC_WITH_UPSTREAM_BUT_UNUSED


341 
	$Di§bËMÚLock
()

343 
ignÜock
 = 2;

344 
	}
}

347 
	$EÇbËMÚLock
()

349 
ignÜock
 = 0;

350 
	}
}

363 
	$mÚLock
()

365 ià(
_mÚlock
) {

366 
ignÜock
) {

370 
ignÜock
--;

373 
	`_mÚlock
();

377 
	}
}

380 
	$mÚUÆock
()

382 ià(
_mÚuÆock
) {

383 
ignÜock
) {

387 
ignÜock
--;

389 
	`_mÚuÆock
();

393 
	}
}

396 
	$mÚ_com
(
cmd
, *
¬g1
, *
¬g2
, *
¬g3
)

398 
»t
;

400 
	`GENERIC_MONLOCK
();

401 
»t
 = 
	`_mÚcom
(
cmd
,
¬g1
,
¬g2
,
¬g3
);

402 
	`GENERIC_MONUNLOCK
();

403 (
»t
);

404 
	}
}

407 
	$mÚ_putch¬
(
c
)

409 
»t
;

411 
	`CONSOLE_MONLOCK
();

412 
»t
 = 
	`_½utch¬
(
c
);

413 
	`CONSOLE_MONUNLOCK
();

414 (
»t
);

415 
	}
}

418 
	$mÚ_gch¬
()

420 
»t
;

422 
	`BLOCKING_MONLOCK
();

423 
»t
 = 
	`_gch¬
();

424 
	`BLOCKING_MONUNLOCK
();

425 (
»t
);

426 
	}
}

429 
	$mÚ_gÙach¬
()

431 
»t
;

433 
	`GENERIC_MONLOCK
();

434 
»t
 = 
	`_gÙach¬
();

435 
	`GENERIC_MONUNLOCK
();

436 (
»t
);

437 
	}
}

440 
	$mÚ_gbys
(*
buf
,
út
,
block
)

442 
»t
;

444 
	`BLOCKING_MONLOCK
();

445 
»t
 = 
	`_gbys
(
buf
,
út
,
block
);

446 
	`BLOCKING_MONUNLOCK
();

447 (
»t
);

448 
	}
}

451 
	$mÚ_´tf
(

452 *
fmt
,

453 
a1
, 
a2
, 
a3
, 
a4
, 
a5
, 
a6
,

454 
a7
, 
a8
, 
a9
, 
a10
, 
a11
, 
a12


457 
»t
;

459 
	`CONSOLE_MONLOCK
();

460 
»t
 = 
	`_´tf
(
fmt
,
a1
,
a2
,
a3
,
a4
,
a5
,
a6
,
a7
,
a8
,
a9
,
a10
,
a11
,
a12
);

461 
	`CONSOLE_MONUNLOCK
();

462 (
»t
);

463 
	}
}

466 
	$mÚ_ýrtf
(

467 *
fmt
,

468 
a1
, 
a2
, 
a3
, 
a4
, 
a5
, 
a6
,

469 
a7
, 
a8
, 
a9
, 
a10
, 
a11
, 
a12


472 
»t
;

474 
	`CONSOLE_MONLOCK
();

475 
»t
 = 
	`_ýrtf
(
fmt
,
a1
,
a2
,
a3
,
a4
,
a5
,
a6
,
a7
,
a8
,
a9
,
a10
,
a11
,
a12
);

476 
	`CONSOLE_MONUNLOCK
();

477 (
»t
);

478 
	}
}

481 
	$mÚ_¥rtf
(

482 *
buf
,

483 *
fmt
,

484 
a1
, 
a2
, 
a3
, 
a4
, 
a5
, 
a6
,

485 
a7
, 
a8
, 
a9
, 
a10
, 
a11
, 
a12


488 
»t
;

490 
	`GENERIC_MONLOCK
();

491 
»t
 = 
	`_¥rtf
(
buf
,
fmt
,
a1
,
a2
,
a3
,
a4
,
a5
,
a6
,
a7
,
a8
,
a9
,
a10
,
a11
,
a12
);

492 
	`GENERIC_MONUNLOCK
();

493 (
»t
);

494 
	}
}

497 
	$mÚ_»¡¬t
(
v®
)

499 
»t
;

501 
	`GENERIC_MONLOCK
();

502 
»t
 = 
	`_mÚ»¡¬t
(
v®
);

503 
	`GENERIC_MONUNLOCK
();

504 (
»t
);

505 
	}
}

508 
	$mÚ_gvp
()

510 *
»t
;

512 
	`ENV_MONLOCK
();

513 
»t
 = 
	`_gvp
();

514 
	`ENV_MONUNLOCK
();

515 (
»t
);

516 
	}
}

519 
	$mÚ_gv
(*
Çme
)

521 *
»t
;

523 
	`ENV_MONLOCK
();

524 
»t
 = 
	`_gv
(
Çme
);

525 
	`ENV_MONUNLOCK
();

526 (
»t
);

527 
	}
}

530 
	$mÚ_£nv
(*
Çme
,*
v®
)

532 
»t
;

534 
	`ENV_MONLOCK
();

535 
»t
 = 
	`_£nv
(
Çme
,
v®
);

536 
	`ENV_MONUNLOCK
();

537 (
»t
);

538 
	}
}

541 
	$mÚ_gsym
(*
Çme
,*
buf
, 
bufsize
)

543 *
»t
;

545 
	`ENV_MONLOCK
();

546 
»t
 = 
	`_gsym
(
Çme
,
buf
,
bufsize
);

547 
	`ENV_MONUNLOCK
();

548 (
»t
);

549 
	}
}

552 
	$mÚ_tfs
()

554 
»t
;

556 
	`TFS_MONLOCK
();

557 
»t
 = 
	`_tfs
();

558 
	`TFS_MONUNLOCK
();

559 (
»t
);

560 
	}
}

563 
	$mÚ_tf§dd
(*
Çme
, *
fo
, *
æags
, *
¤c
, 
size
)

565 
»t
;

567 
	`TFS_MONLOCK
();

568 
»t
 = 
	`_tf§dd
(
Çme
,
fo
,
æags
,
¤c
,
size
);

569 
	`TFS_MONUNLOCK
();

570 (
»t
);

571 
	}
}

574 
	$mÚ_tf¦k
(*
¤c
, *
rg
)

576 
»t
;

578 
	`TFS_MONLOCK
();

579 
»t
 = 
	`_tf¦k
(
¤c
,
rg
);

580 
	`TFS_MONUNLOCK
();

581 (
»t
);

582 
	}
}

585 
	$mÚ_tfsuÆk
(*
Çme
)

587 
»t
;

589 
	`TFS_MONLOCK
();

590 
»t
 = 
	`_tfsuÆk
(
Çme
);

591 
	`TFS_MONUNLOCK
();

592 (
»t
);

593 
	}
}

596 
	$mÚ_tf¤un
(**
Çme
,
vbo£
)

598 
»t
;

600 
	`TFS_MONLOCK
();

601 
»t
 = 
	`_tf¤un
(
Çme
,
vbo£
);

602 
	`TFS_MONUNLOCK
();

603 (
»t
);

604 
	}
}

606 
tfshdr
 *

607 
	$mÚ_tf¢ext
(
tfshdr
 *
å
)

609 
tfshdr
 *
»t
;

611 
	`TFS_MONLOCK
();

612 
»t
 = 
	`_tf¢ext
(
å
);

613 
	`TFS_MONUNLOCK
();

614 (
»t
);

615 
	}
}

618 
	$mÚ_tf¡runÿ
(
tfd
, 
Ën
)

620 
»t
;

622 
	`TFS_MONLOCK
();

623 
»t
 = 
	`_tf¡runÿ
(
tfd
,
Ën
);

624 
	`TFS_MONUNLOCK
();

625 (
»t
);

626 
	}
}

629 
	$mÚ_tf£of
(
tfd
)

631 
»t
;

633 
	`TFS_MONLOCK
();

634 
»t
 = 
	`_tf£of
(
tfd
);

635 
	`TFS_MONUNLOCK
();

636 (
»t
);

637 
	}
}

640 
	$mÚ_tfsf¡©
(*
Çme
, 
tfshdr
 *
å
)

642 
»t
;

644 
	`TFS_MONLOCK
();

645 
»t
 = 
	`_tfsf¡©
(
Çme
,
å
);

646 
	`TFS_MONUNLOCK
();

647 (
»t
);

648 
	}
}

650 
tfshdr
 *

651 
	$mÚ_tfs¡©
(*
Çme
)

653 
tfshdr
 *
»t
;

655 
	`TFS_MONLOCK
();

656 
»t
 = 
	`_tfs¡©
(
Çme
);

657 
	`TFS_MONUNLOCK
();

658 (
»t
);

659 
	}
}

662 
	$mÚ_tf¤d
(
fd
, *
buf
, 
út
)

664 
»t
;

666 
	`TFS_MONLOCK
();

667 
»t
 = 
	`_tf¤d
(
fd
,
buf
,
út
);

668 
	`TFS_MONUNLOCK
();

669 (
»t
);

670 
	}
}

673 
	$mÚ_tfswre
(
fd
, *
buf
, 
út
)

675 
»t
;

677 
	`TFS_MONLOCK
();

678 
»t
 = 
	`_tfswre
(
fd
,
buf
,
út
);

679 
	`TFS_MONUNLOCK
();

680 (
»t
);

681 
	}
}

684 
	$mÚ_tfsÝ
(*
fe
,
æagmode
,*
buf
)

686 
»t
;

688 
	`TFS_MONLOCK
();

689 
»t
 = 
	`_tfsÝ
(
fe
,
æagmode
,
buf
);

690 
	`TFS_MONUNLOCK
();

691 (
»t
);

692 
	}
}

695 
	$mÚ_tfsþo£
(
fd
,*
fo
)

697 
»t
;

699 
	`TFS_MONLOCK
();

700 
»t
 = 
	`_tfsþo£
(
fd
,
fo
);

701 
	`TFS_MONUNLOCK
();

702 (
»t
);

703 
	}
}

706 
	$mÚ_tfs£ek
(
fd
, 
off£t
, 
whû
)

708 
»t
;

710 
	`TFS_MONLOCK
();

711 
»t
 = 
	`_tfs£ek
(
fd
,
off£t
,
whû
);

712 
	`TFS_MONUNLOCK
();

713 (
»t
);

714 
	}
}

717 
	$mÚ_tfsgle
(
fd
,*
bp
,
max
)

719 
»t
;

721 
	`TFS_MONLOCK
();

722 
»t
 = 
	`_tfsgle
(
fd
,
bp
,
max
);

723 
	`TFS_MONUNLOCK
();

724 (
»t
);

725 
	}
}

728 
	$mÚ_tfsmod
(*
Çme
,*
buf
,
off£t
,
size
)

730 
»t
;

732 
	`TFS_MONLOCK
();

733 
»t
 = 
	`_tfsmod
(
Çme
,
buf
,
off£t
,
size
);

734 
	`TFS_MONUNLOCK
();

735 (
»t
);

736 
	}
}

739 
	$mÚ_tfsù¾
(
rq¡
,
¬g1
,
¬g2
)

741 
»t
;

743 
	`TFS_MONLOCK
();

744 
»t
 = 
	`_tfsù¾
(
rq¡
,
¬g1
,
¬g2
);

745 
	`TFS_MONUNLOCK
();

746 (
»t
);

747 
	}
}

750 
	$mÚ_tf¡l
(
fd
)

752 
»t
;

754 
	`TFS_MONLOCK
();

755 
»t
 = 
	`_tf¡l
(
fd
);

756 
	`TFS_MONUNLOCK
();

757 (
»t
);

758 
	}
}

761 
	$mÚ_addcommªd
(
mÚCommªd
 *
cmdli¡
, *
cmdlvl
)

763 
»t
;

765 
	`GENERIC_MONLOCK
();

766 
»t
 = 
	`_addcommªd
(
cmdli¡
,
cmdlvl
);

767 
	`GENERIC_MONUNLOCK
();

768 (
»t
);

769 
	}
}

772 
	$mÚ_docommªd
(*
cmdle
,
vbo£
)

774 
»t
;

776 
	`GENERIC_MONLOCK
();

777 
»t
 = 
	`_docommªd
(
cmdle
,
vbo£
);

778 
	`GENERIC_MONUNLOCK
();

779 (
»t
);

780 
	}
}

783 
	$mÚ_g¬gv
(*
¬gc
,***
¬gv
)

785 
	`GENERIC_MONLOCK
();

786 
	`_g¬gv
(
¬gc
,
¬gv
);

787 
	`GENERIC_MONUNLOCK
();

788 
	}
}

791 
	$mÚ_xüc16
(*
buf
,
nbys
)

793 
»t
;

795 
	`GENERIC_MONLOCK
();

796 
»t
 = 
	`_xüc16
((*)
buf
,
nbys
);

797 
	`GENERIC_MONUNLOCK
();

798 (
»t
);

799 
	}
}

802 
	$mÚ_tsoff
()

804 
»t
;

806 
	`GENERIC_MONLOCK
();

807 
»t
 = 
	`_tsoff
();

808 
	`GENERIC_MONUNLOCK
();

809 (
»t
);

810 
	}
}

813 
	$mÚ_t¤e¡Üe
(
m¤
)

815 
	`GENERIC_MONLOCK
();

816 
	`_t¤e¡Üe
(
m¤
);

817 
	`GENERIC_MONUNLOCK
();

818 
	}
}

821 
	$mÚ_­³x
(
v®
)

823 
	`GENERIC_MONLOCK
();

824 
	`_­³x
(
v®
);

825 
	`GENERIC_MONUNLOCK
();

826 
	}
}

828 #ifdeà
MALLOC_DEBUG


830 
	$mÚ_m®loc
(
size
,*
âame
,
æe
)

832 *
»t
;

834 
	`HEAP_MONLOCK
();

835 
»t
 = 
	`_m®loc
(
size
,
âame
,
æe
);

836 
	`HEAP_MONUNLOCK
();

837 (
»t
);

838 
	}
}

841 
	$mÚ_»®loc
(*
buf
, 
size
, *
âame
, 
æe
)

843 *
»t
;

845 
	`HEAP_MONLOCK
();

846 
»t
 = 
	`_»®loc
(
buf
,
size
, 
âame
, 
æe
);

847 
	`HEAP_MONUNLOCK
();

848 (
»t
);

849 
	}
}

852 
	$mÚ_m®loc
(
size
)

854 *
»t
;

856 
	`HEAP_MONLOCK
();

857 
»t
 = 
	`_m®loc
(
size
);

858 
	`HEAP_MONUNLOCK
();

859 (
»t
);

860 
	}
}

863 
	$mÚ_»®loc
(*
buf
, 
size
)

865 *
»t
;

867 
	`HEAP_MONLOCK
();

868 
»t
 = 
	`_»®loc
(
buf
,
size
);

869 
	`HEAP_MONUNLOCK
();

870 (
»t
);

871 
	}
}

875 
	$mÚ_ä
(*
ý
)

877 
	`HEAP_MONLOCK
();

878 
	`_ä
(
ý
);

879 
	`HEAP_MONUNLOCK
();

880 
	}
}

883 
	$mÚ_gle
(*
buf
,
max
,
Ëd
)

885 
»t
;

887 
	`BLOCKING_MONLOCK
();

888 
»t
 = 
	`_gle
(
buf
,
max
,
Ëd
);

889 
	`BLOCKING_MONUNLOCK
();

890 (
»t
);

891 
	}
}

894 
	$mÚ_decom´ess
(*
¤c
,
¤csize
,*
de¡
)

896 
»t
;

898 
	`GENERIC_MONLOCK
();

899 
»t
 = 
	`_decom´ess
(
¤c
,
¤csize
,
de¡
);

900 
	`GENERIC_MONUNLOCK
();

901 (
»t
);

902 
	}
}

905 
	$mÚ_h³xnd
(*
ba£
,
size
)

907 
»t
;

909 
	`GENERIC_MONLOCK
();

910 
»t
 = 
	`_h³xnd
(
ba£
,
size
);

911 
	`GENERIC_MONUNLOCK
();

912 (
»t
);

913 
	}
}

916 
	$mÚ_bbc
(*
fame
, 
lo
)

918 
	`_bbc
(
fame
, 
lo
);

919 
	}
}

922 
	$mÚ_´of
(*
pd©a
)

924 
	`_´of
(
pd©a
);

925 
	}
}

928 
	$mÚ_memaû
(

929 *
fmt
,

930 
a1
, 
a2
, 
a3
, 
a4
, 
a5
, 
a6
,

931 
a7
, 
a8
, 
a9
, 
a10
, 
a11
, 
a12


934 
	`_memaû
(
fmt
,
a1
,
a2
,
a3
,
a4
,
a5
,
a6
,
a7
,
a8
,
a9
,
a10
,
a11
,
a12
);

935 
	}
}

938 
	$mÚ_vsiÚ
()

940 *
»t
;

942 
	`GENERIC_MONLOCK
();

943 
»t
 = 
	`_vsiÚ
();

944 
	`GENERIC_MONUNLOCK
();

945 (
»t
);

946 
	}
}

949 
	$mÚ_w¬m¡¬t
(
mask
)

951 
	`GENERIC_MONLOCK
();

952 
	`_­pw¬m¡¬t
(
mask
);

953 
	`GENERIC_MONUNLOCK
();

954 
	}
}

957 
	$mÚ_pcicfgwre
(
rçû
,
bus
,
dev
,
func
,
»g
,

958 
v®
)

960 
»tv®
;

962 
	`GENERIC_MONLOCK
();

963 
»tv®
 = 
	`_pcicfgwre
(
rçû
,
bus
,
dev
,
func
,
»g
,
v®
);

964 
	`GENERIC_MONUNLOCK
();

965 (
»tv®
);

966 
	}
}

969 
	$mÚ_pcicfg»ad
(
rçû
,
bus
,
dev
, 
func
,
»g
)

971 
»tv®
;

973 
	`GENERIC_MONLOCK
();

974 
»tv®
 = 
	`_pcicfg»ad
(
rçû
,
bus
,
dev
,
func
,
»g
);

975 
	`GENERIC_MONUNLOCK
();

976 (
»tv®
);

977 
	}
}

980 
	$mÚ_pciù¾
(
rçû
, 
cmd
, 
¬g1
, 
¬g2
)

982 
v®
;

984 
	`GENERIC_MONLOCK
();

985 
v®
 = 
	`_pciù¾
(
rçû
,
cmd
,
¬g1
,
¬g2
);

986 
	`GENERIC_MONUNLOCK
();

987 (
v®
);

988 
	}
}

991 
	$mÚ_i2cù¾
(
rçû
, 
cmd
, 
¬g1
, 
¬g2
)

993 
v®
;

995 
	`GENERIC_MONLOCK
();

996 
v®
 = 
	`_i2cù¾
(
rçû
,
cmd
,
¬g1
,
¬g2
);

997 
	`GENERIC_MONUNLOCK
();

998 (
v®
);

999 
	}
}

1002 
	$mÚ_i2cwre
(
rçû
, 
bigaddr
, *
d©a
, 
Ën
)

1004 
v®
;

1006 
	`GENERIC_MONLOCK
();

1007 
v®
 = 
	`_i2cwre
(
rçû
,
bigaddr
,
d©a
,
Ën
);

1008 
	`GENERIC_MONUNLOCK
();

1009 (
v®
);

1010 
	}
}

1013 
	$mÚ_i2üd
(
rçû
, 
bigaddr
, *
d©a
, 
Ën
)

1015 
v®
;

1017 
	`GENERIC_MONLOCK
();

1018 
v®
 = 
	`_i2üd
(
rçû
,
bigaddr
,
d©a
,
Ën
);

1019 
	`GENERIC_MONUNLOCK
();

1020 (
v®
);

1021 
	}
}

1024 
	$mÚ_day
(
m£c
)

1026 
	`GENERIC_MONLOCK
();

1027 
	`_mÚday
(
m£c
);

1028 
	`GENERIC_MONUNLOCK
();

1029 
	}
}

1032 
	$mÚ_tim
(
cmd
, *
¬g
)

1034 
»t
;

1036 
	`GENERIC_MONLOCK
();

1037 
»t
 = 
	`_mÚtim
(
cmd
, 
¬g
);

1038 
	`GENERIC_MONUNLOCK
();

1039 (
»t
);

1040 
	}
}

1043 
	$mÚ_£ndpkt
(*
pkt
,
size
)

1045 
»t
;

1047 
	`GENERIC_MONLOCK
();

1048 
»t
 = 
	`_£nd
(
pkt
,
size
);

1049 
	`GENERIC_MONUNLOCK
();

1050 (
»t
);

1051 
	}
}

1054 
	$mÚ_»cvpkt
(*
pkt
,
size
)

1056 
»t
;

1058 
	`GENERIC_MONLOCK
();

1059 
»t
 = 
	`_»cv
(
pkt
,
size
);

1060 
	`GENERIC_MONUNLOCK
();

1061 (
»t
);

1062 
	}
}

1065 
	$mÚ_´kt
(*
buf
,
size
, 
comg
)

1067 
	`GENERIC_MONLOCK
();

1068 
	`_´kt
(
buf
,
size
,
comg
);

1069 
	`GENERIC_MONUNLOCK
();

1070 
	}
}

1073 
	$mÚ_æashovride
(*
æashfo
,
g
,
bªk
)

1075 
»t
;

1077 
	`TFS_MONLOCK
();

1078 
»t
 = 
	`_æashovride
(
æashfo
,
g
,
bªk
);

1079 
	`TFS_MONUNLOCK
();

1080 (
»t
);

1081 
	}
}

1084 
	$mÚ_æashwre
(*
de¡
,*
¤c
,
byút
)

1086 
»t
;

1088 
	`TFS_MONLOCK
();

1089 
»t
 = 
	`_æashwre
(
de¡
,
¤c
,
byút
);

1090 
	`TFS_MONUNLOCK
();

1091 (
»t
);

1092 
	}
}

1095 
	$mÚ_æasha£
(
¢um
)

1097 
»t
;

1099 
	`TFS_MONLOCK
();

1100 
»t
 = 
	`_æasha£
(
¢um
);

1101 
	`TFS_MONUNLOCK
();

1102 (
»t
);

1103 
	}
}

1106 
	$mÚ_æashfo
(
¢um
, *
size
, **
ba£
)

1108 
»t
;

1110 
	`TFS_MONLOCK
();

1111 
»t
 = 
	`_æashfo
(
¢um
,
size
,
ba£
);

1112 
	`TFS_MONUNLOCK
();

1113 (
»t
);

1114 
	}
}

1117 
	$mÚ_assignhªdËr
(
hnum
, 
¬g1
, 
¬g2
)

1119 
»t
;

1121 
	`GENERIC_MONLOCK
();

1122 
»t
 = 
	`_assign_hªdËr
(
hnum
,
¬g1
,
¬g2
);

1123 
	`GENERIC_MONUNLOCK
();

1124 (
»t
);

1125 
	}
}

1128 
	$mÚ_w©chdog
()

1130 
»t
;

1132 
	`GENERIC_MONLOCK
();

1133 
»t
 = 
	`_w©chdog
();

1134 
	`GENERIC_MONUNLOCK
();

1135 (
»t
);

1136 
	}
}

1139 
	$mÚ_´tmem
(*
mem
, 
size
, 
ascii
)

1141 
	`GENERIC_MONLOCK
();

1142 
	`_´tmem
(
mem
,
size
,
ascii
);

1143 
	`GENERIC_MONUNLOCK
();

1144 
	}
}

1147 
	$mÚ_pÜtcmd
(
cmd
, *
¬g
)

1149 
»t
;

1151 
	`GENERIC_MONLOCK
();

1152 
»t
 = 
	`_pÜtcmd
(
cmd
,
¬g
);

1153 
	`GENERIC_MONUNLOCK
();

1154 (
»t
);

1155 
	}
}

1158 
	$mÚ_timeofday
(
cmd
, *
¬g
)

1160 
»t
;

1162 
	`GENERIC_MONLOCK
();

1163 
»t
 = 
	`_timeofday
(
cmd
,
¬g
);

1164 
	`GENERIC_MONUNLOCK
();

1165 (
»t
);

1166 
	}
}

	@src/lib/libbsp/shared/umon/monlib.h

40 #iâdeà
_MONLIB_H_


41 
	#_MONLIB_H_


	)

43 
	~<umÚ/tfs.h
>

44 
	~<umÚ/þi.h
>

46 #ifdeà
__ýlu¥lus


58 
mÚCÚÃù
((*
mÚ±r
)(,*,*,*),

59 (*
lock
)(),(*
uÆock
)());

60 
mÚ_g¬gv
(*
¬gc
,***
¬gv
);

61 
mÚ_t¤e¡Üe
(
Þdv®
);

62 
mÚ_­³x
(
ex_v®ue
);

63 
mÚ_ä
(*
bufãr
);

64 
mÚ_´of
(*
pd©a
);

65 
mÚ_bbc
(*
fame
, 
lum
);

66 
mÚ_w¬m¡¬t
(
mask
);

67 
mÚ_day
(
m£c
);

68 
mÚ_´kt
(*
buf
, 
size
, 
comg
);

69 
mÚ_´tmem
(*
mem
, 
size
, 
ascii
);

72 
mÚ_com
(
cmd
,*
¬g1
,*
¬g2
,*
¬g3
);

73 
mÚ_tim
(
cmd
, * 
¬g
);

74 
mÚ_£nv
(*
v¬Çme
,*
v®ue
);

75 
mÚ_putch¬
(
c
);

76 
mÚ_gch¬
();

77 
mÚ_gÙach¬
();

78 
mÚ_gbys
(*
buf
,
couÁ
,
block
);

79 
mÚ_»¡¬t
(
»¡¬t_v®ue
);

80 
mÚ_tfs
();

81 
mÚ_tfsuÆk
(*
fame
);

82 
mÚ_tf¦k
(*
sourû
, *
rg
);

83 
mÚ_tf¤un
(**
¬gli¡
,
vbosy
);

84 
mÚ_tfsf¡©
(*
fame
,
tfshdr
 *
tå
);

85 
mÚ_tf£of
(
fe_desütÜ
);

86 
mÚ_tf¡runÿ
(
fe_desütÜ
,
Ëngth
);

87 
mÚ_tf¤d
(
fe_desütÜ
,*
bufãr
,
size
);

88 
mÚ_tfswre
(
fe_desütÜ
,*
bufãr
,
size
);

89 
mÚ_tfsÝ
(*
fame
,
mode
,*
bufãr
);

90 
mÚ_tfsþo£
(
fe_desütÜ
,*
fo
);

91 
mÚ_tfs£ek
(
fe_desütÜ
,
off£t
,
whû
);

92 
mÚ_tfsgle
(
fe_desütÜ
,*
bufãr
,
bufsize
);

93 
mÚ_tfsmod
(*
Çme
,*
bufãr
,
off£t
,
size
);

94 
mÚ_addcommªd
(
mÚCommªd
 *
commªd_li¡
,*);

95 
mÚ_docommªd
(*
cmdle
,
vbosy
);

96 
mÚ_gle
(*
bufãr
,
max
,
Ëd
);

97 
mÚ_decom´ess
(*
¤c
,
¤csize
,*
de¡
);

98 
mÚ_h³xnd
(*
ba£
,
size
);

99 
mÚ_pcicfgwre
(
rçû
,
bus
,
dev
,
func
,
»g
,

100 
v®
);

101 
mÚ_tf§dd
(*
fame
, *
fo
, *
æags
,

102 *
¤c
, 
size
);

103 
mÚ_i2cwre
(
rçû
, 
bigaddr
, *
d©a
,

104 
Ën
);

105 
mÚ_i2üd
(
rçû
, 
bigaddr
, *
d©a
,

106 
Ën
);

107 
mÚ_£ndpkt
(*
pkt
, 
Ën
);

108 
mÚ_»cvpkt
(*
pkt
, 
Ën
);

109 
mÚ_æashovride
(*
æashfo
, 
g
, 
bªk
);

110 
mÚ_æasha£
(
¢um
);

111 
mÚ_æashwre
(*
de¡
,*
¤c
, 
byút
);

112 
mÚ_æashfo
(
¢um
,*
size
, **
ba£
);

113 
mÚ_w©chdog
();

114 
mÚ_timeofday
(
cmd
, *
¬g
);

116 *
mÚ_gsym
(*
symÇme
, *
buf
, 
bufsize
);

117 *
mÚ_gv
(*
v¬Çme
);

118 *
mÚ_gvp
();

119 *
mÚ_vsiÚ
();

120 #ifdeà
MALLOC_DEBUG


121 *
mÚ_m®loc
(
size
,*
fe
, 
le
);

122 *
mÚ_»®loc
(*
buf
,
size
,*
fe
, 
le
);

124 *
mÚ_m®loc
(
size
);

125 *
mÚ_»®loc
(*
buf
,
size
);

128 
mÚ_tfsù¾
(
commªd
,
¬g1
,
¬g2
);

129 
mÚ_tf¡l
(
fe_desütÜ
);

130 
mÚ_pÜtcmd
(
cmd
, *
¬g
);

132 
mÚ_xüc16
(*
bufãr
,
Ëngth
);

134 
mÚ_tsoff
();

136 
mÚ_pcicfg»ad
(
rçû
,
bus
,
dev
,

137 
func
,
»g
);

139 
mÚ_pciù¾
(
rçû
, 
cmd
,

140 
¬g1
, 
¬g2
);

142 
mÚ_i2cù¾
(
rçû
, 
cmd
,

143 
¬g1
, 
¬g2
);

145 
mÚ_assignhªdËr
(
hnum
,

146 
¬g1
,
¬g2
);

148 
tfshdr
 *
mÚ_tf¢ext
(tfshd¸*
tå
);

149 
tfshdr
 *
mÚ_tfs¡©
(*
fame
);

151 #ià
SHOWVARARGS


152 
mÚ_memaû
(*
fmt
, ...);

153 
mÚ_´tf
(*
fmt
, ...);

154 
mÚ_ýrtf
(*
fmt
, ...);

155 
mÚ_¥rtf
(*,*
fmt
, ...);

157 
mÚ_memaû
();

158 
mÚ_´tf
();

159 
mÚ_ýrtf
();

160 
mÚ_¥rtf
();

163 #ifdeà
__ýlu¥lus


170 
	#GETMONFUNC_PUTCHAR
 1

	)

171 
	#GETMONFUNC_GETCHAR
 2

	)

172 
	#GETMONFUNC_GOTACHAR
 3

	)

173 
	#GETMONFUNC_GETBYTES
 4

	)

174 
	#GETMONFUNC_PRINTF
 5

	)

175 
	#GETMONFUNC_CPRINTF
 6

	)

176 
	#GETMONFUNC_SPRINTF
 7

	)

177 
	#GETMONFUNC_RESTART
 8

	)

178 
	#GETMONFUNC_GETENV
 9

	)

179 
	#GETMONFUNC_SETENV
 10

	)

180 
	#GETMONFUNC_TFSINIT
 11

	)

181 
	#GETMONFUNC_TFSADD
 12

	)

182 
	#GETMONFUNC_TFSUNLINK
 13

	)

183 
	#GETMONFUNC_TFSRUN
 14

	)

184 
	#GETMONFUNC_TFSNEXT
 15

	)

185 
	#GETMONFUNC_TFSSTAT
 16

	)

186 
	#GETMONFUNC_TFSREAD
 17

	)

187 
	#GETMONFUNC_TFSWRITE
 18

	)

188 
	#GETMONFUNC_TFSOPEN
 19

	)

189 
	#GETMONFUNC_TFSCLOSE
 20

	)

190 
	#GETMONFUNC_TFSSEEK
 21

	)

191 
	#GETMONFUNC_TFSGETLINE
 22

	)

192 
	#GETMONFUNC_TFSIPMOD
 23

	)

193 
	#GETMONFUNC_TFSCTRL
 24

	)

194 
	#GETMONFUNC_ADDCOMMAND
 25

	)

195 
	#GETMONFUNC_DOCOMMAND
 26

	)

196 
	#GETMONFUNC_GETARGV
 27

	)

197 
	#GETMONFUNC_CRC16
 28

	)

198 
	#GETMONFUNC_CRC32
 29

	)

199 
	#GETMONFUNC_PIOGET
 30

	)

200 
	#GETMONFUNC_PIOSET
 31

	)

201 
	#GETMONFUNC_PIOCLR
 32

	)

202 
	#GETMONFUNC_INTSOFF
 33

	)

203 
	#GETMONFUNC_INTSRESTORE
 34

	)

204 
	#GETMONFUNC_APPEXIT
 35

	)

205 
	#GETMONFUNC_MALLOC
 36

	)

206 
	#GETMONFUNC_FREE
 37

	)

207 
	#GETMONFUNC_GETLINE
 38

	)

208 
	#GETMONFUNC_TFSFSTAT
 39

	)

209 
	#GETMONFUNC_TFSEOF
 40

	)

210 
	#GETMONFUNC_DECOMPRESS
 41

	)

211 
	#GETMONFUNC_TFSTRUNCATE
 42

	)

212 
	#GETMONFUNC_HEAPXTEND
 43

	)

213 
	#GETMONFUNC_PROFILER
 44

	)

214 
	#GETMONFUNC_TFSLINK
 45

	)

215 
	#GETMONFUNC_BBC
 46

	)

216 
	#GETMONFUNC_MEMTRACE
 47

	)

217 
	#GETMONFUNC_TFSTELL
 48

	)

218 
	#GETMONFUNC_VERSION
 49

	)

219 
	#GETMONFUNC_WARMSTART
 50

	)

220 
	#GETMONFUNC_PCICFGREAD
 51

	)

221 
	#GETMONFUNC_PCICFGWRITE
 52

	)

222 
	#GETMONFUNC_PCICONTROL
 53

	)

223 
	#GETMONFUNC_I2CREAD
 54

	)

224 
	#GETMONFUNC_I2CWRITE
 55

	)

225 
	#GETMONFUNC_I2CCONTROL
 56

	)

226 
	#GETMONFUNC_MONDELAY
 57

	)

227 
	#GETMONFUNC_GETENVP
 58

	)

228 
	#GETMONFUNC_REALLOC
 59

	)

229 
	#GETMONFUNC_SENDENETPKT
 60

	)

230 
	#GETMONFUNC_RECVENETPKT
 61

	)

231 
	#GETMONFUNC_GETSYM
 62

	)

232 
	#GETMONFUNC_PRINTPKT
 63

	)

233 
	#GETMONFUNC_FLASHWRITE
 64

	)

234 
	#GETMONFUNC_FLASHERASE
 65

	)

235 
	#GETMONFUNC_FLASHINFO
 66

	)

236 
	#GETMONFUNC_ASSIGNHDLR
 67

	)

237 
	#GETMONFUNC_WATCHDOG
 68

	)

238 
	#GETMONFUNC_PRINTMEM
 69

	)

239 
	#GETMONFUNC_PORTCMD
 70

	)

240 
	#GETMONFUNC_TIMEOFDAY
 71

	)

241 
	#GETMONFUNC_TIMER
 72

	)

242 
	#GETMONFUNC_FLASHOVRRD
 73

	)

244 
	#CACHEFTYPE_DFLUSH
 200

	)

245 
	#CACHEFTYPE_IINVALIDATE
 201

	)

247 
	#CHARFUNC_PUTCHAR
 300

	)

248 
	#CHARFUNC_GETCHAR
 301

	)

249 
	#CHARFUNC_GOTACHAR
 302

	)

250 
	#CHARFUNC_RAWMODEON
 303

	)

251 
	#CHARFUNC_RAWMODEOFF
 304

	)

253 
	#ASSIGNFUNC_GETUSERLEVEL
 400

	)

258 
	#WARMSTART_IOINIT
 0x00000001

	)

259 
	#WARMSTART_BSSINIT
 0x00000002

	)

260 
	#WARMSTART_RUNMONRC
 0x00000004

	)

261 
	#WARMSTART_MONHEADER
 0x00000008

	)

262 
	#WARMSTART_TFSAUTOBOOT
 0x00000010

	)

263 
	#WARMSTART_BOARDINFO
 0x00000020

	)

264 
	#WARMSTART_ALL
 0xffffffff

	)

	@src/lib/libbsp/shared/umon/tfs.h

40 #iâdeà
_tfs_h


41 
	#_tfs_h


	)

51 
	#TFSINFOSIZE
 23

	)

53 #iâdeà
TFSNAMESIZE


54 
	#TFSNAMESIZE
 23

	)

57 #iâdeà
TFS_CHANGELOG_FILE


58 
	#TFS_CHANGELOG_SIZE
 0

	)

59 
	#TFS_CHANGELOG_FILE
 ".tfschlog"

	)

62 #iâdeà
SYMFILE


63 
	#SYMFILE
 "symtbl"

	)

66 
	#MINUSRLEVEL
 0

	)

67 
	#MAXUSRLEVEL
 3

	)

69 #iâdeà
TFS_RESERVED


70 
	#TFS_RESERVED
 4

	)

75 
	#TFS_EXEC
 0x00000001

	)

76 
	#TFS_BRUN
 0x00000002

	)

77 
	#TFS_QRYBRUN
 0x00000004

	)

79 
	#TFS_SYMLINK
 0x00000008

	)

80 
	#TFS_EBIN
 0x00000010

	)

81 
	#TFS_CPRS
 0x00000040

	)

82 
	#TFS_IPMOD
 0x00000080

	)

83 
	#TFS_UNREAD
 0x00000100

	)

86 
	#TFS_ULVLMSK
 0x00000600

	)

87 
	#TFS_ULVL0
 0x00000000

	)

88 
	#TFS_ULVL1
 0x00000200

	)

89 
	#TFS_ULVL2
 0x00000400

	)

90 
	#TFS_ULVL3
 0x00000600

	)

91 
	#TFS_NSTALE
 0x00000800

	)

96 
	#TFS_ACTIVE
 0x00008000

	)

98 
	#TFS_ULVLMAX
 
TFS_ULVL3


	)

99 
	#TFS_USRLVL
(
f
è((f->
æags
 & 
TFS_ULVLMSK
è>> 9)

	)

102 
	#TFS_RDONLY
 0x00010000

	)

103 
	#TFS_CREATE
 0x00020000

	)

105 
	#TFS_APPEND
 0x00040000

	)

108 
	#TFS_ALLFFS
 0x00080000

	)

109 
	#TFS_CREATERM
 0x00100000

	)

116 
	#TFS_RCFILE
 "mÚrc"

	)

119 
	#TFS_ERRMSG
 1

	)

120 
	#TFS_MEMUSE
 2

	)

121 
	#TFS_MEMDEAD
 3

	)

122 
	#TFS_DEFRAG
 4

	)

123 
	#TFS_TELL
 5

	)

124 
	#TFS_UNOPEN
 7

	)

125 
	#TFS_FATOB
 8

	)

126 
	#TFS_FBTOA
 9

	)

127 
	#TFS_MEMAVAIL
 10

	)

128 
	#TFS_TIMEFUNCS
 11

	)

129 
	#TFS_DOCOMMAND
 12

	)

130 
	#TFS_INITDEV
 13

	)

131 
	#TFS_CHECKDEV
 14

	)

132 
	#TFS_DEFRAGDEV
 15

	)

133 
	#TFS_DEFRAGOFF
 16

	)

134 
	#TFS_DEFRAGON
 17

	)

135 
	#TFS_HEADROOM
 18

	)

136 
	#TFS_FCOUNT
 19

	)

142 
	stfshdr
 {

143 
	mhdrsize
;

144 
	mhdrvr¢
;

145 
	mfsize
;

146 
	mæags
;

147 
	mfüc
;

148 
	mhdrüc
;

149 
	mmodtime
;

150 
tfshdr
 *
	mÃxt
;

151 
	mÇme
[
TFSNAMESIZE
+1];

152 
	mfo
[
TFSINFOSIZE
+1];

153 #ià
TFS_RESERVED


154 
	mrsvd
[
TFS_RESERVED
];

158 
	#TFSHDRSIZ
 (
tfshdr
)

	)

161 
	#TFS_OKAY
 0

	)

162 
	#TFSERR_NOFILE
 -1

	)

163 
	#TFSERR_NOSLOT
 -2

	)

164 
	#TFSERR_EOF
 -3

	)

165 
	#TFSERR_BADARG
 -4

	)

166 
	#TFSERR_NOTEXEC
 -5

	)

167 
	#TFSERR_BADCRC
 -6

	)

168 
	#TFSERR_FILEEXISTS
 -7

	)

169 
	#TFSERR_FLASHFAILURE
 -8

	)

170 
	#TFSERR_WRITEMAX
 -9

	)

171 
	#TFSERR_RDONLY
 -10

	)

172 
	#TFSERR_BADFD
 -11

	)

173 
	#TFSERR_BADHDR
 -12

	)

174 
	#TFSERR_CORRUPT
 -13

	)

175 
	#TFSERR_MEMFAIL
 -14

	)

176 
	#TFSERR_NOTIPMOD
 -16

	)

177 
	#TFSERR_MUTEXFAILURE
 -17

	)

178 
	#TFSERR_FLASHFULL
 -18

	)

179 
	#TFSERR_USERDENIED
 -19

	)

180 
	#TFSERR_NAMETOOBIG
 -20

	)

181 
	#TFSERR_FILEINUSE
 -21

	)

182 
	#TFSERR_NOTCPRS
 -22

	)

183 
	#TFSERR_NOTAVAILABLE
 -23

	)

184 
	#TFSERR_BADFLAG
 -24

	)

185 
	#TFSERR_CLEANOFF
 -25

	)

186 
	#TFSERR_FLAKEYSOURCE
 -26

	)

187 
	#TFSERR_BADEXTENSION
 -27

	)

188 
	#TFSERR_MIN
 -100

	)

191 
	#TFS_BEGIN
 1

	)

192 
	#TFS_CURRENT
 2

	)

193 
	#TFS_END
 3

	)

196 
	#TFS_DELETED
(
å
è(!((å)->
æags
 & 
TFS_ACTIVE
))

	)

197 
	#TFS_FILEEXISTS
(
å
è((å)->
æags
 & 
TFS_ACTIVE
)

	)

198 
	#TFS_ISCPRS
(
å
è((å)->
æags
 & 
TFS_CPRS
)

	)

199 
	#TFS_ISEXEC
(
å
è((å)->
æags
 & 
TFS_EXEC
)

	)

200 
	#TFS_ISBOOT
(
å
è((å)->
æags
 & 
TFS_BRUN
)

	)

201 
	#TFS_ISLINK
(
å
è((å)->
æags
 & 
TFS_SYMLINK
)

	)

202 
	#TFS_STALE
(
å
è(!((å)->
æags
 & 
TFS_NSTALE
))

	)

203 
	#TFS_FLAGS
(
å
è((å)->
æags
)

	)

204 
	#TFS_NAME
(
å
è((å)->
Çme
)

	)

205 
	#TFS_SIZE
(
å
è((å)->
fsize
)

	)

206 
	#TFS_TIME
(
å
è((å)->
modtime
)

	)

207 
	#TFS_INFO
(
å
è((å)->
fo
)

	)

208 
	#TFS_NEXT
(
å
è((å)->
Ãxt
)

	)

209 
	#TFS_CRC
(
å
è((å)->
füc
)

	)

210 
	#TFS_ENTRY
(
å
è((å)->
y
)

	)

211 
	#TFS_BASE
(
å
è((*)(å)+(å)->
hdrsize
)

	)

213 
tfshdr
 
	tTFILE
;

	@src/lib/libbsp/shared/umon/tfsDriver.c

22 
	~<¡dio.h
>

23 
	~<¡dlib.h
>

24 
	~<¡rg.h
>

25 
	~<uni¡d.h
>

26 
	~<ºo.h
>

27 
	~<fú.h
>

28 
	~<y³s.h
>

29 
	~<¹ems.h
>

30 
	~<¹ems/libio.h
>

31 
	~<¹ems/libio_.h
>

32 
	~<¹ems/£¼.h
>

33 
	~<¹ems/b¥Io.h
>

34 
	~<¹ems/umÚ.h
>

36 
	~<umÚ/tfs.h
>

37 
	~<umÚ/mÚlib.h
>

39 #ifdeà
RTEMS_TFS_DRIVER_DEBUG


40 
	#RTEMS_TFS_DEBUG
 1

	)

42 
	#RTEMS_TFS_DEBUG
 0

	)

45 
	#MAXFILESIZE
 0x4000

	)

46 
	#MAXTFDS
 15

	)

50 #iâdeà
Ãwlib_tfdlock


51 
	#Ãwlib_tfdlock
()

	)

54 #iâdeà
Ãwlib_tfduÆock


55 
	#Ãwlib_tfduÆock
()

	)

60 
	stfdfo
 {

61 
	mu£
;

62 
	mtfd
;

63 *
	mbuf
;

64 
	mÇme
[
TFSNAMESIZE
+1];

65 
	mfo
[
TFSNAMESIZE
+1];

66 } 
	gtfdbË
[
MAXTFDS
];

71 
	gTFS_PATHNAME_PREFIX
[128];

73 cÚ¡ 
¹ems_fesy¡em_Ý©iÚs_bË
 
	g¹ems_tfs_Ýs
;

74 cÚ¡ 
¹ems_fesy¡em_fe_hªdËrs_r
 
	g¹ems_tfs_hªdËrs
;

76 
boÞ
 
	$¹ems_tfs_is_deùÜy
(

77 cÚ¡ *
·th
,

78 
size_t
 
·thËn


81  
·th
 [
·thËn
 - 1] == '/';

82 
	}
}

84 
	$¹ems_tfs_mouÁ_me
(

85 
¹ems_fesy¡em_mouÁ_bË_y_t
 *
mt_y
,

86 cÚ¡ *
d©a


89 *
roÙ_·th
 = 
	`¡rdup
("/");

91 ià(
roÙ_·th
 =ð
NULL
) {

92 
	`¹ems_£t_ºo_ªd_»tuº_mus_Úe
(
ENOMEM
);

95 
mt_y
->
Ýs
 = &
¹ems_tfs_Ýs
;

96 
mt_y
->
mt_fs_roÙ
->
loÿtiÚ
.
hªdËrs
 = &
¹ems_tfs_hªdËrs
;

97 
mt_y
->
mt_fs_roÙ
->
loÿtiÚ
.
node_acûss
 = 
roÙ_·th
;

100 
	}
}

104 
	$¹ems_lize_tfs_fesy¡em
(

105 cÚ¡ *
·th


108 
¡©us
;

110 ià(!
·th
) {

111 
	`´tk
( "TFS: No mountoint specified\n" );

115 
	`¡ºýy
Ð
TFS_PATHNAME_PREFIX
, 
·th
, (TFS_PATHNAME_PREFIX) );

117 
¡©us
 = 
	`mkd
Ð
TFS_PATHNAME_PREFIX
, 
S_IRWXU
 | 
S_IRWXG
 | 
S_IRWXO
 );

118 iàÐ
¡©us
 == -1 ) {

119 
	`´tk
Ð"TFS: UÇbËØmkd %s\n", 
TFS_PATHNAME_PREFIX
 );

120  
¡©us
;

123 ià(
	`¹ems_fesy¡em_»gi¡
Ð"tfs", 
¹ems_tfs_mouÁ_me
 ) < 0)

126 
¡©us
 = 
	`mouÁ
Ð"umÚ", 
TFS_PATHNAME_PREFIX
, "tfs", 
RTEMS_FILESYSTEM_READ_WRITE
, 
NULL
);

128 ià(
¡©us
 < 0) {

129 
	`´tk
Ð"TFS: UÇbËØmouÁ oÀ%s\n", 
TFS_PATHNAME_PREFIX
 );

130 
	`³¼Ü
("TFS mount failed");

133 (
¡©us
);

134 
	}
}

139 
	$fixP©h
(*
·th
)

141 *
p
, *
ou
, *
ba£
;

143 
ou
 = 
p
 = 
·th
;

144 
ba£
 = 
NULL
;

146 ià(
p
[0] == '.') {

147 ià(
p
[1] == '\0')

149 ià(
p
[1] == '/') {

150 
p
 += 2;

153 ià(
p
[1] == '.') {

154 ià(
p
[2] == '\0') {

155 ià((
ba£
 !ð
NULL
è&& (
ou
 > base)) {

156 
ou
--;

157 (
ou
 > 
ba£
) && (outp[-1] != '/'))

158 
ou
--;

162 ià(
p
[2] == '/') {

163 
p
 += 3;

164 ià(
ba£
 =ð
NULL
)

166 ià(
ou
 > 
ba£
) {

167 
ou
--;

168 (
ou
 > 
ba£
) && (outp[-1] != '/'))

169 
ou
--;

175 ià(
ba£
 =ð
NULL
)

176 
ba£
 = 
p
;

177 
p
[0] != '/') {

178 ià((*
ou
++ = *
p
++) == '\0')

181 *
ou
++ = '/';

182 
p
[0] == '/')

183 
p
++;

185 *
ou
 = '\0';

186 
	}
}

188 
	$¹ems_tfs_ev®_·th
(
¹ems_fesy¡em_ev®_·th_cÚxt_t
 *
£lf
)

190 
ev®_æags
 = 
	`¹ems_fesy¡em_ev®_·th_g_æags
(
£lf
);

192 ià((
ev®_æags
 & 
RTEMS_FS_MAKE
) == 0) {

193 
rw
 = 
RTEMS_FS_PERMS_READ
 | 
RTEMS_FS_PERMS_WRITE
;

195 ià((
ev®_æags
 & 
rw
) !=w) {

196 
¹ems_fesy¡em_loÿtiÚ_fo_t
 *
cu¼oc
 =

197 
	`¹ems_fesy¡em_ev®_·th_g_cu¼oc
(
£lf
);

198 *
cu¼t
 = 
cu¼oc
->
node_acûss
;

199 
size_t
 
cu¼
 = 
	`¡¾
(
cu¼t
);

200 cÚ¡ *
·th
 = 
	`¹ems_fesy¡em_ev®_·th_g_·th
(
£lf
);

201 
size_t
 
·thËn
 = 
	`¹ems_fesy¡em_ev®_·th_g_·thËn
(
£lf
);

202 
size_t
 
Ën
 = 
cu¼
 + 
·thËn
;

204 
	`¹ems_fesy¡em_ev®_·th_þr_·th
(
£lf
);

206 
cu¼t
 = 
	`»®loc
(cu¼t, 
Ën
 + 1);

207 ià(
cu¼t
 !ð
NULL
) {

208 
	`memýy
(
cu¼t
 + 
cu¼
, 
·th
, 
·thËn
);

209 
cu¼t
 [
Ën
] = '\0';

210 ià(!
	`¹ems_tfs_is_deùÜy
(
cu¼t
, 
Ën
)) {

211 
	`fixP©h
 (
cu¼t
);

213 
cu¼oc
->
node_acûss
 = 
cu¼t
;

215 
	`¹ems_fesy¡em_ev®_·th_rÜ
(
£lf
, 
ENOMEM
);

218 
	`¹ems_fesy¡em_ev®_·th_rÜ
(
£lf
, 
EINVAL
);

221 
	`¹ems_fesy¡em_ev®_·th_rÜ
(
£lf
, 
EIO
);

223 
	}
}

241 
	$¹ems_tfs_Ý_wÜk
(

242 
¹ems_libio_t
 *
iÝ
,

243 *
·th
,

244 
oæag
,

245 
mode_t
 
mode


248 
bnhe
 = 0;

249 
æagmode
;

250 
tfdidx
, 
tfd
;

251 
tfdfo
 *
t
;

252 *
buf
, *
f¡r
, *
i¡r
, *
b¡r
, 
·thcÝy
[
TFSNAMESIZE
*3+1];

254 ià(
RTEMS_TFS_DEBUG
)

255 
	`´tk
("_Ý_r(%s,0x%" 
PRIx32
 ",0x%" PRIx32 ")\n",
·th
,
oæag
,
mode
);

257 ià(!
bnhe
) {

258 
	`Ãwlib_tfdlock
();

259 
tfdidx
=0;tfdidx<
MAXTFDS
;tfdidx++)

260 
tfdbË
[
tfdidx
].
u£
 = 0;

262 
tfdbË
[0].
u£
 = 1;

263 
tfdbË
[1].
u£
 = 1;

264 
tfdbË
[2].
u£
 = 1;

265 
	`Ãwlib_tfduÆock
();

266 
bnhe
 = 1;

269 
i¡r
 = 
f¡r
 = 
b¡r
 = 
buf
 = (*)0;

274 ià(
	`¡¾
(
·th
è> 
TFSNAMESIZE
*3) {

275 (
ENAMETOOLONG
);

277 
	`¡rýy
(
·thcÝy
,
·th
);

283 
f¡r
 = 
	`¡rchr
(
·thcÝy
,',');

284 ià(
f¡r
) {

285 *
f¡r
++ = 0;

286 
i¡r
 = 
	`¡rchr
(
f¡r
,',');

287 ià(
i¡r
) {

288 *
i¡r
++ = 0;

289 
b¡r
 = 
	`¡rchr
(
i¡r
,',');

290 ià(
b¡r
)

291 *
b¡r
++ = 0;

294 ià(
	`¡¾
(
·thcÝy
è> 
TFSNAMESIZE
) {

295 (
ENAMETOOLONG
);

297 ià(
i¡r
) {

298 ià(
	`¡¾
(
i¡r
è> 
TFSNAMESIZE
) {

299 (
ENAMETOOLONG
);

305 ià((
oæag
 & (
O_CREAT
 | 
O_EXCL
)) == (O_CREAT | O_EXCL)) {

306 ià(
	`mÚ_tfs¡©
((*)
·thcÝy
)) {

307 (
EEXIST
);

318 
oæag
 & 
O_ACCMODE
) {

319 
O_RDONLY
:

320 
æagmode
 = 
TFS_RDONLY
;

322 
O_WRONLY
|
O_APPEND
:

323 
æagmode
 = 
TFS_APPEND
;

325 
O_WRONLY
|
O_TRUNC
:

326 
O_WRONLY
|
O_CREAT
|
O_TRUNC
:

327 
	`mÚ_tfsuÆk
((*)
·thcÝy
);

328 
æagmode
 = 
TFS_CREATE
|
TFS_APPEND
;

330 
O_WRONLY
|
O_CREAT
:

331 
O_WRONLY
|
O_CREAT
|
O_APPEND
:

332 
æagmode
 = 
TFS_CREATE
|
TFS_APPEND
;

334 
O_RDWR
:

335 
O_WRONLY
|
O_CREAT
|
O_EXCL
:

336 
æagmode
 = 
TFS_CREATE
|
TFS_APPEND
;

339 
	`´tk
("_Ý_r(): fÏg 0x%nÙ suµÜd\n",
oæag
);

340 (
ENOTSUP
);

345 
	`Ãwlib_tfdlock
();

346 
tfdidx
=0;tfdidx<
MAXTFDS
;tfdidx++) {

347 ià(
tfdbË
[
tfdidx
].
u£
 == 0)

350 ià(
tfdidx
 =ð
MAXTFDS
) {

351 
	`Ãwlib_tfduÆock
();

352 (
EMFILE
);

354 
t
 = &
tfdbË
[
tfdidx
];

355 
t
->
u£
 = 1;

356 
	`Ãwlib_tfduÆock
();

364 ià(
æagmode
 =ð
TFS_RDONLY
) {

365 
buf
 = (*)0;

367 ià(
b¡r
)

368 
buf
 = (*)
	`¡¹Þ
(
b¡r
,0,0);

370 
buf
 = 
	`m®loc
(
MAXFILESIZE
);

371 ià(!
buf
) {

372 
	`Ãwlib_tfdlock
();

373 
t
->
u£
 = 0;

374 
	`Ãwlib_tfduÆock
();

375 (
ENOMEM
);

381 ià(
f¡r
) {

382 
bæag
;

384 
bæag
 = 
	`mÚ_tfsù¾
(
TFS_FATOB
,()
f¡r
,0);

385 ià(
bæag
 == -1) {

386 (
EINVAL
);

388 
æagmode
 |ð
bæag
;

391 ià(
i¡r
)

392 
	`¡rýy
(
t
->
fo
,
i¡r
);

394 
t
->
fo
[0] = 0;

396 
tfd
 = 
	`mÚ_tfsÝ
((*)
·thcÝy
,
æagmode
,
buf
);

397 ià(
tfd
 >= 0) {

398 
t
->
tfd
 =fd;

399 
t
->
buf
 = buf;

400 
	`¡rýy
(
t
->
Çme
,
·thcÝy
);

401 
iÝ
->
d©a0
 = (
ut32_t
)
tfdidx
;

404 
	`´tk
("%s: %s\n",
·thcÝy
,

405 (*)
	`mÚ_tfsù¾
(
TFS_ERRMSG
,
tfd
,0));

408 ià(
buf
)

409 
	`ä
(
buf
);

411 
	`Ãwlib_tfdlock
();

412 
t
->
u£
 = 0;

413 
	`Ãwlib_tfduÆock
();

414 (
EINVAL
);

415 
	}
}

420 
	$¹ems_tfs_Ý
(

421 
¹ems_libio_t
 *
iÝ
,

422 cÚ¡ *
Ãw_Çme
,

423 
oæag
,

424 
mode_t
 
mode


427 *
fuÎ_·th_Çme
;

428 
r
;

430 
fuÎ_·th_Çme
 = 
iÝ
->
·thfo
.
node_acûss
;

432 ià(
RTEMS_TFS_DEBUG
)

433 
	`´tk
("¹ems_tfs_Ý(%s)\n",
fuÎ_·th_Çme
);

435 ià(
	`¹ems_tfs_is_deùÜy
(
fuÎ_·th_Çme
, 
	`¡¾
(full_path_name))) {

436 
	`¹ems_£t_ºo_ªd_»tuº_mus_Úe
 (
ENOTSUP
);

439 
r
 = 
	`¹ems_tfs_Ý_wÜk
 (
iÝ
, 
fuÎ_·th_Çme
, 
oæag
, 
mode
);

440 ià(
r
 != 0) {

441 
	`¹ems_£t_ºo_ªd_»tuº_mus_Úe
 (
r
);

444  
r
;

445 
	}
}

450 
ssize_t
 
	$¹ems_tfs_»ad
(

451 
¹ems_libio_t
 *
iÝ
,

452 *
bufãr
,

453 
size_t
 
couÁ


456 
»t
, 
fd
;

458 
fd
 = (è
iÝ
->
d©a0
;

460 ià(
RTEMS_TFS_DEBUG
)

461 
	`´tk
("_»ad_r(%d,%" 
PRId32
 ")\n",
fd
,
couÁ
);

463 ià((
fd
 < 3è|| (fd >ð
MAXTFDS
))

464 (
EBADF
);

466 
»t
 = 
	`mÚ_tf¤d
(
tfdbË
[
fd
].
tfd
,
bufãr
,
couÁ
);

467 ià(
»t
 =ð
TFSERR_EOF
)

468 
»t
 = 0;

470 (
»t
);

471 
	}
}

476 
	$¹ems_tfs_þo£
(

477 
¹ems_libio_t
 *
iÝ


480 
fd
;

481 *
fo
;

482 
tfdfo
 *
t
;

484 
fd
 = ()
iÝ
->
d©a0
;

486 ià(
RTEMS_TFS_DEBUG
)

487 
	`´tk
("¹ems_tfs_þo£(%d)\n",
fd
);

489 ià((
fd
 < 3è|| (fd >ð
MAXTFDS
)) {

490 
	`¹ems_£t_ºo_ªd_»tuº_mus_Úe
 (
EBADF
);

493 
t
 = &
tfdbË
[
fd
];

495 ià(
t
->
fo
[0])

496 
fo
 = 
t
->info;

498 
fo
 = (*)0;

500 
	`mÚ_tfsþo£
(
t
->
tfd
,
fo
);

502 ià(
t
->
buf
)

503 
	`ä
(
t
->
buf
);

505 
	`Ãwlib_tfdlock
();

506 
t
->
u£
 = 0;

507 
	`Ãwlib_tfduÆock
();

508  
RTEMS_SUCCESSFUL
;

509 
	}
}

511 
ssize_t
 
	$¹ems_tfs_wre
(

512 
¹ems_libio_t
 *
iÝ
,

513 cÚ¡ *
bufãr
,

514 
size_t
 
couÁ


517 
»t
, 
fd
;

519 
fd
 = (è
iÝ
->
d©a0
;

521 ià(
RTEMS_TFS_DEBUG
)

522 
	`´tk
("¹ems_tfs_wre(%d,%" 
PRId32
" )\n",
fd
,
couÁ
);

524 ià((
fd
 <ð0è|| (fd >ð
MAXTFDS
)) {

525 
	`¹ems_£t_ºo_ªd_»tuº_mus_Úe
 (
EBADF
);

528 
»t
 = 
	`mÚ_tfswre
(
tfdbË
[
fd
].
tfd
,(*)
bufãr
,
couÁ
);

529 ià(
»t
 < 0)

532 (
»t
);

533 
	}
}

535 
off_t
 
	$¹ems_tfs_l£ek
(

536 
¹ems_libio_t
 *
iÝ
,

537 
off_t
 
off£t
,

538 
whû


541 
»t
, 
fd
;

543 
fd
 = (è
iÝ
->
d©a0
;

545 ià(
RTEMS_TFS_DEBUG
)

546 
	`´tk
("¹ems_tfs_l£ek(%d,%ld,%d)\n",
fd
,()
off£t
,
whû
);

548 
whû
) {

549 
SEEK_END
:

550 
	`´tk
("rtems_tfs_lseek doesn't support SEEK_END\n");

552 
SEEK_CUR
:

553 
whû
 = 
TFS_CURRENT
;

555 
SEEK_SET
:

556 
whû
 = 
TFS_BEGIN
;

559 
»t
 = 
	`mÚ_tfs£ek
(
tfdbË
[
fd
].
tfd
,
off£t
,
whû
);

561 ià(
»t
 < 0)

564  (
off_t
)
»t
;

565 
	}
}

570 
	$¹ems_tfs_árunÿ
(

571 
¹ems_libio_t
 *
iÝ
,

572 
off_t
 
couÁ


575 
»t
, 
fd
;

577 
fd
 = (è
iÝ
->
d©a0
;

578 
»t
 = 
	`mÚ_tf¡runÿ
(
tfdbË
[
fd
].
tfd
,
couÁ
);

579 ià(
»t
 !ð
TFS_OKAY
)

583 
	}
}

585 
	$¹ems_tfs_ioùl
(

586 
¹ems_libio_t
 *
iÝ
,

587 
ut32_t
 
cmd
,

588 *
buf


591 
»t
;

593 
»t
 = 
	`mÚ_tfsù¾
(
cmd
,()
buf
,0);

594 ià(
»t
 !ð
TFS_OKAY
)

598 
	}
}

600 
	$¹ems_tfs_f¡©
(

601 cÚ¡ 
¹ems_fesy¡em_loÿtiÚ_fo_t
 *
loc
,

602 
¡©
 *
buf


605 cÚ¡ *
·th
 = 
loc
->
node_acûss
;

606 
size_t
 
·thËn
 = 
	`¡¾
(
·th
);

608 
buf
->
¡_mode
 = 
S_IRWXU
 | 
S_IRWXG
 | 
S_IRWXO


609 | (
	`¹ems_tfs_is_deùÜy
(
·th
, 
·thËn
è? 
S_IFDIR
 : 
S_IFREG
);

612 
	}
}

614 
	$¹ems_tfs_þÚe_node_fo
(

615 
¹ems_fesy¡em_loÿtiÚ_fo_t
 *
loc


618 
rv
 = 0;

620 
loc
->
node_acûss
 = 
	`¡rdup
(loc->node_access);

622 ià(
loc
->
node_acûss
 =ð
NULL
) {

623 
ºo
 = 
ENOMEM
;

624 
rv
 = -1;

627  
rv
;

628 
	}
}

630 
	$¹ems_tfs_ä_node_fo
(

631 cÚ¡ 
¹ems_fesy¡em_loÿtiÚ_fo_t
 *
loc


634 
	`ä
(
loc
->
node_acûss
);

635 
	}
}

637 
boÞ
 
	$¹ems_tfs_¬e_nodes_equ®
(

638 cÚ¡ 
¹ems_fesy¡em_loÿtiÚ_fo_t
 *
a
,

639 cÚ¡ 
¹ems_fesy¡em_loÿtiÚ_fo_t
 *
b


642  
	`¡rcmp
(
a
->
node_acûss
, 
b
->node_access) == 0;

643 
	}
}

645 cÚ¡ 
¹ems_fesy¡em_Ý©iÚs_bË
 
	g¹ems_tfs_Ýs
 = {

646 .
lock_h
 = 
¹ems_fesy¡em_deçuÉ_lock
,

647 .
	guÆock_h
 = 
¹ems_fesy¡em_deçuÉ_uÆock
,

648 .
	gev®_·th_h
 = 
¹ems_tfs_ev®_·th
,

649 .
	glk_h
 = 
¹ems_fesy¡em_deçuÉ_lk
,

650 .
	g¬e_nodes_equ®_h
 = 
¹ems_tfs_¬e_nodes_equ®
,

651 .
	gmknod_h
 = 
¹ems_fesy¡em_deçuÉ_mknod
,

652 .
	grmnod_h
 = 
¹ems_fesy¡em_deçuÉ_rmnod
,

653 .
	gfchmod_h
 = 
¹ems_fesy¡em_deçuÉ_fchmod
,

654 .
	gchown_h
 = 
¹ems_fesy¡em_deçuÉ_chown
,

655 .
	gþÚod_h
 = 
¹ems_tfs_þÚe_node_fo
,

656 .
	gänod_h
 = 
¹ems_tfs_ä_node_fo
,

657 .
	gmouÁ_h
 = 
¹ems_fesy¡em_deçuÉ_mouÁ
,

658 .
	gunmouÁ_h
 = 
¹ems_fesy¡em_deçuÉ_unmouÁ
,

659 .
	gfsunmouÁ_me_h
 = 
¹ems_fesy¡em_deçuÉ_fsunmouÁ
,

660 .
	gutime_h
 = 
¹ems_fesy¡em_deçuÉ_utime
,

661 .
	gsymlk_h
 = 
¹ems_fesy¡em_deçuÉ_symlk
,

662 .
	g»adlk_h
 = 
¹ems_fesy¡em_deçuÉ_»adlk
,

663 .
	g»Çme_h
 = 
¹ems_fesy¡em_deçuÉ_»Çme
,

664 .
	g¡©vfs_h
 = 
¹ems_fesy¡em_deçuÉ_¡©vfs


667 cÚ¡ 
¹ems_fesy¡em_fe_hªdËrs_r
 
	g¹ems_tfs_hªdËrs
 = {

668 .
Ý_h
 = 
¹ems_tfs_Ý
,

669 .
	gþo£_h
 = 
¹ems_tfs_þo£
,

670 .
	g»ad_h
 = 
¹ems_tfs_»ad
,

671 .
	gwre_h
 = 
¹ems_tfs_wre
,

672 .
	gioùl_h
 = 
¹ems_tfs_ioùl
,

673 .
	gl£ek_h
 = 
¹ems_tfs_l£ek
,

674 .
	gf¡©_h
 = 
¹ems_tfs_f¡©
,

675 .
	gárunÿ_h
 = 
¹ems_tfs_árunÿ
,

676 .
	gfsync_h
 = 
¹ems_fesy¡em_deçuÉ_fsync_Ü_fd©async
,

677 .
	gfd©async_h
 = 
¹ems_fesy¡em_deçuÉ_fsync_Ü_fd©async
,

678 .
	gfú_h
 = 
¹ems_fesy¡em_deçuÉ_fú
,

679 .
	gkqfr_h
 = 
¹ems_fesy¡em_deçuÉ_kqfr
,

680 .
	gpÞl_h
 = 
¹ems_fesy¡em_deçuÉ_pÞl
,

681 .
	g»adv_h
 = 
¹ems_fesy¡em_deçuÉ_»adv
,

682 .
	gwrev_h
 = 
¹ems_fesy¡em_deçuÉ_wrev


	@src/lib/libbsp/shared/umon/umon.h

15 #iâdeà
__¹ems_umÚ_h


16 
	#__¹ems_umÚ_h


	)

18 
	~<umÚ/mÚlib.h
>

20 #ifdeà
__ýlu¥lus


30 
¹ems_umÚ_cÚÃù
();

40 *
¹ems_b¥_g_umÚ_mÚ±r
();

51 
¹ems_lize_tfs_fesy¡em
(

52 cÚ¡ *
·th


62 
umÚcÚs_pÞl_»ad
(
mÜ
);

64 #ifdeà
__ýlu¥lus


	@src/lib/libbsp/shared/umon/umoncons.c

15 
	~<¹ems/umÚ.h
>

16 
	~<libch/£rl.h
>

17 
	~<libch/£rsuµ.h
>

20 
umÚcÚs_f¡_Ý
(
majÜ
, 
mÜ
, *
¬g
);

21 
umÚcÚs_Ï¡_þo£
(
majÜ
, 
mÜ
, *
¬g
);

22 
umÚcÚs_»ad
(
mÜ
);

23 
ssize_t
 
umÚcÚs_wre
(
mÜ
, cÚ¡ *
buf
, 
size_t
 
Ën
);

24 
umÚcÚs_
(
mÜ
);

25 
umÚcÚs_wre_pÞËd
(
mÜ
, 
c
);

26 
umÚcÚs_£t_©ibus
(
mÜ
, cÚ¡ 
rmios
 *
t
);

29 cÚ¡ 
cÚsÞe_âs
 
	gumÚcÚs_âs
 =

31 
libch_£rl_deçuÉ_´obe
,

32 
umÚcÚs_f¡_Ý
,

33 
umÚcÚs_Ï¡_þo£
,

34 
umÚcÚs_»ad
,

35 
umÚcÚs_wre
,

36 
umÚcÚs_
,

37 
umÚcÚs_wre_pÞËd
,

38 
umÚcÚs_£t_©ibus
,

39 
çl£


51 
	$umÚcÚs_f¡_Ý
(
majÜ
, 
mÜ
, *
¬g
)

54 
	}
}

62 
	$umÚcÚs_Ï¡_þo£
(
majÜ
, 
mÜ
, *
¬g
)

65 
	}
}

74 
	$umÚcÚs_»ad
(
mÜ
)

76 iàÐ!
	`mÚ_gÙach¬
() )

78  
	`mÚ_gch¬
();

79 
	}
}

87 
ssize_t
 
	$umÚcÚs_wre
(
mÜ
, cÚ¡ *
buf
, 
size_t
 
Ën
)

89 
size_t
 
i
;

91  
i
=0 ; i<
Ën
 ; i++ )

92 
	`mÚ_putch¬
Ð
buf
[
i
] );

94  
Ën
;

95 
	}
}

99 
	$umÚcÚs_
(
mÜ
)

101 
	`¹ems_umÚ_cÚÃù
();

102 
	}
}

105 
	$umÚcÚs_wre_pÞËd
(
mÜ
, 
c
)

107 
	`mÚ_putch¬
Ð
c
 );

108 
	}
}

111 
	$umÚcÚs_£t_©ibus
(
mÜ
, cÚ¡ 
rmios
 *
t
)

114 
	}
}

126 
	$umÚcÚs_pÞl_»ad
(
mÜ
)

128 ià(!
	`mÚ_gÙach¬
())

130  
	`mÚ_gch¬
();

131 
	}
}

	@src/lib/libbsp/shared/umon/umonrtemsglue.c

13 
	~<¹ems/umÚ.h
>

17 
	g¹ems_umÚ_cÚÃùed
 = 0;

19 
	$¹ems_umÚ_cÚÃù
()

21 (*
mÚcom±r
)(,*,*,*);

23 iàÐ
¹ems_umÚ_cÚÃùed
 )

26 
¹ems_umÚ_cÚÃùed
 = 1;

28 
mÚcom±r
 = 
	`¹ems_b¥_g_umÚ_mÚ±r
();

29 
	`mÚCÚÃù
(

30 
mÚcom±r
,

34 
	}
}

	@src/lib/libbsp/shared/vmeUniverse/VME.h

9 #iâdeà
RTEMS_BSP_VME_API_H


10 
	#RTEMS_BSP_VME_API_H


	)

57 
	~<¡dio.h
>

60 
	~<b¥/vme_am_defs.h
>

62 #ifdeà
__ýlu¥lus


75 
BSP_vme_cÚfig
();

79 
BSP_vme2loÿl_adrs
(
am
, 
vmddr
, *
¶oÿÏddr
);

83 
BSP_loÿl2vme_adrs
(
am
, 
loÿÏddr
, *
pvmddr
);

86 (*
BSP_VME_ISR_t
)(*
	tu¤Arg
, 
	tveùÜ
);

89 
BSP_¡®lVME_i¤
(
veùÜ
, 
BSP_VME_ISR_t
 
hªdËr
, *
¬g
);

91 
BSP_»moveVME_i¤
(
veùÜ
, 
BSP_VME_ISR_t
 
hªdËr
, *
¬g
);

94 
BSP_VME_ISR_t


95 
BSP_gVME_i¤
(
veùÜ
, **
·rg
);

98 
BSP_abËVME_t_lvl
(
Ëv
);

101 
BSP_di§bËVME_t_lvl
(
Ëv
);

104 
BSP_VMEOutboundPÜtCfg
(

105 
pÜt
,

106 
add»ss_¥aû
,

107 
vme_add»ss
,

108 
pci_add»ss
,

109 
size
);

112 
BSP_VMEInboundPÜtCfg
(

113 
pÜt
,

114 
add»ss_¥aû
,

115 
vme_add»ss
,

116 
pci_add»ss
,

117 
size
);

120 
BSP_VMEOutboundPÜtsShow
(
FILE
 *
f
);

123 
BSP_VMEInboundPÜtsShow
(
FILE
 *
f
);

127 
BSP_VMERe£tBus
();

129 #ifdeà
__ýlu¥lus


	@src/lib/libbsp/shared/vmeUniverse/VMEDMA.h

9 #iâdeà
BSP_VME_DMA_H


10 
	#BSP_VME_DMA_H


	)

57 
	~<¡dt.h
>

59 #ifdeà
__ýlu¥lus


88 
	#BSP_VMEDMA_OPT_THROUGHPUT
 1

	)

93 
	#BSP_VMEDMA_OPT_LOWLATENCY
 2

	)

99 
	#BSP_VMEDMA_OPT_SHAREDBUS
 3

	)

104 
	#BSP_VMEDMA_OPT_DEFAULT
 4

	)

110 
	#BSP_VMEDMA_OPT_CUSTOM
 5

	)

122 
	#BSP_VMEDMA_MODE_NOINC_VME
 (1<<20)

	)

124 
	#BSP_VMEDMA_MODE_NOINC_PCI
 (1<<21)

	)

127 
	#BSP_VMEDMA_MODE_PCI2VME
 (1<<31)

	)

129 *
	tBSP_VMEDmaLi¡DesütÜ
;

157 
BSP_VMEDmaSup
(
chªÃl
, 
ut32_t
 
bus_mode
, ut32_
xãr_mode
, *
cu¡om_£tup
);

164 
BSP_VMEDmaS¹
(
chªÃl
, 
ut32_t
 
pci_addr
, ut32_
vme_addr
, ut32_
n_bys
);

167 
	#BSP_VMEDMA_STATUS_OK
 0

	)

169 
	#BSP_VMEDMA_STATUS_UNSUP
 (-1)

	)

171 
	#BSP_VMEDMA_STATUS_BERR_VME
 1

	)

173 
	#BSP_VMEDMA_STATUS_BERR_PCI
 2

	)

175 
	#BSP_VMEDMA_STATUS_BUSY
 3

	)

177 
	#BSP_VMEDMA_STATUS_PERR
 4

	)

179 
	#BSP_VMEDMA_STATUS_OERR
 5

	)

191 
ut32_t


192 
BSP_VMEDmaStus
(
chªÃl
);

203 (*
BSP_VMEDmaIRQC®lback
)(*
	tu¤_¬g
);

206 
BSP_VMEDmaIn¡®lISR
(
chªÃl
, 
BSP_VMEDmaIRQC®lback
 
cb
, *
u¤_¬g
);

227 
	#BSP_VMEDMA_MSK_ATTR
 (1<<0)

	)

228 
	#BSP_VMEDMA_MSK_PCIA
 (1<<1)

	)

229 
	#BSP_VMEDMA_MSK_VMEA
 (1<<2)

	)

230 
	#BSP_VMEDMA_MSK_BCNT
 (1<<3)

	)

231 
	#BSP_VMEDMA_MSK_ALL
 (0xf)

	)

232 
BSP_VMEDmaLi¡DesütÜ


233 
BSP_VMEDmaLi¡DesütÜSup
(

234 
BSP_VMEDmaLi¡DesütÜ
 
d
,

235 
ut32_t
 
©_mask
,

236 
ut32_t
 
xãr_mode
,

237 
ut32_t
 
pci_addr
,

238 
ut32_t
 
vme_addr
,

239 
ut32_t
 
n_bys
);

247 
BSP_VMEDmaLi¡DesütÜDe¡roy
(
BSP_VMEDmaLi¡DesütÜ
 
d
);

251 
BSP_VMEDmaLi¡De¡roy
(
BSP_VMEDmaLi¡DesütÜ
 
ªchÜ
);

267 
BSP_VMEDmaLi¡DesütÜEnq
(

268 
BSP_VMEDmaLi¡DesütÜ
 

,

269 
BSP_VMEDmaLi¡DesütÜ
 
d
);

272 
BSP_VMEDmaLi¡DesütÜ


273 
BSP_VMEDmaLi¡DesütÜNext
(
BSP_VMEDmaLi¡DesütÜ
 
d
);

275 
BSP_VMEDmaLi¡DesütÜ


276 
BSP_VMEDmaLi¡DesütÜP»v
(
BSP_VMEDmaLi¡DesütÜ
 
d
);

280 
BSP_VMEDmaLi¡DesütÜSU¤
(
BSP_VMEDmaLi¡DesütÜ
 
d
, *
u¤D©a
);

283 
BSP_VMEDmaLi¡DesütÜGU¤
(
BSP_VMEDmaLi¡DesütÜ
 
d
);

291 
BSP_VMEDmaLi¡Reäesh
(
BSP_VMEDmaLi¡DesütÜ
 
ªchÜ
);

298 
BSP_VMEDmaLi¡S¹
(
chªÃl
, 
BSP_VMEDmaLi¡DesütÜ
 
li¡
);

300 #ifdeà
DEBUG


302 
BSP_VMEDmaLi¡Dump
(
BSP_VMEDmaLi¡DesütÜ
 
p
);

305 #ifdeà
__ýlu¥lus


	@src/lib/libbsp/shared/vmeUniverse/bspVmeDmaList.c

50 
	~<¡dt.h
>

51 
	~<¡dlib.h
>

52 
	~<¡dio.h
>

53 
	~<¡rg.h
>

55 
	#DEBUG


	)

56 
	~<b¥/VMEDMA.h
>

57 
	~<b¥/b¥VmeDmaLi¡.h
>

58 
	~"b¥VmeDmaLi¡P.h
"

61 
	sVMEDmaLi¡NodeRec_
 {

62 
VMEDmaLi¡Node
 
	mp
, 
	mn
;

63 
DmaDesütÜ
 
	md
;

64 *
	mu¤D©a
;

65 
VMEDmaLi¡CÏss
 
	mþass
;

66 } 
	tVMEDmaLi¡NodeRec
;

68 
	#LCHUNK
 10

	)

70 #ifdeà
DEBUG


72 
	$Írt
(
VMEDmaLi¡Node
 
d
)

74 
	`´tf
("n 0x%08lx,: 0x%08lx,: 0x%08lx d: 0x%08lx\n",

75 (
ut32_t
)
d
, (ut32_t)d->
p
, (ut32_t)d->
n
, (uint32_t)d->d);

76 
	}
}

79 
VMEDmaLi¡Node


80 
	$ÏÎoc
(
VMEDmaLi¡CÏss
 
pc
)

82 
VMEDmaLi¡Node
 
rv®
;

83 
i
;

85 iàÐ!
pc
->
äLi¡
 ) {

87 
pc
->
äLi¡
 = 
	`ÿÎoc
Ð(
LCHUNK
), (*pc->freeList));

89 iàÐ! (
pc
->
äLi¡
) ) {

94 
i
=0; i<(
LCHUNK
)-1; i++) {

95 
pc
->
äLi¡
[
i
].
n
 = &pc->freeList[i+1];

96 
pc
->
äLi¡
[
i
].
þass
 =c;

98 
pc
->
äLi¡
[
i
].
n
 = 0;

99 
pc
->
äLi¡
[
i
].
þass
 =c;

102 iàÐ
pc
->
desc_®loc
 ) {

103 
i
=0; i<(
LCHUNK
); i++) {

104 iàÐ! (
pc
->
äLi¡
[
i
].
d
 =c->
	`desc_®loc
()) ) {

105 
j
;

106 iàÐ
pc
->
desc_ä
 ) {

107 
j
=0; j<
i
; j++)

108 
pc
->
	`desc_ä
Õc->
äLi¡
[
i
].
d
);

110 
	`ä
(
pc
->
äLi¡
);

111 
pc
->
äLi¡
 = 0;

116 
blksize
;

117 
ut32_t
 
®gnmsk
 = 
pc
->
desc_®ign
 - 1;

118 *
mem±r
;

121 
pc
->
desc_ä
 = 0;

123 
blksize
 = (
pc
->
desc_size
 + 
®gnmsk
) & ~algnmsk;

125 iàÐ! (
mem±r
 = 
	`m®loc
(
blksize
*(
LCHUNK
è+ 
pc
->
desc_®ign
 - 1)) ) {

126 
	`ä
(
pc
->
äLi¡
);

127 
pc
->
äLi¡
 = 0;

132 
mem±r
 = (*)Ð((
ut32_t
)mem±¸+ 
®gnmsk
) & ~lgnmsk );

134  
i
 = 0; i<(
LCHUNK
); i++, 
mem±r
+=
blksize
 ) {

135 
	`mem£t
(
mem±r
, 0, 
blksize
);

136 
pc
->
äLi¡
[
i
].
d
 = (
DmaDesütÜ
)
mem±r
;

140 
rv®
 = 
pc
->
äLi¡
;

141 
pc
->
äLi¡
 =c->äLi¡->
n
;

142 
rv®
->
n
 =v®->
p
 = 0;

143  
rv®
;

144 
	}
}

147 
	$lä
(
VMEDmaLi¡Node
 
d
)

149 iàÐ
d
->
p
 || d->
n
 )

151 
d
->
n
 = d->
þass
->
äLi¡
;

152 
d
->
þass
->
äLi¡
 = d;

154 
	}
}

157 
	$Ënq
(
VMEDmaLi¡Node
 
a
, VMEDmaLi¡Nod
d
)

159 iàÐ
a
 ) {

161 iàÐ
d
->
n
 || d->
p
 )

163 iàÐ(
d
->
n
 = 
a
->n) )

164 
a
->
n
->
p
 = 
d
;

165 
d
->
p
 = 
a
;

166 
a
->
n
 = 
d
;

169 iàÐ
d
->
n
 )

170 
d
->
n
->
p
 = d->p;

171 iàÐ
d
->
p
 )

172 
d
->
p
->
n
 = d->n;

173 
d
->
n
 = d->
p
 = 0;

176 
	}
}

180 
	$BSP_VMEDmaLi¡DesütÜS¹ToÞ
(vÞ©*
cÚÞËr
, 
chªÃl
, 
VMEDmaLi¡Node
 
n
)

182 iàÐ!
n
 )

184  
n
->
þass
->
	`desc_¡¬t
(
cÚÞËr
, 
chªÃl
,->
d
);

185 
	}
}

187 
VMEDmaLi¡Node


188 
	$BSP_VMEDmaLi¡DesütÜSupToÞ
(

189 
VMEDmaLi¡Node
 
n
,

190 
ut32_t
 
©_mask
,

191 
ut32_t
 
xãr_mode
,

192 
ut32_t
 
pci_addr
,

193 
ut32_t
 
vme_addr
,

194 
ut32_t
 
n_bys
)

196 iàÐ!
n
 )

199 iàÐ
n
->
þass
->
	`desc_£tup
Ò->
d
, 
©_mask
, 
xãr_mode
, 
pci_addr
, 
vme_addr
, 
n_bys
) ) {

203  
n
;

204 
	}
}

206 
VMEDmaLi¡Node


207 
	$BSP_VMEDmaLi¡DesütÜNewToÞ
(

208 
VMEDmaLi¡CÏss
 
pc
,

209 
ut32_t
 
©_mask
,

210 
ut32_t
 
xãr_mode
,

211 
ut32_t
 
pci_addr
,

212 
ut32_t
 
vme_addr
,

213 
ut32_t
 
n_bys
)

215 
VMEDmaLi¡Node
 
n
;

217 iàÐ!(
n
=
	`ÏÎoc
(
pc
)) )

220 iàÐ
n
->
þass
->
desc_
 )

221 
n
->
þass
->
	`desc_
Ò->
d
);

223 iàÐ
n
->
þass
->
	`desc_£tup
Ò->
d
, 
©_mask
, 
xãr_mode
, 
pci_addr
, 
vme_addr
, 
n_bys
) ) {

224 
	`BSP_VMEDmaLi¡DesütÜDe¡roy
(
n
);

227  
n
;

228 
	}
}

231 
	$BSP_VMEDmaLi¡DesütÜDe¡roy
(
BSP_VMEDmaLi¡DesütÜ
 
p
)

233 
VMEDmaLi¡Node
 
d
 = 
p
;

234  
	`lä
(
d
);

235 
	}
}

238 
	$BSP_VMEDmaLi¡De¡roy
(
BSP_VMEDmaLi¡DesütÜ
 
p
)

240 
VMEDmaLi¡Node
 
d
 = 
p
;

241 
VMEDmaLi¡Node
 
n
;

242 
d
) {

243 
n
 = 
d
->n;

244 iàÐ
	`BSP_VMEDmaLi¡DesütÜEnq
(0, 
d
) ||

245 
	`BSP_VMEDmaLi¡DesütÜDe¡roy
(
d
) )

247 
d
 = 
n
;

250 
	}
}

253 
	$BSP_VMEDmaLi¡DesütÜEnq
(
BSP_VMEDmaLi¡DesütÜ
 
p
, BSP_VMEDmaLi¡DesütÜ 
q
)

255 
VMEDmaLi¡Node
 
ªchÜ
 = 
p
;

256 
VMEDmaLi¡Node
 
d
 = 
q
;

257 
DmaDesütÜSNxt
 
£xt
 = 
d
->
þass
->
desc_£xt
;

259 iàÐ!
ªchÜ
 ) {

261 iàÐ
d
->
p
 )

262 
	`£xt
(
d
->
p
->d, d->
n
 ? d->n->d : 0);

264 
	`£xt
(
d
->d, 0);

266 iàÐ
d
->
þass
 !ð
ªchÜ
->class )

269 iàÐ
	`Ënq
(
ªchÜ
, 
d
) )

272 iàÐ
ªchÜ
 ) {

273 
	`£xt
(
d
->d, d->
n
 ? d->n->d : 0);

274 
	`£xt
(
ªchÜ
->
d
, d->d);

277 
	}
}

279 
BSP_VMEDmaLi¡DesütÜ


280 
	$BSP_VMEDmaLi¡DesütÜNext
(
BSP_VMEDmaLi¡DesütÜ
 
p
)

282 
VMEDmaLi¡Node
 
d
 = 
p
;

283  
d
->
n
;

284 
	}
}

286 
BSP_VMEDmaLi¡DesütÜ


287 
	$BSP_VMEDmaLi¡DesütÜP»v
(
BSP_VMEDmaLi¡DesütÜ
 
p
)

289 
VMEDmaLi¡Node
 
d
 = 
p
;

290  
d
->
p
;

291 
	}
}

294 
	$BSP_VMEDmaLi¡DesütÜSU¤
(
BSP_VMEDmaLi¡DesütÜ
 
p
, *
u¤D©a
)

296 
VMEDmaLi¡Node
 
d
 = 
p
;

297 
d
->
u¤D©a
 = usrData;

298 
	}
}

301 
	$BSP_VMEDmaLi¡DesütÜGU¤
(
BSP_VMEDmaLi¡DesütÜ
 
p
)

303 
VMEDmaLi¡Node
 
d
 = 
p
;

304  
d
->
u¤D©a
;

305 
	}
}

308 
	$BSP_VMEDmaLi¡Reäesh
(
BSP_VMEDmaLi¡DesütÜ
 
p
)

310 
VMEDmaLi¡Node
 
ªchÜ
 = 
p
;

311 
DmaDesütÜReä
 
desc_»ä
;

312 
VMEDmaLi¡Node
 
n
;

313 iàÐ(
desc_»ä
 = 
ªchÜ
->
þass
->desc_refr) ) {

314  
n
 = 
ªchÜ
;; =->n ) {

315 
	`desc_»ä
(
n
->
d
);

319 
	}
}

321 #ifdeà
DEBUG


323 
	$BSP_VMEDmaLi¡Dump
(
BSP_VMEDmaLi¡DesütÜ
 
p
)

325 
VMEDmaLi¡Node
 
d
 = 
p
;

326 
d
) {

327 
	`´tf
("----------\n");

328 
	`Írt
(
d
);

329 ià(
d
->
þass
->
desc_dump
)

330 
d
->
þass
->
	`desc_dump
(d->d);

331 
d
 = d->
n
;

333 
	}
}

	@src/lib/libbsp/shared/vmeUniverse/bspVmeDmaList.h

10 #iâdeà
BSP_VME_DMA_LIST_H


11 
	#BSP_VME_DMA_LIST_H


	)

90 
	~<¡dt.h
>

92 
	~<b¥/VMEDMA.h
>

94 #ifdeà
__ýlu¥lus


98 
VMEDmaLi¡NodeRec_
 *
	tVMEDmaLi¡Node
;

100 
VMEDmaLi¡CÏssRec_
 *
	tVMEDmaLi¡CÏss
;

110 
VMEDmaLi¡Node


111 
BSP_VMEDmaLi¡DesütÜNewToÞ
(

112 
VMEDmaLi¡CÏss
 
pc
,

113 
ut32_t
 
©_mask
,

114 
ut32_t
 
xãr_mode
,

115 
ut32_t
 
pci_addr
,

116 
ut32_t
 
vme_addr
,

117 
ut32_t
 
n_bys
);

120 
VMEDmaLi¡Node


121 
BSP_VMEDmaLi¡DesütÜSupToÞ
(

122 
VMEDmaLi¡Node
 
n
,

123 
ut32_t
 
©_mask
,

124 
ut32_t
 
xãr_mode
,

125 
ut32_t
 
pci_addr
,

126 
ut32_t
 
vme_addr
,

127 
ut32_t
 
n_bys
);

134 
BSP_VMEDmaLi¡DesütÜS¹ToÞ
(vÞ©*
cÚÞËr
, 
chªÃl
, 
VMEDmaLi¡Node
 
n
);

136 #ifdeà
__ýlu¥lus


	@src/lib/libbsp/shared/vmeUniverse/bspVmeDmaListP.h

9 #iâdeà
BSP_VME_DMA_LIST_P_H


10 
	#BSP_VME_DMA_LIST_P_H


	)

12 
	~<b¥/b¥VmeDmaLi¡.h
>

64 #ifdeà
__ýlu¥lus


68 *
	tDmaDesütÜ
;

78 
DmaDesütÜ
 (*
	tDmaDesütÜAÎoc
)();

79 (*
DmaDesütÜF»e
è(
	tDmaDesütÜ
 
	td
);

80 (*
DmaDesütÜIn
è(
	tDmaDesütÜ
 
	td
);

82 (*
DmaDesütÜSup
)(
	tDmaDesütÜ
 
	td
, 
	tut32_t
, uint32_t, uint32_t, uint32_t, uint32_t);

83 (*
DmaDesütÜSNxt
)(
	tDmaDesütÜ
 
	td
, DmaDesütÜ 
	tÃxt
);

84 (*
DmaDesütÜS¹
)(vÞ©*
	tcÚÞËr_addr
, 
	tchªÃl
, 
	tDmaDesütÜ
);

85 (*
DmaDesütÜReä
è(
	tDmaDesütÜ
);

86 (*
DmaDesütÜDump
è(
	tDmaDesütÜ
);

89 
	sVMEDmaLi¡CÏssRec_
 {

90 
desc_size
;

91 
desc_®ign
;

92 
VMEDmaLi¡Node
 
äLi¡
;

93 
DmaDesütÜAÎoc
 
desc_®loc
;

94 
DmaDesütÜF»e
 
desc_ä
;

95 
DmaDesütÜIn
 
desc_
;

96 
DmaDesütÜSNxt
 
desc_£xt
;

97 
DmaDesütÜSup
 
desc_£tup
;

98 
DmaDesütÜS¹
 
desc_¡¬t
;

99 
DmaDesütÜReä
 
desc_»ä
;

100 
DmaDesütÜDump
 
desc_dump
;

101 } 
	tVMEDmaLi¡CÏssRec
;

103 #ifdeà
__ýlu¥lus


	@src/lib/libbsp/shared/vmeUniverse/doxygen.h

	@src/lib/libbsp/shared/vmeUniverse/vmeTsi148.c

48 
	~<¹ems.h
>

49 
	~<¡dio.h
>

50 
	~<¡d¬g.h
>

51 
	~<b¥/q.h
>

52 
	~<¡dlib.h
>

53 
	~<¹ems/b¥Io.h
>

54 
	~<¹ems/rÜ.h
>

55 
	~<¹ems/pci.h
>

56 
	~<b¥.h
>

57 
	~<libýu/byÜd.h
>

59 
	#__INSIDE_RTEMS_BSP__


	)

60 
	#_VME_TSI148_DECLARE_SHOW_ROUTINES


	)

62 
	~"vmeTsi148.h
"

63 
	~<b¥/VMEDMA.h
>

64 
	~"vmeTsi148DMA.h
"

65 
	~"b¥VmeDmaLi¡P.h
"

68 
	#DEBUG


	)

70 #ifdeà
DEBUG


71 
	#STATIC


	)

73 
	#STATIC
 

	)

78 
	#TSI_NUM_WIRES
 4

	)

80 
	#TSI148_NUM_OPORTS
 8

	)

81 
	#TSI148_NUM_IPORTS
 8

	)

83 
	#NUM_TSI_DEVS
 2

	)

85 
	#PCI_VENDOR_TUNDRA
 0x10e3

	)

86 
	#PCI_DEVICE_TSI148
 0x0148

	)

88 
	#TSI_OTSAU_SPACING
 0x020

	)

90 
	#TSI_OTSAU0_REG
 0x100

	)

91 
	#TSI_OTSAL0_REG
 0x104

	)

92 
	#TSI_OTEAU0_REG
 0x108

	)

93 
	#TSI_OTEAL0_REG
 0x10c

	)

94 
	#TSI_OTOFU0_REG
 0x110

	)

95 
	#TSI_OTOFL0_REG
 0x114

	)

96 
	#TSI_OTBS0_REG
 0x118

	)

97 
	#TSI_OTAT0_REG
 0x11c

	)

98 
	#TSI_OTSAU_REG
(
pÜt
è(
TSI_OTSAU0_REG
 + (ÕÜt)<<5))

	)

99 
	#TSI_OTSAL_REG
(
pÜt
è(
TSI_OTSAL0_REG
 + (ÕÜt)<<5))

	)

100 
	#TSI_OTEAU_REG
(
pÜt
è(
TSI_OTEAU0_REG
 + (ÕÜt)<<5))

	)

101 
	#TSI_OTEAL_REG
(
pÜt
è(
TSI_OTEAL0_REG
 + (ÕÜt)<<5))

	)

102 
	#TSI_OTOFU_REG
(
pÜt
è(
TSI_OTOFU0_REG
 + (ÕÜt)<<5))

	)

103 
	#TSI_OTOFL_REG
(
pÜt
è(
TSI_OTOFL0_REG
 + (ÕÜt)<<5))

	)

104 
	#TSI_OTBS_REG
(
pÜt
è(
TSI_OTBS0_REG
 + (ÕÜt)<<5))

	)

105 
	#TSI_OTAT_REG
(
pÜt
è(
TSI_OTAT0_REG
 + (ÕÜt)<<5))

	)

106 
	#TSI_OTAT_EN
 (1<<31)

	)

107 
	#TSI_OTAT_MRPFD
 (1<<18)

	)

108 
	#TSI_OTAT_PFS
(
x
è(((x)&3)<<16)

	)

109 
	#TSI_OTAT_2eSSTM
(
x
è(((x)&7)<<11)

	)

110 
	#TSI_OTAT_2eSSTM_160
 
	`TSI_OTAT_2eSSTM
(0)

	)

111 
	#TSI_OTAT_2eSSTM_267
 
	`TSI_OTAT_2eSSTM
(1)

	)

112 
	#TSI_OTAT_2eSSTM_320
 
	`TSI_OTAT_2eSSTM
(2)

	)

113 
	#TSI_OTAT_TM
(
x
è(((x)&7)<<8)

	)

114 
	#TSI_TM_SCT_IDX
 0

	)

115 
	#TSI_TM_BLT_IDX
 1

	)

116 
	#TSI_TM_MBLT_IDX
 2

	)

117 
	#TSI_TM_2eVME_IDX
 3

	)

118 
	#TSI_TM_2eSST_IDX
 4

	)

119 
	#TSI_TM_2eSSTB_IDX
 5

	)

120 
	#TSI_OTAT_DBW
(
x
è(((x)&3)<<6)

	)

121 
	#TSI_OTAT_SUP
 (1<<5)

	)

122 
	#TSI_OTAT_PGM
 (1<<4)

	)

123 
	#TSI_OTAT_ADMODE
(
x
è(((x)&0xf))

	)

124 
	#TSI_OTAT_ADMODE_A16
 0

	)

125 
	#TSI_OTAT_ADMODE_A24
 1

	)

126 
	#TSI_OTAT_ADMODE_A32
 2

	)

127 
	#TSI_OTAT_ADMODE_A64
 4

	)

128 
	#TSI_OTAT_ADMODE_CSR
 5

	)

129 
	#TSI_OTAT_ADMODE_USR1
 8

	)

130 
	#TSI_OTAT_ADMODE_USR2
 9

	)

131 
	#TSI_OTAT_ADMODE_USR3
 0xa

	)

132 
	#TSI_OTAT_ADMODE_USR4
 0xb

	)

134 
	#TSI_VIACK_1_REG
 0x204

	)

136 
	#TSI_VMCTRL_REG
 0x234

	)

137 
	#TSI_VMCTRL_VSA
 (1<<27)

	)

138 
	#TSI_VMCTRL_VS
 (1<<26)

	)

139 
	#TSI_VMCTRL_DHB
 (1<<25)

	)

140 
	#TSI_VMCTRL_DWB
 (1<<24)

	)

141 
	#TSI_VMCTRL_RMWEN
 (1<<20)

	)

142 
	#TSI_VMCTRL_A64DS
 (1<<16)

	)

143 
	#TSI_VMCTRL_VTOFF_MSK
 (7<<12)

	)

144 
	#TSI_VMCTRL_VTOFF_0us
 (0<<12)

	)

145 
	#TSI_VMCTRL_VTOFF_1us
 (1<<12)

	)

146 
	#TSI_VMCTRL_VTOFF_2us
 (2<<12)

	)

147 
	#TSI_VMCTRL_VTOFF_4us
 (3<<12)

	)

148 
	#TSI_VMCTRL_VTOFF_8us
 (4<<12)

	)

149 
	#TSI_VMCTRL_VTOFF_16us
 (5<<12)

	)

150 
	#TSI_VMCTRL_VTOFF_32us
 (6<<12)

	)

151 
	#TSI_VMCTRL_VTOFF_64us
 (7<<12)

	)

152 
	#TSI_VMCTRL_VTON_MSK
 (7<< 8)

	)

153 
	#TSI_VMCTRL_VTON_4us
 (0<< 8)

	)

154 
	#TSI_VMCTRL_VTON_8us
 (1<< 8)

	)

155 
	#TSI_VMCTRL_VTON_16us
 (2<< 8)

	)

156 
	#TSI_VMCTRL_VTON_32us
 (3<< 8)

	)

157 
	#TSI_VMCTRL_VTON_64us
 (4<< 8)

	)

158 
	#TSI_VMCTRL_VTON_128us
 (5<< 8)

	)

159 
	#TSI_VMCTRL_VTON_256us
 (6<< 8)

	)

160 
	#TSI_VMCTRL_VTON_512us
 (7<< 8)

	)

161 
	#TSI_VMCTRL_VREL_MSK
 (3<< 3)

	)

162 
	#TSI_VMCTRL_VREL_TON_Ü_DONE
 (0<< 3)

	)

163 
	#TSI_VMCTRL_VREL_TONªdREQ_Ü_DONE
 (1<< 3)

	)

164 
	#TSI_VMCTRL_VREL_TONªdBCLR_Ü_DONE
 (2<< 3)

	)

165 
	#TSI_VMCTRL_VREL_TONÜDONE_ªd_REQ
 (3<< 3)

	)

166 
	#TSI_VMCTRL_VFAIR
 (1<< 2)

	)

167 
	#TSI_VMCTRL_VREQL_MSK
 (3<< 0)

	)

168 
	#TSI_VMCTRL_VREQL
(
x
è((x)&3)

	)

170 
	#TSI_VCTRL_REG
 0x238

	)

171 
	#TSI_VCTRL_DLT_MSK
 (0xf<<24)

	)

172 
	#TSI_VCTRL_NELBB
 (1<<20)

	)

173 
	#TSI_VCTRL_SRESET
 (1<<17)

	)

174 
	#TSI_VCTRL_LRESET
 (1<<16)

	)

175 
	#TSI_VCTRL_SFAILAI
 (1<<15)

	)

176 
	#TSI_VCTRL_BID_MSK
 (0x1f<<8)

	)

177 
	#TSI_VCTRL_ATOEN
 (1<< 7)

	)

178 
	#TSI_VCTRL_ROBIN
 (1<< 6)

	)

179 
	#TSI_VCTRL_GTO_MSK
 (7<< 0)

	)

182 
	#TSI_VSTAT_REG
 0x23c

	)

183 
	#TSI_VSTAT_CPURST
 (1<<15è

	)

184 
	#TSI_VSTAT_BDFAIL
 (1<<14)

	)

185 
	#TSI_VSTAT_PURSTS
 (1<<12)

	)

186 
	#TSI_VSTAT_BDFAILS
 (1<<11)

	)

187 
	#TSI_VSTAT_SYSFLS
 (1<<10)

	)

188 
	#TSI_VSTAT_ACFAILS
 (1<< 9)

	)

189 
	#TSI_VSTAT_SCONS
 (1<< 8)

	)

190 
	#TSI_VSTAT_GAP
 (1<< 5)

	)

191 
	#TSI_VSTAT_GA_MSK
 (0x1f)

	)

193 
	#TSI_VEAU_REG
 0x260

	)

194 
	#TSI_VEAL_REG
 0x264

	)

195 
	#TSI_VEAT_REG
 0x268

	)

197 
	#TSI_ITSAU_SPACING
 0x020

	)

199 
	#TSI_ITSAU0_REG
 0x300

	)

200 
	#TSI_ITSAL0_REG
 0x304

	)

201 
	#TSI_ITEAU0_REG
 0x308

	)

202 
	#TSI_ITEAL0_REG
 0x30c

	)

203 
	#TSI_ITOFU0_REG
 0x310

	)

204 
	#TSI_ITOFL0_REG
 0x314

	)

205 
	#TSI_ITAT0_REG
 0x318

	)

206 
	#TSI_ITSAU_REG
(
pÜt
è(
TSI_ITSAU0_REG
 + (ÕÜt)<<5))

	)

207 
	#TSI_ITSAL_REG
(
pÜt
è(
TSI_ITSAL0_REG
 + (ÕÜt)<<5))

	)

208 
	#TSI_ITEAU_REG
(
pÜt
è(
TSI_ITEAU0_REG
 + (ÕÜt)<<5))

	)

209 
	#TSI_ITEAL_REG
(
pÜt
è(
TSI_ITEAL0_REG
 + (ÕÜt)<<5))

	)

210 
	#TSI_ITOFU_REG
(
pÜt
è(
TSI_ITOFU0_REG
 + (ÕÜt)<<5))

	)

211 
	#TSI_ITOFL_REG
(
pÜt
è(
TSI_ITOFL0_REG
 + (ÕÜt)<<5))

	)

212 
	#TSI_ITAT_REG
(
pÜt
è(
TSI_ITAT0_REG
 + (ÕÜt)<<5))

	)

214 
	#TSI_ITAT_EN
 (1<<31)

	)

215 
	#TSI_ITAT_TH
 (1<<18)

	)

216 
	#TSI_ITAT_VFS
(
x
è(((x)&3)<<16)

	)

217 
	#TSI_ITAT_2eSSTM
(
x
è(((x)&7)<<12)

	)

218 
	#TSI_ITAT_2eSSTM_160
 
	`TSI_ITAT_2eSSTM
(0)

	)

219 
	#TSI_ITAT_2eSSTM_267
 
	`TSI_ITAT_2eSSTM
(1)

	)

220 
	#TSI_ITAT_2eSSTM_320
 
	`TSI_ITAT_2eSSTM
(2)

	)

221 
	#TSI_ITAT_2eSSTB
 (1<<11)

	)

222 
	#TSI_ITAT_2eSST
 (1<<10)

	)

223 
	#TSI_ITAT_2eVME
 (1<<9)

	)

224 
	#TSI_ITAT_MBLT
 (1<<8)

	)

225 
	#TSI_ITAT_BLT
 (1<<7)

	)

226 
	#TSI_ITAT_AS
(
x
è(((x)&7)<<4)

	)

227 
	#TSI_ITAT_ADMODE_A16
 (0<<4)

	)

228 
	#TSI_ITAT_ADMODE_A24
 (1<<4)

	)

229 
	#TSI_ITAT_ADMODE_A32
 (2<<4)

	)

230 
	#TSI_ITAT_ADMODE_A64
 (4<<4)

	)

231 
	#TSI_ITAT_SUP
 (1<<3)

	)

232 
	#TSI_ITAT_USR
 (1<<2)

	)

233 
	#TSI_ITAT_PGM
 (1<<1)

	)

234 
	#TSI_ITAT_DATA
 (1<<0)

	)

236 
	#TSI_CBAU_REG
 0x40c

	)

237 
	#TSI_CBAL_REG
 0x410

	)

238 
	#TSI_CRGAT_REG
 0x414

	)

239 
	#TSI_CRGAT_EN
 (1<<7)

	)

240 
	#TSI_CRGAT_AS_MSK
 (7<<4)

	)

241 
	#TSI_CRGAT_A16
 (0<<4)

	)

242 
	#TSI_CRGAT_A24
 (1<<4)

	)

243 
	#TSI_CRGAT_A32
 (2<<4)

	)

244 
	#TSI_CRGAT_A64
 (4<<4)

	)

245 
	#TSI_CRGAT_SUP
 (1<<3)

	)

246 
	#TSI_CRGAT_USR
 (1<<2)

	)

247 
	#TSI_CRGAT_PGM
 (1<<1)

	)

248 
	#TSI_CRGAT_DATA
 (1<<0)

	)

250 
	#TSI_VICR_REG
 0x440

	)

251 
	#TSI_VICR_CNTS
(
v
è(((v)&3)<<30)

	)

252 
	#TSI_VICR_CNTS_DIS
 (0<<30)

	)

253 
	#TSI_VICR_CNTS_IRQ1
 (1<<30)

	)

254 
	#TSI_VICR_CNTS_IRQ2
 (2<<30)

	)

255 
	#TSI_VICR_EDGIS
(
v
è(((v)&3)<<28)

	)

256 
	#TSI_VICR_EDGIS_DIS
 (0<<28)

	)

257 
	#TSI_VICR_EDGIS_IRQ1
 (1<<28)

	)

258 
	#TSI_VICR_EDGIS_IRQ2
 (2<<28)

	)

259 
	#TSI_VICR_IRQ1F
(
v
è(((v)&3)<<26)

	)

260 
	#TSI_VICR_IRQ1F_NORML
 (0<<26)

	)

261 
	#TSI_VICR_IRQ1F_PULSE
 (1<<26)

	)

262 
	#TSI_VICR_IRQ1F_CLOCK
 (2<<26)

	)

263 
	#TSI_VICR_IRQ1F_1MHZ
 (3<<26)

	)

264 
	#TSI_VICR_IRQ2F
(
v
è(((v)&3)<<24)

	)

265 
	#TSI_VICR_IRQ2F_NORML
 (0<<24)

	)

266 
	#TSI_VICR_IRQ2F_PULSE
 (1<<24)

	)

267 
	#TSI_VICR_IRQ2F_CLOCK
 (2<<24)

	)

268 
	#TSI_VICR_IRQ2F_1MHZ
 (3<<24)

	)

269 
	#TSI_VICR_BIP
 (1<<23)

	)

270 
	#TSI_VICR_BIPS
 (1<<22)

	)

271 
	#TSI_VICR_IRQC
 (1<<15)

	)

272 
	#TSI_VICR_IRQLS
(
v
è(((v)&7)<<12)

	)

273 
	#TSI_VICR_IRQS
 (1<<11)

	)

274 
	#TSI_VICR_IRQL
(
v
è(((v)&7)<<8)

	)

275 
	#TSI_VICR_STID
(
v
è((v)&0xff)

	)

276 
	#TSI_INTEN_REG
 0x448

	)

277 
	#TSI_INTEO_REG
 0x44c

	)

278 
	#TSI_INTS_REG
 0x450

	)

279 
	#TSI_INTS_IRQ1S
 (1<<1)

	)

280 
	#TSI_INTS_IRQ2S
 (1<<2)

	)

281 
	#TSI_INTS_IRQ3S
 (1<<3)

	)

282 
	#TSI_INTS_IRQ4S
 (1<<4)

	)

283 
	#TSI_INTS_IRQ5S
 (1<<5)

	)

284 
	#TSI_INTS_IRQ6S
 (1<<6)

	)

285 
	#TSI_INTS_IRQ7S
 (1<<7)

	)

286 
	#TSI_INTS_ACFLS
 (1<<8)

	)

287 
	#TSI_INTS_SYSFLS
 (1<<9)

	)

288 
	#TSI_INTS_IACKS
 (1<<10)

	)

289 
	#TSI_INTS_VIES
 (1<<11)

	)

290 
	#TSI_INTS_VERRS
 (1<<12)

	)

291 
	#TSI_INTS_PERRS
 (1<<13)

	)

292 
	#TSI_INTS_MB0S
 (1<<16)

	)

293 
	#TSI_INTS_MB1S
 (1<<17)

	)

294 
	#TSI_INTS_MB2S
 (1<<18)

	)

295 
	#TSI_INTS_MB3S
 (1<<19)

	)

296 
	#TSI_INTS_LM0S
 (1<<20)

	)

297 
	#TSI_INTS_LM1S
 (1<<21)

	)

298 
	#TSI_INTS_LM2S
 (1<<22)

	)

299 
	#TSI_INTS_LM3S
 (1<<23)

	)

300 
	#TSI_INTS_DMA0S
 (1<<24)

	)

301 
	#TSI_INTS_DMA1S
 (1<<25)

	)

302 
	#TSI_INTC_REG
 0x454

	)

303 
	#TSI_INTC_ACFLC
 (1<<8)

	)

304 
	#TSI_INTC_SYSFLC
 (1<<9)

	)

305 
	#TSI_INTC_IACKC
 (1<<10)

	)

306 
	#TSI_INTC_VIEC
 (1<<11)

	)

307 
	#TSI_INTC_VERRC
 (1<<12)

	)

308 
	#TSI_INTC_PERRC
 (1<<13)

	)

309 
	#TSI_INTC_MB0C
 (1<<16)

	)

310 
	#TSI_INTC_MB1C
 (1<<17)

	)

311 
	#TSI_INTC_MB2C
 (1<<18)

	)

312 
	#TSI_INTC_MB3C
 (1<<19)

	)

313 
	#TSI_INTC_LM0C
 (1<<20)

	)

314 
	#TSI_INTC_LM1C
 (1<<21)

	)

315 
	#TSI_INTC_LM2C
 (1<<22)

	)

316 
	#TSI_INTC_LM3C
 (1<<23)

	)

317 
	#TSI_INTC_DMA0C
 (1<<24)

	)

318 
	#TSI_INTC_DMA1C
 (1<<25)

	)

319 
	#TSI_INTM1_REG
 0x458

	)

320 
	#TSI_INTM2_REG
 0x45c

	)

322 
	#TSI_CBAR_REG
 0xffc

	)

324 
	#TSI_CSR_OFFSET
 0x7f000

	)

326 
	#TSI_CRG_SIZE
 (1<<12è

	)

329 
	#TSI_RD
(
ba£
, 
»g
è
	`_be32
((vÞ©
ut32_t
 *)((ba£è+ (»g)/(*ba£)))

	)

330 
	#TSI_RD16
(
ba£
, 
»g
è
	`_be16
((vÞ©
ut16_t
 *)(ba£è+ (»g)/(ut16_t))

	)

331 
	#TSI_LE_RD16
(
ba£
, 
»g
è
	`_Ë16
((vÞ©
ut16_t
 *)(ba£è+ (»g)/(ut16_t))

	)

332 
	#TSI_LE_RD32
(
ba£
, 
»g
è
	`_Ë32
((vÞ©
ut32_t
 *)(ba£è+ (»g)/(*ba£))

	)

333 
	#TSI_RD8
(
ba£
, 
»g
è
	`_8
((vÞ©
ut8_t
 *)(ba£è+ (»g))

	)

334 
	#TSI_WR
(
ba£
, 
»g
, 
v®
è
	`out_be32
((vÞ©
ut32_t
 *)((ba£è+ (»g)/(*ba£)), v®)

	)

336 
	#UNIV_SCTL_AM_MASK
 (
UNIV_CTL_VAS
 | 
UNIV_SCTL_PGM
 | 
UNIV_SCTL_DAT
 | 
UNIV_SCTL_USER
 | 
UNIV_SCTL_SUPER
)

	)

340 #iâdeà
BSP_PCI_FIND_DEVICE


341 
	#BSP_PCI_FIND_DEVICE
 
pci_fd_deviû


	)

343 #iâdeà
BSP_PCI_CONFIG_IN_LONG


344 
	#BSP_PCI_CONFIG_IN_LONG
 
pci_»ad_cÚfig_dwÜd


	)

346 #iâdeà
BSP_PCI_CONFIG_IN_SHORT


347 
	#BSP_PCI_CONFIG_IN_SHORT
 
pci_»ad_cÚfig_wÜd


	)

349 #iâdeà
BSP_PCI_CONFIG_OUT_SHORT


350 
	#BSP_PCI_CONFIG_OUT_SHORT
 
pci_wre_cÚfig_wÜd


	)

352 #iâdeà
BSP_PCI_CONFIG_IN_BYTE


353 
	#BSP_PCI_CONFIG_IN_BYTE
 
pci_»ad_cÚfig_by


	)

356 
ut32_t
 
	tpci_ulÚg
;

358 #ifdeà
__BIG_ENDIAN__


359 
le
 
	$¡_be32
Ð
ut32_t
 *
a
, ut32_
v
)

361 *
a
 = 
v
;

362 
	}
}

363 
le
 
ut32_t
 
	$ld_be32
Ð
ut32_t
 *
a
 )

365  *
a
;

366 
	}
}

367 #ià
defed
(
__LITTLE_ENDIAN__
)

373 #iâdeà
BSP_LOCAL2PCI_ADDR


375 #iâdeà
PCI_DRAM_OFFSET


376 
	#PCI_DRAM_OFFSET
 0

	)

378 
	#BSP_LOCAL2PCI_ADDR
(
l
è(((
ut32_t
î)+
PCI_DRAM_OFFSET
)

	)

384 #iâdeà
BSP_PCI2LOCAL_ADDR


385 #iâdeà
PCI_MEM_BASE


386 
	#PCI_MEM_BASE
 0

	)

388 
	#BSP_PCI2LOCAL_ADDR
(
memaddr
è(()(memaddrè+ 
PCI_MEM_BASE
)

	)

391 
ut32_t
 
	tBEV®ue
;

394 
BERegi¡
 *
	mba£
;

395 
	mqLe
;

396 
	mpic_p
[
TSI_NUM_WIRES
];

397 } 
	tTsi148Dev
;

399 
Tsi148Dev
 
	gdevs
[
NUM_TSI_DEVS
] = {{0}};

401 
	#THEBASE
 (
devs
[0].
ba£
)

	)

404 
vmeTsi148RegPÜt
;

405 
vmeTsi148RegCSR
;

414 
	$u´tf
(
FILE
 *
f
, *
fmt
, ...)

416 
va_li¡
 
­
;

417 
	`va_¡¬t
(
­
, 
fmt
);

418 ià(!
f
 || !
_impu»_±r
->
__sdid
) {

422 
	`v´tk
(
fmt
,
­
);

425 
	`vårtf
(
f
,
fmt
,
­
);

427 
	`va_d
(
­
);

428 
	}
}

430 
	#CHECK_BASE
(
ba£
,
qut
,
rv®
) \

432 iàÐ!
ba£
 ) { \

433 iàÐ!
qut
 ) { \

434 
	`u´tf
(
¡dr
,"Tsi148: Driverot initialized\n"); \

436  
rv®
; \

438 } 0)

	)

441 
	$vmeTsi148FdPciBa£
(

442 
¡ªû
,

443 
BERegi¡
 **
pba£


446 
bus
,
dev
,
fun
;

447 
pci_ulÚg
 
bu§ddr
;

448 
qle
;

449 
wrd
;

451 ià(
	`BSP_PCI_FIND_DEVICE
(

452 
PCI_VENDOR_TUNDRA
,

453 
PCI_DEVICE_TSI148
,

454 
¡ªû
,

455 &
bus
,

456 &
dev
,

457 &
fun
))

459 ià(
	`BSP_PCI_CONFIG_IN_LONG
(
bus
,
dev
,
fun
,
PCI_BASE_ADDRESS_0
,&
bu§ddr
))

463 *
pba£
=(
BERegi¡
*)(((
pci_ulÚg
)
	`BSP_PCI2LOCAL_ADDR
(
bu§ddr
)) & ~0xff);

465 ià(
	`BSP_PCI_CONFIG_IN_BYTE
(
bus
,
dev
,
fun
,
PCI_INTERRUPT_LINE
,&
qle
))

469 
	`BSP_PCI_CONFIG_IN_SHORT
(
bus
, 
dev
, 
fun
, 
PCI_COMMAND
, &
wrd
);

470 
	`BSP_PCI_CONFIG_OUT_SHORT
(
bus
, 
dev
, 
fun
, 
PCI_COMMAND
, 
wrd
 | 
PCI_COMMAND_MEMORY
 | 
PCI_COMMAND_MASTER
);

472  
qle
;

473 
	}
}

476 
	$vmeTsi148InIn¡ªû
(
¡ªû
)

478 
q
;

479 
BERegi¡
 *
ba£
;

481 iàÐ
¡ªû
 >ð
NUM_TSI_DEVS
 )

483 iàÐ
devs
[
¡ªû
].
ba£
 )

486 ià((
q
=
	`vmeTsi148FdPciBa£
(
¡ªû
,&
ba£
)) < 0) {

487 
	`u´tf
(
¡dr
,"unableo find Tsi148 inci config space\n");

489 
	`u´tf
(
¡dr
,"Tundra Tsi148 PCI-VME bridge detectedt 0x%08x, IRQ %d\n",

490 ()
ba£
, 
q
);

492 
devs
[0].
ba£
 = base;

493 
devs
[0].
qLe
 = 
q
;

495  
q
 < 0 ? -1 : 0;

496 
	}
}

499 
	$vmeTsi148In
()

501  
	`vmeTsi148InIn¡ªû
(0);

502 
	}
}

506 
	$vmeTsi148Re£tXX
(
BERegi¡
 *
ba£
)

508 
pÜt
;

509 
ut32_t
 
v
;

511 
	`CHECK_BASE
(
ba£
,0, );

513 
	`vmeTsi148Di§bËAÎOutboundPÜtsXX
(
ba£
);

514  
pÜt
=0;Ü< 
TSI148_NUM_OPORTS
;ort++ )

515 
	`TSI_WR
(
ba£
, 
	`TSI_OTBS_REG
(
pÜt
), 0);

516 
	`TSI_WR
(
ba£
, 
TSI_INTEO_REG
, 0);

517 
	`TSI_WR
(
ba£
, 
TSI_INTEN_REG
, 0);

518 
	`TSI_WR
(
ba£
, 
TSI_INTC_REG
, 0xffffffff);

519 
	`TSI_WR
(
ba£
, 
TSI_INTM1_REG
, 0);

520 
	`TSI_WR
(
ba£
, 
TSI_INTM2_REG
, 0);

521 
	`TSI_WR
(
ba£
, 
TSI_VICR_REG
, 0);

522 
	`TSI_WR
(
ba£
, 
TSI_VEAT_REG
, 
TSI_VEAT_VESCL
);

524 
	#TSI_VSTAT_BDFAIL
 (1<<14)

	)

525 
	`TSI_WR
(
ba£
, 
TSI_VSTAT_REG
, 
	`TSI_RD
(ba£, TSI_VSTAT_REGè& ~
TSI_VSTAT_BDFAIL
);

532 
v
 = 
	`TSI_RD
(
ba£
, 
TSI_VMCTRL_REG
);

533 
v
 &ð~Ð
TSI_VMCTRL_VTON_MSK
 | 
TSI_VMCTRL_VREL_MSK
 );

534 
v
 |ð(
TSI_VMCTRL_VTON_512us
 | 
TSI_VMCTRL_VREL_TONÜDONE_ªd_REQ
 );

535 
	`TSI_WR
(
ba£
, 
TSI_VMCTRL_REG
, 
v
);

536 
	}
}

539 
	$vmeTsi148Re£t
()

541 
	`vmeTsi148Re£tXX
(
THEBASE
);

542 
	}
}

545 
	$vmeTsi148Re£tBusXX
(
BERegi¡
 *
ba£
)

547 
æags
;

548 
ut32_t
 
v
;

550 
	`¹ems_¼u±_di§bË
(
æags
);

551 
v
 = 
	`TSI_RD
(
ba£
, 
TSI_VCTRL_REG
);

552 
	`TSI_WR
(
ba£
, 
TSI_VCTRL_REG
, 
v
 | 
TSI_VCTRL_SRESET
);

553 
	`¹ems_¼u±_abË
(
æags
);

554 
	}
}

557 
	$vmeTsi148Re£tBus
()

559 
	`vmeTsi148Re£tBusXX
(
THEBASE
);

560 
	}
}

567 
	$ck2es¡
(
am
)

569 iàÐ
	`VME_AM_IS_2eSST
(
am
) ) {

571 
am
 &ð~
VME_AM_MASK
;

572 
am
 |ð
VME_AM_2eVME_6U
;

574  
am
;

575 
	}
}

578 
	$am2omode
(
add»ss_¥aû
, *
pmode
)

580 
mode
 = 0;

581 
tm
 = 
TSI_TM_SCT_IDX
;

583  
VME_MODE_DBW_MSK
 & 
add»ss_¥aû
 ) {

584 
VME_MODE_DBW8
:

587 
VME_MODE_DBW16
:

591 
VME_MODE_DBW32
:

592 
mode
 |ð
	`TSI_OTAT_DBW
(1);

596 iàÐ! (
VME_MODE_PREFETCH_ENABLE
 & 
add»ss_¥aû
) )

597 
mode
 |ð
TSI_OTAT_MRPFD
;

599 
mode
 |ð
	`TSI_OTAT_PFS
(
add»ss_¥aû
>>
_LD_VME_MODE_PREFETCHSZ
);

602 
add»ss_¥aû
 = 
	`ck2es¡
(address_space);

604 
add»ss_¥aû
 & 
VME_AM_MASK
) {

605 
VME_AM_STD_SUP_PGM
:

606 
VME_AM_STD_USR_PGM
:

608 
mode
 |ð
TSI_OTAT_PGM
;

611 
VME_AM_STD_SUP_BLT
:

612 
VME_AM_STD_SUP_MBLT
:

614 
VME_AM_STD_USR_BLT
:

615 
VME_AM_STD_USR_MBLT
:

616  
add»ss_¥aû
 & 3 ) {

617 0: 
tm
 = 
TSI_TM_MBLT_IDX
; ;

618 3: 
tm
 = 
TSI_TM_BLT_IDX
; ;

622 
VME_AM_STD_SUP_DATA
:

623 
VME_AM_STD_USR_DATA
:

625 
mode
 |ð
TSI_OTAT_ADMODE_A24
;

628 
VME_AM_EXT_SUP_PGM
:

629 
VME_AM_EXT_USR_PGM
:

630 
mode
 |ð
TSI_OTAT_PGM
;

633 
VME_AM_EXT_SUP_BLT
:

634 
VME_AM_EXT_SUP_MBLT
:

636 
VME_AM_EXT_USR_BLT
:

637 
VME_AM_EXT_USR_MBLT
:

638  
add»ss_¥aû
 & 3 ) {

639 0: 
tm
 = 
TSI_TM_MBLT_IDX
; ;

640 3: 
tm
 = 
TSI_TM_BLT_IDX
; ;

644 
VME_AM_EXT_SUP_DATA
:

645 
VME_AM_EXT_USR_DATA
:

647 
mode
 |ð
TSI_OTAT_ADMODE_A32
;

650 
VME_AM_SUP_SHORT_IO
:

651 
VME_AM_USR_SHORT_IO
:

652 
mode
 |ð
TSI_OTAT_ADMODE_A16
;

655 
VME_AM_CSR
:

656 
mode
 |ð
TSI_OTAT_ADMODE_CSR
;

659 
VME_AM_2eVME_6U
:

660 
VME_AM_2eVME_3U
:

661 
mode
 |ð
TSI_OTAT_ADMODE_A32
;

662 iàÐ
	`VME_AM_IS_2eSST
(
add»ss_¥aû
) ) {

663 
tm
 = ( 
VME_AM_2eSST_BCST
 & 
add»ss_¥aû
 ) ?

664 
TSI_TM_2eSSTB_IDX
 : 
TSI_TM_2eSST_IDX
;

665  
	`VME_AM_IS_2eSST
(
add»ss_¥aû
) ) {

667 
VME_AM_2eSST_LO
: 
mode
 |ð
TSI_OTAT_2eSSTM_160
; ;

668 
VME_AM_2eSST_MID
: 
mode
 |ð
TSI_OTAT_2eSSTM_267
; ;

669 
VME_AM_2eSST_HI
: 
mode
 |ð
TSI_OTAT_2eSSTM_320
; ;

672 
tm
 = 
TSI_TM_2eVME_IDX
;

683 
mode
 |ð
	`TSI_OTAT_TM
(
tm
);

685 iàÐ
	`VME_AM_IS_SUP
(
add»ss_¥aû
) )

686 
mode
 |ð
TSI_OTAT_SUP
;

687 *
pmode
 = 
mode
;

689 
	}
}

692 
	$am2imode
(
add»ss_¥aû
, *
pmode
)

694 
mode
=0;

695 
pgm
 = 0;

697 
mode
 |ð
	`TSI_ITAT_VFS
(
add»ss_¥aû
>>
_LD_VME_MODE_PREFETCHSZ
);

699 iàÐ
	`VME_AM_IS_2eSST
(
add»ss_¥aû
) ) {

700 
mode
 |ð
TSI_ITAT_2eSST
;

701 iàÐ
VME_AM_2eSST_BCST
 & 
add»ss_¥aû
 )

702 
mode
 |ð
TSI_ITAT_2eSSTB
;

703  
	`VME_AM_IS_2eSST
(
add»ss_¥aû
) ) {

705 
VME_AM_2eSST_LO
: 
mode
 |ð
TSI_ITAT_2eSSTM_160
; ;

706 
VME_AM_2eSST_MID
: 
mode
 |ð
TSI_ITAT_2eSSTM_267
; ;

707 
VME_AM_2eSST_HI
: 
mode
 |ð
TSI_ITAT_2eSSTM_320
; ;

709 
add»ss_¥aû
 = 
	`ck2es¡
(address_space);

712 
mode
 |ð
TSI_ITAT_BLT
;

713 
mode
 |ð
TSI_ITAT_MBLT
;

715 
mode
 |ð
TSI_ITAT_PGM
;

716 
mode
 |ð
TSI_ITAT_USR
;

718 
add»ss_¥aû
 & 
VME_AM_MASK
) {

719 
VME_AM_STD_SUP_PGM
:

720 
VME_AM_STD_USR_PGM
:

722 
pgm
 = 1;

725 
VME_AM_STD_SUP_BLT
:

726 
VME_AM_STD_SUP_MBLT
:

727 
VME_AM_STD_USR_BLT
:

728 
VME_AM_STD_USR_MBLT
:

729 
VME_AM_STD_SUP_DATA
:

730 
VME_AM_STD_USR_DATA
:

732 
mode
 |ð
TSI_ITAT_ADMODE_A24
;

735 
VME_AM_EXT_SUP_PGM
:

736 
VME_AM_EXT_USR_PGM
:

737 
pgm
 = 1;

740 
VME_AM_2eVME_6U
:

741 
VME_AM_2eVME_3U
:

742 
VME_AM_EXT_SUP_BLT
:

743 
VME_AM_EXT_SUP_MBLT
:

744 
VME_AM_EXT_USR_BLT
:

745 
VME_AM_EXT_USR_MBLT
:

746 
VME_AM_EXT_SUP_DATA
:

747 
VME_AM_EXT_USR_DATA
:

748 
mode
 |ð
TSI_ITAT_ADMODE_A32
;

751 
VME_AM_SUP_SHORT_IO
:

752 
VME_AM_USR_SHORT_IO
:

753 
mode
 |ð
TSI_ITAT_ADMODE_A16
;

757 *
pmode
 = 0;

764 iàÐ
	`VME_AM_IS_SUP
(
add»ss_¥aû
) )

765 
mode
 |ð
TSI_ITAT_SUP
;

767 iàÐ!
pgm
 )

768 
mode
 |ð
TSI_ITAT_DATA
;

770 *
pmode
 = 
mode
;

772 
	}
}

775 
	$»adTrË
(

776 
BERegi¡
 *
ba£
,

777 
»g
,

778 *
ps
,

779 *
¶
,

780 *
po
)

782 *
ps
 = 
	`TSI_RD
(
ba£
, 
»g
);

783 *
ps
 = (*ps<<32è| (
	`TSI_RD
(
ba£
, (
»g
+4)) & 0xffff0000);

784 *
¶
 = 
	`TSI_RD
(
ba£
, (
»g
+8));

785 *
¶
 = (*¶<<32è| (
	`TSI_RD
(
ba£
, (
»g
+0xc)) & 0xffff0000);

786 *
po
 = 
	`TSI_RD
(
ba£
, (
»g
+0x10));

787 *
po
 = (*po<<32è| (
	`TSI_RD
(
ba£
, (
»g
+0x14)) & 0xffff0000);

788 
	}
}

792 
	$boundG¿nuÏry
(
©
)

794  
©
 & 
	`TSI_ITAT_AS
(-1) ) {

795 
TSI_ITAT_ADMODE_A16
:  0xf;

796 
TSI_ITAT_ADMODE_A24
:  0xfff;

801 
	}
}

804 
	$cÚfigTsiPÜt
(

805 
BERegi¡
 *
ba£
,

806 
isout
,

807 
pÜt
,

808 
add»ss_¥aû
,

809 
vme_add»ss
,

810 
pci_add»ss
,

811 
Ëngth
)

813 
¡¬t
, 
lim
, 
off¡
;

814 
mode
, 
mask
, 
t_»g
, 
t§u_»g
;

815 *
Çme
 = (
isout
 ? "Outbound" : "Inbound");

816 
i
,
s
,
l
;

818 
	`CHECK_BASE
(
ba£
,0,-1);

820 
mode
 = 0;

822 iàÐ
pÜt
 >ð(
isout
 ? 
TSI148_NUM_OPORTS
 : 
TSI148_NUM_IPORTS
) ) {

823 
	`u´tf
(
¡dr
,"Tsi148 % PÜCfg: inv®idÜt\n", 
Çme
);

827 iàÐ
ba£
 =ð
THEBASE
 && 
isout
 && 
vmeTsi148RegPÜt
 =ð
pÜt
 ) {

828 
	`u´tf
(
¡dr
,"Tsi148 % PÜCfg: inv®idÜt;e£rved byh¼u± mªag fÜ CRG\n", 
Çme
);

832 iàÐ
Ëngth
 && (
isout
 ? 
	`am2omode
(
add»ss_¥aû
, &
mode
è: 
	`am2imode
(address_space, &mode)) ) {

833 
	`u´tf
(
¡dr
,"Tsi148 % PÜCfg: inv®iddd»s ¥aû / modæags\n",
Çme
);

838 iàÐ
isout
 ) {

839 
¡¬t
 = 
pci_add»ss
;

840 
off¡
 = ()
vme_add»ss
 - 
¡¬t
;

841 
mask
 = 0xffff;

842 
t_»g
 = 
	`TSI_OTAT_REG
(
pÜt
);

843 
t§u_»g
 = 
	`TSI_OTSAU_REG
(
pÜt
);

844 
mode
 |ð
TSI_OTAT_EN
;

847  
i
 = 0; i < 
TSI148_NUM_OPORTS
; i++ ) {

849 iàÐ
i
 =ð
pÜt
 || ! (
TSI_OTAT_EN
 & 
	`TSI_RD
(
ba£
, 
	`TSI_OTAT_REG
(i))) )

853 
s
 = 
	`TSI_RD
(
ba£
, 
	`TSI_OTSAU_REG
(
i
) + 0x04);

854 
l
 = 
	`TSI_RD
(
ba£
, 
	`TSI_OTSAU_REG
(
i
) + 0x0c);

855 iàÐ! ( 
¡¬t
 + 
Ëngth
 <ð
s
 || s¹ > s + 
l
 ) ) {

856 
	`u´tf
(
¡dr
,"Tsi148 Outbound PÜCfg: PCIdd»s ¿ngovÏp whÜ%(0x%08x..0x%08x)\n", 
i
, 
s
, 
l
);

861 
¡¬t
 = 
vme_add»ss
;

862 
off¡
 = ()
pci_add»ss
 - 
¡¬t
;

863 
mask
 = 
	`boundG¿nuÏry
(
mode
);

864 
t_»g
 = 
	`TSI_ITAT_REG
(
pÜt
);

865 
t§u_»g
 = 
	`TSI_ITSAU_REG
(
pÜt
);

866 
mode
 |ð
TSI_ITAT_EN
;

869  
i
 = 0; i < 
TSI148_NUM_IPORTS
; i++ ) {

871 iàÐ
i
 =ð
pÜt
 || ! (
TSI_ITAT_EN
 & (
s
=
	`TSI_RD
(
ba£
, 
	`TSI_ITAT_REG
(i)))) )

874 iàÐ(
	`TSI_ITAT_AS
(-1è& 
s
è!ð(TSI_ITAT_AS(-1è& 
mode
) ) {

879 iàÐ! (
mode
 & 
s
 & (
TSI_ITAT_SUP
 | 
TSI_ITAT_USR
 | 
TSI_ITAT_PGM
 | 
TSI_ITAT_DATA
)) ) {

885 
s
 = 
	`TSI_RD
(
ba£
, 
	`TSI_ITSAU_REG
(
i
) + 0x04);

886 
l
 = 
	`TSI_RD
(
ba£
, 
	`TSI_ITSAU_REG
(
i
) + 0x0c);

887 iàÐ! ( 
¡¬t
 + 
Ëngth
 <ð
s
 || s¹ > s + 
l
 ) ) {

888 
	`u´tf
(
¡dr
,"Tsi148 Inbound PÜCfg: VMEdd»s ¿ngovÏp whÜ%(0x%08x..0x%08x)\n", 
i
, 
s
, 
l
);

895 iàÐ0 =ð
Ëngth
 ) {

896 
	`TSI_WR
(
ba£
, 
t_»g
, 
	`TSI_RD
(ba£,©_»gè& ~(
isout
 ? 
TSI_OTAT_EN
 : 
TSI_ITAT_EN
));

901 iàÐ(
vme_add»ss
 & 
mask
)

902 || (
pci_add»ss
 & 
mask
)

903 || (
Ëngth
 & 
mask
) ) {

904 
	`u´tf
(
¡dr
,"Tsi148 %s Port Cfg: invalidddress/length; must be multiple of 0x%x\n",

905 
Çme
,

906 
mask
+1);

910 
lim
 = 
¡¬t
 + 
Ëngth
 - 1;

912 iàÐ
lim
 >= ()1<<32 ) {

913 
	`u´tf
(
¡dr
,"Tsi148 % PÜCfg: inv®iddd»ss/Ëngth; mu¡ b< 1<<32\n", 
Çme
);

918 
	`TSI_WR
(
ba£
, 
t_»g
, 0);

921 
	`TSI_WR
(
ba£
, 
t§u_»g
 , 0);

922 
	`TSI_WR
(
ba£
, 
t§u_»g
 + 0x04, (
ut32_t
)
¡¬t
);

923 
	`TSI_WR
(
ba£
, 
t§u_»g
 + 0x08, 0);

924 
	`TSI_WR
(
ba£
, 
t§u_»g
 + 0x0c, (
ut32_t
)
lim
);

925 
	`TSI_WR
(
ba£
, 
t§u_»g
 + 0x10, (
ut32_t
)(
off¡
>>32));

926 
	`TSI_WR
(
ba£
, 
t§u_»g
 + 0x14, (
ut32_t
)
off¡
);

931 
	`TSI_WR
(
ba£
, 
t_»g
, 
mode
);

933 
	}
}

936 
	$di§bËTsiPÜt
(

937 
BERegi¡
 *
ba£
,

938 
isout
,

939 
pÜt
)

941  
	`cÚfigTsiPÜt
(
ba£
, 
isout
, 
pÜt
, 0, 0, 0, 0);

942 
	}
}

945 
	$vmeTsi148InboundPÜtCfgXX
(

946 
BERegi¡
 *
ba£
,

947 
pÜt
,

948 
add»ss_¥aû
,

949 
vme_add»ss
,

950 
pci_add»ss
,

951 
Ëngth
)

953  
	`cÚfigTsiPÜt
(
ba£
, 0, 
pÜt
, 
add»ss_¥aû
, 
vme_add»ss
, 
pci_add»ss
, 
Ëngth
);

954 
	}
}

957 
	$vmeTsi148InboundPÜtCfg
(

958 
pÜt
,

959 
add»ss_¥aû
,

960 
vme_add»ss
,

961 
pci_add»ss
,

962 
Ëngth
)

964  
	`cÚfigTsiPÜt
(
THEBASE
, 0, 
pÜt
, 
add»ss_¥aû
, 
vme_add»ss
, 
pci_add»ss
, 
Ëngth
);

965 
	}
}

969 
	$vmeTsi148OutboundPÜtCfgXX
(

970 
BERegi¡
 *
ba£
,

971 
pÜt
,

972 
add»ss_¥aû
,

973 
vme_add»ss
,

974 
pci_add»ss
,

975 
Ëngth
)

977  
	`cÚfigTsiPÜt
(
ba£
, 1, 
pÜt
, 
add»ss_¥aû
, 
vme_add»ss
, 
pci_add»ss
, 
Ëngth
);

978 
	}
}

981 
	$vmeTsi148OutboundPÜtCfg
(

982 
pÜt
,

983 
add»ss_¥aû
,

984 
vme_add»ss
,

985 
pci_add»ss
,

986 
Ëngth
)

988  
	`cÚfigTsiPÜt
(
THEBASE
, 1, 
pÜt
, 
add»ss_¥aû
, 
vme_add»ss
, 
pci_add»ss
, 
Ëngth
);

989 
	}
}

993 
	$xÏFdPÜt
(

994 
BERegi¡
 *
ba£
,

995 
outbound
,

996 
»v£
,

997 
as
,

998 
aIn
,

999 *
·Out


1002 
mode
, 
mode_msk
;

1003 
pÜt
;

1004 
¡¬t
, 
lim
, 
off¡
, 
a
;

1005 
t§u_»g
, 
t_»g
, 
g¿n
, 
sk
;

1007 
	`CHECK_BASE
(
ba£
,0,-1);

1009 
mode
 = 0;

1011  
as
 & 
VME_MODE_MATCH_MASK
 ) {

1012 
VME_MODE_EXACT_MATCH
:

1013 
mode_msk
 = ~0;

1016 
VME_MODE_AS_MATCH
:

1017 iàÐ
outbound
 )

1018 
mode_msk
 = 
	`TSI_OTAT_ADMODE
(-1è| 
TSI_OTAT_EN
;

1020 
mode_msk
 = 
	`TSI_ITAT_AS
(-1è| 
TSI_ITAT_EN
;

1024 iàÐ
outbound
 )

1025 
mode_msk
 = 
TSI_OTAT_PGM
 | 
TSI_OTAT_SUP
 | 
	`TSI_OTAT_ADMODE
(-1è| 
TSI_OTAT_EN
;

1027 
mode_msk
 = 
TSI_ITAT_PGM
 | 
TSI_ITAT_DATA
 | 
TSI_ITAT_SUP
 | 
TSI_ITAT_USR
 | 
	`TSI_ITAT_AS
(-1è| 
TSI_ITAT_EN
;

1031 
as
 &ð~
VME_MODE_MATCH_MASK
;

1033 iàÐ
outbound
 ? 
	`am2omode
(
as
,&
mode
è: 
	`am2imode
(as,&mode) ) {

1034 
	`u´tf
(
¡dr
, "vmeTsi148XlateAddr: invalidddress space/modergument");

1038 ià(
outbound
 ) {

1039 
t§u_»g
 = 
	`TSI_OTSAU_REG
(0);

1040 
t_»g
 = 
	`TSI_OTAT_REG
(0);

1041 
sk
 = 
TSI_OTSAU_SPACING
;

1042 
mode
 |ð
TSI_OTAT_EN
;

1043 
g¿n
 = 0x10000;

1045 
t§u_»g
 = 
	`TSI_ITSAU_REG
(0);

1046 
t_»g
 = 
	`TSI_ITAT_REG
(0);

1047 
sk
 = 
TSI_ITSAU_SPACING
;

1048 
mode
 |ð
TSI_ITAT_EN
;

1049 
g¿n
 = 
	`boundG¿nuÏry
(
mode
) + 1;

1052  
pÜt
 = 0;Ü< 
TSI148_NUM_OPORTS
;Üt++, 
t§u_»g
 +ð
sk
, 
t_»g
 += skip ) {

1054 iàÐ(
mode
 & 
mode_msk
è=ð(
	`TSI_RD
(
ba£
, 
t_»g
) & mode_msk) ) {

1057 
	`»adTrË
(
ba£
, 
t§u_»g
, &
¡¬t
, &
lim
, &
off¡
);

1058 
lim
 +ð
g¿n
;

1060 iàÐ!
»v£
 ) {

1061 
¡¬t
 +ð
off¡
;

1062 
lim
 +ð
off¡
;

1063 
off¡
 = -offst;

1065 
a
 = 
aIn
;

1066 iàÐ
aIn
 >ð
¡¬t
 &&IÀ<ð
lim
 ) {

1068 *
·Out
 = ()(
a
 + 
off¡
);

1069  
pÜt
;

1074 
	`u´tf
(
¡dr
, "vmeTsi148XlateAddr:o matching mapping found\n");

1076 
	}
}

1079 
	$vmeTsi148XÏAddrXX
(

1080 
BERegi¡
 *
ba£
,

1081 
outbound
,

1082 
»v£
,

1083 
as
,

1084 
aIn
,

1085 *
·Out


1088 
pÜt
 = 
	`xÏFdPÜt
Ð
ba£
, 
outbound
, 
»v£
, 
as
, 
aIn
, 
·Out
 );

1089  
pÜt
 < 0 ? -1 : 0;

1090 
	}
}

1093 
	$vmeTsi148XÏAddr
(

1094 
outbound
,

1095 
»v£
,

1096 
as
,

1097 
aIn
,

1098 *
·Out


1101  
	`vmeTsi148XÏAddrXX
(
THEBASE
, 
outbound
, 
»v£
, 
as
, 
aIn
, 
·Out
);

1102 
	}
}

1106 
	$u´tælx
(
FILE
 *
f
, 
v
)

1108 iàÐ
v
 >= (()1)<<32 )

1109 
	`u´tf
(
f
,"0x%lx%08lx ", ()(
v
>>32), ()(v & 0xffffffff));

1111 
	`u´tf
(
f
,"0x%08lx ", ()(
v
 & 0xffffffff));

1112 
	}
}

1115 
	$vmeTsi148OutboundPÜtsShowXX
(
BERegi¡
 *
ba£
, 
FILE
 *
f
)

1117 
pÜt
;

1118 
mode
;

1119 
t
 = 0;

1121 
¡¬t
, 
lim
, 
off¡
;

1123 
	`CHECK_BASE
(
ba£
,0, );

1125 ià(!
f
èf=
¡dout
;

1126 
	`u´tf
(
f
,"Tsi148 Outbound Ports:\n");

1128  
pÜt
 = 0;Ü< 
TSI148_NUM_OPORTS
;ort++ ) {

1129 
mode
 = 
	`TSI_RD
(
ba£
, 
	`TSI_OTAT_REG
(
pÜt
));

1130 iàÐ! (
TSI_OTAT_EN
 & 
mode
) )

1133 
	`»adTrË
(
ba£
, 
	`TSI_OTSAU_REG
(
pÜt
), &
¡¬t
, &
lim
, &
off¡
);

1136 
lim
 =im-
¡¬t
+0x10000;

1137 iàÐ!
t
 ) {

1138 
	`u´tf
(
f
,"Port VME-Addr Size PCI-Adrs Mode:\n");

1139 
t
 = 1;

1141 
	`u´tf
(
f
,"%d: ", 
pÜt
);

1142 
	`u´tælx
(
f
,
¡¬t
+
off¡
);

1143 
	`u´tælx
(
f
,
lim
);

1144 
	`u´tælx
(
f
,
¡¬t
);

1145  
mode
 & 
	`TSI_OTAT_ADMODE
(-1) ) {

1146 
TSI_OTAT_ADMODE_A16
: 
	`u´tf
(
f
,"A16"); ;

1147 
TSI_OTAT_ADMODE_A24
: 
	`u´tf
(
f
,"A24"); ;

1148 
TSI_OTAT_ADMODE_A32
: 
	`u´tf
(
f
,"A32"); ;

1149 
TSI_OTAT_ADMODE_A64
: 
	`u´tf
(
f
,"A64"); ;

1150 
TSI_OTAT_ADMODE_CSR
: 
	`u´tf
(
f
,"CSR"); ;

1151 : 
	`u´tf
(
f
,"A??"); ;

1154 iàÐ
mode
 & 
TSI_OTAT_PGM
 ) 
	`u´tf
(
f
,", PGM");

1155 iàÐ
mode
 & 
TSI_OTAT_SUP
 ) 
	`u´tf
(
f
,", SUP");

1156 iàÐ! (
TSI_OTAT_MRPFD
 & 
mode
èè
	`u´tf
(
f
,", PREFETCH");

1158  
mode
 & 
	`TSI_OTAT_DBW
(-1) ) {

1159 
	`TSI_OTAT_DBW
(0): 
	`u´tf
(
f
,", D16"); ;

1160 
	`TSI_OTAT_DBW
(1): 
	`u´tf
(
f
,", D32"); ;

1161 : 
	`u´tf
(
f
,", D??"); ;

1164  
mode
 & 
	`TSI_OTAT_TM
(-1) ) {

1165 
	`TSI_OTAT_TM
(0): 
	`u´tf
(
f
,", SCT"); ;

1166 
	`TSI_OTAT_TM
(1): 
	`u´tf
(
f
,", BLT"); ;

1167 
	`TSI_OTAT_TM
(2): 
	`u´tf
(
f
,", MBLT"); ;

1168 
	`TSI_OTAT_TM
(3): 
	`u´tf
(
f
,", 2eVME"); ;

1169 
	`TSI_OTAT_TM
(4): 
	`u´tf
(
f
,", 2eSST"); ;

1170 
	`TSI_OTAT_TM
(5): 
	`u´tf
(
f
,", 2eSST_BCST"); ;

1171 : 
	`u´tf
(
f
," TM??"); ;

1174 
	`u´tf
(
f
,"\n");

1176 
	}
}

1179 
	$vmeTsi148OutboundPÜtsShow
(
FILE
 *
f
)

1181 
	`vmeTsi148OutboundPÜtsShowXX
(
THEBASE
, 
f
);

1182 
	}
}

1185 
	$vmeTsi148InboundPÜtsShowXX
(
BERegi¡
 *
ba£
, 
FILE
 *
f
)

1187 
pÜt
;

1188 
mode
;

1189 
t
 = 0;

1191 
¡¬t
, 
lim
, 
off¡
;

1193 
	`CHECK_BASE
(
ba£
,0, );

1195 ià(!
f
èf=
¡dout
;

1196 
	`u´tf
(
f
,"Tsi148 Inbound Ports:\n");

1198  
pÜt
 = 0;Ü< 
TSI148_NUM_IPORTS
;ort++ ) {

1199 
mode
 = 
	`TSI_RD
(
ba£
, 
	`TSI_ITAT_REG
(
pÜt
));

1200 iàÐ! (
TSI_ITAT_EN
 & 
mode
) )

1203 
	`»adTrË
(
ba£
, 
	`TSI_ITSAU_REG
(
pÜt
), &
¡¬t
, &
lim
, &
off¡
);

1206 
lim
 =im - 
¡¬t
 + 
	`boundG¿nuÏry
(
mode
) + 1;

1207 iàÐ!
t
 ) {

1208 
	`u´tf
(
f
,"Port VME-Addr Size PCI-Adrs Mode:\n");

1209 
t
 = 1;

1211 
	`u´tf
(
f
,"%d: ", 
pÜt
);

1212 
	`u´tælx
(
f
,
¡¬t
);

1213 
	`u´tælx
(
f
,
lim
);

1214 
	`u´tælx
(
f
,
¡¬t
+
off¡
);

1215  
mode
 & 
	`TSI_ITAT_AS
(-1) ) {

1216 
TSI_ITAT_ADMODE_A16
: 
	`u´tf
(
f
,"A16"); ;

1217 
TSI_ITAT_ADMODE_A24
: 
	`u´tf
(
f
,"A24"); ;

1218 
TSI_ITAT_ADMODE_A32
: 
	`u´tf
(
f
,"A32"); ;

1219 
TSI_ITAT_ADMODE_A64
: 
	`u´tf
(
f
,"A64"); ;

1220 : 
	`u´tf
(
f
,"A??"); ;

1223 iàÐ
mode
 & 
TSI_ITAT_PGM
 ) 
	`u´tf
(
f
,", PGM");

1224 iàÐ
mode
 & 
TSI_ITAT_DATA
 ) 
	`u´tf
(
f
,", DAT");

1225 iàÐ
mode
 & 
TSI_ITAT_SUP
 ) 
	`u´tf
(
f
,", SUP");

1226 iàÐ
mode
 & 
TSI_ITAT_USR
 ) 
	`u´tf
(
f
,", USR");

1228 iàÐ
mode
 & 
TSI_ITAT_2eSSTB
 ) 
	`u´tf
(
f
,", 2eSSTB");

1229 iàÐ
mode
 & 
TSI_ITAT_2eSST
 ) 
	`u´tf
(
f
,", 2eSST");

1230 iàÐ
mode
 & 
TSI_ITAT_2eVME
 ) 
	`u´tf
(
f
,", 2eVME");

1231 iàÐ
mode
 & 
TSI_ITAT_MBLT
 ) 
	`u´tf
(
f
,", MBLT");

1232 iàÐ
mode
 & 
TSI_ITAT_BLT
 ) 
	`u´tf
(
f
,", BLT");

1234 
	`u´tf
(
f
,"\n");

1236 
	}
}

1239 
	$vmeTsi148InboundPÜtsShow
(
FILE
 *
f
)

1241 
	`vmeTsi148InboundPÜtsShowXX
(
THEBASE
, 
f
);

1242 
	}
}

1246 
	$vmeTsi148Di§bËAÎInboundPÜtsXX
(
BERegi¡
 *
ba£
)

1248 
pÜt
;

1250  
pÜt
 = 0;Ü< 
TSI148_NUM_IPORTS
;ort++ )

1251 iàÐ
	`di§bËTsiPÜt
(
ba£
, 0, 
pÜt
) )

1253 
	}
}

1256 
	$vmeTsi148Di§bËAÎInboundPÜts
()

1258 
	`vmeTsi148Di§bËAÎInboundPÜtsXX
(
THEBASE
);

1259 
	}
}

1262 
	$vmeTsi148Di§bËAÎOutboundPÜtsXX
(
BERegi¡
 *
ba£
)

1264 
pÜt
;

1266  
pÜt
 = 0;Ü< 
TSI148_NUM_IPORTS
;ort++ )

1267 iàÐ
	`di§bËTsiPÜt
(
ba£
, 1, 
pÜt
) )

1269 
	}
}

1272 
	$vmeTsi148Di§bËAÎOutboundPÜts
()

1274 
	`vmeTsi148Di§bËAÎOutboundPÜtsXX
(
THEBASE
);

1275 
	}
}

1281 
	$vmeTsi148M­CRGXX
(
BERegi¡
 *
b
, 
ut32_t
 
vme_ba£
, ut32_
as
 )

1283 
ut32_t
 
mode
;

1285 
	`CHECK_BASE
Ð
b
, 0, -1 );

1287 iàÐ
vmeTsi148RegPÜt
 > -1 && ! 
vmeTsi148RegCSR
 ) {

1288 
	`u´tf
(
¡dr
,"vmeTsi148: CRGlready mappednd in use by interrupt manager\n");

1293 
mode
 = 
TSI_CRGAT_EN
 | 
TSI_CRGAT_SUP
 | 
TSI_CRGAT_USR
 | 
TSI_CRGAT_PGM
 | 
TSI_CRGAT_DATA
;

1295 iàÐ
	`VME_AM_IS_SHORT
(
as
) ) {

1296 
mode
 |ð
TSI_CRGAT_A16
;

1298 iàÐ
	`VME_AM_IS_STD
(
as
) ) {

1299 
mode
 |ð
TSI_CRGAT_A24
;

1301 iàÐ
	`VME_AM_IS_EXT
(
as
) ) {

1302 
mode
 |ð
TSI_CRGAT_A32
;

1308 
	`TSI_WR
Ð
b
, 
TSI_CBAL_REG
, (
vme_ba£
 & ~(
TSI_CRG_SIZE
-1)));

1309 
	`TSI_WR
Ð
b
, 
TSI_CRGAT_REG
, 
mode
 );

1312 
	}
}

1315 
	$vmeTsi148M­CRG
(
ut32_t
 
vme_ba£
, ut32_
as
 )

1317  
	`vmeTsi148M­CRGXX
Ð
THEBASE
, 
vme_ba£
, 
as
 );

1318 
	}
}

1323 
	sIRQEÁryRec_
 {

1324 
VmeTsi148ISR
 
	mi¤
;

1325 *
	mu¤D©a
;

1326 } 
	tIRQEÁryRec
, *
	tIRQEÁry
;

1328 
IRQEÁry
 
	gqHdlTbl
[
TSI_NUM_INT_VECS
]={0};

1330 
	gvmeTsi148IrqMgrIn¡®Ëd
 = 0;

1331 
	gvmeTsi148RegPÜt
 = -1;

1332 
	gvmeTsi148RegCSR
 = 0;

1333 
BERegi¡
 *
	gvmeTsi148RegBa£
 = 0;

1335 vÞ©
	gwe_mask
[
TSI_NUM_WIRES
] = {0};

1337 
	gtsi_we
[
TSI_NUM_WIRES
] = {0};

1340 
	gtsi_ck_width
[7] = {

1345 
	guni2tsi_vec_m­
[
TSI_NUM_INT_VECS
-256] = {

1369 
	gtsi2uni_vec_m­
[
TSI_NUM_INT_VECS
 - 256] = {

1370 
TSI_ACFAIL_INT_VEC
,

1371 
TSI_SYSFAIL_INT_VEC
,

1372 
TSI_VME_SW_IACK_INT_VEC
,

1373 
TSI_VIES_INT_VEC
,

1374 
TSI_VERR_INT_VEC
,

1375 
TSI_LERR_INT_VEC
,

1378 
TSI_MBOX0_INT_VEC
,

1379 
TSI_MBOX1_INT_VEC
,

1380 
TSI_MBOX2_INT_VEC
,

1381 
TSI_MBOX3_INT_VEC
,

1382 
TSI_LM0_INT_VEC
,

1383 
TSI_LM1_INT_VEC
,

1384 
TSI_LM2_INT_VEC
,

1385 
TSI_LM3_INT_VEC
,

1386 
TSI_DMA_INT_VEC
,

1387 
TSI_DMA1_INT_VEC
,

1391 
le
 

1392 
	$uni2tsivec
(
v
)

1394 iàÐ
v
 < 0 || v >ð
TSI_NUM_INT_VECS
 )

1396  
v
 < 256 ? v : 
uni2tsi_vec_m­
[v-256];

1397 
	}
}

1400 
	$lvl2bno
(
Ëv
)

1402 iàÐ
Ëv
 >= 256 )

1403  
	`uni2tsivec
(
Ëv
) + 8 - 256;

1404 iàÐ
Ëv
 < 8 &&evel > 0 )

1405  
Ëv
;

1407 
	}
}

1410 
	$vmeTsi148IÁRou
(
Ëv
, 
p
)

1412 
i
;

1413 
mask
, 
shiá
, 
m­»g
, 
æags
, 
we
;

1415 iàÐ
p
 >ð
TSI_NUM_WIRES
 || ! 
tsi_we
[p] || !
vmeTsi148IrqMgrIn¡®Ëd
 )

1418 iàÐ
Ëv
 >= 256 ) {

1419 iàÐ(
i
 = 
	`uni2tsivec
(
Ëv
)) < 0 )

1421 
shiá
 = 8 + (
i
-256);

1422 } iàÐ1 <ð
Ëv
 &&evel <=7 ) {

1423 
shiá
 = 
Ëv
;

1428 
mask
 = 1<<
shiá
;

1431 iàÐ
shiá
 < 16 ) {

1432 
m­»g
 = 
TSI_INTM2_REG
;

1433 } iàÐ
shiá
 < 32 ) {

1434 
shiá
 -= 16;

1435 
m­»g
 = 
TSI_INTM1_REG
;

1440 
shiá
 <<=1;

1443 
we
 = (
tsi_we
[
p
]-1è<< 
shiá
;

1445 
	`¹ems_¼u±_di§bË
(
æags
);

1447  
i
 = 0; i<
TSI_NUM_WIRES
; i++ ) {

1448 
we_mask
[
i
] &ð~
mask
;

1450 
we_mask
[
p
] |ð
mask
;

1452 
mask
 = 
	`TSI_RD
(
THEBASE
, 
m­»g
è& ~ (0x3<<
shiá
);

1453 
mask
 |ð
we
;

1454 
	`TSI_WR
Ð
THEBASE
, 
m­»g
, 
mask
 );

1456 
	`¹ems_¼u±_abË
(
æags
);

1458 
	}
}

1460 
VmeTsi148ISR


1461 
	$vmeTsi148ISRG
(
veùÜ
, **
·rg
)

1463 
VmeTsi148ISR
 
rv®
 = 0;

1464 
æags
;

1465 vÞ©
IRQEÁry
 *
p
;

1466 
v
 = 
	`uni2tsivec
(
veùÜ
);

1469 iàÐ
v
 < 0 )

1470  
rv®
;

1472 
p
 = 
qHdlTbl
 + 
v
;

1474 
	`¹ems_¼u±_di§bË
(
æags
);

1475 iàÐ*
p
 ) {

1476 iàÐ
·rg
 )

1477 *
·rg
 = (*
p
)->
u¤D©a
;

1478 
rv®
 = (*
p
)->
i¤
;

1480 
	`¹ems_¼u±_abË
(
æags
);

1482  
rv®
;

1483 
	}
}

1486 
	$tsiVMEISR
(
¹ems_q_hdl_·¿m
 
¬g
)

1488 
p
 = ()
¬g
;

1489 
BERegi¡
 *
b
 = 
THEBASE
;

1490 
IRQEÁry
 

;

1491 
msk
,
lt¡©
,
veùÜ
, 
veÿrg
;

1492 
lvl
;

1504  (
lt¡©
 = (
	`TSI_RD
(
vmeTsi148RegBa£
, 
TSI_INTS_REG
è& 
we_mask
[
p
])) ) {

1510 #ifdeà
__PPC__


1511 
asm
 vÞ©e("úzw %0, %1":"ô"(
lvl
):"r"(
lt¡©
));

1512 
lvl
 = 31-lvl;

1513 
msk
 = 1<<
lvl
;

1515 { 
m
[] = {

1518 
i
;

1519 
tmp
;

1526  
i
=0, 
lvl
=0, 
msk
 = 
lt¡©
; i<5; i++ ) {

1527 
lvl
 <<= 1;

1528 iàÐ(
tmp
 = 
msk
 & 
m
[
i
]) ) {

1529 
lvl
++;

1530 
msk
 = 
tmp
;

1532 
msk
 = msk & ~
m
[
i
];

1537 iàÐ
lvl
 > 7 ) {

1539 
	`TSI_WR
(
b
, 
TSI_INTC_REG
, 
msk
);

1540 
veùÜ
 = 256 + 
lvl
 - 8;

1541 
veÿrg
 = 
tsi2uni_vec_m­
[
lvl
-8];

1544  
tsi_ck_width
[
lvl
-1] ) {

1547 
veùÜ
 = 
	`TSI_RD8
(
b
, 
TSI_VIACK_1_REG
 - 4 + (
lvl
<<2) + 3);

1551 
veùÜ
 = 
	`TSI_RD16
(
b
, 
TSI_VIACK_1_REG
 - 4 + (
lvl
<<2) + 2);

1555 
veùÜ
 = 
	`TSI_RD
(
b
, 
TSI_VIACK_1_REG
 - 4 + (
lvl
<<2));

1558 
veÿrg
 = 
veùÜ
;

1561 iàÐ!(

=
qHdlTbl
[
veùÜ
])) {

1563 
	`vmeTsi148IÁDi§bË
(
lvl
);

1564 
	`´tk
("vmeTsi148 ISR: ERROR:o handleregistered (level %i) IACK 0x%08x -- DISABLINGevel %i\n",

1565 
lvl
, 
veùÜ
,vl);

1568 

->
	`i¤
(->
u¤D©a
, 
veÿrg
);

1573 
	`iob¬rr_rw
();

1575 }  (
lt¡©
 &ð~
msk
) );

1578 
	}
}

1582 
	$my_no_Ý
(cÚ¡ 
¹ems_q_cÚÃù_d©a
 * 
¬g
)

1583 {
	}
}

1586 
	$my_isOn
(cÚ¡ 
¹ems_q_cÚÃù_d©a
 *
¬g
)

1588  ()(
	`TSI_RD
(
THEBASE
, 
TSI_INTEO_REG
è& TSI_RD(THEBASE, 
TSI_INTEN_REG
));

1589 
	}
}

1592 
	$cÚÃùI¤
(
sh¬ed
, 
¹ems_q_hdl
 
i¤
, 
pic_le
, 
¦Ù
)

1594 
¹ems_q_cÚÃù_d©a
 
xx
;

1595 
xx
.
Ú
 = 
my_no_Ý
;

1596 
xx
.
off
 = 
my_no_Ý
;

1597 
xx
.
isOn
 = 
my_isOn
;

1598 
xx
.
hdl
 = 
i¤
;

1599 
xx
.
hªdË
 = (
¹ems_q_hdl_·¿m
)
¦Ù
;

1600 
xx
.
Çme
 = 
pic_le
;

1602 iàÐ
sh¬ed
 ) {

1603 #ià
BSP_SHARED_HANDLER_SUPPORT
 > 0

1604 ià(!
	`BSP_¡®l_¹ems_sh¬ed_q_hªdËr
(&
xx
))

1605 
	`BSP_·nic
("unableo install vmeTsi148 shared irq handler");

1607 
	`u´tf
(
¡dr
,"vmeTsi148: WARNING: your BSP doesn't support sharing interrupts\n");

1608 ià(!
	`BSP_¡®l_¹ems_q_hªdËr
(&
xx
))

1609 
	`BSP_·nic
("unableo install vmeTsi148 irq handler");

1612 ià(!
	`BSP_¡®l_¹ems_q_hªdËr
(&
xx
))

1613 
	`BSP_·nic
("unableo install vmeTsi148 irq handler");

1615 
	}
}

1618 
	$vmeTsi148In¡®lIrqMgrAÉ
(
sh¬ed
, 
tsi_p0
, 
pic_p0
, ...)

1620 
rv®
;

1621 
va_li¡
 
­
;

1622 
	`va_¡¬t
(
­
, 
pic_p0
);

1623 
rv®
 = 
	`vmeTsi148In¡®lIrqMgrVa
(
sh¬ed
, 
tsi_p0
, 
pic_p0
, 
­
);

1624 
	`va_d
(
­
);

1625  
rv®
;

1626 
	}
}

1628 #iâdeà
BSP_EARLY_PROBE_VME


1629 
	#BSP_EARLY_PROBE_VME
(
addr
) \

1631 
	`vmeTsi148CË¬VMEBusE¼ÜsXX
Ð
THEBASE
, 0 ), \

1632 Ð((
PCI_DEVICE_TSI148
 << 16è| 
PCI_VENDOR_TUNDRA
 ) =ð
	`TSI_LE_RD32
Ð((
BERegi¡
*)(
addr
)), 0 ) \

1633 && 0 =ð
	`vmeTsi148CË¬VMEBusE¼ÜsXX
Ð
THEBASE
, 0 ) ) \

1634 )

	)

1643 
	$m­³dAndProbed
(
vme_addr
, 
as
, *
pýu_addr
)

1645 
j
;

1646 *
»gty³
 = (
as
 & 
VME_AM_MASK
è=ð
VME_AM_CSR
 ? "CSR" : "CRG";

1649 iàÐ0 > (
j
 = 
	`xÏFdPÜt
(

1650 
THEBASE
,

1652 
as
 | 
VME_MODE_AS_MATCH
,

1653 
vme_addr
,

1654 
pýu_addr
 ) ) ) {

1655 
	`u´tf
(
¡dr
,"vmeTsi148 - UÇbËØfd m­pg fÜ % VME ba£ (0x%08x)\n", 
»gty³
, 
vme_addr
);

1656 
	`u´tf
(
¡dr
," in outbound windows.\n");

1660 *
pýu_addr
 = 
	`BSP_PCI2LOCAL_ADDR
( *pcpu_addr );

1661 iàÐ
	`BSP_EARLY_PROBE_VME
(*
pýu_addr
) ) {

1662 
	`u´tf
(
¡dr
,"vmeTsi148 - IRQ mªag usg VME % tØæush FIFO\n", 
»gty³
);

1663  
j
;

1665 
	`u´tf
(
¡dr
,"vmeTsi148 - Found slÙ infØbudeùiÚ oàtsi148 iÀVME % ¥aû faed\n", 
»gty³
);

1669 
	}
}

1672 
	$vmeTsi148In¡®lIrqMgrVa
(
sh¬ed
, 
tsi_p0
, 
pic_p0
, 
va_li¡
 
­
)

1674 
i
,
j
, 
¥eclP
, 
tsi_p
[
TSI_NUM_WIRES
+1], 
pic_p
[TSI_NUM_WIRES];

1675 
ýu_ba£
, 
vme_»g_ba£
;

1677 ià(
vmeTsi148IrqMgrIn¡®Ëd
)  -4;

1681 iàÐ
tsi_p0
 < 0 ||si_pin0 > 3 )  -1;

1683 
tsi_p
[0] = 
tsi_p0
;

1684 
pic_p
[0] = 
pic_p0
 < 0 ? 
devs
[0].
qLe
 :ic_pin0;

1685 
i
 = 1;

1686  (
tsi_p
[
i
] = 
	`va_¬g
(
­
, )) >= 0 ) {

1688 iàÐ
i
 >ð
TSI_NUM_WIRES
 ) {

1692 
pic_p
[
i
] = 
	`va_¬g
(
­
,);

1694 iàÐ
tsi_p
[
i
] > 3 )  -2;

1695 iàÐ
pic_p
[
i
] < 0 )  -3;

1696 
i
++;

1700  
i
=0; 
tsi_p
[i] >= 0; i++ ) {

1701  
j
=
i
+1; 
tsi_p
[j] >= 0; j++ ) {

1702 iàÐ
tsi_p
[
j
] =ðtsi_p[
i
] )  -6;

1703 iàÐ
pic_p
[
j
] =ðpic_p[
i
] )  -7;

1707 
i
 = -1;

1711 
	`u´tf
(
¡dr
,"vmeTsi148 IRQ manager:ooking foregisters on VME...\n");

1713 iàÐÐ
i
 = ((
	`TSI_RD
Ð
THEBASE
, 
TSI_CBAR_REG
 ) & 0xff) >> 3) ) > 0 ) {

1714 
	`u´tf
(
¡dr
,"Tryingo find CSR on VME...\n");

1715 
vme_»g_ba£
 = 
i
*0x80000 + 
TSI_CSR_OFFSET
;

1716 
i
 = 
	`m­³dAndProbed
Ð
vme_»g_ba£
, 
VME_AM_CSR
 , &
ýu_ba£
);

1717 iàÐ
i
 >= 0 )

1718 
vmeTsi148RegCSR
 = 1;

1720 
i
 = -1;

1723 iàÐ-1 =ð
i
 ) {

1725 
	`u´tf
(
¡dr
,"Tryingo find CRG on VME...\n");

1729 iàÐ(
TSI_CRGAT_EN
 & (
j
 = 
	`TSI_RD
Ð
THEBASE
, 
TSI_CRGAT_REG
 ))) ) {

1730  
j
 & 
TSI_CRGAT_AS_MSK
 ) {

1731 
TSI_CRGAT_A16
 : 
i
 = 
VME_AM_SUP_SHORT_IO
; ;

1732 
TSI_CRGAT_A24
 : 
i
 = 
VME_AM_STD_SUP_DATA
; ;

1733 
TSI_CRGAT_A32
 : 
i
 = 
VME_AM_EXT_SUP_DATA
; ;

1737 
vme_»g_ba£
 = 
	`TSI_RD
Ð
THEBASE
, 
TSI_CBAL_REG
 ) & ~ (
TSI_CRG_SIZE
 - 1);

1740 iàÐ-1 =ð
i
 ) {

1742 
i
 = 
	`m­³dAndProbed
Ð
vme_»g_ba£
, (& 
VME_AM_MASK
), &
ýu_ba£
 );

1746 iàÐ
i
 < 0 ) {

1747 
	`u´tf
(
¡dr
,"vmeTsi148 IRQ manager - BSP configurationrror:egistersot found on VME\n");

1748 
	`u´tf
(
¡dr
,"(should open outbound windowo CSR space or map CRG [vmeTsi148MapCRG()])\n");

1749 
	`u´tf
(
¡dr
,"Falling backo PCI but you mightxperience spurious VME interrupts;eadegister\n");

1750 
	`u´tf
(
¡dr
,"back from user ISRo flushosted-write FIFOs work-around\n");

1751 
ýu_ba£
 = ()
THEBASE
;

1752 
i
 = -1;

1755 
vmeTsi148RegBa£
 = (
BERegi¡
*)
ýu_ba£
;

1756 
vmeTsi148RegPÜt
 = 
i
;

1759 iàÐ
pic_p
[0] >ð0 && 
devs
[0].
qLe
 !=ic_pin[0] ) {

1760 
	`u´tf
(
¡dr
,"Overriding main IRQine PCI info with %d\n",

1761 
pic_p
[0]);

1762 
devs
[0].
qLe
 = 
pic_p
[0];

1765  
i
 = 0; 
tsi_p
[i] >= 0; i++ ) {

1767 
tsi_we
[
i
] = 
tsi_p
[i] + 1;

1768 
	`cÚÃùI¤
(
sh¬ed
, 
tsiVMEISR
, 
pic_p
[
i
], i);

1771 
¥eclP
 = 
tsi_p
[1] >= 0 ? 1 : 0;

1776 
vmeTsi148IrqMgrIn¡®Ëd
=1;

1779  
i
=1; i<8; i++ )

1780 
	`vmeTsi148IÁRou
Ð
i
, 0 );

1781  
i
=
TSI_DMA_INT_VEC
; i<
TSI_NUM_INT_VECS
; i++ )

1782 
	`vmeTsi148IÁRou
Ð
i
, 
¥eclP
 );

1784  
i
 = 0; i<
TSI_NUM_WIRES
; i++ ) {

1786 
devs
[0].
pic_p
[
i
] = ( ( 
tsi_p
[i] >=0 ) ?ic_pin[i] : -1 );

1790 
	}
}

1793 
	$vmeTsi148In¡®lISR
(
veùÜ
, 
VmeTsi148ISR
 
hdl
, *
¬g
)

1795 
IRQEÁry
 

;

1796 
v
;

1797 
æags
;

1798 vÞ©
IRQEÁry
 *
p
;

1800 iàÐ!
vmeTsi148IrqMgrIn¡®Ëd
 || (
v
 = 
	`uni2tsivec
(
veùÜ
)) < 0 )

1803 
p
 = 
qHdlTbl
 + 
v
;

1805 ià(*
p
 || !(

=(
IRQEÁry
)
	`m®loc
((
IRQEÁryRec
))))

1808 

->
i¤
=
hdl
;

1809 

->
u¤D©a
=
¬g
;

1811 
	`¹ems_¼u±_di§bË
(
æags
);

1812 ià(*
p
) {

1813 
	`¹ems_¼u±_abË
(
æags
);

1814 
	`ä
(

);

1817 *
p
 = 

;

1818 
	`¹ems_¼u±_abË
(
æags
);

1820 
	}
}

1823 
	$vmeTsi148RemoveISR
(
veùÜ
, 
VmeTsi148ISR
 
hdl
, *
¬g
)

1825 
v
;

1826 
IRQEÁry
 

;

1827 
æags
;

1828 vÞ©
IRQEÁry
 *
p
;

1830 iàÐ!
vmeTsi148IrqMgrIn¡®Ëd
 || (
v
 = 
	`uni2tsivec
(
veùÜ
)) < 0 )

1833 
p
 = 
qHdlTbl
 + 
v
;

1835 
	`¹ems_¼u±_di§bË
(
æags
);

1836 

 = *
p
;

1837 iàÐ!

 || ip->
i¤
!=
hdl
 || ip->
u¤D©a
!=
¬g
 ) {

1838 
	`¹ems_¼u±_abË
(
æags
);

1841 *
p
 = 0;

1842 
	`¹ems_¼u±_abË
(
æags
);

1844 
	`ä
(

);

1846 
	}
}

1849 
	$tDoEnDis
(
Ëv
, 
dis
)

1851 
BERegi¡
 *
b
 = 
THEBASE
;

1852 
æags
, 
v
;

1853 
shiá
;

1855 iàÐ! 
vmeTsi148IrqMgrIn¡®Ëd
 || (
shiá
 = 
	`lvl2bno
(
Ëv
)) < 0 )

1858 
v
 = 1<<
shiá
;

1860 iàÐ!
dis
 )

1861  ()(
v
 & 
	`TSI_RD
(
b
, 
TSI_INTEO_REG
è& TSI_RD(b, 
TSI_INTEN_REG
)) ? 1 : 0;

1863 
	`¹ems_¼u±_di§bË
(
æags
);

1864 iàÐ
dis
<0 ) {

1865 
	`TSI_WR
(
b
, 
TSI_INTEN_REG
, 
	`TSI_RD
(b, TSI_INTEN_REGè& ~
v
);

1866 
	`TSI_WR
(
b
, 
TSI_INTEO_REG
, 
	`TSI_RD
(b, TSI_INTEO_REGè& ~
v
);

1868 
	`TSI_WR
(
b
, 
TSI_INTEN_REG
, 
	`TSI_RD
(b, TSI_INTEN_REGè| 
v
);

1869 
	`TSI_WR
(
b
, 
TSI_INTEO_REG
, 
	`TSI_RD
(b, TSI_INTEO_REGè| 
v
);

1871 
	`¹ems_¼u±_abË
(
æags
);

1873 
	}
}

1876 
	$vmeTsi148IÁEÇbË
(
Ëv
)

1878  
	`tDoEnDis
(
Ëv
, 1);

1879 
	}
}

1882 
	$vmeTsi148IÁDi§bË
(
Ëv
)

1884  
	`tDoEnDis
(
Ëv
, -1);

1885 
	}
}

1888 
	$vmeTsi148IÁIsEÇbËd
(
Ëv
)

1890  
	`tDoEnDis
(
Ëv
, 0);

1891 
	}
}

1902 
	$vmeTsi148SIackWidth
(
Ëv
, 
width
)

1904 
rv®
;

1905 iàÐ
Ëv
 < 1 ||ev > 7 || !
vmeTsi148IrqMgrIn¡®Ëd
 )

1908  
width
 ) {

1917 
rv®
 = 
tsi_ck_width
[
Ëv
-1];

1918 iàÐ
width
 )

1919 
tsi_ck_width
[
Ëv
-1] = 
width
;

1920  
rv®
;

1921 
	}
}

1924 
	$vmeTsi148IÁRai£XX
(
BERegi¡
 *
ba£
, 
Ëv
, 
veùÜ
)

1926 
v
;

1928 
	`CHECK_BASE
(
ba£
,0,-1);

1930 iàÐ
Ëv
 < 1 ||ev > 7 || 
veùÜ
 > 255 )

1934 iàÐ(
v
 = 
	`TSI_RD
(
ba£
, 
TSI_VICR_REG
)è& 
TSI_VICR_IRQS
 ) {

1938 
v
 &= ~255;

1940 
v
 |ð
	`TSI_VICR_IRQL
(
Ëv
è| 
	`TSI_VICR_STID
(
veùÜ
);

1943 
	`TSI_WR
(
ba£
, 
TSI_VICR_REG
, 
v
);

1947 
	}
}

1950 
	$vmeTsi148IÁRai£
(
Ëv
, 
veùÜ
)

1952  
	`vmeTsi148IÁRai£XX
(
THEBASE
, 
Ëv
, 
veùÜ
);

1953 
	}
}

1958 
¹ems_id
 
	mq
;

1959 
	ml
;

1960 } 
	tLoÝbackT¡Args
;

1963 
	$loÝbackT¡I¤
(*
¬g
, 
veùÜ
)

1965 
LoÝbackT¡Args
 *
·
 = 
¬g
;

1966 iàÐ
RTEMS_SUCCESSFUL
 !ð
	`¹ems_mes§ge_queue_£nd
(
·
->
q
, (*)&
veùÜ
, (vector)) ) {

1968 
	`´tk
("vmeTsi148IÁLoÝbackT¡: (ISRèmes§gqueufuÎ / ovruÀ? di§blg IRQev %i\n", 
·
->
l
);

1969 
	`vmeTsi148IÁDi§bË
(
·
->
l
);

1971 
	}
}

1974 
	$vmeTsi148IÁLoÝbackT¡
(
Ëv
, 
veùÜ
)

1976 
BERegi¡
 *
b
 = 
THEBASE
;

1977 
¹ems_¡©us_code
 
sc
;

1978 
¹ems_id
 
q
 = 0;

1979 
¡®Ëd
 = 0;

1980 
i
, 
r
 = 0;

1981 
doDi§bË
 = 0;

1982 
size_t
 
size
;

1983 
msg
;

1984 * 
qfmt
 = "VME IRQ @vector %3i %s";

1985 * 
ckfmt
 = "VME IACK %s";

1986 
LoÝbackT¡Args
 
a
;

1988 
	`CHECK_BASE
(
b
,0,-1);

1991 iàÐ
Ëv
 < 1 ||ev > 7 || 
veùÜ
 > 255 )

1995 iàÐ
RTEMS_SUCCESSFUL
 !ð(
sc
=
	`¹ems_mes§ge_queue_ü
(

1996 
	`¹ems_bud_Çme
('t' ,'U','I','I'),

2000 &
q
)) ) {

2001 
	`¹ems_rÜ
(
sc
, "vmeTsi148IntLoopbackTst: Unableo create message queue");

2002 
ba
;

2005 
a
.
q
 = q;

2006 
a
.
l
 = 
Ëv
;

2009 iàÐ
	`vmeTsi148In¡®lISR
(
veùÜ
, 
loÝbackT¡I¤
, (*)&
a
) ) {

2010 
	`u´tf
(
¡dr
,"UÇbËØ¡®ÈVME ISRØveùÜ %i\n",
veùÜ
);

2011 
ba
;

2013 
¡®Ëd
++;

2014 iàÐ
	`vmeTsi148In¡®lISR
(
TSI_VME_SW_IACK_INT_VEC
, 
loÝbackT¡I¤
, (*)&
a
) ) {

2015 
	`u´tf
(
¡dr
,"UÇbËØ¡®ÈVME ISRØIACK s³cÈveùÜ %i\n",
TSI_VME_SW_IACK_INT_VEC
);

2016 
ba
;

2018 
¡®Ëd
++;

2020 iàÐ!
	`vmeTsi148IÁIsEÇbËd
(
Ëv
è&& 0==
	`vmeTsi148IÁEÇbË
(level) )

2021 
doDi§bË
 = 1;

2024 
	`TSI_WR
(
b
, 
TSI_INTC_REG
, 
TSI_INTC_IACKC
);

2026 iàÐ
	`vmeTsi148IÁEÇbË
Ð
TSI_VME_SW_IACK_INT_VEC
 ) ) {

2027 
	`u´tf
(
¡dr
,"Unableonable IACK interrupt\n");

2028 
ba
;

2031 
	`´tf
("vmeTsi148 VME interruptoopbackest; STARTING...\n");

2032 
	`´tf
(" -->s£¹g VME IRQev %i\n", 
Ëv
);

2033 
	`vmeTsi148IÁRai£
(
Ëv
, 
veùÜ
);

2035  
i
 = 0; i< 3; i++ ) {

2036 
sc
 = 
	`¹ems_mes§ge_queue_»ûive
(

2037 
q
,

2038 &
msg
,

2039 &
size
,

2040 
RTEMS_WAIT
,

2042 iàÐ
sc
 ) {

2043 iàÐ
RTEMS_TIMEOUT
 =ð
sc
 && 
i
>1 ) {

2045 
sc
 = 0;

2047 
	`¹ems_rÜ
(
sc
,"Error waiting for interrupts");

2051 iàÐ
msg
 =ð
veùÜ
 ) {

2052 iàÐ!
qfmt
 ) {

2053 
	`´tf
("Excess VME IRQeceived ?? -- BAD\n");

2054 
r
 = 1;

2056 
	`´tf
(
qfmt
, 
veùÜ
, "received -- PASSED\n");

2057 
qfmt
 = 0;

2059 } iàÐ
msg
 =ð
TSI_VME_SW_IACK_INT_VEC
 ) {

2060 iàÐ!
ckfmt
 ) {

2061 
	`´tf
("Excess VME IACKeceived ?? -- BAD\n");

2062 
r
 = 1;

2064 
	`´tf
(
ckfmt
, "received -- PASSED\n");

2065 
ckfmt
 = 0;

2068 
	`´tf
("UnknowÀIRQ (veùÜ %luè»ûived -- BAD\n", 
msg
);

2069 
r
 = 1;

2075 iàÐ
qfmt
 ) {

2076 
	`´tf
(
qfmt
,
veùÜ
, "MISSED -- BAD\n");

2077 
r
 = 1;

2079 iàÐ
ckfmt
 ) {

2080 
	`´tf
(
ckfmt
, "MISSED -- BAD\n");

2081 
r
 = 1;

2084 
	`´tf
("FINISHED.\n");

2086 
ba
:

2087 iàÐ
doDi§bË
 )

2088 
	`vmeTsi148IÁDi§bË
(
Ëv
);

2089 
	`vmeTsi148IÁDi§bË
Ð
TSI_VME_SW_IACK_INT_VEC
 );

2090 iàÐ
¡®Ëd
 > 0 )

2091 
	`vmeTsi148RemoveISR
(
veùÜ
, 
loÝbackT¡I¤
, (*)&
a
);

2092 iàÐ
¡®Ëd
 > 1 )

2093 
	`vmeTsi148RemoveISR
(
TSI_VME_SW_IACK_INT_VEC
, 
loÝbackT¡I¤
, (*)&
a
);

2094 iàÐ
q
 )

2095 
	`¹ems_mes§ge_queue_de
(
q
);

2097  
sc
 ? sø: 
r
;

2098 
	}
}

2101 
	$vmeTsi148CË¬VMEBusE¼ÜsXX
(
BERegi¡
 *
ba£
, 
ut32_t
 *
·ddr
)

2103 
rv®
;

2105 
	`CHECK_BASE
(
ba£
,1,-1);

2107 
rv®
 = 
	`TSI_RD
(
ba£
, 
TSI_VEAT_REG
);

2108 iàÐ
rv®
 & 
TSI_VEAT_VES
 ) {

2109 iàÐ
·ddr
 ) {

2111 *
·ddr
 = (()
	`TSI_RD
(
ba£
, 
TSI_VEAU_REG
))<<32;

2112 *
·ddr
 |ð
	`TSI_RD
(
ba£
, 
TSI_VEAL_REG
);

2114 *
·ddr
 = 
	`TSI_RD
(
ba£
, 
TSI_VEAL_REG
);

2118 
	`TSI_WR
(
ba£
, 
TSI_VEAT_REG
, 
TSI_VEAT_VESCL
);

2120 
rv®
 = 0;

2122  
rv®
;

2123 
	}
}

2126 
	$vmeTsi148CË¬VMEBusE¼Üs
(
ut32_t
 *
·ddr
)

2128  
	`vmeTsi148CË¬VMEBusE¼ÜsXX
(
THEBASE
, 
·ddr
);

2129 
	}
}

2134 
	sVmeTsi148DmaLi¡DesütÜRec_
 {

2135 
BEV®ue
 
	md§u
, 
	md§l
;

2136 
BEV®ue
 
	mddau
, 
	mdd®
;

2137 
BEV®ue
 
	md§t
, 
	mdd©
;

2138 
BEV®ue
 
	mdÆau
, 
	mdÆ®
;

2139 
BEV®ue
 
	mdút
, 
	mddbs
;

2140 } 
	tVmeTsi148DmaLi¡DesütÜRec
;

2142 
tsi_desc_
 (
DmaDesütÜ
);

2143 
tsi_desc_£tup
 (
DmaDesütÜ
, 
ut32_t
, uint32_t, uint32_t, uint32_t, uint32_t);

2144 
tsi_desc_£xt
(
DmaDesütÜ
, DmaDescriptor);

2145 
tsi_desc_dump
 (
DmaDesütÜ
);

2146 
tsi_desc_¡¬t
 (vÞ©*
cÚÞËr_addr
, 
chªÃl
, 
DmaDesütÜ
 
p
);

2148 
VMEDmaLi¡CÏssRec
 
	gvmeTsi148DmaLi¡CÏss
 = {

2149 
desc_size
: (
VmeTsi148DmaLi¡DesütÜRec
),

2150 
desc_®ign
: 8,

2151 
äLi¡
: 0,

2152 
desc_®loc
: 0,

2153 
desc_ä
: 0,

2154 
desc_
: 
tsi_desc_
,

2155 
desc_£xt
:
tsi_desc_£xt
,

2156 
desc_£tup
: 
tsi_desc_£tup
,

2157 
desc_¡¬t
: 
tsi_desc_¡¬t
,

2158 
desc_»ä
: 0,

2159 
desc_dump
: 
tsi_desc_dump
,

2163 
	#TSI_DMA_REG
(
off
,
i
è((off)+(((i)&1)<<7))

	)

2165 
	#TSI_DCTL_REG
(
i
è
	`TSI_DMA_REG
(0x500,i)

	)

2166 
	#TSI_DCTL0_REG
 0x500

	)

2167 
	#TSI_DCTL1_REG
 0x580

	)

2168 
	#TSI_DCTL_ABT
 (1<<27è

	)

2169 
	#TSI_DCTL_PAU
 (1<<26è

	)

2170 
	#TSI_DCTL_DGO
 (1<<25è

	)

2171 
	#TSI_DCTL_MOD
 (1<<23è

	)

2172 
	#TSI_DCTL_VFAR
 (1<<17è

	)

2173 
	#TSI_DCTL_PFAR
 (1<<16è

	)

2175 
	#TSI_DCTL_VBKS
(
i
è(((i)&7)<<12è

	)

2176 
	#TSI_DCTL_VBKS_32
 
	`TSI_DCTL_VBKS
(0)

	)

2177 
	#TSI_DCTL_VBKS_64
 
	`TSI_DCTL_VBKS
(1)

	)

2178 
	#TSI_DCTL_VBKS_128
 
	`TSI_DCTL_VBKS
(2)

	)

2179 
	#TSI_DCTL_VBKS_256
 
	`TSI_DCTL_VBKS
(3)

	)

2180 
	#TSI_DCTL_VBKS_512
 
	`TSI_DCTL_VBKS
(4)

	)

2181 
	#TSI_DCTL_VBKS_1024
 
	`TSI_DCTL_VBKS
(5)

	)

2182 
	#TSI_DCTL_VBKS_2048
 
	`TSI_DCTL_VBKS
(6)

	)

2183 
	#TSI_DCTL_VBKS_4096
 
	`TSI_DCTL_VBKS
(7)

	)

2185 
	#TSI_DCTL_VBOT
(
i
è(((i)&7)<< 8è

	)

2186 
	#TSI_DCTL_VBOT_0us
 
	`TSI_DCTL_VBOT
(0)

	)

2187 
	#TSI_DCTL_VBOT_1us
 
	`TSI_DCTL_VBOT
(1)

	)

2188 
	#TSI_DCTL_VBOT_2us
 
	`TSI_DCTL_VBOT
(2)

	)

2189 
	#TSI_DCTL_VBOT_4us
 
	`TSI_DCTL_VBOT
(3)

	)

2190 
	#TSI_DCTL_VBOT_8us
 
	`TSI_DCTL_VBOT
(4)

	)

2191 
	#TSI_DCTL_VBOT_16us
 
	`TSI_DCTL_VBOT
(5)

	)

2192 
	#TSI_DCTL_VBOT_32us
 
	`TSI_DCTL_VBOT
(6)

	)

2193 
	#TSI_DCTL_VBOT_64us
 
	`TSI_DCTL_VBOT
(7)

	)

2195 
	#TSI_DCTL_PBKS
(
i
è(((i)&7)<< 4è

	)

2196 
	#TSI_DCTL_PBKS_32
 
	`TSI_DCTL_PBKS
(0)

	)

2197 
	#TSI_DCTL_PBKS_64
 
	`TSI_DCTL_PBKS
(1)

	)

2198 
	#TSI_DCTL_PBKS_128
 
	`TSI_DCTL_PBKS
(2)

	)

2199 
	#TSI_DCTL_PBKS_256
 
	`TSI_DCTL_PBKS
(3)

	)

2200 
	#TSI_DCTL_PBKS_512
 
	`TSI_DCTL_PBKS
(4)

	)

2201 
	#TSI_DCTL_PBKS_1024
 
	`TSI_DCTL_PBKS
(5)

	)

2202 
	#TSI_DCTL_PBKS_2048
 
	`TSI_DCTL_PBKS
(6)

	)

2203 
	#TSI_DCTL_PBKS_4096
 
	`TSI_DCTL_PBKS
(7)

	)

2205 
	#TSI_DCTL_PBOT
(
i
è(((i)&7)<< 0è

	)

2206 
	#TSI_DCTL_PBOT_0us
 
	`TSI_DCTL_PBOT
(0)

	)

2207 
	#TSI_DCTL_PBOT_1us
 
	`TSI_DCTL_PBOT
(1)

	)

2208 
	#TSI_DCTL_PBOT_2us
 
	`TSI_DCTL_PBOT
(2)

	)

2209 
	#TSI_DCTL_PBOT_4us
 
	`TSI_DCTL_PBOT
(3)

	)

2210 
	#TSI_DCTL_PBOT_8us
 
	`TSI_DCTL_PBOT
(4)

	)

2211 
	#TSI_DCTL_PBOT_16us
 
	`TSI_DCTL_PBOT
(5)

	)

2212 
	#TSI_DCTL_PBOT_32us
 
	`TSI_DCTL_PBOT
(6)

	)

2213 
	#TSI_DCTL_PBOT_64us
 
	`TSI_DCTL_PBOT
(7)

	)

2216 
	#TSI_DSTA_REG
(
i
è
	`TSI_DMA_REG
(0x504,i)

	)

2217 
	#TSI_DSTA0_REG
 0x504

	)

2218 
	#TSI_DSTA1_REG
 0x584

	)

2219 
	#TSI_DSTA_ERR
 (1<<28)

	)

2220 
	#TSI_DSTA_ABT
 (1<<27)

	)

2221 
	#TSI_DSTA_PAU
 (1<<26)

	)

2222 
	#TSI_DSTA_DON
 (1<<25)

	)

2223 
	#TSI_DSTA_BSY
 (1<<24)

	)

2224 
	#TSI_DSTA_ERRS
 (1<<20è

	)

2225 
	#TSI_DSTA_ERT_MSK
 (3<<16è

	)

2226 
	#TSI_DSTA_ERT_BERR_E
 (0<<16è

	)

2227 
	#TSI_DSTA_ERT_BERR_O
 (1<<16è

	)

2228 
	#TSI_DSTA_ERT_SLVE_E
 (2<<16è

	)

2229 
	#TSI_DSTA_ERT_SLVE_O
 (3<<16è

	)

2232 
	#TSI_DCSAU_REG
(
i
è
	`TSI_DMA_REG
(0x508,i)

	)

2233 
	#TSI_DCSAU0_REG
 0x508

	)

2234 
	#TSI_DCSAU1_REG
 0x588

	)

2237 
	#TSI_DCSAL_REG
(
i
è
	`TSI_DMA_REG
(0x50c,i)

	)

2238 
	#TSI_DCSAL0_REG
 0x50c

	)

2239 
	#TSI_DCSAL1_REG
 0x58c

	)

2242 
	#TSI_DCDAU_REG
(
i
è
	`TSI_DMA_REG
(0x510,i)

	)

2243 
	#TSI_DCDAU0_REG
 0x510

	)

2244 
	#TSI_DCDAU1_REG
 0x590

	)

2247 
	#TSI_DCDAL_REG
(
i
è
	`TSI_DMA_REG
(0x514,i)

	)

2248 
	#TSI_DCDAL0_REG
 0x514

	)

2249 
	#TSI_DCDAL1_REG
 0x594

	)

2252 
	#TSI_DCLAU_REG
(
i
è
	`TSI_DMA_REG
(0x518,i)

	)

2253 
	#TSI_DCLAU0_REG
 0x518

	)

2254 
	#TSI_DCLAU1_REG
 0x598

	)

2257 
	#TSI_DCLAL_REG
(
i
è
	`TSI_DMA_REG
(0x51c,i)

	)

2258 
	#TSI_DCLAL0_REG
 0x51c

	)

2259 
	#TSI_DCLAL1_REG
 0x59c

	)

2262 
	#TSI_DSAU_REG
(
i
è
	`TSI_DMA_REG
(0x520,i)

	)

2263 
	#TSI_DSAU0_REG
 0x520

	)

2264 
	#TSI_DSAU1_REG
 0x5a0

	)

2267 
	#TSI_DSAL_REG
(
i
è
	`TSI_DMA_REG
(0x524,i)

	)

2268 
	#TSI_DSAL0_REG
 0x524

	)

2269 
	#TSI_DSAL1_REG
 0x5a4

	)

2272 
	#TSI_DDAU_REG
(
i
è
	`TSI_DMA_REG
(0x528,i)

	)

2273 
	#TSI_DDAU0_REG
 0x528

	)

2274 
	#TSI_DDAU1_REG
 0x5a8

	)

2277 
	#TSI_DDAL_REG
(
i
è
	`TSI_DMA_REG
(0x52c,i)

	)

2278 
	#TSI_DDAL0_REG
 0x52c

	)

2279 
	#TSI_DDAL1_REG
 0x5ac

	)

2282 
	#TSI_DSAT_REG
(
i
è
	`TSI_DMA_REG
(0x530,i)

	)

2283 
	#TSI_DSAT0_REG
 0x530

	)

2284 
	#TSI_DSAT1_REG
 0x5b0

	)

2287 
	#TSI_DDAT_REG
(
i
è
	`TSI_DMA_REG
(0x534,i)

	)

2288 
	#TSI_DDAT0_REG
 0x534

	)

2289 
	#TSI_DDAT1_REG
 0x5b4

	)

2291 
	#TSI_DXAT_TYP
(
i
è(((i)&3)<<28è

	)

2292 
	#TSI_DXAT_TYP_PCI
 
	`TSI_DXAT_TYP
(0)

	)

2293 
	#TSI_DXAT_TYP_VME
 
	`TSI_DXAT_TYP
(1)

	)

2294 
	#TSI_DSAT_TYP_PAT
 
	`TSI_DXAT_TYP
(2è

	)

2296 
	#TSI_DSAT_PSZ
 (1<<25è

	)

2297 
	#TSI_DSAT_NIN
 (1<<24è

	)

2299 
	#TSI_DXAT_OTAT_MSK
 ((1<<13)-1è

	)

2301 
	#TSI_DXAT_SSTM
(
i
è(((i)&3)<<11è

	)

2302 
	#TSI_DXAT_SSTM_116
 
	`TSI_DXAT_SSTM
(0)

	)

2303 
	#TSI_DXAT_SSTM_267
 
	`TSI_DXAT_SSTM
(1)

	)

2304 
	#TSI_DXAT_SSTM_320
 
	`TSI_DXAT_SSTM
(2)

	)

2306 
	#TSI_DXAT_TM
(
i
è(((i)&7)<< 8è

	)

2307 
	#TSI_DXAT_TM_SCT
 
	`TSI_DXAT_TM
(0)

	)

2308 
	#TSI_DXAT_TM_BLT
 
	`TSI_DXAT_TM
(1)

	)

2309 
	#TSI_DXAT_TM_MBLT
 
	`TSI_DXAT_TM
(2)

	)

2310 
	#TSI_DXAT_TM_2eVME
 
	`TSI_DXAT_TM
(3)

	)

2311 
	#TSI_DXAT_TM_2eSST
 
	`TSI_DXAT_TM
(4)

	)

2312 
	#TSI_DSAT_TM_2eSST_B
 
	`TSI_DXAT_TM
(5è

	)

2314 
	#TSI_DXAT_DBW
(
i
è(((i)&3)<< 6è

	)

2315 
	#TSI_DXAT_DBW_16
 
	`TSI_DXAT_DBW
(0)

	)

2316 
	#TSI_DXAT_DBW_32
 
	`TSI_DXAT_DBW
(1)

	)

2318 
	#TSI_DXAT_SUP
 (1<<5è

	)

2319 
	#TSI_DXAT_PGM
 (1<<4è

	)

2321 
	#TSI_DXAT_AM
(
i
è(((i)&15)<<0è

	)

2322 
	#TSI_DXAT_AM_A16
 
	`TSI_DXAT_AM
(0)

	)

2323 
	#TSI_DXAT_AM_A24
 
	`TSI_DXAT_AM
(1)

	)

2324 
	#TSI_DXAT_AM_A32
 
	`TSI_DXAT_AM
(2)

	)

2325 
	#TSI_DXAT_AM_A64
 
	`TSI_DXAT_AM
(4)

	)

2326 
	#TSI_DXAT_AM_CSR
 
	`TSI_DXAT_AM
(5)

	)

2329 
	#TSI_DNLAU_REG
(
i
è
	`TSI_DMA_REG
(0x538,i)

	)

2330 
	#TSI_DNLAU0_REG
 0x538

	)

2331 
	#TSI_DNLAU1_REG
 0x5b8

	)

2334 
	#TSI_DNLAL_REG
(
i
è
	`TSI_DMA_REG
(0x53c,i)

	)

2335 
	#TSI_DNLAL0_REG
 0x53c

	)

2336 
	#TSI_DNLAL1_REG
 0x5bc

	)

2338 
	#TSI_DNLAL_LLA
 1

	)

2341 
	#TSI_DCNT_REG
(
i
è
	`TSI_DMA_REG
(0x540,i)

	)

2342 
	#TSI_DCNT0_REG
 0x540

	)

2343 
	#TSI_DCNT1_REG
 0x54c

	)

2346 
	#TSI_DDBS_REG
(
i
è
	`TSI_DMA_REG
(0x544,i)

	)

2347 
	#TSI_DDBS0_REG
 0x544

	)

2348 
	#TSI_DDBS1_REG
 0x5c4

	)

2351 
ut32_t


2352 
	$vme_©
(
ut32_t
 
xãr_mode
)

2354 
ut32_t
 
vme_mode
;

2355 iàÐ
	`am2omode
(
xãr_mode
, &
vme_mode
) )

2356  
BSP_VMEDMA_STATUS_UNSUP
;

2359 
vme_mode
 &ð
TSI_DXAT_OTAT_MSK
;

2360 
vme_mode
 |ð
TSI_DXAT_TYP_VME
;

2362 iàÐ
BSP_VMEDMA_MODE_NOINC_VME
 & 
xãr_mode
 ) {

2364 iàÐ(
BSP_VMEDMA_MODE_PCI2VME
 & 
xãr_mode
) )

2365  
BSP_VMEDMA_STATUS_UNSUP
;

2366 
vme_mode
 |ð
TSI_DSAT_NIN
;

2369  
vme_mode
;

2370 
	}
}

2372 
ut32_t


2373 
	$pci_©
(
ut32_t
 
xãr_mode
)

2375 
ut32_t
 
pci_mode
 = 0;

2376 iàÐ
BSP_VMEDMA_MODE_NOINC_PCI
 & 
xãr_mode
 ) {

2378 iàÐ! (
BSP_VMEDMA_MODE_PCI2VME
 & 
xãr_mode
) )

2379  
BSP_VMEDMA_STATUS_UNSUP
;

2380 
pci_mode
 |ð
TSI_DSAT_NIN
;

2382  
pci_mode
;

2383 
	}
}

2385 
	$tsi_desc_
(
DmaDesütÜ
 
p
)

2387 
VmeTsi148DmaLi¡DesütÜ
 
d
 = 
p
;

2388 
	`¡_be32
Ð&
d
->
dÆau
, 0 );

2389 
	`¡_be32
Ð&
d
->
dÆ®
, 
TSI_DNLAL_LLA
 );

2390 
	`¡_be32
Ð&
d
->
ddbs
, (1<<22)-1 );

2391 
	}
}

2394 
	$tsi_desc_£xt
(
DmaDesütÜ
 
p
, DmaDesütÜ 
n
)

2396 
VmeTsi148DmaLi¡DesütÜ
 
d
 = 
p
;

2397 iàÐ0 =ð
n
 ) {

2398 
	`¡_be32
Ð&
d
->
dÆ®
, 
TSI_DNLAL_LLA
 );

2400 
	`¡_be32
Ð&
d
->
dÆ®
, 
	`BSP_LOCAL2PCI_ADDR
((
ut32_t
)
n
) );

2402 
	}
}

2405 
	$tsi_desc_dump
(
DmaDesütÜ
 
p
)

2407 
VmeTsi148DmaLi¡DesütÜ
 
d
 = 
p
;

2408 
	`´tf
(" DSA: 0x%08lx%08lx\n", 
	`ld_be32
(&
d
->
d§u
),d_be32(&d->
d§l
));

2409 
	`´tf
(" DDA: 0x%08lx%08lx\n", 
	`ld_be32
(&
d
->
ddau
),d_be32(&d->
dd®
));

2410 
	`´tf
(" NLA: 0x%08lx%08lx\n", 
	`ld_be32
(&
d
->
dÆau
),d_be32(&d->
dÆ®
));

2411 
	`´tf
(" SAT: 0x%08lx DAT: 0x%08lx\n", 
	`ld_be32
(&
d
->
d§t
),d_be32(&d->
dd©
));

2412 
	`´tf
(" CNT: 0x%08lx\n", 
	`ld_be32
(&
d
->
dút
));

2413 
	}
}

2417 
	$vmeTsi148DmaSupXX
(
BERegi¡
 *
ba£
, 
chªÃl
, 
ut32_t
 
mode
, ut32_
xãr_mode
, *
cu¡om
)

2419 
ut32_t
 
ùl
 = 0;

2420 
ut32_t
 
vm
, 
pc
, 
§t
, 
d©
;

2422 iàÐ
chªÃl
 < 0 || channel > 1 )

2423  
BSP_VMEDMA_STATUS_UNSUP
;

2426 iàÐ(
ut32_t
)
BSP_VMEDMA_STATUS_UNSUP
 =ð(
vm
 = 
	`vme_©
(
xãr_mode
)) )

2430 iàÐ(
ut32_t
)
BSP_VMEDMA_STATUS_UNSUP
 =ð(
pc
 = 
	`pci_©
(
xãr_mode
)) )

2434 
ùl
 |ð
TSI_DCTL_PBKS_32
;

2435 
ùl
 |ð(
BSP_VMEDMA_OPT_THROUGHPUT
 =ð
mode
 ? 
TSI_DCTL_PBOT_0us
 : 
TSI_DCTL_PBOT_1us
);

2437  
mode
 ) {

2438 
BSP_VMEDMA_OPT_THROUGHPUT
:

2439 
ùl
 |ð
TSI_DCTL_VBKS_1024
;

2440 
ùl
 |ð
TSI_DCTL_VBOT_0us
;

2443 
BSP_VMEDMA_OPT_LOWLATENCY
:

2444 
ùl
 |ð
TSI_DCTL_VBKS_32
;

2445 
ùl
 |ð
TSI_DCTL_VBOT_0us
;

2448 
BSP_VMEDMA_OPT_SHAREDBUS
:

2449 
ùl
 |ð
TSI_DCTL_VBKS_128
;

2450 
ùl
 |ð
TSI_DCTL_VBOT_64us
;

2453 
BSP_VMEDMA_OPT_CUSTOM
:

2454 
ùl
 = *(
ut32_t
*)
cu¡om
;

2458 
BSP_VMEDMA_OPT_DEFAULT
:

2459 
ùl
 = 0;

2462 
	`TSI_WR
(
ba£
, 
	`TSI_DCTL_REG
(
chªÃl
), 
ùl
);

2463 iàÐ
BSP_VMEDMA_MODE_PCI2VME
 & 
xãr_mode
 ) {

2464 
d©
 = 
vm
; 
§t
 = 
pc
;

2466 
§t
 = 
vm
; 
d©
 = 
pc
;

2468 
	`TSI_WR
(
ba£
, 
	`TSI_DSAT_REG
(
chªÃl
), 
§t
);

2469 
	`TSI_WR
(
ba£
, 
	`TSI_DDAT_REG
(
chªÃl
), 
d©
);

2471 
	}
}

2474 
	$vmeTsi148DmaSup
(
chªÃl
, 
ut32_t
 
mode
, ut32_
xãr_mode
, *
cu¡om
)

2476 
BERegi¡
 *
ba£
 = 
THEBASE
;

2477  
	`vmeTsi148DmaSupXX
(
ba£
, 
chªÃl
, 
mode
, 
xãr_mode
, 
cu¡om
);

2478 
	}
}

2482 
	$vmeTsi148DmaLi¡S¹XX
(
BERegi¡
 *
ba£
, 
chªÃl
, 
VmeTsi148DmaLi¡DesütÜ
 
d
)

2484 
ut32_t
 
ùl
;

2486 iàÐ
d
 ) {

2488 iàÐ
chªÃl
 < 0 || channel > 1 )

2489  
BSP_VMEDMA_STATUS_UNSUP
;

2491 iàÐ
TSI_DSTA_BSY
 & 
	`TSI_RD
(
ba£
, 
	`TSI_DSTA_REG
(
chªÃl
)) )

2492  
BSP_VMEDMA_STATUS_BUSY
;

2494 
	`TSI_WR
(
ba£
, 
	`TSI_DNLAL_REG
(
chªÃl
), (
ut32_t
)
	`BSP_LOCAL2PCI_ADDR
(
d
));

2496 
asm
 volatile("":::"memory");

2499 
ùl
 = 
	`TSI_RD
(
ba£
, 
	`TSI_DCTL_REG
(
chªÃl
)è| 
TSI_DCTL_DGO
;

2500 
ùl
 &ð~
TSI_DCTL_MOD
;

2501 
	`TSI_WR
(
ba£
, 
	`TSI_DCTL_REG
(
chªÃl
), 
ùl
);

2505 
	}
}

2508 
	$vmeTsi148DmaLi¡S¹
(
chªÃl
, 
VmeTsi148DmaLi¡DesütÜ
 
d
)

2510 
BERegi¡
 *
ba£
 = 
THEBASE
;

2511  
	`vmeTsi148DmaLi¡S¹XX
(
ba£
, 
chªÃl
, 
d
);

2512 
	}
}

2515 
	$vmeTsi148DmaS¹XX
(
BERegi¡
 *
ba£
, 
chªÃl
, 
ut32_t
 
pci_addr
, ut32_
vme_addr
, ut32_
n_bys
)

2517 
ut32_t
 
¤c
, 
d¡
, 
ùl
;

2519 iàÐ
chªÃl
 < 0 || channel > 1 )

2520  
BSP_VMEDMA_STATUS_UNSUP
;

2522 iàÐ
TSI_DSTA_BSY
 & 
	`TSI_RD
(
ba£
, 
	`TSI_DSTA_REG
(
chªÃl
)) )

2523  
BSP_VMEDMA_STATUS_BUSY
;

2526 iàÐ
TSI_DXAT_TYP_VME
 & 
	`TSI_RD
(
ba£
, 
	`TSI_DDAT_REG
(
chªÃl
)) ) {

2527 
d¡
 = 
vme_addr
;

2528 
¤c
 = 
pci_addr
;

2530 
¤c
 = 
vme_addr
;

2531 
d¡
 = 
pci_addr
;

2536 
	`TSI_WR
(
ba£
, 
	`TSI_DSAL_REG
(
chªÃl
), 
¤c
);

2537 
	`TSI_WR
(
ba£
, 
	`TSI_DDAL_REG
(
chªÃl
), 
d¡
);

2538 
	`TSI_WR
(
ba£
, 
	`TSI_DCNT_REG
(
chªÃl
), 
n_bys
);

2540 
asm
 volatile("":::"memory");

2543 
ùl
 = 
	`TSI_RD
(
ba£
, 
	`TSI_DCTL_REG
(
chªÃl
)è| 
TSI_DCTL_DGO
 | 
TSI_DCTL_MOD
;

2544 
	`TSI_WR
(
ba£
, 
	`TSI_DCTL_REG
(
chªÃl
), 
ùl
);

2547 
	}
}

2550 
	$vmeTsi148DmaS¹
(
chªÃl
, 
ut32_t
 
pci_addr
, ut32_
vme_addr
, ut32_
n_bys
)

2552 
BERegi¡
 *
ba£
 = 
THEBASE
;

2553  
	`vmeTsi148DmaS¹XX
(
ba£
, 
chªÃl
, 
pci_addr
, 
vme_addr
, 
n_bys
);

2554 
	}
}

2556 
ut32_t


2557 
	$vmeTsi148DmaStusXX
(
BERegi¡
 *
ba£
, 
chªÃl
)

2559 
ut32_t
 
¡
 = 
	`TSI_RD
(
ba£
, 
	`TSI_DSTA_REG
(
chªÃl
));

2561 iàÐ
chªÃl
 < 0 || channel > 1 )

2562  
BSP_VMEDMA_STATUS_UNSUP
;

2564 
¡
 = 
	`TSI_RD
(
ba£
, 
	`TSI_DSTA_REG
(
chªÃl
));

2567 iàÐ(
TSI_DSTA_DON
 & 
¡
) || 0 == st )

2568  
BSP_VMEDMA_STATUS_OK
;

2570 iàÐ
TSI_DSTA_BSY
 & 
¡
 )

2571  
BSP_VMEDMA_STATUS_BUSY
;

2573 iàÐ
TSI_DSTA_ERR
 & 
¡
 ) {

2574 iàÐ
TSI_DSTA_ERRS
 & 
¡
 )

2575  
BSP_VMEDMA_STATUS_BERR_PCI
;

2576 iàÐ! (
TSI_DSTA_ERT_SLVE_E
 & 
¡
) )

2577  
BSP_VMEDMA_STATUS_BERR_VME
;

2580  
BSP_VMEDMA_STATUS_OERR
;

2581 
	}
}

2583 
ut32_t


2584 
	$vmeTsi148DmaStus
(
chªÃl
)

2586 
BERegi¡
 *
ba£
 = 
THEBASE
;

2587  
	`vmeTsi148DmaStusXX
(
ba£
, 
chªÃl
);

2588 
	}
}

2590 
	#ALL_BITS_NEEDED
 (
BSP_VMEDMA_MSK_ATTR
 | 
BSP_VMEDMA_MSK_PCIA
 | 
BSP_VMEDMA_MSK_VMEA
)

	)

2593 
	$tsi_desc_£tup
 (

2594 
DmaDesütÜ
 
p
,

2595 
ut32_t
 
©_mask
,

2596 
ut32_t
 
xãr_mode
,

2597 
ut32_t
 
pci_addr
,

2598 
ut32_t
 
vme_addr
,

2599 
ut32_t
 
n_bys
)

2601 
VmeTsi148DmaLi¡DesütÜ
 
d
 = 
p
;

2602 
ut32_t
 
vm
 = 0, 
pc
 = 0, 
tmp
, 
¤c
, 
d¡
, 
d©
, 
§t
;

2611 
tmp
 = 
©_mask
 & 
ALL_BITS_NEEDED
;

2612 iàÐ
tmp
 !ð0 &&m°!ð
ALL_BITS_NEEDED
 )

2615 iàÐ
BSP_VMEDMA_MSK_ATTR
 & 
©_mask
 ) {

2617 
vm
 = 
	`vme_©
(
xãr_mode
);

2618 iàÐ(
ut32_t
)
BSP_VMEDMA_STATUS_UNSUP
 =ð
vm
 )

2622 
pc
 = 
	`pci_©
(
xãr_mode
);

2623 iàÐ(
ut32_t
)
BSP_VMEDMA_STATUS_UNSUP
 =ð
pc
 )

2627 iàÐ
BSP_VMEDMA_MSK_ATTR
 & 
©_mask
 ) {

2628 iàÐ
BSP_VMEDMA_MODE_PCI2VME
 & 
xãr_mode
 ) {

2629 
d©
 = 
vm
; 
§t
 = 
pc
;

2630 
d¡
 = 
vme_addr
; 
¤c
 = 
pci_addr
;

2632 
§t
 = 
vm
; 
d©
 = 
pc
;

2633 
¤c
 = 
vme_addr
; 
d¡
 = 
pci_addr
;

2635 
	`¡_be32
Ð&
d
->
d§u
, 0 ); st_be32Ð&d->
d§l
, 
¤c
 );

2636 
	`¡_be32
Ð&
d
->
ddau
, 0 ); st_be32Ð&d->
dd®
, 
d¡
 );

2637 
	`¡_be32
Ð&
d
->
d§t
, 
§t
 ); st_be32Ð&d->
dd©
, 
d©
 );

2640 iàÐ
BSP_VMEDMA_MSK_BCNT
 & 
©_mask
 )

2641 
	`¡_be32
Ð&
d
->
dút
, 
n_bys
);

2644 
	}
}

2647 
	$tsi_desc_¡¬t
 (vÞ©*
cÚÞËr_addr
, 
chªÃl
, 
DmaDesütÜ
 
p
)

2649 
VmeTsi148DmaLi¡DesütÜ
 
d
 = 
p
;

2650 iàÐ!
cÚÞËr_addr
 )

2651 
cÚÞËr_addr
 = 
THEBASE
;

2652  
	`vmeTsi148DmaLi¡S¹XX
((
BERegi¡
*)
cÚÞËr_addr
, 
chªÃl
, 
d
);

2653 
	}
}

2655 #ifdeà
DEBUG_MODULAR


2657 
	$_ûxpModuËInlize
(* 
unu£d
)

2659 
	`vmeTsi148In
();

2660 
	`vmeTsi148Re£t
();

2661 
	}
}

2664 
	$_ûxpModuËF®ize
(*
unu£d
)

2666 
i
;

2667 
rv®
 = 1;

2668 (*
i¤s
[
TSI_NUM_WIRES
])() = {

2669 
i¤_p0
,

2670 
i¤_p1
,

2671 
i¤_p2
,

2672 
i¤_p3
,

2675 
¹ems_q_cÚÃù_d©a
 
xx
;

2676 
xx
.
Ú
 = 
my_no_Ý
;

2677 
xx
.
off
 = 
my_no_Ý
;

2678 
xx
.
isOn
 = 
my_isOn
;

2680 
	`TSI_WR
(
THEBASE
, 
TSI_INTEO_REG
, 0);

2682  
i
=0; i<
TSI_NUM_INT_VECS
; i++) {

2685 iàÐ
vmeTsi148IrqMgrIn¡®Ëd
 ) {

2686  
i
=0; i<
TSI_NUM_WIRES
; i++ ) {

2687 iàÐ()(
xx
.
Çme
 = 
devs
[0].
pic_p
[
i
]) >=0 ) {

2688 
xx
.
hdl
 = 
i¤s
[
i
];

2689 
rv®
 =v® && 
	`BSP_»move_¹ems_q_hªdËr
(&
xx
);

2693  !
rv®
;

2694 
	}
}

	@src/lib/libbsp/shared/vmeUniverse/vmeTsi148.h

9 #iâdeà
VME_TSI148_DRIVER_H


10 
	#VME_TSI148_DRIVER_H


	)

57 
	~<¡dt.h
>

58 
	~<b¥/vme_am_defs.h
>

75 
	#VME_MODE_PREFETCH_ENABLE
 
VME_AM_IS_MEMORY


	)

76 
	#_LD_VME_MODE_PREFETCHSZ
 24

	)

77 
	#VME_MODE_PREFETCH_SIZE
(
x
è(((x)&3)<<
_LD_VME_MODE_PREFETCHSZ
)

	)

83 
	#VME_MODE_MATCH_MASK
 (3<<30)

	)

84 
	#VME_MODE_EXACT_MATCH
 (2<<30è

	)

85 
	#VME_MODE_AS_MATCH
 (1<<30è

	)

87 #ifdeà
__ýlu¥lus


91 vÞ©
	tut32_t
 
	tBERegi¡
;

105 
vmeTsi148FdPciBa£
(
¡ªû
, 
BERegi¡
 **
pba£
);

116 
vmeTsi148InIn¡ªû
(
¡ªû
);

122 
vmeTsi148In
();

128 
vmeTsi148Re£tXX
(
BERegi¡
 *
ba£
);

132 
vmeTsi148Re£t
();

136 
vmeTsi148Re£tBusXX
(
BERegi¡
 *
ba£
);

140 
vmeTsi148Re£tBus
();

169 
vmeTsi148OutboundPÜtCfgXX
(

170 
BERegi¡
 *
ba£
,

171 
pÜt
,

172 
add»ss_¥aû
,

173 
vme_add»ss
,

174 
pci_add»ss
,

175 
Ëngth
);

178 
vmeTsi148OutboundPÜtCfg
(

179 
pÜt
,

180 
add»ss_¥aû
,

181 
vme_add»ss
,

182 
pci_add»ss
,

183 
Ëngth
);

188 
vmeTsi148InboundPÜtCfgXX
(

189 
BERegi¡
 *
ba£
,

190 
pÜt
,

191 
add»ss_¥aû
,

192 
vme_add»ss
,

193 
pci_add»ss
,

194 
Ëngth
);

197 
vmeTsi148InboundPÜtCfg
(

198 
pÜt
,

199 
add»ss_¥aû
,

200 
vme_add»ss
,

201 
pci_add»ss
,

202 
Ëngth
);

233 
vmeTsi148XÏAddrXX
(

234 
BERegi¡
 *
ba£
,

235 
outbound
,

236 
»v£
,

237 
as
,

238 
aIn
,

239 *
·Out


243 
vmeTsi148XÏAddr
(

244 
outbound
,

245 
»v£
,

246 
as
,

247 
aIn
,

248 *
·Out


259 #ifdeà
_VME_TSI148_DECLARE_SHOW_ROUTINES


266 
vmeTsi148OutboundPÜtsShowXX
(
BERegi¡
 *
ba£
, 
FILE
 *
f
);

269 
vmeTsi148OutboundPÜtsShow
(
FILE
 *
f
);

276 
vmeTsi148InboundPÜtsShowXX
(
BERegi¡
 *
ba£
, 
FILE
 *
f
);

279 
vmeTsi148InboundPÜtsShow
(
FILE
 *
f
);

286 
vmeTsi148Di§bËAÎInboundPÜtsXX
(
BERegi¡
 *
ba£
);

289 
vmeTsi148Di§bËAÎInboundPÜts
();

292 
vmeTsi148Di§bËAÎOutboundPÜtsXX
(
BERegi¡
 *
ba£
);

295 
vmeTsi148Di§bËAÎOutboundPÜts
();

297 
	#TSI_VEAT_VES
 (1<<31)

	)

298 
	#TSI_VEAT_VEOF
 (1<<30)

	)

299 
	#TSI_VEAT_VESCL
 (1<<29)

	)

300 
	#TSI_VEAT_2eOT
 (1<<21)

	)

301 
	#TSI_VEAT_2eST
 (1<<20)

	)

302 
	#TSI_VEAT_BERR
 (1<<19)

	)

303 
	#TSI_VEAT_LWORD
 (1<<18)

	)

304 
	#TSI_VEAT_WRITE
 (1<<17)

	)

305 
	#TSI_VEAT_IACK
 (1<<16)

	)

306 
	#TSI_VEAT_DS1
 (1<<15)

	)

307 
	#TSI_VEAT_DS0
 (1<<14)

	)

308 
	#TSI_VEAT_AM
(
v
è(((v)>>8)&63)

	)

309 
	#TSI_VEAT_XAM
(
v
è((v)&255)

	)

328 
vmeTsi148CË¬VMEBusE¼ÜsXX
(
BERegi¡
 *
ba£
, 
ut32_t
 *
·ddr
);

331 
vmeTsi148CË¬VMEBusE¼Üs
(
ut32_t
 *
·ddr
);

352 
vmeTsi148M­CRGXX
(
BERegi¡
 *
ba£
, 
ut32_t
 
vme_ba£
, ut32_
add»ss_¥aû
);

355 
vmeTsi148M­CRG
(
ut32_t
 
vme_ba£
, ut32_
add»ss_¥aû
);

378 (*
VmeTsi148ISR
è(*
	tu¤Arg
, 
	tveùÜ
);

384 
vmeTsi148In¡®lISR
(
veùÜ
, 
VmeTsi148ISR
 
hªdËr
, *
u¤Arg
);

391 
vmeTsi148RemoveISR
(
veùÜ
, 
VmeTsi148ISR
 
hªdËr
, *
u¤Arg
);

396 
VmeTsi148ISR


397 
vmeTsi148ISRG
(
veùÜ
, **
·rg
);

407 
vmeTsi148IÁEÇbË
(
Ëv
);

410 
vmeTsi148IÁDi§bË
(
Ëv
);

422 
vmeTsi148IÁIsEÇbËd
(
Ëv
);

433 
vmeTsi148SIackWidth
(
Ëv
, 
width
);

471 
vmeTsi148IÁRou
(
Ëv
, 
p
);

502 
vmeTsi148IÁRai£XX
(
BERegi¡
 *
ba£
, 
Ëv
, 
veùÜ
);

505 
vmeTsi148IÁRai£
(
Ëv
, 
veùÜ
);

531 
vmeTsi148IÁLoÝbackT¡
(
Ëv
, 
veùÜ
);

549 
	#TSI_DMA_INT_VEC
 257

	)

550 
	#TSI_LERR_INT_VEC
 258

	)

551 
	#TSI_VERR_INT_VEC
 259

	)

553 
	#TSI_VME_SW_IACK_INT_VEC
 261

	)

555 
	#TSI_SYSFAIL_INT_VEC
 263

	)

556 
	#TSI_ACFAIL_INT_VEC
 264

	)

557 
	#TSI_MBOX0_INT_VEC
 265

	)

558 
	#TSI_MBOX1_INT_VEC
 266

	)

559 
	#TSI_MBOX2_INT_VEC
 267

	)

560 
	#TSI_MBOX3_INT_VEC
 268

	)

561 
	#TSI_LM0_INT_VEC
 269

	)

562 
	#TSI_LM1_INT_VEC
 270

	)

563 
	#TSI_LM2_INT_VEC
 271

	)

564 
	#TSI_LM3_INT_VEC
 272

	)

567 
	#TSI_VIES_INT_VEC
 273

	)

568 
	#TSI_DMA1_INT_VEC
 274

	)

570 
	#TSI_NUM_INT_VECS
 275

	)

572 #ifdeà
__INSIDE_RTEMS_BSP__


574 
	~<¡d¬g.h
>

650 
	#VMETSI148_IRQ_MGR_FLAG_SHARED
 1

	)

652 
vmeTsi148In¡®lIrqMgrAÉ
(
sh¬ed
, 
tsi_p0
, 
pic_p0
, ...);

655 
vmeTsi148In¡®lIrqMgrVa
(
sh¬ed
, 
tsi_p0
, 
pic_p0
, 
va_li¡
 
­
);

658 #ifdeà
__ýlu¥lus


	@src/lib/libbsp/shared/vmeUniverse/vmeTsi148DMA.h

9 #iâdeà
VME_TSI148_DMA_H


10 
	#VME_TSI148_DMA_H


	)

12 
	~<b¥/vmeTsi148.h
>

58 #ifdeà
__ýlu¥lus


70 
VMEDmaLi¡CÏssRec_
 
vmeTsi148DmaLi¡CÏss
;

72 
VmeTsi148DmaLi¡DesütÜRec_
 *
	tVmeTsi148DmaLi¡DesütÜ
;

75 
vmeTsi148DmaSupXX
(
BERegi¡
 *
ba£
, 
chªÃl
, 
ut32_t
 
mode
, ut32_
xãr_mode
, *
cu¡om
);

78 
vmeTsi148DmaSup
(
chªÃl
, 
ut32_t
 
mode
, ut32_
xãr_mode
, *
cu¡om
);

81 
vmeTsi148DmaLi¡S¹XX
(
BERegi¡
 *
ba£
, 
chªÃl
, 
VmeTsi148DmaLi¡DesütÜ
 
d
);

84 
vmeTsi148DmaLi¡S¹
(
chªÃl
, 
VmeTsi148DmaLi¡DesütÜ
 
d
);

87 
vmeTsi148DmaS¹XX
(
BERegi¡
 *
ba£
, 
chªÃl
, 
ut32_t
 
pci_addr
, ut32_
vme_addr
, ut32_
n_bys
);

90 
vmeTsi148DmaS¹
(
chªÃl
, 
ut32_t
 
pci_addr
, ut32_
vme_addr
, ut32_
n_bys
);

92 
ut32_t


93 
vmeTsi148DmaStusXX
(
BERegi¡
 *
ba£
, 
chªÃl
);

95 
ut32_t


96 
vmeTsi148DmaStus
(
chªÃl
);

98 #ifdeà
__ýlu¥lus


	@src/lib/libbsp/shared/vmeUniverse/vmeUniverse.c

48 
	~<¡dio.h
>

49 
	~<y³s.h
>

51 #ià
defed
(
__¹ems__
)

52 #iâdeà
__INSIDE_RTEMS_BSP__


53 
	#__INSIDE_RTEMS_BSP__


	)

57 
	~"vmeUniv£.h
"

58 
	~"vmeUniv£DMA.h
"

60 
	#UNIV_NUM_MPORTS
 8

	)

61 
	#UNIV_NUM_SPORTS
 8

	)

63 
	#PCI_VENDOR_TUNDRA
 0x10e3

	)

64 
	#PCI_DEVICE_UNIVERSEII
 0

	)

65 
	#PCI_UNIVERSE_BASE0
 0x10

	)

66 
	#PCI_UNIVERSE_BASE1
 0x14

	)

68 
	#UNIV_REGOFF_PCITGT0_CTRL
 0x100

	)

69 
	#UNIV_REGOFF_PCITGT4_CTRL
 0x1a0

	)

70 
	#UNIV_REGOFF_VMESLV0_CTRL
 0xf00

	)

71 
	#UNIV_REGOFF_VMESLV4_CTRL
 0xf90

	)

73 
	#UNIV_CTL_VAS16
 (0x00000000)

	)

74 
	#UNIV_CTL_VAS24
 (0x00010000)

	)

75 
	#UNIV_CTL_VAS32
 (0x00020000)

	)

76 
	#UNIV_MCTL_VASCSR
 (0x00050000)

	)

77 
	#UNIV_CTL_VAS
 (0x00070000)

	)

79 
	#UNIV_MCTL_EN
 (0x80000000)

	)

80 
	#UNIV_MCTL_PWEN
 (0x40000000)

	)

81 
	#UNIV_MCTL_PGM
 (0x00004000)

	)

82 
	#UNIV_MCTL_VCT
 (0x00000100)

	)

83 
	#UNIV_MCTL_SUPER
 (0x00001000)

	)

84 
	#UNIV_MCTL_VDW16
 (0x00400000)

	)

85 
	#UNIV_MCTL_VDW32
 (0x00800000)

	)

86 
	#UNIV_MCTL_VDW64
 (0x00c00000)

	)

88 
	#UNIV_MCTL_AM_MASK
 (
UNIV_CTL_VAS
 | 
UNIV_MCTL_PGM
 | 
UNIV_MCTL_SUPER
)

	)

90 
	#UNIV_SCTL_EN
 (0x80000000)

	)

91 
	#UNIV_SCTL_PWEN
 (0x40000000)

	)

92 
	#UNIV_SCTL_PREN
 (0x20000000)

	)

93 
	#UNIV_SCTL_PGM
 (0x00800000)

	)

94 
	#UNIV_SCTL_DAT
 (0x00400000)

	)

95 
	#UNIV_SCTL_SUPER
 (0x00200000)

	)

96 
	#UNIV_SCTL_USER
 (0x00100000)

	)

98 
	#UNIV_SCTL_AM_MASK
 (
UNIV_CTL_VAS
 | 
UNIV_SCTL_PGM
 | 
UNIV_SCTL_DAT
 | 
UNIV_SCTL_USER
 | 
UNIV_SCTL_SUPER
)

	)

100 #ifdeà
__¹ems__


102 
	~<¡dlib.h
>

103 
	~<¹ems/b¥Io.h
>

104 
	~<¹ems/rÜ.h
>

105 
	~<¹ems/pci.h
>

106 
	~<b¥.h
>

107 
	~<libýu/byÜd.h
>

110 #iâdeà
BSP_PCI_FIND_DEVICE


111 
	#BSP_PCI_FIND_DEVICE
 
pci_fd_deviû


	)

113 #iâdeà
BSP_PCI_CONFIG_IN_LONG


114 
	#BSP_PCI_CONFIG_IN_LONG
 
pci_»ad_cÚfig_dwÜd


	)

116 #iâdeà
BSP_PCI_CONFIG_IN_BYTE


117 
	#BSP_PCI_CONFIG_IN_BYTE
 
pci_»ad_cÚfig_by


	)

119 #iâdeà
BSP_PCI_CONFIG_IN_SHORT


120 
	#BSP_PCI_CONFIG_IN_SHORT
 
pci_»ad_cÚfig_wÜd


	)

122 #iâdeà
BSP_PCI_CONFIG_OUT_SHORT


123 
	#BSP_PCI_CONFIG_OUT_SHORT
 
pci_wre_cÚfig_wÜd


	)

129 
ut32_t
 
	tpci_ulÚg
;

131 #iâdeà
BSP_PCI2LOCAL_ADDR


132 #iâdeà
PCI_MEM_BASE


133 
	#PCI_MEM_BASE
 0

	)

135 
	#BSP_PCI2LOCAL_ADDR
(
memaddr
è((
pci_ulÚg
)(memaddrè+ 
PCI_MEM_BASE
)

	)

138 #iâdeà
BSP_LOCAL2PCI_ADDR


139 #iâdeà
PCI_DRAM_OFFSET


140 
	#PCI_DRAM_OFFSET
 0

	)

142 
	#BSP_LOCAL2PCI_ADDR
(
pcddr
è((
ut32_t
)Õcddrè+ 
PCI_DRAM_OFFSET
)

	)

146 #ià
defed
(
__vxwÜks
)

147 
	tpci_ulÚg
;

148 
	#BSP_PCI2LOCAL_ADDR
(
memaddr
è(memaddr)

	)

149 
	#BSP_PCI_FIND_DEVICE
 
pciFdDeviû


	)

150 
	#BSP_PCI_CONFIG_IN_LONG
 
pciCÚfigInLÚg


	)

151 
	#BSP_PCI_CONFIG_IN_BYTE
 
pciCÚfigInBy


	)

156 #iâdeà
PCI_INTERRUPT_LINE


157 
	#PCI_INTERRUPT_LINE
 0x3c

	)

160 vÞ©
LERegi¡
 *
	gvmeUniv£0Ba£Addr
=0;

161 
	gvmeUniv£0PciIrqLe
=-1;

163 #ifdeà
__¹ems__


164 
	gvmeUniv£RegPÜt
 = -1;

165 
	gvmeUniv£RegCSR
 = 0;

168 
	#DFLT_BASE
 vÞ©
LERegi¡
 *
ba£
 = 
vmeUniv£0Ba£Addr


	)

170 
	#CHECK_DFLT_BASE
(
ba£
) \

173 ià(!
ba£
) { \

174 ià(
	`vmeUniv£In
()) { \

175 
	`u´tf
(
¡dr
,"unableo findhe universe inci config space\n"); \

178 
ba£
 = 
vmeUniv£0Ba£Addr
; \

181 } 0)

	)

185 vÞ©
LERegi¡
 *

186 
	$vmeUniv£Ba£Addr
()

188 ià(!
vmeUniv£0Ba£Addr
è
	`vmeUniv£In
();

189  
vmeUniv£0Ba£Addr
;

190 
	}
}

193 
	$vmeUniv£PciIrqLe
()

195 ià(
vmeUniv£0PciIrqLe
<0è
	`vmeUniv£In
();

196  
vmeUniv£0PciIrqLe
;

197 
	}
}

200 
le
 

201 
	$WRITE_LE
(

202 
v®
,

203 vÞ©
LERegi¡
 *
adrs
,

204 
off
)

206 #ià(
__LITTLE_ENDIAN__
 == 1)

207 *(vÞ©*)((()
adrs
)+
off
)=
v®
;

208 #ià(
	`defed
(
_ARCH_PPC
è|| defed(
__PPC__
è|| defed(
__PPC
)è&& (
__BIG_ENDIAN__
 == 1)

210 
__asm__
 
	`__vÞ©e__
("¡wbrx %1, %0, %2" :: "b"(
off
),"r"(
v®
),"r"(
adrs
));

211 #ià
	`defed
(
__¹ems__
)

212 
	`¡_Ë32
((vÞ©
ut32_t
 *)(((ut32_t)
adrs
)+
off
), 
v®
);

216 
	}
}

218 #ià
defed
(
_ARCH_PPC
è|| defed(
__PPC__
è|| defed(
__PPC
)

219 
	#SYNC
 
__asm__
 
	`__vÞ©e__
("sync")

	)

221 
	#SYNC


	)

229 
	#EIEIO_REG


	)

231 
le
 

232 
	$READ_LE0
(vÞ©
LERegi¡
 *
adrs
)

234 #ià(
__LITTLE_ENDIAN__
 == 1)

235  *(vÞ©*)
adrs
;

236 #ià(
	`defed
(
_ARCH_PPC
è|| defed(
__PPC__
è|| defed(
__PPC
)è&& (
__BIG_ENDIAN__
 == 1)

237 
rv®
;

238 
__asm__
 
	`__vÞ©e__
("lwbrx %0, 0, %1":"ô"(
rv®
):"r"(
adrs
));

239  
rv®
;

240 #ià
	`defed
(
__¹ems__
)

241  
	`ld_Ë32
((vÞ©
ut32_t
*)
adrs
);

245 
	}
}

247 
le
 

248 
	$READ_LE
(vÞ©
LERegi¡
 *
adrs
, 
off
)

250 #ià(
__LITTLE_ENDIAN__
 == 1)

251  *((vÞ©
LERegi¡
 *)((()
adrs
)+
off
));

252 #ià(
	`defed
(
_ARCH_PPC
è|| defed(
__PPC__
è|| defed(
__PPC
)è&& (
__BIG_ENDIAN__
 == 1)

253 
rv®
;

255 
__asm__
 
	`__vÞ©e__
("lwbrx %0, %2, %1"

256 : "ô"(
rv®
)

257 : "r"(
adrs
), "b"(
off
));

259 
__asm__
 
	`__vÞ©e__
("eieio");

261  
rv®
;

263  
	`READ_LE0
((vÞ©
LERegi¡
 *)((()
adrs
)+
off
));

265 
	}
}

267 
	#PORT_UNALIGNED
(
addr
,
pÜt
) \

268 Ð(
pÜt
)%4 ? ((
addr
è& 0xffffè: (×ddrè& 4095è)

	)

271 
	#UNIV_REV
(
ba£
è(
	`READ_LE
(ba£,2*(
LERegi¡
)è& 0xff)

	)

273 #ià
defed
(
__¹ems__
) && 0

275 
	$u´tk
(*
fmt
, 
va_li¡
 
­
)

277 
rv®
;

278 
	`k_v¥rtf
(*, *, 
va_li¡
);

283 
buf
[200];

284 
rv®
 = 
	`k_v¥rtf
(
buf
,
fmt
,
­
);

285 ià(
rv®
 > (
buf
))

286 
	`BSP_·nic
("vmeUniverse/uprintk: buffer overrun");

287 
	`´tk
(
buf
);

288  
rv®
;

289 
	}
}

295 
	$u´tf
(
FILE
 *
f
, *
fmt
, ...)

297 
va_li¡
 
­
;

298 
	`va_¡¬t
(
­
, 
fmt
);

299 #ifdeà
__¹ems__


300 ià(!
f
 || !
_impu»_±r
->
__sdid
) {

306 
	`v´tk
(
fmt
,
­
);

310 
	`vårtf
(
f
,
fmt
,
­
);

312 
	`va_d
(
­
);

313 
	}
}

316 
	$vmeUniv£FdPciBa£
(

317 
¡ªû
,

318 vÞ©
LERegi¡
 **
pba£


321 
bus
,
dev
,
fun
;

322 
wrd
;

323 
pci_ulÚg
 
bu§ddr
;

324 
qle
;

326 ià(
	`BSP_PCI_FIND_DEVICE
(

327 
PCI_VENDOR_TUNDRA
,

328 
PCI_DEVICE_UNIVERSEII
,

329 
¡ªû
,

330 &
bus
,

331 &
dev
,

332 &
fun
))

334 ià(
	`BSP_PCI_CONFIG_IN_LONG
(
bus
,
dev
,
fun
,
PCI_UNIVERSE_BASE0
,&
bu§ddr
))

336 ià(()(
bu§ddr
) & 1) {

338 ià(
	`BSP_PCI_CONFIG_IN_LONG
(
bus
,
dev
,
fun
,
PCI_UNIVERSE_BASE1
,&
bu§ddr
)

339 || (()(
bu§ddr
) & 1))

342 *
pba£
=(vÞ©
LERegi¡
*)
	`BSP_PCI2LOCAL_ADDR
(
bu§ddr
);

344 ià(
	`BSP_PCI_CONFIG_IN_BYTE
(
bus
,
dev
,
fun
,
PCI_INTERRUPT_LINE
,&
qle
))

348 
	`BSP_PCI_CONFIG_IN_SHORT
(
bus
, 
dev
, 
fun
, 
PCI_COMMAND
, &
wrd
);

349 
	`BSP_PCI_CONFIG_OUT_SHORT
(
bus
, 
dev
, 
fun
, 
PCI_COMMAND
, 
wrd
 | 
PCI_COMMAND_MEMORY
 | 
PCI_COMMAND_MASTER
);

351  
qle
;

352 
	}
}

359 
	$am2mode
(
isma¡
, 
add»ss_¥aû
, *
pmode
)

361 
mode
=0;

362 
vdw
 =0;

373 
add»ss_¥aû
 &ð~
VME_MODE_MATCH_MASK
;

375 ià(!
isma¡
) {

376 
mode
 |ð
UNIV_SCTL_DAT
 | 
UNIV_SCTL_PGM
;

377 
mode
 |ð
UNIV_SCTL_USER
;

378 iàÐ
VME_AM_IS_MEMORY
 & 
add»ss_¥aû
 )

379 
mode
 |ð
UNIV_SCTL_PWEN
 | 
UNIV_SCTL_PREN
;

380 
mode
 |ð
UNIV_SCTL_EN
;

382  
VME_MODE_DBW_MSK
 & 
add»ss_¥aû
 ) {

384 
vdw
 = 
UNIV_MCTL_VDW64
;

387 
VME_MODE_DBW8
:

390 
VME_MODE_DBW16
:

391 
vdw
 = 
UNIV_MCTL_VDW16
;

394 
VME_MODE_DBW32
:

395 
vdw
 = 
UNIV_MCTL_VDW32
;

398 iàÐ
VME_AM_IS_MEMORY
 & 
add»ss_¥aû
 )

399 
mode
 |ð
UNIV_MCTL_PWEN
;

400 
mode
 |ð
UNIV_MCTL_EN
;

403 
add»ss_¥aû
 &ð~
VME_AM_IS_MEMORY
;

405 
add»ss_¥aû
 & 
VME_AM_MASK
) {

406 
VME_AM_STD_SUP_PGM
:

407 
VME_AM_STD_USR_PGM
:

408 ià(
isma¡
)

409 
mode
 |ð
UNIV_MCTL_PGM
 ;

411 
mode
 &ð~
UNIV_SCTL_DAT
;

416 
VME_AM_STD_SUP_DATA
:

417 
VME_AM_STD_USR_DATA
:

418 
VME_AM_STD_SUP_BLT
:

419 
VME_AM_STD_SUP_MBLT
:

420 
VME_AM_STD_USR_BLT
:

421 
VME_AM_STD_USR_MBLT
:

423 iàÐ
isma¡
 ) {

424  
add»ss_¥aû
 & 3 ) {

426 iàÐ
UNIV_MCTL_VDW64
 !ð
vdw
 )

431 
mode
 |ð
UNIV_MCTL_VCT
;

435 
vdw
 = 
UNIV_MCTL_VDW32
;

439 
mode
 |ð
UNIV_CTL_VAS24
;

443 
VME_AM_EXT_SUP_PGM
:

444 
VME_AM_EXT_USR_PGM
:

445 ià(
isma¡
)

446 
mode
 |ð
UNIV_MCTL_PGM
 ;

448 
mode
 &ð~
UNIV_SCTL_DAT
;

452 
VME_AM_EXT_SUP_DATA
:

453 
VME_AM_EXT_USR_DATA
:

454 
VME_AM_EXT_SUP_BLT
:

455 
VME_AM_EXT_SUP_MBLT
:

456 
VME_AM_EXT_USR_BLT
:

457 
VME_AM_EXT_USR_MBLT
:

459 iàÐ
isma¡
 ) {

460  
add»ss_¥aû
 & 3 ) {

462 iàÐ
UNIV_MCTL_VDW64
 !ð
vdw
 )

467 
mode
 |ð
UNIV_MCTL_VCT
;

471 
vdw
 = 
UNIV_MCTL_VDW32
;

475 
mode
 |ð
UNIV_CTL_VAS32
;

479 
VME_AM_SUP_SHORT_IO
:

480 
VME_AM_USR_SHORT_IO
:

481 
mode
 |ð
UNIV_CTL_VAS16
;

484 
VME_AM_CSR
:

485 iàÐ!
isma¡
 )

487 
mode
 |ð
UNIV_MCTL_VASCSR
;

496 iàÐ
	`VME_AM_IS_SUP
(
add»ss_¥aû
) )

497 
mode
 |ð(
isma¡
 ? 
UNIV_MCTL_SUPER
 : 
UNIV_SCTL_SUPER
);

499 
mode
 |ð
vdw
;

500 *
pmode
 = 
mode
;

502 
	}
}

505 
	$di§bËUniv£PÜt
(
isma¡
, 
pÜo
, vÞ©*
´eg
, *
·¿m
)

507 
úl
;

508 
úl
=
	`READ_LE0
(
´eg
);

509 
úl
 &ð~(
isma¡
 ? 
UNIV_MCTL_EN
 : 
UNIV_SCTL_EN
);

510 
	`WRITE_LE
(
úl
,
´eg
,0);

511 
SYNC
;

513 
	}
}

516 
	$cfgUniv£PÜt
(

517 vÞ©
LERegi¡
 *
ba£
,

518 
isma¡
,

519 
pÜt
,

520 
add»ss_¥aû
,

521 
vme_add»ss
,

522 
loÿl_add»ss
,

523 
Ëngth
)

525 vÞ©
LERegi¡
 *
´eg
;

526 
p
=
pÜt
;

527 
mode
=0;

529 
	`CHECK_DFLT_BASE
(
ba£
);

532 ià(
pÜt
 >ð(
isma¡
 ? 
UNIV_NUM_MPORTS
 : 
UNIV_NUM_SPORTS
)) {

533 
	`u´tf
(
¡dr
,"invalidort\n");

539 iàÐ
	`PORT_UNALIGNED
(
loÿl_add»ss
,
pÜt
) ) {

540 
	`u´tf
(
¡dr
,"localddress misaligned\n");

543 iàÐ
	`PORT_UNALIGNED
(
vme_add»ss
,
pÜt
) ) {

544 
	`u´tf
(
¡dr
,"vmeddress misaligned\n");

547 iàÐ
	`PORT_UNALIGNED
(
Ëngth
,
pÜt
) ) {

548 
	`u´tf
(
¡dr
,"length misaligned\n");

553 ià(
	`am2mode
(
isma¡
,
add»ss_¥aû
,&
mode
)) {

554 
	`u´tf
(
¡dr
,"invalidddress space\n");

559 ià(!
ba£
 && 
	`vmeUniv£In
()) {

563 
´eg
=
ba£
;

566 iàÐ
	`UNIV_REV
(
ba£
) < 2 ) {

567 ià(
pÜt
>3) {

568 
	`u´tf
(
¡dr
,"Universeev. < 2 has only 4orts\n");

576 ià(
pÜt
<4) {

577 
´eg
 +ð(
isma¡
 ? 
UNIV_REGOFF_PCITGT0_CTRL
 : 
UNIV_REGOFF_VMESLV0_CTRL
)/(
LERegi¡
);

579 
´eg
 +ð(
isma¡
 ? 
UNIV_REGOFF_PCITGT4_CTRL
 : 
UNIV_REGOFF_VMESLV4_CTRL
)/(
LERegi¡
);

580 
p
-=4;

582 
´eg
 +ð5 * 
p
;

585 
	`di§bËUniv£PÜt
(
isma¡
,
pÜt
,
´eg
,0);

588 ià(
add»ss_¥aû
 != 0) {

589 
¡¬t
,
off¡
;

594 ià(
isma¡
) {

595 
¡¬t
=
loÿl_add»ss
;

597 
off¡
=
vme_add»ss
-
loÿl_add»ss
;

599 
¡¬t
=
vme_add»ss
;

601 
off¡
=
loÿl_add»ss
-
vme_add»ss
;

603 #undeà
TSILL


604 #ifdeà
TSILL


605 
	`u´tf
(
¡dr
,"wrg 0x%08xØ0x%08x + 4\n",
¡¬t
,
´eg
);

607 
	`WRITE_LE
(
¡¬t
,
´eg
,4);

610 
Ëngth
+=
¡¬t
;

611 #ifdeà
TSILL


612 
	`u´tf
(
¡dr
,"wrg 0x%08xØ0x%08x + 8\n",
Ëngth
,
´eg
);

614 
	`WRITE_LE
(
Ëngth
,
´eg
,8);

617 #ifdeà
TSILL


618 
	`u´tf
(
¡dr
,"wrg 0x%08xØ0x%08x + 12\n",
off¡
,
´eg
);

620 
	`WRITE_LE
(
off¡
,
´eg
,12);

623 #ifdeà
TSILL


624 
	`u´tf
(
¡dr
,"wrg 0x%08xØ0x%08x + 0\n",
mode
,
´eg
);

626 
EIEIO_REG
;

627 
	`WRITE_LE
(
mode
,
´eg
,0);

628 
SYNC
;

631 #ifdeà
TSILL


632 
	`u´tf
(
¡dr
,

634 
isma¡
 ? "master" : "slave",

635 
pÜt
);

638 #ifdeà
__vxwÜks


639 ià(
isma¡
)

640 
	`u´tf
(
¡dr
,

645 
	}
}

648 
	$showUniv£PÜt
(

649 
isma¡
,

650 
pÜo
,

651 vÞ©
LERegi¡
 *
´eg
,

652 *
·rm
)

654 
FILE
 *
f
=
·rm
 ? (FILE *í¬m : 
¡dout
;

655 
úl
, 
¡¬t
, 
bound
, 
off¡
, 
mask
;

657 
úl
 = 
	`READ_LE0
(
´eg
++);

658 #undeà
TSILL


659 #ifdeà
TSILL


660 
	`u´tf
(
¡dr
,"showUniv£PÜt: *(0x%08x): 0x%08x\n",
´eg
-1,
úl
);

662 #undeà
TSILL


665 ià(!(
úl
 & (
isma¡
 ? 
UNIV_MCTL_EN
 : 
UNIV_SCTL_EN
)))

671 
mask
 = ~
	`PORT_UNALIGNED
(0xffffffff,
pÜo
);

673 
¡¬t
 = 
	`READ_LE0
(
´eg
++)&
mask
;

674 
bound
 = 
	`READ_LE0
(
´eg
++)&
mask
;

675 
off¡
 = 
	`READ_LE0
(
´eg
++)&
mask
;

677 
off¡
+=
¡¬t
;

679 ià(
isma¡
) {

680 
	`u´tf
(
f
,"%d: 0x%08lx 0x%08lx 0x%08lx ",

681 
pÜo
,
off¡
,
bound
-
¡¬t
,start);

683 
	`u´tf
(
f
,"%d: 0x%08lx 0x%08lx 0x%08lx ",

684 
pÜo
,
¡¬t
,
bound
-¡¬t,
off¡
);

687 
úl
 & 
UNIV_CTL_VAS
) {

688 
UNIV_CTL_VAS16
: 
	`u´tf
(
f
,"A16, "); ;

689 
UNIV_CTL_VAS24
: 
	`u´tf
(
f
,"A24, "); ;

690 
UNIV_CTL_VAS32
: 
	`u´tf
(
f
,"A32, "); ;

691 
UNIV_MCTL_VASCSR
: iàÐ
isma¡
 ) { 
	`u´tf
(
f
,"CSR, "); ; }

693 : 
	`u´tf
(
f
,"A??, "); ;

696 ià(
isma¡
) {

697 
vdw
;

698  
úl
 & 
UNIV_MCTL_VDW64
 ) {

699 
UNIV_MCTL_VDW64
:

700 
vdw
 = 64;

703 
UNIV_MCTL_VDW32
:

704 
vdw
 = 32;

707 
UNIV_MCTL_VDW16
:

708 
vdw
 = 16;

712 
vdw
 = 8;

716 iàÐ64 =ð
vdw
 ) {

717  
UNIV_CTL_VAS
 & 
úl
 ) {

718 
UNIV_CTL_VAS24
:

719 
UNIV_CTL_VAS32
:

720 
	`u´tf
(
f
,"D64 [MBLT], ");

724 
	`u´tf
(
f
,"D64, ");

728 
	`u´tf
(
f
, "D%u%s, ", 
vdw
, (
úl
 & 
UNIV_MCTL_VCT
) ? " [BLT]" : "");

731 
	`u´tf
(
f
,"%s, %s",

732 
úl
&
UNIV_MCTL_PGM
 ? "Pgm" : "Dat",

733 
úl
&
UNIV_MCTL_SUPER
 ? "Sup" : "Usr");

734 iàÐ
úl
 & 
UNIV_MCTL_PWEN
 )

735 
	`u´tf
(
f
,", PWEN");

737 
	`u´tf
(
f
,"%s %s %s %s",

738 
úl
&
UNIV_SCTL_PGM
 ? "Pgm," : " ",

739 
úl
&
UNIV_SCTL_DAT
 ? "Dat," : " ",

740 
úl
&
UNIV_SCTL_SUPER
 ? "Sup," : " ",

741 
úl
&
UNIV_SCTL_USER
 ? "Usr" : "");

742 iàÐ
úl
 & 
UNIV_SCTL_PWEN
 )

743 
	`u´tf
(
f
,", PWEN");

744 iàÐ
úl
 & 
UNIV_SCTL_PREN
 )

745 
	`u´tf
(
f
,", PREN");

747 
	`u´tf
(
f
,"\n");

749 
	}
}

751 
	sXÏtRec_
 {

752 
	madd»ss
;

753 
	ma¥aû
;

754 
	m»v£
;

755 } 
	tXÏtRec
, *
	tXÏt
;

768 
	$xÏPÜt
(
isma¡
, 
pÜt
, vÞ©
LERegi¡
 *
´eg
, *
·rm
)

770 
XÏt
 
l
=(XÏt)
·rm
;

771 
úl
, 
¡¬t
, 
bound
, 
off¡
, 
mask
, 
x
;

773 
úl
 = 
	`READ_LE0
(
´eg
++);

776 ià(!(
úl
 & (
isma¡
 ? 
UNIV_MCTL_EN
 : 
UNIV_SCTL_EN
)))

780 iàÐ
	`am2mode
(
isma¡
,
l
->
a¥aû
,&
off¡
) ) {

781 
	`u´tf
(
¡dr
,"vmeUniverse WARNING: invaliddressing mode 0x%x\n",

782 
l
->
a¥aû
);

787 
VME_MODE_MATCH_MASK
 & 
l
->
a¥aû
) {

788 
VME_MODE_EXACT_MATCH
:

789 
mask
 = -1 & ~
VME_MODE_MATCH_MASK
;

792 
VME_MODE_AS_MATCH
:

793 
mask
 = 
UNIV_CTL_VAS
;

797 
mask
 = (
isma¡
 ? 
UNIV_MCTL_AM_MASK
 : 
UNIV_SCTL_AM_MASK
);

801 
úl
 &ð
mask
;

802 
off¡
 &ð
mask
;

804 iàÐ
úl
 !ð
off¡
 )

808 
mask
 = ~
	`PORT_UNALIGNED
(0xffffffff,
pÜt
);

813 
¡¬t
 = 
	`READ_LE0
(
´eg
++è& 
mask
;

814 
bound
 = 
	`READ_LE0
(
´eg
++è& 
mask
;

815 
off¡
 = 
	`READ_LE0
(
´eg
++è& 
mask
;

818 ià(
l
->
»v£
) {

822 ià(
l
->
add»ss
 >ð
¡¬t
 &&->add»s < 
bound
) {

823 
l
->
add»ss
+=
off¡
;

824  1 + 
pÜt
;

827 
x
 = 
l
->
add»ss
 - 
off¡
;

829 ià(
x
 >ð
¡¬t
 && x < 
bound
) {

831 
l
->
add»ss
 = 
x
;

832  1 + 
pÜt
;

836 
	}
}

840 
	$hasPWENWdow
(

841 
isma¡
,

842 
pÜo
,

843 vÞ©
LERegi¡
 *
´eg
,

844 *
·rm
)

846 
úl
 = 
	`READ_LE0
(
´eg
);

847 
mask
 = 
isma¡
 ? (
UNIV_MCTL_EN
|
UNIV_MCTL_PWEN
è: (
UNIV_SCTL_EN
|
UNIV_SCTL_PWEN
);

848  (
úl
 & 
mask
) == mask ? -1 : 0;

849 
	}
}

852 
m­OvAÎ
(vÞ©
LERegi¡
 *
ba£
, 
isma¡
, (*
func
)(,,vÞ©LERegi¡ *,*), *
¬g
)

854 vÞ©
LERegi¡
 *
½
;

855 
pÜt
;

856 
rv®
;

858 
	`CHECK_DFLT_BASE
(
ba£
);

860 
½
 = (
ba£
 +

861 (
isma¡
 ? 
UNIV_REGOFF_PCITGT0_CTRL
 : 
UNIV_REGOFF_VMESLV0_CTRL
)/(
LERegi¡
));

862 #undeà
TSILL


863 #ifdeà
TSILL


864 
	`u´tf
(
¡dr
,"m­ov®l: ba£ i 0x%08x,±¸0x%08x\n",
ba£
,
½
);

866 #undeà
TSILL


867 
pÜt
=0;ort<4;ort++) {

868 ià((
rv®
=
	`func
(
isma¡
,
pÜt
,
½
,
¬g
))) val;

869 
½
+=5;

873 ià(
	`UNIV_REV
(
ba£
)<2)  -1;

875 
½
 = (
ba£
 +

876 (
isma¡
 ? 
UNIV_REGOFF_PCITGT4_CTRL
 : 
UNIV_REGOFF_VMESLV4_CTRL
)/(
LERegi¡
));

877 
pÜt
=4;Üt<
UNIV_NUM_MPORTS
;ort++) {

878 ià((
rv®
=
	`func
(
isma¡
,
pÜt
,
½
,
¬g
))) val;

879 
½
+=5;

882 
	}
}

885 
	$showUniv£PÜts
(vÞ©
LERegi¡
 *
ba£
, 
isma¡
, 
FILE
 *
f
)

887 ià(!
f
èf=
¡dout
;

888 
	`u´tf
(
f
,"Univ£ % PÜts:\n",
isma¡
 ? "Master" : "Slave");

889 
	`u´tf
(
f
,"Port VME-Addr Size PCI-Adrs Mode:\n");

890 
	`m­OvAÎ
(
ba£
,
isma¡
,
showUniv£PÜt
,
f
);

891 
	}
}

894 
	$xÏFdPÜt
(

895 vÞ©
LERegi¡
 *
ba£
,

896 
ma¡
,

897 
»v£
,

898 
as
,

899 
aIn
,

900 *
·Out


903 
rv®
;

904 
XÏtRec
 
l
;

905 
l
.
a¥aû
 = 
as
;

906 
l
.
add»ss
 = 
aIn
;

907 
l
.
»v£
 =everse;

909 
rv®
 = 
	`m­OvAÎ
(
ba£
,
ma¡
,
xÏPÜt
,(*)&
l
) - 1;

910 *
·Out
 = 
l
.
add»ss
;

911  
rv®
;

912 
	}
}

915 
	$vmeUniv£XÏAddrXX
(

916 vÞ©
LERegi¡
 *
ba£
,

917 
ma¡
,

918 
»v£
,

919 
as
,

920 
aIn
,

921 *
·Out


924  
	`xÏFdPÜt
(
ba£
, 
ma¡
, 
»v£
, 
as
, 
aIn
, 
·Out
) >= 0 ? 0 : -1;

925 
	}
}

928 
	$vmeUniv£XÏAddr
(

929 
ma¡
,

930 
»v£
,

931 
as
,

932 
aIn
,

933 *
·Out


936 
DFLT_BASE
;

937  
	`vmeUniv£XÏAddrXX
(
ba£
, 
ma¡
, 
»v£
, 
as
, 
aIn
, 
·Out
);

938 
	}
}

942 
	$vmeUniv£Re£t
()

945 
	`vmeUniv£WreReg
(0, 
UNIV_REGOFF_SCYC_CTL
);

946 
	`vmeUniv£WreReg
(0, 
UNIV_REGOFF_SCYC_ADDR
);

947 
	`vmeUniv£WreReg
(0, 
UNIV_REGOFF_SCYC_EN
);

952 
	`vmeUniv£WreReg
(
UNIV_LMISC_CRT_128_US
, 
UNIV_REGOFF_LMISC
);

955 
	`vmeUniv£WreReg
(0, 
UNIV_REGOFF_DCTL
);

956 
	`vmeUniv£WreReg
(0, 
UNIV_REGOFF_DTBC
);

957 
	`vmeUniv£WreReg
(0, 
UNIV_REGOFF_DLA
);

958 
	`vmeUniv£WreReg
(0, 
UNIV_REGOFF_DVA
);

959 
	`vmeUniv£WreReg
(0, 
UNIV_REGOFF_DCPP
);

962 
	`vmeUniv£WreReg
(0, 
UNIV_REGOFF_LM_CTL
);

965 
	`vmeUniv£WreReg
(0, 
UNIV_REGOFF_VRAI_CTL
);

969 
	`vmeUniv£WreReg
(0, 
UNIV_REGOFF_VCSR_CTL
);

979 ià(2==
	`UNIV_REV
(
vmeUniv£0Ba£Addr
))

980 
	`vmeUniv£WreReg
(
UNIV_U2SPEC_DTKFLTR
 |

981 
UNIV_U2SPEC_MASt11
 |

982 
UNIV_U2SPEC_READt27_NODELAY
 |

983 
UNIV_U2SPEC_POSt28_FAST
 |

984 
UNIV_U2SPEC_PREt28_FAST
,

985 
UNIV_REGOFF_U2SPEC
);

988 
	`vmeUniv£WreReg
(0, 
UNIV_REGOFF_LINT_EN
);

989 
	`vmeUniv£WreReg
(0, 
UNIV_REGOFF_LINT_MAP0
);

990 
	`vmeUniv£WreReg
(0, 
UNIV_REGOFF_LINT_MAP1
);

992 
	`vmeUniv£WreReg
(0, 
UNIV_REGOFF_VINT_EN
);

993 
	`vmeUniv£WreReg
(0, 
UNIV_REGOFF_VINT_MAP0
);

994 
	`vmeUniv£WreReg
(0, 
UNIV_REGOFF_VINT_MAP1
);

996 
	`vmeUniv£Di§bËAÎSÏves
();

998 
	`vmeUniv£Di§bËAÎMa¡s
();

1000 
	`vmeUniv£WreReg
(
UNIV_VCSR_CLR_SYSFAIL
, 
UNIV_REGOFF_VCSR_CLR
);

1003 
	`vmeUniv£WreReg
(
UNIV_LINT_STAT_CLR
, 
UNIV_REGOFF_LINT_STAT
);

1004 
	`vmeUniv£WreReg
(
UNIV_VINT_STAT_CLR
, 
UNIV_REGOFF_VINT_STAT
);

1006 
	`vmeUniv£WreReg
(
UNIV_V_AMERR_V_STAT
, 
UNIV_REGOFF_V_AMERR
);

1008 
	`vmeUniv£WreReg
(

1009 
	`vmeUniv£RdReg
(
UNIV_REGOFF_PCI_CSR
) |

1010 
UNIV_PCI_CSR_D_PE
 | 
UNIV_PCI_CSR_S_SERR
 | 
UNIV_PCI_CSR_R_MA
 |

1011 
UNIV_PCI_CSR_R_TA
 | 
UNIV_PCI_CSR_S_TA
,

1012 
UNIV_REGOFF_PCI_CSR
);

1014 
	`vmeUniv£WreReg
(
UNIV_L_CMDERR_L_STAT
, 
UNIV_REGOFF_L_CMDERR
);

1016 
	`vmeUniv£WreReg
(

1017 
UNIV_DGCS_STOP
 | 
UNIV_DGCS_HALT
 | 
UNIV_DGCS_DONE
 |

1018 
UNIV_DGCS_LERR
 | 
UNIV_DGCS_VERR
 | 
UNIV_DGCS_P_ERR
,

1019 
UNIV_REGOFF_DGCS
);

1020 
	}
}

1023 
	$vmeUniv£In
()

1025 
rv®
;

1026 iàÐ(
rv®
=
	`vmeUniv£FdPciBa£
(0,&
vmeUniv£0Ba£Addr
)) < 0 ) {

1027 
	`u´tf
(
¡dr
,"unableo findhe universe inci config space\n");

1029 
vmeUniv£0PciIrqLe
 = 
rv®
;

1030 
rv®
 = 0;

1031 
	`u´tf
(
¡dr
,"Universe II PCI-VME bridge detectedt 0x%08x, IRQ %d\n",

1032 ()
vmeUniv£0Ba£Addr
, 
vmeUniv£0PciIrqLe
);

1034  
rv®
;

1035 
	}
}

1038 
	$vmeUniv£Ma¡PÜtsShowXX
(vÞ©
LERegi¡
 *
ba£
, 
FILE
 *
f
)

1040 
	`showUniv£PÜts
(
ba£
,1,
f
);

1041 
	}
}

1044 
	$vmeUniv£Ma¡PÜtsShow
(
FILE
 *
f
)

1046 
DFLT_BASE
;

1047 
	`showUniv£PÜts
(
ba£
,1,
f
);

1048 
	}
}

1051 
	$vmeUniv£SÏvePÜtsShowXX
(vÞ©
LERegi¡
 *
ba£
, 
FILE
 *
f
)

1053 
	`showUniv£PÜts
(
ba£
,0,
f
);

1054 
	}
}

1057 
	$vmeUniv£SÏvePÜtsShow
(
FILE
 *
f
)

1059 
DFLT_BASE
;

1060 
	`showUniv£PÜts
(
ba£
,0,
f
);

1061 
	}
}

1064 
	$vmeUniv£Ma¡PÜtCfgXX
(

1065 vÞ©
LERegi¡
 *
ba£
,

1066 
pÜt
,

1067 
add»ss_¥aû
,

1068 
vme_add»ss
,

1069 
loÿl_add»ss
,

1070 
Ëngth
)

1072  
	`cfgUniv£PÜt
(
ba£
,1,
pÜt
,
add»ss_¥aû
,
vme_add»ss
,
loÿl_add»ss
,
Ëngth
);

1073 
	}
}

1076 
	$vmeUniv£Ma¡PÜtCfg
(

1077 
pÜt
,

1078 
add»ss_¥aû
,

1079 
vme_add»ss
,

1080 
loÿl_add»ss
,

1081 
Ëngth
)

1083 
DFLT_BASE
;

1084  
	`cfgUniv£PÜt
(
ba£
,1,
pÜt
,
add»ss_¥aû
,
vme_add»ss
,
loÿl_add»ss
,
Ëngth
);

1085 
	}
}

1088 
	$vmeUniv£SÏvePÜtCfgXX
(

1089 vÞ©
LERegi¡
 *
ba£
,

1090 
pÜt
,

1091 
add»ss_¥aû
,

1092 
vme_add»ss
,

1093 
loÿl_add»ss
,

1094 
Ëngth
)

1096  
	`cfgUniv£PÜt
(
ba£
,0,
pÜt
,
add»ss_¥aû
,
vme_add»ss
,
loÿl_add»ss
,
Ëngth
);

1097 
	}
}

1100 
	$vmeUniv£SÏvePÜtCfg
(

1101 
pÜt
,

1102 
add»ss_¥aû
,

1103 
vme_add»ss
,

1104 
loÿl_add»ss
,

1105 
Ëngth
)

1107 
DFLT_BASE
;

1108  
	`cfgUniv£PÜt
(
ba£
,0,
pÜt
,
add»ss_¥aû
,
vme_add»ss
,
loÿl_add»ss
,
Ëngth
);

1109 
	}
}

1113 
	$vmeUniv£Di§bËAÎSÏvesXX
(vÞ©
LERegi¡
 *
ba£
)

1115 
	`m­OvAÎ
(
ba£
,0,
di§bËUniv£PÜt
,0);

1116 
	}
}

1119 
	$vmeUniv£Di§bËAÎSÏves
()

1121 
DFLT_BASE
;

1122 
	`m­OvAÎ
(
ba£
,0,
di§bËUniv£PÜt
,0);

1123 
	}
}

1126 
	$vmeUniv£Di§bËAÎMa¡sXX
(vÞ©
LERegi¡
 *
ba£
)

1128 
	`m­OvAÎ
(
ba£
,1,
di§bËUniv£PÜt
,0);

1129 
	}
}

1132 
	$vmeUniv£Di§bËAÎMa¡s
()

1134 
DFLT_BASE
;

1135 
	`m­OvAÎ
(
ba£
,1,
di§bËUniv£PÜt
,0);

1136 
	}
}

1139 
	$vmeUniv£RdRegXX
(vÞ©
LERegi¡
 *
ba£
, 
off£t
)

1141 
rv®
;

1142 
rv®
 = 
	`READ_LE
(
ba£
,
off£t
);

1143  
rv®
;

1144 
	}
}

1148 
	$vmeUniv£RdReg
(
off£t
)

1150 
rv®
;

1151 
rv®
 = 
	`READ_LE
(
vmeUniv£0Ba£Addr
,
off£t
);

1152  
rv®
;

1153 
	}
}

1156 
	$vmeUniv£WreRegXX
(vÞ©
LERegi¡
 *
ba£
, 
v®ue
, 
off£t
)

1158 
	`WRITE_LE
(
v®ue
, 
ba£
, 
off£t
);

1159 
	}
}

1162 
	$vmeUniv£WreReg
(
v®ue
, 
off£t
)

1164 
	`WRITE_LE
(
v®ue
, 
vmeUniv£0Ba£Addr
, 
off£t
);

1165 
	}
}

1168 
	$vmeUniv£Re£tBus
()

1170 
	`vmeUniv£WreReg
(

1171 
	`vmeUniv£RdReg
(
UNIV_REGOFF_MISC_CTL
è| 
UNIV_MISC_CTL_SW_SYSRST
,

1172 
UNIV_REGOFF_MISC_CTL
);

1173 
	}
}

1176 
	$vmeUniv£CvtToLE
(*
±r
, 
num
)

1178 #ià!
	`defed
(
__LITTLE_ENDIAN__
) || (__LITTLE_ENDIAN__ != 1)

1179 *
p
=
±r
+
num
;

1180 
p
 > 
±r
) {

1181 #ià(
	`defed
(
_ARCH_PPC
è|| defed(
__PPC__
è|| defed(
__PPC
)è&& (
__BIG_ENDIAN__
 == 1)

1182 
__asm__
 
	`__vÞ©e__
(

1185 : "ô"(
p
) : "0"(p) : "r0"

1187 #ià
	`defed
(
__¹ems__
)

1188 
p
--; 
	`¡_Ë32
(p, *p);

1194 
	}
}

1197 
	$vmeUniv£IÁRai£XX
(vÞ©
LERegi¡
 *
ba£
, 
Ëv
, 
veùÜ
)

1199 
v
;

1200 
b
;

1202 
	`CHECK_DFLT_BASE
(
ba£
);

1204 iàÐ
Ëv
 < 1 ||ev > 7 || 
veùÜ
 > 255 )

1207 iàÐ
veùÜ
 & 1 )

1212 iàÐ
	`vmeUniv£RdRegXX
(
ba£
, 
UNIV_REGOFF_VINT_STAT
 ) & 
	`UNIV_VINT_STAT_SWINT
(
Ëv
) ) {

1217 
	`vmeUniv£WreRegXX
(
ba£
, 
	`UNIV_VINT_STATID
(
veùÜ
), 
UNIV_REGOFF_VINT_STATID
 );

1219 iàÐ
	`UNIV_REV
(
ba£
) >= 2 ) {

1221 
b
 = 
	`UNIV_VINT_STAT_SWINT
(
Ëv
);

1224 
v
 = 
	`vmeUniv£RdRegXX
(
ba£
, 
UNIV_REGOFF_VINT_MAP1
);

1225 
v
 &ð~
	`UNIV_VINT_MAP1_SWINT
(0x7);

1226 
v
 |ð
	`UNIV_VINT_MAP1_SWINT
(
Ëv
);

1227 
	`vmeUniv£WreRegXX
(
ba£
, 
v
, 
UNIV_REGOFF_VINT_MAP1
);

1228 
b
 = 
UNIV_VINT_EN_SWINT
;

1230 
v
 = 
	`vmeUniv£RdRegXX
(
ba£
, 
UNIV_REGOFF_VINT_EN
);

1232 
	`vmeUniv£WreRegXX
(
ba£
, 
v
 & ~
b
, 
UNIV_REGOFF_VINT_EN
 );

1233 
	`vmeUniv£WreRegXX
(
ba£
, 
v
 | 
b
, 
UNIV_REGOFF_VINT_EN
 );

1237 
	}
}

1240 
	$vmeUniv£IÁRai£
(
Ëv
, 
veùÜ
)

1242  
	`vmeUniv£IÁRai£XX
(
vmeUniv£0Ba£Addr
, 
Ëv
, 
veùÜ
);

1243 
	}
}

1247 
	#UNIV_CRG_SIZE
 (1<<12)

	)

1250 
	$vmeUniv£M­CRGXX
(vÞ©
LERegi¡
 *
ba£
, 
vme_ba£
, 
as
 )

1252 
ut32_t
 
mode
;

1254 
	`CHECK_DFLT_BASE
(
ba£
);

1256 #ifdeà
__¹ems__


1257 iàÐ
vmeUniv£RegPÜt
 > -1 && ! 
vmeUniv£RegCSR
 ) {

1258 
	`u´tf
(
¡dr
,"vmeUniverse: CRGlready mappednd in use by interrupt manager\n");

1264 
mode
 = 
UNIV_VRAI_CTL_EN
 | 
UNIV_VRAI_CTL_PGM
 | 
UNIV_VRAI_CTL_DATA
 | 
UNIV_VRAI_CTL_SUPER
 | 
UNIV_VRAI_CTL_USER
;

1266 iàÐ
	`VME_AM_IS_SHORT
(
as
) ) {

1267 
mode
 |ð
UNIV_VRAI_CTL_VAS_A16
;

1269 iàÐ
	`VME_AM_IS_STD
(
as
) ) {

1270 
mode
 |ð
UNIV_VRAI_CTL_VAS_A24
;

1272 iàÐ
	`VME_AM_IS_EXT
(
as
) ) {

1273 
mode
 |ð
UNIV_VRAI_CTL_VAS_A32
;

1279 
	`WRITE_LE
Ð(
vme_ba£
 & ~(
UNIV_CRG_SIZE
-1)), 
ba£
, 
UNIV_REGOFF_VRAI_BS
 );

1280 
	`WRITE_LE
Ð
mode
, 
ba£
, 
UNIV_REGOFF_VRAI_CTL
 );

1283 
	}
}

1286 
	$vmeUniv£M­CRG
(
vme_ba£
, 
as
 )

1288  
	`vmeUniv£M­CRGXX
Ð
vmeUniv£0Ba£Addr
, 
vme_ba£
, 
as
 );

1289 
	}
}

1291 #ifdeà
__¹ems__


1293 
	~"b¥VmeDmaLi¡P.h
"

1294 
	~<b¥/vmeUniv£DMA.h
>

1297 
	#DCTL_MODE_MASK
 \

1298 Ð
UNIV_DCTL_VDW_MSK
 | 
UNIV_DCTL_VAS_MSK
 | 
UNIV_DCTL_PGM
 | 
UNIV_DCTL_SUPER
 | 
UNIV_DCTL_VCT
 )

	)

1300 
ut32_t


1301 
	$xãr_mode2dùl
(
ut32_t
 
xãr_mode
)

1303 
ut32_t
 
dùl
;

1313 iàÐ
xãr_mode
 & 
BSP_VMEDMA_MODE_NOINC_PCI
 )

1314  
BSP_VMEDMA_STATUS_UNSUP
;

1317 
xãr_mode
 &ð~
VME_AM_IS_MEMORY
;

1319 iàÐ
	`VME_AM_IS_2eSST
(
xãr_mode
) )

1320  
BSP_VMEDMA_STATUS_UNSUP
;

1322 iàÐ! 
	`VME_AM_IS_SHORT
(
xãr_mode
è&& ! 
	`VME_AM_IS_STD
(xãr_modeè&& ! 
	`VME_AM_IS_EXT
(xfer_mode) )

1323  
BSP_VMEDMA_STATUS_UNSUP
;

1326 iàÐ
	`am2mode
Ð1, 
xãr_mode
, &
dùl
 ) )

1327  
BSP_VMEDMA_STATUS_UNSUP
;

1336  
UNIV_DCTL_VAS_MSK
 & 
dùl
 ) {

1337 
UNIV_DCTL_VAS_A24
:

1338 
UNIV_DCTL_VAS_A32
:

1343 iàÐ(
xãr_mode
 & 0xb) != 8

1344 && ( 
UNIV_DCTL_VDW_64
 =ð(
dùl
 & 
UNIV_DCTL_VDW_MSK
) ) ) {

1345 
dùl
 &ð~
UNIV_DCTL_VDW_MSK
;

1346 
dùl
 |ð
UNIV_DCTL_VDW_32
;

1350 
UNIV_DCTL_VAS_A16
:

1354  
BSP_VMEDMA_STATUS_UNSUP
;

1358 
dùl
 &ð
DCTL_MODE_MASK
;

1360 iàÐ
xãr_mode
 & 
BSP_VMEDMA_MODE_NOINC_VME
 ) {

1364 
dùl
 &ð~
UNIV_DCTL_VCT
;

1365 
dùl
 |ð
UNIV_DCTL_NO_VINC
;

1367 iàÐ
UNIV_DCTL_VDW_64
 =ð(
dùl
 & 
UNIV_DCTL_VDW_MSK
) ) {

1368 
dùl
 &ð~
UNIV_DCTL_VDW_MSK
;

1369 
dùl
 |ð
UNIV_DCTL_VDW_32
;

1375 iàÐ
BSP_VMEDMA_MODE_PCI2VME
 & 
xãr_mode
 )

1376 
dùl
 |ð
UNIV_DCTL_L2V
;

1378  
dùl
;

1379 
	}
}

1385 
	$vmeUniv£DmaSupXX
(vÞ©
LERegi¡
 *
ba£
, 
chªÃl
, 
ut32_t
 
mode
, ut32_
xãr_mode
, *
cu¡om
)

1387 
ut32_t
 
dùl
, 
dgcs
;

1389 iàÐ
chªÃl
 != 0 )

1390  
BSP_VMEDMA_STATUS_UNSUP
;

1392 
dùl
 = 
	`xãr_mode2dùl
(
xãr_mode
);

1394 iàÐ(
ut32_t
)
BSP_VMEDMA_STATUS_UNSUP
 =ð
dùl
 )

1395  
BSP_VMEDMA_STATUS_UNSUP
;

1398 
dgcs
 = 
UNIV_DGCS_INT_MSK
;

1400  
mode
 ) {

1401 
BSP_VMEDMA_OPT_THROUGHPUT
:

1402 
dgcs
 |ð
UNIV_DGCS_VON_1024
 | 
UNIV_DGCS_VOFF_0_US
;

1404 
dgcs
 |ðÐ
xãr_mode
 & 
BSP_VMEDMA_MODE_NOINC_VME
 ) ?

1405 
UNIV_DGCS_VON_2048
 : 
UNIV_DGCS_VON_1024
;

1408 
BSP_VMEDMA_OPT_LOWLATENCY
:

1409 
dgcs
 |ð
UNIV_DGCS_VOFF_0_US
;

1411 
dgcs
 |ðÐ
xãr_mode
 & 
BSP_VMEDMA_MODE_NOINC_VME
 ) ?

1412 
UNIV_DGCS_VON_512
 : 
UNIV_DGCS_VON_256
;

1415 
BSP_VMEDMA_OPT_SHAREDBUS
:

1416 
dgcs
 |ð
UNIV_DGCS_VOFF_512_US
;

1418 
dgcs
 |ðÐ
xãr_mode
 & 
BSP_VMEDMA_MODE_NOINC_VME
 ) ?

1419 
UNIV_DGCS_VON_512
 : 
UNIV_DGCS_VON_256
;

1422 
BSP_VMEDMA_OPT_CUSTOM
:

1423 
dùl
 = ((
ut32_t
*)
cu¡om
)[0];

1424 
dgcs
 = ((
ut32_t
*)
cu¡om
)[1];

1428 
BSP_VMEDMA_OPT_DEFAULT
:

1433 
dgcs
 |ð
UNIV_DGCS_STATUS_CLEAR
;

1435 
	`vmeUniv£WreRegXX
(
ba£
, 
dùl
, 
UNIV_REGOFF_DCTL
);

1436 
	`vmeUniv£WreRegXX
(
ba£
, 
dgcs
, 
UNIV_REGOFF_DGCS
);

1438  
BSP_VMEDMA_STATUS_OK
;

1439 
	}
}

1442 
	$vmeUniv£DmaSup
(
chªÃl
, 
ut32_t
 
mode
, ut32_
xãr_mode
, *
cu¡om
)

1444 
DFLT_BASE
;

1445  
	`vmeUniv£DmaSupXX
(
ba£
, 
chªÃl
, 
mode
, 
xãr_mode
, 
cu¡om
);

1446 
	}
}

1449 
	$vmeUniv£DmaS¹XX
(vÞ©
LERegi¡
 *
ba£
, 
chªÃl
, 
ut32_t
 
pci_addr
, ut32_
vme_addr
, ut32_
n_bys
)

1451 iàÐ
chªÃl
 != 0 )

1452  
BSP_VMEDMA_STATUS_UNSUP
;

1454 ià((
pci_addr
 & 7è!ð(
vme_addr
 & 7)) {

1455 
	`u´tf
(
¡dr
,"vmeUniverseDmaStartXX: misalignedddresses\n");

1461 vÞ©
LERegi¡
 *
b
=
ba£
;

1462 
dgcsoff
=
UNIV_REGOFF_DGCS
,
dgcs
;

1464 
dgcs
=
	`READ_LE
(
b
, 
dgcsoff
);

1467 
dgcs
 &ð~
UNIV_DGCS_CHAIN
;

1468 
	`WRITE_LE
(
dgcs
,

1469 
b
, 
dgcsoff
);

1470 
	`WRITE_LE
(
pci_addr
,

1471 
b
, 
UNIV_REGOFF_DLA
);

1472 
	`WRITE_LE
(
vme_addr
,

1473 
b
, 
UNIV_REGOFF_DVA
);

1474 
	`WRITE_LE
(
n_bys
,

1475 
b
, 
UNIV_REGOFF_DTBC
);

1476 
dgcs
 |ð
UNIV_DGCS_GO
;

1477 
EIEIO_REG
;

1478 
	`WRITE_LE
(
dgcs
,

1479 
b
, 
dgcsoff
);

1481 
SYNC
;

1483 
	}
}

1487 
	$vmeUniv£S¹DMAXX
(

1488 vÞ©
LERegi¡
 *
ba£
,

1489 
loÿl_addr
,

1490 
vme_addr
,

1491 
couÁ
)

1493  
	`vmeUniv£DmaS¹XX
(
ba£
, 0, 
loÿl_addr
, 
vme_addr
, 
couÁ
);

1494 
	}
}

1497 
	$vmeUniv£DmaS¹
(
chªÃl
, 
ut32_t
 
pci_addr
, ut32_
vme_addr
, ut32_
n_bys
)

1499 
DFLT_BASE
;

1500  
	`vmeUniv£DmaS¹XX
(
ba£
, 
chªÃl
, 
pci_addr
, 
vme_addr
, 
n_bys
);

1501 
	}
}

1505 
	$vmeUniv£S¹DMA
(

1506 
loÿl_addr
,

1507 
vme_addr
,

1508 
couÁ
)

1510 
DFLT_BASE
;

1511  
	`vmeUniv£DmaS¹XX
(
ba£
, 0, 
loÿl_addr
, 
vme_addr
, 
couÁ
);

1512 
	}
}

1514 
ut32_t


1515 
	$vmeUniv£DmaStusXX
(vÞ©
LERegi¡
 *
ba£
, 
chªÃl
)

1517 
ut32_t
 
dgcs
;

1518 iàÐ
chªÃl
 != 0 )

1519  
BSP_VMEDMA_STATUS_UNSUP
;

1521 
dgcs
 = 
	`vmeUniv£RdRegXX
(
ba£
, 
UNIV_REGOFF_DGCS
);

1523 
dgcs
 &ð
UNIV_DGCS_STATUS_CLEAR
;

1525 iàÐ0 =ð
dgcs
 || 
UNIV_DGCS_DONE
 == dgcs )

1526  
BSP_VMEDMA_STATUS_OK
;

1528 iàÐ
UNIV_DGCS_ACT
 & 
dgcs
 )

1529  
BSP_VMEDMA_STATUS_BUSY
;

1531 iàÐ
UNIV_DGCS_LERR
 & 
dgcs
 )

1532  
BSP_VMEDMA_STATUS_BERR_PCI
;

1534 iàÐ
UNIV_DGCS_VERR
 & 
dgcs
 )

1535  
BSP_VMEDMA_STATUS_BERR_VME
;

1537  
BSP_VMEDMA_STATUS_OERR
;

1538 
	}
}

1540 
ut32_t


1541 
	$vmeUniv£DmaStus
(
chªÃl
)

1543 
DFLT_BASE
;

1544  
	`vmeUniv£DmaStusXX
(
ba£
, 
chªÃl
);

1545 
	}
}

1553 vÞ©
	tut32_t
 
	tLERegi¡1
;

1555 
	sVmeUniv£DmaLi¡DescRec_
 {

1556 
LERegi¡1
 
	mdùl
;

1557 
LERegi¡1
 
	mdtbc
;

1558 
LERegi¡1
 
	mdÏ
;

1559 
LERegi¡1
 
	mdummy1
;

1560 
LERegi¡1
 
	mdva
;

1561 
LERegi¡1
 
	mdummy2
;

1562 
LERegi¡1
 
	mdýp
;

1563 
LERegi¡1
 
	mdummy3
;

1564 } 
	t__©ibu__
((
	t®igÃd
(32), 
	t__may_®s__
))

1565 
	tVmeUniv£DmaLi¡DescRec
;

1567 
VmeUniv£DmaLi¡DescRec
 *
	tVmeUniv£DmaLi¡Desc
;

1569 
uni_desc_
 (
DmaDesütÜ
);

1570 
uni_desc_£tup
 (
DmaDesütÜ
, 
ut32_t
, uint32_t, uint32_t, uint32_t, uint32_t);

1571 
uni_desc_£xt
(
DmaDesütÜ
, DmaDescriptor);

1572 
uni_desc_dump
 (
DmaDesütÜ
);

1573 
uni_desc_¡¬t
 (vÞ©*
cÚÞËr_addr
, 
chªÃl
, 
DmaDesütÜ
 
p
);

1575 
VMEDmaLi¡CÏssRec
 
	gvmeUniv£DmaLi¡CÏss
 = {

1576 
desc_size
: (
VmeUniv£DMAPackRec
),

1577 
desc_®ign
: 32,

1578 
äLi¡
: 0,

1579 
desc_®loc
: 0,

1580 
desc_ä
: 0,

1581 
desc_
: 
uni_desc_
,

1582 
desc_£xt
:
uni_desc_£xt
,

1583 
desc_£tup
: 
uni_desc_£tup
,

1584 
desc_¡¬t
: 
uni_desc_¡¬t
,

1585 
desc_»ä
: 0,

1586 
desc_dump
: 
uni_desc_dump
,

1589 
	$uni_desc_
 (
DmaDesütÜ
 
p
)

1591 
VmeUniv£DmaLi¡Desc
 
d
 = 
p
;

1592 
	`¡_Ë32
Ð&
d
->
dýp
, 
UNIV_DCPP_IMG_NULL
 );

1593 
	}
}

1595 
	$uni_desc_£xt
(
DmaDesütÜ
 
p
, DmaDesütÜ 
n
)

1597 
VmeUniv£DmaLi¡Desc
 
d
 = 
p
;

1598 iàÐ0 =ð
n
 ) {

1599 
	`¡_Ë32
Ð&
d
->
dýp
, 
UNIV_DCPP_IMG_NULL
 );

1601 
	`¡_Ë32
Ð&
d
->
dýp
, 
	`BSP_LOCAL2PCI_ADDR
Ð(
ut32_t
)
n
));

1603 
	}
}

1606 
	$uni_desc_£tup
 (

1607 
DmaDesütÜ
 
p
,

1608 
ut32_t
 
©_mask
,

1609 
ut32_t
 
xãr_mode
,

1610 
ut32_t
 
pci_addr
,

1611 
ut32_t
 
vme_addr
,

1612 
ut32_t
 
n_bys
)

1614 
VmeUniv£DmaLi¡Desc
 
d
 = 
p
;

1615 
LERegi¡1
 
dùl
;

1617 iàÐ
BSP_VMEDMA_MSK_ATTR
 & 
©_mask
 ) {

1618 
dùl
 = 
	`xãr_mode2dùl
(
xãr_mode
);

1620 iàÐ(
ut32_t
)
BSP_VMEDMA_STATUS_UNSUP
 =ð
dùl
 )

1623 
	`¡_Ë32
Ð&
d
->
dùl
, dctl );

1630 iàÐ
BSP_VMEDMA_MSK_PCIA
 & 
©_mask
 ) {

1631 iàÐ
pci_addr
 & 0x7 )

1634 
	`¡_Ë32
Ð&
d
->
dÏ
, 
pci_addr
 );

1637 iàÐ
BSP_VMEDMA_MSK_VMEA
 & 
©_mask
 ) {

1638 iàÐ
vme_addr
 & 0x7 )

1641 
	`¡_Ë32
Ð&
d
->
dva
, 
vme_addr
 );

1644 iàÐ
BSP_VMEDMA_MSK_BCNT
 & 
©_mask
 ) {

1645 
	`¡_Ë32
Ð&
d
->
dtbc
, 
n_bys
 );

1649 
	}
}

1651 
	guni_desc_¡¬t


1652 (vÞ©*
	gcÚÞËr_addr
, 
	gchªÃl
, 
DmaDesütÜ
 
	gp
)

1654 vÞ©
LERegi¡
 *
	gba£
 = 
cÚÞËr_addr
;

1655 
ut32_t
 
	gdgcs
;

1657 iàÐ!
	gba£
 )

1658 
	gba£
 = 
vmeUniv£0Ba£Addr
;

1660 
	gdgcs
 = 
vmeUniv£RdRegXX
Ð
ba£
, 
UNIV_REGOFF_DGCS
 );

1662 iàÐ
	gUNIV_DGCS_ACT
 & 
	gdgcs
 )

1663  
	gBSP_VMEDMA_STATUS_BUSY
;

1665 iàÐ!
	gp
 ) {

1669 
	gdgcs
 &ð~
UNIV_DGCS_CHAIN
;

1670 
vmeUniv£WreRegXX
Ð
ba£
, 
UNIV_REGOFF_DGCS
, 
dgcs
);

1675 
	gdgcs
 |ð
UNIV_DGCS_CHAIN
;

1677 
vmeUniv£WreRegXX
Ð
ba£
, 
UNIV_REGOFF_DGCS
, 
dgcs
);

1680 
vmeUniv£WreRegXX
Ð
ba£
, 0x0, 
UNIV_REGOFF_DTBC
);

1683 
vmeUniv£WreRegXX
Ð
ba£
, 
BSP_LOCAL2PCI_ADDR
((
ut32_t
)
p
), 
UNIV_REGOFF_DCPP
);

1686 
	gdgcs
 |ð
UNIV_DGCS_GO
;

1687 
vmeUniv£WreReg
(
dgcs
, 
UNIV_REGOFF_DGCS
);

1693 
	$uni_desc_dump
(
DmaDesütÜ
 
p
)

1695 
VmeUniv£DmaLi¡Desc
 
d
 = 
p
;

1696 
LERegi¡1
 
dýp
 = 
	`ld_Ë32
(&
d
->dcpp);

1698 
	`´tf
(" DLA: 0x%08x\n", 
	`ld_Ë32
(&
d
->
dÏ
));

1699 
	`´tf
(" DVA: 0x%08x\n", 
	`ld_Ë32
(&
d
->
dva
));

1700 
	`´tf
(" DCPP: 0x%08"
PRIx32
"%s\n", 
dýp
, (dý°& 
UNIV_DCPP_IMG_NULL
) ? " (LAST)" : "");

1701 
	`´tf
(" CTL: 0x%08x\n", 
	`ld_Ë32
(&
d
->
dùl
));

1702 
	`´tf
(" TBC: 0x%08x\n", 
	`ld_Ë32
(&
d
->
dtbc
));

1703 
	}
}

1707 
	~<b¥/q.h
>

1710 
	sUniv£IRQEÁryRec_
 {

1711 
VmeUniv£ISR
 
	mi¤
;

1712 *
	mu¤D©a
;

1713 } 
	tUniv£IRQEÁryRec
, *
	tUniv£IRQEÁry
;

1715 
Univ£IRQEÁry
 
	guniv£HdlTbl
[
UNIV_NUM_INT_VECS
]={0};

1717 
	gvmeUniv£IrqMgrIn¡®Ëd
 = 0;

1719 vÞ©
LERegi¡
 *
	gvmeUniv£RegBa£
 = 0;

1723 
	#UNIV_NUM_WIRES
 4

	)

1725 vÞ©
	gwe_mask
[
UNIV_NUM_WIRES
] = {0};

1727 
	guniv£_we
[
UNIV_NUM_WIRES
] = {0};

1730 
	$lvl2b
(
Ëv
)

1732 
shiá
 = -1;

1733 iàÐ
Ëv
 >ð
UNIV_DMA_INT_VEC
 &&ev <ð
UNIV_LM3_INT_VEC
 ) {

1734 
shiá
 = 8 + (
Ëv
-
UNIV_DMA_INT_VEC
);

1735 } iàÐ
UNIV_VOWN_INT_VEC
 =ð
Ëv
 ) {

1736 
shiá
 = 0;

1737 } iàÐ1 <ð
Ëv
 &&evel <=7 ) {

1738 
shiá
 = 
Ëv
;

1742  
shiá
;

1743 
	}
}

1746 
	$vmeUniv£IÁRou
(
Ëv
, 
p
)

1748 
i
, 
shiá
;

1749 
mask
, 
m­»g
, 
æags
, 
we
;

1751 iàÐ
p
 >ð
UNIV_NUM_WIRES
 || ! 
univ£_we
[p] || !
vmeUniv£IrqMgrIn¡®Ëd
 )

1754 iàÐ(
shiá
 = 
	`lvl2b
(
Ëv
)) < 0 ) {

1758 
mask
 = 1<<
shiá
;

1761 iàÐ
shiá
 < 8 ) {

1762 
m­»g
 = 
UNIV_REGOFF_LINT_MAP0
;

1763 } iàÐ
shiá
 < 16 ) {

1764 
shiá
 -= 8;

1765 
m­»g
 = 
UNIV_REGOFF_LINT_MAP1
;

1766 } iàÐ
shiá
 < 24 ) {

1767 
shiá
 -= 16;

1768 
m­»g
 = 
UNIV_REGOFF_LINT_MAP2
;

1773 
shiá
 <<=2;

1776 
we
 = (
univ£_we
[
p
]-1è<< 
shiá
;

1778 
	`¹ems_¼u±_di§bË
(
æags
);

1780  
i
 = 0; i<
UNIV_NUM_WIRES
; i++ ) {

1781 
we_mask
[
i
] &ð~
mask
;

1783 
we_mask
[
p
] |ð
mask
;

1785 
mask
 = 
	`vmeUniv£RdReg
(
m­»g
è& ~ (0xf<<
shiá
);

1786 
mask
 |ð
we
;

1787 
	`vmeUniv£WreReg
Ð
mask
, 
m­»g
 );

1789 
	`¹ems_¼u±_abË
(
æags
);

1791 
	}
}

1793 
VmeUniv£ISR


1794 
	$vmeUniv£ISRG
(
veùÜ
, **
·rg
)

1796 
æags
;

1797 
VmeUniv£ISR
 
rv®
 = 0;

1798 vÞ©
Univ£IRQEÁry
 *
³
 = 
univ£HdlTbl
 + 
veùÜ
;

1800 iàÐ
veùÜ
>=
UNIV_NUM_INT_VECS
 || ! *
³
 )

1803 
	`¹ems_¼u±_di§bË
(
æags
);

1804 iàÐ*
³
 ) {

1805 ià(
·rg
)

1806 *
·rg
=(*
³
)->
u¤D©a
;

1807 
rv®
 = (*
³
)->
i¤
;

1809 
	`¹ems_¼u±_abË
(
æags
);

1810  
rv®
;

1811 
	}
}

1813 
	#SPECIAL_IRQ_MSK
 ( ~((
UNIV_LINT_STAT_VIRQ7
<<1)-
UNIV_LINT_STAT_VIRQ1
è)

	)

1816 
	$univ£S³clISR
(
¡©us
)

1818 
Univ£IRQEÁry
 

;

1819 
vec
;

1820 
s
;

1825 
	`vmeUniv£WreReg
Ð(
¡©us
 & 
SPECIAL_IRQ_MSK
), 
UNIV_REGOFF_LINT_STAT
 );

1828 
vec
=
UNIV_VOWN_INT_VEC
;

1829 iàÐ(
¡©us
 & 
UNIV_LINT_STAT_VOWN
è&& (

=
univ£HdlTbl
[
vec
]))

1830 

->
	`i¤
(->
u¤D©a
,
vec
);

1838  
s
 = 
¡©us
>>8; s; s >>= 1) {

1839 
vec
++;

1840 iàÐ(
s
&1è&& (

=
univ£HdlTbl
[
vec
]) )

1841 

->
	`i¤
(->
u¤D©a
,
vec
);

1851 
	}
}

1886 
	$univ£VMEISR
(
¹ems_q_hdl_·¿m
 
¬g
)

1888 
p
 = ()
¬g
;

1889 
Univ£IRQEÁry
 

;

1890 
msk
,
lt¡©
,
¡©us
;

1891 
lvl
;

1892 #ià
	`defed
(
BSP_PIC_DO_EOI
)

1893 
ln
;

1897 
lt¡©
 = 
	`vmeUniv£RdReg
(
UNIV_REGOFF_LINT_STAT
);

1900 
lt¡©
 &ð
we_mask
[
p
];

1902 #ifdeà
__PPC__


1903 
asm
 vÞ©e("úzw %0, %1":"ô"(
lvl
):"r"(
lt¡©
 & ~
SPECIAL_IRQ_MSK
));

1904 
lvl
 = 31-lvl;

1905 
msk
 = 1<<
lvl
;

1907 
msk
=
UNIV_LINT_STAT_VIRQ7
, 
lvl
=7;

1908 
lvl
>0;

1909 
lvl
--, 
msk
>>=1) {

1910 ià(
lt¡©
 & 
msk
) ;

1914 #iâdeà
BSP_PIC_DO_EOI


1916 iàÐ(
¡©us
 = (
lt¡©
 & 
SPECIAL_IRQ_MSK
)) )

1917 
	`univ£S³clISR
Ð
¡©us
 );

1919 iàÐ
lvl
 <= 0)

1923 iàÐ
lvl
 <= 0 ) {

1925 
	`univ£S³clISR
Ð
lt¡©
 & 
SPECIAL_IRQ_MSK
 );

1930 iàÐ0 =ð
p
 )

1931 
BSP_PIC_DO_EOI
;

1935 
ln
 = 
	`vmeUniv£RdReg
(
UNIV_REGOFF_LINT_EN
);

1938 
	`vmeUniv£WreReg
(

1939 
ln
 & ~Ð((
msk
<<1)-
UNIV_LINT_STAT_VIRQ1
è& 
we_mask
[
p
]),

1940 
UNIV_REGOFF_LINT_EN


1947 iàÐ0 =ð
p
 )

1948 
BSP_PIC_DO_EOI
;

1952 
¡©us
 = 
	`vmeUniv£RdReg
(
UNIV_REGOFF_VIRQ1_STATID
 - 4 + (
lvl
<<2));

1955 ià(
¡©us
 & 
UNIV_VIRQ_ERR
) {

1957 #ifdeà
BSP_PIC_DO_EOI


1958 
ln
 &ð~
msk
;

1960 
	`vmeUniv£IÁDi§bË
(
lvl
);

1962 
	`´tk
("vmeUniv£ ISR:¼Üd from STATIDegi¡; (Ëv: %ièSTATID: 0x%08x -- DISABLING\n", 
lvl
, 
¡©us
);

1963 } ià(!(

=
univ£HdlTbl
[
¡©us
 & 
UNIV_VIRQ_STATID_MASK
])) {

1964 #ifdeà
BSP_PIC_DO_EOI


1965 
ln
 &ð~
msk
;

1967 
	`vmeUniv£IÁDi§bË
(
lvl
);

1970 
	`´tk
("vmeUniv£ ISR:ØhªdË¸¡®Ëd fÜhi veùÜ; (Ëv: %ièSTATID: 0x%08x -- DISABLING\n", 
lvl
, 
¡©us
);

1973 

->
	`i¤
(->
u¤D©a
, 
¡©us
&
UNIV_VIRQ_STATID_MASK
);

1976 #ifdeà
__PPC__


1978 
asm
 volatile("eieio");

1980 
	`READ_LE0
(
vmeUniv£RegBa£
);

1981 #ifdeà
__PPC__


1983 
asm
 volatile("eieio");

1988 
	`vmeUniv£WreReg
(
msk
, 
UNIV_REGOFF_LINT_STAT
);

1998 #ifdeà
BSP_PIC_DO_EOI


2001 
	`vmeUniv£WreReg
(
ln
, 
UNIV_REGOFF_LINT_EN
);

2003 
	}
}

2008 
	$my_no_Ý
(cÚ¡ 
¹ems_q_cÚÃù_d©a
 * 
¬g
)

2009 {
	}
}

2012 
	$my_isOn
(cÚ¡ 
¹ems_q_cÚÃù_d©a
 *
¬g
)

2014  ()
	`vmeUniv£RdReg
(
UNIV_REGOFF_LINT_EN
);

2015 
	}
}

2018 
	muni_p
, 
	mpic_p
;

2019 } 
	tIÁRou
;

2022 
	$cÚÃùI¤
(
sh¬ed
, 
¹ems_q_hdl
 
i¤
, 
pic_le
, 
pic_p
)

2024 
¹ems_q_cÚÃù_d©a
 
¯¼ggh
;

2025 
¯¼ggh
.
Ú
 = 
my_no_Ý
;

2026 
¯¼ggh
.
off
 = 
my_no_Ý
;

2027 
¯¼ggh
.
isOn
 = 
my_isOn
;

2028 
¯¼ggh
.
hdl
 = 
i¤
;

2029 
¯¼ggh
.
hªdË
 = (
¹ems_q_hdl_·¿m
)
pic_p
;

2030 
¯¼ggh
.
Çme
 = 
pic_le
;

2032 iàÐ
sh¬ed
 ) {

2033 #ià
BSP_SHARED_HANDLER_SUPPORT
 > 0

2034 ià(!
	`BSP_¡®l_¹ems_sh¬ed_q_hªdËr
(&
¯¼ggh
))

2035 
	`BSP_·nic
("unableo install vmeUniverse shared irq handler");

2037 
	`u´tf
(
¡dr
,"vmeUniverse: WARNING: your BSP doesn't support sharing interrupts\n");

2038 ià(!
	`BSP_¡®l_¹ems_q_hªdËr
(&
¯¼ggh
))

2039 
	`BSP_·nic
("unableo install vmeUniverse irq handler");

2042 ià(!
	`BSP_¡®l_¹ems_q_hªdËr
(&
¯¼ggh
))

2043 
	`BSP_·nic
("unableo install vmeUniverse irq handler");

2045 
	}
}

2047 #iâdeà
BSP_EARLY_PROBE_VME


2048 
	#BSP_EARLY_PROBE_VME
(
addr
) \

2050 ((
PCI_DEVICE_UNIVERSEII
 << 16è| 
PCI_VENDOR_TUNDRA
 ) =ð
	`READ_LE
Ð((vÞ©
LERegi¡
*)(
addr
)), 0 ) \

2051 )

	)

2060 
	$m­³dAndProbed
(
vme_addr
, 
as
, *
pýu_addr
)

2062 
j
;

2063 *
»gty³
 = (
as
 & 
VME_AM_MASK
è=ð
VME_AM_CSR
 ? "CSR" : "CRG";

2066 iàÐ0 > (
j
 = 
	`xÏFdPÜt
(

2067 
vmeUniv£0Ba£Addr
,

2069 
as
 | 
VME_MODE_AS_MATCH
,

2070 
vme_addr
,

2071 
pýu_addr
 ) ) ) {

2072 
	`u´tf
(
¡dr
,"vmeUniv£ - UÇbËØfd m­pg fÜ % VME ba£ (0x%08x)\n", 
»gty³
, 
vme_addr
);

2073 
	`u´tf
(
¡dr
," in outbound windows.\n");

2076 *
pýu_addr
 = 
	`BSP_PCI2LOCAL_ADDR
( *pcpu_addr );

2077 iàÐ
	`BSP_EARLY_PROBE_VME
(*
pýu_addr
) ) {

2078 
	`u´tf
(
¡dr
,"vmeUniv£ - IRQ mªag usg VME % tØæush FIFO\n", 
»gty³
);

2079  
j
;

2081 
	`u´tf
(
¡dr
,"vmeUniv£ - Found slÙ infØbudeùiÚ oàuniv£ iÀVME % ¥aû faed\n", 
»gty³
);

2085 
	}
}

2089 
	$vmeUniv£In¡®lIrqMgrAÉ
(
æags
, 
uni_p0
, 
pic_p0
, ...)

2091 
rv®
;

2092 
va_li¡
 
­
;

2093 
	`va_¡¬t
(
­
, 
pic_p0
);

2094 
rv®
 = 
	`vmeUniv£In¡®lIrqMgrVa
(
æags
, 
uni_p0
, 
pic_p0
, 
­
);

2095 
	`va_d
(
­
);

2096  
rv®
;

2097 
	}
}

2100 
	$vmeUniv£In¡®lIrqMgrVa
(
æags
, 
uni_p0
, 
pic_p0
, 
va_li¡
 
­
)

2102 
i
,
j
, 
¥eclP
, 
uni_p
[
UNIV_NUM_WIRES
+1], 
pic_p
[UNIV_NUM_WIRES];

2103 
ýu_ba£
, 
vme_»g_ba£
;

2105 ià(
vmeUniv£IrqMgrIn¡®Ëd
)  -4;

2109 iàÐ
uni_p0
 < 0 || uni_pin0 > 7 )  -1;

2111 
uni_p
[0] = 
uni_p0
;

2112 
pic_p
[0] = 
pic_p0
 < 0 ? 
vmeUniv£0PciIrqLe
 :ic_pin0;

2113 
i
 = 1;

2114  (
uni_p
[
i
] = 
	`va_¬g
(
­
, )) >= 0 ) {

2116 iàÐ
i
 >ð
UNIV_NUM_WIRES
 ) {

2120 
pic_p
[
i
] = 
	`va_¬g
(
­
,);

2122 iàÐ
uni_p
[
i
] > 7 ) {

2125 iàÐ
pic_p
[
i
] < 0 ) {

2128 
i
++;

2132  
i
=0; 
uni_p
[i] >= 0; i++ ) {

2133  
j
=
i
+1; 
uni_p
[j] >= 0; j++ ) {

2134 iàÐ
uni_p
[
j
] =ðuni_p[
i
] )  -6;

2135 iàÐ
pic_p
[
j
] =ðpic_p[
i
] )  -7;

2139 iàÐ
æags
 & 
VMEUNIVERSE_IRQ_MGR_FLAG_PW_WORKAROUND
 ) {

2142 
	`u´tf
(
¡dr
,"vmeUniverse IRQ manager:ooking foregisters on VME...\n");

2148 iàÐÐ
i
 = ((
	`READ_LE
Ð
vmeUniv£0Ba£Addr
, 
UNIV_REGOFF_VCSR_BS
 ) >> 27) & 0x1f ) ) > 0 ) {

2149 
	`u´tf
(
¡dr
,"Tryingo find CSR on VME...\n");

2150 
vme_»g_ba£
 = 
i
*0x80000 + 
UNIV_CSR_OFFSET
;

2151 
i
 = 
	`m­³dAndProbed
Ð
vme_»g_ba£
, 
VME_AM_CSR
 , &
ýu_ba£
);

2152 iàÐ
i
 >= 0 )

2153 
vmeUniv£RegCSR
 = 1;

2155 
i
 = -1;

2158 iàÐ-1 =ð
i
 ) {

2160 
	`u´tf
(
¡dr
,"Tryingo find CRG on VME...\n");

2164 iàÐ
UNIV_VRAI_CTL_EN
 & (
j
 = 
	`READ_LE
Ð
vmeUniv£0Ba£Addr
, 
UNIV_REGOFF_VRAI_CTL
 )) ) {

2165  
j
 & 
UNIV_VRAI_CTL_VAS_MSK
 ) {

2166 
UNIV_VRAI_CTL_VAS_A16
 : 
i
 = 
VME_AM_SUP_SHORT_IO
; ;

2167 
UNIV_VRAI_CTL_VAS_A24
 : 
i
 = 
VME_AM_STD_SUP_DATA
; ;

2168 
UNIV_VRAI_CTL_VAS_A32
 : 
i
 = 
VME_AM_EXT_SUP_DATA
; ;

2172 
vme_»g_ba£
 = 
	`READ_LE
Ð
vmeUniv£0Ba£Addr
, 
UNIV_REGOFF_VRAI_BS
 ) & ~(
UNIV_CRG_SIZE
 - 1);

2175 iàÐ-1 =ð
i
 ) {

2177 
i
 = 
	`m­³dAndProbed
Ð
vme_»g_ba£
, (& 
VME_AM_MASK
), &
ýu_ba£
 );

2181 iàÐ
i
 < 0 ) {

2182 iàÐ
	`m­OvAÎ
Ð
vmeUniv£0Ba£Addr
, 1, 
hasPWENWdow
, 0 ) ) {

2183 
	`u´tf
(
¡dr
,"vmeUniverse IRQ manager - BSP configurationrror:egistersot found on VME\n");

2184 
	`u´tf
(
¡dr
,"(should open outbound windowo CSR space or map CRG [vmeUniverseMapCRG()])\n");

2185 
	`u´tf
(
¡dr
,"Falling backo PCI but you mightxperience spurious VME interrupts;eadegister\n");

2186 
	`u´tf
(
¡dr
,"back from user ISRo flush universe FIFOs work-around or\n");

2187 
	`u´tf
(
¡dr
,"make sure ISRccesses device using window withosted-writes disabled\n");

2189 
	`u´tf
(
¡dr
,"vmeUniverse IRQ manager -egistersot found on VME; falling backo PCI\n");

2191 
vmeUniv£RegBa£
 = 
vmeUniv£0Ba£Addr
;

2192 
vmeUniv£RegPÜt
 = -1;

2194 
vmeUniv£RegBa£
 = (vÞ©
LERegi¡
*)
ýu_ba£
;

2195 
vmeUniv£RegPÜt
 = 
i
;

2198 
vmeUniv£RegBa£
 = 
vmeUniv£0Ba£Addr
;

2199 
vmeUniv£RegPÜt
 = -1;

2203 iàÐ
pic_p
[0] >ð0 && 
vmeUniv£0PciIrqLe
 !=ic_pin[0] ) {

2204 
	`u´tf
(
¡dr
,"Overriding main IRQine PCI info with %d\n",

2205 
pic_p
[0]);

2206 
vmeUniv£0PciIrqLe
=
pic_p
[0];

2209  
i
 = 0; 
uni_p
[i] >= 0; i++ ) {

2211 
univ£_we
[
i
] = 
uni_p
[i] + 1;

2212 
	`cÚÃùI¤
((
æags
 & 
VMEUNIVERSE_IRQ_MGR_FLAG_SHARED
), 
univ£VMEISR
, 
pic_p
[
i
], i);

2215 
¥eclP
 = 
uni_p
[1] >= 0 ? 1 : 0;

2220 
vmeUniv£IrqMgrIn¡®Ëd
=1;

2223  
i
=1; i<8; i++ )

2224 
	`vmeUniv£IÁRou
Ð
i
, 0 );

2225  
i
=
UNIV_VOWN_INT_VEC
; i<=
UNIV_LM3_INT_VEC
; i++ ) {

2226 iàÐ
	`vmeUniv£IÁRou
Ð
i
, 
¥eclP
 ) )

2227 
	`´tk
("RoutgvÈ%-> w# %çed\n", 
i
, 
¥eclP
);

2231 
	}
}

2234 
	$vmeUniv£In¡®lIrqMgr
(
vmeIrqUnivOut
,

2235 
vmeIrqPicLe
,

2236 
¥eclIrqUnivOut
,

2237 
¥eclIrqPicLe
)

2239  
	`vmeUniv£In¡®lIrqMgrAÉ
(

2241 
vmeIrqUnivOut
, 
vmeIrqPicLe
,

2242 
¥eclIrqUnivOut
, 
¥eclIrqPicLe
,

2244 
	}
}

2247 
	$vmeUniv£In¡®lISR
(
veùÜ
, 
VmeUniv£ISR
 
hdl
, *
¬g
)

2249 
Univ£IRQEÁry
 

;

2250 
æags
;

2251 vÞ©
Univ£IRQEÁry
 *
³
;

2253 ià(
veùÜ
>(
univ£HdlTbl
)/(univ£HdlTbl[0]è|| !
vmeUniv£IrqMgrIn¡®Ëd
)

2256 
³
 = 
univ£HdlTbl
 + 
veùÜ
;

2258 ià(*
³
 || !(

=(
Univ£IRQEÁry
)
	`m®loc
((
Univ£IRQEÁryRec
))))

2261 

->
i¤
=
hdl
;

2262 

->
u¤D©a
=
¬g
;

2264 
	`¹ems_¼u±_di§bË
(
æags
);

2265 iàÐ*
³
 ) {

2267 
	`¹ems_¼u±_abË
(
æags
);

2268 
	`ä
(

);

2271 *
³
 = 

;

2272 
	`¹ems_¼u±_abË
(
æags
);

2274 
	}
}

2277 
	$vmeUniv£RemoveISR
(
veùÜ
, 
VmeUniv£ISR
 
hdl
, *
¬g
)

2279 
Univ£IRQEÁry
 

;

2280 
æags
;

2281 vÞ©
Univ£IRQEÁry
 *
³
;

2283 ià(
veùÜ
>(
univ£HdlTbl
)/(univ£HdlTbl[0]è|| !
vmeUniv£IrqMgrIn¡®Ëd
)

2286 
³
 = 
univ£HdlTbl
 + 
veùÜ
;

2288 
	`¹ems_¼u±_di§bË
(
æags
);

2289 

 = *
³
;

2290 ià(!

 || ip->
i¤
!=
hdl
 || ip->
u¤D©a
!=
¬g
) {

2291 
	`¹ems_¼u±_abË
(
æags
);

2294 *
³
 = 0;

2295 
	`¹ems_¼u±_abË
(
æags
);

2296 
	`ä
(

);

2298 
	}
}

2301 
	$tDoEnDis
(
Ëv
, 
dis
)

2303 
æags
, 
v
;

2304 
shiá
;

2306 iàÐ! 
vmeUniv£IrqMgrIn¡®Ëd
 || (
shiá
 = 
	`lvl2b
(
Ëv
)) < 0 )

2309 
v
 = 1<<
shiá
;

2311 iàÐ!
dis
 )

2312  
	`vmeUniv£RdReg
(
UNIV_REGOFF_LINT_EN
è& 
v
 ? 1 : 0;

2314 
	`¹ems_¼u±_di§bË
(
æags
);

2315 iàÐ
dis
<0 )

2316 
	`vmeUniv£WreReg
Ð
	`vmeUniv£RdReg
(
UNIV_REGOFF_LINT_EN
è& ~
v
, UNIV_REGOFF_LINT_EN );

2318 
	`vmeUniv£WreReg
Ð
	`vmeUniv£RdReg
(
UNIV_REGOFF_LINT_EN
è| 
v
, UNIV_REGOFF_LINT_EN );

2320 
	`¹ems_¼u±_abË
(
æags
);

2322 
	}
}

2325 
	$vmeUniv£IÁEÇbË
(
Ëv
)

2327  
	`tDoEnDis
(
Ëv
, 1);

2328 
	}
}

2331 
	$vmeUniv£IÁDi§bË
(
Ëv
)

2333  
	`tDoEnDis
(
Ëv
, -1);

2334 
	}
}

2337 
	$vmeUniv£IÁIsEÇbËd
(
Ëv
)

2339  
	`tDoEnDis
(
Ëv
, 0);

2340 
	}
}

2345 
¹ems_id
 
	mq
;

2346 
	ml
;

2347 } 
	tLoÝbackT¡Args
;

2350 
	$loÝbackT¡I¤
(*
¬g
, 
veùÜ
)

2352 
LoÝbackT¡Args
 *
·
 = 
¬g
;

2353 iàÐ
RTEMS_SUCCESSFUL
 !ð
	`¹ems_mes§ge_queue_£nd
(
·
->
q
, (*)&
veùÜ
, (vector)) ) {

2355 
	`´tk
("vmeUniv£IÁLoÝbackT¡: (ISRèmes§gqueufuÎ / ovruÀ? di§blg IRQev %i\n", 
·
->
l
);

2356 
	`vmeUniv£IÁDi§bË
(
·
->
l
);

2358 
	}
}

2361 
	$vmeUniv£IÁLoÝbackT¡
(
Ëv
, 
veùÜ
)

2363 
DFLT_BASE
;

2364 
¹ems_¡©us_code
 
sc
;

2365 
¹ems_id
 
q
 = 0;

2366 
¡®Ëd
 = 0;

2367 
i
, 
r
 = 0;

2368 
doDi§bË
 = 0;

2369 
size_t
 
size
;

2370 
msg
;

2371 * 
qfmt
 = "VME IRQ @vector %3i %s";

2372 * 
ckfmt
 = "VME IACK %s";

2373 
LoÝbackT¡Args
 
a
;

2375 
	`CHECK_DFLT_BASE
(
ba£
);

2378 iàÐ
Ëv
 < 1 ||ev > 7 || 
veùÜ
 > 255 ) {

2379 
	`årtf
(
¡dr
,"Invalidevel or vectorrgument\n");

2383 iàÐ(
veùÜ
 & 1) ) {

2384 
	`årtf
(
¡dr
,"Software interrupts can only useven-numbered vectors, sorry.\n");

2388 iàÐ
	`UNIV_REV
(
ba£
è< 2 && 
veùÜ
 != 0 ) {

2389 
	`årtf
(
¡dr
,

2391 
	`årtf
(
¡dr
,

2393 
	`årtf
(
¡dr
,

2399 iàÐ
RTEMS_SUCCESSFUL
 !ð(
sc
=
	`¹ems_mes§ge_queue_ü
(

2400 
	`¹ems_bud_Çme
('t' ,'U','I','I'),

2404 &
q
)) ) {

2405 
	`¹ems_rÜ
(
sc
, "vmeUniverseIntLoopbackTst: Unableo create message queue");

2406 
ba
;

2409 
a
.
q
 = q;

2410 
a
.
l
 = 
Ëv
;

2413 iàÐ
	`vmeUniv£In¡®lISR
(
veùÜ
, 
loÝbackT¡I¤
, (*)&
a
) ) {

2414 
	`årtf
(
¡dr
,"UÇbËØ¡®ÈVME ISRØveùÜ %i\n",
veùÜ
);

2415 
ba
;

2417 
¡®Ëd
++;

2418 iàÐ
	`vmeUniv£In¡®lISR
(
UNIV_VME_SW_IACK_INT_VEC
, 
loÝbackT¡I¤
, (*)&
a
) ) {

2419 
	`årtf
(
¡dr
,"UÇbËØ¡®ÈVME ISRØIACK s³cÈveùÜ %i\n",
UNIV_VME_SW_IACK_INT_VEC
);

2420 
ba
;

2422 
¡®Ëd
++;

2424 iàÐ!
	`vmeUniv£IÁIsEÇbËd
(
Ëv
è&& 0==
	`vmeUniv£IÁEÇbË
(level) )

2425 
doDi§bË
 = 1;

2428 
	`vmeUniv£WreReg
Ð
UNIV_LINT_STAT_SW_IACK
, 
UNIV_REGOFF_LINT_STAT
 );

2430 iàÐ
	`vmeUniv£IÁEÇbË
Ð
UNIV_VME_SW_IACK_INT_VEC
 ) ) {

2431 
	`årtf
(
¡dr
,"Unableonable IACK interrupt\n");

2432 
ba
;

2435 
	`´tf
("vmeUniverse VME interruptoopbackest; STARTING...\n");

2436 
	`´tf
(" -->s£¹g VME IRQev %i\n", 
Ëv
);

2437 
	`vmeUniv£IÁRai£
(
Ëv
, 
veùÜ
);

2439  
i
 = 0; i< 3; i++ ) {

2440 
sc
 = 
	`¹ems_mes§ge_queue_»ûive
(

2441 
q
,

2442 &
msg
,

2443 &
size
,

2444 
RTEMS_WAIT
,

2446 iàÐ
sc
 ) {

2447 iàÐ
RTEMS_TIMEOUT
 =ð
sc
 && 
i
>1 ) {

2449 
sc
 = 0;

2451 
	`¹ems_rÜ
(
sc
,"Error waiting for interrupts");

2455 iàÐ
msg
 =ð
veùÜ
 ) {

2456 iàÐ!
qfmt
 ) {

2457 
	`´tf
("Excess VME IRQeceived ?? -- BAD\n");

2458 
r
 = 1;

2460 
	`´tf
(
qfmt
, 
veùÜ
, "received -- PASSED\n");

2461 
qfmt
 = 0;

2463 } iàÐ
msg
 =ð
UNIV_VME_SW_IACK_INT_VEC
 ) {

2464 iàÐ!
ckfmt
 ) {

2465 
	`´tf
("Excess VME IACKeceived ?? -- BAD\n");

2466 
r
 = 1;

2468 
	`´tf
(
ckfmt
, "received -- PASSED\n");

2469 
ckfmt
 = 0;

2472 
	`´tf
("UnknowÀIRQ (veùÜ %luè»ûived -- BAD\n", 
msg
);

2473 
r
 = 1;

2479 iàÐ
qfmt
 ) {

2480 
	`´tf
(
qfmt
,
veùÜ
, "MISSED -- BAD\n");

2481 
r
 = 1;

2483 iàÐ
ckfmt
 ) {

2484 
	`´tf
(
ckfmt
, "MISSED -- BAD\n");

2485 
r
 = 1;

2488 
	`´tf
("FINISHED.\n");

2490 
ba
:

2491 iàÐ
doDi§bË
 )

2492 
	`vmeUniv£IÁDi§bË
(
Ëv
);

2493 
	`vmeUniv£IÁDi§bË
Ð
UNIV_VME_SW_IACK_INT_VEC
 );

2494 iàÐ
¡®Ëd
 > 0 )

2495 
	`vmeUniv£RemoveISR
(
veùÜ
, 
loÝbackT¡I¤
, (*)&
a
);

2496 iàÐ
¡®Ëd
 > 1 )

2497 
	`vmeUniv£RemoveISR
(
UNIV_VME_SW_IACK_INT_VEC
, 
loÝbackT¡I¤
, (*)&
a
);

2498 iàÐ
q
 )

2499 
	`¹ems_mes§ge_queue_de
(
q
);

2501  
sc
 ? sø: 
r
;

2502 
	}
}

	@src/lib/libbsp/shared/vmeUniverse/vmeUniverse.h

9 #iâdeà
VME_UNIVERSE_UTIL_H


10 
	#VME_UNIVERSE_UTIL_H


	)

65 #ifdeà
__vxwÜks


66 
	~<vme.h
>

69 
	~<b¥/vme_am_defs.h
>

77 
	#VME_MODE_MATCH_MASK
 (3<<30)

	)

78 
	#VME_MODE_EXACT_MATCH
 (2<<30è

	)

79 
	#VME_MODE_AS_MATCH
 (1<<30è

	)

82 
	tLERegi¡
;

88 
	sVmeUniv£DMAPackRec_
 {

89 
LERegi¡
 
dùl
 
__©ibu__
((
®igÃd
(32)));

90 
LERegi¡
 
dtbc
 
__©ibu__
((
·cked
));

91 
LERegi¡
 
dÏ
 
__©ibu__
((
·cked
));

92 
LERegi¡
 
dummy1
 
__©ibu__
((
·cked
));

93 
LERegi¡
 
dva
 
__©ibu__
((
·cked
));

94 
LERegi¡
 
dummy2
 
__©ibu__
((
·cked
));

95 
LERegi¡
 
dýp
 
__©ibu__
((
·cked
));

96 
LERegi¡
 
dummy3
 
__©ibu__
((
·cked
));

97 } 
	tVmeUniv£DMAPackRec
, *
	tVmeUniv£DMAPack
;

100 
	#UNIV_REGOFF_PCI_CSR
 0x4

	)

101 
	#UNIV_PCI_CSR_D_PE
 (1<<31è

	)

102 
	#UNIV_PCI_CSR_S_SERR
 (1<<30è

	)

103 
	#UNIV_PCI_CSR_R_MA
 (1<<29è

	)

104 
	#UNIV_PCI_CSR_R_TA
 (1<<28è

	)

105 
	#UNIV_PCI_CSR_S_TA
 (1<<27è

	)

106 
	#UNIV_PCI_CSR_DEVSEL_MASK
 (3<<25è

	)

107 
	#UNIV_PCI_CSR_DP_D
 (1<<24è

	)

108 
	#UNIV_PCI_CSR_TFBBC
 (1<<23è

	)

109 
	#UNIV_PCI_CSR_MFBBC
 (1<<9è

	)

110 
	#UNIV_PCI_CSR_SERR_EN
 (1<<8è

	)

111 
	#UNIV_PCI_CSR_WAIT
 (1<<7è

	)

112 
	#UNIV_PCI_CSR_PERESP
 (1<<6è

	)

113 
	#UNIV_PCI_CSR_VGAPS
 (1<<5è

	)

114 
	#UNIV_PCI_CSR_MWI_EN
 (1<<4è

	)

115 
	#UNIV_PCI_CSR_SC
 (1<<3è

	)

116 
	#UNIV_PCI_CSR_BM
 (1<<2è

	)

117 
	#UNIV_PCI_CSR_MS
 (1<<1è

	)

118 
	#UNIV_PCI_CSR_IOS
 (1<<0è

	)

121 
	#UNIV_REGOFF_SCYC_CTL
 0x170

	)

122 
	#UNIV_SCYC_CTL_LAS_IO
 (1<<2è

	)

123 
	#UNIV_SCYC_CTL_SCYC_RMW
 (1<<0è

	)

124 
	#UNIV_SCYC_CTL_SCYC_ADOH
 (2<<0è

	)

127 
	#UNIV_REGOFF_SCYC_ADDR
 0x174

	)

130 
	#UNIV_REGOFF_SCYC_EN
 0x178

	)

133 
	#UNIV_REGOFF_SCYC_CMP
 0x17ø

	)

136 
	#UNIV_REGOFF_SCYC_SWP
 0x180

	)

139 
	#UNIV_REGOFF_LMISC
 0x184

	)

140 
	#UNIV_LMISC_CRT_MASK
 (7<<28è

	)

141 
	#UNIV_LMISC_CRT_INF
 (0<<28è

	)

142 
	#UNIV_LMISC_CRT_128_US
 (1<<28è

	)

143 
	#UNIV_LMISC_CRT_256_US
 (2<<28è

	)

144 
	#UNIV_LMISC_CRT_512_US
 (3<<28è

	)

145 
	#UNIV_LMISC_CRT_1024_US
 (4<<28è

	)

146 
	#UNIV_LMISC_CRT_2048_US
 (5<<28è

	)

147 
	#UNIV_LMISC_CRT_4096_US
 (6<<28è

	)

149 
	#UNIV_LMISC_CWT_MASK
 (7<<24è

	)

150 
	#UNIV_LMISC_CWT_DISABLE
 0

	)

151 
	#UNIV_LMISC_CWT_16
 (1<<24è

	)

152 
	#UNIV_LMISC_CWT_32
 (2<<24è

	)

153 
	#UNIV_LMISC_CWT_64
 (3<<24è

	)

154 
	#UNIV_LMISC_CWT_128
 (4<<24è

	)

155 
	#UNIV_LMISC_CWT_256
 (5<<24è

	)

156 
	#UNIV_LMISC_CWT_512
 (6<<24è

	)

159 
	#UNIV_REGOFF_L_CMDERR
 0x18c

	)

160 
	#UNIV_L_CMDERR_CMDERR
(
»g
è((Ôeg)>>28)&0xfè

	)

161 
	#UNIV_L_CMDERR_M_ERR
 (1<<27è

	)

162 
	#UNIV_L_CMDERR_L_STAT
 (1<<23è

	)

165 
	#UNIV_REGOFF_LAERR
 0x190

	)

167 
	#UNIV_REGOFF_DCTL
 0x200

	)

168 
	#UNIV_DCTL_L2V
 (1<<31è

	)

169 
	#UNIV_DCTL_VDW_MSK
 (3<<22è

	)

170 
	#UNIV_DCTL_VDW_8
 (0<<22è

	)

171 
	#UNIV_DCTL_VDW_16
 (1<<22è

	)

172 
	#UNIV_DCTL_VDW_32
 (2<<22è

	)

173 
	#UNIV_DCTL_VDW_64
 (3<<22è

	)

174 
	#UNIV_DCTL_VAS_MSK
 (7<<16è

	)

175 
	#UNIV_DCTL_VAS_A16
 (0<<16è

	)

176 
	#UNIV_DCTL_VAS_A24
 (1<<16è

	)

177 
	#UNIV_DCTL_VAS_A32
 (2<<16è

	)

178 
	#UNIV_DCTL_PGM_MSK
 (3<<14è

	)

179 
	#UNIV_DCTL_PGM
 (1<<14è

	)

180 
	#UNIV_DCTL_SUPER_MSK
 (3<<12è

	)

181 
	#UNIV_DCTL_SUPER
 (1<<12è

	)

182 
	#UNIV_DCTL_NO_VINC
 (1<<9è

	)

183 
	#UNIV_DCTL_VCT
 (1<<8è

	)

184 
	#UNIV_DCTL_LD64EN
 (1<<7è

	)

187 
	#UNIV_REGOFF_DTBC
 0x204

	)

189 
	#UNIV_REGOFF_DLA
 0x208

	)

193 
	#UNIV_REGOFF_DVA
 0x210

	)

198 
	#UNIV_REGOFF_DCPP
 0x218

	)

200 
	#UNIV_DCPP_IMG_NULL
 (1<<0è

	)

201 
	#UNIV_DCPP_IMG_PROCESSED
 (1<<1è

	)

204 
	#UNIV_REGOFF_DGCS
 0x220

	)

205 
	#UNIV_DGCS_GO
 (1<<31è

	)

206 
	#UNIV_DGCS_STOP_REQ
 (1<<30è

	)

207 
	#UNIV_DGCS_HALT_REQ
 (1<<29è

	)

208 
	#UNIV_DGCS_CHAIN
 (1<<27è

	)

209 
	#UNIV_DGCS_VON_MSK
 (7<<20è

	)

210 
	#UNIV_DGCS_VON_DONE
 (0<<20è

	)

211 
	#UNIV_DGCS_VON_256
 (1<<20è

	)

212 
	#UNIV_DGCS_VON_512
 (2<<20è

	)

213 
	#UNIV_DGCS_VON_1024
 (3<<20è

	)

214 
	#UNIV_DGCS_VON_2048
 (4<<20è

	)

215 
	#UNIV_DGCS_VON_4096
 (5<<20è

	)

216 
	#UNIV_DGCS_VON_8192
 (6<<20è

	)

217 
	#UNIV_DGCS_VON_16384
 (7<<20è

	)

218 
	#UNIV_DGCS_VOFF_MSK
 (15<<16è

	)

219 
	#UNIV_DGCS_VOFF_0_US
 (0<<16è

	)

220 
	#UNIV_DGCS_VOFF_2_US
 (8<<16è

	)

221 
	#UNIV_DGCS_VOFF_4_US
 (9<<16è

	)

222 
	#UNIV_DGCS_VOFF_8_US
 (10<<16)

	)

223 
	#UNIV_DGCS_VOFF_16_US
 (1<<16è

	)

224 
	#UNIV_DGCS_VOFF_32_US
 (2<<16è

	)

225 
	#UNIV_DGCS_VOFF_64_US
 (3<<16è

	)

226 
	#UNIV_DGCS_VOFF_128_US
 (4<<16è

	)

227 
	#UNIV_DGCS_VOFF_256_US
 (5<<16è

	)

228 
	#UNIV_DGCS_VOFF_512_US
 (6<<16è

	)

229 
	#UNIV_DGCS_VOFF_1024_US
 (7<<16è

	)

231 
	#UNIV_DGCS_ACT
 (1<<15è

	)

232 
	#UNIV_DGCS_STOP
 (1<<14è

	)

233 
	#UNIV_DGCS_HALT
 (1<<13è

	)

234 
	#UNIV_DGCS_DONE
 (1<<11è

	)

235 
	#UNIV_DGCS_LERR
 (1<<10è

	)

236 
	#UNIV_DGCS_VERR
 (1<<9è

	)

237 
	#UNIV_DGCS_P_ERR
 (1<<8è

	)

238 
	#UNIV_DGCS_STATUS_CLEAR
\

239 (
UNIV_DGCS_ACT
|
UNIV_DGCS_STOP
|
UNIV_DGCS_HALT
|\

240 
UNIV_DGCS_DONE
|
UNIV_DGCS_LERR
|
UNIV_DGCS_VERR
|
UNIV_DGCS_P_ERR
)

	)

241 
	#UNIV_DGCS_P_ERR
 (1<<8è

	)

243 
	#UNIV_DGCS_INT_STOP
 (1<<6è

	)

244 
	#UNIV_DGCS_INT_HALT
 (1<<5è

	)

245 
	#UNIV_DGCS_INT_DONE
 (1<<3è

	)

246 
	#UNIV_DGCS_INT_LERR
 (1<<2è

	)

247 
	#UNIV_DGCS_INT_VERR
 (1<<1è

	)

248 
	#UNIV_DGCS_INT_P_ERR
 (1<<0è

	)

249 
	#UNIV_DGCS_INT_MSK
 (0x0000006fè

	)

252 
	#UNIV_REGOFF_D_LLUE
 0x224

	)

253 
	#UNIV_D_LLUE_UPDATE
 (1<<31)

	)

257 
	#UNIV_REGOFF_LINT_EN
 0x300

	)

258 
	#UNIV_LINT_EN_LM3
 (1<<23è

	)

259 
	#UNIV_LINT_EN_LM2
 (1<<22è

	)

260 
	#UNIV_LINT_EN_LM1
 (1<<21è

	)

261 
	#UNIV_LINT_EN_LM0
 (1<<20è

	)

262 
	#UNIV_LINT_EN_MBOX3
 (1<<19è

	)

263 
	#UNIV_LINT_EN_MBOX2
 (1<<18è

	)

264 
	#UNIV_LINT_EN_MBOX1
 (1<<17è

	)

265 
	#UNIV_LINT_EN_MBOX0
 (1<<16è

	)

266 
	#UNIV_LINT_EN_ACFAIL
 (1<<15è

	)

267 
	#UNIV_LINT_EN_SYSFAIL
 (1<<14è

	)

268 
	#UNIV_LINT_EN_SW_INT
 (1<<13è

	)

269 
	#UNIV_LINT_EN_SW_IACK
 (1<<12è

	)

270 
	#UNIV_LINT_EN_VERR
 (1<<10è

	)

271 
	#UNIV_LINT_EN_LERR
 (1<<9è

	)

272 
	#UNIV_LINT_EN_DMA
 (1<<8è

	)

273 
	#UNIV_LINT_EN_VIRQ7
 (1<<7è

	)

274 
	#UNIV_LINT_EN_VIRQ6
 (1<<6è

	)

275 
	#UNIV_LINT_EN_VIRQ5
 (1<<5è

	)

276 
	#UNIV_LINT_EN_VIRQ4
 (1<<4è

	)

277 
	#UNIV_LINT_EN_VIRQ3
 (1<<3è

	)

278 
	#UNIV_LINT_EN_VIRQ2
 (1<<2è

	)

279 
	#UNIV_LINT_EN_VIRQ1
 (1<<1è

	)

280 
	#UNIV_LINT_EN_VOWN
 (1<<0è

	)

283 
	#UNIV_REGOFF_LINT_STAT
 0x304

	)

284 
	#UNIV_LINT_STAT_LM3
 (1<<23è

	)

285 
	#UNIV_LINT_STAT_LM2
 (1<<22è

	)

286 
	#UNIV_LINT_STAT_LM1
 (1<<21è

	)

287 
	#UNIV_LINT_STAT_LM0
 (1<<20è

	)

288 
	#UNIV_LINT_STAT_MBOX3
 (1<<19è

	)

289 
	#UNIV_LINT_STAT_MBOX2
 (1<<18è

	)

290 
	#UNIV_LINT_STAT_MBOX1
 (1<<17è

	)

291 
	#UNIV_LINT_STAT_MBOX0
 (1<<16è

	)

292 
	#UNIV_LINT_STAT_ACFAIL
 (1<<15è

	)

293 
	#UNIV_LINT_STAT_SYSFAIL
 (1<<14è

	)

294 
	#UNIV_LINT_STAT_SW_INT
 (1<<13è

	)

295 
	#UNIV_LINT_STAT_SW_IACK
 (1<<12è

	)

296 
	#UNIV_LINT_STAT_VERR
 (1<<10è

	)

297 
	#UNIV_LINT_STAT_LERR
 (1<<9è

	)

298 
	#UNIV_LINT_STAT_DMA
 (1<<8è

	)

299 
	#UNIV_LINT_STAT_VIRQ7
 (1<<7è

	)

300 
	#UNIV_LINT_STAT_VIRQ6
 (1<<6è

	)

301 
	#UNIV_LINT_STAT_VIRQ5
 (1<<5è

	)

302 
	#UNIV_LINT_STAT_VIRQ4
 (1<<4è

	)

303 
	#UNIV_LINT_STAT_VIRQ3
 (1<<3è

	)

304 
	#UNIV_LINT_STAT_VIRQ2
 (1<<2è

	)

305 
	#UNIV_LINT_STAT_VIRQ1
 (1<<1è

	)

306 
	#UNIV_LINT_STAT_VOWN
 (1<<0è

	)

307 
	#UNIV_LINT_STAT_CLR
 (0xfff7ff)

	)

310 
	#UNIV_REGOFF_LINT_MAP0
 0x308

	)

311 
	#UNIV_LINT_MAP0_VIRQ7
(
lt
è((Öt)&0x7)<<(7*4))

	)

312 
	#UNIV_LINT_MAP0_VIRQ6
(
lt
è((Öt)&0x7)<<(6*4))

	)

313 
	#UNIV_LINT_MAP0_VIRQ5
(
lt
è((Öt)&0x7)<<(5*4))

	)

314 
	#UNIV_LINT_MAP0_VIRQ4
(
lt
è((Öt)&0x7)<<(4*4))

	)

315 
	#UNIV_LINT_MAP0_VIRQ3
(
lt
è((Öt)&0x7)<<(3*4))

	)

316 
	#UNIV_LINT_MAP0_VIRQ2
(
lt
è((Öt)&0x7)<<(2*4))

	)

317 
	#UNIV_LINT_MAP0_VIRQ1
(
lt
è((Öt)&0x7)<<(1*4))

	)

318 
	#UNIV_LINT_MAP0_VOWN
(
lt
è((Öt)&0x7)<<(0*4))

	)

320 
	#UNIV_REGOFF_LINT_MAP1
 0x30ø

	)

321 
	#UNIV_LINT_MAP1_ACFAIL
(
lt
è((Öt)&0x7)<<(7*4))

	)

322 
	#UNIV_LINT_MAP1_SYSFAIL
(
lt
è((Öt)&0x7)<<(6*4))

	)

323 
	#UNIV_LINT_MAP1_SW_INT
(
lt
è((Öt)&0x7)<<(5*4))

	)

324 
	#UNIV_LINT_MAP1_SW_IACK
(
lt
è((Öt)&0x7)<<(4*4))

	)

325 
	#UNIV_LINT_MAP1_VERR
(
lt
è((Öt)&0x7)<<(2*4))

	)

326 
	#UNIV_LINT_MAP1_LERR
(
lt
è((Öt)&0x7)<<(1*4))

	)

327 
	#UNIV_LINT_MAP1_DMA
(
lt
è((Öt)&0x7)<<(0*4))

	)

330 
	#UNIV_REGOFF_VINT_EN
 0x310

	)

331 
	#UNIV_VINT_EN_DISABLE_ALL
 0

	)

332 
	#UNIV_VINT_EN_SWINT
 (1<<12)

	)

333 
	#UNIV_VINT_EN_SWINT_LVL
(
l
è(1<<((Ö)&7)+24)è

	)

337 
	#UNIV_REGOFF_VINT_STAT
 0x314

	)

338 
	#UNIV_VINT_STAT_LINT
(
lt
è(1<<(Öt)&7))

	)

339 
	#UNIV_VINT_STAT_LINT_MASK
 (0xff)

	)

340 
	#UNIV_VINT_STAT_CLR
 (0xã0f17ff)

	)

341 
	#UNIV_VINT_STAT_SWINT
(
l
è(1<<((Ö)&7)+24))

	)

343 
	#UNIV_REGOFF_VINT_MAP0
 0x318

	)

345 
	#UNIV_REGOFF_VINT_MAP1
 0x31ø

	)

346 
	#UNIV_VINT_MAP1_SWINT
(
Ëv
è((Öev)&0x7)<<16)

	)

352 
	#UNIV_REGOFF_VINT_STATID
 0x320

	)

353 
	#UNIV_VINT_STATID
(
id
è((id)<<24)

	)

355 
	#UNIV_REGOFF_VIRQ1_STATID
 0x324

	)

356 
	#UNIV_REGOFF_VIRQ2_STATID
 0x328

	)

357 
	#UNIV_REGOFF_VIRQ3_STATID
 0x32ø

	)

358 
	#UNIV_REGOFF_VIRQ4_STATID
 0x330

	)

359 
	#UNIV_REGOFF_VIRQ5_STATID
 0x334

	)

360 
	#UNIV_REGOFF_VIRQ6_STATID
 0x338

	)

361 
	#UNIV_REGOFF_VIRQ7_STATID
 0x33ø

	)

362 
	#UNIV_VIRQ_ERR
 (1<<8è

	)

363 
	#UNIV_VIRQ_STATID_MASK
 (0xff)

	)

365 
	#UNIV_REGOFF_LINT_MAP2
 0x340

	)

366 
	#UNIV_LINT_MAP2_LM3
(
lt
è((Öt)&0x7)<<7*4è

	)

367 
	#UNIV_LINT_MAP2_LM2
(
lt
è((Öt)&0x7)<<6*4è

	)

368 
	#UNIV_LINT_MAP2_LM1
(
lt
è((Öt)&0x7)<<5*4è

	)

369 
	#UNIV_LINT_MAP2_LM0
(
lt
è((Öt)&0x7)<<4*4è

	)

370 
	#UNIV_LINT_MAP2_MBOX3
(
lt
è((Öt)&0x7)<<3*4è

	)

371 
	#UNIV_LINT_MAP2_MBOX2
(
lt
è((Öt)&0x7)<<2*4è

	)

372 
	#UNIV_LINT_MAP2_MBOX1
(
lt
è((Öt)&0x7)<<1*4è

	)

373 
	#UNIV_LINT_MAP2_MBOX0
(
lt
è((Öt)&0x7)<<0*4è

	)

375 
	#UNIV_REGOFF_VINT_MAP2
 0x344

	)

376 
	#UNIV_VINT_MAP2_MBOX3
(
vt
è(((vt)&0x7)<<3*4è

	)

377 
	#UNIV_VINT_MAP2_MBOX2
(
vt
è(((vt)&0x7)<<2*4è

	)

378 
	#UNIV_VINT_MAP2_MBOX1
(
vt
è(((vt)&0x7)<<1*4è

	)

379 
	#UNIV_VINT_MAP2_MBOX0
(
vt
è(((vt)&0x7)<<0*4è

	)

381 
	#UNIV_REGOFF_MBOX0
 0x348

	)

382 
	#UNIV_REGOFF_MBOX1
 0x34ø

	)

383 
	#UNIV_REGOFF_MBOX2
 0x350

	)

384 
	#UNIV_REGOFF_MBOX3
 0x354

	)

386 
	#UNIV_REGOFF_SEMA0
 0x358

	)

387 
	#UNIV_REGOFF_SEMA1
 0x35ø

	)

390 
	#UNIV_REGOFF_MAST_CTL
 0x400

	)

391 
	#UNIV_MAST_CTL_MAXRTRY
(
v®
è(((v®)&0xf)<<7*4è

	)

392 
	#UNIV_MAST_CTL_PWON
(
v®
è(((v®)&0xf)<<6*4è

	)

393 
	#UNIV_MAST_CTL_VRL
(
v®
è(((v®)&0x3)<<22è

	)

394 
	#UNIV_MAST_CTL_VRM
 (1<<21è

	)

395 
	#UNIV_MAST_CTL_VREL
 (1<<20è

	)

396 
	#UNIV_MAST_CTL_VOWN
 (1<<19è

	)

397 
	#UNIV_MAST_CTL_VOWN_ACK
 (1<<18è

	)

398 
	#UNIV_MAST_CTL_PABS
(
v®
è(((v®)&0x3)<<3*4è

	)

399 
	#UNIV_MAST_CTL_BUS_NO
(
v®
è(((v®)&0xff)<<0*4è

	)

401 
	#UNIV_REGOFF_MISC_CTL
 0x404

	)

402 
	#UNIV_MISC_CTL_VBTO
(
v®
è(((v®)&0x7)<<7*4è

	)

403 
	#UNIV_MISC_CTL_VARB
 (1<<26è

	)

404 
	#UNIV_MISC_CTL_VARBTO
(
v®
è(((v®)&0x3)<<6*4è

	)

405 
	#UNIV_MISC_CTL_SW_LRST
 (1<<23è

	)

406 
	#UNIV_MISC_CTL_SW_SYSRST
 (1<<22è

	)

407 
	#UNIV_MISC_CTL_BI
 (1<<20è

	)

408 
	#UNIV_MISC_CTL_ENGBI
 (1<<19è

	)

409 
	#UNIV_MISC_CTL_SYSCON
 (1<<17è

	)

410 
	#UNIV_MISC_CTL_V64AUTO
 (1<<16è

	)

415 
	#UNIV_REGOFF_U2SPEC
 0x4fc

	)

416 
	#UNIV_U2SPEC_DTKFLTR
 (1<<12è

	)

417 
	#UNIV_U2SPEC_MASt11
 (1<<10è

	)

418 
	#UNIV_U2SPEC_READt27_DEFAULT
 (0<<8è

	)

419 
	#UNIV_U2SPEC_READt27_FAST
 (1<<8è

	)

420 
	#UNIV_U2SPEC_READt27_NODELAY
 (2<<8è

	)

421 
	#UNIV_U2SPEC_POSt28_FAST
 (1<<2è

	)

422 
	#UNIV_U2SPEC_PREt28_FAST
 (1<<0è

	)

425 
	#UNIV_REGOFF_LM_CTL
 0xf64

	)

426 
	#UNIV_LM_CTL_EN
 (1<<31è

	)

427 
	#UNIV_LM_CTL_PGM
 (1<<23è

	)

428 
	#UNIV_LM_CTL_DATA
 (1<<22è

	)

429 
	#UNIV_LM_CTL_SUPER
 (1<<21è

	)

430 
	#UNIV_LM_CTL_USER
 (1<<20è

	)

431 
	#UNIV_LM_CTL_VAS_A16
 (0<<16è

	)

432 
	#UNIV_LM_CTL_VAS_A24
 (1<<16è

	)

433 
	#UNIV_LM_CTL_VAS_A32
 (2<<16è

	)

436 
	#UNIV_REGOFF_LM_BS
 0xf68

	)

439 
	#UNIV_REGOFF_VRAI_CTL
 0xf70

	)

440 
	#UNIV_VRAI_CTL_EN
 (1<<31è

	)

441 
	#UNIV_VRAI_CTL_PGM
 (1<<23è

	)

442 
	#UNIV_VRAI_CTL_DATA
 (1<<22è

	)

443 
	#UNIV_VRAI_CTL_SUPER
 (1<<21è

	)

444 
	#UNIV_VRAI_CTL_USER
 (1<<20è

	)

445 
	#UNIV_VRAI_CTL_VAS_A16
 (0<<16è

	)

446 
	#UNIV_VRAI_CTL_VAS_A24
 (1<<16è

	)

447 
	#UNIV_VRAI_CTL_VAS_A32
 (2<<16è

	)

448 
	#UNIV_VRAI_CTL_VAS_MSK
 (3<<16)

	)

451 
	#UNIV_REGOFF_VRAI_BS
 0xf74

	)

454 
	#UNIV_REGOFF_VCSR_CTL
 0xf80

	)

455 
	#UNIV_VCSR_CTL_EN
 (1<<31è

	)

456 
	#UNIV_VCSR_CTL_LAS_PCI_MEM
 (0<<0è

	)

457 
	#UNIV_VCSR_CTL_LAS_PCI_IO
 (1<<0è

	)

458 
	#UNIV_VCSR_CTL_LAS_PCI_CFG
 (2<<0è

	)

461 
	#UNIV_REGOFF_VCSR_TO
 0xf84

	)

464 
	#UNIV_REGOFF_V_AMERR
 0xf88

	)

465 
	#UNIV_V_AMERR_AMERR
(
»g
è((Ôeg)>>26)&0x3fè

	)

466 
	#UNIV_V_AMERR_IACK
 (1<<25è

	)

467 
	#UNIV_V_AMERR_M_ERR
 (1<<24è

	)

468 
	#UNIV_V_AMERR_V_STAT
 (1<<23è

	)

471 
	#UNIV_REGOFF_VAERR
 0xf8ø

	)

474 
	#UNIV_REGOFF_VCSR_CLR
 0xff4

	)

475 
	#UNIV_VCSR_CLR_RESET
 (1<<31è

	)

476 
	#UNIV_VCSR_CLR_SYSFAIL
 (1<<30è

	)

477 
	#UNIV_VCSR_CLR_FAIL
 (1<<29è

	)

480 
	#UNIV_REGOFF_VCSR_SET
 (0xff8)

	)

481 
	#UNIV_VCSR_SET_RESET
 (1<<31è

	)

482 
	#UNIV_VCSR_SET_SYSFAIL
 (1<<30è

	)

483 
	#UNIV_VCSR_SET_FAIL
 (1<<29è

	)

486 
	#UNIV_REGOFF_VCSR_BS
 0xffc

	)

487 
	#UNIV_VCSR_BS_MASK
 (0xf8000000)

	)

490 
	#UNIV_CSR_OFFSET
 0x7f000

	)

492 #ifdeà
__ýlu¥lus


500 vÞ©
LERegi¡
 *
vmeUniv£0Ba£Addr
;

501 
vmeUniv£0PciIrqLe
;

506 
vmeUniv£In
();

512 
vmeUniv£Re£t
();

525 
vmeUniv£Ma¡PÜtsShow
(
FILE
 *
f
);

531 
vmeUniv£SÏvePÜtsShow
(
FILE
 *
f
);

535 
vmeUniv£Di§bËAÎMa¡s
();

538 
vmeUniv£Di§bËAÎSÏves
();

563 
vmeUniv£Ma¡PÜtCfg
(

564 
pÜt
,

565 
add»ss_¥aû
,

566 
vme_add»ss
,

567 
loÿl_add»ss
,

568 
Ëngth
);

594 
vmeUniv£XÏAddr
(

595 
ma¡
,

596 
»v£
,

597 
as
,

598 
addr
,

599 *
·Out


604 
vmeUniv£SÏvePÜtCfg
(

605 
pÜt
,

606 
add»ss_¥aû
,

607 
vme_add»ss
,

608 
loÿl_add»ss
,

609 
Ëngth
);

620 
vmeUniv£S¹DMA
(

621 
loÿl_addr
,

622 
vme_addr
,

623 
couÁ
);

626 
vmeUniv£S¹DMAXX
(

627 vÞ©
LERegi¡
 *
uba£
,

628 
loÿl_addr
,

629 
vme_addr
,

630 
couÁ
);

637 
vmeUniv£RdReg
(
off£t
);

641 
vmeUniv£WreReg
(
v®ue
, 
off£t
);

647 
vmeUniv£CvtToLE
(*
±r
, 
num
);

651 
vmeUniv£Re£tBus
();

658 
vmeUniv£RdRegXX
(vÞ©
LERegi¡
 *
uba£
, 
off£t
);

661 
vmeUniv£WreRegXX
(vÞ©
LERegi¡
 *
uba£
, 
v®ue
, 
off£t
);

664 
vmeUniv£XÏAddrXX
(

665 vÞ©
LERegi¡
 *
uba£
,

666 
ma¡
,

667 
»v£
,

668 
as
,

669 
addr
,

670 *
·Out


674 
vmeUniv£Ma¡PÜtCfgXX
(

675 vÞ©
LERegi¡
 *
uba£
,

676 
pÜt
,

677 
add»ss_¥aû
,

678 
vme_add»ss
,

679 
loÿl_add»ss
,

680 
Ëngth
);

683 
vmeUniv£SÏvePÜtCfgXX
(

684 vÞ©
LERegi¡
 *
uba£
,

685 
pÜt
,

686 
add»ss_¥aû
,

687 
vme_add»ss
,

688 
loÿl_add»ss
,

689 
Ëngth
);

692 
vmeUniv£Di§bËAÎMa¡sXX
(vÞ©
LERegi¡
 *
uba£
);

695 
vmeUniv£Di§bËAÎSÏvesXX
(vÞ©
LERegi¡
 *
uba£
);

701 
vmeUniv£Ma¡PÜtsShowXX
(

702 vÞ©
LERegi¡
 *
uba£
,
FILE
 *
f
);

708 
vmeUniv£SÏvePÜtsShowXX
(

709 vÞ©
LERegi¡
 *
uba£
,
FILE
 *
f
);

745 
vmeUniv£IÁRai£XX
(vÞ©
LERegi¡
 *
ba£
, 
Ëv
, 
veùÜ
);

748 
vmeUniv£IÁRai£
(
Ëv
, 
veùÜ
);

772 
vmeUniv£M­CRGXX
(vÞ©
LERegi¡
 *
ba£
, 
vme_ba£
, 
add»ss_¥aû
);

775 
vmeUniv£M­CRG
(
vme_ba£
, 
add»ss_¥aû
);

778 #ifdeà
__¹ems__


800 (*
	gVmeUniv£ISR
è(*
	tu¤Arg
, 
	tveùÜ
);

816 
	#UNIV_VOWN_INT_VEC
 256

	)

817 
	#UNIV_DMA_INT_VEC
 257

	)

818 
	#UNIV_LERR_INT_VEC
 258

	)

819 
	#UNIV_VERR_INT_VEC
 259

	)

821 
	#UNIV_VME_SW_IACK_INT_VEC
 261

	)

822 
	#UNIV_PCI_SW_INT_VEC
 262

	)

823 
	#UNIV_SYSFAIL_INT_VEC
 263

	)

824 
	#UNIV_ACFAIL_INT_VEC
 264

	)

825 
	#UNIV_MBOX0_INT_VEC
 265

	)

826 
	#UNIV_MBOX1_INT_VEC
 266

	)

827 
	#UNIV_MBOX2_INT_VEC
 267

	)

828 
	#UNIV_MBOX3_INT_VEC
 268

	)

829 
	#UNIV_LM0_INT_VEC
 269

	)

830 
	#UNIV_LM1_INT_VEC
 270

	)

831 
	#UNIV_LM2_INT_VEC
 271

	)

832 
	#UNIV_LM3_INT_VEC
 272

	)

834 
	#UNIV_NUM_INT_VECS
 273

	)

841 
vmeUniv£In¡®lISR
(
veùÜ
, 
VmeUniv£ISR
 
hªdËr
, *
u¤Arg
);

848 
vmeUniv£RemoveISR
(
veùÜ
, 
VmeUniv£ISR
 
hªdËr
, *
u¤Arg
);

853 
VmeUniv£ISR


854 
vmeUniv£ISRG
(
veùÜ
, **
·rg
);

864 
vmeUniv£IÁEÇbË
(
Ëv
);

866 
vmeUniv£IÁDi§bË
(
Ëv
);

877 
vmeUniv£IÁIsEÇbËd
(
Ëv
);

915 
vmeUniv£IÁRou
(
Ëv
, 
p
);

943 
vmeUniv£IÁLoÝbackT¡
(
Ëv
, 
veùÜ
);

990 
vmeUniv£In¡®lIrqMgr
(
vmeIrqUnivOut
,

991 
vmeIrqPicLe
,

992 
¥eclIrqUnivOut
,

993 
¥eclIrqPicLe
);

996 #ià
defed
(
__INSIDE_RTEMS_BSP__
)

997 
	~<¡d¬g.h
>

1029 
	#VMEUNIVERSE_IRQ_MGR_FLAG_SHARED
 1

	)

1030 
	#VMEUNIVERSE_IRQ_MGR_FLAG_PW_WORKAROUND
 2

	)

1033 
vmeUniv£In¡®lIrqMgrAÉ
(
æags
, 
uni_p0
, 
pic_p0
, ...);

1036 
vmeUniv£In¡®lIrqMgrVa
(
æags
, 
uni_p0
, 
pic_p0
, 
va_li¡
 
­
);

1041 #ifdeà
__ýlu¥lus


	@src/lib/libbsp/shared/vmeUniverse/vmeUniverseDMA.h

9 #iâdeà
VME_UNIVERSE_DMA_H


10 
	#VME_UNIVERSE_DMA_H


	)

56 
	~<b¥/vmeUniv£.h
>

57 
	~<¡dt.h
>

59 #ifdeà
__ýlu¥lus


71 
VMEDmaLi¡CÏssRec_
 
vmeUniv£DmaLi¡CÏss
;

74 
vmeUniv£DmaSupXX
(vÞ©
LERegi¡
 *
ba£
, 
chªÃl
, 
ut32_t
 
mode
, ut32_
xãr_mode
, *
cu¡om
);

77 
vmeUniv£DmaSup
(
chªÃl
, 
ut32_t
 
mode
, ut32_
xãr_mode
, *
cu¡om
);

80 
vmeUniv£DmaS¹XX
(vÞ©
LERegi¡
 *
ba£
, 
chªÃl
, 
ut32_t
 
pci_addr
, ut32_
vme_addr
, ut32_
n_bys
);

83 
vmeUniv£DmaS¹
(
chªÃl
, 
ut32_t
 
pci_addr
, ut32_
vme_addr
, ut32_
n_bys
);

85 
ut32_t


86 
vmeUniv£DmaStusXX
(vÞ©
LERegi¡
 *
ba£
, 
chªÃl
);

88 
ut32_t


89 
vmeUniv£DmaStus
(
chªÃl
);

91 #ifdeà
__ýlu¥lus


	@src/lib/libbsp/shared/vmeUniverse/vme_am_defs.h

9 #iâdeà
VME_AM_DEFINITIONS_H


10 
	#VME_AM_DEFINITIONS_H


	)

65 #iâdeà
VME_AM_STD_SUP_BLT


66 
	#VME_AM_STD_SUP_BLT
 0x3f

	)

68 #iâdeà
VME_AM_STD_SUP_ASCENDING


69 
	#VME_AM_STD_SUP_ASCENDING
 0x3f

	)

71 #iâdeà
VME_AM_STD_SUP_PGM


72 
	#VME_AM_STD_SUP_PGM
 0x3e

	)

74 #iâdeà
VME_AM_STD_SUP_MBLT


75 
	#VME_AM_STD_SUP_MBLT
 0x3c

	)

77 #iâdeà
VME_AM_STD_USR_BLT


78 
	#VME_AM_STD_USR_BLT
 0x3b

	)

80 #iâdeà
VME_AM_STD_USR_ASCENDING


81 
	#VME_AM_STD_USR_ASCENDING
 0x3b

	)

83 #iâdeà
VME_AM_STD_USR_PGM


84 
	#VME_AM_STD_USR_PGM
 0x3a

	)

86 #iâdeà
VME_AM_STD_SUP_DATA


87 
	#VME_AM_STD_SUP_DATA
 0x3d

	)

89 #iâdeà
VME_AM_STD_USR_DATA


90 
	#VME_AM_STD_USR_DATA
 0x39

	)

92 #iâdeà
VME_AM_STD_USR_MBLT


93 
	#VME_AM_STD_USR_MBLT
 0x38

	)

95 #iâdeà
VME_AM_EXT_SUP_BLT


96 
	#VME_AM_EXT_SUP_BLT
 0x0f

	)

98 #iâdeà
VME_AM_EXT_SUP_ASCENDING


99 
	#VME_AM_EXT_SUP_ASCENDING
 0x0f

	)

101 #iâdeà
VME_AM_EXT_SUP_PGM


102 
	#VME_AM_EXT_SUP_PGM
 0x0e

	)

104 #iâdeà
VME_AM_EXT_SUP_DATA


105 
	#VME_AM_EXT_SUP_DATA
 0x0d

	)

107 #iâdeà
VME_AM_EXT_SUP_MBLT


108 
	#VME_AM_EXT_SUP_MBLT
 0x0c

	)

110 #iâdeà
VME_AM_EXT_USR_BLT


111 
	#VME_AM_EXT_USR_BLT
 0x0b

	)

113 #iâdeà
VME_AM_EXT_USR_ASCENDING


114 
	#VME_AM_EXT_USR_ASCENDING
 0x0b

	)

116 #iâdeà
VME_AM_EXT_USR_PGM


117 
	#VME_AM_EXT_USR_PGM
 0x0a

	)

119 #iâdeà
VME_AM_EXT_USR_DATA


120 
	#VME_AM_EXT_USR_DATA
 0x09

	)

122 #iâdeà
VME_AM_EXT_USR_MBLT


123 
	#VME_AM_EXT_USR_MBLT
 0x08

	)

125 #iâdeà
VME_AM_2eVME_6U


126 
	#VME_AM_2eVME_6U
 0x20

	)

128 #iâdeà
VME_AM_2eVME_3U


129 
	#VME_AM_2eVME_3U
 0x21

	)

131 #iâdeà
VME_AM_CSR


132 
	#VME_AM_CSR
 0x2f

	)

134 #iâdeà
VME_AM_SUP_SHORT_IO


135 
	#VME_AM_SUP_SHORT_IO
 0x2d

	)

137 #iâdeà
VME_AM_USR_SHORT_IO


138 
	#VME_AM_USR_SHORT_IO
 0x29

	)

140 #iâdeà
VME_AM_IS_SHORT


141 
	#VME_AM_IS_SHORT
(
a
è((×è& 0x30è=ð0x20)

	)

143 #iâdeà
VME_AM_IS_STD


144 
	#VME_AM_IS_STD
(
a
è((×è& 0x30è=ð0x30)

	)

146 #iâdeà
VME_AM_IS_EXT


147 
	#VME_AM_IS_EXT
(
a
è((×è& 0x30è=ð0x00)

	)

149 #iâdeà
VME_AM_IS_SUP


150 
	#VME_AM_IS_SUP
(
a
è(×è& 4)

	)

155 #iâdeà
VME_AM_MASK


156 
	#VME_AM_MASK
 0x3f

	)

163 #iâdeà
VME_AM_IS_MEMORY


164 
	#VME_AM_IS_MEMORY
 (1<<8)

	)

173 
	#VME_AM_2eSST_BCST
 (1<<9)

	)

175 
	#VME_AM_2eSST_LO
 (1<<10)

	)

177 
	#VME_AM_2eSST_MID
 (2<<10)

	)

179 
	#VME_AM_2eSST_HI
 (3<<10)

	)

181 
	#VME_AM_IS_2eSST
(
am
è(×mè& (3<<10))

	)

186 
	#VME_MODE_DBW_MSK
 (3<<12)

	)

187 
	#VME_MODE_DBW8
 (1<<12)

	)

188 
	#VME_MODE_DBW16
 (2<<12)

	)

189 
	#VME_MODE_DBW32
 (3<<12)

	)

	@src/lib/libcpu/arm/at91rm9200/clock/clock.c

15 
	~<¹ems.h
>

16 
	~<¹ems/þockdrv.h
>

17 
	~<¹ems/libio.h
>

19 
	~<¡dlib.h
>

20 
	~<b¥.h
>

21 
	~<b¥/q.h
>

22 
	~<©91rm9200.h
>

23 
	~<©91rm9200_pmc.h
>

30 
	$þock_i¤_Ú
(cÚ¡ 
¹ems_q_cÚÃù_d©a
 *
unu£d
)

33 
	`ST_REG
(
ST_IER
èð
ST_SR_PITS
;

34 
	}
}

41 
	$þock_i¤_off
(cÚ¡ 
¹ems_q_cÚÃù_d©a
 *
unu£d
)

44 
	`ST_REG
(
ST_IDR
èð
ST_SR_PITS
;

45 
	}
}

53 
	$þock_i¤_is_Ú
(cÚ¡ 
¹ems_q_cÚÃù_d©a
 *
q
)

56  
	`ST_REG
(
ST_IMR
è& 
ST_SR_PITS
;

57 
	}
}

59 
Clock_i¤
(
¹ems_q_hdl_·¿m
 
¬g
);

62 
¹ems_q_cÚÃù_d©a
 
	gþock_i¤_d©a
 = {

63 .
Çme
 = 
AT91RM9200_INT_SYSIRQ
,

64 .
	ghdl
 = 
Clock_i¤
,

65 .
	ghªdË
 = 
NULL
,

66 .
	gÚ
 = 
þock_i¤_Ú
,

67 .
	goff
 = 
þock_i¤_off
,

68 .
	gisOn
 = 
þock_i¤_is_Ú
,

72 
	#Clock_driv_suµÜt_¡®l_i¤
Ð
_Ãw
, 
_Þd
 ) \

74 (
_Þd
èð
NULL
; \

75 
	`BSP_¡®l_¹ems_q_hªdËr
(&
þock_i¤_d©a
); \

76 } 0)

	)

78 
	$Clock_driv_suµÜt_lize_h¬dw¬e
()

80 
ut32_t
 
¡_¡r
;

81 
¦ck
;

82 
v®ue
;

85 
¦ck
 = 
	`©91rm9200_g_¦ck
();

86 
v®ue
 = (((
	`¹ems_cÚfigu¿tiÚ_g_miüo£cÚds_³r_tick
(è* 
¦ck
) +

90 
¡_¡r
 = 
	`ST_REG
(
ST_SR
);

91 (è
¡_¡r
; \

94 
	`AIC_SMR_REG
(
AIC_SMR_SYSIRQ
èð
	`AIC_SMR_PRIOR
(0x7);

97 
	`ST_REG
(
ST_PIMR
èð
v®ue
;

98 
	}
}

100 
	#Clock_driv_suµÜt_©_tick
() \

102 
ut32_t
 
¡_¡r
; \

105 
¡_¡r
 = 
	`ST_REG
(
ST_SR
); \

106 (è
¡_¡r
; \

107 } 0)

	)

109 
	$Clock_driv_suµÜt_shutdown_h¬dw¬e
( )

111 
	`BSP_»move_¹ems_q_hªdËr
(&
þock_i¤_d©a
);

112 
	}
}

114 
	#CLOCK_DRIVER_USE_DUMMY_TIMECOUNTER


	)

116 
	~"../../../../libb¥/sh¬ed/þockdrv_shl.h
"

	@src/lib/libcpu/arm/at91rm9200/dbgu/dbgu.c

15 
	~<b¥.h
>

16 
	~<¹ems/libio.h
>

17 
	~<rmios.h
>

19 
	~<©91rm9200.h
>

20 
	~<©91rm9200_dbgu.h
>

21 
	~<©91rm9200_pmc.h
>

22 
	~<¹ems/b¥Io.h
>

23 
	~<libch/£rl.h
>

24 
	~<libch/£rsuµ.h
>

26 vÞ©
	gdbg_dly
;

29 
dbgu_f¡_Ý
(
majÜ
, 
mÜ
, *
¬g
);

30 
dbgu_Ï¡_þo£
(
majÜ
, 
mÜ
, *
¬g
);

31 
dbgu_»ad
(
mÜ
);

32 
ssize_t
 
dbgu_wre
(
mÜ
, cÚ¡ *
buf
, 
size_t
 
Ën
);

33 
dbgu_
(
mÜ
);

34 
dbgu_wre_pÞËd
(
mÜ
, 
c
);

35 
dbgu_£t_©ibus
(
mÜ
, cÚ¡ 
rmios
 *
t
);

38 cÚ¡ 
cÚsÞe_âs
 
	gdbgu_âs
 =

40 
libch_£rl_deçuÉ_´obe
,

41 
dbgu_f¡_Ý
,

42 
dbgu_Ï¡_þo£
,

43 
dbgu_»ad
,

44 
dbgu_wre
,

45 
dbgu_
,

46 
dbgu_wre_pÞËd
,

47 
dbgu_£t_©ibus
,

48 
FALSE


59 
	$dbgu_f¡_Ý
(
majÜ
, 
mÜ
, *
¬g
)

62 
	}
}

70 
	$dbgu_Ï¡_þo£
(
majÜ
, 
mÜ
, *
¬g
)

73 
	}
}

82 
	$dbgu_»ad
(
mÜ
)

84 
c
;

85 
cÚsÞe_tbl
 *
cÚsÞe_y
;

86 
©91rm9200_dbgu_»gs_t
 *
dbgu
;

88 
cÚsÞe_y
 = 
	`BSP_g_u¬t_äom_mÜ
(
mÜ
);

90 ià(
cÚsÞe_y
 =ð
NULL
) {

94 
dbgu
 = (
©91rm9200_dbgu_»gs_t
 *)
cÚsÞe_y
->
ulClPÜt1
;

96 ià(!(
dbgu
->
¤
 & 
DBGU_INT_RXRDY
)) {

100 
c
 = 
dbgu
->
rhr
 & 0xff;

102  
c
;

103 
	}
}

111 
ssize_t
 
	$dbgu_wre
(
mÜ
, cÚ¡ *
buf
, 
size_t
 
Ën
)

113 
i
, 
x
;

114 
c
;

115 
cÚsÞe_tbl
 *
cÚsÞe_y
;

116 
©91rm9200_dbgu_»gs_t
 *
dbgu
;

118 
cÚsÞe_y
 = 
	`BSP_g_u¬t_äom_mÜ
(
mÜ
);

120 ià(
cÚsÞe_y
 =ð
NULL
) {

124 
dbgu
 = (
©91rm9200_dbgu_»gs_t
 *)
cÚsÞe_y
->
ulClPÜt1
;

126 
i
 = 0; i < 
Ën
; i++) {

129 ià(
dbgu
->
¤
 & 
DBGU_INT_TXRDY
) {

134 
c
 = (è
buf
[
i
];

135 
dbgu
->
thr
 = 
c
;

139 
x
 = 0; x < 100; x++) {

140 
dbg_dly
++;

145 
	}
}

149 
	$dbgu_
(
mÜ
)

151 
cÚsÞe_tbl
 *
cÚsÞe_y
;

152 
©91rm9200_dbgu_»gs_t
 *
dbgu
;

154 
cÚsÞe_y
 = 
	`BSP_g_u¬t_äom_mÜ
(
mÜ
);

156 ià(
cÚsÞe_y
 =ð
NULL
) {

160 
dbgu
 = (
©91rm9200_dbgu_»gs_t
 *)
cÚsÞe_y
->
ulClPÜt1
;

163 
dbgu
->
ü
 = (
DBGU_CR_RSTSTA
 | 
DBGU_CR_RSTTX
 | 
DBGU_CR_RSTRX
);

166 
dbgu
->
idr
 = 
DBGU_INT_ALL
;

167 
dbgu
->
imr
 = 0;

170 
dbgu
->
mr
 = 
DBGU_MR_PAR_NONE
 | 
DBGU_MR_CHMODE_NORM
;

173 
dbgu
->
brgr
 = (
	`©91rm9200_g_mck
(è/ 16è/ 
	`BSP_g_baud
();

176 
dbgu
->
ü
 = (
DBGU_CR_TXEN
 | 
DBGU_CR_RXEN
);

177 
	}
}

180 
	$dbgu_wre_pÞËd
(
mÜ
, 
c
)

182 
	`dbgu_wre
(
mÜ
, &
c
, 1);

183 
	}
}

186 
	$dbgu_£t_©ibus
(
mÜ
, cÚ¡ 
rmios
 *
t
)

189 
	}
}

201 
	$dbgu_pÞl_»ad
(
mÜ
)

203  
	`dbgu_»ad
(
mÜ
);

204 
	}
}

212 
	$_BSP_put_ch¬
Ð
c
 ) {

213 
	`dbgu_wre_pÞËd
(0, 
c
);

214 iàÐ
c
 == '\n' )

215 
	`dbgu_wre_pÞËd
(0, '\r');

216 
	}
}

218 
BSP_ouut_ch¬_funùiÚ_ty³
 
	gBSP_ouut_ch¬
 = 
_BSP_put_ch¬
;

220 
	$_BSP_pÞl_ch¬
()

222  
	`dbgu_pÞl_»ad
(0);

223 
	}
}

225 
BSP_pÞlg_gch¬_funùiÚ_ty³
 
	gBSP_pÞl_ch¬
 = 
_BSP_pÞl_ch¬
;

	@src/lib/libcpu/arm/at91rm9200/include/at91rm9200.h

16 #iâdeà
__AT91RM9200_H__


17 
	#__AT91RM9200_H__


	)

19 
	~"bs.h
"

21 vÞ©
	tvulÚg
;

24 
	#AIC_SMR_BASE
 0xFFFFF000

	)

25 
	#AIC_SMR_REG
(
_x_
è*(
vulÚg
 *)(
AIC_SMR_BASE
 + (_x_ & 0x7c))

	)

28 
	#AIC_SVR_BASE
 0xFFFFF080

	)

29 
	#AIC_SVR_REG
(
_x_
è*(
vulÚg
 *)(
AIC_SVR_BASE
 + (_x_ & 0x7c))

	)

32 
	#AIC_CTL_BASE
 0xFFFFF100

	)

33 
	#AIC_CTL_REG
(
_x_
è*(
vulÚg
 *)(
AIC_CTL_BASE
 + (_x_ & 0x7f))

	)

37 
	#AIC_SMR_FIQ
 0x00

	)

38 
	#AIC_SMR_SYSIRQ
 0x04

	)

39 
	#AIC_SMR_PIOA
 0x08

	)

40 
	#AIC_SMR_PIOB
 0x0ø

	)

41 
	#AIC_SMR_PIOC
 0x10

	)

42 
	#AIC_SMR_PIOD
 0x14

	)

43 
	#AIC_SMR_US0
 0x18

	)

44 
	#AIC_SMR_US1
 0x1ø

	)

45 
	#AIC_SMR_US2
 0x20

	)

46 
	#AIC_SMR_US3
 0x24

	)

47 
	#AIC_SMR_MCI
 0x28

	)

48 
	#AIC_SMR_UDP
 0x2ø

	)

49 
	#AIC_SMR_TWI
 0x30

	)

50 
	#AIC_SMR_SPI
 0x34

	)

51 
	#AIC_SMR_SSC0
 0x38

	)

52 
	#AIC_SMR_SSC1
 0x3ø

	)

53 
	#AIC_SMR_SSC2
 0x40

	)

54 
	#AIC_SMR_TC0
 0x44

	)

55 
	#AIC_SMR_TC1
 0x48

	)

56 
	#AIC_SMR_TC2
 0x4ø

	)

57 
	#AIC_SMR_TC3
 0x50

	)

58 
	#AIC_SMR_TC4
 0x54

	)

59 
	#AIC_SMR_TC5
 0x58

	)

60 
	#AIC_SMR_UHP
 0x5ø

	)

61 
	#AIC_SMR_EMAC
 0x60

	)

62 
	#AIC_SMR_IRQ0
 0x64

	)

63 
	#AIC_SMR_IRQ1
 0x68

	)

64 
	#AIC_SMR_IRQ2
 0x6ø

	)

65 
	#AIC_SMR_IRQ3
 0x70

	)

66 
	#AIC_SMR_IRQ4
 0x74

	)

67 
	#AIC_SMR_IRQ5
 0x78

	)

68 
	#AIC_SMR_IRQ6
 0x7ø

	)

71 
	#AIC_IVR
 0x00

	)

72 
	#AIC_FVR
 0x04

	)

73 
	#AIC_ISR
 0x08

	)

74 
	#AIC_IPR
 0x0C

	)

75 
	#AIC_IMR
 0x10

	)

76 
	#AIC_CISR
 0x14

	)

77 
	#AIC_IECR
 0x20

	)

78 
	#AIC_IDCR
 0x24

	)

79 
	#AIC_ICCR
 0x28

	)

80 
	#AIC_ISCR
 0x2C

	)

81 
	#AIC_EOICR
 0x30

	)

82 
	#AIC_SPU
 0x34

	)

83 
	#AIC_DCR
 0x38

	)

84 
	#AIC_FFER
 0x40

	)

85 
	#AIC_FFDR
 0x44

	)

86 
	#AIC_FFSR
 0x48

	)

90 
	#AIC_ISR_IRQID_MASK
 0x1à

	)

93 
	#AIC_CISR_IRQ
 
BIT1


	)

94 
	#AIC_CISR_FIQ
 
BIT0


	)

97 
	#AIC_DCR_GMSK
 
BIT1


	)

98 
	#AIC_DCR_PROT
 
BIT0


	)

101 
	#AIC_SMR_PRIOR
(
_x_
è((_x_ & 0x07è<< 0)

	)

102 
	#AIC_SMR_SRC_LVL_LOW
 (0 << 5è

	)

103 
	#AIC_SMR_SRC_EDGE_LOW
 (1 << 5)

	)

104 
	#AIC_SMR_SRC_LVL_HI
 (2 << 5)

	)

105 
	#AIC_SMR_SRC_EDGE_HI
 (3 << 5)

	)

110 
	#DBGU_BASE
 0xFFFFF200

	)

111 
	#DBGU_REG
(
_x_
è*(
vulÚg
 *)(
DBGU_BASE
 + _x_)

	)

114 
	#DBGU_CR
 0x00

	)

115 
	#DBGU_MR
 0x04

	)

116 
	#DBGU_IER
 0x08

	)

117 
	#DBGU_IDR
 0x0C

	)

118 
	#DBGU_IMR
 0x10

	)

119 
	#DBGU_CSR
 0x14

	)

120 
	#DBGU_RHR
 0x18

	)

121 
	#DBGU_THR
 0x1C

	)

122 
	#DBGU_BRGR
 0x20

	)

123 
	#DBGU_C1R
 0x40

	)

124 
	#DBGU_C2R
 0x44

	)

125 
	#DBGU_FNTR
 0x48

	)

130 
	#USART0_BASE
 0xFFFC0000

	)

131 
	#USART1_BASE
 0xFFFC4000

	)

132 
	#USART2_BASE
 0xFFFC8000

	)

133 
	#USART3_BASE
 0xFFFCC000

	)

143 
	#ST_BASE
 0xFFFFFD00

	)

144 
	#ST_REG
(
_x_
è*(
vulÚg
 *)(
ST_BASE
 + _x_)

	)

147 
	#ST_CR
 0x00

	)

148 
	#ST_PIMR
 0x04

	)

149 
	#ST_WDMR
 0x08

	)

150 
	#ST_RTMR
 0x0C

	)

151 
	#ST_SR
 0x10

	)

152 
	#ST_IER
 0x14

	)

153 
	#ST_IDR
 0x18

	)

154 
	#ST_IMR
 0x1C

	)

155 
	#ST_RTAR
 0x20

	)

156 
	#ST_CRTR
 0x24

	)

160 
	#ST_CR_WDRST
 
BIT0


	)

163 
	#ST_PIMR_PIV_MASK
 0x0000ffff

	)

166 
	#ST_WDMR_EXTEN
 
BIT17


	)

167 
	#ST_WDMR_RSTEN
 
BIT16


	)

168 
	#ST_WDMR_WDV_MASK
 0x0000fffà

	)

171 
	#ST_RTMR_RTPRES_MASK
 0x0000fffà

	)

177 
	#ST_SR_ALMS
 
BIT3


	)

178 
	#ST_SR_RTTINC
 
BIT2


	)

179 
	#ST_SR_WDOVF
 
BIT1


	)

180 
	#ST_SR_PITS
 
BIT0


	)

183 
	#ST_RTAR_ALMV_MASK
 0x000fffff

	)

186 
	#ST_CRTR_CRTV_MASK
 0x000fffff

	)

198 
	#PDC_RPR
 0x100

	)

199 
	#PDC_RCR
 0x104

	)

200 
	#PDC_TPR
 0x108

	)

201 
	#PDC_TCR
 0x10ø

	)

202 
	#PDC_RNPR
 0x110

	)

203 
	#PDC_RNCR
 0x114

	)

204 
	#PDC_TNPR
 0x118

	)

205 
	#PDC_TNCR
 0x11ø

	)

206 
	#PDC_PTCR
 0x120

	)

207 
	#PDC_PTSR
 0x124

	)

215 
	#PIOA_BASE
 0xFFFFF400

	)

216 
	#PIOA_REG
(
_x_
è*(
vulÚg
 *)(
PIOA_BASE
 + _x_)

	)

219 
	#PIOB_BASE
 0xFFFFF600

	)

220 
	#PIOB_REG
(
_x_
è*(
vulÚg
 *)(
PIOB_BASE
 + _x_)

	)

223 
	#PIOC_BASE
 0xFFFFF800

	)

224 
	#PIOC_REG
(
_x_
è*(
vulÚg
 *)(
PIOC_BASE
 + _x_)

	)

227 
	#PIOD_BASE
 0xFFFFFA00

	)

228 
	#PIOD_REG
(
_x_
è*(
vulÚg
 *)(
PIOD_BASE
 + _x_)

	)

233 
	#PMC_BASE
 0xFFFFFC00

	)

234 
	#PMC_REG
(
_x_
è*(
vulÚg
 *)(
PMC_BASE
 + _x_)

	)

239 
	#EMAC_BASE
 0xFFFBC000

	)

240 
	#EMAC_REG
(
_x_
è*(
vulÚg
 *)(
EMAC_BASE
 + _x_)

	)

245 
	#TC_BASE
 0xFFFA0000

	)

246 
	#TC_REG
(
_x_
è*(
vulÚg
 *)(
TC_BASE
 + 0x00 + _x_)

	)

247 
	#TC_TC0_REG
(
_x_
è*(
vulÚg
 *)(
TC_BASE
 + 0x00 + _x_)

	)

248 
	#TC_TC1_REG
(
_x_
è*(
vulÚg
 *)(
TC_BASE
 + 0x40 + _x_)

	)

249 
	#TC_TC2_REG
(
_x_
è*(
vulÚg
 *)(
TC_BASE
 + 0x80 + _x_)

	)

252 
	#TC_CCR
 0x00

	)

253 
	#TC_CMR
 0x04

	)

254 
	#TC_CV
 0x10

	)

255 
	#TC_RA
 0x14

	)

256 
	#TC_RB
 0x18

	)

257 
	#TC_RC
 0x1C

	)

258 
	#TC_SR
 0x20

	)

259 
	#TC_IER
 0x24

	)

260 
	#TC_IDR
 0x28

	)

261 
	#TC_IMR
 0x2C

	)

264 
	#TC_BCR
 0xc0

	)

265 
	#TC_BMR
 0xc4

	)

268 
	#TC_BCR_SYNC
 
BIT1


	)

271 
	#TC_BMR_TC0
(
_x_
è((_x_ & 0x3è<< 0è

	)

272 
	#TC_BMR_TC1
(
_x_
è((_x_ & 0x3è<< 2è

	)

273 
	#TC_BMR_TC2
(
_x_
è((_x_ & 0x3è<< 4è

	)

276 
	#TC_CCR_CLKEN
 
BIT0


	)

277 
	#TC_CCR_CLKDIS
 
BIT1


	)

278 
	#TC_CCR_SWTRG
 
BIT2


	)

281 
	#TC_CMR_TCCLKS
(
_x_
è((_x_ & 0x7è<< 0è

	)

282 
	#TC_CMR_CLKI
 
BIT3


	)

283 
	#TC_BURST
(
_x_
è((_x_ & 0x3 << 4è

	)

284 
	#TC_WAVE
 
BIT15


	)

287 
	#TC_CMR_LDBSTOP
 
BIT6


	)

288 
	#TC_CMR_LDBDIS
 
BIT7


	)

289 
	#TC_CMR_ETRGEDG
(
_x_
è((_x_ & 0x3è<< 8è

	)

290 
	#TC_CMR_ABETRG
 
BIT10


	)

291 
	#TC_CMR_CPCTRG
 
BIT14


	)

292 
	#TC_CMR_LDRA
(
_x_
è((_x_ & 0x3è<< 16è

	)

293 
	#TC_CMR_LDRB
(
_x_
è((_x_ & 0x3è<< 18è

	)

296 
	#TC_CMR_CPCSTOP
 
BIT6


	)

297 
	#TC_CMR_CPCDIS
 
BIT7


	)

298 
	#TC_CMR_EEVTEDG
(
_x_
è((_x_ & 0x3è<< 8è

	)

299 
	#TC_CMR_EEVT
(
_x_
è((_x_ & 0x3è<< 10è

	)

300 
	#TC_CMR_ENETRG
 
BIT12


	)

301 
	#TC_CMR_WAVESEL
(
_x_
è((_x_ & 0x3è<< 13è

	)

302 
	#TC_CMR_ACPA
(
_x_
è((_x_ & 0x3è<< 16è

	)

303 
	#TC_CMR_ACPC
(
_x_
è((_x_ & 0x3è<< 18è

	)

304 
	#TC_CMR_AEEVT
(
_x_
è((_x_ & 0x3è<< 20è

	)

305 
	#TC_CMR_ASWTRG
(
_x_
è((_x_ & 0x3è<< 22è

	)

306 
	#TC_CMR_BCPB
(
_x_
è((_x_ & 0x3è<< 24è

	)

307 
	#TC_CMR_BCPC
(
_x_
è((_x_ & 0x3è<< 26è

	)

308 
	#TC_CMR_BEEVT
(
_x_
è((_x_ & 0x3è<< 28è

	)

309 
	#TC_CMR_BSWTRG
(
_x_
è((_x_ & 0x3è<< 30è

	)

312 
	#TC_CV_MASK
 0xfffà

	)

315 
	#TC_SR_COVFS
 
BIT0


	)

316 
	#TC_SR_LOVRS
 
BIT1


	)

317 
	#TC_SR_CPAS
 
BIT2


	)

318 
	#TC_SR_CPBS
 
BIT3


	)

319 
	#TC_SR_CPCS
 
BIT4


	)

320 
	#TC_SR_LDRAS
 
BIT5


	)

321 
	#TC_SR_LDRBS
 
BIT6


	)

322 
	#TC_SR_ETRGS
 
BIT7


	)

323 
	#TC_SR_CLKSTA
 
BIT16


	)

324 
	#TC_SR_MTIOA
 
BIT17


	)

325 
	#TC_SR_MTIOB
 
BIT18


	)

330 
	#EBI_BASE
 0xFFFFFF60

	)

331 
	#EBI_REG
(
_x_
è*(
vulÚg
 *)(
EBI_BASE
 + _x_)

	)

336 
	#SMC_REG
(
_x_
è*(
vulÚg
 *)(
EBI_BASE
 + 0x10 + _x_)

	)

341 
	#SDRC_REG
(
_x_
è*(
vulÚg
 *)(
EBI_BASE
 + 0x30 + _x_)

	)

	@src/lib/libcpu/arm/at91rm9200/include/at91rm9200_dbgu.h

11 #iâdeà
__AT91RM9200_DBGU_H__


12 
	#__AT91RM9200_DBGU_H__


	)

14 
	~"bs.h
"

17 
	#DBGU_CR
 0x00

	)

18 
	#DBGU_MR
 0x04

	)

19 
	#DBGU_IER
 0x08

	)

20 
	#DBGU_IDR
 0x0C

	)

21 
	#DBGU_IMR
 0x10

	)

22 
	#DBGU_SR
 0x14

	)

23 
	#DBGU_RHR
 0x18

	)

24 
	#DBGU_THR
 0x1C

	)

25 
	#DBGU_BRGR
 0x20

	)

26 
	#DBGU_C1R
 0x40

	)

27 
	#DBGU_C2R
 0x44

	)

28 
	#DBGU_FNTR
 0x48

	)

32 
	#DBGU_CR_RSTRX
 
BIT2


	)

33 
	#DBGU_CR_RSTTX
 
BIT3


	)

34 
	#DBGU_CR_RXEN
 
BIT4


	)

35 
	#DBGU_CR_RXDIS
 
BIT5


	)

36 
	#DBGU_CR_TXEN
 
BIT6


	)

37 
	#DBGU_CR_TXDIS
 
BIT7


	)

38 
	#DBGU_CR_RSTSTA
 
BIT8


	)

41 
	#DBGU_MR_PAR_EVEN
 (0x0 << 9è

	)

42 
	#DBGU_MR_PAR_ODD
 (0x1 << 9è

	)

43 
	#DBGU_MR_PAR_SPACE
 (0x2 << 9è

	)

44 
	#DBGU_MR_PAR_MARK
 (0x3 << 9è

	)

45 
	#DBGU_MR_PAR_NONE
 (0x4 << 9è

	)

46 
	#DBGU_MR_PAR_MDROP
 (0x6 << 9è

	)

47 
	#DBGU_MR_CHMODE_NORM
 (0x0 << 14è

	)

48 
	#DBGU_MR_CHMODE_AUTO
 (0x1 << 14è

	)

49 
	#DBGU_MR_CHMODE_LOC
 (0x2 << 14è

	)

50 
	#DBGU_MR_CHMODE_REM
 (0x3 << 14è

	)

56 
	#DBGU_INT_RXRDY
 
BIT0


	)

57 
	#DBGU_INT_TXRDY
 
BIT1


	)

58 
	#DBGU_INT_ENDRX
 
BIT3


	)

60 
	#DBGU_INT_OVRE
 
BIT5


	)

61 
	#DBGU_INT_FRAME
 
BIT6


	)

62 
	#DBGU_INT_PARE
 
BIT7


	)

63 
	#DBGU_INT_TXEMPTY
 
BIT9


	)

64 
	#DBGU_INT_TXBUFE
 
BIT11


	)

65 
	#DBGU_INT_RXBUFF
 
BIT12


	)

66 
	#DBGU_INT_COMM_TX
 
BIT30


	)

67 
	#DBGU_INT_COMM_RX
 
BIT31


	)

68 
	#DBGU_INT_ALL
 0xC0001AFB

	)

71 
	#DBGU_FNTR_NTRST
 
BIT0


	)

74 vÞ©
ut32_t
 
	mü
;

75 vÞ©
ut32_t
 
	mmr
;

76 vÞ©
ut32_t
 
	mr
;

77 vÞ©
ut32_t
 
	midr
;

78 vÞ©
ut32_t
 
	mimr
;

79 vÞ©
ut32_t
 
	m¤
;

80 vÞ©
ut32_t
 
	mrhr
;

81 vÞ©
ut32_t
 
	mthr
;

82 vÞ©
ut32_t
 
	mbrgr
;

83 vÞ©
ut32_t
 
	m_»s0
[7];

84 vÞ©
ut32_t
 
	mcidr
;

85 vÞ©
ut32_t
 
	mexid
;

86 vÞ©
ut32_t
 
	mâr
;

87 } 
	t©91rm9200_dbgu_»gs_t
;

	@src/lib/libcpu/arm/at91rm9200/include/at91rm9200_emac.h

11 #iâdeà
__AT91RM9200_EMAC_H__


12 
	#__AT91RM9200_EMAC_H__


	)

14 
	~<bs.h
>

17 
	#EMAC_CTL
 0x00

	)

18 
	#EMAC_CFG
 0x04

	)

19 
	#EMAC_SR
 0x08

	)

20 
	#EMAC_TAR
 0x0C

	)

21 
	#EMAC_TCR
 0x10

	)

22 
	#EMAC_TSR
 0x14

	)

23 
	#EMAC_RBQP
 0x18

	)

24 
	#EMAC_RSR
 0x20

	)

25 
	#EMAC_ISR
 0x24

	)

26 
	#EMAC_IER
 0x28

	)

27 
	#EMAC_IDR
 0x2C

	)

28 
	#EMAC_IMR
 0x30

	)

29 
	#EMAC_MAN
 0x34

	)

30 
	#EMAC_FRA
 0x40

	)

31 
	#EMAC_SCOL
 0x44

	)

32 
	#EMAC_MCOL
 0x48

	)

33 
	#EMAC_OK
 0x4C

	)

34 
	#EMAC_SEQE
 0x50

	)

35 
	#EMAC_ALE
 0x54

	)

36 
	#EMAC_DTE
 0x58

	)

37 
	#EMAC_LCOL
 0x5C

	)

38 
	#EMAC_ECOL
 0x60

	)

39 
	#EMAC_CSE
 0x64

	)

40 
	#EMAC_TUE
 0x68

	)

41 
	#EMAC_CDE
 0x6C

	)

42 
	#EMAC_ELR
 0x70

	)

43 
	#EMAC_RJB
 0x74

	)

44 
	#EMAC_USF
 0x78

	)

45 
	#EMAC_SQEE
 0x7C

	)

46 
	#EMAC_DRFC
 0x80

	)

47 
	#EMAC_HSH
 0x90

	)

48 
	#EMAC_HSL
 0x94

	)

49 
	#EMAC_SA1L
 0x98

	)

50 
	#EMAC_SA1H
 0x9C

	)

51 
	#EMAC_SA2L
 0xA0

	)

52 
	#EMAC_SA2H
 0xA4

	)

53 
	#EMAC_SA3L
 0xA8

	)

54 
	#EMAC_SA3H
 0xAC

	)

55 
	#EMAC_SA4L
 0xB0

	)

56 
	#EMAC_SA4H
 0xB4

	)

59 
	#EMAC_CTL_LB
 
BIT0


	)

60 
	#EMAC_CTL_LBL
 
BIT1


	)

61 
	#EMAC_CTL_RE
 
BIT2


	)

62 
	#EMAC_CTL_TE
 
BIT3


	)

63 
	#EMAC_CTL_MPE
 
BIT4


	)

64 
	#EMAC_CTL_CSR
 
BIT5


	)

65 
	#EMAC_CTL_ISR
 
BIT6


	)

66 
	#EMAC_CTL_WES
 
BIT7


	)

67 
	#EMAC_CTL_BP
 
BIT8


	)

70 
	#EMAC_CFG_SPD
 
BIT0


	)

71 
	#EMAC_CFG_FD
 
BIT1


	)

72 
	#EMAC_CFG_BR
 
BIT2


	)

73 
	#EMAC_CFG_CAF
 
BIT4


	)

74 
	#EMAC_CFG_NBC
 
BIT5


	)

75 
	#EMAC_CFG_MTI
 
BIT6


	)

76 
	#EMAC_CFG_UNI
 
BIT7


	)

77 
	#EMAC_CFG_BIG
 
BIT8


	)

78 
	#EMAC_CFG_EAE
 
BIT9


	)

79 
	#EMAC_CFG_CLK_8
 (0 << 10è

	)

80 
	#EMAC_CFG_CLK_16
 (1 << 10è

	)

81 
	#EMAC_CFG_CLK_32
 (2 << 10è

	)

82 
	#EMAC_CFG_CLK_64
 (3 << 10è

	)

83 
	#EMAC_CFG_CLK_MASK
 (3 << 10è

	)

84 
	#EMAC_CFG_RTY
 
BIT12


	)

85 
	#EMAC_CFG_RMII
 
BIT13


	)

88 
	#EMAC_LINK
 
BIT0


	)

89 
	#EMAC_MDIO
 
BIT1


	)

90 
	#EMAC_IDLE
 
BIT2


	)

93 
	#EMAC_TCR_LEN
(
_x_
è((_x_ & 0x7FFè<< 0è

	)

94 
	#EMAC_TCR_NCRC
 
BIT15


	)

97 
	#EMAC_TSR_OVR
 
BIT0


	)

98 
	#EMAC_TSR_COL
 
BIT1


	)

99 
	#EMAC_TSR_RLE
 
BIT2


	)

100 
	#EMAC_TSR_TXIDLE
 
BIT3


	)

101 
	#EMAC_TSR_BNQ
 
BIT4


	)

102 
	#EMAC_TSR_COMP
 
BIT5


	)

103 
	#EMAC_TSR_UND
 
BIT6


	)

106 
	#EMAC_RSR_BNA
 
BIT0


	)

107 
	#EMAC_RSR_REC
 
BIT1


	)

108 
	#EMAC_RSR_OVR
 
BIT2


	)

116 
	#EMAC_INT_DONE
 
BIT0


	)

117 
	#EMAC_INT_RCOM
 
BIT1


	)

118 
	#EMAC_INT_RBNA
 
BIT2


	)

119 
	#EMAC_INT_TOVR
 
BIT3


	)

120 
	#EMAC_INT_TUND
 
BIT4


	)

121 
	#EMAC_INT_RTRY
 
BIT5


	)

122 
	#EMAC_INT_TBRE
 
BIT6


	)

123 
	#EMAC_INT_TCOM
 
BIT7


	)

124 
	#EMAC_INT_TIDLE
 
BIT8


	)

125 
	#EMAC_INT_LINK
 
BIT9


	)

126 
	#EMAC_INT_ROVR
 
BIT10


	)

127 
	#EMAC_INT_ABT
 
BIT11


	)

130 
	#EMAC_MAN_DATA
(
_x_
è((_x_ & 0xFFFFè<< 0)

	)

131 
	#EMAC_MAN_CODE
 (0x2 << 16è

	)

132 
	#EMAC_MAN_REGA
(
_x_
è((_x_ & 0x1Fè<< 18è

	)

133 
	#EMAC_MAN_PHYA
(
_x_
è((_x_ & 0x1Fè<< 23è

	)

134 
	#EMAC_MAN_WRITE
 (0x1 << 28è

	)

135 
	#EMAC_MAN_READ
 (0x2 << 28è

	)

136 
	#EMAC_MAN_HIGH
 
BIT30


	)

137 
	#EMAC_MAN_LOW
 
BIT31


	)

143 
	#RXBUF_ADD_BASE_MASK
 0xfffffffø

	)

144 
	#RXBUF_ADD_WRAP
 
BIT1


	)

145 
	#RXBUF_ADD_OWNED
 
BIT0


	)

148 
	#RXBUF_STAT_BCAST
 
BIT31


	)

149 
	#RXBUF_STAT_MULTI
 
BIT30


	)

150 
	#RXBUF_STAT_UNI
 
BIT29


	)

151 
	#RXBUF_STAT_EXT
 
BIT28


	)

152 
	#RXBUF_STAT_UNK
 
BIT27


	)

153 
	#RXBUF_STAT_LOC1
 
BIT26


	)

154 
	#RXBUF_STAT_LOC2
 
BIT25


	)

155 
	#RXBUF_STAT_LOC3
 
BIT24


	)

156 
	#RXBUF_STAT_LOC4
 
BIT23


	)

157 
	#RXBUF_STAT_LEN_MASK
 0x7fà

	)

	@src/lib/libcpu/arm/at91rm9200/include/at91rm9200_gpio.h

11 #iâdeà
AT91RM9200_GPIO_H


12 
	#AT91RM9200_GPIO_H


	)

14 
	~<bs.h
>

17 
	#PIO_PER
 0x00

	)

18 
	#PIO_PDR
 0x04

	)

19 
	#PIO_PSR
 0x08

	)

20 
	#PIO_OER
 0x10

	)

21 
	#PIO_ODR
 0x14

	)

22 
	#PIO_OSR
 0x18

	)

23 
	#PIO_IFER
 0x20

	)

24 
	#PIO_IFDR
 0x24

	)

25 
	#PIO_IFSR
 0x28

	)

26 
	#PIO_SODR
 0x30

	)

27 
	#PIO_CODR
 0x34

	)

28 
	#PIO_ODSR
 0x38

	)

29 
	#PIO_PDSR
 0x3ø

	)

30 
	#PIO_IER
 0x40

	)

31 
	#PIO_IDR
 0x44

	)

32 
	#PIO_IMR
 0x48

	)

33 
	#PIO_ISR
 0x4ø

	)

34 
	#PIO_MDER
 0x50

	)

35 
	#PIO_MDDR
 0x54

	)

36 
	#PIO_MDSR
 0x58

	)

37 
	#PIO_PUDR
 0x60

	)

38 
	#PIO_PUER
 0x64

	)

39 
	#PIO_PUSR
 0x68

	)

40 
	#PIO_ASR
 0x70

	)

41 
	#PIO_BSR
 0x74

	)

42 
	#PIO_ABSR
 0x78

	)

43 
	#PIO_OWER
 0xA0

	)

44 
	#PIO_OWDR
 0xA4

	)

45 
	#PIO_OWSR
 0xA8

	)

59 
	#GPIO_0
 
BIT0


	)

60 
	#GPIO_1
 
BIT1


	)

61 
	#GPIO_2
 
BIT2


	)

62 
	#GPIO_3
 
BIT3


	)

63 
	#GPIO_4
 
BIT4


	)

64 
	#GPIO_5
 
BIT5


	)

65 
	#GPIO_6
 
BIT6


	)

66 
	#GPIO_7
 
BIT7


	)

67 
	#GPIO_8
 
BIT8


	)

68 
	#GPIO_9
 
BIT9


	)

69 
	#GPIO_10
 
BIT10


	)

70 
	#GPIO_11
 
BIT11


	)

71 
	#GPIO_12
 
BIT12


	)

72 
	#GPIO_13
 
BIT13


	)

73 
	#GPIO_14
 
BIT14


	)

74 
	#GPIO_15
 
BIT15


	)

75 
	#GPIO_16
 
BIT16


	)

76 
	#GPIO_17
 
BIT17


	)

77 
	#GPIO_18
 
BIT18


	)

78 
	#GPIO_19
 
BIT19


	)

79 
	#GPIO_20
 
BIT20


	)

80 
	#GPIO_21
 
BIT21


	)

81 
	#GPIO_22
 
BIT22


	)

82 
	#GPIO_23
 
BIT23


	)

83 
	#GPIO_24
 
BIT24


	)

84 
	#GPIO_25
 
BIT25


	)

85 
	#GPIO_26
 
BIT26


	)

86 
	#GPIO_27
 
BIT27


	)

87 
	#GPIO_28
 
BIT28


	)

88 
	#GPIO_29
 
BIT29


	)

89 
	#GPIO_30
 
BIT30


	)

90 
	#GPIO_31
 
BIT31


	)

92 
	#GPIO_32
 
BIT0


	)

93 
	#GPIO_33
 
BIT1


	)

94 
	#GPIO_34
 
BIT2


	)

95 
	#GPIO_35
 
BIT3


	)

96 
	#GPIO_36
 
BIT4


	)

97 
	#GPIO_37
 
BIT5


	)

98 
	#GPIO_38
 
BIT6


	)

99 
	#GPIO_39
 
BIT7


	)

100 
	#GPIO_40
 
BIT8


	)

101 
	#GPIO_41
 
BIT9


	)

102 
	#GPIO_42
 
BIT10


	)

103 
	#GPIO_43
 
BIT11


	)

104 
	#GPIO_44
 
BIT12


	)

105 
	#GPIO_45
 
BIT13


	)

106 
	#GPIO_46
 
BIT14


	)

107 
	#GPIO_47
 
BIT15


	)

108 
	#GPIO_48
 
BIT16


	)

109 
	#GPIO_49
 
BIT17


	)

110 
	#GPIO_50
 
BIT18


	)

111 
	#GPIO_51
 
BIT19


	)

112 
	#GPIO_52
 
BIT20


	)

113 
	#GPIO_53
 
BIT21


	)

114 
	#GPIO_54
 
BIT22


	)

115 
	#GPIO_55
 
BIT23


	)

116 
	#GPIO_56
 
BIT24


	)

117 
	#GPIO_57
 
BIT25


	)

118 
	#GPIO_58
 
BIT26


	)

119 
	#GPIO_59
 
BIT27


	)

120 
	#GPIO_60
 
BIT28


	)

121 
	#GPIO_61
 
BIT29


	)

122 
	#GPIO_62
 
BIT30


	)

123 
	#GPIO_63
 
BIT31


	)

125 
	#GPIO_64
 
BIT0


	)

126 
	#GPIO_65
 
BIT1


	)

127 
	#GPIO_66
 
BIT2


	)

128 
	#GPIO_67
 
BIT3


	)

129 
	#GPIO_68
 
BIT4


	)

130 
	#GPIO_69
 
BIT5


	)

131 
	#GPIO_70
 
BIT6


	)

132 
	#GPIO_71
 
BIT7


	)

133 
	#GPIO_72
 
BIT8


	)

134 
	#GPIO_73
 
BIT9


	)

135 
	#GPIO_74
 
BIT10


	)

136 
	#GPIO_75
 
BIT11


	)

137 
	#GPIO_76
 
BIT12


	)

138 
	#GPIO_77
 
BIT13


	)

139 
	#GPIO_78
 
BIT14


	)

140 
	#GPIO_79
 
BIT15


	)

141 
	#GPIO_80
 
BIT16


	)

142 
	#GPIO_81
 
BIT17


	)

143 
	#GPIO_82
 
BIT18


	)

144 
	#GPIO_83
 
BIT19


	)

145 
	#GPIO_84
 
BIT20


	)

146 
	#GPIO_85
 
BIT21


	)

147 
	#GPIO_86
 
BIT22


	)

148 
	#GPIO_87
 
BIT23


	)

149 
	#GPIO_88
 
BIT24


	)

150 
	#GPIO_89
 
BIT25


	)

151 
	#GPIO_90
 
BIT26


	)

152 
	#GPIO_91
 
BIT27


	)

153 
	#GPIO_92
 
BIT28


	)

154 
	#GPIO_93
 
BIT29


	)

155 
	#GPIO_94
 
BIT30


	)

156 
	#GPIO_95
 
BIT31


	)

158 
	#GPIO_96
 
BIT0


	)

159 
	#GPIO_97
 
BIT1


	)

160 
	#GPIO_98
 
BIT2


	)

161 
	#GPIO_99
 
BIT3


	)

162 
	#GPIO_100
 
BIT4


	)

163 
	#GPIO_101
 
BIT5


	)

164 
	#GPIO_102
 
BIT6


	)

165 
	#GPIO_103
 
BIT7


	)

166 
	#GPIO_104
 
BIT8


	)

167 
	#GPIO_105
 
BIT9


	)

168 
	#GPIO_106
 
BIT10


	)

169 
	#GPIO_107
 
BIT11


	)

170 
	#GPIO_108
 
BIT12


	)

171 
	#GPIO_109
 
BIT13


	)

172 
	#GPIO_110
 
BIT14


	)

173 
	#GPIO_111
 
BIT15


	)

174 
	#GPIO_112
 
BIT16


	)

175 
	#GPIO_113
 
BIT17


	)

176 
	#GPIO_114
 
BIT18


	)

177 
	#GPIO_115
 
BIT19


	)

178 
	#GPIO_116
 
BIT20


	)

179 
	#GPIO_117
 
BIT21


	)

180 
	#GPIO_118
 
BIT22


	)

181 
	#GPIO_119
 
BIT23


	)

182 
	#GPIO_120
 
BIT24


	)

183 
	#GPIO_121
 
BIT25


	)

184 
	#GPIO_122
 
BIT26


	)

185 
	#GPIO_123
 
BIT27


	)

186 
	#GPIO_124
 
BIT28


	)

187 
	#GPIO_125
 
BIT29


	)

188 
	#GPIO_126
 
BIT30


	)

189 
	#GPIO_127
 
BIT31


	)

197 
	#PIOA_ASR_MISO
 
BIT0


	)

198 
	#PIOA_ASR_MOSI
 
BIT1


	)

199 
	#PIOA_ASR_SPCK
 
BIT2


	)

200 
	#PIOA_ASR_NPCS0
 
BIT3


	)

201 
	#PIOA_ASR_NPCS1
 
BIT4


	)

202 
	#PIOA_ASR_NPCS2
 
BIT5


	)

203 
	#PIOA_ASR_NPCS3
 
BIT6


	)

204 
	#PIOA_ASR_ETXCK
 
BIT7


	)

205 
	#PIOA_ASR_ETXEN
 
BIT8


	)

206 
	#PIOA_ASR_ETX0
 
BIT9


	)

207 
	#PIOA_ASR_ETX1
 
BIT10


	)

208 
	#PIOA_ASR_ECRS
 
BIT11


	)

209 
	#PIOA_ASR_ERX0
 
BIT12


	)

210 
	#PIOA_ASR_ERX1
 
BIT13


	)

211 
	#PIOA_ASR_ERXER
 
BIT14


	)

212 
	#PIOA_ASR_EMDC
 
BIT15


	)

213 
	#PIOA_ASR_EMDIO
 
BIT16


	)

214 
	#PIOA_ASR_TXD0
 
BIT17


	)

215 
	#PIOA_ASR_RXD0
 
BIT18


	)

216 
	#PIOA_ASR_SCK0
 
BIT19


	)

217 
	#PIOA_ASR_CTS0
 
BIT20


	)

218 
	#PIOA_ASR_RTS0
 
BIT21


	)

219 
	#PIOA_ASR_RXD2
 
BIT22


	)

220 
	#PIOA_ASR_TXD2
 
BIT23


	)

221 
	#PIOA_ASR_SCK2
 
BIT24


	)

222 
	#PIOA_ASR_TWD
 
BIT25


	)

223 
	#PIOA_ASR_TWCK
 
BIT26


	)

224 
	#PIOA_ASR_MCCK
 
BIT27


	)

225 
	#PIOA_ASR_MCCDA
 
BIT28


	)

226 
	#PIOA_ASR_MCDA0
 
BIT29


	)

227 
	#PIOA_ASR_DRXD
 
BIT30


	)

228 
	#PIOA_ASR_DTXD
 
BIT31


	)

231 
	#PIOA_BSR_PCK3
 
BIT0


	)

232 
	#PIOA_BSR_PCK0
 
BIT1


	)

233 
	#PIOA_BSR_IRQ4
 
BIT2


	)

234 
	#PIOA_BSR_IRQ5
 
BIT3


	)

236 
	#PIOA_BSR_TXD3
 
BIT5


	)

237 
	#PIOA_BSR_RXD3
 
BIT6


	)

238 
	#PIOA_BSR_PCK2
 
BIT7


	)

239 
	#PIOA_BSR_MCCDB
 
BIT8


	)

240 
	#PIOA_BSR_MCDB0
 
BIT9


	)

241 
	#PIOA_BSR_MCDB1
 
BIT10


	)

242 
	#PIOA_BSR_MCDB2
 
BIT11


	)

243 
	#PIOA_BSR_MCDB3
 
BIT12


	)

244 
	#PIOA_BSR_TCLK0
 
BIT13


	)

245 
	#PIOA_BSR_TCLK1
 
BIT14


	)

246 
	#PIOA_BSR_TCLK2
 
BIT15


	)

247 
	#PIOA_BSR_IRQ6
 
BIT16


	)

248 
	#PIOA_BSR_TIOA0
 
BIT17


	)

249 
	#PIOA_BSR_TIOB0
 
BIT18


	)

250 
	#PIOA_BSR_TIOA1
 
BIT19


	)

251 
	#PIOA_BSR_TIOB1
 
BIT20


	)

252 
	#PIOA_BSR_TIOA2
 
BIT21


	)

253 
	#PIOA_BSR_TIOB2
 
BIT22


	)

254 
	#PIOA_BSR_IRQ3
 
BIT23


	)

255 
	#PIOA_BSR_PCK1
 
BIT24


	)

256 
	#PIOA_BSR_IRQ2
 
BIT25


	)

257 
	#PIOA_BSR_IRQ1
 
BIT26


	)

258 
	#PIOA_BSR_TCLK3
 
BIT27


	)

259 
	#PIOA_BSR_TCLK4
 
BIT28


	)

260 
	#PIOA_BSR_TCLK5
 
BIT29


	)

261 
	#PIOA_BSR_CTS2
 
BIT30


	)

262 
	#PIOA_BSR_RTS2
 
BIT31


	)

265 
	#PIOB_ASR_TF0
 
BIT0


	)

266 
	#PIOB_ASR_TK0
 
BIT1


	)

267 
	#PIOB_ASR_TD0
 
BIT2


	)

268 
	#PIOB_ASR_RD0
 
BIT3


	)

269 
	#PIOB_ASR_RK0
 
BIT4


	)

270 
	#PIOB_ASR_RF0
 
BIT5


	)

271 
	#PIOB_ASR_TF1
 
BIT6


	)

272 
	#PIOB_ASR_TK1
 
BIT7


	)

273 
	#PIOB_ASR_TD1
 
BIT8


	)

274 
	#PIOB_ASR_RD1
 
BIT9


	)

275 
	#PIOB_ASR_RK1
 
BIT10


	)

276 
	#PIOB_ASR_RF1
 
BIT11


	)

277 
	#PIOB_ASR_TF2
 
BIT12


	)

278 
	#PIOB_ASR_TK2
 
BIT13


	)

279 
	#PIOB_ASR_TD2
 
BIT14


	)

280 
	#PIOB_ASR_RD2
 
BIT15


	)

281 
	#PIOB_ASR_RK2
 
BIT16


	)

282 
	#PIOB_ASR_RF2
 
BIT17


	)

283 
	#PIOB_ASR_RI1
 
BIT18


	)

284 
	#PIOB_ASR_DTR1
 
BIT19


	)

285 
	#PIOB_ASR_TXD1
 
BIT20


	)

286 
	#PIOB_ASR_RXD1
 
BIT21


	)

287 
	#PIOB_ASR_SCK1
 
BIT22


	)

288 
	#PIOB_ASR_DCD1
 
BIT23


	)

289 
	#PIOB_ASR_CTS1
 
BIT24


	)

290 
	#PIOB_ASR_DSR1
 
BIT25


	)

291 
	#PIOB_ASR_RTS1
 
BIT26


	)

292 
	#PIOB_ASR_PCK0
 
BIT27


	)

293 
	#PIOB_ASR_FIQ
 
BIT28


	)

294 
	#PIOB_ASR_IRQ0
 
BIT29


	)

297 
	#PIOB_BSR_RTS3
 
BIT0


	)

298 
	#PIOB_BSR_CTS3
 
BIT1


	)

299 
	#PIOB_BSR_SCK3
 
BIT2


	)

300 
	#PIOB_BSR_MCDA1
 
BIT3


	)

301 
	#PIOB_BSR_MCDA2
 
BIT4


	)

302 
	#PIOB_BSR_MCDA3
 
BIT5


	)

303 
	#PIOB_BSR_TIOA3
 
BIT6


	)

304 
	#PIOB_BSR_TIOB3
 
BIT7


	)

305 
	#PIOB_BSR_TIOA4
 
BIT8


	)

306 
	#PIOB_BSR_TIOB4
 
BIT9


	)

307 
	#PIOB_BSR_TIOA5
 
BIT10


	)

308 
	#PIOB_BSR_TIOB5
 
BIT11


	)

309 
	#PIOB_BSR_ETX2
 
BIT12


	)

310 
	#PIOB_BSR_ETX3
 
BIT13


	)

311 
	#PIOB_BSR_ETXER
 
BIT14


	)

312 
	#PIOB_BSR_ERX2
 
BIT15


	)

313 
	#PIOB_BSR_ERX3
 
BIT16


	)

314 
	#PIOB_BSR_ERXDV
 
BIT17


	)

315 
	#PIOB_BSR_ECOL
 
BIT18


	)

316 
	#PIOB_BSR_ERXCK
 
BIT19


	)

317 
	#PIOB_BSR_EF100
 
BIT25


	)

320 
	#PIOC_ASR_BFCK
 
BIT0


	)

321 
	#PIOC_ASR_BFRDY
 
BIT1


	)

322 
	#PIOC_ASR_BFAVD
 
BIT2


	)

323 
	#PIOC_ASR_BFBAA
 
BIT3


	)

324 
	#PIOC_ASR_BFOE
 
BIT4


	)

325 
	#PIOC_ASR_BFWE
 
BIT5


	)

326 
	#PIOC_ASR_NWAIT
 
BIT6


	)

327 
	#PIOC_ASR_A23
 
BIT7


	)

328 
	#PIOC_ASR_A24
 
BIT8


	)

329 
	#PIOC_ASR_A25
 
BIT9


	)

330 
	#PIOC_ASR_NCS4
 
BIT10


	)

331 
	#PIOC_ASR_NCS5
 
BIT11


	)

332 
	#PIOC_ASR_NCS6
 
BIT12


	)

333 
	#PIOC_ASR_NCS7
 
BIT13


	)

334 
	#PIOC_ASR_D16
 
BIT16


	)

335 
	#PIOC_ASR_D17
 
BIT17


	)

336 
	#PIOC_ASR_D18
 
BIT18


	)

337 
	#PIOC_ASR_D19
 
BIT19


	)

338 
	#PIOC_ASR_D20
 
BIT20


	)

339 
	#PIOC_ASR_D21
 
BIT21


	)

340 
	#PIOC_ASR_D22
 
BIT22


	)

341 
	#PIOC_ASR_D23
 
BIT23


	)

342 
	#PIOC_ASR_D24
 
BIT24


	)

343 
	#PIOC_ASR_D25
 
BIT25


	)

344 
	#PIOC_ASR_D26
 
BIT26


	)

345 
	#PIOC_ASR_D27
 
BIT27


	)

346 
	#PIOC_ASR_D28
 
BIT28


	)

347 
	#PIOC_ASR_D29
 
BIT29


	)

348 
	#PIOC_ASR_D30
 
BIT30


	)

349 
	#PIOC_ASR_D31
 
BIT31


	)

354 
	#PIOD_ASR_ETX0
 
BIT0


	)

355 
	#PIOD_ASR_ETX1
 
BIT1


	)

356 
	#PIOD_ASR_ETX2
 
BIT2


	)

357 
	#PIOD_ASR_ETX3
 
BIT3


	)

358 
	#PIOD_ASR_ETXEN
 
BIT4


	)

359 
	#PIOD_ASR_ETXER
 
BIT5


	)

360 
	#PIOD_ASR_DTXD
 
BIT6


	)

361 
	#PIOD_ASR_PCK0
 
BIT7


	)

362 
	#PIOD_ASR_PCK1
 
BIT8


	)

363 
	#PIOD_ASR_PCK2
 
BIT9


	)

364 
	#PIOD_ASR_PCK3
 
BIT10


	)

365 
	#PIOD_ASR_TD0
 
BIT15


	)

366 
	#PIOD_ASR_TD1
 
BIT16


	)

367 
	#PIOD_ASR_TD2
 
BIT17


	)

368 
	#PIOD_ASR_NPCS1
 
BIT18


	)

369 
	#PIOD_ASR_NPCS2
 
BIT19


	)

370 
	#PIOD_ASR_NPCS3
 
BIT20


	)

371 
	#PIOD_ASR_RTS0
 
BIT21


	)

372 
	#PIOD_ASR_RTS1
 
BIT22


	)

373 
	#PIOD_ASR_RTS2
 
BIT23


	)

374 
	#PIOD_ASR_RTS3
 
BIT24


	)

375 
	#PIOD_ASR_DTR1
 
BIT25


	)

379 
	#PIOC_ASR_TSYNC
 
BIT7


	)

380 
	#PIOC_ASR_TCLK
 
BIT8


	)

381 
	#PIOC_ASR_TPS0
 
BIT9


	)

382 
	#PIOC_ASR_TPS1
 
BIT10


	)

383 
	#PIOC_ASR_TPS2
 
BIT11


	)

384 
	#PIOC_ASR_TPK0
 
BIT12


	)

385 
	#PIOC_ASR_TPK1
 
BIT13


	)

386 
	#PIOC_ASR_TPK2
 
BIT14


	)

387 
	#PIOC_ASR_TPK3
 
BIT15


	)

388 
	#PIOC_ASR_TPK4
 
BIT16


	)

389 
	#PIOC_ASR_TPK5
 
BIT17


	)

390 
	#PIOC_ASR_TPK6
 
BIT18


	)

391 
	#PIOC_ASR_TPK7
 
BIT19


	)

392 
	#PIOC_ASR_TPK8
 
BIT20


	)

393 
	#PIOC_ASR_TPK9
 
BIT21


	)

394 
	#PIOC_ASR_TPK10
 
BIT22


	)

395 
	#PIOC_ASR_TPK11
 
BIT23


	)

396 
	#PIOC_ASR_TPK12
 
BIT24


	)

397 
	#PIOC_ASR_TPK13
 
BIT25


	)

398 
	#PIOC_ASR_TPK14
 
BIT26


	)

399 
	#PIOC_ASR_TPK15
 
BIT27


	)

	@src/lib/libcpu/arm/at91rm9200/include/at91rm9200_mem.h

11 #iâdeà
AT91RM9200_MEM_H


12 
	#AT91RM9200_MEM_H


	)

17 
	#EBI_CSA
 0x00

	)

18 
	#EBI_CFGR
 0x04

	)

22 
	#EBI_CSA_CS4_CF
 
BIT4


	)

23 
	#EBI_CSA_CS3_SMM
 
BIT3


	)

24 
	#EBI_CSA_CS1_SDRAM
 
BIT1


	)

25 
	#EBI_CSA_CS0_BF
 
BIT0


	)

28 
	#EBI_CFGR_DBPU
 
BIT0


	)

33 
	#SMC_CSR0
 0x00

	)

34 
	#SMC_CSR1
 0x04

	)

35 
	#SMC_CSR2
 0x08

	)

36 
	#SMC_CSR3
 0x0C

	)

37 
	#SMC_CSR4
 0x10

	)

38 
	#SMC_CSR5
 0x14

	)

39 
	#SMC_CSR6
 0x18

	)

40 
	#SMC_CSR7
 0x1C

	)

44 
	#SMC_CSR_RWHOLD
(
_x_
è((_x_ & 0x3è<< 28è

	)

45 
	#SMC_CSR_RWSETUP
(
_x_
è((_x_ & 0x3è<< 24è

	)

46 
	#SMC_CSR_ACSS_0
 (0 << 16è

	)

47 
	#SMC_CSR_ACSS_1
 (1 << 16è

	)

48 
	#SMC_CSR_ACSS_2
 (2 << 16è

	)

49 
	#SMC_CSR_ACSS_3
 (3 << 16è

	)

50 
	#SMC_CSR_DRP_NORMAL
 0

	)

51 
	#SMC_CSR_DRP_EARLY
 
BIT15


	)

52 
	#SMC_CSR_DBW_16
 (1 << 13è

	)

53 
	#SMC_CSR_DBW_8
 (2 << 13è

	)

54 
	#SMC_CSR_BAT_16_1
 0

	)

55 
	#SMC_CSR_BAT_16_2
 
BIT12


	)

56 
	#SMC_CSR_TDF
(
_x_
è((_x_ & 0xfè<< 8è

	)

57 
	#SMC_CSR_WSEN
 
BIT7


	)

58 
	#SMC_CSR_NWS
(
_x_
è((_x_ & 0x7fè<< 0è

	)

63 
	#SDRC_MR
 0x00

	)

64 
	#SDRC_TR
 0x04

	)

65 
	#SDRC_CR
 0x08

	)

66 
	#SDRC_SRR
 0x0C

	)

67 
	#SDRC_LPR
 0x10

	)

68 
	#SDRC_IER
 0x14

	)

69 
	#SDRC_IDR
 0x18

	)

70 
	#SDRC_IMR
 0x1C

	)

71 
	#SDRC_ISR
 0x20

	)

75 
	#SDRC_MR_DBW_16
 
BIT4


	)

76 
	#SDRC_MR_NORM
 (0 << 0è

	)

77 
	#SDRC_MR_NOP
 (1 << 0è

	)

78 
	#SDRC_MR_PRE
 (2 << 0è

	)

79 
	#SDRC_MR_MRS
 (3 << 0è

	)

80 
	#SDRC_MR_REF
 (4 << 0è

	)

83 
	#SDRC_TR_COUNT
(
_x_
è((_x_ & 0xfffè<< 0)

	)

86 
	#SDRC_CR_TXSR
(
_x_
è((_x_ & 0xfè<< 27è

	)

87 
	#SDRC_CR_TRAS
(
_x_
è((_x_ & 0xfè<< 23è

	)

88 
	#SDRC_CR_TRCD
(
_x_
è((_x_ & 0xfè<< 19è

	)

89 
	#SDRC_CR_TRP
(
_x_
è((_x_ & 0xfè<< 15è

	)

90 
	#SDRC_CR_TRC
(
_x_
è((_x_ & 0xfè<< 11è

	)

91 
	#SDRC_CR_TWR
(
_x_
è((_x_ & 0xfè<< 7è

	)

92 
	#SDRC_CR_CAS_2
 (2 << 5è

	)

93 
	#SDRC_CR_NB_2
 0

	)

94 
	#SDRC_CR_NB_4
 
BIT4


	)

95 
	#SDRC_CR_NR_11
 (0 << 2è

	)

96 
	#SDRC_CR_NR_12
 (1 << 2è

	)

97 
	#SDRC_CR_NR_13
 (2 << 2è

	)

98 
	#SDRC_CR_NC_8
 (0 << 0è

	)

99 
	#SDRC_CR_NC_9
 (1 << 0è

	)

100 
	#SDRC_CR_NC_10
 (2 << 0è

	)

101 
	#SDRC_CR_NC_11
 (3 << 0è

	)

104 
	#SDRC_SRR_SRCB
 
BIT0


	)

107 
	#SDRC_LPR_LPCB
 
BIT0


	)

113 
	#SDRC_INT_RES
 
BIT0


	)

	@src/lib/libcpu/arm/at91rm9200/include/at91rm9200_pmc.h

11 #iâdeà
__AT91RM9200_PMC_H__


12 
	#__AT91RM9200_PMC_H__


	)

14 
	~<bs.h
>

19 
©91rm9200_g_maþk
();

20 
©91rm9200_g_¦ck
();

21 
©91rm9200_g_mck
();

24 
	#PMC_SCER
 0x00

	)

25 
	#PMC_SCDR
 0x04

	)

26 
	#PMC_SCSR
 0x08

	)

27 
	#PMC_PCER
 0x10

	)

28 
	#PMC_PCDR
 0x14

	)

29 
	#PMC_PCSR
 0x18

	)

30 
	#PMC_MOR
 0x20

	)

31 
	#PMC_MCFR
 0x24

	)

32 
	#PMC_PLLAR
 0x28

	)

33 
	#PMC_PLLBR
 0x2C

	)

34 
	#PMC_MCKR
 0x30

	)

35 
	#PMC_PCKR0
 0x40

	)

36 
	#PMC_PCKR1
 0x44

	)

37 
	#PMC_PCKR2
 0x48

	)

38 
	#PMC_PCKR3
 0x4C

	)

39 
	#PMC_PCKR4
 0x50

	)

40 
	#PMC_PCKR5
 0x54

	)

41 
	#PMC_PCKR6
 0x58

	)

42 
	#PMC_PCKR7
 0x5C

	)

43 
	#PMC_IER
 0x60

	)

44 
	#PMC_IDR
 0x64

	)

45 
	#PMC_SR
 0x68

	)

46 
	#PMC_IMR
 0x6C

	)

53 
	#PMC_SCR_PCK7
 
BIT15


	)

54 
	#PMC_SCR_PCK6
 
BIT14


	)

55 
	#PMC_SCR_PCK5
 
BIT13


	)

56 
	#PMC_SCR_PCK4
 
BIT12


	)

57 
	#PMC_SCR_PCK3
 
BIT11


	)

58 
	#PMC_SCR_PCK2
 
BIT10


	)

59 
	#PMC_SCR_PCK1
 
BIT9


	)

60 
	#PMC_SCR_PCK0
 
BIT8


	)

61 
	#PMC_SCR_UHP
 
BIT4


	)

62 
	#PMC_SCR_MCKUDP
 
BIT2


	)

63 
	#PMC_SCR_UDP
 
BIT1


	)

64 
	#PMC_SCR_PCK
 
BIT0


	)

69 
	#PMC_PCR_PID_EMAC
 
BIT24


	)

70 
	#PMC_PCR_PID_UHP
 
BIT23


	)

71 
	#PMC_PCR_PID_TC5
 
BIT22


	)

72 
	#PMC_PCR_PID_TC4
 
BIT21


	)

73 
	#PMC_PCR_PID_TC3
 
BIT20


	)

74 
	#PMC_PCR_PID_TC2
 
BIT19


	)

75 
	#PMC_PCR_PID_TC1
 
BIT18


	)

76 
	#PMC_PCR_PID_TC0
 
BIT17


	)

77 
	#PMC_PCR_PID_SSC2
 
BIT16


	)

78 
	#PMC_PCR_PID_SSC1
 
BIT15


	)

79 
	#PMC_PCR_PID_SSC0
 
BIT14


	)

80 
	#PMC_PCR_PID_SPI
 
BIT13


	)

81 
	#PMC_PCR_PID_TWI
 
BIT12


	)

82 
	#PMC_PCR_PID_UDP
 
BIT11


	)

83 
	#PMC_PCR_PID_MCI
 
BIT10


	)

84 
	#PMC_PCR_PID_US3
 
BIT9


	)

85 
	#PMC_PCR_PID_US2
 
BIT8


	)

86 
	#PMC_PCR_PID_US1
 
BIT7


	)

87 
	#PMC_PCR_PID_US0
 
BIT6


	)

88 
	#PMC_PCR_PID_PIOD
 
BIT5


	)

89 
	#PMC_PCR_PID_PIOC
 
BIT4


	)

90 
	#PMC_PCR_PID_PIOB
 
BIT3


	)

91 
	#PMC_PCR_PID_PIOA
 
BIT2


	)

94 
	#PMC_MOR_MOSCEN
 
BIT0


	)

97 
	#PMC_MCFR_MAINRDY
 
BIT16


	)

100 
	#PMC_PLLAR_MUST_SET
 
BIT29


	)

101 
	#PMC_PLLAR_MUL
(
_x_
è((_x_ & 0x7ffè<< 16è

	)

102 
	#PMC_PLLAR_MUL_MASK
 (0x7fà<< 16è

	)

104 
	#PMC_PLLAR_OUT_80_160
 (0 << 14è

	)

105 
	#PMC_PLLAR_OUT_150_240
 (2 << 14è

	)

106 
	#PMC_PLLAR_DIV
(
_x_
è((_x_ & 0xffè<< 0è

	)

107 
	#PMC_PLLAR_DIV_MASK
 (0xffè

	)

110 
	#PMC_PLLBR_USB_96M
 
BIT28


	)

111 
	#PMC_PLLBR_MUL
(
_x_
è((_x_ & 0x7ffè<< 16è

	)

112 
	#PMC_PLLBR_MUL_MASK
 (0x7fà<< 16è

	)

113 
	#PMC_PLLBR_OUT_80_160
 (0 << 14è

	)

114 
	#PMC_PLLBR_OUT_150_240
 (2 << 14è

	)

115 
	#PMC_PLLBR_DIV
(
_x_
è((_x_ & 0xffè<< 0è

	)

116 
	#PMC_PLLBR_DIV_MASK
 (0xffè

	)

119 
	#PMC_MCKR_MDIV_MASK
 (3 << 8è

	)

120 
	#PMC_MCKR_MDIV_1
 (0 << 8è

	)

121 
	#PMC_MCKR_MDIV_2
 (1 << 8è

	)

122 
	#PMC_MCKR_MDIV_3
 (2 << 8è

	)

123 
	#PMC_MCKR_MDIV_4
 (3 << 8è

	)

124 
	#PMC_MCKR_PRES_MASK
 (7 << 2è

	)

125 
	#PMC_MCKR_PRES_1
 (0 << 2è

	)

126 
	#PMC_MCKR_PRES_2
 (1 << 2è

	)

127 
	#PMC_MCKR_PRES_4
 (2 << 2è

	)

128 
	#PMC_MCKR_PRES_8
 (3 << 2è

	)

129 
	#PMC_MCKR_PRES_16
 (4 << 2è

	)

130 
	#PMC_MCKR_PRES_32
 (5 << 2è

	)

131 
	#PMC_MCKR_PRES_64
 (6 << 2è

	)

132 
	#PMC_MCKR_CSS_MASK
 (3 << 0è

	)

133 
	#PMC_MCKR_CSS_SLOW
 (0 << 0è

	)

134 
	#PMC_MCKR_CSS_MAIN
 (1 << 0è

	)

135 
	#PMC_MCKR_CSS_PLLA
 (2 << 0è

	)

136 
	#PMC_MCKR_CSS_PLLB
 (3 << 0è

	)

139 
	#PMC_PCKR_PRES_1
 (0 << 2è

	)

140 
	#PMC_PCKR_PRES_2
 (1 << 2è

	)

141 
	#PMC_PCKR_PRES_4
 (2 << 2è

	)

142 
	#PMC_PCKR_PRES_8
 (3 << 2è

	)

143 
	#PMC_PCKR_PRES_16
 (4 << 2è

	)

144 
	#PMC_PCKR_PRES_32
 (5 << 2è

	)

145 
	#PMC_PCKR_PRES_64
 (6 << 2è

	)

146 
	#PMC_PCKR_CSS_SLOW
 (0 << 0è

	)

147 
	#PMC_PCKR_CSS_MAIN
 (1 << 0è

	)

148 
	#PMC_PCKR_CSS_PLLA
 (2 << 0è

	)

149 
	#PMC_PCKR_CSS_PLLB
 (3 << 0è

	)

155 
	#PMC_INT_PCK7_RDY
 
BIT15


	)

156 
	#PMC_INT_PCK6_RDY
 
BIT14


	)

157 
	#PMC_INT_PCK5_RDY
 
BIT13


	)

158 
	#PMC_INT_PCK4_RDY
 
BIT12


	)

159 
	#PMC_INT_PCK3_RDY
 
BIT11


	)

160 
	#PMC_INT_PCK2_RDY
 
BIT10


	)

161 
	#PMC_INT_PCK1_RDY
 
BIT9


	)

162 
	#PMC_INT_PCK0_RDY
 
BIT8


	)

163 
	#PMC_INT_MCK_RDY
 
BIT3


	)

164 
	#PMC_INT_LOCKB
 
BIT2


	)

165 
	#PMC_INT_LCKA
 
BIT1


	)

166 
	#PMC_INT_MOSCS
 
BIT0


	)

	@src/lib/libcpu/arm/at91rm9200/include/at91rm9200_usart.h

15 #iâdeà
__AT91RM9200_USART_H__


16 
	#__AT91RM9200_USART_H__


	)

18 
	~<bs.h
>

21 
	#US_CR
 0x00

	)

22 
	#US_MR
 0x04

	)

23 
	#US_IER
 0x08

	)

24 
	#US_IDR
 0x0C

	)

25 
	#US_IMR
 0x10

	)

26 
	#US_SR
 0x14

	)

27 
	#US_RHR
 0x18

	)

28 
	#US_THR
 0x1C

	)

29 
	#US_BRGR
 0x20

	)

30 
	#US_RTOR
 0x24

	)

31 
	#US_TTGR
 0x28

	)

32 
	#US_C1R
 0x40

	)

33 
	#US_C2R
 0x44

	)

34 
	#US_FNTR
 0x48

	)

35 
	#US_IF
 0x4C

	)

39 
	#US_CR_RSTRX
 
BIT2


	)

40 
	#US_CR_RSTTX
 
BIT3


	)

41 
	#US_CR_RXEN
 
BIT4


	)

42 
	#US_CR_RXDIS
 
BIT5


	)

43 
	#US_CR_TXEN
 
BIT6


	)

44 
	#US_CR_TXDIS
 
BIT7


	)

45 
	#US_CR_RSTSTA
 
BIT8


	)

46 
	#US_CR_STTBRK
 
BIT9


	)

47 
	#US_CR_STPBRK
 
BIT10


	)

48 
	#US_CR_STTTO
 
BIT11


	)

49 
	#US_CR_SENDA
 
BIT12


	)

50 
	#US_CR_RSTIT
 
BIT13


	)

51 
	#US_CR_RSTNACK
 
BIT14


	)

52 
	#US_CR_RETTO
 
BIT15


	)

53 
	#US_CR_DTREN
 
BIT16


	)

54 
	#US_CR_DTRDIS
 
BIT17


	)

55 
	#US_CR_RTSEN
 
BIT18


	)

56 
	#US_CR_RTSDIS
 
BIT19


	)

60 
	#US_MR_USMODE
 (0xF << 0è

	)

61 
	#US_MR_USMODE_NORMAL
 0

	)

62 
	#US_MR_USMODE_RS485
 1

	)

63 
	#US_MR_USMODE_HWHS
 2

	)

64 
	#US_MR_USMODE_MODEM
 3

	)

65 
	#US_MR_USMODE_ISO7816_T0
 4

	)

66 
	#US_MR_USMODE_ISO7816_T1
 6

	)

67 
	#US_MR_USMODE_IRDA
 8

	)

68 
	#US_MR_USCLKS
 (3 << 4è

	)

69 
	#US_MR_USCLKS_MCK
 (0 << 4)

	)

70 
	#US_MR_USCLKS_MCK_DIV8
 (1 << 4)

	)

71 
	#US_MR_USCLKS_SCK
 (3 << 4)

	)

72 
	#US_MR_CHRL
 (3 << 6è

	)

73 
	#US_MR_CHRL_5
 (0 << 6)

	)

74 
	#US_MR_CHRL_6
 (1 << 6)

	)

75 
	#US_MR_CHRL_7
 (2 << 6)

	)

76 
	#US_MR_CHRL_8
 (3 << 6)

	)

77 
	#US_MR_SYNC
 (1 << 8è

	)

78 
	#US_MR_PAR
 (7 << 9è

	)

79 
	#US_MR_PAR_EVEN
 (0 << 9è

	)

80 
	#US_MR_PAR_ODD
 (1 << 9è

	)

81 
	#US_MR_PAR_SPACE
 (2 << 9è

	)

82 
	#US_MR_PAR_MARK
 (3 << 9è

	)

83 
	#US_MR_PAR_NONE
 (4 << 9è

	)

84 
	#US_MR_PAR_MDROP
 (6 << 9è

	)

85 
	#US_MR_NBSTOP
 (3 << 12è

	)

86 
	#US_MR_NBSTOP_1
 (0 << 12)

	)

87 
	#US_MR_NBSTOP_1_5
 (1 << 12)

	)

88 
	#US_MR_NBSTOP_2
 (2 << 12)

	)

89 
	#US_MR_CHMODE
 (3 << 14è

	)

90 
	#US_MR_CHMODE_NORM
 (0 << 14è

	)

91 
	#US_MR_CHMODE_AUTO
 (1 << 14è

	)

92 
	#US_MR_CHMODE_LOC
 (2 << 14è

	)

93 
	#US_MR_CHMODE_REM
 (3 << 14è

	)

94 
	#US_MR_MSBF
 (1 << 16è

	)

95 
	#US_MR_MODE9
 (1 << 17è

	)

96 
	#US_MR_CLKO
 (1 << 18è

	)

97 
	#US_MR_OVER
 (1 << 19è

	)

98 
	#US_MR_INACK
 (1 << 20è

	)

99 
	#US_MR_DSNACK
 (1 << 21è

	)

100 
	#US_MR_MAX_ITER
 (7 << 24è

	)

101 
	#US_MR_FILTER
 (1 << 28è

	)

107 
	#US_IER_RXRDY
 
BIT0


	)

108 
	#US_IER_TXRDY
 
BIT1


	)

109 
	#US_IER_RXBRK
 
BIT2


	)

110 
	#US_IER_ENDRX
 
BIT3


	)

112 
	#US_IER_OVRE
 
BIT5


	)

113 
	#US_IER_FRAME
 
BIT6


	)

114 
	#US_IER_PARE
 
BIT7


	)

115 
	#US_IER_TIMEOUT
 
BIT8


	)

116 
	#US_IER_TXEMPTY
 
BIT9


	)

117 
	#US_IER_ITERATION
 
BIT10


	)

118 
	#US_IER_TXBUFE
 
BIT11


	)

119 
	#US_IER_RXBUFF
 
BIT12


	)

120 
	#US_IER_NACK
 
BIT13


	)

121 
	#US_IER_RIIC
 
BIT16


	)

122 
	#US_IER_DSRIC
 
BIT17


	)

123 
	#US_IER_DCDIC
 
BIT18


	)

124 
	#US_IER_CTSIC
 
BIT19


	)

125 
	#US_IER_ALL
 0xC0001AFB

	)

128 
	#US_FNTR_NTRST
 
BIT0


	)

131 vÞ©
ut32_t
 
	mü
;

132 vÞ©
ut32_t
 
	mmr
;

133 vÞ©
ut32_t
 
	mr
;

134 vÞ©
ut32_t
 
	midr
;

135 vÞ©
ut32_t
 
	mimr
;

136 vÞ©
ut32_t
 
	m¤
;

137 vÞ©
ut32_t
 
	mrhr
;

138 vÞ©
ut32_t
 
	mthr
;

139 vÞ©
ut32_t
 
	mbrgr
;

140 vÞ©
ut32_t
 
	m_»s0
[7];

141 vÞ©
ut32_t
 
	mcidr
;

142 vÞ©
ut32_t
 
	mexid
;

143 vÞ©
ut32_t
 
	mâr
;

144 } 
	t©91rm9200_u§¹_»gs_t
;

	@src/lib/libcpu/arm/at91rm9200/include/bits.h

11 #iâdeà
__BITS_H__


12 
	#__BITS_H__


	)

14 
	#BIT0
 0x00000001

	)

15 
	#BIT1
 0x00000002

	)

16 
	#BIT2
 0x00000004

	)

17 
	#BIT3
 0x00000008

	)

18 
	#BIT4
 0x00000010

	)

19 
	#BIT5
 0x00000020

	)

20 
	#BIT6
 0x00000040

	)

21 
	#BIT7
 0x00000080

	)

22 
	#BIT8
 0x00000100

	)

23 
	#BIT9
 0x00000200

	)

24 
	#BIT10
 0x00000400

	)

25 
	#BIT11
 0x00000800

	)

26 
	#BIT12
 0x00001000

	)

27 
	#BIT13
 0x00002000

	)

28 
	#BIT14
 0x00004000

	)

29 
	#BIT15
 0x00008000

	)

30 
	#BIT16
 0x00010000

	)

31 
	#BIT17
 0x00020000

	)

32 
	#BIT18
 0x00040000

	)

33 
	#BIT19
 0x00080000

	)

34 
	#BIT20
 0x00100000

	)

35 
	#BIT21
 0x00200000

	)

36 
	#BIT22
 0x00400000

	)

37 
	#BIT23
 0x00800000

	)

38 
	#BIT24
 0x01000000

	)

39 
	#BIT25
 0x02000000

	)

40 
	#BIT26
 0x04000000

	)

41 
	#BIT27
 0x08000000

	)

42 
	#BIT28
 0x10000000

	)

43 
	#BIT29
 0x20000000

	)

44 
	#BIT30
 0x40000000

	)

45 
	#BIT31
 0x80000000

	)

	@src/lib/libcpu/arm/at91rm9200/irq/irq.c

13 
	~<¹ems/scÜe/¬mv4.h
>

15 
	~<b¥.h
>

16 
	~<b¥/q.h
>

17 
	~<b¥/q-gic.h
>

19 
	~<©91rm9200.h
>

21 
	$b¥_¼u±_di¥©ch
()

23 
¹ems_veùÜ_numb
 
veùÜ
 = 
	`AIC_CTL_REG
(
AIC_IVR
);

25 
	`b¥_¼u±_hªdËr_di¥©ch
(
veùÜ
);

27 
	`AIC_CTL_REG
(
AIC_EOICR
) = 0;

28 
	}
}

30 
¹ems_¡©us_code
 
	$b¥_¼u±_veùÜ_abË
(
¹ems_veùÜ_numb
 
veùÜ
)

32 
	`AIC_CTL_REG
(
AIC_IECR
èð1 << 
veùÜ
;

34  
RTEMS_SUCCESSFUL
;

35 
	}
}

37 
¹ems_¡©us_code
 
	$b¥_¼u±_veùÜ_di§bË
(
¹ems_veùÜ_numb
 
veùÜ
)

39 
	`AIC_CTL_REG
(
AIC_IDCR
èð1 << 
veùÜ
;

41  
RTEMS_SUCCESSFUL
;

42 
	}
}

44 
¹ems_¡©us_code
 
	$b¥_¼u±_çcy_lize
()

46 
i
 = 0;

48 
i
 = 0; i < 32; ++i) {

49 
	`AIC_SVR_REG
(
i
<<2) = i;

53 
	`AIC_CTL_REG
(
AIC_IDCR
) = 0xffffffff;

55 
	`_CPU_ISR_¡®l_veùÜ
(
ARM_EXCEPTION_IRQ
, 
_ARMV4_Exû±iÚ_¼u±
, 
NULL
);

57  
RTEMS_SUCCESSFUL
;

58 
	}
}

	@src/lib/libcpu/arm/at91rm9200/irq/irq.h

13 #iâdeà
__IRQ_H__


14 
	#__IRQ_H__


	)

16 #iâdeà
__asm__


18 
	~<¹ems.h
>

19 
	~<¹ems/q.h
>

20 
	~<¹ems/q-exnsiÚ.h
>

25 
	#AT91RM9200_INT_FIQ
 0

	)

26 
	#AT91RM9200_INT_SYSIRQ
 1

	)

27 
	#AT91RM9200_INT_PIOA
 2

	)

28 
	#AT91RM9200_INT_PIOB
 3

	)

29 
	#AT91RM9200_INT_PIOC
 4

	)

30 
	#AT91RM9200_INT_PIOD
 5

	)

31 
	#AT91RM9200_INT_US0
 6

	)

32 
	#AT91RM9200_INT_US1
 7

	)

33 
	#AT91RM9200_INT_US2
 8

	)

34 
	#AT91RM9200_INT_US3
 9

	)

35 
	#AT91RM9200_INT_MCI
 10

	)

36 
	#AT91RM9200_INT_UDP
 11

	)

37 
	#AT91RM9200_INT_TWI
 12

	)

38 
	#AT91RM9200_INT_SPI
 13

	)

39 
	#AT91RM9200_INT_SSC0
 14

	)

40 
	#AT91RM9200_INT_SSC1
 15

	)

41 
	#AT91RM9200_INT_SSC2
 16

	)

42 
	#AT91RM9200_INT_TC0
 17

	)

43 
	#AT91RM9200_INT_TC1
 18

	)

44 
	#AT91RM9200_INT_TC2
 19

	)

45 
	#AT91RM9200_INT_TC3
 20

	)

46 
	#AT91RM9200_INT_TC4
 21

	)

47 
	#AT91RM9200_INT_TC5
 22

	)

48 
	#AT91RM9200_INT_UHP
 23

	)

49 
	#AT91RM9200_INT_EMAC
 24

	)

50 
	#AT91RM9200_INT_IRQ0
 25

	)

51 
	#AT91RM9200_INT_IRQ1
 26

	)

52 
	#AT91RM9200_INT_IRQ2
 27

	)

53 
	#AT91RM9200_INT_IRQ3
 28

	)

54 
	#AT91RM9200_INT_IRQ4
 28

	)

55 
	#AT91RM9200_INT_IRQ5
 30

	)

56 
	#AT91RM9200_INT_IRQ6
 31

	)

57 
	#AT91RM9200_MAX_INT
 32

	)

59 
	#BSP_INTERRUPT_VECTOR_MIN
 0

	)

61 
	#BSP_INTERRUPT_VECTOR_MAX
 (
AT91RM9200_MAX_INT
 - 1)

	)

	@src/lib/libcpu/arm/at91rm9200/pmc/pmc.c

11 
	~<¹ems.h
>

12 
	~<b¥.h
>

13 
	~<©91rm9200.h
>

14 
	~<©91rm9200_pmc.h
>

16 
	$©91rm9200_g_maþk
()

18  
BSP_MAIN_FREQ
;

19 
	}
}

21 
	$©91rm9200_g_¦ck
()

23  
BSP_SLCK_FREQ
;

24 
	}
}

26 
	$©91rm9200_g_mck
()

28 
ut32_t
 
mck_»g
;

29 
ut32_t
 
mck_äeq
 = 0;

30 
ut32_t
 
¶l_»g
;

31 
´esÿËr
 = 0;

33 
mck_»g
 = 
	`PMC_REG
(
PMC_MCKR
);

35 
mck_»g
 & 
PMC_MCKR_PRES_MASK
) {

36 
PMC_MCKR_PRES_1
:

37 
´esÿËr
 = 1;

39 
PMC_MCKR_PRES_2
:

40 
´esÿËr
 = 2;

42 
PMC_MCKR_PRES_4
:

43 
´esÿËr
 = 4;

45 
PMC_MCKR_PRES_8
:

46 
´esÿËr
 = 8;

48 
PMC_MCKR_PRES_16
:

49 
´esÿËr
 = 16;

51 
PMC_MCKR_PRES_32
:

52 
´esÿËr
 = 32;

54 
PMC_MCKR_PRES_64
:

55 
´esÿËr
 = 64;

60 
mck_»g
 & 
PMC_MCKR_CSS_MASK
) {

61 
PMC_MCKR_CSS_SLOW
:

63 
mck_äeq
 = 
	`©91rm9200_g_¦ck
(è/ 
´esÿËr
;

66 
PMC_MCKR_CSS_MAIN
:

67 
mck_äeq
 = 
	`©91rm9200_g_maþk
(è/ 
´esÿËr
;

70 
PMC_MCKR_CSS_PLLA
:

71 
¶l_»g
 = 
	`PMC_REG
(
PMC_PLLAR
);

72 
mck_äeq
 = 
	`©91rm9200_g_maþk
(è/ 
´esÿËr
;

73 
mck_äeq
 = mck_äeq / (
¶l_»g
 & 
PMC_PLLAR_DIV_MASK
);

74 
mck_äeq
 = mck_äeq * (((
¶l_»g
 & 
PMC_PLLAR_MUL_MASK
) >> 16) + 1);

77 
PMC_MCKR_CSS_PLLB
:

78 
¶l_»g
 = 
	`PMC_REG
(
PMC_PLLBR
);

79 
mck_äeq
 = 
	`©91rm9200_g_maþk
(è/ 
´esÿËr
;

80 
mck_äeq
 = mck_äeq / (
¶l_»g
 & 
PMC_PLLBR_DIV_MASK
);

81 
mck_äeq
 = mck_äeq * (((
¶l_»g
 & 
PMC_PLLBR_MUL_MASK
) >> 16) + 1);

85 ià((
mck_»g
 & 
PMC_MCKR_MDIV_MASK
è=ð
PMC_MCKR_MDIV_2
) {

86 
mck_äeq
 = mck_freq / 2;

87 } ià((
mck_»g
 & 
PMC_MCKR_MDIV_MASK
è=ð
PMC_MCKR_MDIV_3
) {

88 
mck_äeq
 = mck_freq / 3;

89 } ià((
mck_»g
 & 
PMC_MCKR_MDIV_MASK
è=ð
PMC_MCKR_MDIV_4
) {

90 
mck_äeq
 = mck_freq / 4;

94  
mck_äeq
;

95 
	}
}

	@src/lib/libcpu/arm/at91rm9200/timer/timer.c

16 
	~<b¥.h
>

17 
	~<¹ems.h
>

18 
	~<¹ems/btim.h
>

19 
	~<©91rm9200.h
>

20 
	~<©91rm9200_pmc.h
>

22 
ut16_t
 
	gt¡¬t
;

23 
boÞ
 
	gbchm¬k_tim_fd_avage_ovhd
;

24 
ut32_t
 
	gtick_time
;

30 
	$bchm¬k_tim_lize
( )

32 
ut32_t
 
tmr_äeq
;

35 
tmr_äeq
 = 
	`©91rm9200_g_mck
() / 8;

37 
	`TC_TC0_REG
(
TC_CMR
èð
	`TC_CMR_TCCLKS
(1);

38 
	`TC_TC0_REG
(
TC_CCR
èð(
TC_CCR_CLKEN


39 | 
TC_CCR_SWTRG
);

42 
tick_time
 = 1000000000/
tmr_äeq
;

44 
	}
}

56 
	#AVG_OVERHEAD
 0

	)

59 
	#LEAST_VALID
 1

	)

61 
bchm¬k_tim_t
 
	$bchm¬k_tim_»ad
( )

63 
ut16_t
 
t
;

64 
ut32_t
 
tÙ®
;

65 
t
 = 
	`TC_TC0_REG
(
TC_CV
);

73 
tÙ®
 = 
t
 * 
tick_time
;

75 iàÐ
bchm¬k_tim_fd_avage_ovhd
 == 1 )

76  
tÙ®
;

78 iàÐ
tÙ®
 < 
LEAST_VALID
 )

83  (
tÙ®
 - 
AVG_OVERHEAD
);

85 
	}
}

87 
	$bchm¬k_tim_di§bË_subaùg_avage_ovhd
(
boÞ
 
fd_æag
)

89 
bchm¬k_tim_fd_avage_ovhd
 = 
fd_æag
;

90 
	}
}

	@src/lib/libcpu/arm/at91rm9200/usart/usart.c

20 
	~<b¥.h
>

21 
	~<¹ems/libio.h
>

22 
	~<rmios.h
>

24 
	~<©91rm9200.h
>

25 
	~<©91rm9200_u§¹.h
>

26 
	~<©91rm9200_pmc.h
>

27 
	~<¹ems/b¥Io.h
>

28 
	~<libch/£rl.h
>

29 
	~<libch/£rsuµ.h
>

32 
u§¹_f¡_Ý
(
majÜ
, 
mÜ
, *
¬g
);

33 
u§¹_Ï¡_þo£
(
majÜ
, 
mÜ
, *
¬g
);

34 
u§¹_»ad_pÞËd
(
mÜ
);

35 
ssize_t
 
u§¹_wre_pÞËd_suµÜt
(
mÜ
, cÚ¡ *
buf
, 
size_t
 
Ën
);

36 
u§¹_
(
mÜ
);

37 
u§¹_wre_pÞËd
(
mÜ
, 
c
);

38 
u§¹_£t_©ibus
(
mÜ
, cÚ¡ 
rmios
 *
t
);

39 
©91rm9200_u§¹_»gs_t
 *
u§¹_g_ba£
(
mÜ
);

42 cÚ¡ 
cÚsÞe_âs
 
	gu§¹_pÞlg_âs
 = {

43 
libch_£rl_deçuÉ_´obe
,

44 
u§¹_f¡_Ý
,

45 
u§¹_Ï¡_þo£
,

46 
u§¹_»ad_pÞËd
,

47 
u§¹_wre_pÞËd_suµÜt
,

48 
u§¹_
,

49 
u§¹_wre_pÞËd
,

50 
u§¹_£t_©ibus
,

51 
FALSE


54 
©91rm9200_u§¹_»gs_t
 *
	$u§¹_g_ba£
(
mÜ
)

56 
cÚsÞe_tbl
 *
cÚsÞe_y
;

57 
©91rm9200_u§¹_»gs_t
 *
pÜt
;

59 
cÚsÞe_y
 = 
	`BSP_g_u¬t_äom_mÜ
(
mÜ
);

61 ià(
cÚsÞe_y
 =ð
NULL
)

64 
pÜt
 = (
©91rm9200_u§¹_»gs_t
 *è
cÚsÞe_y
->
ulClPÜt1
;

67  
pÜt
;

68 
	}
}

79 
	$u§¹_f¡_Ý
(
majÜ
, 
mÜ
, *
¬g
)

81 
©91rm9200_u§¹_»gs_t
 *
u§¹
;

83 
u§¹
 = 
	`u§¹_g_ba£
(
mÜ
);

84 iàÐ!
u§¹
 )

90 
u§¹
->
ü
 = (
US_CR_RXEN
 | 
US_CR_TXEN
);

92 
	}
}

99 
	$u§¹_Ï¡_þo£
(
majÜ
, 
mÜ
, *
¬g
)

101 
©91rm9200_u§¹_»gs_t
 *
u§¹
;

103 
u§¹
 = 
	`u§¹_g_ba£
(
mÜ
);

104 iàÐ!
u§¹
 )

108 
	}
}

116 
	$u§¹_»ad_pÞËd
(
mÜ
)

118 
©91rm9200_u§¹_»gs_t
 *
u§¹
;

120 
u§¹
 = 
	`u§¹_g_ba£
(
mÜ
);

121 iàÐ!
u§¹
 )

125 iàÐ(
u§¹
->
¤
 & 
US_IER_RXRDY
) == 0 )

128  
u§¹
->
rhr
;

129 
	}
}

135 
	$u§¹_wre_pÞËd
(
mÜ
, 
c
)

137 
©91rm9200_u§¹_»gs_t
 *
u§¹
;

139 
u§¹
 = 
	`u§¹_g_ba£
(
mÜ
);

140 iàÐ!
u§¹
 )

144  (
u§¹
->
¤
 & 
US_IER_TXEMPTY
) == 0 )

147 
u§¹
->
thr
 = 
c
;

148 
	}
}

155 
ssize_t
 
	$u§¹_wre_pÞËd_suµÜt
(
mÜ
, cÚ¡ *
buf
, 
size_t
 
Ën
)

157 
©91rm9200_u§¹_»gs_t
 *
u§¹
;

158 
nwre
=0;

163 
u§¹
 = 
	`u§¹_g_ba£
(
mÜ
);

164 iàÐ!
u§¹
 )

170 
nwre
 < 
Ën
) {

171 
	`u§¹_wre_pÞËd
(
mÜ
, *
buf
++);

172 
nwre
++;

178  
nwre
;

181 
	}
}

185 
	$u§¹_
(
mÜ
)

187 
©91rm9200_u§¹_»gs_t
 *
u§¹
;

189 
u§¹
 = 
	`u§¹_g_ba£
(
mÜ
);

190 iàÐ!
u§¹
 )

193 
	}
}

197 
	$u§¹_£t_©ibus
(
mÜ
, cÚ¡ 
rmios
 *
t
)

199 
ut32_t
 
brgr
;

200 
ut32_t
 
mode
, 
baud
, 
baud_»que¡ed
;

201 
©91rm9200_u§¹_»gs_t
 *
u§¹
;

203 
u§¹
 = 
	`u§¹_g_ba£
(
mÜ
);

204 iàÐ!
u§¹
 )

208 
mode
 = 
u§¹
->
mr
 & ~(
US_MR_USMODE
 | 
US_MR_USCLKS
 | 
US_MR_CHRL


209 | 
US_MR_PAR
 | 
US_MR_NBSTOP
);

212 
t
->
c_cæag
 & 
CSIZE
){

213 
CS5
:

214 
mode
 |ð
US_MR_CHRL_5
;

216 
CS6
:

217 
mode
 |ð
US_MR_CHRL_6
;

219 
CS7
:

220 
mode
 |ð
US_MR_CHRL_7
;

223 
mode
 |ð
US_MR_CHRL_8
;

228 ià(
t
->
c_cæag
 & 
CSTOPB
){

229 
mode
 |ð
US_MR_NBSTOP_2
;

231 
mode
 |ð
US_MR_NBSTOP_1
;

234 ià(
t
->
c_cæag
 & 
PARENB
){

236 ià(
t
->
c_cæag
 & 
PARODD
){

237 
mode
 |ð
US_MR_PAR_ODD
;

239 
mode
 |ð
US_MR_PAR_EVEN
;

241 
mode
 |ð
US_MR_PAR_NONE
;

243 
baud_»que¡ed
 = 
t
->
c_cæag
 & 
CBAUD
;

246 ià(!
baud_»que¡ed
)

247 
baud_»que¡ed
 = 
	`BSP_g_baud
();

249 
baud
 = 
	`¹ems_rmios_baud_to_numb
(
baud_»que¡ed
);

251 
brgr
 = (
	`©91rm9200_g_mck
(è/ 16è/ 
baud
;

253 ià(
brgr
 > 65535){

254 
brgr
 /= 8;

255 
mode
 |ð
US_MR_USCLKS_MCK_DIV8
;

258 
u§¹
->
mr
 = 
mode
;

259 
u§¹
->
brgr
 = brgr;

261 
	}
}

	@src/lib/libcpu/arm/hi3518e/clock/clockdrv.c

18 
	~<¹ems.h
>

19 
	~<b¥/q.h
>

20 
	~<b¥.h
>

21 
	~<¶©fÜm.h
>

23 
Clock_i¤
(
¹ems_q_hdl_·¿m
 
¬g
);

24 
þock_i¤_Ú
(cÚ¡ 
¹ems_q_cÚÃù_d©a
 *
unu£d
);

25 
þock_i¤_off
(cÚ¡ 
¹ems_q_cÚÃù_d©a
 *
unu£d
);

26 
þock_i¤_is_Ú
(cÚ¡ 
¹ems_q_cÚÃù_d©a
 *
q
);

28 
¹ems_q_cÚÃù_d©a
 
	gþock_i¤_d©a
 = {

29 .
Çme
 = 
BSP_INT_TIMER0_1
,

30 .
	ghdl
 = 
Clock_i¤
,

31 .
	ghªdË
 = 
NULL
,

32 .
	gÚ
 = 
þock_i¤_Ú
,

33 .
	goff
 = 
þock_i¤_off
,

34 .
	gisOn
 = 
þock_i¤_is_Ú
,

42 
	#Clock_driv_suµÜt_©_tick
() \

44 
	`TIMER0_WR_REG
(
REG_TIMER0_INTCLR
, 0);\

45 } 0)

	)

51 
	#Clock_driv_suµÜt_¡®l_i¤
Ð
_Ãw
, 
_Þd
 ) \

53 
_Þd
 = 
NULL
; \

54 
	`BSP_¡®l_¹ems_q_hªdËr
(&
þock_i¤_d©a
); \

55 } 0)

	)

69 
	#Clock_driv_suµÜt_lize_h¬dw¬e
() \

72 
	`HI_REG_WR
(
REG_BASE_SCTL
+
REG_SC_CTRL
, 
	`HI_REG_RD
(REG_BASE_SCTL+REG_SC_CTRL) \

74 
	`TIMER0_WR_REG
(
REG_TIMER_CONTROL
, 0);\

75 
	`TIMER0_WR_REG
(
REG_TIMER_RELOAD
, 
	`BUSCLK_TO_TIMER_RELOAD
(
CFG_CLK_BUS
));\

76 
	`TIMER0_WR_REG
(
REG_TIMER_CONTROL
, 
CFG_TIMER_CONTROL
);\

77 
	`INT_WR_REG
(
REG_INTC_INTENABLE
, \

78 
	`INT_RD_REG
(
REG_INTC_INTENABLE
)|
CFG_TIMER_IRQEN
);\

79 } 0)

	)

87 
	#Clock_driv_suµÜt_shutdown_h¬dw¬e
() \

90 
	`BSP_»move_¹ems_q_hªdËr
(&
þock_i¤_d©a
); \

91 } 0)

	)

98 
	$þock_i¤_Ú
(cÚ¡ 
¹ems_q_cÚÃù_d©a
 *
unu£d
)

100 
	}
}

107 
	$þock_i¤_off
(cÚ¡ 
¹ems_q_cÚÃù_d©a
 *
unu£d
)

109 
	}
}

117 
	$þock_i¤_is_Ú
(cÚ¡ 
¹ems_q_cÚÃù_d©a
 *
q
)

120 
	}
}

122 
	#CLOCK_DRIVER_USE_DUMMY_TIMECOUNTER


	)

125 
	~"../../../../libb¥/sh¬ed/þockdrv_shl.h
"

	@src/lib/libcpu/arm/hi3518e/include/platform.h

1 #iâdef 
__HI_CHIP_REGS_H__


2 
	#__HI_CHIP_REGS_H__


	)

4 
	#HI_REG_WR
(
a
, 
v
è(*(vÞ©*)×èð(v))

	)

5 
	#HI_REG_RD
(
a
è(*(vÞ©*)×))

	)

14 
	#HW_REG
(
a
è(*(*)×))

	)

15 
	#g_bus_þk
()({\

16 
fbdiv
, 
»fdiv
, 
p¡div1
, 
p¡div2
; \

17 
tmp_»g
, 
foutvco
, 
busþk
;\

18 
tmp_»g
 = 
	`HW_REG
(
REG_CRG4_OFFSET
);\

19 
p¡div1
 = (
tmp_»g
 >> 24) & 0x7;\

20 
p¡div2
 = (
tmp_»g
 >> 27) & 0x7;\

21 
tmp_»g
 = 
	`HW_REG
(
REG_CRG5_OFFSET
);\

22 
»fdiv
 = (
tmp_»g
 >> 12) & 0x3f;\

23 
fbdiv
 = 
tmp_»g
 & 0xfff;\

24 
foutvco
 = 24000000/
»fdiv
;\

25 
foutvco
 *ð
fbdiv
;\

26 
busþk
 = 
foutvco
/(2 * 
p¡div1
 * 
p¡div2
);\

27 
busþk
;\

28 })

	)

30 
	#CFG_CLK_BUS
 
	`g_bus_þk
()

	)

33 
	#SYSID_RGE_BASE
 0x20050EE0

	)

36 
	#REG_BASE_INTC
 0x10140000

	)

37 
	#REG_INTC_IRQSTATUS
 0x000

	)

38 
	#REG_INTC_FIQSTATUS
 0x004

	)

39 
	#REG_INTC_RAWSTATUS
 0x008

	)

40 
	#REG_INTC_INTSELECT
 0x00C

	)

41 
	#REG_INTC_INTENABLE
 0x010

	)

42 
	#REG_INTC_INTENCLEAR
 0x014

	)

43 
	#REG_INTC_SOFTINT
 0x018

	)

44 
	#REG_INTC_SOFTINTCLEAR
 0x01C

	)

45 
	#REG_INTC_PROTECTION
 0x020

	)

46 
	#INT_RD_REG
(
off£t
è(
	`HI_REG_RD
(
REG_BASE_INTC
+off£t))

	)

47 
	#INT_WR_REG
(
off£t
, 
v®
è(
	`HI_REG_WR
(
REG_BASE_INTC
+off£t, v®))

	)

49 
	#DDR_MEM_BASE
 0x80000000

	)

50 
	#SFC_MEM_BASE
 0x58000000

	)

51 
	#ARM_REG_BASE
 0x20300000

	)

52 
	#GPIO11_REG_BASE
 0x201F0000

	)

53 
	#GPIO10_REG_BASE
 0x201E0000

	)

54 
	#GPIO9_REG_BASE
 0x201D0000

	)

55 
	#GPIO8_REG_BASE
 0x201C0000

	)

56 
	#GPIO7_REG_BASE
 0x201B0000

	)

57 
	#GPIO6_REG_BASE
 0x201A0000

	)

58 
	#GPIO5_REG_BASE
 0x20190000

	)

59 
	#GPIO4_REG_BASE
 0x20180000

	)

60 
	#GPIO3_REG_BASE
 0x20170000

	)

61 
	#GPIO2_REG_BASE
 0x20160000

	)

62 
	#GPIO1_REG_BASE
 0x20150000

	)

63 
	#GPIO0_REG_BASE
 0x20140000

	)

64 
	#PWM_REG_BASE
 0x20130000

	)

65 
	#DDR_PHY_BASE
 0x20120000

	)

66 
	#DDRC_REG_BASE
 0x20110000

	)

67 
	#IO_CONFIG_REG_BASE
 0x200F0000

	)

68 
	#UART0_REG_BASE
 0x20080000

	)

69 
	#RTC_REG_BASE
 0x20060000

	)

70 
	#REG_BASE_SCTL
 0x20050000

	)

71 
	#REG_SC_CTRL
 0

	)

72 
	#REG_SC_SYSRES
 0x4

	)

74 
	#WDG_REG_BASE
 0x20040000

	)

75 
	#CRG_REG_BASE
 0x20030000

	)

76 
	#REG_ETH_CRG
 0xCC

	)

79 
	#TIMER1_REG_BASE
 0x20010000

	)

80 
	#TIMER0_REG_BASE
 0x20000000

	)

81 
	#REG_TIMER_RELOAD
 0x0

	)

82 
	#REG_TIMER_VALUE
 0x4

	)

83 
	#REG_TIMER_CONTROL
 0x8

	)

84 
	#REG_TIMER0_INTCLR
 0xC

	)

86 
	#CFG_TIMER_ENABLE
 (1 << 7)

	)

87 
	#CFG_TIMER_PERIODIC
 (1 << 6)

	)

88 
	#CFG_TIMER_INTMASK
 (1 << 5)

	)

89 
	#CFG_TIMER_32BIT
 (1 << 1)

	)

91 
	#CFG_TIMER_IRQEN
 (1<<3)

	)

93 
	#CFG_TIMER_CONTROL
 (
CFG_TIMER_ENABLE
 | 
CFG_TIMER_PERIODIC
\

94 | 
CFG_TIMER_INTMASK
 | 
CFG_TIMER_32BIT
)

	)

96 
	#CFG_TIMER_PRESCALE
 2

	)

97 
	#HZ
 100

	)

98 
	#BUSCLK_TO_TIMER_RELOAD
(
busþk
è(((busþk)/
CFG_TIMER_PRESCALE
)/
HZ
)

	)

100 
	#TIMER0_RD_REG
(
off£t
è(
	`HI_REG_RD
(
TIMER0_REG_BASE
+off£t))

	)

101 
	#TIMER0_WR_REG
(
off£t
, 
v®
è(
	`HI_REG_WR
(
TIMER0_REG_BASE
+off£t, v®))

	)

102 
	#TIMER1_RD_REG
(
off£t
è(
	`HI_REG_RD
(
TIMER1_REG_BASE
+off£t))

	)

103 
	#TIMER1_WR_REG
(
off£t
, 
v®
è(
	`HI_REG_WR
(
TIMER1_REG_BASE
+off£t, v®))

	)

106 
	#REG_BASE_SF
 0x10090000

	)

107 
	#SFC_REG_BASE
 0x10010000

	)

109 
	#MEM_BASE_ITCM
 0x00000000

	)

110 
	#MEM_SIZE_ITCM
 0x00000800

	)

111 
	#MEM_CONF_ITCM_SIZE
 3

	)

114 
	#REG_SYSSTAT
 0x8C

	)

116 
	#BOOT_FROM_SPI
 0

	)

120 
	#REG_CRG0_OFFSET
 (
CRG_REG_BASE
 + 0)

	)

121 
	#REG_CRG0_VALUE
 0x09000000

	)

122 
	#REG_CRG1_OFFSET
 (
CRG_REG_BASE
 + 0x4)

	)

123 
	#REG_CRG1_VALUE
 0x006c309B

	)

126 
	#REG_CRG4_OFFSET
 (
CRG_REG_BASE
 + 0x10)

	)

127 
	#REG_CRG5_OFFSET
 (
CRG_REG_BASE
 + 0x14)

	)

130 
	#REG_CRG6_OFFSET
 (
CRG_REG_BASE
 + 0x18)

	)

131 
	#REG_CRG7_OFFSET
 (
CRG_REG_BASE
 + 0x1c)

	)

132 
	#REG_CRG8_OFFSET
 (
CRG_REG_BASE
 + 0x20)

	)

135 
	#REG_CRG10_OFFSET
 (
CRG_REG_BASE
 + 0x28)

	)

138 
	#REG_CRG58_OFFSET
 (
CRG_REG_BASE
 + 0xE8)

	)

141 
	#REG_PLLCTL_OFFSET
 (
REG_BASE_SCTL
 + 0x14)

	)

144 
	#BITOFFSET_PLLCTL_PLLTIME
 3

	)

145 
	#BITMASK_PLLCTL_PLLTIME
 0xf0000007

	)

146 
	#BITVALUE_PLLCTL_PLLTIME
 0x1fff000

	)

149 
	#BITOFFSET_PLLCTL_PLLOVER
 0

	)

150 
	#BITMASK_PLLCTL_PLLOVER
 0xffffffã

	)

151 
	#BITVALUE_PLLCTL_PLLOVER
 0x0

	)

153 
	#SC_LOCKEN_OFFSET
 (
REG_BASE_SCTL
 + 0x44)

	)

154 
	#SC_LOCKEN_VALUE
 0x1acû551

	)

157 
	#NANDC_REG_BASE
 0x10000000

	)

158 
	#NAND_MEM_BASE
 0x50000000

	)

162 
	#PWM_FREQ_OFFSET
 0x200

	)

163 
	#SPACE_RARIO_DEFAULT
 0x204

	)

165 
	#MAX_CORNER_AA
 0x208

	)

166 
	#MAX_CORNER_BB
 0x20c

	)

168 
	#SPACE_RATIO_AA
 0x210

	)

169 
	#SPACE_RATIO_BB
 0x214

	)

170 
	#SPACE_RATIO_CC
 0x218

	)

173 
	#UART_PL01x_DR
 0x00

	)

174 
	#UART_PL01x_RSR
 0x04

	)

175 
	#UART_PL01x_ECR
 0x04

	)

176 
	#UART_PL01x_FR
 0x18

	)

178 
	#UART_PL01x_RSR_OE
 0x08

	)

179 
	#UART_PL01x_RSR_BE
 0x04

	)

180 
	#UART_PL01x_RSR_PE
 0x02

	)

181 
	#UART_PL01x_RSR_FE
 0x01

	)

183 
	#UART_PL01x_FR_TXFE
 0x80

	)

184 
	#UART_PL01x_FR_RXFF
 0x40

	)

185 
	#UART_PL01x_FR_TXFF
 0x20

	)

186 
	#UART_PL01x_FR_RXFE
 0x10

	)

187 
	#UART_PL01x_FR_BUSY
 0x08

	)

188 
	#UART_PL01x_FR_TMSK
 (
UART_PL01x_FR_TXFF
 + 
UART_PL01x_FR_BUSY
)

	)

190 
	#UART_BAUDRATE
 115200

	)

191 
	#UART_PL011_CLOCK
 3000000

	)

193 
	#UART_PL011_IBRD
 0x24

	)

194 
	#UART_PL011_FBRD
 0x28

	)

195 
	#UART_PL011_LCRH
 0x2C

	)

196 
	#UART_PL011_CR
 0x30

	)

197 
	#UART_PL011_IMSC
 0x38

	)

198 
	#UART_PL011_PERIPH_ID0
 0xFE0

	)

200 
	#UART_PL011_LCRH_SPS
 (1 << 7)

	)

201 
	#UART_PL011_LCRH_WLEN_8
 (3 << 5)

	)

202 
	#UART_PL011_LCRH_WLEN_7
 (2 << 5)

	)

203 
	#UART_PL011_LCRH_WLEN_6
 (1 << 5)

	)

204 
	#UART_PL011_LCRH_WLEN_5
 (0 << 5)

	)

205 
	#UART_PL011_LCRH_FEN
 (1 << 4)

	)

206 
	#UART_PL011_LCRH_STP2
 (1 << 3)

	)

207 
	#UART_PL011_LCRH_EPS
 (1 << 2)

	)

208 
	#UART_PL011_LCRH_PEN
 (1 << 1)

	)

209 
	#UART_PL011_LCRH_BRK
 (1 << 0)

	)

211 
	#UART_PL011_CR_CTSEN
 (1 << 15)

	)

212 
	#UART_PL011_CR_RTSEN
 (1 << 14)

	)

213 
	#UART_PL011_CR_OUT2
 (1 << 13)

	)

214 
	#UART_PL011_CR_OUT1
 (1 << 12)

	)

215 
	#UART_PL011_CR_RTS
 (1 << 11)

	)

216 
	#UART_PL011_CR_DTR
 (1 << 10)

	)

217 
	#UART_PL011_CR_RXE
 (1 << 9)

	)

218 
	#UART_PL011_CR_TXE
 (1 << 8)

	)

219 
	#UART_PL011_CR_LPE
 (1 << 7)

	)

220 
	#UART_PL011_CR_IIRLP
 (1 << 2)

	)

221 
	#UART_PL011_CR_SIREN
 (1 << 1)

	)

222 
	#UART_PL011_CR_UARTEN
 (1 << 0)

	)

224 
	#UART_PL011_IMSC_OEIM
 (1 << 10)

	)

225 
	#UART_PL011_IMSC_BEIM
 (1 << 9)

	)

226 
	#UART_PL011_IMSC_PEIM
 (1 << 8)

	)

227 
	#UART_PL011_IMSC_FEIM
 (1 << 7)

	)

228 
	#UART_PL011_IMSC_RTIM
 (1 << 6)

	)

229 
	#UART_PL011_IMSC_TXIM
 (1 << 5)

	)

230 
	#UART_PL011_IMSC_RXIM
 (1 << 4)

	)

231 
	#UART_PL011_IMSC_DSRMIM
 (1 << 3)

	)

232 
	#UART_PL011_IMSC_DCDMIM
 (1 << 2)

	)

233 
	#UART_PL011_IMSC_CTSMIM
 (1 << 1)

	)

234 
	#UART_PL011_IMSC_RIMIM
 (1 << 0)

	)

235 
	#UART_RD_REG
(
off£t
è(
	`HI_REG_RD
(
UART0_REG_BASE
+off£t))

	)

236 
	#UART_WR_REG
(
off£t
, 
v®
è(
	`HI_REG_WR
(
UART0_REG_BASE
+off£t, v®))

	)

239 
	#I2C_REG_BASE
 0x200D0000

	)

240 
	#I2C_CTRL_REG
 0x000

	)

241 
	#I2C_COM_REG
 0x004

	)

242 
	#I2C_ICR_REG
 0x008

	)

243 
	#I2C_SR_REG
 0x00C

	)

244 
	#I2C_SCL_H_REG
 0x010

	)

245 
	#I2C_SCL_L_REG
 0x014

	)

246 
	#I2C_TXR_REG
 0x018

	)

247 
	#I2C_RXR_REG
 0x01C

	)

249 
	#I2C_RD_REG
(
off£t
è(
	`HI_REG_RD
(
I2C_REG_BASE
+off£t))

	)

250 
	#I2C_WR_REG
(
off£t
, 
v®
è(
	`HI_REG_WR
(
I2C_REG_BASE
+off£t, v®))

	)

253 
	#VICAP_REG_BASE
 0x20580000

	)

254 
	#VICAP_WK_MODE
 0x0000

	)

255 
	#VICAP_PT_SEL
 0x0020

	)

256 
	#VICAP_CH_SEL
 0x0030

	)

257 
	#VICAP_INT_STA
 0x00F0

	)

258 
	#VICAP_INT_MASK
 0x00F8

	)

259 
	#VICAP_PT_INTF_MOD
 0x0100

	)

260 
	#VICAP_PT_OFFSET0
 0x0110

	)

261 
	#VICAP_PT_OFFSET1
 0x0114

	)

262 
	#VICAP_PT_OFFSET2
 0x0118

	)

263 
	#VICAP_DATA_CFG
 0x0140

	)

264 
	#VICAP_PT_HFB
 0x0180

	)

265 
	#VICAP_PT_HACT
 0x0184

	)

266 
	#VICAP_PT_HBB
 0x0188

	)

267 
	#VICAP_PT_VFB
 0x018C

	)

268 
	#VICAP_PT_VACT
 0x0190

	)

269 
	#VICAP_PT_VBB
 0x0194

	)

270 
	#VICAP_PT_VBFB
 0x0198

	)

271 
	#VICAP_PT_VBACT
 0x019C

	)

272 
	#VICAP_PT_VBBB
 0x01A0

	)

273 
	#VICAP_PT_STA
 0x01E0

	)

274 
	#VICAP_PT_SIZE
 0x01EC

	)

275 
	#VICAP_PT_INT_STA
 0x01F0

	)

276 
	#VICAP_PT_INT_MASK
 0x01F8

	)

277 
	#VICAP_CH_CTRL
 0x1000

	)

278 
	#VICAP_CH_REG_NEW
 0x1004

	)

279 
	#VICAP_CH_DES_Y_CFG
 0x10B0

	)

280 
	#VICAP_CH_DES_Y_FADDR
 0x10B4

	)

281 
	#VICAP_CH_DES_Y_SIZE
 0x10B8

	)

282 
	#VICAP_CH_DES_Y_STRIDE
 0x10BC

	)

283 
	#VICAP_CH_DES_C_CFG
 0x10B0

	)

284 
	#VICAP_CH_DES_C_FADDR
 0x10B4

	)

285 
	#VICAP_CH_DES_C_SIZE
 0x10B8

	)

286 
	#VICAP_CH_DES_C_STRIDE
 0x10BC

	)

287 
	#VICAP_CH_INT_STA
 0x10F0

	)

288 
	#VICAP_CH_INT_MASK
 0x10F8

	)

289 
	#VICAP_CH_CROP_CFG
 0x1100

	)

290 
	#VICAP_CH_CROP_WIN
 0x1104

	)

291 
	#VICAP_CROP0_START
 0x1110

	)

292 
	#VICAP_CROP0_SIZE
 0x1114

	)

294 
	#VICAP_RD_REG
(
off£t
è(
	`HI_REG_RD
(
VICAP_REG_BASE
+off£t))

	)

295 
	#VICAP_WR_REG
(
off£t
, 
v®
è(
	`HI_REG_WR
(
VICAP_REG_BASE
+off£t, v®))

	)

297 
	#PT_EN
 (1<<31)

	)

298 
	#CH_EN
 (1<<31)

	)

299 
	#ISP_INT_EN
 (1<<24)

	)

300 
	#PT0_INT_EN
 (1<<16)

	)

301 
	#CH0_INT_EN
 (1<<0)

	)

	@src/lib/libcpu/arm/hi3518e/irq/irq.c

18 
	~<b¥.h
>

19 
	~<b¥/q.h
>

20 
	~<b¥/q-gic.h
>

21 
	~<¹ems/scÜe/¬mv4.h
>

23 
	~<¶©fÜm.h
>

25 
	$b¥_¼u±_di¥©ch
()

27 
ut32_t
 
»gv®
 = 
	`INT_RD_REG
(
REG_INTC_IRQSTATUS
);

28 
¹ems_veùÜ_numb
 
veùÜ
 = 
BSP_MAX_INT
;

31 if(
»gv®
 & (1<<
BSP_INT_TIMER0_1
))

32 
veùÜ
 = 
BSP_INT_TIMER0_1
;

34 
	`b¥_¼u±_hªdËr_di¥©ch
(
veùÜ
);

35 
	}
}

37 
¹ems_¡©us_code
 
	$b¥_¼u±_veùÜ_abË
(
¹ems_veùÜ_numb
 
veùÜ
)

39  
RTEMS_SUCCESSFUL
;

40 
	}
}

42 
¹ems_¡©us_code
 
	$b¥_¼u±_veùÜ_di§bË
(
¹ems_veùÜ_numb
 
veùÜ
)

44  
RTEMS_SUCCESSFUL
;

45 
	}
}

47 
¹ems_¡©us_code
 
	$b¥_¼u±_çcy_lize
()

49 
	`INT_WR_REG
(
REG_INTC_INTENCLEAR
, ~0);

50 
	`INT_WR_REG
(
REG_INTC_INTSELECT
, 0);

51 
	`INT_WR_REG
(
REG_INTC_SOFTINTCLEAR
, ~0);

52 
	`INT_WR_REG
(
REG_INTC_PROTECTION
, 1);

54 
	`_CPU_ISR_¡®l_veùÜ
(
ARM_EXCEPTION_IRQ
, 
_ARMV4_Exû±iÚ_¼u±
, 
NULL
);

56  
RTEMS_SUCCESSFUL
;

57 
	}
}

	@src/lib/libcpu/arm/hi3518e/irq/irq.h

1 #iâdeà
_IRQ_H_


2 
	#_IRQ_H_


	)

4 
	~<¹ems.h
>

5 
	~<¹ems/q.h
>

6 
	~<¹ems/q-exnsiÚ.h
>

8 
	#BSP_INT_GBL
 0

	)

9 
	#BSP_INT_WDT
 1

	)

10 
	#BSP_INT_RTC
 2

	)

11 
	#BSP_INT_TIMER0_1
 3

	)

12 
	#BSP_INT_TIMER2_3
 4

	)

13 
	#BSP_INT_UART0_1
 5

	)

14 
	#BSP_INT_SSP0
 6

	)

15 
	#BSP_INT_SSP1
 7

	)

16 
	#_»s0
 8

	)

17 
	#BSP_INT_SIO
 9

	)

18 
	#BSP_INT_TMPCAP
 10

	)

19 
	#BSP_INT_SFC
 11

	)

20 
	#BSP_INT_ETH
 12

	)

21 
	#BSP_INT_CHIPER
 13

	)

22 
	#BSP_INT_DMAC
 14

	)

23 
	#BSP_INT_USB_EHCI
 15

	)

24 
	#BSP_INT_USB_OHCI
 16

	)

25 
	#BSP_INT_VPSS
 17

	)

26 
	#BSP_INT_SDIO
 18

	)

27 
	#BSP_INT_IR_ADC
 19

	)

28 
	#BSP_INT_IIC
 20

	)

29 
	#BSP_INT_IVE
 21

	)

30 
	#BSP_INT_VICAP
 22

	)

31 
	#BSP_INT_VOU
 23

	)

32 
	#BSP_INT_VEDU
 24

	)

33 
	#BSP_INT_UART2
 25

	)

34 
	#BSP_INT_JPGE
 26

	)

35 
	#BSP_INT_TDE
 27

	)

36 
	#BSP_INT_MDU_DDRT
 28

	)

37 
	#BSP_INT_GPIO_0_1_2_11
 29

	)

38 
	#BSP_INT_GPIO_3_4_5_10
 30

	)

39 
	#BSP_INT_GPIO_6_7_8_9
 31

	)

40 
	#BSP_MAX_INT
 32

	)

42 
	#BSP_INTERRUPT_VECTOR_MIN
 0

	)

44 
	#BSP_INTERRUPT_VECTOR_MAX
 (
BSP_MAX_INT
 - 1)

	)

	@src/lib/libcpu/arm/hi3518e/timer/timer.c

18 
	~<b¥.h
>

19 
	~<¹ems.h
>

20 
	~<¹ems/btim.h
>

21 
	~<¶©fÜm.h
>

23 
boÞ
 
	gbchm¬k_tim_fd_avage_ovhd
;

25 
	#TIMER_LOAD_VAL
 0xffffffff

	)

27 
	gtime¡amp
;

28 
	gÏ¡dec
;

30 
	$»£t_tim_masked
()

33 
Ï¡dec
 = 
	`TIMER1_RD_REG
(
REG_TIMER_VALUE
);

34 
time¡amp
 = 0;

35 
	}
}

40 
	$bchm¬k_tim_lize
( )

43 
	`HI_REG_WR
(
REG_BASE_SCTL
+
REG_SC_CTRL
, 
	`HI_REG_RD
(REG_BASE_SCTL+REG_SC_CTRL) \

52 
	`TIMER1_WR_REG
(
REG_TIMER_CONTROL
, 0);

53 
	`TIMER1_WR_REG
(
REG_TIMER_RELOAD
, ~0);

56 
	`TIMER1_WR_REG
(
REG_TIMER_CONTROL
, 0xCA);

59 
	`»£t_tim_masked
();

60 
	}
}

72 
bchm¬k_tim_t
 
	$bchm¬k_tim_»ad
( )

79 
now
 = 
	`TIMER1_RD_REG
(
REG_TIMER_VALUE
);

81 ià(
Ï¡dec
 >ð
now
) {

83 
time¡amp
 +ð
Ï¡dec
 - 
now
;

86 
time¡amp
 +ð
Ï¡dec
 + 
TIMER_LOAD_VAL
 - 
now
;

88 
Ï¡dec
 = 
now
;

90  
time¡amp
;

92 
	}
}

94 
	$bchm¬k_tim_di§bË_subaùg_avage_ovhd
(
boÞ
 
fd_æag
)

96 
bchm¬k_tim_fd_avage_ovhd
 = 
fd_æag
;

97 
	}
}

	@src/lib/libcpu/arm/lpc22xx/clock/clockdrv.c

15 
	~<¹ems.h
>

16 
	~<b¥.h
>

17 
	~<b¥/q.h
>

18 
	~<Íc22xx.h
>

19 
	~<¹ems/b¥Io.h
>

20 
	~<¹ems/timecouÁ.h
>

22 
Clock_i¤
(
¹ems_q_hdl_·¿m
 
¬g
);

23 
þock_i¤_Ú
(cÚ¡ 
¹ems_q_cÚÃù_d©a
 *
unu£d
);

24 
þock_i¤_off
(cÚ¡ 
¹ems_q_cÚÃù_d©a
 *
unu£d
);

25 
þock_i¤_is_Ú
(cÚ¡ 
¹ems_q_cÚÃù_d©a
 *
q
);

27 
¹ems_timecouÁ_sim¶e
 
	gÍc22xx_tc
;

29 
ut32_t
 
	$Íc22xx_tc_g
(
¹ems_timecouÁ_sim¶e
 *
tc
)

31  
T0TC
;

32 
	}
}

34 
boÞ
 
	$Íc22xx_tc_is_³ndg
(
¹ems_timecouÁ_sim¶e
 *
tc
)

36  (
T0IR
 & 0x1) != 0;

37 
	}
}

39 
ut32_t
 
	$Íc22xx_tc_g_timecouÁ
(
timecouÁ
 *
tc
)

41  
	`¹ems_timecouÁ_sim¶e_upcouÁ_g
(

42 
tc
,

43 
Íc22xx_tc_g
,

44 
Íc22xx_tc_is_³ndg


46 
	}
}

53 
	$Íc22xx_tc_©_tick
(
¹ems_timecouÁ_sim¶e
 *
tc
)

55 ià(!(
T0IR
 & 0x01))

57 
T0IR
 = 0x01;

58 
VICVeùAddr
 = 0x00;

59 
	}
}

61 
	$Íc22xx_tc_tick
()

63 
	`¹ems_timecouÁ_sim¶e_upcouÁ_tick
(

64 &
Íc22xx_tc
,

65 
Íc22xx_tc_g
,

66 
Íc22xx_tc_©_tick


68 
	}
}

71 
¹ems_q_cÚÃù_d©a
 
	gþock_i¤_d©a
 = {

72 .
Çme
 = 
LPC22xx_INTERRUPT_TIMER0
,

73 .
	ghdl
 = 
Clock_i¤
,

74 .
	ghªdË
 = 
NULL
,

75 .
	gÚ
 = 
þock_i¤_Ú
,

76 .
	goff
 = 
þock_i¤_off
,

77 .
	gisOn
 = 
þock_i¤_is_Ú
,

85 
	#Clock_driv_suµÜt_¡®l_i¤
Ð
_Ãw
, 
_Þd
 ) \

87 (
_Þd
èð
NULL
; \

88 
	`BSP_¡®l_¹ems_q_hªdËr
(&
þock_i¤_d©a
); \

89 } 0)

	)

106 
	#Clock_driv_suµÜt_lize_h¬dw¬e
() \

109 
T0TCR
 &= 0; \

111 
T0PC
 = 0; \

113 
T0MR0
 = ((
LPC22xx_Fpþk
/1000 * \

114 
	`¹ems_cÚfigu¿tiÚ_g_miüo£cÚds_³r_tick
()) / 1000); \

116 
T0MCR
 |= 0x03; \

118 
T0EMR
 = 0; \

120 
T0TCR
 = 1; \

122 
T0IR
 |= 0x01; \

124 
	`¹ems_timecouÁ_sim¶e_¡®l
( \

125 &
Íc22xx_tc
, \

126 
LPC22xx_Fpþk
, \

127 
T0MR0
, \

128 
Íc22xx_tc_g_timecouÁ
 \

130 } 0)

	)

138 
	#Clock_driv_suµÜt_shutdown_h¬dw¬e
() \

141 
T0TCR
&=~0x02; \

142 
	`BSP_»move_¹ems_q_hªdËr
(&
þock_i¤_d©a
); \

143 } 0)

	)

150 
	$þock_i¤_Ú
(cÚ¡ 
¹ems_q_cÚÃù_d©a
 *
unu£d
)

152 
T0IR
&=0x01;

153 
	}
}

160 
	$þock_i¤_off
(cÚ¡ 
¹ems_q_cÚÃù_d©a
 *
unu£d
)

162 
T0IR
=0x00;

163 
	}
}

171 
	$þock_i¤_is_Ú
(cÚ¡ 
¹ems_q_cÚÃù_d©a
 *
q
)

173  
T0IR
 & 0x01;

174 
	}
}

176 
	#Clock_driv_timecouÁ_tick
(è
	`Íc22xx_tc_tick
()

	)

179 
	~"../../../../libb¥/sh¬ed/þockdrv_shl.h
"

	@src/lib/libcpu/arm/lpc22xx/include/lpc22xx.h

10 #iâdeà
__LPC22XX_H__


11 
	#__LPC22XX_H__


	)

13 
	~<¡dt.h
>

16 
	#BCFG0
 (*((vÞ©*è0xFFE00000)è

	)

17 
	#BCFG1
 (*((vÞ©*è0xFFE00004)è

	)

18 
	#BCFG2
 (*((vÞ©*è0xFFE00008)è

	)

19 
	#BCFG3
 (*((vÞ©*è0xFFE0000C)è

	)

22 
	#EXTINT
 (*((vÞ©*è0xE01FC140))

	)

23 
	#EXTWAKE
 (*((vÞ©*è0xE01FC144))

	)

24 #ifdeà 
CONFIG_ARCH_LPC22xx


25 
	#EXTMODE
 (*((vÞ©*è0xE01FC148)è

	)

26 
	#EXTPOLAR
 (*((vÞ©*è0xE01FC14C)è

	)

30 
	#MEMMAP
 (*((vÞ©*è0xE01FC040))

	)

33 
	#PLLCON
 (*((vÞ©*è0xE01FC080))

	)

34 
	#PLLCFG
 (*((vÞ©*è0xE01FC084))

	)

35 
	#PLLSTAT
 (*((vÞ©*è0xE01FC088))

	)

36 
	#PLLFEED
 (*((vÞ©*è0xE01FC08C))

	)

39 
	#PCON
 (*((vÞ©*è0xE01FC0C0))

	)

40 
	#PCONP
 (*((vÞ©*è0xE01FC0C4))

	)

43 
	#VPBDIV
 (*((vÞ©*è0xE01FC100))

	)

46 
	#MAMCR
 (*((vÞ©*è0xE01FC000))

	)

47 
	#MAMTIM
 (*((vÞ©*è0xE01FC004))

	)

50 
	#VICIRQStus
 (*((vÞ©*è0xFFFFF000))

	)

51 
	#VICFIQStus
 (*((vÞ©*è0xFFFFF004))

	)

52 
	#VICRawIÁr
 (*((vÞ©*è0xFFFFF008))

	)

53 
	#VICIÁSeù
 (*((vÞ©*è0xFFFFF00C))

	)

54 
	#VICIÁEÇbË
 (*((vÞ©*è0xFFFFF010))

	)

55 
	#VICIÁEnCÌ
 (*((vÞ©*è0xFFFFF014))

	)

56 
	#VICSoáIÁ
 (*((vÞ©*è0xFFFFF018))

	)

57 
	#VICSoáIÁCË¬
 (*((vÞ©*è0xFFFFF01C))

	)

58 
	#VICPrÙeùiÚ
 (*((vÞ©*è0xFFFFF020))

	)

59 
	#VICVeùAddr
 (*((vÞ©*è0xFFFFF030))

	)

60 
	#VICDefVeùAddr
 (*((vÞ©*è0xFFFFF034))

	)

62 
	#VICVeùAddrBa£
 0xFFFFF100

	)

63 
	#VICVeùAddr0
 (*((vÞ©*è0xFFFFF100))

	)

64 
	#VICVeùAddr1
 (*((vÞ©*è0xFFFFF104))

	)

65 
	#VICVeùAddr2
 (*((vÞ©*è0xFFFFF108))

	)

66 
	#VICVeùAddr3
 (*((vÞ©*è0xFFFFF10C))

	)

67 
	#VICVeùAddr4
 (*((vÞ©*è0xFFFFF110))

	)

68 
	#VICVeùAddr5
 (*((vÞ©*è0xFFFFF114))

	)

69 
	#VICVeùAddr6
 (*((vÞ©*è0xFFFFF118))

	)

70 
	#VICVeùAddr7
 (*((vÞ©*è0xFFFFF11C))

	)

71 
	#VICVeùAddr8
 (*((vÞ©*è0xFFFFF120))

	)

72 
	#VICVeùAddr9
 (*((vÞ©*è0xFFFFF124))

	)

73 
	#VICVeùAddr10
 (*((vÞ©*è0xFFFFF128))

	)

74 
	#VICVeùAddr11
 (*((vÞ©*è0xFFFFF12C))

	)

75 
	#VICVeùAddr12
 (*((vÞ©*è0xFFFFF130))

	)

76 
	#VICVeùAddr13
 (*((vÞ©*è0xFFFFF134))

	)

77 
	#VICVeùAddr14
 (*((vÞ©*è0xFFFFF138))

	)

78 
	#VICVeùAddr15
 (*((vÞ©*è0xFFFFF13C))

	)

80 
	#VICVeùCÁlBa£
 0xFFFFF200

	)

81 
	#VICVeùCÁl0
 (*((vÞ©*è0xFFFFF200))

	)

82 
	#VICVeùCÁl1
 (*((vÞ©*è0xFFFFF204))

	)

83 
	#VICVeùCÁl2
 (*((vÞ©*è0xFFFFF208))

	)

84 
	#VICVeùCÁl3
 (*((vÞ©*è0xFFFFF20C))

	)

85 
	#VICVeùCÁl4
 (*((vÞ©*è0xFFFFF210))

	)

86 
	#VICVeùCÁl5
 (*((vÞ©*è0xFFFFF214))

	)

87 
	#VICVeùCÁl6
 (*((vÞ©*è0xFFFFF218))

	)

88 
	#VICVeùCÁl7
 (*((vÞ©*è0xFFFFF21C))

	)

89 
	#VICVeùCÁl8
 (*((vÞ©*è0xFFFFF220))

	)

90 
	#VICVeùCÁl9
 (*((vÞ©*è0xFFFFF224))

	)

91 
	#VICVeùCÁl10
 (*((vÞ©*è0xFFFFF228))

	)

92 
	#VICVeùCÁl11
 (*((vÞ©*è0xFFFFF22C))

	)

93 
	#VICVeùCÁl12
 (*((vÞ©*è0xFFFFF230))

	)

94 
	#VICVeùCÁl13
 (*((vÞ©*è0xFFFFF234))

	)

95 
	#VICVeùCÁl14
 (*((vÞ©*è0xFFFFF238))

	)

96 
	#VICVeùCÁl15
 (*((vÞ©*è0xFFFFF23C))

	)

99 
	#PINSEL0
 (*((vÞ©*è0xE002C000))

	)

100 
	#PINSEL1
 (*((vÞ©*è0xE002C004))

	)

102 
	#PINSEL2
 (*((vÞ©*è0xE002C014)è

	)

106 #iâdeà
CONFIG_ARCH_LPC22xx


108 
	#IOPIN
 (*((vÞ©*è0xE0028000)è

	)

109 
	#IOSET
 (*((vÞ©*è0xE0028004)è

	)

110 
	#IODIR
 (*((vÞ©*è0xE0028008)è

	)

111 
	#IOCLR
 (*((vÞ©*è0xE002800C)è

	)

115 #ifdeà
CONFIG_ARCH_LPC22xx


116 
	#IO0PIN
 (*((vÞ©*è0xE0028000)è

	)

117 
	#IO0SET
 (*((vÞ©*è0xE0028004)è

	)

118 
	#IO0DIR
 (*((vÞ©*è0xE0028008)è

	)

119 
	#IO0CLR
 (*((vÞ©*è0xE002800C)è

	)

121 
	#IO1PIN
 (*((vÞ©*è0xE0028010)è

	)

122 
	#IO1SET
 (*((vÞ©*è0xE0028014)è

	)

123 
	#IO1DIR
 (*((vÞ©*è0xE0028018)è

	)

124 
	#IO1CLR
 (*((vÞ©*è0xE002801C)è

	)

127 #ifdeà
CONFIG_ARCH_LPC22xx


129 
	#IO2PIN
 (*((vÞ©*è0xE0028020)è

	)

130 
	#IO2SET
 (*((vÞ©*è0xE0028024)è

	)

131 
	#IO2DIR
 (*((vÞ©*è0xE0028028)è

	)

132 
	#IO2CLR
 (*((vÞ©*è0xE002802C)è

	)

134 
	#IO3PIN
 (*((vÞ©*è0xE0028030)è

	)

135 
	#IO3SET
 (*((vÞ©*è0xE0028034)è

	)

136 
	#IO3DIR
 (*((vÞ©*è0xE0028038)è

	)

137 
	#IO3CLR
 (*((vÞ©*è0xE002803C)è

	)

142 
	#U0RBR
 (*((vÞ©*è0xE000C000))

	)

143 
	#U0THR
 (*((vÞ©*è0xE000C000))

	)

144 
	#U0IER
 (*((vÞ©*è0xE000C004))

	)

145 
	#U0IIR
 (*((vÞ©*è0xE000C008))

	)

146 
	#U0FCR
 (*((vÞ©*è0xE000C008))

	)

147 
	#U0LCR
 (*((vÞ©*è0xE000C00C))

	)

148 
	#U0LSR
 (*((vÞ©*è0xE000C014))

	)

149 
	#U0SCR
 (*((vÞ©*è0xE000C01C))

	)

150 
	#U0DLL
 (*((vÞ©*è0xE000C000))

	)

151 
	#U0DLM
 (*((vÞ©*è0xE000C004))

	)

154 
	#U1RBR
 (*((vÞ©*è0xE0010000))

	)

155 
	#U1THR
 (*((vÞ©*è0xE0010000))

	)

156 
	#U1IER
 (*((vÞ©*è0xE0010004))

	)

157 
	#U1IIR
 (*((vÞ©*è0xE0010008))

	)

158 
	#U1FCR
 (*((vÞ©*è0xE0010008))

	)

159 
	#U1LCR
 (*((vÞ©*è0xE001000C))

	)

160 
	#U1MCR
 (*((vÞ©*è0xE0010010))

	)

161 
	#U1LSR
 (*((vÞ©*è0xE0010014))

	)

162 
	#U1MSR
 (*((vÞ©*è0xE0010018))

	)

163 
	#U1SCR
 (*((vÞ©*è0xE001001C))

	)

164 
	#U1DLL
 (*((vÞ©*è0xE0010000))

	)

165 
	#U1DLM
 (*((vÞ©*è0xE0010004))

	)

168 
	#I2CONSET
 (*((vÞ©*è0xE001C000))

	)

169 
	#I2STAT
 (*((vÞ©*è0xE001C004))

	)

170 
	#I2DAT
 (*((vÞ©*è0xE001C008))

	)

171 
	#I2ADR
 (*((vÞ©*è0xE001C00C))

	)

172 
	#I2SCLH
 (*((vÞ©*è0xE001C010))

	)

173 
	#I2SCLL
 (*((vÞ©*è0xE001C014))

	)

174 
	#I2CONCLR
 (*((vÞ©*è0xE001C018))

	)

178 
	#SPI_SPCR
 (*((vÞ©*è0xE0020000))

	)

179 
	#SPI_SPSR
 (*((vÞ©*è0xE0020004))

	)

180 
	#SPI_SPDR
 (*((vÞ©*è0xE0020008))

	)

181 
	#SPI_SPCCR
 (*((vÞ©*è0xE002000C))

	)

182 
	#SPI_SPINT
 (*((vÞ©*è0xE002001C))

	)

184 #ifdeà
CONFIG_ARCH_LPC22xx


185 
	#S0PCR
 (*((vÞ©*è0xE0020000)è

	)

186 
	#S0PSR
 (*((vÞ©*è0xE0020004)è

	)

187 
	#S0PDR
 (*((vÞ©*è0xE0020008)è

	)

188 
	#S0PCCR
 (*((vÞ©*è0xE002000C)è

	)

189 
	#S0PINT
 (*((vÞ©*è0xE002001C)è

	)

191 
	#S1PCR
 (*((vÞ©*è0xE0030000)è

	)

192 
	#S1PSR
 (*((vÞ©*è0xE0030004)è

	)

193 
	#S1PDR
 (*((vÞ©*è0xE0030008)è

	)

194 
	#S1PCCR
 (*((vÞ©*è0xE003000C)è

	)

195 
	#S1PINT
 (*((vÞ©*è0xE003001C)è

	)

198 
	#CAN1MOD
 (*((vÞ©*è0xE0044000)è

	)

199 
	#CAN1CMR
 (*((vÞ©*è0xE0044004)è

	)

200 
	#CAN1GSR
 (*((vÞ©*è0xE0044008)è

	)

201 
	#CAN1ICR
 (*((vÞ©*è0xE004400C)è

	)

202 
	#CAN1IER
 (*((vÞ©*è0xE0044010)è

	)

203 
	#CAN1BTR
 (*((vÞ©*è0xE0044014)è

	)

204 
	#CAN1EWL
 (*((vÞ©*è0xE004401C)è

	)

205 
	#CAN1SR
 (*((vÞ©*è0xE0044020)è

	)

206 
	#CAN1RFS
 (*((vÞ©*è0xE0044024)è

	)

207 
	#CAN1RDA
 (*((vÞ©*è0xE0044028)è

	)

208 
	#CAN1RDB
 (*((vÞ©*è0xE004402C)è

	)

209 
	#CAN1TFI1
 (*((vÞ©*è0xE0044030)è

	)

210 
	#CAN1TID1
 (*((vÞ©*è0xE0044034)è

	)

211 
	#CAN1TDA1
 (*((vÞ©*è0xE0044038)è

	)

212 
	#CAN1TDB1
 (*((vÞ©*è0xE004403C)è

	)

213 
	#CAN1TFI2
 (*((vÞ©*è0xE0044040)è

	)

214 
	#CAN1TID2
 (*((vÞ©*è0xE0044044)è

	)

215 
	#CAN1TDA2
 (*((vÞ©*è0xE0044048)è

	)

216 
	#CAN1TDB2
 (*((vÞ©*è0xE004404C)è

	)

217 
	#CAN1TFI3
 (*((vÞ©*è0xE0044050)è

	)

218 
	#CAN1TID3
 (*((vÞ©*è0xE0044054)è

	)

219 
	#CAN1TDA3
 (*((vÞ©*è0xE0044058)è

	)

220 
	#CAN1TDB3
 (*((vÞ©*è0xE004405C)è

	)

222 
	#CAN2MOD
 (*((vÞ©*è0xE0048000)è

	)

223 
	#CAN2CMR
 (*((vÞ©*è0xE0048004)è

	)

224 
	#CAN2GSR
 (*((vÞ©*è0xE0048008)è

	)

225 
	#CAN2ICR
 (*((vÞ©*è0xE004800C)è

	)

226 
	#CAN2IER
 (*((vÞ©*è0xE0048010)è

	)

227 
	#CAN2BTR
 (*((vÞ©*è0xE0048014)è

	)

228 
	#CAN2EWL
 (*((vÞ©*è0xE004801C)è

	)

229 
	#CAN2SR
 (*((vÞ©*è0xE0048020)è

	)

230 
	#CAN2RFS
 (*((vÞ©*è0xE0048024)è

	)

231 
	#CAN2RDA
 (*((vÞ©*è0xE0048028)è

	)

232 
	#CAN2RDB
 (*((vÞ©*è0xE004802C)è

	)

233 
	#CAN2TFI1
 (*((vÞ©*è0xE0048030)è

	)

234 
	#CAN2TID1
 (*((vÞ©*è0xE0048034)è

	)

235 
	#CAN2TDA1
 (*((vÞ©*è0xE0048038)è

	)

236 
	#CAN2TDB1
 (*((vÞ©*è0xE004803C)è

	)

237 
	#CAN2TFI2
 (*((vÞ©*è0xE0048040)è

	)

238 
	#CAN2TID2
 (*((vÞ©*è0xE0048044)è

	)

239 
	#CAN2TDA2
 (*((vÞ©*è0xE0048048)è

	)

240 
	#CAN2TDB2
 (*((vÞ©*è0xE004804C)è

	)

241 
	#CAN2TFI3
 (*((vÞ©*è0xE0048050)è

	)

242 
	#CAN2TID3
 (*((vÞ©*è0xE0048054)è

	)

243 
	#CAN2TDA3
 (*((vÞ©*è0xE0048058)è

	)

244 
	#CAN2TDB3
 (*((vÞ©*è0xE004805C)è

	)

246 
	#CAN3MOD
 (*((vÞ©*è0xE004C000)è

	)

247 
	#CAN3CMR
 (*((vÞ©*è0xE004C004)è

	)

248 
	#CAN3GSR
 (*((vÞ©*è0xE004C008)è

	)

249 
	#CAN3ICR
 (*((vÞ©*è0xE004C00C)è

	)

250 
	#CAN3IER
 (*((vÞ©*è0xE004C010)è

	)

251 
	#CAN3BTR
 (*((vÞ©*è0xE004C014)è

	)

252 
	#CAN3EWL
 (*((vÞ©*è0xE004C01C)è

	)

253 
	#CAN3SR
 (*((vÞ©*è0xE004C020)è

	)

254 
	#CAN3RFS
 (*((vÞ©*è0xE004C024)è

	)

255 
	#CAN3RDA
 (*((vÞ©*è0xE004C028)è

	)

256 
	#CAN3RDB
 (*((vÞ©*è0xE004C02C)è

	)

257 
	#CAN3TFI1
 (*((vÞ©*è0xE004C030)è

	)

258 
	#CAN3TID1
 (*((vÞ©*è0xE004C034)è

	)

259 
	#CAN3TDA1
 (*((vÞ©*è0xE004C038)è

	)

260 
	#CAN3TDB1
 (*((vÞ©*è0xE004C03C)è

	)

261 
	#CAN3TFI2
 (*((vÞ©*è0xE004C040)è

	)

262 
	#CAN3TID2
 (*((vÞ©*è0xE004C044)è

	)

263 
	#CAN3TDA2
 (*((vÞ©*è0xE004C048)è

	)

264 
	#CAN3TDB2
 (*((vÞ©*è0xE004C04C)è

	)

265 
	#CAN3TFI3
 (*((vÞ©*è0xE004C050)è

	)

266 
	#CAN3TID3
 (*((vÞ©*è0xE004C054)è

	)

267 
	#CAN3TDA3
 (*((vÞ©*è0xE004C058)è

	)

268 
	#CAN3TDB3
 (*((vÞ©*è0xE004C05C)è

	)

270 
	#CAN4MOD
 (*((vÞ©*è0xE0050000)è

	)

271 
	#CAN4CMR
 (*((vÞ©*è0xE0050004)è

	)

272 
	#CAN4GSR
 (*((vÞ©*è0xE0050008)è

	)

273 
	#CAN4ICR
 (*((vÞ©*è0xE005000C)è

	)

274 
	#CAN4IER
 (*((vÞ©*è0xE0050010)è

	)

275 
	#CAN4BTR
 (*((vÞ©*è0xE0050014)è

	)

276 
	#CAN4EWL
 (*((vÞ©*è0xE005001C)è

	)

277 
	#CAN4SR
 (*((vÞ©*è0xE0050020)è

	)

278 
	#CAN4RFS
 (*((vÞ©*è0xE0050024)è

	)

279 
	#CAN4RDA
 (*((vÞ©*è0xE0050028)è

	)

280 
	#CAN4RDB
 (*((vÞ©*è0xE005002C)è

	)

281 
	#CAN4TFI1
 (*((vÞ©*è0xE0050030)è

	)

282 
	#CAN4TID1
 (*((vÞ©*è0xE0050034)è

	)

283 
	#CAN4TDA1
 (*((vÞ©*è0xE0050038)è

	)

284 
	#CAN4TDB1
 (*((vÞ©*è0xE005003C)è

	)

285 
	#CAN4TFI2
 (*((vÞ©*è0xE0050040)è

	)

286 
	#CAN4TID2
 (*((vÞ©*è0xE0050044)è

	)

287 
	#CAN4TDA2
 (*((vÞ©*è0xE0050048)è

	)

288 
	#CAN4TDB2
 (*((vÞ©*è0xE005004C)è

	)

289 
	#CAN4TFI3
 (*((vÞ©*è0xE0050050)è

	)

290 
	#CAN4TID3
 (*((vÞ©*è0xE0050054)è

	)

291 
	#CAN4TDA3
 (*((vÞ©*è0xE0050058)è

	)

292 
	#CAN4TDB3
 (*((vÞ©*è0xE005005C)è

	)

294 
	#CAN5MOD
 (*((vÞ©*è0xE0054000)è

	)

295 
	#CAN5CMR
 (*((vÞ©*è0xE0054004)è

	)

296 
	#CAN5GSR
 (*((vÞ©*è0xE0054008)è

	)

297 
	#CAN5ICR
 (*((vÞ©*è0xE005400C)è

	)

298 
	#CAN5IER
 (*((vÞ©*è0xE0054010)è

	)

299 
	#CAN5BTR
 (*((vÞ©*è0xE0054014)è

	)

300 
	#CAN5EWL
 (*((vÞ©*è0xE005401C)è

	)

301 
	#CAN5SR
 (*((vÞ©*è0xE0054020)è

	)

302 
	#CAN5RFS
 (*((vÞ©*è0xE0054024)è

	)

303 
	#CAN5RDA
 (*((vÞ©*è0xE0054028)è

	)

304 
	#CAN5RDB
 (*((vÞ©*è0xE005402C)è

	)

305 
	#CAN5TFI1
 (*((vÞ©*è0xE0054030)è

	)

306 
	#CAN5TID1
 (*((vÞ©*è0xE0054034)è

	)

307 
	#CAN5TDA1
 (*((vÞ©*è0xE0054038)è

	)

308 
	#CAN5TDB1
 (*((vÞ©*è0xE005403C)è

	)

309 
	#CAN5TFI2
 (*((vÞ©*è0xE0054040)è

	)

310 
	#CAN5TID2
 (*((vÞ©*è0xE0054044)è

	)

311 
	#CAN5TDA2
 (*((vÞ©*è0xE0054048)è

	)

312 
	#CAN5TDB2
 (*((vÞ©*è0xE005404C)è

	)

313 
	#CAN5TFI3
 (*((vÞ©*è0xE0054050)è

	)

314 
	#CAN5TID3
 (*((vÞ©*è0xE0054054)è

	)

315 
	#CAN5TDA3
 (*((vÞ©*è0xE0054058)è

	)

316 
	#CAN5TDB3
 (*((vÞ©*è0xE005405C)è

	)

318 #ifdeà
CONFIG_ARCH_LPC22xx


319 
	#CAN6MOD
 (*((vÞ©*è0xE0058000)è

	)

320 
	#CAN6CMR
 (*((vÞ©*è0xE0058004)è

	)

321 
	#CAN6GSR
 (*((vÞ©*è0xE0058008)è

	)

322 
	#CAN6ICR
 (*((vÞ©*è0xE005800C)è

	)

323 
	#CAN6IER
 (*((vÞ©*è0xE0058010)è

	)

324 
	#CAN6BTR
 (*((vÞ©*è0xE0058014)è

	)

325 
	#CAN6EWL
 (*((vÞ©*è0xE005801C)è

	)

326 
	#CAN6SR
 (*((vÞ©*è0xE0058020)è

	)

327 
	#CAN6RFS
 (*((vÞ©*è0xE0058024)è

	)

328 
	#CAN6RDA
 (*((vÞ©*è0xE0058028)è

	)

329 
	#CAN6RDB
 (*((vÞ©*è0xE005802C)è

	)

330 
	#CAN6TFI1
 (*((vÞ©*è0xE0058030)è

	)

331 
	#CAN6TID1
 (*((vÞ©*è0xE0058034)è

	)

332 
	#CAN6TDA1
 (*((vÞ©*è0xE0058038)è

	)

333 
	#CAN6TDB1
 (*((vÞ©*è0xE005803C)è

	)

334 
	#CAN6TFI2
 (*((vÞ©*è0xE0058040)è

	)

335 
	#CAN6TID2
 (*((vÞ©*è0xE0058044)è

	)

336 
	#CAN6TDA2
 (*((vÞ©*è0xE0058048)è

	)

337 
	#CAN6TDB2
 (*((vÞ©*è0xE005804C)è

	)

338 
	#CAN6TFI3
 (*((vÞ©*è0xE0058050)è

	)

339 
	#CAN6TID3
 (*((vÞ©*è0xE0058054)è

	)

340 
	#CAN6TDA3
 (*((vÞ©*è0xE0058058)è

	)

341 
	#CAN6TDB3
 (*((vÞ©*è0xE005805C)è

	)

344 
	#CANTxSR
 (*((vÞ©*è0xE0040000)è

	)

345 
	#CANRxSR
 (*((vÞ©*è0xE0040004)è

	)

346 
	#CANMSR
 (*((vÞ©*è0xE0040008)è

	)

348 
	#CANAFMR
 (*((vÞ©*è0xE003C000)è

	)

349 
	#CANSFF_§
 (*((vÞ©*è0xE003C004)è

	)

350 
	#CANSFF_GRP_§
 (*((vÞ©*è0xE003C008)è

	)

351 
	#CANEFF_§
 (*((vÞ©*è0xE003C00C)è

	)

352 
	#CANEFF_GRP_§
 (*((vÞ©*è0xE003C010)è

	)

353 
	#CANENDofTabË
 (*((vÞ©*è0xE003C014)è

	)

354 
	#CANLUTrAd
 (*((vÞ©*è0xE003C018)è

	)

355 
	#CANLUTr
 (*((vÞ©*è0xE003C01C)è

	)

357 
	#CANAFRAM
 (*((vÞ©*è0xE0038000))

	)

361 
	#T0IR
 (*((vÞ©*è0xE0004000))

	)

362 
	#T0TCR
 (*((vÞ©*è0xE0004004))

	)

363 
	#T0TC
 (*((vÞ©*è0xE0004008))

	)

364 
	#T0PR
 (*((vÞ©*è0xE000400C))

	)

365 
	#T0PC
 (*((vÞ©*è0xE0004010))

	)

366 
	#T0MCR
 (*((vÞ©*è0xE0004014))

	)

367 
	#T0MR0
 (*((vÞ©*è0xE0004018))

	)

368 
	#T0MR1
 (*((vÞ©*è0xE000401C))

	)

369 
	#T0MR2
 (*((vÞ©*è0xE0004020))

	)

370 
	#T0MR3
 (*((vÞ©*è0xE0004024))

	)

371 
	#T0CCR
 (*((vÞ©*è0xE0004028))

	)

372 
	#T0CR0
 (*((vÞ©*è0xE000402C))

	)

373 
	#T0CR1
 (*((vÞ©*è0xE0004030))

	)

374 
	#T0CR2
 (*((vÞ©*è0xE0004034))

	)

375 
	#T0CR3
 (*((vÞ©*è0xE0004038))

	)

376 
	#T0EMR
 (*((vÞ©*è0xE000403C))

	)

379 
	#T1IR
 (*((vÞ©*è0xE0008000))

	)

380 
	#T1TCR
 (*((vÞ©*è0xE0008004))

	)

381 
	#T1TC
 (*((vÞ©*è0xE0008008))

	)

382 
	#T1PR
 (*((vÞ©*è0xE000800C))

	)

383 
	#T1PC
 (*((vÞ©*è0xE0008010))

	)

384 
	#T1MCR
 (*((vÞ©*è0xE0008014))

	)

385 
	#T1MR0
 (*((vÞ©*è0xE0008018))

	)

386 
	#T1MR1
 (*((vÞ©*è0xE000801C))

	)

387 
	#T1MR2
 (*((vÞ©*è0xE0008020))

	)

388 
	#T1MR3
 (*((vÞ©*è0xE0008024))

	)

389 
	#T1CCR
 (*((vÞ©*è0xE0008028))

	)

390 
	#T1CR0
 (*((vÞ©*è0xE000802C))

	)

391 
	#T1CR1
 (*((vÞ©*è0xE0008030))

	)

392 
	#T1CR2
 (*((vÞ©*è0xE0008034))

	)

393 
	#T1CR3
 (*((vÞ©*è0xE0008038))

	)

394 
	#T1EMR
 (*((vÞ©*è0xE000803C))

	)

397 
	#PWMIR
 (*((vÞ©*è0xE0014000))

	)

398 
	#PWMTCR
 (*((vÞ©*è0xE0014004))

	)

399 
	#PWMTC
 (*((vÞ©*è0xE0014008))

	)

400 
	#PWMPR
 (*((vÞ©*è0xE001400C))

	)

401 
	#PWMPC
 (*((vÞ©*è0xE0014010))

	)

402 
	#PWMMCR
 (*((vÞ©*è0xE0014014))

	)

403 
	#PWMMR0
 (*((vÞ©*è0xE0014018))

	)

404 
	#PWMMR1
 (*((vÞ©*è0xE001401C))

	)

405 
	#PWMMR2
 (*((vÞ©*è0xE0014020))

	)

406 
	#PWMMR3
 (*((vÞ©*è0xE0014024))

	)

407 
	#PWMMR4
 (*((vÞ©*è0xE0014040))

	)

408 
	#PWMMR5
 (*((vÞ©*è0xE0014044))

	)

409 
	#PWMMR6
 (*((vÞ©*è0xE0014048))

	)

410 
	#PWMPCR
 (*((vÞ©*è0xE001404C))

	)

411 
	#PWMLER
 (*((vÞ©*è0xE0014050))

	)

414 #iâdeà
CONFIG_ARCH_LPC2104


415 
	#ADCR
 (*((vÞ©*è0xE0034000)è

	)

416 
	#ADDR
 (*((vÞ©*è0xE0034004)è

	)

420 
	#ILR
 (*((vÞ©*è0xE0024000))

	)

421 
	#CTC
 (*((vÞ©*è0xE0024004))

	)

422 
	#CCR
 (*((vÞ©*è0xE0024008))

	)

423 
	#CIIR
 (*((vÞ©*è0xE002400C))

	)

424 
	#AMR
 (*((vÞ©*è0xE0024010))

	)

425 
	#CTIME0
 (*((vÞ©*è0xE0024014))

	)

426 
	#CTIME1
 (*((vÞ©*è0xE0024018))

	)

427 
	#CTIME2
 (*((vÞ©*è0xE002401C))

	)

428 
	#SEC
 (*((vÞ©*è0xE0024020))

	)

429 
	#MIN
 (*((vÞ©*è0xE0024024))

	)

430 
	#HOUR
 (*((vÞ©*è0xE0024028))

	)

431 
	#DOM
 (*((vÞ©*è0xE002402C))

	)

432 
	#DOW
 (*((vÞ©*è0xE0024030))

	)

433 
	#DOY
 (*((vÞ©*è0xE0024034))

	)

434 
	#MONTH
 (*((vÞ©*è0xE0024038))

	)

435 
	#YEAR
 (*((vÞ©*è0xE002403C))

	)

436 
	#ALSEC
 (*((vÞ©*è0xE0024060))

	)

437 
	#ALMIN
 (*((vÞ©*è0xE0024064))

	)

438 
	#ALHOUR
 (*((vÞ©*è0xE0024068))

	)

439 
	#ALDOM
 (*((vÞ©*è0xE002406C))

	)

440 
	#ALDOW
 (*((vÞ©*è0xE0024070))

	)

441 
	#ALDOY
 (*((vÞ©*è0xE0024074))

	)

442 
	#ALMON
 (*((vÞ©*è0xE0024078))

	)

443 
	#ALYEAR
 (*((vÞ©*è0xE002407C))

	)

444 
	#PREINT
 (*((vÞ©*è0xE0024080))

	)

445 
	#PREFRAC
 (*((vÞ©*è0xE0024084))

	)

448 
	#WDMOD
 (*((vÞ©*è0xE0000000))

	)

449 
	#WDTC
 (*((vÞ©*è0xE0000004))

	)

450 
	#WDFEED
 (*((vÞ©*è0xE0000008))

	)

451 
	#WDTV
 (*((vÞ©*è0xE000000C))

	)

456 
	#REG_U0RBR
 0xE000C000

	)

457 
	#REG_U1RBR
 0xE0010000

	)

460 
	#REG_PLLCON
 0xE01FC080

	)

461 
	#REG_PLLCFG
 0xE01FC084

	)

462 
	#REG_PLLSTAT
 0xE01FC088

	)

463 
	#REG_PLLFEED
 0xE01FC08C

	)

467 
	#REG_PCON
 0xE01FC0C0

	)

468 
	#REG_PCOMP
 0xE01FC0C4

	)

469 
	#REG_PINSEL0
 0xE002C000

	)

470 
	#REG_MEMMAP
 0xE01FC040

	)

471 
	#REG_PLLSTAT
 0xE01FC088

	)

472 
	#REG_VPBDIV
 0xE01FC100

	)

	@src/lib/libcpu/arm/lpc22xx/irq/bsp_irq_init.c

8 
	~<q.h
>

9 
	~<b¥.h
>

10 
	~<Íc22xx.h
>

17 
	$BSP_¹ems_q_mngt_
()

19 *
veùÜTabË
;

20 
i
;

23 
VICIÁEnCÌ
 = 0xFFFFFFFF;

25 
veùÜTabË
 = (*è
VECTOR_TABLE
;

27 
i
=0; i<
BSP_MAX_INT
; i++) {

28 *(
veùÜTabË
 + 
i
èð()(
deçuÉ_t_hªdËr
);

34 
IRQ_VECTOR_ADDR
 = 0xE59FF018;

39 
FIQ_VECTOR_ADDR
 = 0xE59FF018;

45 
UNDEFINED_INSTRUCTION_VECTOR_ADDR
 = 0xEAFFFFFE;

46 
SOFTWARE_INTERRUPT_VECTOR_ADDR
 = 0xEAFFFFFE;

47 
PREFETCH_ABORT_VECTOR_ADDR
 = 0xEAFFFFFE;

55 
DATA_ABORT_VECTOR_ADDR
 = 0xE59FF018;

61 
VICPrÙeùiÚ
 = 0;

62 
VICIÁSeù
 = 0;

63 
VICVeùAddr
 = 0;

64 
	}
}

	@src/lib/libcpu/arm/lpc22xx/irq/irq.c

12 
	~<¹ems/scÜe/¬mv4.h
>

14 
	~<b¥.h
>

15 
	~<b¥/q.h
>

16 
	~<b¥/q-gic.h
>

18 
	~<Íc22xx.h
>

20 
	$b¥_¼u±_di¥©ch
()

22 
¹ems_veùÜ_numb
 
veùÜ
 = 31 - 
	`__but_þz
(
VICIRQStus
);

24 
	`b¥_¼u±_hªdËr_di¥©ch
(
veùÜ
);

26 
VICVeùAddr
 = 0;

27 
	}
}

29 
¹ems_¡©us_code
 
	$b¥_¼u±_veùÜ_abË
(
¹ems_veùÜ_numb
 
veùÜ
)

31 
VICIÁEÇbË
 |ð1 << 
veùÜ
;

33  
RTEMS_SUCCESSFUL
;

34 
	}
}

36 
¹ems_¡©us_code
 
	$b¥_¼u±_veùÜ_di§bË
(
¹ems_veùÜ_numb
 
veùÜ
)

38 
VICIÁEnCÌ
 = 1 << 
veùÜ
;

40  
RTEMS_SUCCESSFUL
;

41 
	}
}

43 
¹ems_¡©us_code
 
	$b¥_¼u±_çcy_lize
()

45 vÞ©
ut32_t
 *
ù¾
 = (vÞ©ut32_*è
VICVeùCÁlBa£
;

46 
size_t
 
i
 = 0;

49 
VICIÁEnCÌ
 = 0xffffffff;

52 
VICIÁSeù
 = 0;

55 
VICPrÙeùiÚ
 = 0;

57 
i
 = 0; i < 16; ++i) {

59 
ù¾
 [
i
] = 0;

62 
VICVeùAddr
 = 0;

66 
VICVeùAddr
 = 0;

69 
	`_CPU_ISR_¡®l_veùÜ
(
ARM_EXCEPTION_IRQ
, 
_ARMV4_Exû±iÚ_¼u±
, 
NULL
);

71  
RTEMS_SUCCESSFUL
;

72 
	}
}

	@src/lib/libcpu/arm/lpc22xx/irq/irq.h

13 #iâdeà
__IRQ_H__


14 
	#__IRQ_H__


	)

16 #iâdeà
__asm__


18 
	~<¹ems.h
>

19 
	~<¹ems/q.h
>

20 
	~<¹ems/q-exnsiÚ.h
>

25 
	#LPC22xx_INTERRUPT_WDINT
 0

	)

26 
	#LPC22xx_INTERRUPT_RSV0
 1

	)

27 
	#LPC22xx_INTERRUPT_DBGRX
 2

	)

28 
	#LPC22xx_INTERRUPT_DBGTX
 3

	)

29 
	#LPC22xx_INTERRUPT_TIMER0
 4

	)

30 
	#LPC22xx_INTERRUPT_TIMER1
 5

	)

31 
	#LPC22xx_INTERRUPT_UART0
 6

	)

32 
	#LPC22xx_INTERRUPT_UART1
 7

	)

33 
	#LPC22xx_INTERRUPT_PWM0
 8

	)

34 
	#LPC22xx_INTERRUPT_I2C
 9

	)

35 
	#LPC22xx_INTERRUPT_SPI0
 10

	)

36 
	#LPC22xx_INTERRUPT_SPI1
 11

	)

37 
	#LPC22xx_INTERRUPT_PLL
 12

	)

38 
	#LPC22xx_INTERRUPT_RTC
 13

	)

39 
	#LPC22xx_INTERRUPT_EINT0
 14

	)

40 
	#LPC22xx_INTERRUPT_EINT1
 15

	)

41 
	#LPC22xx_INTERRUPT_EINT2
 16

	)

42 
	#LPC22xx_INTERRUPT_EINT3
 17

	)

43 
	#LPC22xx_INTERRUPT_ADC
 18

	)

45 
	#LPC22xx_INTERRUPT_CANERR
 19

	)

46 
	#LPC22xx_INTERRUPT_CAN1TX
 20

	)

47 
	#LPC22xx_INTERRUPT_CAN1RX
 21

	)

48 
	#LPC22xx_INTERRUPT_CAN2TX
 22

	)

49 
	#LPC22xx_INTERRUPT_CAN2RX
 23

	)

50 
	#LPC22xx_INTERRUPT_CAN3TX
 24

	)

51 
	#LPC22xx_INTERRUPT_CAN3RX
 25

	)

52 
	#LPC22xx_INTERRUPT_CAN4TX
 26

	)

53 
	#LPC22xx_INTERRUPT_CAN4RX
 27

	)

54 
	#BSP_MAX_INT
 28

	)

56 
	#BSP_INTERRUPT_VECTOR_MIN
 0

	)

58 
	#BSP_INTERRUPT_VECTOR_MAX
 (
BSP_MAX_INT
 - 1)

	)

60 
	#UNDEFINED_INSTRUCTION_VECTOR_ADDR
 (*(
u_lÚg
 *)0x00000004L)

	)

61 
	#SOFTWARE_INTERRUPT_VECTOR_ADDR
 (*(
u_lÚg
 *)0x00000008L)

	)

62 
	#PREFETCH_ABORT_VECTOR_ADDR
 (*(
u_lÚg
 *)0x0000000CL)

	)

63 
	#DATA_ABORT_VECTOR_ADDR
 (*(
u_lÚg
 *)0x00000010L)

	)

64 
	#IRQ_VECTOR_ADDR
 (*(
u_lÚg
 *)0x00000018L)

	)

65 
	#FIQ_VECTOR_ADDR
 (*(
u_lÚg
 *)0x0000001CL)

	)

67 
	#DATA_ABORT_ISR_ADDR
 (*(
u_lÚg
 *)0x00000030L)

	)

68 
	#IRQ_ISR_ADDR
 (*(
u_lÚg
 *)0x00000038L)

	)

69 
	#FIQ_ISR_ADDR
 (*(
u_lÚg
 *)0x0000003CL)

	)

	@src/lib/libcpu/arm/lpc22xx/timer/lpc_timer.h

1 #iâdeà
__LPC_TIMER_H


2 
	#__LPC_TIMER_H


	)

11 
	#TCR_ENABLE_BIT
 0

	)

12 
	#TCR_RESET_BIT
 1

	)

16 
	#CH_MAXNUM
 4

	)

17 
	#CH0
 0

	)

18 
	#CH1
 1

	)

19 
	#CH2
 2

	)

20 
	#CH3
 3

	)

24 
	#CPCH_MAXNUM
 4

	)

25 
	#CPCH0
 0

	)

26 
	#CPCH1
 1

	)

27 
	#CPCH2
 2

	)

28 
	#CPCH3
 3

	)

31 
	#TimAùiÚ_IÁru±
 0x1

	)

32 
	#TimAùiÚ_Re£tTim
 0x2

	)

33 
	#TimAùiÚ_StÝTim
 0x4

	)

36 
	#TIMERMR0IÁ
 0x01

	)

37 
	#TIMERMR1IÁ
 0x02

	)

38 
	#TIMERMR2IÁ
 0x04

	)

39 
	#TIMERMR3IÁ
 0x08

	)

40 
	#TIMERCR0IÁ
 0x10

	)

41 
	#TIMERCR1IÁ
 0x20

	)

42 
	#TIMERCR2IÁ
 0x40

	)

43 
	#TIMERCR3IÁ
 0x80

	)

45 
	#TIMERALLIÁ
 0xFF

	)

	@src/lib/libcpu/arm/lpc22xx/timer/timer.c

16 
	~<b¥.h
>

17 
	~<¹ems.h
>

18 
	~<¹ems/btim.h
>

19 
	~<Íc22xx.h
>

20 
	~"Íc_tim.h
"

22 
ut32_t
 
	gg_¡¬t
;

23 
ut32_t
 
	gg_äeq
;

25 
boÞ
 
	gbchm¬k_tim_fd_avage_ovhd
;

31 
	$bchm¬k_tim_lize
( )

33 
g_äeq
 = 
LPC22xx_Fpþk
 / 1000;

34 
	}
}

46 
	#AVG_OVERHEAD
 0

	)

49 
	#LEAST_VALID
 1

	)

51 
bchm¬k_tim_t
 
	$bchm¬k_tim_»ad
( )

53  (
T0TC
/(
LPC22xx_Fpþk
/1000000));

59 
	}
}

61 
	$bchm¬k_tim_di§bË_subaùg_avage_ovhd
(
boÞ
 
fd_æag
)

63 
bchm¬k_tim_fd_avage_ovhd
 = 
fd_æag
;

64 
	}
}

	@src/lib/libcpu/arm/s3c24xx/clock/clockdrv.c

11 
	~<¹ems.h
>

12 
	~<b¥/q.h
>

13 
	~<b¥.h
>

14 
	~<s3c24xx.h
>

16 
Clock_i¤
(
¹ems_q_hdl_·¿m
 
¬g
);

17 
þock_i¤_Ú
(cÚ¡ 
¹ems_q_cÚÃù_d©a
 *
unu£d
);

18 
þock_i¤_off
(cÚ¡ 
¹ems_q_cÚÃù_d©a
 *
unu£d
);

19 
þock_i¤_is_Ú
(cÚ¡ 
¹ems_q_cÚÃù_d©a
 *
q
);

21 
¹ems_q_cÚÃù_d©a
 
	gþock_i¤_d©a
 = {

22 .
Çme
 = 
BSP_INT_TIMER4
,

23 .
	ghdl
 = 
Clock_i¤
,

24 .
	ghªdË
 = 
NULL
,

25 .
	gÚ
 = 
þock_i¤_Ú
,

26 .
	goff
 = 
þock_i¤_off
,

27 .
	gisOn
 = 
þock_i¤_is_Ú
,

35 
	#Clock_driv_suµÜt_©_tick
() \

37 
	`CË¬Pdg
(
BIT_TIMER4
); \

38 } 0)

	)

44 
	#Clock_driv_suµÜt_¡®l_i¤
Ð
_Ãw
, 
_Þd
 ) \

46 
_Þd
 = 
NULL
; \

47 
	`BSP_¡®l_¹ems_q_hªdËr
(&
þock_i¤_d©a
); \

48 } 0)

	)

62 
	#Clock_driv_suµÜt_lize_h¬dw¬e
() \

64 
ut32_t
 
ü
; \

65 
ut32_t
 
äeq
; \

67 
ü
=
rTCFG1
 & 0xFFF0FFFF; \

68 
rTCFG1
=(
ü
 | (3<<16)); \

69 
äeq
 = 
	`g_PCLK
(); \

71 
äeq
 = (freq /16)/16; \

72 
rTCNTB4
 = ((
äeq
 / 1000è* 
	`¹ems_cÚfigu¿tiÚ_g_miüo£cÚds_³r_tick
()) / 1000; \

74 
rINTMSK
&=~
BIT_TIMER4
; \

76 
ü
=
rTCON
 & 0xFF8FFFFF; \

77 
rTCON
=(
ü
|(0x6<<20)); \

78 
rTCON
=(
ü
|(0x5<<20)); \

79 } 0)

	)

87 
	#Clock_driv_suµÜt_shutdown_h¬dw¬e
() \

90 
	`BSP_»move_¹ems_q_hªdËr
(&
þock_i¤_d©a
); \

91 } 0)

	)

98 
	$þock_i¤_Ú
(cÚ¡ 
¹ems_q_cÚÃù_d©a
 *
unu£d
)

100 
	}
}

107 
	$þock_i¤_off
(cÚ¡ 
¹ems_q_cÚÃù_d©a
 *
unu£d
)

110 
	}
}

118 
	$þock_i¤_is_Ú
(cÚ¡ 
¹ems_q_cÚÃù_d©a
 *
q
)

121 
	}
}

123 
	#CLOCK_DRIVER_USE_DUMMY_TIMECOUNTER


	)

126 
	~"../../../../libb¥/sh¬ed/þockdrv_shl.h
"

	@src/lib/libcpu/arm/s3c24xx/clock/support.c

1 
	~<¹ems.h
>

2 
	~<b¥.h
>

3 
	~<s3c24xx.h
>

16 
ut32_t
 
	$g_FCLK
()

18 
ut32_t
 
r
, 
m
, 
p
, 
s
;

20 
r
 = 
rMPLLCON
;

21 
m
 = ((
r
 & 0xFF000) >> 12) + 8;

22 
p
 = ((
r
 & 0x003F0) >> 4) + 2;

23 
s
 = 
r
 & 0x3;

25 ((
BSP_OSC_FREQ
 * 
m
è/ (
p
 << 
s
));

26 
	}
}

29 
ut32_t
 
	$g_UCLK
()

31 
ut32_t
 
r
, 
m
, 
p
, 
s
;

33 
r
 = 
rUPLLCON
;

34 
m
 = ((
r
 & 0xFF000) >> 12) + 8;

35 
p
 = ((
r
 & 0x003F0) >> 4) + 2;

36 
s
 = 
r
 & 0x3;

38 ((
BSP_OSC_FREQ
 * 
m
è/ (
p
 << 
s
));

39 
	}
}

42 
ut32_t
 
	$g_HCLK
()

44 ià(
rCLKDIVN
 & 0x2)

45  
	`g_FCLK
()/2;

47  
	`g_FCLK
();

48 
	}
}

51 
ut32_t
 
	$g_PCLK
()

53 ià(
rCLKDIVN
 & 0x1)

54  
	`g_HCLK
()/2;

56  
	`g_HCLK
();

57 
	}
}

	@src/lib/libcpu/arm/s3c24xx/include/s3c2400.h

8 #iâdeà
S3C2400_H_


9 
	#S3C2400_H_


	)

12 
	#rINTOFFSET_ADDR
 0x14400014

	)

14 
	#rBWSCON
 (*(vÞ©*)0x14000000)

	)

15 
	#rBANKCON0
 (*(vÞ©*)0x14000004)

	)

16 
	#rBANKCON1
 (*(vÞ©*)0x14000008)

	)

17 
	#rBANKCON2
 (*(vÞ©*)0x1400000C)

	)

18 
	#rBANKCON3
 (*(vÞ©*)0x14000010)

	)

19 
	#rBANKCON4
 (*(vÞ©*)0x14000014)

	)

20 
	#rBANKCON5
 (*(vÞ©*)0x14000018)

	)

21 
	#rBANKCON6
 (*(vÞ©*)0x1400001C)

	)

22 
	#rBANKCON7
 (*(vÞ©*)0x14000020)

	)

23 
	#rREFRESH
 (*(vÞ©*)0x14000024)

	)

24 
	#rBANKSIZE
 (*(vÞ©*)0x14000028)

	)

25 
	#rMRSRB6
 (*(vÞ©*)0x1400002C)

	)

26 
	#rMRSRB7
 (*(vÞ©*)0x14000030)

	)

30 
	#rSRCPND
 (*(vÞ©*)0x14400000)

	)

31 
	#rINTMOD
 (*(vÞ©*)0x14400004)

	)

32 
	#rINTMSK
 (*(vÞ©*)0x14400008)

	)

33 
	#rPRIORITY
 (*(vÞ©*)0x1440000C)

	)

34 
	#rINTPND
 (*(vÞ©*)0x14400010)

	)

35 
	#rINTOFFSET
 (*(vÞ©*)0x14400014)

	)

39 
	#rDISRC0
 (*(vÞ©*)0x14600000)

	)

40 
	#rDIDST0
 (*(vÞ©*)0x14600004)

	)

41 
	#rDCON0
 (*(vÞ©*)0x14600008)

	)

42 
	#rDSTAT0
 (*(vÞ©*)0x1460000C)

	)

43 
	#rDCSRC0
 (*(vÞ©*)0x14600010)

	)

44 
	#rDCDST0
 (*(vÞ©*)0x14600014)

	)

45 
	#rDMASKTRIG0
 (*(vÞ©*)0x14600018)

	)

46 
	#rDISRC1
 (*(vÞ©*)0x14600020)

	)

47 
	#rDIDST1
 (*(vÞ©*)0x14600024)

	)

48 
	#rDCON1
 (*(vÞ©*)0x14600028)

	)

49 
	#rDSTAT1
 (*(vÞ©*)0x1460002C)

	)

50 
	#rDCSRC1
 (*(vÞ©*)0x14600030)

	)

51 
	#rDCDST1
 (*(vÞ©*)0x14600034)

	)

52 
	#rDMASKTRIG1
 (*(vÞ©*)0x14600038)

	)

53 
	#rDISRC2
 (*(vÞ©*)0x14600040)

	)

54 
	#rDIDST2
 (*(vÞ©*)0x14600044)

	)

55 
	#rDCON2
 (*(vÞ©*)0x14600048)

	)

56 
	#rDSTAT2
 (*(vÞ©*)0x1460004C)

	)

57 
	#rDCSRC2
 (*(vÞ©*)0x14600050)

	)

58 
	#rDCDST2
 (*(vÞ©*)0x14600054)

	)

59 
	#rDMASKTRIG2
 (*(vÞ©*)0x14600058)

	)

60 
	#rDISRC3
 (*(vÞ©*)0x14600060)

	)

61 
	#rDIDST3
 (*(vÞ©*)0x14600064)

	)

62 
	#rDCON3
 (*(vÞ©*)0x14600068)

	)

63 
	#rDSTAT3
 (*(vÞ©*)0x1460006C)

	)

64 
	#rDCSRC3
 (*(vÞ©*)0x14600070)

	)

65 
	#rDCDST3
 (*(vÞ©*)0x14600074)

	)

66 
	#rDMASKTRIG3
 (*(vÞ©*)0x14600078)

	)

70 
	#rLOCKTIME
 (*(vÞ©*)0x14800000)

	)

71 
	#rMPLLCON
 (*(vÞ©*)0x14800004)

	)

72 
	#rUPLLCON
 (*(vÞ©*)0x14800008)

	)

73 
	#rCLKCON
 (*(vÞ©*)0x1480000C)

	)

74 
	#rCLKSLOW
 (*(vÞ©*)0x14800010)

	)

75 
	#rCLKDIVN
 (*(vÞ©*)0x14800014)

	)

79 
	#rLCDCON1
 (*(vÞ©*)0x14A00000)

	)

80 
	#rLCDCON2
 (*(vÞ©*)0x14A00004)

	)

81 
	#rLCDCON3
 (*(vÞ©*)0x14A00008)

	)

82 
	#rLCDCON4
 (*(vÞ©*)0x14A0000C)

	)

83 
	#rLCDCON5
 (*(vÞ©*)0x14A00010)

	)

84 
	#rLCDSADDR1
 (*(vÞ©*)0x14A00014)

	)

85 
	#rLCDSADDR2
 (*(vÞ©*)0x14A00018)

	)

86 
	#rLCDSADDR3
 (*(vÞ©*)0x14A0001C)

	)

87 
	#rREDLUT
 (*(vÞ©*)0x14A00020)

	)

88 
	#rGREENLUT
 (*(vÞ©*)0x14A00024)

	)

89 
	#rBLUELUT
 (*(vÞ©*)0x14A00028)

	)

90 
	#rDP1_2
 (*(vÞ©*)0x14A0002C)

	)

91 
	#rDP4_7
 (*(vÞ©*)0x14A00030)

	)

92 
	#rDP3_5
 (*(vÞ©*)0x14A00034)

	)

93 
	#rDP2_3
 (*(vÞ©*)0x14A00038)

	)

94 
	#rDP5_7
 (*(vÞ©*)0x14A0003c)

	)

95 
	#rDP3_4
 (*(vÞ©*)0x14A00040)

	)

96 
	#rDP4_5
 (*(vÞ©*)0x14A00044)

	)

97 
	#rDP6_7
 (*(vÞ©*)0x14A00048)

	)

98 
	#rDITHMODE
 (*(vÞ©*)0x14A0004C)

	)

99 
	#rTPAL
 (*(vÞ©*)0x14A00050)

	)

100 
	#GP32_PALETTE
 (*(vÞ©*)0x14A00400è

	)

104 
	#rULCON0
 (*(vÞ©*)0x15000000)

	)

105 
	#rUCON0
 (*(vÞ©*)0x15000004)

	)

106 
	#rUFCON0
 (*(vÞ©*)0x15000008)

	)

107 
	#rUMCON0
 (*(vÞ©*)0x1500000C)

	)

108 
	#rUTRSTAT0
 (*(vÞ©*)0x15000010)

	)

109 
	#rUERSTAT0
 (*(vÞ©*)0x15000014)

	)

110 
	#rUFSTAT0
 (*(vÞ©*)0x15000018)

	)

111 
	#rUMSTAT0
 (*(vÞ©*)0x1500001C)

	)

112 
	#rUBRDIV0
 (*(vÞ©*)0x15000028)

	)

114 
	#rULCON1
 (*(vÞ©*)0x15004000)

	)

115 
	#rUCON1
 (*(vÞ©*)0x15004004)

	)

116 
	#rUFCON1
 (*(vÞ©*)0x15004008)

	)

117 
	#rUMCON1
 (*(vÞ©*)0x1500400C)

	)

118 
	#rUTRSTAT1
 (*(vÞ©*)0x15004010)

	)

119 
	#rUERSTAT1
 (*(vÞ©*)0x15004014)

	)

120 
	#rUFSTAT1
 (*(vÞ©*)0x15004018)

	)

121 
	#rUMSTAT1
 (*(vÞ©*)0x1500401C)

	)

122 
	#rUBRDIV1
 (*(vÞ©*)0x15004028)

	)

124 #ifdeà
__BIG_ENDIAN


125 
	#rUTXH0
 (*(vÞ©*)0x15000023)

	)

126 
	#rURXH0
 (*(vÞ©*)0x15000027)

	)

127 
	#rUTXH1
 (*(vÞ©*)0x15004023)

	)

128 
	#rURXH1
 (*(vÞ©*)0x15004027)

	)

130 
	#WrUTXH0
(
ch
è(*(vÞ©*)0x15000023)=()(ch)

	)

131 
	#RdURXH0
(è(*(vÞ©*)0x15000027)

	)

132 
	#WrUTXH1
(
ch
è(*(vÞ©*)0x15004023)=()(ch)

	)

133 
	#RdURXH1
(è(*(vÞ©*)0x15004027)

	)

135 
	#UTXH0
 (0x15000020+3è

	)

136 
	#URXH0
 (0x15000024+3)

	)

137 
	#UTXH1
 (0x15004020+3)

	)

138 
	#URXH1
 (0x15004024+3)

	)

141 
	#rUTXH0
 (*(vÞ©*)0x15000020)

	)

142 
	#rURXH0
 (*(vÞ©*)0x15000024)

	)

143 
	#rUTXH1
 (*(vÞ©*)0x15004020)

	)

144 
	#rURXH1
 (*(vÞ©*)0x15004024)

	)

146 
	#WrUTXH0
(
ch
è(*(vÞ©*)0x15000020)=()(ch)

	)

147 
	#RdURXH0
(è(*(vÞ©*)0x15000024)

	)

148 
	#WrUTXH1
(
ch
è(*(vÞ©*)0x15004020)=()(ch)

	)

149 
	#RdURXH1
(è(*(vÞ©*)0x15004024)

	)

151 
	#UTXH0
 (0x15000020è

	)

152 
	#URXH0
 (0x15000024)

	)

153 
	#UTXH1
 (0x15004020)

	)

154 
	#URXH1
 (0x15004024)

	)

159 
	#rTCFG0
 (*(vÞ©*)0x15100000)

	)

160 
	#rTCFG1
 (*(vÞ©*)0x15100004)

	)

161 
	#rTCON
 (*(vÞ©*)0x15100008)

	)

162 
	#rTCNTB0
 (*(vÞ©*)0x1510000C)

	)

163 
	#rTCMPB0
 (*(vÞ©*)0x15100010)

	)

164 
	#rTCNTO0
 (*(vÞ©*)0x15100014)

	)

165 
	#rTCNTB1
 (*(vÞ©*)0x15100018)

	)

166 
	#rTCMPB1
 (*(vÞ©*)0x1510001C)

	)

167 
	#rTCNTO1
 (*(vÞ©*)0x15100020)

	)

168 
	#rTCNTB2
 (*(vÞ©*)0x15100024)

	)

169 
	#rTCMPB2
 (*(vÞ©*)0x15100028)

	)

170 
	#rTCNTO2
 (*(vÞ©*)0x1510002C)

	)

171 
	#rTCNTB3
 (*(vÞ©*)0x15100030)

	)

172 
	#rTCMPB3
 (*(vÞ©*)0x15100034)

	)

173 
	#rTCNTO3
 (*(vÞ©*)0x15100038)

	)

174 
	#rTCNTB4
 (*(vÞ©*)0x1510003C)

	)

175 
	#rTCNTO4
 (*(vÞ©*)0x15100040)

	)

179 
	#rFUNC_ADDR_REG
 (*(vÞ©*)0x15200140)

	)

180 
	#rPWR_REG
 (*(vÞ©*)0x15200144)

	)

181 
	#rINT_REG
 (*(vÞ©*)0x15200148)

	)

182 
	#rINT_MASK_REG
 (*(vÞ©*)0x1520014C)

	)

183 
	#rFRAME_NUM_REG
 (*(vÞ©*)0x15200150)

	)

184 
	#rRESUME_CON_REG
 (*(vÞ©*)0x15200154)

	)

185 
	#rEP0_CSR
 (*(vÞ©*)0x15200160)

	)

186 
	#rEP0_MAXP
 (*(vÞ©*)0x15200164)

	)

187 
	#rEP0_OUT_CNT
 (*(vÞ©*)0x15200168)

	)

188 
	#rEP0_FIFO
 (*(vÞ©*)0x1520016C)

	)

189 
	#rEP1_IN_CSR
 (*(vÞ©*)0x15200180)

	)

190 
	#rEP1_IN_MAXP
 (*(vÞ©*)0x15200184)

	)

191 
	#rEP1_FIFO
 (*(vÞ©*)0x15200188)

	)

192 
	#rEP2_IN_CSR
 (*(vÞ©*)0x15200190)

	)

193 
	#rEP2_IN_MAXP
 (*(vÞ©*)0x15200194)

	)

194 
	#rEP2_FIFO
 (*(vÞ©*)0x15200198)

	)

195 
	#rEP3_OUT_CSR
 (*(vÞ©*)0x152001A0)

	)

196 
	#rEP3_OUT_MAXP
 (*(vÞ©*)0x152001A4)

	)

197 
	#rEP3_OUT_CNT
 (*(vÞ©*)0x152001A8)

	)

198 
	#rEP3_FIFO
 (*(vÞ©*)0x152001AC)

	)

199 
	#rEP4_OUT_CSR
 (*(vÞ©*)0x152001B0)

	)

200 
	#rEP4_OUT_MAXP
 (*(vÞ©*)0x152001B4)

	)

201 
	#rEP4_OUT_CNT
 (*(vÞ©*)0x152001B8)

	)

202 
	#rEP4_FIFO
 (*(vÞ©*)0x152001BC)

	)

203 
	#rDMA_CON
 (*(vÞ©*)0x152001C0)

	)

204 
	#rDMA_UNIT
 (*(vÞ©*)0x152001C4)

	)

205 
	#rDMA_FIFO
 (*(vÞ©*)0x152001C8)

	)

206 
	#rDMA_TX
 (*(vÞ©*)0x152001CC)

	)

207 
	#rTEST_MODE
 (*(vÞ©*)0x152001F4)

	)

208 
	#rIN_CON_REG
 (*(vÞ©*)0x152001F8)

	)

212 
	#rWTCON
 (*(vÞ©*)0x15300000)

	)

213 
	#rWTDAT
 (*(vÞ©*)0x15300004)

	)

214 
	#rWTCNT
 (*(vÞ©*)0x15300008)

	)

218 
	#rIICCON
 (*(vÞ©*)0x15400000)

	)

219 
	#rIICSTAT
 (*(vÞ©*)0x15400004)

	)

220 
	#rIICADD
 (*(vÞ©*)0x15400008)

	)

221 
	#rIICDS
 (*(vÞ©*)0x1540000C)

	)

225 
	#rIISCON
 (*(vÞ©*)0x15508000)

	)

226 
	#rIISMOD
 (*(vÞ©*)0x15508004)

	)

227 
	#rIISPSR
 (*(vÞ©*)0x15508008)

	)

228 
	#rIISFIFCON
 (*(vÞ©*)0x1550800C)

	)

230 #ifdeà
__BIG_ENDIAN


231 
	#IISFIF
 ((vÞ©*)0x15508012)

	)

234 
	#IISFIF
 ((vÞ©*)0x15508010)

	)

239 
	#rPACON
 (*(vÞ©*)0x15600000)

	)

240 
	#rPADAT
 (*(vÞ©*)0x15600004)

	)

242 
	#rPBCON
 (*(vÞ©*)0x15600008)

	)

243 
	#rPBDAT
 (*(vÞ©*)0x1560000C)

	)

244 
	#rPBUP
 (*(vÞ©*)0x15600010)

	)

246 
	#rPCCON
 (*(vÞ©*)0x15600014)

	)

247 
	#rPCDAT
 (*(vÞ©*)0x15600018)

	)

248 
	#rPCUP
 (*(vÞ©*)0x1560001C)

	)

250 
	#rPDCON
 (*(vÞ©*)0x15600020)

	)

251 
	#rPDDAT
 (*(vÞ©*)0x15600024)

	)

252 
	#rPDUP
 (*(vÞ©*)0x15600028)

	)

254 
	#rPECON
 (*(vÞ©*)0x1560002C)

	)

255 
	#rPEDAT
 (*(vÞ©*)0x15600030)

	)

256 
	#rPEUP
 (*(vÞ©*)0x15600034)

	)

258 
	#rPFCON
 (*(vÞ©*)0x15600038)

	)

259 
	#rPFDAT
 (*(vÞ©*)0x1560003C)

	)

260 
	#rPFUP
 (*(vÞ©*)0x15600040)

	)

262 
	#rPGCON
 (*(vÞ©*)0x15600044)

	)

263 
	#rPGDAT
 (*(vÞ©*)0x15600048)

	)

264 
	#rPGUP
 (*(vÞ©*)0x1560004C)

	)

266 
	#rOPENCR
 (*(vÞ©*)0x15600050)

	)

267 
	#rMISCCR
 (*(vÞ©*)0x15600054)

	)

268 
	#rEXTINT
 (*(vÞ©*)0x15600058)

	)

272 #ifdeà
__BIG_ENDIAN


273 
	#rRTCCON
 (*(vÞ©*)0x15700043)

	)

274 
	#rRTCALM
 (*(vÞ©*)0x15700053)

	)

275 
	#rALMSEC
 (*(vÞ©*)0x15700057)

	)

276 
	#rALMMIN
 (*(vÞ©*)0x1570005B)

	)

277 
	#rALMHOUR
 (*(vÞ©*)0x1570005F)

	)

278 
	#rALMDAY
 (*(vÞ©*)0x15700063)

	)

279 
	#rALMMON
 (*(vÞ©*)0x15700067)

	)

280 
	#rALMYEAR
 (*(vÞ©*)0x1570006B)

	)

281 
	#rRTCRST
 (*(vÞ©*)0x1570006F)

	)

282 
	#rBCDSEC
 (*(vÞ©*)0x15700073)

	)

283 
	#rBCDMIN
 (*(vÞ©*)0x15700077)

	)

284 
	#rBCDHOUR
 (*(vÞ©*)0x1570007B)

	)

285 
	#rBCDDAY
 (*(vÞ©*)0x1570007F)

	)

286 
	#rBCDDATE
 (*(vÞ©*)0x15700083)

	)

287 
	#rBCDMON
 (*(vÞ©*)0x15700087)

	)

288 
	#rBCDYEAR
 (*(vÞ©*)0x1570008B)

	)

289 
	#rTICINT
 (*(vÞ©*)0x15700047)

	)

292 
	#rRTCCON
 (*(vÞ©*)0x15700040)

	)

293 
	#rRTCALM
 (*(vÞ©*)0x15700050)

	)

294 
	#rALMSEC
 (*(vÞ©*)0x15700054)

	)

295 
	#rALMMIN
 (*(vÞ©*)0x15700058)

	)

296 
	#rALMHOUR
 (*(vÞ©*)0x1570005C)

	)

297 
	#rALMDAY
 (*(vÞ©*)0x15700060)

	)

298 
	#rALMMON
 (*(vÞ©*)0x15700064)

	)

299 
	#rALMYEAR
 (*(vÞ©*)0x15700068)

	)

300 
	#rRTCRST
 (*(vÞ©*)0x1570006C)

	)

301 
	#rBCDSEC
 (*(vÞ©*)0x15700070)

	)

302 
	#rBCDMIN
 (*(vÞ©*)0x15700074)

	)

303 
	#rBCDHOUR
 (*(vÞ©*)0x15700078)

	)

304 
	#rBCDDAY
 (*(vÞ©*)0x1570007C)

	)

305 
	#rBCDDATE
 (*(vÞ©*)0x15700080)

	)

306 
	#rBCDMON
 (*(vÞ©*)0x15700084)

	)

307 
	#rBCDYEAR
 (*(vÞ©*)0x15700088)

	)

308 
	#rTICINT
 (*(vÞ©*)0x15700044)

	)

313 
	#rADCCON
 (*(vÞ©*)0x15800000)

	)

314 
	#rADCDAT
 (*(vÞ©*)0x15800004)

	)

318 
	#rSPCON
 (*(vÞ©*)0x15900000)

	)

319 
	#rSPSTA
 (*(vÞ©*)0x15900004)

	)

320 
	#rSPPIN
 (*(vÞ©*)0x15900008)

	)

321 
	#rSPPRE
 (*(vÞ©*)0x1590000C)

	)

322 
	#rSPTDAT
 (*(vÞ©*)0x15900010)

	)

323 
	#rSPRDAT
 (*(vÞ©*)0x15900014)

	)

327 
	#rMMCON
 (*(vÞ©*)0x15a00000)

	)

328 
	#rMMCRR
 (*(vÞ©*)0x15a00004)

	)

329 
	#rMMFCON
 (*(vÞ©*)0x15a00008)

	)

330 
	#rMMSTA
 (*(vÞ©*)0x15a0000C)

	)

331 
	#rMMFSTA
 (*(vÞ©*)0x15a00010)

	)

332 
	#rMMPRE
 (*(vÞ©*)0x15a00014)

	)

333 
	#rMMLEN
 (*(vÞ©*)0x15a00018)

	)

334 
	#rMMCR7
 (*(vÞ©*)0x15a0001C)

	)

335 
	#rMMRSP0
 (*(vÞ©*)0x15a00020)

	)

336 
	#rMMRSP1
 (*(vÞ©*)0x15a00024)

	)

337 
	#rMMRSP2
 (*(vÞ©*)0x15a00028)

	)

338 
	#rMMRSP3
 (*(vÞ©*)0x15a0002C)

	)

339 
	#rMMCMD0
 (*(vÞ©*)0x15a00030)

	)

340 
	#rMMCMD1
 (*(vÞ©*)0x15a00034)

	)

341 
	#rMMCR16
 (*(vÞ©*)0x15a00038)

	)

342 
	#rMMDAT
 (*(vÞ©*)0x15a0003C)

	)

345 
	#_ISR_STARTADDRESS
 
¹ems_veùÜ_bË


	)

347 
	#pISR_RESET
 (*(*)(
_ISR_STARTADDRESS
+0x0))

	)

348 
	#pISR_UNDEF
 (*(*)(
_ISR_STARTADDRESS
+0x4))

	)

349 
	#pISR_SWI
 (*(*)(
_ISR_STARTADDRESS
+0x8))

	)

350 
	#pISR_PABORT
 (*(*)(
_ISR_STARTADDRESS
+0xC))

	)

351 
	#pISR_DABORT
 (*(*)(
_ISR_STARTADDRESS
+0x10))

	)

352 
	#pISR_RESERVED
 (*(*)(
_ISR_STARTADDRESS
+0x14))

	)

353 
	#pISR_IRQ
 (*(*)(
_ISR_STARTADDRESS
+0x18))

	)

354 
	#pISR_FIQ
 (*(*)(
_ISR_STARTADDRESS
+0x1C))

	)

356 
	#pISR_EINT0
 (*(*)(
_ISR_STARTADDRESS
+0x20))

	)

357 
	#pISR_EINT1
 (*(*)(
_ISR_STARTADDRESS
+0x24))

	)

358 
	#pISR_EINT2
 (*(*)(
_ISR_STARTADDRESS
+0x28))

	)

359 
	#pISR_EINT3
 (*(*)(
_ISR_STARTADDRESS
+0x2C))

	)

360 
	#pISR_EINT4
 (*(*)(
_ISR_STARTADDRESS
+0x30))

	)

361 
	#pISR_EINT5
 (*(*)(
_ISR_STARTADDRESS
+0x34))

	)

362 
	#pISR_EINT6
 (*(*)(
_ISR_STARTADDRESS
+0x38))

	)

363 
	#pISR_EINT7
 (*(*)(
_ISR_STARTADDRESS
+0x3C))

	)

364 
	#pISR_TICK
 (*(*)(
_ISR_STARTADDRESS
+0x40))

	)

365 
	#pISR_WDT
 (*(*)(
_ISR_STARTADDRESS
+0x44))

	)

366 
	#pISR_TIMER0
 (*(*)(
_ISR_STARTADDRESS
+0x48))

	)

367 
	#pISR_TIMER1
 (*(*)(
_ISR_STARTADDRESS
+0x4C))

	)

368 
	#pISR_TIMER2
 (*(*)(
_ISR_STARTADDRESS
+0x50))

	)

369 
	#pISR_TIMER3
 (*(*)(
_ISR_STARTADDRESS
+0x54))

	)

370 
	#pISR_TIMER4
 (*(*)(
_ISR_STARTADDRESS
+0x58))

	)

371 
	#pISR_UERR01
 (*(*)(
_ISR_STARTADDRESS
+0x5C))

	)

372 
	#pISR_NOTUSED
 (*(*)(
_ISR_STARTADDRESS
+0x60))

	)

373 
	#pISR_DMA0
 (*(*)(
_ISR_STARTADDRESS
+0x64))

	)

374 
	#pISR_DMA1
 (*(*)(
_ISR_STARTADDRESS
+0x68))

	)

375 
	#pISR_DMA2
 (*(*)(
_ISR_STARTADDRESS
+0x6C))

	)

376 
	#pISR_DMA3
 (*(*)(
_ISR_STARTADDRESS
+0x70))

	)

377 
	#pISR_MMC
 (*(*)(
_ISR_STARTADDRESS
+0x74))

	)

378 
	#pISR_SPI
 (*(*)(
_ISR_STARTADDRESS
+0x78))

	)

379 
	#pISR_URXD0
 (*(*)(
_ISR_STARTADDRESS
+0x7C))

	)

380 
	#pISR_URXD1
 (*(*)(
_ISR_STARTADDRESS
+0x80))

	)

381 
	#pISR_USBD
 (*(*)(
_ISR_STARTADDRESS
+0x84))

	)

382 
	#pISR_USBH
 (*(*)(
_ISR_STARTADDRESS
+0x88))

	)

383 
	#pISR_IIC
 (*(*)(
_ISR_STARTADDRESS
+0x8C))

	)

384 
	#pISR_UTXD0
 (*(*)(
_ISR_STARTADDRESS
+0x90))

	)

385 
	#pISR_UTXD1
 (*(*)(
_ISR_STARTADDRESS
+0x94))

	)

386 
	#pISR_RTC
 (*(*)(
_ISR_STARTADDRESS
+0x98))

	)

387 
	#pISR_ADC
 (*(*)(
_ISR_STARTADDRESS
+0xA0))

	)

391 
	#BIT_EINT0
 (0x1)

	)

392 
	#BIT_EINT1
 (0x1<<1)

	)

393 
	#BIT_EINT2
 (0x1<<2)

	)

394 
	#BIT_EINT3
 (0x1<<3)

	)

395 
	#BIT_EINT4
 (0x1<<4)

	)

396 
	#BIT_EINT5
 (0x1<<5)

	)

397 
	#BIT_EINT6
 (0x1<<6)

	)

398 
	#BIT_EINT7
 (0x1<<7)

	)

399 
	#BIT_TICK
 (0x1<<8)

	)

400 
	#BIT_WDT
 (0x1<<9)

	)

401 
	#BIT_TIMER0
 (0x1<<10)

	)

402 
	#BIT_TIMER1
 (0x1<<11)

	)

403 
	#BIT_TIMER2
 (0x1<<12)

	)

404 
	#BIT_TIMER3
 (0x1<<13)

	)

405 
	#BIT_TIMER4
 (0x1<<14)

	)

406 
	#BIT_UERR01
 (0x1<<15)

	)

407 
	#BIT_NOTUSED
 (0x1<<16)

	)

408 
	#BIT_DMA0
 (0x1<<17)

	)

409 
	#BIT_DMA1
 (0x1<<18)

	)

410 
	#BIT_DMA2
 (0x1<<19)

	)

411 
	#BIT_DMA3
 (0x1<<20)

	)

412 
	#BIT_MMC
 (0x1<<21)

	)

413 
	#BIT_SPI
 (0x1<<22)

	)

414 
	#BIT_URXD0
 (0x1<<23)

	)

415 
	#BIT_URXD1
 (0x1<<24)

	)

416 
	#BIT_USBD
 (0x1<<25)

	)

417 
	#BIT_USBH
 (0x1<<26)

	)

418 
	#BIT_IIC
 (0x1<<27)

	)

419 
	#BIT_UTXD0
 (0x1<<28)

	)

420 
	#BIT_UTXD1
 (0x1<<29)

	)

421 
	#BIT_RTC
 (0x1<<30)

	)

422 
	#BIT_ADC
 (0x1<<31)

	)

423 
	#BIT_ALLMSK
 (0xFFFFFFFF)

	)

425 
	#CË¬Pdg
(
b
) {\

426 
rSRCPND
 = 
b
;\

427 
rINTPND
 = 
b
;\

428 
rINTPND
;\

429 }

	)

432 #iâdeà
ASM


435 
	s_»g
 {

436 
	mSTOP_BIT
:1;

438 
	mSL_IDLE
:1;

441 
	mIDLE_BIT
:1;

443 
	mLCDC
:1;

444 
	mUSB_ho¡
:1;

445 
	mUSB_deviû
:1;

446 
	mPWMTIMER
:1;

447 
	mMMC
:1;

448 
	mUART0
:1;

449 
	mUART1
:1;

450 
	mGPIO
:1;

451 
	mRTC
:1;

453 
	mADC
:1;

454 
	mIIC
:1;

455 
	mIIS
:1;

456 
	mSPI
:1;

457 } 
	m»g
;

458 
	m®l
;

459 } 
	tCLKCON
;

464 
	mENVID
:1;

465 
	mBPPMODE
:4;

467 
	mPNRMODE
:2;

468 
	mMMODE
:1;

470 
	mCLKVAL
:10;

471 
	mLINECNT
:10;

473 } 
	m»g
;

474 
	m®l
;

475 } 
	tLCDCON1
;

479 
	mVSPW
:6;

482 
	mVFPD
:8;

485 
	mLINEVAL
:10;

487 
	mVBPD
:8;

490 } 
	m»g
;

491 
	m®l
;

492 } 
	tLCDCON2
;

496 
	mHFPD
:8;

499 
	mHOZVAL
:11;

501 
	mHBPD
:7;

504 } 
	m»g
;

505 
	m®l
;

506 } 
	tLCDCON3
;

510 
	mHSPW
:8;

513 
	mMVAL
:8;

514 
	mADDVAL
:8;

515 
	mPALADDEN
:1;

517 } 
	m»g
;

518 
	m®l
;

519 } 
	tLCDCON4
;

523 
	mHWSWP
:1;

525 
	mBSWP
:1;

527 
	mENLEND
:1;

530 
	mRESERVED1
:1;

531 
	mINVENDLINE
:1;

533 
	mRESERVED2
:1;

534 
	mINVVDEN
:1;

537 
	mINVVD
:1;

540 
	mINVVFRAME
:1;

542 
	mINVVLINE
:1;

544 
	mINVVCLK
:1;

548 
	mRESERVED3
:2;

549 
	mSELFREF
:1;

550 
	mSLOWCLKSYNC
:1;

551 
	mRESERVED4
:2;

552 
	mHSTATUS
:2;

557 
	mVSTATUS
:2;

562 } 
	m»g
;

563 
	m®l
;

564 } 
	tLCDCON5
;

568 
	mLCDBASEU
:21;

571 
	mLCDBANK
:7;

572 } 
	m»g
;

573 
	m®l
;

574 } 
	tLCDSADDR1
;

578 
	mLCDBASEL
:21;

582 } 
	m»g
;

583 
	m®l
;

584 } 
	tLCDSADDR2
;

588 
	mPAGEWIDTH
:11;

591 
	mOFFSIZE
:11;

597 } 
	m»g
;

598 
	m®l
;

599 } 
	tLCDSADDR3
;

607 
	mIISIFENA
:1;

608 
	mIISPSENA
:1;

609 
	mRXCHIDLE
:1;

610 
	mTXCHIDLE
:1;

611 
	mRXDMAENA
:1;

612 
	mTXDMAENA
:1;

613 
	mRXFIFORDY
:1;

614 
	mTXFIFORDY
:1;

615 
	mLRINDEX
:1;

616 } 
	m»g
;

617 
	m®l
;

618 } 
	tIISCON
;

622 
	mSBCLKFS
:2;

623 
	mMCLKFS
:1;

624 
	mSDBITS
:1;

625 
	mSIFMT
:1;

626 
	mACTLEVCH
:1;

627 
	mTXRXMODE
:2;

628 
	mMODE
:1;

629 } 
	m»g
;

630 
	m®l
;

631 } 
	tIISMOD
;

635 
	mPSB
:5;

636 
	mPSA
:5;

637 } 
	m»g
;

638 
	m®l
;

639 } 
	tIISPSR
;

643 
	mRXFIFOCNT
:4;

644 
	mTXFIFOCNT
:4;

646 
	mTXFIFOENA
:1;

647 
	mRXFIFOMODE
:1;

648 
	mTXFIFOMODE
:1;

649 } 
	m»g
;

650 
	m®l
;

651 } 
	tIISSFIFCON
;

655 
	mFENTRY
:16;

656 } 
	m»g
;

657 
	m®l
;

658 } 
	tIISSFIF
;

661 
	#LCD_WIDTH
 240

	)

662 
	#LCD_HEIGHT
 320

	)

663 
	#LCD_ASPECT
 (()(
LCD_WIDTH
/
LCD_HEIGHT
))

	)

665 
	#GP32_KEY_SELECT
 512

	)

666 
	#GP32_KEY_START
 256

	)

667 
	#GP32_KEY_A
 64

	)

668 
	#GP32_KEY_B
 32

	)

669 
	#GP32_KEY_L
 16

	)

670 
	#GP32_KEY_R
 128

	)

671 
	#GP32_KEY_UP
 8

	)

672 
	#GP32_KEY_DOWN
 2

	)

673 
	#GP32_KEY_LEFT
 1

	)

674 
	#GP32_KEY_RIGHT
 4

	)

	@src/lib/libcpu/arm/s3c24xx/include/s3c2410.h

8 #iâdeà
S3C2410_H_


9 
	#S3C2410_H_


	)

12 
	#rINTOFFSET_ADDR
 0x4A000014

	)

14 
	#rBWSCON
 (*(vÞ©*)0x48000000)

	)

15 
	#rBANKCON0
 (*(vÞ©*)0x48000004)

	)

16 
	#rBANKCON1
 (*(vÞ©*)0x48000008)

	)

17 
	#rBANKCON2
 (*(vÞ©*)0x4800000C)

	)

18 
	#rBANKCON3
 (*(vÞ©*)0x48000010)

	)

19 
	#rBANKCON4
 (*(vÞ©*)0x48000014)

	)

20 
	#rBANKCON5
 (*(vÞ©*)0x48000018)

	)

21 
	#rBANKCON6
 (*(vÞ©*)0x4800001C)

	)

22 
	#rBANKCON7
 (*(vÞ©*)0x48000020)

	)

23 
	#rREFRESH
 (*(vÞ©*)0x48000024)

	)

24 
	#rBANKSIZE
 (*(vÞ©*)0x48000028)

	)

25 
	#rMRSRB6
 (*(vÞ©*)0x4800002C)

	)

26 
	#rMRSRB7
 (*(vÞ©*)0x48000030)

	)

29 
	#rHcRevisiÚ
 (*(vÞ©*)0x49000000)

	)

30 
	#rHcCÚÞ
 (*(vÞ©*)0x49000004)

	)

31 
	#rHcCommÚStus
 (*(vÞ©*)0x49000008)

	)

32 
	#rHcIÁru±Stus
 (*(vÞ©*)0x4900000C)

	)

33 
	#rHcIÁru±EÇbË
 (*(vÞ©*)0x49000010)

	)

34 
	#rHcIÁru±Di§bË
 (*(vÞ©*)0x49000014)

	)

35 
	#rHcHCCA
 (*(vÞ©*)0x49000018)

	)

36 
	#rHcPiodCudED
 (*(vÞ©*)0x4900001C)

	)

37 
	#rHcCÚÞHdED
 (*(vÞ©*)0x49000020)

	)

38 
	#rHcCÚÞCu¼tED
 (*(vÞ©*)0x49000024)

	)

39 
	#rHcBulkHdED
 (*(vÞ©*)0x49000028)

	)

40 
	#rHcBuldCu¼tED
 (*(vÞ©*)0x4900002C)

	)

41 
	#rHcDÚeHd
 (*(vÞ©*)0x49000030)

	)

42 
	#rHcRmIÁv®
 (*(vÞ©*)0x49000034)

	)

43 
	#rHcFmRemag
 (*(vÞ©*)0x49000038)

	)

44 
	#rHcFmNumb
 (*(vÞ©*)0x4900003C)

	)

45 
	#rHcPiodicS¹
 (*(vÞ©*)0x49000040)

	)

46 
	#rHcLSTh»shÞd
 (*(vÞ©*)0x49000044)

	)

47 
	#rHcRhDesütÜA
 (*(vÞ©*)0x49000048)

	)

48 
	#rHcRhDesütÜB
 (*(vÞ©*)0x4900004C)

	)

49 
	#rHcRhStus
 (*(vÞ©*)0x49000050)

	)

50 
	#rHcRhPÜtStus1
 (*(vÞ©*)0x49000054)

	)

51 
	#rHcRhPÜtStus2
 (*(vÞ©*)0x49000058)

	)

54 
	#rSRCPND
 (*(vÞ©*)0x4A000000)

	)

55 
	#rINTMOD
 (*(vÞ©*)0x4A000004)

	)

56 
	#rINTMSK
 (*(vÞ©*)0x4A000008)

	)

57 
	#rPRIORITY
 (*(vÞ©*)0x4A00000C)

	)

58 
	#rINTPND
 (*(vÞ©*)0x4A000010)

	)

59 
	#rINTOFFSET
 (*(vÞ©*)0x4A000014)

	)

60 
	#rSUBSRCPND
 (*(vÞ©*)0x4A000018)

	)

61 
	#rINTSUBMSK
 (*(vÞ©*)0x4A00001c)

	)

65 
	#rDISRC0
 (*(vÞ©*)0x4B000000)

	)

66 
	#rDISRCC0
 (*(vÞ©*)0x4B000004)

	)

67 
	#rDIDST0
 (*(vÞ©*)0x4B000008)

	)

68 
	#rDIDSTC0
 (*(vÞ©*)0x4B00000C)

	)

69 
	#rDCON0
 (*(vÞ©*)0x4B000010)

	)

70 
	#rDSTAT0
 (*(vÞ©*)0x4B000014)

	)

71 
	#rDCSRC0
 (*(vÞ©*)0x4B000018)

	)

72 
	#rDCDST0
 (*(vÞ©*)0x4B00001C)

	)

73 
	#rDMASKTRIG0
 (*(vÞ©*)0x4B000020)

	)

74 
	#rDISRC1
 (*(vÞ©*)0x4B000040)

	)

75 
	#rDISRCC1
 (*(vÞ©*)0x4B000044)

	)

76 
	#rDIDST1
 (*(vÞ©*)0x4B000048)

	)

77 
	#rDIDSTC1
 (*(vÞ©*)0x4B00004C)

	)

78 
	#rDCON1
 (*(vÞ©*)0x4B000050)

	)

79 
	#rDSTAT1
 (*(vÞ©*)0x4B000054)

	)

80 
	#rDCSRC1
 (*(vÞ©*)0x4B000058)

	)

81 
	#rDCDST1
 (*(vÞ©*)0x4B00005C)

	)

82 
	#rDMASKTRIG1
 (*(vÞ©*)0x4B000060)

	)

83 
	#rDISRC2
 (*(vÞ©*)0x4B000080)

	)

84 
	#rDISRCC2
 (*(vÞ©*)0x4B000084)

	)

85 
	#rDIDST2
 (*(vÞ©*)0x4B000088)

	)

86 
	#rDIDSTC2
 (*(vÞ©*)0x4B00008C)

	)

87 
	#rDCON2
 (*(vÞ©*)0x4B000090)

	)

88 
	#rDSTAT2
 (*(vÞ©*)0x4B000094)

	)

89 
	#rDCSRC2
 (*(vÞ©*)0x4B000098)

	)

90 
	#rDCDST2
 (*(vÞ©*)0x4B00009C)

	)

91 
	#rDMASKTRIG2
 (*(vÞ©*)0x4B0000A0)

	)

92 
	#rDISRC3
 (*(vÞ©*)0x4B0000C0)

	)

93 
	#rDISRCC3
 (*(vÞ©*)0x4B0000C4)

	)

94 
	#rDIDST3
 (*(vÞ©*)0x4B0000C8)

	)

95 
	#rDIDSTC3
 (*(vÞ©*)0x4B0000CC)

	)

96 
	#rDCON3
 (*(vÞ©*)0x4B0000D0)

	)

97 
	#rDSTAT3
 (*(vÞ©*)0x4B0000D4)

	)

98 
	#rDCSRC3
 (*(vÞ©*)0x4B0000D8)

	)

99 
	#rDCDST3
 (*(vÞ©*)0x4B0000DC)

	)

100 
	#rDMASKTRIG3
 (*(vÞ©*)0x4B0000E0)

	)

104 
	#rLOCKTIME
 (*(vÞ©*)0x4C000000)

	)

105 
	#rMPLLCON
 (*(vÞ©*)0x4C000004)

	)

106 
	#rUPLLCON
 (*(vÞ©*)0x4C000008)

	)

107 
	#rCLKCON
 (*(vÞ©*)0x4C00000C)

	)

108 
	#rCLKSLOW
 (*(vÞ©*)0x4C000010)

	)

109 
	#rCLKDIVN
 (*(vÞ©*)0x4C000014)

	)

113 
	#rLCDCON1
 (*(vÞ©*)0x4D000000)

	)

114 
	#rLCDCON2
 (*(vÞ©*)0x4D000004)

	)

115 
	#rLCDCON3
 (*(vÞ©*)0x4D000008)

	)

116 
	#rLCDCON4
 (*(vÞ©*)0x4D00000C)

	)

117 
	#rLCDCON5
 (*(vÞ©*)0x4D000010)

	)

118 
	#rLCDSADDR1
 (*(vÞ©*)0x4D000014)

	)

119 
	#rLCDSADDR2
 (*(vÞ©*)0x4D000018)

	)

120 
	#rLCDSADDR3
 (*(vÞ©*)0x4D00001C)

	)

121 
	#rREDLUT
 (*(vÞ©*)0x4D000020)

	)

122 
	#rGREENLUT
 (*(vÞ©*)0x4D000024)

	)

123 
	#rBLUELUT
 (*(vÞ©*)0x4D000028)

	)

124 
	#rREDLUT
 (*(vÞ©*)0x4D000020)

	)

125 
	#rGREENLUT
 (*(vÞ©*)0x4D000024)

	)

126 
	#rBLUELUT
 (*(vÞ©*)0x4D000028)

	)

127 
	#rDITHMODE
 (*(vÞ©*)0x4D00004C)

	)

128 
	#rTPAL
 (*(vÞ©*)0x4D000050)

	)

129 
	#rLCDINTPND
 (*(vÞ©*)0x4D000054)

	)

130 
	#rLCDSRCPND
 (*(vÞ©*)0x4D000058)

	)

131 
	#rLCDINTMSK
 (*(vÞ©*)0x4D00005C)

	)

132 
	#rTCONSEL
 (*(vÞ©*)0x4D000060)

	)

133 
	#PALETTE
 0x4d000400

	)

136 
	#rNFCONF
 (*(vÞ©*)0x4E000000)

	)

137 
	#rNFCMD
 (*(vÞ©*)0x4E000004)

	)

138 
	#rNFADDR
 (*(vÞ©*)0x4E000008)

	)

139 
	#rNFDATA
 (*(vÞ©*)0x4E00000C)

	)

140 
	#rNFSTAT
 (*(vÞ©*)0x4E000010)

	)

141 
	#rNFECC
 (*(vÞ©*)0x4E000014)

	)

144 
	#rULCON0
 (*(vÞ©*)0x50000000)

	)

145 
	#rUCON0
 (*(vÞ©*)0x50000004)

	)

146 
	#rUFCON0
 (*(vÞ©*)0x50000008)

	)

147 
	#rUMCON0
 (*(vÞ©*)0x5000000C)

	)

148 
	#rUTRSTAT0
 (*(vÞ©*)0x50000010)

	)

149 
	#rUERSTAT0
 (*(vÞ©*)0x50000014)

	)

150 
	#rUFSTAT0
 (*(vÞ©*)0x50000018)

	)

151 
	#rUMSTAT0
 (*(vÞ©*)0x5000001C)

	)

152 
	#rUBRDIV0
 (*(vÞ©*)0x50000028)

	)

154 
	#rULCON1
 (*(vÞ©*)0x50004000)

	)

155 
	#rUCON1
 (*(vÞ©*)0x50004004)

	)

156 
	#rUFCON1
 (*(vÞ©*)0x50004008)

	)

157 
	#rUMCON1
 (*(vÞ©*)0x5000400C)

	)

158 
	#rUTRSTAT1
 (*(vÞ©*)0x50004010)

	)

159 
	#rUERSTAT1
 (*(vÞ©*)0x50004014)

	)

160 
	#rUFSTAT1
 (*(vÞ©*)0x50004018)

	)

161 
	#rUMSTAT1
 (*(vÞ©*)0x5000401C)

	)

162 
	#rUBRDIV1
 (*(vÞ©*)0x50004028)

	)

164 
	#rULCON2
 (*(vÞ©*)0x50008000)

	)

165 
	#rUCON2
 (*(vÞ©*)0x50008004)

	)

166 
	#rUFCON2
 (*(vÞ©*)0x50008008)

	)

167 
	#rUTRSTAT2
 (*(vÞ©*)0x50008010)

	)

168 
	#rUERSTAT2
 (*(vÞ©*)0x50008014)

	)

169 
	#rUFSTAT2
 (*(vÞ©*)0x50008018)

	)

170 
	#rUBRDIV2
 (*(vÞ©*)0x50008028)

	)

172 #ifdeà
__BIG_ENDIAN


173 
	#rUTXH0
 (*(vÞ©*)0x50000023)

	)

174 
	#rURXH0
 (*(vÞ©*)0x50000027)

	)

175 
	#rUTXH1
 (*(vÞ©*)0x50004023)

	)

176 
	#rURXH1
 (*(vÞ©*)0x50004027)

	)

177 
	#rUTXH2
 (*(vÞ©*)0x50008023)

	)

178 
	#rURXH2
 (*(vÞ©*)0x50008027)

	)

180 
	#WrUTXH0
(
ch
è(*(vÞ©*)0x50000023)=()(ch)

	)

181 
	#RdURXH0
(è(*(vÞ©*)0x50000027)

	)

182 
	#WrUTXH1
(
ch
è(*(vÞ©*)0x50004023)=()(ch)

	)

183 
	#RdURXH1
(è(*(vÞ©*)0x50004027)

	)

184 
	#WrUTXH2
(
ch
è(*(vÞ©*)0x50008023)=()(ch)

	)

185 
	#RdURXH2
(è(*(vÞ©*)0x50008027)

	)

187 
	#UTXH0
 (0x50000020+3è

	)

188 
	#URXH0
 (0x50000024+3)

	)

189 
	#UTXH1
 (0x50004020+3)

	)

190 
	#URXH1
 (0x50004024+3)

	)

191 
	#UTXH2
 (0x50008020+3)

	)

192 
	#URXH2
 (0x50008024+3)

	)

195 
	#rUTXH0
 (*(vÞ©*)0x50000020)

	)

196 
	#rURXH0
 (*(vÞ©*)0x50000024)

	)

197 
	#rUTXH1
 (*(vÞ©*)0x50004020)

	)

198 
	#rURXH1
 (*(vÞ©*)0x50004024)

	)

199 
	#rUTXH2
 (*(vÞ©*)0x50008020)

	)

200 
	#rURXH2
 (*(vÞ©*)0x50008024)

	)

202 
	#WrUTXH0
(
ch
è(*(vÞ©*)0x50000020)=()(ch)

	)

203 
	#RdURXH0
(è(*(vÞ©*)0x50000024)

	)

204 
	#WrUTXH1
(
ch
è(*(vÞ©*)0x50004020)=()(ch)

	)

205 
	#RdURXH1
(è(*(vÞ©*)0x50004024)

	)

206 
	#WrUTXH2
(
ch
è(*(vÞ©*)0x50008020)=()(ch)

	)

207 
	#RdURXH2
(è(*(vÞ©*)0x50008024)

	)

209 
	#UTXH0
 (0x50000020)

	)

210 
	#URXH0
 (0x50000024)

	)

211 
	#UTXH1
 (0x50004020)

	)

212 
	#URXH1
 (0x50004024)

	)

213 
	#UTXH2
 (0x50008020)

	)

214 
	#URXH2
 (0x50008024)

	)

219 
	#rTCFG0
 (*(vÞ©*)0x51000000)

	)

220 
	#rTCFG1
 (*(vÞ©*)0x51000004)

	)

221 
	#rTCON
 (*(vÞ©*)0x51000008)

	)

222 
	#rTCNTB0
 (*(vÞ©*)0x5100000C)

	)

223 
	#rTCMPB0
 (*(vÞ©*)0x51000010)

	)

224 
	#rTCNTO0
 (*(vÞ©*)0x51000014)

	)

225 
	#rTCNTB1
 (*(vÞ©*)0x51000018)

	)

226 
	#rTCMPB1
 (*(vÞ©*)0x5100001C)

	)

227 
	#rTCNTO1
 (*(vÞ©*)0x51000020)

	)

228 
	#rTCNTB2
 (*(vÞ©*)0x51000024)

	)

229 
	#rTCMPB2
 (*(vÞ©*)0x51000028)

	)

230 
	#rTCNTO2
 (*(vÞ©*)0x5100002C)

	)

231 
	#rTCNTB3
 (*(vÞ©*)0x51000030)

	)

232 
	#rTCMPB3
 (*(vÞ©*)0x51000034)

	)

233 
	#rTCNTO3
 (*(vÞ©*)0x51000038)

	)

234 
	#rTCNTB4
 (*(vÞ©*)0x5100003C)

	)

235 
	#rTCNTO4
 (*(vÞ©*)0x51000040)

	)

239 #ifdeà
__BIG_ENDIAN


240 
	#rFUNC_ADDR_REG
 (*(volatile *)0x52000143)

241 
	#rPWR_REG
 (*(volatile *)0x52000147)

242 
	#rEP_INT_REG
 (*(volatile *)0x5200014b)

243 
	#rUSB_INT_REG
 (*(volatile *)0x5200015b)

244 
	#rEP_INT_EN_REG
 (*(volatile *)0x5200015f)

245 
	#rUSB_INT_EN_REG
 (*(vÞ©*)0x5200016f)

	)

246 
	#rFRAME_NUM1_REG
 (*(volatile *)0x52000173)

247 
	#rFRAME_NUM2_REG
 (*(volatile *)0x52000177)

248 
	#rINDEX_REG
 (*(volatile *)0x5200017b)

249 
	#rMAXP_REG
 (*(volatile *)0x52000183)

250 
	#rEP0_CSR
 (*(volatile *)0x52000187)

251 
	#rIN_CSR1_REG
 (*(volatile *)0x52000187)

252 
	#rIN_CSR2_REG
 (*(vÞ©*)0x5200018b)

	)

253 
	#rOUT_CSR1_REG
 (*(volatile *)0x52000193)

254 
	#rOUT_CSR2_REG
 (*(vÞ©*)0x52000197)

	)

255 
	#rOUT_FIFO_CNT1_REG
 (*(volatile *)0x5200019b)

256 
	#rOUT_FIFO_CNT2_REG
 (*(vÞ©*)0x5200019f)

	)

257 
	#rEP0_FIFO
 (*(volatile *)0x520001c3)

258 
	#rEP1_FIFO
 (*(volatile *)0x520001c7)

259 
	#rEP2_FIFO
 (*(volatile *)0x520001cb)

260 
	#rEP3_FIFO
 (*(volatile *)0x520001cf)

261 
	#rEP4_FIFO
 (*(volatile *)0x520001d3)

262 
	#rEP1_DMA_CON
 (*(volatile *)0x52000203)

263 
	#rEP1_DMA_UNIT
 (*(volatile *)0x52000207)

264 
	#rEP1_DMA_FIFO
 (*(volatile *)0x5200020b)

265 
	#rEP1_DMA_TTC_L
 (*(volatile *)0x5200020f)

266 
	#rEP1_DMA_TTC_M
 (*(vÞ©*)0x52000213)

	)

267 
	#rEP1_DMA_TTC_H
 (*(vÞ©*)0x52000217)

	)

268 
	#rEP2_DMA_CON
 (*(volatile *)0x5200021b)

269 
	#rEP2_DMA_UNIT
 (*(volatile *)0x5200021f)

270 
	#rEP2_DMA_FIFO
 (*(volatile *)0x52000223)

271 
	#rEP2_DMA_TTC_L
 (*(volatile *)0x52000227)

272 
	#rEP2_DMA_TTC_M
 (*(vÞ©*)0x5200022b)

	)

273 
	#rEP2_DMA_TTC_H
 (*(vÞ©*)0x5200022f)

	)

274 
	#rEP3_DMA_CON
 (*(volatile *)0x52000243)

275 
	#rEP3_DMA_UNIT
 (*(volatile *)0x52000247)

276 
	#rEP3_DMA_FIFO
 (*(volatile *)0x5200024b)

277 
	#rEP3_DMA_TTC_L
 (*(volatile *)0x5200024f)

278 
	#rEP3_DMA_TTC_M
 (*(vÞ©*)0x52000253)

	)

279 
	#rEP3_DMA_TTC_H
 (*(vÞ©*)0x52000257)

	)

280 
	#rEP4_DMA_CON
 (*(volatile *)0x5200025b)

281 
	#rEP4_DMA_UNIT
 (*(volatile *)0x5200025f)

282 
	#rEP4_DMA_FIFO
 (*(volatile *)0x52000263)

283 
	#rEP4_DMA_TTC_L
 (*(volatile *)0x52000267)

284 
	#rEP4_DMA_TTC_M
 (*(vÞ©*)0x5200026b)

	)

285 
	#rEP4_DMA_TTC_H
 (*(vÞ©*)0x5200026f)

	)

288 
	#rFUNC_ADDR_REG
 (*(volatile *)0x52000140)

289 
	#rPWR_REG
 (*(volatile *)0x52000144)

290 
	#rEP_INT_REG
 (*(volatile *)0x52000148)

291 
	#rUSB_INT_REG
 (*(volatile *)0x52000158)

292 
	#rEP_INT_EN_REG
 (*(volatile *)0x5200015c)

293 
	#rUSB_INT_EN_REG
 (*(vÞ©*)0x5200016c)

	)

294 
	#rFRAME_NUM1_REG
 (*(volatile *)0x52000170)

295 
	#rFRAME_NUM2_REG
 (*(volatile *)0x52000174)

296 
	#rINDEX_REG
 (*(volatile *)0x52000178)

297 
	#rMAXP_REG
 (*(volatile *)0x52000180)

298 
	#rEP0_CSR
 (*(volatile *)0x52000184)

299 
	#rIN_CSR1_REG
 (*(volatile *)0x52000184)

300 
	#rIN_CSR2_REG
 (*(vÞ©*)0x52000188)

	)

301 
	#rOUT_CSR1_REG
 (*(volatile *)0x52000190)

302 
	#rOUT_CSR2_REG
 (*(vÞ©*)0x52000194)

	)

303 
	#rOUT_FIFO_CNT1_REG
 (*(volatile *)0x52000198)

304 
	#rOUT_FIFO_CNT2_REG
 (*(vÞ©*)0x5200019c)

	)

305 
	#rEP0_FIFO
 (*(volatile *)0x520001c0)

306 
	#rEP1_FIFO
 (*(volatile *)0x520001c4)

307 
	#rEP2_FIFO
 (*(volatile *)0x520001c8)

308 
	#rEP3_FIFO
 (*(volatile *)0x520001cc)

309 
	#rEP4_FIFO
 (*(volatile *)0x520001d0)

310 
	#rEP1_DMA_CON
 (*(volatile *)0x52000200)

311 
	#rEP1_DMA_UNIT
 (*(volatile *)0x52000204)

312 
	#rEP1_DMA_FIFO
 (*(volatile *)0x52000208)

313 
	#rEP1_DMA_TTC_L
 (*(volatile *)0x5200020c)

314 
	#rEP1_DMA_TTC_M
 (*(vÞ©*)0x52000210)

	)

315 
	#rEP1_DMA_TTC_H
 (*(vÞ©*)0x52000214)

	)

316 
	#rEP2_DMA_CON
 (*(volatile *)0x52000218)

317 
	#rEP2_DMA_UNIT
 (*(volatile *)0x5200021c)

318 
	#rEP2_DMA_FIFO
 (*(volatile *)0x52000220)

319 
	#rEP2_DMA_TTC_L
 (*(volatile *)0x52000224)

320 
	#rEP2_DMA_TTC_M
 (*(vÞ©*)0x52000228)

	)

321 
	#rEP2_DMA_TTC_H
 (*(vÞ©*)0x5200022c)

	)

322 
	#rEP3_DMA_CON
 (*(volatile *)0x52000240)

323 
	#rEP3_DMA_UNIT
 (*(volatile *)0x52000244)

324 
	#rEP3_DMA_FIFO
 (*(volatile *)0x52000248)

325 
	#rEP3_DMA_TTC_L
 (*(volatile *)0x5200024c)

326 
	#rEP3_DMA_TTC_M
 (*(vÞ©*)0x52000250)

	)

327 
	#rEP3_DMA_TTC_H
 (*(vÞ©*)0x52000254)

	)

328 
	#rEP4_DMA_CON
 (*(volatile *)0x52000258)

329 
	#rEP4_DMA_UNIT
 (*(volatile *)0x5200025c)

330 
	#rEP4_DMA_FIFO
 (*(volatile *)0x52000260)

331 
	#rEP4_DMA_TTC_L
 (*(volatile *)0x52000264)

332 
	#rEP4_DMA_TTC_M
 (*(vÞ©*)0x52000268)

	)

333 
	#rEP4_DMA_TTC_H
 (*(vÞ©*)0x5200026c)

	)

337 
	#rWTCON
 (*(vÞ©*)0x53000000)

	)

338 
	#rWTDAT
 (*(vÞ©*)0x53000004)

	)

339 
	#rWTCNT
 (*(vÞ©*)0x53000008)

	)

343 
	#rIICCON
 (*(vÞ©*)0x54000000)

	)

344 
	#rIICSTAT
 (*(vÞ©*)0x54000004)

	)

345 
	#rIICADD
 (*(vÞ©*)0x54000008)

	)

346 
	#rIICDS
 (*(vÞ©*)0x5400000C)

	)

350 
	#rIISCON
 (*(vÞ©*)0x55000000)

	)

351 
	#rIISMOD
 (*(vÞ©*)0x55000004)

	)

352 
	#rIISPSR
 (*(vÞ©*)0x55000008)

	)

353 
	#rIISFIFCON
 (*(vÞ©*)0x5500000C)

	)

355 #ifdeà
__BIG_ENDIAN


356 
	#IISFIFO
 ((vÞ©*)0x55000012)

	)

359 
	#IISFIFO
 ((vÞ©*)0x55000010)

	)

364 
	#rGPACON
 (*(volatile *)0x56000000)

365 
	#rGPADAT
 (*(volatile *)0x56000004)

366 

	)

367 
	#rGPBCON
 (*(volatile *)0x56000010)

368 
	#rGPBDAT
 (*(volatile *)0x56000014)

369 
	#rGPBUP
 (*(volatile *)0x56000018)

370 

	)

371 
	#rGPCCON
 (*(volatile *)0x56000020)

372 
	#rGPCDAT
 (*(volatile *)0x56000024)

373 
	#rGPCUP
 (*(volatile *)0x56000028)

374 

	)

375 
	#rGPDCON
 (*(volatile *)0x56000030)

376 
	#rGPDDAT
 (*(volatile *)0x56000034)

377 
	#rGPDUP
 (*(volatile *)0x56000038)

378 

	)

379 
	#rGPECON
 (*(volatile *)0x56000040)

380 
	#rGPEDAT
 (*(volatile *)0x56000044)

381 
	#rGPEUP
 (*(volatile *)0x56000048)

382 

	)

383 
	#rGPFCON
 (*(volatile *)0x56000050)

384 
	#rGPFDAT
 (*(volatile *)0x56000054)

385 
	#rGPFUP
 (*(volatile *)0x56000058)

386 

	)

387 
	#rGPGCON
 (*(volatile *)0x56000060)

388 
	#rGPGDAT
 (*(volatile *)0x56000064)

389 
	#rGPGUP
 (*(volatile *)0x56000068)

390 

	)

391 
	#rGPHCON
 (*(volatile *)0x56000070)

392 
	#rGPHDAT
 (*(volatile *)0x56000074)

393 
	#rGPHUP
 (*(volatile *)0x56000078)

394 

	)

395 
	#rMISCCR
 (*(volatile *)0x56000080)

396 
	#rDCLKCON
 (*(volatile *)0x56000084)

397 
	#rEXTINT0
 (*(volatile *)0x56000088)

398 
	#rEXTINT1
 (*(volatile *)0x5600008c)

399 
	#rEXTINT2
 (*(volatile *)0x56000090)

400 
	#rEINTFLT0
 (*(volatile *)0x56000094)

401 
	#rEINTFLT1
 (*(volatile *)0x56000098)

402 
	#rEINTFLT2
 (*(volatile *)0x5600009c)

403 
	#rEINTFLT3
 (*(volatile *)0x560000a0)

404 
	#rEINTMASK
 (*(volatile *)0x560000a4)

405 
	#rEINTPEND
 (*(volatile *)0x560000a8)

406 
	#rGSTATUS0
 (*(volatile *)0x560000ac)

407 
	#rGSTATUS1
 (*(volatile *)0x560000b0)

408 

	)

410 #ifdeà
__BIG_ENDIAN


411 
	#rRTCCON
 (*(volatile *)0x57000043)

412 
	#rTICNT
 (*(volatile *)0x57000047)

413 
	#rRTCALM
 (*(volatile *)0x57000053)

414 
	#rALMSEC
 (*(volatile *)0x57000057)

415 
	#rALMMIN
 (*(volatile *)0x5700005b)

416 
	#rALMHOUR
 (*(volatile *)0x5700005f)

417 
	#rALMDATE
 (*(volatile *)0x57000063)

418 
	#rALMMON
 (*(volatile *)0x57000067)

419 
	#rALMYEAR
 (*(volatile *)0x5700006b)

420 
	#rRTCRST
 (*(volatile *)0x5700006f)

421 
	#rBCDSEC
 (*(volatile *)0x57000073)

422 
	#rBCDMIN
 (*(volatile *)0x57000077)

423 
	#rBCDHOUR
 (*(volatile *)0x5700007b)

424 
	#rBCDDATE
 (*(volatile *)0x5700007f)

425 
	#rBCDDAY
 (*(volatile *)0x57000083)

426 
	#rBCDMON
 (*(volatile *)0x57000087)

427 
	#rBCDYEAR
 (*(volatile *)0x5700008b)

428 

	)

430 
	#rRTCCON
 (*(volatile *)0x57000040)

431 
	#rTICNT
 (*(volatile *)0x57000044)

432 
	#rRTCALM
 (*(volatile *)0x57000050)

433 
	#rALMSEC
 (*(volatile *)0x57000054)

434 
	#rALMMIN
 (*(volatile *)0x57000058)

435 
	#rALMHOUR
 (*(volatile *)0x5700005c)

436 
	#rALMDATE
 (*(volatile *)0x57000060)

437 
	#rALMMON
 (*(volatile *)0x57000064)

438 
	#rALMYEAR
 (*(volatile *)0x57000068)

439 
	#rRTCRST
 (*(volatile *)0x5700006c)

440 
	#rBCDSEC
 (*(volatile *)0x57000070)

441 
	#rBCDMIN
 (*(volatile *)0x57000074)

442 
	#rBCDHOUR
 (*(volatile *)0x57000078)

443 
	#rBCDDATE
 (*(volatile *)0x5700007c)

444 
	#rBCDDAY
 (*(volatile *)0x57000080)

445 
	#rBCDMON
 (*(volatile *)0x57000084)

446 
	#rBCDYEAR
 (*(volatile *)0x57000088)

448 

	)

451 
	#rADCCON
 (*(vÞ©*)0x58000000)

	)

452 
	#rADCTSC
 (*(vÞ©*)0x58000004)

	)

453 
	#rADCDLY
 (*(vÞ©*)0x58000008)

	)

454 
	#rADCDAT0
 (*(vÞ©*)0x5800000c)

	)

455 
	#rADCDAT1
 (*(vÞ©*)0x58000010)

	)

459 
	#rSPCON0
 (*(volatile *)0x59000000)

460 
	#rSPSTA0
 (*(volatile *)0x59000004)

461 
	#rSPPIN0
 (*(volatile *)0x59000008)

462 
	#rSPPRE0
 (*(volatile *)0x5900000c)

463 
	#rSPTDAT0
 (*(volatile *)0x59000010)

464 
	#rSPRDAT0
 (*(volatile *)0x59000014)

465 

	)

466 
	#rSPCON1
 (*(volatile *)0x59000020)

467 
	#rSPSTA1
 (*(volatile *)0x59000024)

468 
	#rSPPIN1
 (*(volatile *)0x59000028)

469 
	#rSPPRE1
 (*(volatile *)0x5900002c)

470 
	#rSPTDAT1
 (*(volatile *)0x59000030)

471 
	#rSPRDAT1
 (*(volatile *)0x59000034)

472 

	)

474 
	#rSDICON
 (*(volatile *)0x5a000000)

475 
	#rSDIPRE
 (*(volatile *)0x5a000004)

476 
	#rSDICARG
 (*(volatile *)0x5a000008)

477 
	#rSDICCON
 (*(volatile *)0x5a00000c)

478 
	#rSDICSTA
 (*(volatile *)0x5a000010)

479 
	#rSDIRSP0
 (*(volatile *)0x5a000014)

480 
	#rSDIRSP1
 (*(volatile *)0x5a000018)

481 
	#rSDIRSP2
 (*(volatile *)0x5a00001c)

482 
	#rSDIRSP3
 (*(volatile *)0x5a000020)

483 
	#rSDIDTIMER
 (*(volatile *)0x5a000024)

484 
	#rSDIBSIZE
 (*(volatile *)0x5a000028)

485 
	#rSDIDATCON
 (*(volatile *)0x5a00002c)

486 
	#rSDIDATCNT
 (*(volatile *)0x5a000030)

487 
	#rSDIDATSTA
 (*(volatile *)0x5a000034)

488 
	#rSDIFSTA
 (*(volatile *)0x5a000038)

489 
	#rSDIIMSK
 (*(volatile *)0x5a000040)

490 

	)

491 #ifdeà
__BIG_ENDIAN


492 
	#rSDIDAT
 (*(volatile *)0x5a00003F)

493 
	#SDIDAT
 0x5a00003F

	)

495 
	#rSDIDAT
 (*(volatile *)0x5a00003C)

496 
	#SDIDAT
 0x5a00003C

	)

500 
	#_ISR_STARTADDRESS
 
¹ems_veùÜ_bË


	)

502 
	#pISR_RESET
 (*(*)(
_ISR_STARTADDRESS
+0x0))

	)

503 
	#pISR_UNDEF
 (*(*)(
_ISR_STARTADDRESS
+0x4))

	)

504 
	#pISR_SWI
 (*(*)(
_ISR_STARTADDRESS
+0x8))

	)

505 
	#pISR_PABORT
 (*(*)(
_ISR_STARTADDRESS
+0xC))

	)

506 
	#pISR_DABORT
 (*(*)(
_ISR_STARTADDRESS
+0x10))

	)

507 
	#pISR_RESERVED
 (*(*)(
_ISR_STARTADDRESS
+0x14))

	)

508 
	#pISR_IRQ
 (*(*)(
_ISR_STARTADDRESS
+0x18))

	)

509 
	#pISR_FIQ
 (*(*)(
_ISR_STARTADDRESS
+0x1C))

	)

511 
	#pISR_EINT0
 (*(*)(
_ISR_STARTADDRESS
+0x20))

	)

512 
	#pISR_EINT1
 (*(*)(
_ISR_STARTADDRESS
+0x24))

	)

513 
	#pISR_EINT2
 (*(*)(
_ISR_STARTADDRESS
+0x28))

	)

514 
	#pISR_EINT3
 (*(*)(
_ISR_STARTADDRESS
+0x2C))

	)

515 
	#pISR_EINT4_7
 (*(*)(
_ISR_STARTADDRESS
+0x30))

	)

516 
	#pISR_EINT8_23
 (*(*)(
_ISR_STARTADDRESS
+0x34))

	)

517 
	#pISR_BAT_FLT
 (*(*)(
_ISR_STARTADDRESS
+0x3C))

	)

518 
	#pISR_TICK
 (*(*)(
_ISR_STARTADDRESS
+0x40))

	)

519 
	#pISR_WDT
 (*(*)(
_ISR_STARTADDRESS
+0x44))

	)

520 
	#pISR_TIMER0
 (*(*)(
_ISR_STARTADDRESS
+0x48))

	)

521 
	#pISR_TIMER1
 (*(*)(
_ISR_STARTADDRESS
+0x4C))

	)

522 
	#pISR_TIMER2
 (*(*)(
_ISR_STARTADDRESS
+0x50))

	)

523 
	#pISR_TIMER3
 (*(*)(
_ISR_STARTADDRESS
+0x54))

	)

524 
	#pISR_TIMER4
 (*(*)(
_ISR_STARTADDRESS
+0x58))

	)

525 
	#pISR_UART2
 (*(*)(
_ISR_STARTADDRESS
+0x5C))

	)

526 
	#pISR_NOTUSED
 (*(*)(
_ISR_STARTADDRESS
+0x60))

	)

527 
	#pISR_DMA0
 (*(*)(
_ISR_STARTADDRESS
+0x64))

	)

528 
	#pISR_DMA1
 (*(*)(
_ISR_STARTADDRESS
+0x68))

	)

529 
	#pISR_DMA2
 (*(*)(
_ISR_STARTADDRESS
+0x6C))

	)

530 
	#pISR_DMA3
 (*(*)(
_ISR_STARTADDRESS
+0x70))

	)

531 
	#pISR_SDI
 (*(*)(
_ISR_STARTADDRESS
+0x74))

	)

532 
	#pISR_SPI0
 (*(*)(
_ISR_STARTADDRESS
+0x78))

	)

533 
	#pISR_UART1
 (*(*)(
_ISR_STARTADDRESS
+0x7C))

	)

534 
	#pISR_USBD
 (*(*)(
_ISR_STARTADDRESS
+0x84))

	)

535 
	#pISR_USBH
 (*(*)(
_ISR_STARTADDRESS
+0x88))

	)

536 
	#pISR_IIC
 (*(*)(
_ISR_STARTADDRESS
+0x8C))

	)

537 
	#pISR_UART0
 (*(*)(
_ISR_STARTADDRESS
+0x90))

	)

538 
	#pISR_SPI1
 (*(*)(
_ISR_STARTADDRESS
+0x94))

	)

539 
	#pISR_RTC
 (*(*)(
_ISR_STARTADDRESS
+0x98))

	)

540 
	#pISR_ADC
 (*(*)(
_ISR_STARTADDRESS
+0xA0))

	)

544 
	#BIT_EINT0
 (0x1)

	)

545 
	#BIT_EINT1
 (0x1<<1)

	)

546 
	#BIT_EINT2
 (0x1<<2)

	)

547 
	#BIT_EINT3
 (0x1<<3)

	)

548 
	#BIT_EINT4_7
 (0x1<<4)

	)

549 
	#BIT_EINT8_23
 (0x1<<5)

	)

550 
	#BIT_BAT_FLT
 (0x1<<7)

	)

551 
	#BIT_TICK
 (0x1<<8)

	)

552 
	#BIT_WDT
 (0x1<<9)

	)

553 
	#BIT_TIMER0
 (0x1<<10)

	)

554 
	#BIT_TIMER1
 (0x1<<11)

	)

555 
	#BIT_TIMER2
 (0x1<<12)

	)

556 
	#BIT_TIMER3
 (0x1<<13)

	)

557 
	#BIT_TIMER4
 (0x1<<14)

	)

558 
	#BIT_UART2
 (0x1<<15)

	)

559 
	#BIT_LCD
 (0x1<<16)

	)

560 
	#BIT_DMA0
 (0x1<<17)

	)

561 
	#BIT_DMA1
 (0x1<<18)

	)

562 
	#BIT_DMA2
 (0x1<<19)

	)

563 
	#BIT_DMA3
 (0x1<<20)

	)

564 
	#BIT_SDI
 (0x1<<21)

	)

565 
	#BIT_SPI0
 (0x1<<22)

	)

566 
	#BIT_UART1
 (0x1<<23)

	)

567 
	#BIT_USBD
 (0x1<<25)

	)

568 
	#BIT_USBH
 (0x1<<26)

	)

569 
	#BIT_IIC
 (0x1<<27)

	)

570 
	#BIT_UART0
 (0x1<<28)

	)

571 
	#BIT_SPI1
 (0x1<<29)

	)

572 
	#BIT_RTC
 (0x1<<30)

	)

573 
	#BIT_ADC
 (0x1<<31)

	)

574 
	#BIT_ALLMSK
 (0xFFFFFFFF)

	)

576 
	#CË¬Pdg
(
b
) {\

577 
rSRCPND
 = 
b
;\

578 
rINTPND
 = 
b
;\

579 
rINTPND
;\

580 }

	)

582 #iâdeà
ASM


585 
	s_»g
 {

586 
	mSM_BIT
:1;

588 
	mRe£rved
:1;

591 
	mIDLE_BIT
:1;

593 
	mPOWER_OFF
:1;

594 
	mNAND_æash
:1;

595 
	mLCDC
:1;

596 
	mUSB_ho¡
:1;

597 
	mUSB_deviû
:1;

598 
	mPWMTIMER
:1;

599 
	mSDI
:1;

600 
	mUART0
:1;

601 
	mUART1
:1;

602 
	mUART2
:1;

603 
	mGPIO
:1;

604 
	mRTC
:1;

606 
	mADC
:1;

607 
	mIIC
:1;

608 
	mIIS
:1;

609 
	mSPI
:1;

610 } 
	m»g
;

611 
	m®l
;

612 } 
	tCLKCON
;

617 
	mENVID
:1;

618 
	mBPPMODE
:4;

620 
	mPNRMODE
:2;

621 
	mMMODE
:1;

623 
	mCLKVAL
:10;

624 
	mLINECNT
:10;

626 } 
	m»g
;

627 
	m®l
;

628 } 
	tLCDCON1
;

632 
	mVSPW
:6;

635 
	mVFPD
:8;

638 
	mLINEVAL
:10;

640 
	mVBPD
:8;

643 } 
	m»g
;

644 
	m®l
;

645 } 
	tLCDCON2
;

649 
	mHFPD
:8;

652 
	mHOZVAL
:11;

654 
	mHBPD
:7;

657 } 
	m»g
;

658 
	m®l
;

659 } 
	tLCDCON3
;

663 
	mHSPW
:8;

666 
	mMVAL
:8;

667 } 
	m»g
;

668 
	m®l
;

669 } 
	tLCDCON4
;

673 
	mHWSWP
:1;

675 
	mBSWP
:1;

677 
	mENLEND
:1;

680 
	mPWREN
:1;

681 
	mINVLEND
:1;

683 
	mINVPWREN
:1;

684 
	mINVVDEN
:1;

687 
	mINVVD
:1;

690 
	mINVVFRAME
:1;

692 
	mINVVLINE
:1;

694 
	mINVVCLK
:1;

698 
	mFRM565
:1;

699 
	mBPP24BL
:1;

700 
	mHSTATUS
:2;

705 
	mVSTATUS
:2;

710 
	mRESERVED
:16;

711 } 
	m»g
;

712 
	m®l
;

713 } 
	tLCDCON5
;

717 
	mLCDBASEU
:21;

720 
	mLCDBANK
:9;

721 } 
	m»g
;

722 
	m®l
;

723 } 
	tLCDSADDR1
;

727 
	mLCDBASEL
:21;

731 } 
	m»g
;

732 
	m®l
;

733 } 
	tLCDSADDR2
;

737 
	mPAGEWIDTH
:11;

740 
	mOFFSIZE
:11;

746 } 
	m»g
;

747 
	m®l
;

748 } 
	tLCDSADDR3
;

756 
	mIISIFENA
:1;

757 
	mIISPSENA
:1;

758 
	mRXCHIDLE
:1;

759 
	mTXCHIDLE
:1;

760 
	mRXDMAENA
:1;

761 
	mTXDMAENA
:1;

762 
	mRXFIFORDY
:1;

763 
	mTXFIFORDY
:1;

764 
	mLRINDEX
:1;

765 } 
	m»g
;

766 
	m®l
;

767 } 
	tIISCON
;

771 
	mSBCLKFS
:2;

772 
	mMCLKFS
:1;

773 
	mSDBITS
:1;

774 
	mSIFMT
:1;

775 
	mACTLEVCH
:1;

776 
	mTXRXMODE
:2;

777 
	mMODE
:1;

778 } 
	m»g
;

779 
	m®l
;

780 } 
	tIISMOD
;

784 
	mPSB
:5;

785 
	mPSA
:5;

786 } 
	m»g
;

787 
	m®l
;

788 } 
	tIISPSR
;

792 
	mRXFIFOCNT
:6;

793 
	mTXFIFOCNT
:6;

794 
	mRXFIFOENA
:1;

795 
	mTXFIFOENA
:1;

796 
	mRXFIFOMODE
:1;

797 
	mTXFIFOMODE
:1;

798 } 
	m»g
;

799 
	m®l
;

800 } 
	tIISSFIFCON
;

804 
	mFENTRY
:16;

805 } 
	m»g
;

806 
	m®l
;

807 } 
	tIISSFIF
;

810 
	#LCD_WIDTH
 240

	)

811 
	#LCD_HEIGHT
 320

	)

812 
	#LCD_ASPECT
 (()(
LCD_WIDTH
/
LCD_HEIGHT
))

	)

814 
	#SMDK2410_KEY_SELECT
 512

	)

815 
	#SMDK2410_KEY_START
 256

	)

816 
	#SMDK2410_KEY_A
 64

	)

817 
	#SMDK2410_KEY_B
 32

	)

818 
	#SMDK2410_KEY_L
 16

	)

819 
	#SMDK2410_KEY_R
 128

	)

820 
	#SMDK2410_KEY_UP
 8

	)

821 
	#SMDK2410_KEY_DOWN
 2

	)

822 
	#SMDK2410_KEY_LEFT
 1

	)

823 
	#SMDK2410_KEY_RIGHT
 4

	)

	@src/lib/libcpu/arm/s3c24xx/include/s3c24xx.h

8 #iâdeà
S3C24XX_H_


9 
	#S3C24XX_H_


	)

11 #ifdeà
CPU_S3C2400


12 
	~<s3c2400.h
>

13 #ià
defed
 
CPU_S3C2410


14 
	~<s3c2410.h
>

	@src/lib/libcpu/arm/s3c24xx/irq/irq.c

15 
	~<¹ems/scÜe/¬mv4.h
>

17 
	~<b¥.h
>

18 
	~<b¥/q.h
>

19 
	~<b¥/q-gic.h
>

21 
	~<s3c24xx.h
>

23 
	$b¥_¼u±_di¥©ch
()

25 
¹ems_veùÜ_numb
 
veùÜ
 = *((
ut32_t
 *è
rINTOFFSET_ADDR
);

27 
	`b¥_¼u±_hªdËr_di¥©ch
(
veùÜ
);

28 
	}
}

30 
¹ems_¡©us_code
 
	$b¥_¼u±_veùÜ_abË
(
¹ems_veùÜ_numb
 
veùÜ
)

32  
RTEMS_SUCCESSFUL
;

33 
	}
}

35 
¹ems_¡©us_code
 
	$b¥_¼u±_veùÜ_di§bË
(
¹ems_veùÜ_numb
 
veùÜ
)

37  
RTEMS_SUCCESSFUL
;

38 
	}
}

40 
¹ems_¡©us_code
 
	$b¥_¼u±_çcy_lize
()

42 
	`_CPU_ISR_¡®l_veùÜ
(
ARM_EXCEPTION_IRQ
, 
_ARMV4_Exû±iÚ_¼u±
, 
NULL
);

44  
RTEMS_SUCCESSFUL
;

45 
	}
}

	@src/lib/libcpu/arm/s3c24xx/irq/irq.h

11 #iâdeà
_IRQ_H_


12 
	#_IRQ_H_


	)

14 
	~<¹ems.h
>

15 
	~<¹ems/q.h
>

16 
	~<¹ems/q-exnsiÚ.h
>

18 
	~<s3c24xx.h
>

20 #ifdeà
CPU_S3C2400


22 
	#BSP_EINT0
 0

	)

23 
	#BSP_EINT1
 1

	)

24 
	#BSP_EINT2
 2

	)

25 
	#BSP_EINT3
 3

	)

26 
	#BSP_EINT4
 4

	)

27 
	#BSP_EINT5
 5

	)

28 
	#BSP_EINT6
 6

	)

29 
	#BSP_EINT7
 7

	)

30 
	#BSP_INT_TICK
 8

	)

31 
	#BSP_INT_WDT
 9

	)

32 
	#BSP_INT_TIMER0
 10

	)

33 
	#BSP_INT_TIMER1
 11

	)

34 
	#BSP_INT_TIMER2
 12

	)

35 
	#BSP_INT_TIMER3
 13

	)

36 
	#BSP_INT_TIMER4
 14

	)

37 
	#BSP_INT_UERR01
 15

	)

38 
	#_»s0
 16

	)

39 
	#BSP_INT_DMA0
 17

	)

40 
	#BSP_INT_DMA1
 18

	)

41 
	#BSP_INT_DMA2
 19

	)

42 
	#BSP_INT_DMA3
 20

	)

43 
	#BSP_INT_MMC
 21

	)

44 
	#BSP_INT_SPI
 22

	)

45 
	#BSP_INT_URXD0
 23

	)

46 
	#BSP_INT_URXD1
 24

	)

47 
	#BSP_INT_USBD
 25

	)

48 
	#BSP_INT_USBH
 26

	)

49 
	#BSP_INT_IIC
 27

	)

50 
	#BSP_INT_UTXD0
 28

	)

51 
	#BSP_INT_UTXD1
 29

	)

52 
	#BSP_INT_RTC
 30

	)

53 
	#BSP_INT_ADC
 31

	)

54 
	#BSP_MAX_INT
 32

	)

56 #ià
defed
 
CPU_S3C2410


58 
	#BSP_EINT0
 0

	)

59 
	#BSP_EINT1
 1

	)

60 
	#BSP_EINT2
 2

	)

61 
	#BSP_EINT3
 3

	)

62 
	#BSP_EINT4_7
 4

	)

63 
	#BSP_EINT8_23
 5

	)

64 
	#BSP_nBATT_FLT
 7

	)

65 
	#BSP_INT_TICK
 8

	)

66 
	#BSP_INT_WDT
 9

	)

67 
	#BSP_INT_TIMER0
 10

	)

68 
	#BSP_INT_TIMER1
 11

	)

69 
	#BSP_INT_TIMER2
 12

	)

70 
	#BSP_INT_TIMER3
 13

	)

71 
	#BSP_INT_TIMER4
 14

	)

72 
	#BSP_INT_UART2
 15

	)

73 
	#BSP_INT_LCD
 16

	)

74 
	#BSP_INT_DMA0
 17

	)

75 
	#BSP_INT_DMA1
 18

	)

76 
	#BSP_INT_DMA2
 19

	)

77 
	#BSP_INT_DMA3
 20

	)

78 
	#BSP_INT_SDI
 21

	)

79 
	#BSP_INT_SPI0
 22

	)

80 
	#BSP_INT_UART1
 23

	)

81 
	#BSP_INT_USBD
 25

	)

82 
	#BSP_INT_USBH
 26

	)

83 
	#BSP_INT_IIC
 27

	)

84 
	#BSP_INT_UART0
 28

	)

85 
	#BSP_INT_SPI1
 29

	)

86 
	#BSP_INT_RTC
 30

	)

87 
	#BSP_INT_ADC
 31

	)

88 
	#BSP_MAX_INT
 32

	)

91 
	#BSP_INTERRUPT_VECTOR_MIN
 0

	)

93 
	#BSP_INTERRUPT_VECTOR_MAX
 (
BSP_MAX_INT
 - 1)

	)

	@src/lib/libcpu/arm/s3c24xx/timer/timer.c

14 
	~<b¥.h
>

15 
	~<¹ems.h
>

16 
	~<¹ems/btim.h
>

17 
	~<s3c24xx.h
>

19 
ut32_t
 
	gg_¡¬t
;

20 
ut32_t
 
	gg_äeq
;

22 
boÞ
 
	gbchm¬k_tim_fd_avage_ovhd
;

28 
	$bchm¬k_tim_lize
( )

30 
ut32_t
 
ü
;

33 
ü
=
rTCON
 & 0xFFFFF0FF;

34 
rTCON
=(
ü
 | (0x0 << 8));

37 
ü
=
rTCFG1
 & 0xFFFFFF0F;

38 
rTCFG1
=(
ü
 | (0<<4));

41 
g_äeq
 = 
	`g_PCLK
() / 2000;

42 
rTCNTB1
 = 0xFFFF;

45 
ü
=
rTCON
 & 0xFFFFF0FF;

46 
rTCON
=(
ü
 | (0x1 << 9));

47 
rTCON
=(
ü
 | (0x1 << 8));

49 
g_¡¬t
 = 
rTCNTO1
;

50 
	}
}

62 
	#AVG_OVERHEAD
 0

	)

65 
	#LEAST_VALID
 1

	)

67 
bchm¬k_tim_t
 
	$bchm¬k_tim_»ad
( )

69 
ut32_t
 
t
;

70 
tÙ®
;

72 
t
 = 
rTCNTO1
;

79 
tÙ®
 = (
g_¡¬t
 - 
t
);

82 
tÙ®
 = (tÙ®*1000è/ 
g_äeq
;

84 iàÐ
bchm¬k_tim_fd_avage_ovhd
 == 1 ) {

85  (è
tÙ®
;

86 } iàÐ
tÙ®
 < 
LEAST_VALID
 ) {

93  (
tÙ®
 - 
AVG_OVERHEAD
);

94 
	}
}

96 
	$bchm¬k_tim_di§bË_subaùg_avage_ovhd
(
boÞ
 
fd_æag
)

98 
bchm¬k_tim_fd_avage_ovhd
 = 
fd_æag
;

99 
	}
}

	@src/lib/libcpu/arm/shared/arm920/mmu.c

10 
	~<libýu/mmu.h
>

11 
	~<libýu/¬m-ý15.h
>

13 
ut32_t
 
	tmmu_lvl1_t
;

15 
ut32_t
 
_bl_ba£
;

17 
mmu_£t_m­_v®
(
mmu_lvl1_t
 *
ba£
);

19 
	#MMU_CTRL_MMU_EN
 (1 << 0)

	)

20 
	#MMU_CTRL_ALIGN_FAULT_EN
 (1 << 1)

	)

21 
	#MMU_CTRL_D_CACHE_EN
 (1 << 2)

	)

22 
	#MMU_CTRL_DEFAULT
 (0xà<< 3)

	)

23 
	#MMU_CTRL_LITTLE_ENDIAN
 (0 << 7)

	)

24 
	#MMU_CTRL_BIG_ENDIAN
 (1 << 7)

	)

25 
	#MMU_CTRL_SYS_PROT
 (1 << 8)

	)

26 
	#MMU_CTRL_ROM_PROT
 (1 << 9)

	)

27 
	#MMU_CTRL_I_CACHE_EN
 (1 << 12)

	)

28 
	#MMU_CTRL_LOW_VECT
 (0 << 13)

	)

29 
	#MMU_CTRL_HIGH_VECT
 (1 << 13)

	)

32 
	#MMU_SET_LVL1_SECT
(
addr
, 
­
, 
dom
, 
û
, 
be
) \

33 (((
addr
) & 0xfff00000) | \

34 (
­
) | \

35 (
dom
) | \

36 ((
û
) << 3) | \

37 ((
be
) << 2) | \

38 0x12)

	)

40 
	#MMU_SET_LVL1_INVAL
 (0x0)

	)

42 
	#MMU_SECT_AP_ALL
 (0x3 << 10)

	)

44 
	$mmu_
(
mmu_£ù_m­_t
 *
m­
)

46 
mmu_lvl1_t
 *
lvl1_ba£
;

47 
i
;

50 
	`¬m_ý15_ÿche_v®id©e
();

51 
	`¬m_ý15_b_v®id©e
();

54 
	`¬m_ý15_£t_doma_acûss_cÚÞ
(0xffffffff);

56 
lvl1_ba£
 = (
mmu_lvl1_t
 *)&
_bl_ba£
;

59 
	`mmu_£t_m­_v®
(
lvl1_ba£
);

60 
	`¬m_ý15_£t_ª¦©iÚ_bË_ba£
(
lvl1_ba£
);

63 
i
 = 0;

64 
m­
[
i
].
size
 != 0) {

65 
c
 = 0;

66 
b
 = 0;

67 
pba£
;

68 
vba£
;

69 
£ùs
;

71 
m­
[
i
].
ÿche_æags
) {

72 
MMU_CACHE_NONE
:

73 
c
 = 0;

74 
b
 = 0;

76 
MMU_CACHE_BUFFERED
:

77 
c
 = 0;

78 
b
 = 1;

80 
MMU_CACHE_WTHROUGH
:

81 
c
 = 1;

82 
b
 = 0;

84 
MMU_CACHE_WBACK
:

85 
c
 = 1;

86 
b
 = 1;

90 
pba£
 = (
m­
[
i
].
·ddr
 & 0xfff00000) >> 20;

91 
vba£
 = (
m­
[
i
].
vaddr
 & 0xfff00000) >> 20;

92 
£ùs
 = 
m­
[
i
].
size
;

94 
£ùs
 > 0) {

95 
lvl1_ba£
[
vba£
] = 
	`MMU_SET_LVL1_SECT
(
pba£
 << 20,

96 
MMU_SECT_AP_ALL
,

98 
c
,

99 
b
);

100 
pba£
++;

101 
vba£
++;

102 
£ùs
--;

104 
i
++;

108 
	`¬m_ý15_ÿche_v®id©e
();

109 
	`¬m_ý15_b_v®id©e
();

112 
	`¬m_ý15_£t_cÚÞ
(
MMU_CTRL_DEFAULT
 |

113 
MMU_CTRL_D_CACHE_EN
 |

114 
MMU_CTRL_I_CACHE_EN
 |

115 
MMU_CTRL_ALIGN_FAULT_EN
 |

116 
MMU_CTRL_LITTLE_ENDIAN
 |

117 
MMU_CTRL_MMU_EN
);

120 
	}
}

123 
	$mmu_£t_m­_v®
(
mmu_lvl1_t
 *
ba£
)

125 
i
;

126 
i
 = 0; i < (0x4000 / 4); i++) {

127 
ba£
[
i
] = 
MMU_SET_LVL1_INVAL
;

129 
	}
}

131 
	$mmu_£t_ýu_async_mode
()

133 
ut32_t
 
»g
;

134 
»g
 = 
	`¬m_ý15_g_cÚÞ
();

135 
»g
 |= 0xc0000000;

136 
	`¬m_ý15_£t_cÚÞ
(
»g
);

137 
	}
}

	@src/lib/libcpu/arm/shared/include/am335x.h

20 
	#OMAP3_DM37XX_INTR_BASE
 0x48200000

	)

23 
	#OMAP3_AM335X_INTR_BASE
 0x48200000

	)

25 
	#AM335X_INT_EMUINT
 0

	)

27 
	#AM335X_INT_COMMTX
 1

	)

29 
	#AM335X_INT_COMMRX
 2

	)

31 
	#AM335X_INT_BENCH
 3

	)

33 
	#AM335X_INT_ELM_IRQ
 4

	)

35 
	#AM335X_INT_NMI
 7

	)

37 
	#AM335X_INT_L3DEBUG
 9

	)

39 
	#AM335X_INT_L3APPINT
 10

	)

41 
	#AM335X_INT_PRCMINT
 11

	)

43 
	#AM335X_INT_EDMACOMPINT
 12

	)

45 
	#AM335X_INT_EDMAMPERR
 13

	)

47 
	#AM335X_INT_EDMAERRINT
 14

	)

49 
	#AM335X_INT_ADC_TSC_GENINT
 16

	)

51 
	#AM335X_INT_USBSSINT
 17

	)

53 
	#AM335X_INT_USB0
 18

	)

55 
	#AM335X_INT_USB1
 19

	)

57 
	#AM335X_INT_PRUSS1_EVTOUT0
 20

	)

59 
	#AM335X_INT_PRUSS1_EVTOUT1
 21

	)

61 
	#AM335X_INT_PRUSS1_EVTOUT2
 22

	)

63 
	#AM335X_INT_PRUSS1_EVTOUT3
 23

	)

65 
	#AM335X_INT_PRUSS1_EVTOUT4
 24

	)

67 
	#AM335X_INT_PRUSS1_EVTOUT5
 25

	)

69 
	#AM335X_INT_PRUSS1_EVTOUT6
 26

	)

71 
	#AM335X_INT_PRUSS1_EVTOUT7
 27

	)

73 
	#AM335X_INT_MMCSD1INT
 28

	)

75 
	#AM335X_INT_MMCSD2INT
 29

	)

77 
	#AM335X_INT_I2C2INT
 30

	)

79 
	#AM335X_INT_eCAP0INT
 31

	)

81 
	#AM335X_INT_GPIOINT2A
 32

	)

83 
	#AM335X_INT_GPIOINT2B
 33

	)

85 
	#AM335X_INT_USBWAKEUP
 34

	)

87 
	#AM335X_INT_LCDCINT
 36

	)

89 
	#AM335X_INT_GFXINT
 37

	)

91 
	#AM335X_INT_ePWM2INT
 39

	)

93 
	#AM335X_INT_3PGSWRXTHR0
 40

	)

95 
	#AM335X_INT_3PGSWRXINT0
 41

	)

97 
	#AM335X_INT_3PGSWTXINT0
 42

	)

99 
	#AM335X_INT_3PGSWMISC0
 43

	)

101 
	#AM335X_INT_UART3INT
 44

	)

103 
	#AM335X_INT_UART4INT
 45

	)

105 
	#AM335X_INT_UART5INT
 46

	)

107 
	#AM335X_INT_eCAP1INT
 47

	)

109 
	#AM335X_INT_DCAN0_INT0
 52

	)

111 
	#AM335X_INT_DCAN0_INT1
 53

	)

113 
	#AM335X_INT_DCAN0_PARITY
 54

	)

115 
	#AM335X_INT_DCAN1_INT0
 55

	)

117 
	#AM335X_INT_DCAN1_INT1
 56

	)

119 
	#AM335X_INT_DCAN1_PARITY
 57

	)

121 
	#AM335X_INT_ePWM0_TZINT
 58

	)

123 
	#AM335X_INT_ePWM1_TZINT
 59

	)

125 
	#AM335X_INT_ePWM2_TZINT
 60

	)

127 
	#AM335X_INT_eCAP2INT
 61

	)

129 
	#AM335X_INT_GPIOINT3A
 62

	)

131 
	#AM335X_INT_GPIOINT3B
 63

	)

133 
	#AM335X_INT_MMCSD0INT
 64

	)

135 
	#AM335X_INT_SPI0INT
 65

	)

137 
	#AM335X_INT_TINT0
 66

	)

139 
	#AM335X_INT_TINT1_1MS
 67

	)

141 
	#AM335X_INT_TINT2
 68

	)

143 
	#AM335X_INT_TINT3
 69

	)

145 
	#AM335X_INT_I2C0INT
 70

	)

147 
	#AM335X_INT_I2C1INT
 71

	)

149 
	#AM335X_INT_UART0INT
 72

	)

151 
	#AM335X_INT_UART1INT
 73

	)

153 
	#AM335X_INT_UART2INT
 74

	)

155 
	#AM335X_INT_RTCINT
 75

	)

157 
	#AM335X_INT_RTCALARMINT
 76

	)

159 
	#AM335X_INT_MBINT0
 77

	)

161 
	#AM335X_INT_M3_TXEV
 78

	)

163 
	#AM335X_INT_eQEP0INT
 79

	)

165 
	#AM335X_INT_MCATXINT0
 80

	)

167 
	#AM335X_INT_MCARXINT0
 81

	)

169 
	#AM335X_INT_MCATXINT1
 82

	)

171 
	#AM335X_INT_MCARXINT1
 83

	)

173 
	#AM335X_INT_ePWM0INT
 86

	)

175 
	#AM335X_INT_ePWM1INT
 87

	)

177 
	#AM335X_INT_eQEP1INT
 88

	)

179 
	#AM335X_INT_eQEP2INT
 89

	)

181 
	#AM335X_INT_DMA_INTR_PIN2
 90

	)

183 
	#AM335X_INT_WDT1INT
 91

	)

185 
	#AM335X_INT_TINT4
 92

	)

187 
	#AM335X_INT_TINT5
 93

	)

189 
	#AM335X_INT_TINT6
 94

	)

191 
	#AM335X_INT_TINT7
 95

	)

193 
	#AM335X_INT_GPIOINT0A
 96

	)

195 
	#AM335X_INT_GPIOINT0B
 97

	)

197 
	#AM335X_INT_GPIOINT1A
 98

	)

199 
	#AM335X_INT_GPIOINT1B
 99

	)

201 
	#AM335X_INT_GPMCINT
 100

	)

203 
	#AM335X_INT_DDRERR0
 101

	)

205 
	#AM335X_INT_TCERRINT0
 112

	)

207 
	#AM335X_INT_TCERRINT1
 113

	)

209 
	#AM335X_INT_TCERRINT2
 114

	)

211 
	#AM335X_INT_ADC_TSC_PENINT
 115

	)

213 
	#AM335X_INT_SMRFLX_SabtoÙh
 120

	)

215 
	#AM335X_INT_SMRFLX_CÜe
 121

	)

217 
	#AM335X_INT_DMA_INTR_PIN0
 123

	)

219 
	#AM335X_INT_DMA_INTR_PIN1
 124

	)

221 
	#AM335X_INT_SPI1INT
 125

	)

224 
	#OMAP3_AM335X_NR_IRQ_VECTORS
 125

	)

226 
	#AM335X_DMTIMER0_BASE
 0x44E05000

	)

228 
	#AM335X_DMTIMER1_1MS_BASE
 0x44E31000

	)

230 
	#AM335X_DMTIMER2_BASE
 0x48040000

	)

232 
	#AM335X_DMTIMER3_BASE
 0x48042000

	)

234 
	#AM335X_DMTIMER4_BASE
 0x48044000

	)

236 
	#AM335X_DMTIMER5_BASE
 0x48046000

	)

238 
	#AM335X_DMTIMER6_BASE
 0x48048000

	)

240 
	#AM335X_DMTIMER7_BASE
 0x4804A000

	)

245 
	#AM335X_TIMER_TIDR
 0x000

	)

247 
	#AM335X_TIMER_TIOCP_CFG
 0x010

	)

249 
	#AM335X_TIMER_IRQSTATUS_RAW
 0x024

	)

251 
	#AM335X_TIMER_IRQSTATUS
 0x028

	)

253 
	#AM335X_TIMER_IRQENABLE_SET
 0x02C

	)

255 
	#AM335X_TIMER_IRQENABLE_CLR
 0x030

	)

257 
	#AM335X_TIMER_IRQWAKEEN
 0x034

	)

259 
	#AM335X_TIMER_TCLR
 0x038

	)

261 
	#AM335X_TIMER_TCRR
 0x03C

	)

263 
	#AM335X_TIMER_TLDR
 0x040

	)

265 
	#AM335X_TIMER_TTGR
 0x044

	)

267 
	#AM335X_TIMER_TWPS
 0x048

	)

269 
	#AM335X_TIMER_TMAR
 0x04C

	)

271 
	#AM335X_TIMER_TCAR1
 0x050

	)

273 
	#AM335X_TIMER_TSICR
 0x054

	)

275 
	#AM335X_TIMER_TCAR2
 0x058

	)

277 
	#AM335X_WDT_BASE
 0x44E35000

	)

279 
	#AM335X_WDT_WWPS
 0x34

	)

281 
	#AM335X_WDT_WSPR
 0x48

	)

285 
	#AM335X_RTC_BASE
 0x44E3E000

	)

286 
	#AM335X_RTC_SECS
 0x0

	)

287 
	#AM335X_RTC_MINS
 0x4

	)

288 
	#AM335X_RTC_HOURS
 0x8

	)

289 
	#AM335X_RTC_DAYS
 0xc

	)

290 
	#AM335X_RTC_MONTHS
 0x10

	)

291 
	#AM335X_RTC_YEARS
 0x14

	)

292 
	#AM335X_RTC_WEEKS
 0x18

	)

293 
	#AM335X_RTC_CTRL_REG
 0x40

	)

294 
	#AM335X_RTC_STATUS_REG
 0x44

	)

295 
	#AM335X_RTC_REV_REG
 0x74

	)

296 
	#AM335X_RTC_SYSCONFIG
 0x78

	)

297 
	#AM335X_RTC_KICK0
 0x6c

	)

298 
	#AM335X_RTC_KICK1
 0x70

	)

299 
	#AM335X_RTC_OSC_CLOCK
 0x54

	)

301 
	#AM335X_RTC_KICK0_KEY
 0x83E70B13

	)

302 
	#AM335X_RTC_KICK1_KEY
 0x95A4F1E0

	)

	@src/lib/libcpu/arm/shared/include/arm-cp15.h

24 #iâdeà
LIBCPU_SHARED_ARM_CP15_H


25 
	#LIBCPU_SHARED_ARM_CP15_H


	)

27 
	~<¹ems.h
>

29 #ifdeà
__ýlu¥lus


37 #iâdeà
ARM_CP15_TEXT_SECTION


38 
	#ARM_CP15_TEXT_SECTION


	)

41 
	#ARM_CP15_CACHE_PREPARE_MVA
(
mva
) \

42 ((cÚ¡ *è(((
ut32_t
è(
mva
)è& ~0x1fU))

	)

44 
	#ARM_CP15_TLB_PREPARE_MVA
(
mva
) \

45 ((cÚ¡ *è(((
ut32_t
è(
mva
)è& ~0x3fU))

	)

67 
	#ARM_MMU_SECT_BASE_SHIFT
 20

	)

68 
	#ARM_MMU_SECT_BASE_MASK
 (0xfffU << 
ARM_MMU_SECT_BASE_SHIFT
)

	)

69 
	#ARM_MMU_SECT_NS
 (1U << 19)

	)

70 
	#ARM_MMU_SECT_NG
 (1U << 17)

	)

71 
	#ARM_MMU_SECT_S
 (1U << 16)

	)

72 
	#ARM_MMU_SECT_AP_2
 (1U << 15)

	)

73 
	#ARM_MMU_SECT_TEX_2
 (1U << 14)

	)

74 
	#ARM_MMU_SECT_TEX_1
 (1U << 13)

	)

75 
	#ARM_MMU_SECT_TEX_0
 (1U << 12)

	)

76 
	#ARM_MMU_SECT_TEX_SHIFT
 12

	)

77 
	#ARM_MMU_SECT_TEX_MASK
 (0x3U << 
ARM_MMU_SECT_TEX_SHIFT
)

	)

78 
	#ARM_MMU_SECT_AP_1
 (1U << 11)

	)

79 
	#ARM_MMU_SECT_AP_0
 (1U << 10)

	)

80 
	#ARM_MMU_SECT_AP_SHIFT
 10

	)

81 
	#ARM_MMU_SECT_AP_MASK
 (0x23U << 
ARM_MMU_SECT_AP_SHIFT
)

	)

82 
	#ARM_MMU_SECT_DOMAIN_SHIFT
 5

	)

83 
	#ARM_MMU_SECT_DOMAIN_MASK
 (0xfU << 
ARM_MMU_SECT_DOMAIN_SHIFT
)

	)

84 
	#ARM_MMU_SECT_XN
 (1U << 4)

	)

85 
	#ARM_MMU_SECT_C
 (1U << 3)

	)

86 
	#ARM_MMU_SECT_B
 (1U << 2)

	)

87 
	#ARM_MMU_SECT_PXN
 (1U << 0)

	)

88 
	#ARM_MMU_SECT_DEFAULT
 0x2U

	)

89 
	#ARM_MMU_SECT_GET_INDEX
(
mva
) \

90 (((
ut32_t
è(
mva
)è>> 
ARM_MMU_SECT_BASE_SHIFT
)

	)

91 
	#ARM_MMU_SECT_MVA_ALIGN_UP
(
mva
) \

92 ((1U << 
ARM_MMU_SECT_BASE_SHIFT
) \

93 + ((((
ut32_t
è(
mva
è- 1U)è& ~((1U << 
ARM_MMU_SECT_BASE_SHIFT
è- 1U)))

	)

95 
	#ARM_MMU_TRANSLATION_TABLE_ENTRY_SIZE
 4U

	)

96 
	#ARM_MMU_TRANSLATION_TABLE_ENTRY_COUNT
 4096U

	)

98 
	#ARM_MMU_DEFAULT_CLIENT_DOMAIN
 15U

	)

100 
	#ARMV7_MMU_READ_ONLY
 \

101 ((
ARM_MMU_DEFAULT_CLIENT_DOMAIN
 << 
ARM_MMU_SECT_DOMAIN_SHIFT
) \

102 | 
ARM_MMU_SECT_AP_0
 \

103 | 
ARM_MMU_SECT_AP_2
 \

104 | 
ARM_MMU_SECT_DEFAULT
)

	)

106 
	#ARMV7_MMU_READ_ONLY_CACHED
 \

107 (
ARMV7_MMU_READ_ONLY
 | 
ARM_MMU_SECT_TEX_0
 | 
ARM_MMU_SECT_C
 | 
ARM_MMU_SECT_B
)

	)

109 
	#ARMV7_MMU_READ_WRITE
 \

110 ((
ARM_MMU_DEFAULT_CLIENT_DOMAIN
 << 
ARM_MMU_SECT_DOMAIN_SHIFT
) \

111 | 
ARM_MMU_SECT_AP_0
 \

112 | 
ARM_MMU_SECT_DEFAULT
)

	)

114 #ifdeà
RTEMS_SMP


115 
	#ARMV7_MMU_READ_WRITE_CACHED
 \

116 (
ARMV7_MMU_READ_WRITE
 \

117 | 
ARM_MMU_SECT_TEX_0
 | 
ARM_MMU_SECT_C
 | 
ARM_MMU_SECT_B
 | 
ARM_MMU_SECT_S
)

	)

119 
	#ARMV7_MMU_READ_WRITE_CACHED
 \

120 (
ARMV7_MMU_READ_WRITE
 \

121 | 
ARM_MMU_SECT_TEX_0
 | 
ARM_MMU_SECT_C
 | 
ARM_MMU_SECT_B
)

	)

124 
	#ARMV7_MMU_DATA_READ_ONLY
 \

125 (
ARMV7_MMU_READ_ONLY
 | 
ARM_MMU_SECT_TEX_0
)

	)

127 
	#ARMV7_MMU_DATA_READ_ONLY_CACHED
 \

128 
ARMV7_MMU_READ_ONLY_CACHED


	)

130 
	#ARMV7_MMU_DATA_READ_WRITE
 \

131 (
ARMV7_MMU_READ_WRITE
 | 
ARM_MMU_SECT_TEX_0
)

	)

133 
	#ARMV7_MMU_DATA_READ_WRITE_CACHED
 \

134 
ARMV7_MMU_READ_WRITE_CACHED


	)

136 
	#ARMV7_MMU_CODE
 \

137 (
ARMV7_MMU_READ_ONLY
 | 
ARM_MMU_SECT_TEX_0
)

	)

139 
	#ARMV7_MMU_CODE_CACHED
 \

140 
ARMV7_MMU_READ_ONLY_CACHED


	)

142 
	#ARMV7_MMU_DEVICE
 \

143 (
ARMV7_MMU_READ_WRITE
 | 
ARM_MMU_SECT_B
)

	)

153 
	#ARM_CP15_CTRL_TE
 (1U << 30)

	)

154 
	#ARM_CP15_CTRL_AFE
 (1U << 29)

	)

155 
	#ARM_CP15_CTRL_TRE
 (1U << 28)

	)

156 
	#ARM_CP15_CTRL_NMFI
 (1U << 27)

	)

157 
	#ARM_CP15_CTRL_EE
 (1U << 25)

	)

158 
	#ARM_CP15_CTRL_VE
 (1U << 24)

	)

159 
	#ARM_CP15_CTRL_XP
 (1U << 23)

	)

160 
	#ARM_CP15_CTRL_U
 (1U << 22)

	)

161 
	#ARM_CP15_CTRL_FI
 (1U << 21)

	)

162 
	#ARM_CP15_CTRL_UWXN
 (1U << 20)

	)

163 
	#ARM_CP15_CTRL_WXN
 (1U << 19)

	)

164 
	#ARM_CP15_CTRL_HA
 (1U << 17)

	)

165 
	#ARM_CP15_CTRL_L4
 (1U << 15)

	)

166 
	#ARM_CP15_CTRL_RR
 (1U << 14)

	)

167 
	#ARM_CP15_CTRL_V
 (1U << 13)

	)

168 
	#ARM_CP15_CTRL_I
 (1U << 12)

	)

169 
	#ARM_CP15_CTRL_Z
 (1U << 11)

	)

170 
	#ARM_CP15_CTRL_SW
 (1U << 10)

	)

171 
	#ARM_CP15_CTRL_R
 (1U << 9)

	)

172 
	#ARM_CP15_CTRL_S
 (1U << 8)

	)

173 
	#ARM_CP15_CTRL_B
 (1U << 7)

	)

174 
	#ARM_CP15_CTRL_CP15BEN
 (1U << 5)

	)

175 
	#ARM_CP15_CTRL_C
 (1U << 2)

	)

176 
	#ARM_CP15_CTRL_A
 (1U << 1)

	)

177 
	#ARM_CP15_CTRL_M
 (1U << 0)

	)

187 
	#ARM_CP15_DAC_NO_ACCESS
 0x0U

	)

188 
	#ARM_CP15_DAC_CLIENT
 0x1U

	)

189 
	#ARM_CP15_DAC_MANAGER
 0x3U

	)

190 
	#ARM_CP15_DAC_DOMAIN
(
dex
, 
v®
è((v®è<< (2 * index))

	)

200 
	#ARM_CP15_FAULT_STATUS_MASK
 0x040F

	)

202 
	#ARM_CP15_FSR_ALIGNMENT_FAULT
 0x00000001

	)

203 
	#ARM_CP15_FSR_BACKGROUND_FAULT
 0x0000

	)

204 
	#ARM_CP15_FSR_ACCESS_PERMISSION_FAULT
 0x000D

	)

205 
	#ARM_CP15_FSR_PRECISE_EXTERNAL_ABORT_FAULT
 0x0008

	)

206 
	#ARM_CP15_FSR_IMPRECISE_EXTERNAL_ABORT_FAULT
 0x0406

	)

207 
	#ARM_CP15_FSR_PRECISE_PARITY_ERROR_EXCEPTION
 0x0006

	)

208 
	#ARM_CP15_FSR_IMPRECISE_PARITY_ERROR_EXCEPTION
 0x0408

	)

209 
	#ARM_CP15_FSR_DEBUG_EVENT
 0x0002

	)

213 
ARM_CP15_TEXT_SECTION
 
le
 
ut32_t


214 
¬m_ý15_g_id_code
()

216 
ARM_SWITCH_REGISTERS
;

217 
ut32_t
 
v®
;

219 
__asm__
 volatile (

220 
ARM_SWITCH_TO_ARM


222 
ARM_SWITCH_BACK


223 : [
v®
] "=&r" (v®è
ARM_SWITCH_ADDITIONAL_OUTPUT


226  
v®
;

229 
ARM_CP15_TEXT_SECTION
 
le
 
ut32_t


230 
¬m_ý15_g_tcm_¡©us
()

232 
ARM_SWITCH_REGISTERS
;

233 
ut32_t
 
v®
;

235 
__asm__
 volatile (

236 
ARM_SWITCH_TO_ARM


238 
ARM_SWITCH_BACK


239 : [
v®
] "=&r" (v®è
ARM_SWITCH_ADDITIONAL_OUTPUT


242  
v®
;

245 
ARM_CP15_TEXT_SECTION
 
le
 
ut32_t


246 
¬m_ý15_g_cÚÞ
()

248 
ARM_SWITCH_REGISTERS
;

249 
ut32_t
 
v®
;

251 
__asm__
 volatile (

252 
ARM_SWITCH_TO_ARM


254 
ARM_SWITCH_BACK


255 : [
v®
] "=&r" (v®è
ARM_SWITCH_ADDITIONAL_OUTPUT


258  
v®
;

261 
ARM_CP15_TEXT_SECTION
 
le
 

262 
¬m_ý15_£t_cÚÞ
(
ut32_t
 
v®
)

264 
ARM_SWITCH_REGISTERS
;

266 
__asm__
 volatile (

267 
ARM_SWITCH_TO_ARM


271 
ARM_SWITCH_BACK


272 : 
ARM_SWITCH_OUTPUT


273 : [
v®
] "r" (val)

294 
ARM_CP15_TEXT_SECTION
 
le
 
ut32_t


295 
¬m_ý15_mmu_di§bË
(
ut32_t
 
þs
)

297 
ARM_SWITCH_REGISTERS
;

298 
ut32_t
 
ù¾
;

299 
ut32_t
 
tmp_0
;

300 
ut32_t
 
tmp_1
;

302 
__asm__
 volatile (

303 
ARM_SWITCH_TO_ARM


319 
ARM_SWITCH_BACK


320 : [
ù¾
] "=&r" (ctrl),

321 [
tmp_0
] "=&r" (tmp_0),

322 [
tmp_1
] "=&r" (tmp_1)

323 
ARM_SWITCH_ADDITIONAL_OUTPUT


324 : [
þs
] "r" (cls)

328  
ù¾
;

331 
ARM_CP15_TEXT_SECTION
 
le
 
ut32_t


332 *
¬m_ý15_g_ª¦©iÚ_bË_ba£
()

334 
ARM_SWITCH_REGISTERS
;

335 
ut32_t
 *
ba£
;

337 
__asm__
 volatile (

338 
ARM_SWITCH_TO_ARM


340 
ARM_SWITCH_BACK


341 : [
ba£
] "=&r" (ba£è
ARM_SWITCH_ADDITIONAL_OUTPUT


344  
ba£
;

347 
ARM_CP15_TEXT_SECTION
 
le
 

348 
¬m_ý15_£t_ª¦©iÚ_bË_ba£
(
ut32_t
 *
ba£
)

350 
ARM_SWITCH_REGISTERS
;

352 
__asm__
 volatile (

353 
ARM_SWITCH_TO_ARM


355 
ARM_SWITCH_BACK


356 : 
ARM_SWITCH_OUTPUT


357 : [
ba£
] "r" (base)

361 
ARM_CP15_TEXT_SECTION
 
le
 
ut32_t


362 
¬m_ý15_g_doma_acûss_cÚÞ
()

364 
ARM_SWITCH_REGISTERS
;

365 
ut32_t
 
v®
;

367 
__asm__
 volatile (

368 
ARM_SWITCH_TO_ARM


370 
ARM_SWITCH_BACK


371 : [
v®
] "=&r" (v®è
ARM_SWITCH_ADDITIONAL_OUTPUT


374  
v®
;

377 
ARM_CP15_TEXT_SECTION
 
le
 

378 
¬m_ý15_£t_doma_acûss_cÚÞ
(
ut32_t
 
v®
)

380 
ARM_SWITCH_REGISTERS
;

382 
__asm__
 volatile (

383 
ARM_SWITCH_TO_ARM


385 
ARM_SWITCH_BACK


386 : 
ARM_SWITCH_OUTPUT


387 : [
v®
] "r" (val)

391 
ARM_CP15_TEXT_SECTION
 
le
 
ut32_t


392 
¬m_ý15_g_d©a_çuÉ_¡©us
()

394 
ARM_SWITCH_REGISTERS
;

395 
ut32_t
 
v®
;

397 
__asm__
 volatile (

398 
ARM_SWITCH_TO_ARM


400 
ARM_SWITCH_BACK


401 : [
v®
] "=&r" (v®è
ARM_SWITCH_ADDITIONAL_OUTPUT


404  
v®
;

407 
ARM_CP15_TEXT_SECTION
 
le
 

408 
¬m_ý15_£t_d©a_çuÉ_¡©us
(
ut32_t
 
v®
)

410 
ARM_SWITCH_REGISTERS
;

412 
__asm__
 volatile (

413 
ARM_SWITCH_TO_ARM


415 
ARM_SWITCH_BACK


416 : 
ARM_SWITCH_OUTPUT


417 : [
v®
] "r" (val)

421 
ARM_CP15_TEXT_SECTION
 
le
 
ut32_t


422 
¬m_ý15_g_¡ruùiÚ_çuÉ_¡©us
()

424 
ARM_SWITCH_REGISTERS
;

425 
ut32_t
 
v®
;

427 
__asm__
 volatile (

428 
ARM_SWITCH_TO_ARM


430 
ARM_SWITCH_BACK


431 : [
v®
] "=&r" (v®è
ARM_SWITCH_ADDITIONAL_OUTPUT


434  
v®
;

437 
ARM_CP15_TEXT_SECTION
 
le
 

438 
¬m_ý15_£t_¡ruùiÚ_çuÉ_¡©us
(
ut32_t
 
v®
)

440 
ARM_SWITCH_REGISTERS
;

442 
__asm__
 volatile (

443 
ARM_SWITCH_TO_ARM


445 
ARM_SWITCH_BACK


446 : 
ARM_SWITCH_OUTPUT


447 : [
v®
] "r" (val)

451 
ARM_CP15_TEXT_SECTION
 
le
 

452 *
¬m_ý15_g_çuÉ_add»ss
()

454 
ARM_SWITCH_REGISTERS
;

455 *
mva
;

457 
__asm__
 volatile (

458 
ARM_SWITCH_TO_ARM


460 
ARM_SWITCH_BACK


461 : [
mva
] "=&r" (mvaè
ARM_SWITCH_ADDITIONAL_OUTPUT


464  
mva
;

467 
ARM_CP15_TEXT_SECTION
 
le
 

468 
¬m_ý15_£t_çuÉ_add»ss
(cÚ¡ *
mva
)

470 
ARM_SWITCH_REGISTERS
;

472 
__asm__
 volatile (

473 
ARM_SWITCH_TO_ARM


475 
ARM_SWITCH_BACK


476 : 
ARM_SWITCH_OUTPUT


477 : [
mva
] "r" (mva)

481 
ARM_CP15_TEXT_SECTION
 
le
 

482 
¬m_ý15_b_v®id©e
()

484 
ARM_SWITCH_REGISTERS
;

485 
ut32_t
 
sbz
 = 0;

487 
__asm__
 volatile (

488 
ARM_SWITCH_TO_ARM


490 
ARM_SWITCH_BACK


491 : 
ARM_SWITCH_OUTPUT


492 : [
sbz
] "r" (sbz)

499 
_ARM_D©a_synchrÚiz©iÚ_b¬rr
();

500 
_ARM_In¡ruùiÚ_synchrÚiz©iÚ_b¬rr
();

503 
ARM_CP15_TEXT_SECTION
 
le
 

504 
¬m_ý15_b_v®id©e_y
(cÚ¡ *
mva
)

506 
ARM_SWITCH_REGISTERS
;

508 
mva
 = 
ARM_CP15_TLB_PREPARE_MVA
(mva);

510 
__asm__
 volatile (

511 
ARM_SWITCH_TO_ARM


513 
ARM_SWITCH_BACK


514 : 
ARM_SWITCH_OUTPUT


515 : [
mva
] "r" (mva)

519 
ARM_CP15_TEXT_SECTION
 
le
 

520 
¬m_ý15_b_¡ruùiÚ_v®id©e
()

522 
ARM_SWITCH_REGISTERS
;

523 
ut32_t
 
sbz
 = 0;

525 
__asm__
 volatile (

526 
ARM_SWITCH_TO_ARM


528 
ARM_SWITCH_BACK


529 : 
ARM_SWITCH_OUTPUT


530 : [
sbz
] "r" (sbz)

534 
ARM_CP15_TEXT_SECTION
 
le
 

535 
¬m_ý15_b_¡ruùiÚ_v®id©e_y
(cÚ¡ *
mva
)

537 
ARM_SWITCH_REGISTERS
;

539 
mva
 = 
ARM_CP15_TLB_PREPARE_MVA
(mva);

541 
__asm__
 volatile (

542 
ARM_SWITCH_TO_ARM


544 
ARM_SWITCH_BACK


545 : 
ARM_SWITCH_OUTPUT


546 : [
mva
] "r" (mva)

550 
ARM_CP15_TEXT_SECTION
 
le
 

551 
¬m_ý15_b_d©a_v®id©e
()

553 
ARM_SWITCH_REGISTERS
;

554 
ut32_t
 
sbz
 = 0;

556 
__asm__
 volatile (

557 
ARM_SWITCH_TO_ARM


559 
ARM_SWITCH_BACK


560 : 
ARM_SWITCH_OUTPUT


561 : [
sbz
] "r" (sbz)

565 
ARM_CP15_TEXT_SECTION
 
le
 

566 
¬m_ý15_b_d©a_v®id©e_y
(cÚ¡ *
mva
)

568 
ARM_SWITCH_REGISTERS
;

570 
mva
 = 
ARM_CP15_TLB_PREPARE_MVA
(mva);

572 
__asm__
 volatile (

573 
ARM_SWITCH_TO_ARM


575 
ARM_SWITCH_BACK


576 : 
ARM_SWITCH_OUTPUT


577 : [
mva
] "r" (mva)

581 
ARM_CP15_TEXT_SECTION
 
le
 

582 
¬m_ý15_b_lockdown_y
(cÚ¡ *
mva
)

584 
ut32_t
 
¬m_swch_»g
;

586 
__asm__
 volatile (

587 
ARM_SWITCH_TO_ARM


598 
ARM_SWITCH_BACK


599 : [
mva
] "ô" (mva), [
¬m_swch_»g
] "=&r" (arm_switch_reg)

600 : "[mva]" (
mva
)

613 
ARM_CP15_TEXT_SECTION
 
le
 
ut32_t


614 
¬m_ý15_g_ÿche_ty³
()

616 
ARM_SWITCH_REGISTERS
;

617 
ut32_t
 
v®
;

619 
__asm__
 volatile (

620 
ARM_SWITCH_TO_ARM


622 
ARM_SWITCH_BACK


623 : [
v®
] "=&r" (v®è
ARM_SWITCH_ADDITIONAL_OUTPUT


626  
v®
;

630 
ARM_CP15_TEXT_SECTION
 
le
 
ut32_t


631 
¬m_ý15_g_m_ÿche_le_size
()

633 
ut32_t
 
mþs
 = 0;

634 
ut32_t
 
ù
 = 
¬m_ý15_g_ÿche_ty³
();

635 
ut32_t
 
fÜm©
 = (
ù
 >> 29) & 0x7U;

637 ià(
fÜm©
 == 0x4) {

639 
mþs
 = (1U << (
ù
 & 0xf)) * 4;

640 } ià(
fÜm©
 == 0x0) {

642 
ut32_t
 
mask
 = (1U << 12) - 1;

643 
ut32_t
 
dþs
 = (
ù
 >> 12è& 
mask
;

644 
ut32_t
 
iþs
 = 
ù
 & 
mask
;

646 
mþs
 = 
dþs
 <ð
iþs
 ? dcls : icls;

649  
mþs
;

653 
ARM_CP15_TEXT_SECTION
 
le
 
ut32_t


654 
¬m_ý15_g_d©a_ÿche_le_size
()

656 
ut32_t
 
mþs
 = 0;

657 
ut32_t
 
ù
 = 
¬m_ý15_g_ÿche_ty³
();

658 
ut32_t
 
fÜm©
 = (
ù
 >> 29) & 0x7U;

660 ià(
fÜm©
 == 0x4) {

662 
mþs
 = (1U << ((
ù
 & 0xf0000) >> 16)) * 4;

663 } ià(
fÜm©
 == 0x0) {

665 
ut32_t
 
mask
 = (1U << 12) - 1;

666 
mþs
 = (
ù
 >> 12è& 
mask
;

669  
mþs
;

673 
ARM_CP15_TEXT_SECTION
 
le
 
ut32_t


674 
¬m_ý15_g_¡ruùiÚ_ÿche_le_size
()

676 
ut32_t
 
mþs
 = 0;

677 
ut32_t
 
ù
 = 
¬m_ý15_g_ÿche_ty³
();

678 
ut32_t
 
fÜm©
 = (
ù
 >> 29) & 0x7U;

680 ià(
fÜm©
 == 0x4) {

682 
mþs
 = (1U << (
ù
 & 0x0000f)) * 4;

683 } ià(
fÜm©
 == 0x0) {

685 
ut32_t
 
mask
 = (1U << 12) - 1;

686 
mþs
 = 
ù
 & 
mask
;;

689  
mþs
;

694 
ARM_CP15_TEXT_SECTION
 
le
 
ut32_t


695 
¬m_ý15_g_ÿche_size_id
()

697 
ARM_SWITCH_REGISTERS
;

698 
ut32_t
 
v®
;

700 
__asm__
 volatile (

701 
ARM_SWITCH_TO_ARM


703 
ARM_SWITCH_BACK


704 : [
v®
] "=&r" (v®è
ARM_SWITCH_ADDITIONAL_OUTPUT


707  
v®
;

710 
ARM_CP15_TEXT_SECTION
 
le
 
ut32_t


711 
¬m_ccsidr_g_le_pow
(
ut32_t
 
ccsidr
)

713  (
ccsidr
 & 0x7) + 4;

716 
ARM_CP15_TEXT_SECTION
 
le
 
ut32_t


717 
¬m_ccsidr_g_assoctivy
(
ut32_t
 
ccsidr
)

719  ((
ccsidr
 >> 3) & 0x3ff) + 1;

722 
ARM_CP15_TEXT_SECTION
 
le
 
ut32_t


723 
¬m_ccsidr_g_num_£ts
(
ut32_t
 
ccsidr
)

725  ((
ccsidr
 >> 13) & 0x7fff) + 1;

730 
ARM_CP15_TEXT_SECTION
 
le
 
ut32_t


731 
¬m_ý15_g_ÿche_Ëv_id
()

733 
ARM_SWITCH_REGISTERS
;

734 
ut32_t
 
v®
;

736 
__asm__
 volatile (

737 
ARM_SWITCH_TO_ARM


739 
ARM_SWITCH_BACK


740 : [
v®
] "=&r" (v®è
ARM_SWITCH_ADDITIONAL_OUTPUT


743  
v®
;

746 
ARM_CP15_TEXT_SECTION
 
le
 
ut32_t


747 
¬m_þidr_g_Ëv_of_cohcy
(
ut32_t
 
þidr
)

749  (
þidr
 >> 24) & 0x7;

752 
ARM_CP15_TEXT_SECTION
 
le
 
ut32_t


753 
¬m_þidr_g_ÿche_ty³
(
ut32_t
 
þidr
, ut32_
Ëv
)

755  (
þidr
 >> (3 * 
Ëv
)) & 0x7;

760 
ARM_CP15_TEXT_SECTION
 
le
 
ut32_t


761 
¬m_ý15_g_ÿche_size_£ËùiÚ
()

763 
ARM_SWITCH_REGISTERS
;

764 
ut32_t
 
v®
;

766 
__asm__
 volatile (

767 
ARM_SWITCH_TO_ARM


769 
ARM_SWITCH_BACK


770 : [
v®
] "=&r" (v®è
ARM_SWITCH_ADDITIONAL_OUTPUT


773  
v®
;

776 
ARM_CP15_TEXT_SECTION
 
le
 

777 
¬m_ý15_£t_ÿche_size_£ËùiÚ
(
ut32_t
 
v®
)

779 
ARM_SWITCH_REGISTERS
;

781 
__asm__
 volatile (

782 
ARM_SWITCH_TO_ARM


784 
ARM_SWITCH_BACK


785 : 
ARM_SWITCH_OUTPUT


786 : [
v®
] "r" (val)

791 
ARM_CP15_TEXT_SECTION
 
le
 

792 
¬m_ý15_ÿche_v®id©e
()

794 
ARM_SWITCH_REGISTERS
;

795 
ut32_t
 
sbz
 = 0;

797 
__asm__
 volatile (

798 
ARM_SWITCH_TO_ARM


800 
ARM_SWITCH_BACK


801 : 
ARM_SWITCH_OUTPUT


802 : [
sbz
] "r" (sbz)

809 
ARM_CP15_TEXT_SECTION
 
le
 

810 
¬m_ý15_¡ruùiÚ_ÿche_Ãr_sh¬bË_v®id©e_®l
()

812 
ARM_SWITCH_REGISTERS
;

813 
ut32_t
 
sbz
 = 0;

815 
__asm__
 volatile (

816 
ARM_SWITCH_TO_ARM


818 
ARM_SWITCH_BACK


819 : 
ARM_SWITCH_OUTPUT


820 : [
sbz
] "r" (sbz)

827 
ARM_CP15_TEXT_SECTION
 
le
 

828 
¬m_ý15_b¿nch_´ediùÜ_Ãr_sh¬bË_v®id©e_®l
()

830 
ARM_SWITCH_REGISTERS
;

831 
ut32_t
 
sbz
 = 0;

833 
__asm__
 volatile (

834 
ARM_SWITCH_TO_ARM


836 
ARM_SWITCH_BACK


837 : 
ARM_SWITCH_OUTPUT


838 : [
sbz
] "r" (sbz)

845 
ARM_CP15_TEXT_SECTION
 
le
 

846 
¬m_ý15_b¿nch_´ediùÜ_v®id©e_®l
()

848 
ARM_SWITCH_REGISTERS
;

849 
ut32_t
 
sbz
 = 0;

851 
__asm__
 volatile (

852 
ARM_SWITCH_TO_ARM


854 
ARM_SWITCH_BACK


855 : 
ARM_SWITCH_OUTPUT


856 : [
sbz
] "r" (sbz)

861 
ARM_CP15_TEXT_SECTION
 
le
 

862 
¬m_ý15_¡ruùiÚ_ÿche_v®id©e
()

864 
ARM_SWITCH_REGISTERS
;

865 
ut32_t
 
sbz
 = 0;

867 
__asm__
 volatile (

868 
ARM_SWITCH_TO_ARM


870 
ARM_SWITCH_BACK


871 : 
ARM_SWITCH_OUTPUT


872 : [
sbz
] "r" (sbz)

877 
ARM_CP15_TEXT_SECTION
 
le
 

878 
¬m_ý15_¡ruùiÚ_ÿche_v®id©e_le
(cÚ¡ *
mva
)

880 
ARM_SWITCH_REGISTERS
;

882 
mva
 = 
ARM_CP15_CACHE_PREPARE_MVA
(mva);

884 
__asm__
 volatile (

885 
ARM_SWITCH_TO_ARM


887 
ARM_SWITCH_BACK


888 : 
ARM_SWITCH_OUTPUT


889 : [
mva
] "r" (mva)

894 
ARM_CP15_TEXT_SECTION
 
le
 

895 
¬m_ý15_¡ruùiÚ_ÿche_v®id©e_le_by_£t_ªd_way
(
ut32_t
 
£t_ªd_way
)

897 
ARM_SWITCH_REGISTERS
;

899 
__asm__
 volatile (

900 
ARM_SWITCH_TO_ARM


902 
ARM_SWITCH_BACK


903 : 
ARM_SWITCH_OUTPUT


904 : [
£t_ªd_way
] "r" (set_and_way)

909 
ARM_CP15_TEXT_SECTION
 
le
 

910 
¬m_ý15_¡ruùiÚ_ÿche_´eãtch_le
(cÚ¡ *
mva
)

912 
ARM_SWITCH_REGISTERS
;

914 
mva
 = 
ARM_CP15_CACHE_PREPARE_MVA
(mva);

916 
__asm__
 volatile (

917 
ARM_SWITCH_TO_ARM


919 
ARM_SWITCH_BACK


920 : 
ARM_SWITCH_OUTPUT


921 : [
mva
] "r" (mva)

925 
ARM_CP15_TEXT_SECTION
 
le
 

926 
¬m_ý15_d©a_ÿche_v®id©e
()

928 
ARM_SWITCH_REGISTERS
;

929 
ut32_t
 
sbz
 = 0;

931 
__asm__
 volatile (

932 
ARM_SWITCH_TO_ARM


934 
ARM_SWITCH_BACK


935 : 
ARM_SWITCH_OUTPUT


936 : [
sbz
] "r" (sbz)

941 
ARM_CP15_TEXT_SECTION
 
le
 

942 
¬m_ý15_d©a_ÿche_v®id©e_le
(cÚ¡ *
mva
)

944 
ARM_SWITCH_REGISTERS
;

946 
mva
 = 
ARM_CP15_CACHE_PREPARE_MVA
(mva);

948 
__asm__
 volatile (

949 
ARM_SWITCH_TO_ARM


951 
ARM_SWITCH_BACK


952 : 
ARM_SWITCH_OUTPUT


953 : [
mva
] "r" (mva)

958 
ARM_CP15_TEXT_SECTION
 
le
 

959 
¬m_ý15_d©a_ÿche_v®id©e_le_by_£t_ªd_way
(
ut32_t
 
£t_ªd_way
)

961 
ARM_SWITCH_REGISTERS
;

963 
__asm__
 volatile (

964 
ARM_SWITCH_TO_ARM


966 
ARM_SWITCH_BACK


967 : 
ARM_SWITCH_OUTPUT


968 : [
£t_ªd_way
] "r" (set_and_way)

973 
ARM_CP15_TEXT_SECTION
 
le
 

974 
¬m_ý15_d©a_ÿche_v®id©e_®l_Ëvs
()

976 
ut32_t
 
þidr
 = 
¬m_ý15_g_ÿche_Ëv_id
();

977 
ut32_t
 
loc
 = 
¬m_þidr_g_Ëv_of_cohcy
(
þidr
);

978 
ut32_t
 
Ëv
 = 0;

980 
Ëv
 = 0;ev < 
loc
; ++level) {

981 
ut32_t
 
ùy³
 = 
¬m_þidr_g_ÿche_ty³
(
þidr
, 
Ëv
);

984 ià((
ùy³
 & 0x2) != 0) {

985 
ut32_t
 
ccsidr
;

986 
ut32_t
 
le_pow
;

987 
ut32_t
 
assoctivy
;

988 
ut32_t
 
way
;

989 
ut32_t
 
way_shiá
;

991 
¬m_ý15_£t_ÿche_size_£ËùiÚ
(
Ëv
 << 1);

992 
_ARM_In¡ruùiÚ_synchrÚiz©iÚ_b¬rr
();

994 
ccsidr
 = 
¬m_ý15_g_ÿche_size_id
();

995 
le_pow
 = 
¬m_ccsidr_g_le_pow
(
ccsidr
);

996 
assoctivy
 = 
¬m_ccsidr_g_assoctivy
(
ccsidr
);

997 
way_shiá
 = 
__but_þz
(
assoctivy
 - 1);

999 
way
 = 0; way < 
assoctivy
; ++way) {

1000 
ut32_t
 
num_£ts
 = 
¬m_ccsidr_g_num_£ts
(
ccsidr
);

1001 
ut32_t
 
£t
;

1003 
£t
 = 0; s < 
num_£ts
; ++set) {

1004 
ut32_t
 
£t_way
 = (
way
 << 
way_shiá
)

1005 | (
£t
 << 
le_pow
)

1006 | (
Ëv
 << 1);

1008 
¬m_ý15_d©a_ÿche_v®id©e_le_by_£t_ªd_way
(
£t_way
);

1015 
ARM_CP15_TEXT_SECTION
 
le
 

1016 
¬m_ý15_d©a_ÿche_þn_le
(cÚ¡ *
mva
)

1018 
ARM_SWITCH_REGISTERS
;

1020 
mva
 = 
ARM_CP15_CACHE_PREPARE_MVA
(mva);

1022 
__asm__
 volatile (

1023 
ARM_SWITCH_TO_ARM


1025 
ARM_SWITCH_BACK


1026 : 
ARM_SWITCH_OUTPUT


1027 : [
mva
] "r" (mva)

1032 
ARM_CP15_TEXT_SECTION
 
le
 

1033 
¬m_ý15_d©a_ÿche_þn_le_by_£t_ªd_way
(
ut32_t
 
£t_ªd_way
)

1035 
ARM_SWITCH_REGISTERS
;

1037 
__asm__
 volatile (

1038 
ARM_SWITCH_TO_ARM


1040 
ARM_SWITCH_BACK


1041 : 
ARM_SWITCH_OUTPUT


1042 : [
£t_ªd_way
] "r" (set_and_way)

1047 
ARM_CP15_TEXT_SECTION
 
le
 

1048 
¬m_ý15_d©a_ÿche_¡_ªd_þn
()

1050 
ARM_SWITCH_REGISTERS
;

1052 
__asm__
 volatile (

1053 
ARM_SWITCH_TO_ARM


1057 
ARM_SWITCH_BACK


1058 : 
ARM_SWITCH_OUTPUT


1068 
ARM_CP15_TEXT_SECTION
 
le
 

1069 
¬m_ý15_d©a_ÿche_þn_ªd_v®id©e
()

1071 
ARM_SWITCH_REGISTERS
;

1073 
ut32_t
 
sbz
 = 0;

1075 
__asm__
 volatile (

1076 
ARM_SWITCH_TO_ARM


1078 
ARM_SWITCH_BACK


1079 : 
ARM_SWITCH_OUTPUT


1080 : [
sbz
] "r" (sbz)

1085 
ARM_CP15_TEXT_SECTION
 
le
 

1086 
¬m_ý15_d©a_ÿche_þn_ªd_v®id©e_le
(cÚ¡ *
mva
)

1088 
ARM_SWITCH_REGISTERS
;

1090 
mva
 = 
ARM_CP15_CACHE_PREPARE_MVA
(mva);

1092 
__asm__
 volatile (

1093 
ARM_SWITCH_TO_ARM


1095 
ARM_SWITCH_BACK


1096 : 
ARM_SWITCH_OUTPUT


1097 : [
mva
] "r" (mva)

1102 
ARM_CP15_TEXT_SECTION
 
le
 

1103 
¬m_ý15_d©a_ÿche_þn_ªd_v®id©e_le_by_£t_ªd_way
(
ut32_t
 
£t_ªd_way
)

1105 
ARM_SWITCH_REGISTERS
;

1107 
__asm__
 volatile (

1108 
ARM_SWITCH_TO_ARM


1110 
ARM_SWITCH_BACK


1111 : 
ARM_SWITCH_OUTPUT


1112 : [
£t_ªd_way
] "r" (set_and_way)

1117 
ARM_CP15_TEXT_SECTION
 
le
 

1118 
¬m_ý15_d©a_ÿche_¡_ªd_þn_ªd_v®id©e
()

1120 
ARM_SWITCH_REGISTERS
;

1122 
__asm__
 volatile (

1123 
ARM_SWITCH_TO_ARM


1127 
ARM_SWITCH_BACK


1128 : 
ARM_SWITCH_OUTPUT


1136 
ARM_CP15_TEXT_SECTION
 
le
 

1137 
¬m_ý15_d¿_wre_bufãr
()

1139 
ARM_SWITCH_REGISTERS
;

1140 
ut32_t
 
sbz
 = 0;

1142 
__asm__
 volatile (

1143 
ARM_SWITCH_TO_ARM


1145 
ARM_SWITCH_BACK


1146 : 
ARM_SWITCH_OUTPUT


1147 : [
sbz
] "r" (sbz)

1152 
ARM_CP15_TEXT_SECTION
 
le
 

1153 
¬m_ý15_wa_fÜ_¼u±
()

1155 
ARM_SWITCH_REGISTERS
;

1156 
ut32_t
 
sbz
 = 0;

1158 
__asm__
 volatile (

1159 
ARM_SWITCH_TO_ARM


1161 
ARM_SWITCH_BACK


1162 : 
ARM_SWITCH_OUTPUT


1163 : [
sbz
] "r" (sbz)

1168 
ARM_CP15_TEXT_SECTION
 
le
 
ut32_t


1169 
¬m_ý15_g_muÉroûssÜ_affy
()

1171 
ARM_SWITCH_REGISTERS
;

1172 
ut32_t
 
mpidr
;

1174 
__asm__
 volatile (

1175 
ARM_SWITCH_TO_ARM


1177 
ARM_SWITCH_BACK


1178 : [
mpidr
] "=&r" (mpidrè
ARM_SWITCH_ADDITIONAL_OUTPUT


1181  
mpidr
 & 0xff;

1184 
ARM_CP15_TEXT_SECTION
 
le
 
ut32_t


1185 
¬m_cÜx_a9_g_muÉroûssÜ_ýu_id
()

1187  
¬m_ý15_g_muÉroûssÜ_affy
() & 0xff;

1190 
	#ARM_CORTEX_A9_ACTL_FW
 (1U << 0)

	)

1191 
	#ARM_CORTEX_A9_ACTL_L2_PREFETCH_HINT_ENABLE
 (1U << 1)

	)

1192 
	#ARM_CORTEX_A9_ACTL_L1_PREFETCH_ENABLE
 (1U << 2)

	)

1193 
	#ARM_CORTEX_A9_ACTL_WRITE_FULL_LINE_OF_ZEROS_MODE
 (1U << 3)

	)

1194 
	#ARM_CORTEX_A9_ACTL_SMP
 (1U << 6)

	)

1195 
	#ARM_CORTEX_A9_ACTL_EXCL
 (1U << 7)

	)

1196 
	#ARM_CORTEX_A9_ACTL_ALLOC_IN_ONE_WAY
 (1U << 8)

	)

1197 
	#ARM_CORTEX_A9_ACTL_PARITY_ON
 (1U << 9)

	)

1199 
ARM_CP15_TEXT_SECTION
 
le
 
ut32_t


1200 
¬m_ý15_g_auxry_cÚÞ
()

1202 
ARM_SWITCH_REGISTERS
;

1203 
ut32_t
 
v®
;

1205 
__asm__
 volatile (

1206 
ARM_SWITCH_TO_ARM


1208 
ARM_SWITCH_BACK


1209 : [
v®
] "=&r" (v®è
ARM_SWITCH_ADDITIONAL_OUTPUT


1212  
v®
;

1215 
ARM_CP15_TEXT_SECTION
 
le
 

1216 
¬m_ý15_£t_auxry_cÚÞ
(
ut32_t
 
v®
)

1218 
ARM_SWITCH_REGISTERS
;

1220 
__asm__
 volatile (

1221 
ARM_SWITCH_TO_ARM


1223 
ARM_SWITCH_BACK


1224 : 
ARM_SWITCH_OUTPUT


1225 : [
v®
] "r" (val)

1231 
ARM_CP15_TEXT_SECTION
 
le
 
ut32_t


1232 
¬m_ý15_g_´oûssÜ_ã©u»_1
()

1234 
ARM_SWITCH_REGISTERS
;

1235 
ut32_t
 
v®
;

1237 
__asm__
 volatile (

1238 
ARM_SWITCH_TO_ARM


1240 
ARM_SWITCH_BACK


1241 : [
v®
] "=&r" (v®è
ARM_SWITCH_ADDITIONAL_OUTPUT


1244  
v®
;

1249 
ARM_CP15_TEXT_SECTION
 
le
 

1250 *
¬m_ý15_g_veùÜ_ba£_add»ss
()

1252 
ARM_SWITCH_REGISTERS
;

1253 *
ba£
;

1255 
__asm__
 volatile (

1256 
ARM_SWITCH_TO_ARM


1258 
ARM_SWITCH_BACK


1259 : [
ba£
] "=&r" (ba£è
ARM_SWITCH_ADDITIONAL_OUTPUT


1262  
ba£
;

1265 
ARM_CP15_TEXT_SECTION
 
le
 

1266 
¬m_ý15_£t_veùÜ_ba£_add»ss
(*
ba£
)

1268 
ARM_SWITCH_REGISTERS
;

1270 
__asm__
 volatile (

1271 
ARM_SWITCH_TO_ARM


1273 
ARM_SWITCH_BACK


1274 : 
ARM_SWITCH_OUTPUT


1275 : [
ba£
] "r" (base)

1284 
ut32_t
 
¬m_ý15_£t_ª¦©iÚ_bË_s
(

1285 cÚ¡ *
beg
,

1286 cÚ¡ *
d
,

1287 
ut32_t
 
£ùiÚ_æags


1290 
¬m_ý15_£t_exû±iÚ_hªdËr
(

1291 
Arm_symbÞic_exû±iÚ_Çme
 
exû±iÚ
,

1292 (*
hªdËr
)()

1297 #ifdeà
__ýlu¥lus


	@src/lib/libcpu/arm/shared/include/cache_.h

23 #iâdeà
LIBCPU_ARM_CACHE__H


24 
	#LIBCPU_ARM_CACHE__H


	)

26 #ifdeà
__ARM_ARCH_5TEJ__


27 
	~<libýu/¬m-ý15.h
>

29 
	#CPU_DATA_CACHE_ALIGNMENT
 32

	)

30 
	#CPU_INSTRUCTION_CACHE_ALIGNMENT
 32

	)

32 
le
 
	$_CPU_ÿche_æush_1_d©a_le
(cÚ¡ *
d_addr
)

34 
	`¬m_ý15_d©a_ÿche_þn_le
(
d_addr
);

35 
	}
}

37 
le
 
	$_CPU_ÿche_v®id©e_1_d©a_le
(cÚ¡ *
d_addr
)

39 
	`¬m_ý15_d©a_ÿche_v®id©e_le
(
d_addr
);

40 
	}
}

42 
le
 
	$_CPU_ÿche_äze_d©a
()

45 
	}
}

47 
le
 
	$_CPU_ÿche_unäze_d©a
()

50 
	}
}

52 
le
 
	$_CPU_ÿche_v®id©e_1_¡ruùiÚ_le
(cÚ¡ *
d_addr
)

54 
	`¬m_ý15_¡ruùiÚ_ÿche_v®id©e_le
(
d_addr
);

55 
	}
}

57 
le
 
	$_CPU_ÿche_äze_¡ruùiÚ
()

60 
	}
}

62 
le
 
	$_CPU_ÿche_unäze_¡ruùiÚ
()

65 
	}
}

67 
le
 
	$_CPU_ÿche_æush_te_d©a
()

69 
	`¬m_ý15_d©a_ÿche_¡_ªd_þn
();

70 
	}
}

72 
le
 
	$_CPU_ÿche_v®id©e_te_d©a
()

74 
	`¬m_ý15_d©a_ÿche_v®id©e
();

75 
	}
}

77 
le
 
	$_CPU_ÿche_abË_d©a
()

79 
¹ems_¼u±_Ëv
 
Ëv
;

80 
ut32_t
 
ù¾
;

82 
	`¹ems_¼u±_di§bË
(
Ëv
);

83 
ù¾
 = 
	`¬m_ý15_g_cÚÞ
();

84 
ù¾
 |ð
ARM_CP15_CTRL_C
;

85 
	`¬m_ý15_£t_cÚÞ
(
ù¾
);

86 
	`¹ems_¼u±_abË
(
Ëv
);

87 
	}
}

89 
le
 
	$_CPU_ÿche_di§bË_d©a
()

91 
¹ems_¼u±_Ëv
 
Ëv
;

92 
ut32_t
 
ù¾
;

94 
	`¹ems_¼u±_di§bË
(
Ëv
);

95 
	`¬m_ý15_d©a_ÿche_¡_ªd_þn_ªd_v®id©e
();

96 
ù¾
 = 
	`¬m_ý15_g_cÚÞ
();

97 
ù¾
 &ð~
ARM_CP15_CTRL_C
;

98 
	`¬m_ý15_£t_cÚÞ
(
ù¾
);

99 
	`¹ems_¼u±_abË
(
Ëv
);

100 
	}
}

102 
le
 
	$_CPU_ÿche_v®id©e_te_¡ruùiÚ
()

104 
	`¬m_ý15_¡ruùiÚ_ÿche_v®id©e
();

105 
	}
}

107 
le
 
	$_CPU_ÿche_abË_¡ruùiÚ
()

109 
¹ems_¼u±_Ëv
 
Ëv
;

110 
ut32_t
 
ù¾
;

112 
	`¹ems_¼u±_di§bË
(
Ëv
);

113 
ù¾
 = 
	`¬m_ý15_g_cÚÞ
();

114 
ù¾
 |ð
ARM_CP15_CTRL_I
;

115 
	`¬m_ý15_£t_cÚÞ
(
ù¾
);

116 
	`¹ems_¼u±_abË
(
Ëv
);

117 
	}
}

119 
le
 
	$_CPU_ÿche_di§bË_¡ruùiÚ
()

121 
¹ems_¼u±_Ëv
 
Ëv
;

122 
ut32_t
 
ù¾
;

124 
	`¹ems_¼u±_di§bË
(
Ëv
);

125 
ù¾
 = 
	`¬m_ý15_g_cÚÞ
();

126 
ù¾
 &ð~
ARM_CP15_CTRL_I
;

127 
	`¬m_ý15_£t_cÚÞ
(
ù¾
);

128 
	`¹ems_¼u±_abË
(
Ëv
);

129 
	}
}

	@src/lib/libcpu/arm/shared/include/mmu.h

10 #iâdeà
__LIBCPU_MMU_H__


11 
	#__LIBCPU_MMU_H__


	)

13 
	~<¡dt.h
>

15 
	#MMU_SECT_SIZE
 0x100000

	)

17 
	#MMU_CACHE_NONE
 0x0

	)

18 
	#MMU_CACHE_BUFFERED
 0x1

	)

19 
	#MMU_CACHE_WTHROUGH
 0x2

	)

20 
	#MMU_CACHE_WBACK
 0x3

	)

23 
ut32_t
 
	m·ddr
;

24 
ut32_t
 
	mvaddr
;

25 
ut32_t
 
	msize
;

26 
ut8_t
 
	mÿche_æags
;

27 } 
	tmmu_£ù_m­_t
;

29 
mmu_
(
mmu_£ù_m­_t
 *
m­
);

30 
mmu_£t_ýu_async_mode
();

	@src/lib/libcpu/arm/shared/include/omap3.h

20 
	#OMAP3_DM37XX_INTR_BASE
 0x48200000

	)

23 
	#OMAP3_AM335X_INTR_BASE
 0x48200000

	)

26 
	#OMAP3_INTCPS_REVISION
 0x000

	)

27 
	#OMAP3_INTCPS_SYSCONFIG
 0x010

	)

28 
	#OMAP3_INTCPS_SYSSTATUS
 0x014

	)

29 
	#OMAP3_INTCPS_SIR_IRQ
 0x040

	)

30 
	#OMAP3_INTCPS_SIR_FIQ
 0x044

	)

31 
	#OMAP3_INTCPS_CONTROL
 0x048

	)

32 
	#OMAP3_INTCPS_PROTECTION
 0x04C

	)

33 
	#OMAP3_INTCPS_IDLE
 0x050

	)

34 
	#OMAP3_INTCPS_IRQ_PRIORITY
 0x060

	)

35 
	#OMAP3_INTCPS_FIQ_PRIORITY
 0x064

	)

36 
	#OMAP3_INTCPS_THRESHOLD
 0x068

	)

37 
	#OMAP3_INTCPS_ITR0
 0x080

	)

38 
	#OMAP3_INTCPS_MIR0
 0x084

	)

39 
	#OMAP3_INTCPS_MIR1
 0x0A4

	)

40 
	#OMAP3_INTCPS_MIR2
 0x0C4

	)

41 
	#OMAP3_INTCPS_MIR3
 0x0E4

	)

42 
	#OMAP3_INTCPS_MIR_CLEAR0
 0x088

	)

43 
	#OMAP3_INTCPS_MIR_SET0
 0x08C

	)

44 
	#OMAP3_INTCPS_ISR_SET0
 0x090

	)

45 
	#OMAP3_INTCPS_ISR_CLEAR0
 0x094

	)

46 
	#OMAP3_INTCPS_PENDING_IRQ0
 0x098

	)

47 
	#OMAP3_INTCPS_PENDING_IRQ1
 0x0b8

	)

48 
	#OMAP3_INTCPS_PENDING_IRQ2
 0x0d8

	)

49 
	#OMAP3_INTCPS_PENDING_IRQ3
 0x0f8

	)

50 
	#OMAP3_INTCPS_PENDING_FIQ0
 0x09C

	)

51 
	#OMAP3_INTCPS_ILR0
 0x100

	)

54 
	#OMAP3_SYSCONFIG_AUTOIDLE
 0x01

	)

56 
	#OMAP3_INTR_ITR
(
ba£
,
n
) \

57 (
ba£
 + 
OMAP3_INTCPS_ITR0
 + 0x20 * (
n
))

	)

58 
	#OMAP3_INTR_MIR
(
ba£
,
n
) \

59 (
ba£
 + 
OMAP3_INTCPS_MIR0
 + 0x20 * (
n
))

	)

60 
	#OMAP3_INTR_MIR_CLEAR
(
ba£
,
n
) \

61 (
ba£
 + 
OMAP3_INTCPS_MIR_CLEAR0
 + 0x20 * (
n
))

	)

62 
	#OMAP3_INTR_MIR_SET
(
ba£
,
n
) \

63 (
ba£
 + 
OMAP3_INTCPS_MIR_SET0
 + 0x20 * (
n
))

	)

64 
	#OMAP3_INTR_ISR_SET
(
ba£
,
n
) \

65 (
ba£
 + 
OMAP3_INTCPS_ISR_SET0
 + 0x20 * (
n
))

	)

66 
	#OMAP3_INTR_ISR_CLEAR
(
ba£
,
n
) \

67 (
ba£
 + 
OMAP3_INTCPS_ISR_CLEAR0
 + 0x20 * (
n
))

	)

68 
	#OMAP3_INTR_PENDING_IRQ
(
ba£
,
n
) \

69 (
ba£
 + 
OMAP3_INTCPS_PENDING_IRQ0
 + 0x20 * (
n
))

	)

70 
	#OMAP3_INTR_PENDING_FIQ
(
ba£
,
n
) \

71 (
ba£
 + 
OMAP3_INTCPS_PENDING_FIQ0
 + 0x20 * (
n
))

	)

72 
	#OMAP3_INTR_ILR
(
ba£
,
m
) \

73 (
ba£
 + 
OMAP3_INTCPS_ILR0
 + 0x4 * (
m
))

	)

75 
	#OMAP3_INTR_ACTIVEIRQ_MASK
 0x7à

	)

76 
	#OMAP3_INTR_NEWIRQAGR
 0x1

	)

78 
	#OMAP3_DM337X_NR_IRQ_VECTORS
 96

	)

81 
	#OMAP3_MCBSP2_ST_IRQ
 4

	)

82 
	#OMAP3_MCBSP3_ST_IRQ
 5

	)

83 
	#OMAP3_SYS_NIRQ
 7

	)

84 
	#OMAP3_SMX_DBG_IRQ
 9

	)

85 
	#OMAP3_SMX_APP_IRQ
 10

	)

86 
	#OMAP3_PRCM_IRQ
 11

	)

87 
	#OMAP3_SDMA0_IRQ
 12

	)

88 
	#OMAP3_SDMA1_IRQ
 13

	)

89 
	#OMAP3_SDMA2_IRQ
 14

	)

90 
	#OMAP3_SDMA3_IRQ
 15

	)

91 
	#OMAP3_MCBSP1_IRQ
 16

	)

92 
	#OMAP3_MCBSP2_IRQ
 17

	)

93 
	#OMAP3_GPMC_IRQ
 20

	)

94 
	#OMAP3_SGX_IRQ
 21

	)

95 
	#OMAP3_MCBSP3_IRQ
 22

	)

96 
	#OMAP3_MCBSP4_IRQ
 23

	)

97 
	#OMAP3_CAM0_IRQ
 24

	)

98 
	#OMAP3_DSS_IRQ
 25

	)

99 
	#OMAP3_MAIL_U0_IRQ
 26

	)

100 
	#OMAP3_MCBSP5_IRQ
 27

	)

101 
	#OMAP3_IVA2_MMU_IRQ
 28

	)

102 
	#OMAP3_GPIO1_IRQ
 29

	)

103 
	#OMAP3_GPIO2_IRQ
 30

	)

104 
	#OMAP3_GPIO3_IRQ
 31

	)

105 
	#OMAP3_GPIO4_IRQ
 32

	)

106 
	#OMAP3_GPIO5_IRQ
 33

	)

107 
	#OMAP3_GPIO6_IRQ
 34

	)

108 
	#OMAP3_WDT3_IRQ
 36

	)

109 
	#OMAP3_GPT1_IRQ
 37

	)

110 
	#OMAP3_GPT2_IRQ
 38

	)

111 
	#OMAP3_GPT3_IRQ
 39

	)

112 
	#OMAP3_GPT4_IRQ
 40

	)

113 
	#OMAP3_GPT5_IRQ
 41

	)

114 
	#OMAP3_GPT6_IRQ
 42

	)

115 
	#OMAP3_GPT7_IRQ
 43

	)

116 
	#OMAP3_GPT8_IRQ
 44

	)

117 
	#OMAP3_GPT9_IRQ
 45

	)

118 
	#OMAP3_GPT10_IRQ
 46

	)

119 
	#OMAP3_GPT11_IRQ
 47

	)

120 
	#OMAP3_SPI4_IRQ
 48

	)

121 
	#OMAP3_MCBSP4_TX_IRQ
 54

	)

122 
	#OMAP3_MCBSP4_RX_IRQ
 55

	)

123 
	#OMAP3_I2C1_IRQ
 56

	)

124 
	#OMAP3_I2C2_IRQ
 57

	)

125 
	#OMAP3_HDQ_IRQ
 58

	)

126 
	#OMAP3_MCBSP1_TX_IRQ
 59

	)

127 
	#OMAP3_MCBSP1_RX_IRQ
 60

	)

128 
	#OMAP3_I2C3_IRQ
 61

	)

129 
	#OMAP3_MCBSP2_TX_IRQ
 62

	)

130 
	#OMAP3_MCBSP2_RX_IRQ
 63

	)

131 
	#OMAP3_SPI1_IRQ
 65

	)

132 
	#OMAP3_SPI2_IRQ
 66

	)

133 
	#OMAP3_UART1_IRQ
 72

	)

134 
	#OMAP3_UART2_IRQ
 73

	)

135 
	#OMAP3_UART3_IRQ
 74

	)

136 
	#OMAP3_PBIAS_IRQ
 75

	)

137 
	#OMAP3_OHCI_IRQ
 76

	)

138 
	#OMAP3_EHCI_IRQ
 77

	)

139 
	#OMAP3_TLL_IRQ
 78

	)

140 
	#OMAP3_MCBSP5_TX_IRQ
 81

	)

141 
	#OMAP3_MCBSP5_RX_IRQ
 82

	)

142 
	#OMAP3_MMC1_IRQ
 83

	)

143 
	#OMAP3_MMC2_IRQ
 86

	)

144 
	#OMAP3_ICR_IRQ
 87

	)

145 
	#OMAP3_D2DFRINT_IRQ
 88

	)

146 
	#OMAP3_MCBSP3_TX_IRQ
 89

	)

147 
	#OMAP3_MCBSP3_RX_IRQ
 90

	)

148 
	#OMAP3_SPI3_IRQ
 91

	)

149 
	#OMAP3_HSUSB_MC_IRQ
 92

	)

150 
	#OMAP3_HSUSB_DMA_IRQ
 93

	)

151 
	#OMAP3_MMC3_IRQ
 94

	)

154 
	#OMAP3_GPTIMER1_BASE
 0x48318000

	)

156 
	#OMAP3_GPTIMER2_BASE
 0x49032000

	)

158 
	#OMAP3_GPTIMER3_BASE
 0x49034000

	)

160 
	#OMAP3_GPTIMER4_BASE
 0x49036000

	)

162 
	#OMAP3_GPTIMER5_BASE
 0x49038000

	)

164 
	#OMAP3_GPTIMER6_BASE
 0x4903A000

	)

166 
	#OMAP3_GPTIMER7_BASE
 0x4903C000

	)

168 
	#OMAP3_GPTIMER8_BASE
 0x4903E000

	)

170 
	#OMAP3_GPTIMER9_BASE
 0x49040000

	)

172 
	#OMAP3_GPTIMER10_BASE
 0x48086000

	)

174 
	#OMAP3_GPTIMER11_BASE
 0x48088000

	)

179 
	#OMAP3_TIMER_TIDR
 0x000

	)

181 
	#OMAP3_TIMER_TIOCP_CFG
 0x010

	)

183 
	#OMAP3_TIMER_TISTAT
 0x014

	)

185 
	#OMAP3_TIMER_TISR
 0x018

	)

187 
	#OMAP3_TIMER_TIER
 0x01C

	)

189 
	#OMAP3_TIMER_TWER
 0x020

	)

191 
	#OMAP3_TIMER_TCLR
 0x024

	)

193 
	#OMAP3_TIMER_TCRR
 0x028

	)

195 
	#OMAP3_TIMER_TLDR
 0x02C

	)

197 
	#OMAP3_TIMER_TTGR
 0x030

	)

199 
	#OMAP3_TIMER_TWPS
 0x034

	)

201 
	#OMAP3_TIMER_TMAR
 0x038

	)

203 
	#OMAP3_TIMER_TCAR1
 0x03C

	)

205 
	#OMAP3_TIMER_TSICR
 0x040

	)

207 
	#OMAP3_TIMER_TCAR2
 0x044

	)

209 
	#OMAP3_TIMER_TPIR
 0x048

	)

211 
	#OMAP3_TIMER_TNIR
 0x04C

	)

213 
	#OMAP3_TIMER_TCVR
 0x050

	)

215 
	#OMAP3_TIMER_TOCR
 0x054

	)

217 
	#OMAP3_TIMER_TOWR
 0x058

	)

221 
	#OMAP3_TISR_MAT_IT_FLAG
 (1 << 0è

	)

222 
	#OMAP3_TISR_OVF_IT_FLAG
 (1 << 1è

	)

223 
	#OMAP3_TISR_TCAR_IT_FLAG
 (1 << 2è

	)

226 
	#OMAP3_TIER_MAT_IT_ENA
 (1 << 0è

	)

227 
	#OMAP3_TIER_OVF_IT_ENA
 (1 << 1è

	)

228 
	#OMAP3_TIER_TCAR_IT_ENA
 (1 << 2è

	)

231 
	#OMAP3_TCLR_ST
 (1 << 0è

	)

232 
	#OMAP3_TCLR_AR
 (1 << 1è

	)

233 
	#OMAP3_TCLR_PRE
 (1 << 5è

	)

234 
	#OMAP3_TCLR_PTV
 (1 << 1è

	)

235 
	#OMAP3_TCLR_OVF_TRG
 (1 << 10è

	)

238 
	#OMAP3_CM_CLKSEL_GFX
 0x48004b40

	)

239 
	#OMAP3_CM_CLKEN_PLL
 0x48004d00

	)

240 
	#OMAP3_CM_FCLKEN1_CORE
 0x48004A00

	)

241 
	#OMAP3_CM_CLKSEL_CORE
 0x48004A40

	)

242 
	#OMAP3_CM_FCLKEN_PER
 0x48005000

	)

243 
	#OMAP3_CM_CLKSEL_PER
 0x48005040

	)

244 
	#OMAP3_CM_CLKSEL_WKUP
 0x48004c40

	)

247 
	#CM_MODULEMODE_MASK
 (0x3 << 0)

	)

248 
	#CM_MODULEMODE_ENABLE
 (0x2 << 0)

	)

249 
	#CM_MODULEMODE_DISABLED
 (0x0 << 0)

	)

251 
	#CM_CLKCTRL_IDLEST
 (0x3 << 16)

	)

252 
	#CM_CLKCTRL_IDLEST_FUNC
 (0x0 << 16)

	)

253 
	#CM_CLKCTRL_IDLEST_TRANS
 (0x1 << 16)

	)

254 
	#CM_CLKCTRL_IDLEST_IDLE
 (0x2 << 16)

	)

255 
	#CM_CLKCTRL_IDLEST_DISABLE
 (0x3 << 16)

	)

257 
	#CM_WKUP_BASE
 0x44E00400

	)

259 
	#CM_WKUP_TIMER1_CLKCTRL
 (
CM_WKUP_BASE
 + 0xC4)

	)

262 
	#CM_PER_BASE
 0x44E00000

	)

263 
	#CM_PER_TIMER7_CLKCTRL
 (
CM_PER_BASE
 + 0x7C)

	)

268 
	#CM_DPLL_BASE
 0x44E00500

	)

270 
	#CLKSEL_TIMER1MS_CLK
 (
CM_DPLL_BASE
 + 0x28)

	)

272 
	#CLKSEL_TIMER1MS_CLK_SEL_MASK
 (0x7 << 0)

	)

273 
	#CLKSEL_TIMER1MS_CLK_SEL_SEL1
 (0x0 << 0)

	)

275 
	#CLKSEL_TIMER1MS_CLK_SEL_SEL2
 (0x1 << 0)

	)

277 
	#CLKSEL_TIMER1MS_CLK_SEL_SEL3
 (0x2 << 0)

	)

279 
	#CLKSEL_TIMER1MS_CLK_SEL_SEL4
 (0x3 << 0)

	)

281 
	#CLKSEL_TIMER1MS_CLK_SEL_SEL5
 (0x4 << 0)

	)

284 
	#CLKSEL_TIMER7_CLK
 (
CM_DPLL_BASE
 + 0x04)

	)

285 
	#CLKSEL_TIMER7_CLK_SEL_MASK
 (0x3 << 0)

	)

286 
	#CLKSEL_TIMER7_CLK_SEL_SEL1
 (0x0 << 0è

	)

287 
	#CLKSEL_TIMER7_CLK_SEL_SEL2
 (0x1 << 0è

	)

288 
	#CLKSEL_TIMER7_CLK_SEL_SEL3
 (0x2 << 0è

	)

289 
	#CLKSEL_TIMER7_CLK_SEL_SEL4
 (0x3 << 0è

	)

292 
	#CM_RTC_BASE
 0x44E00800

	)

293 
	#CM_RTC_RTC_CLKCTRL
 0x0

	)

294 
	#CM_RTC_CLKSTCTRL
 0x4

	)

297 
	#OMAP3_CLKSEL_GPT1
 (1 << 0)

	)

298 
	#OMAP3_CLKSEL_GPT10
 (1 << 6)

	)

299 
	#OMAP3_CLKSEL_GPT11
 (1 << 7)

	)

301 
	#OMAP34XX_CORE_L4_IO_BASE
 0x48000000

	)

303 
	#ARM_TTBR_ADDR_MASK
 (0xffffc000)

	)

304 
	#ARM_TTBR_OUTER_NC
 (0x0 << 3è

	)

305 
	#ARM_TTBR_OUTER_WBWA
 (0x1 << 3è

	)

306 
	#ARM_TTBR_OUTER_WT
 (0x2 << 3è

	)

307 
	#ARM_TTBR_OUTER_WBNWA
 (0x3 << 3è

	)

308 
	#ARM_TTBR_FLAGS_CACHED
 
ARM_TTBR_OUTER_WBWA


	)

312 
	#CPU_CONTROL_MMU_ENABLE
 0x00000001

	)

313 
	#CPU_CONTROL_AFLT_ENABLE
 0x00000002

	)

314 
	#CPU_CONTROL_DC_ENABLE
 0x00000004

	)

315 
	#CPU_CONTROL_WBUF_ENABLE
 0x00000008

	)

316 
	#CPU_CONTROL_32BP_ENABLE
 0x00000010

	)

317 
	#CPU_CONTROL_32BD_ENABLE
 0x00000020

	)

318 
	#CPU_CONTROL_LABT_ENABLE
 0x00000040

	)

319 
	#CPU_CONTROL_BEND_ENABLE
 0x00000080

	)

320 
	#CPU_CONTROL_SYST_ENABLE
 0x00000100

	)

321 
	#CPU_CONTROL_ROM_ENABLE
 0x00000200

	)

322 
	#CPU_CONTROL_CPCLK
 0x00000400

	)

323 
	#CPU_CONTROL_SWP_ENABLE
 0x00000400

	)

324 
	#CPU_CONTROL_BPRD_ENABLE
 0x00000800

	)

325 
	#CPU_CONTROL_IC_ENABLE
 0x00001000

	)

326 
	#CPU_CONTROL_VECRELOC
 0x00002000

	)

327 
	#CPU_CONTROL_ROUNDROBIN
 0x00004000

	)

328 
	#CPU_CONTROL_V4COMPAT
 0x00008000

	)

329 
	#CPU_CONTROL_FI_ENABLE
 0x00200000

	)

330 
	#CPU_CONTROL_UNAL_ENABLE
 0x00400000

	)

331 
	#CPU_CONTROL_XP_ENABLE
 0x00800000

	)

332 
	#CPU_CONTROL_V_ENABLE
 0x01000000

	)

333 
	#CPU_CONTROL_EX_BEND
 0x02000000

	)

334 
	#CPU_CONTROL_NMFI
 0x08000000

	)

335 
	#CPU_CONTROL_TR_ENABLE
 0x10000000

	)

336 
	#CPU_CONTROL_AF_ENABLE
 0x20000000

	)

337 
	#CPU_CONTROL_TE_ENABLE
 0x40000000

	)

339 
	#CPU_CONTROL_IDC_ENABLE
 
CPU_CONTROL_DC_ENABLE


	)

344 
	#ARM_VM_SECTION
 (1 << 1)

	)

346 
	#ARM_VM_SECTION_PRESENT
 (1 << 1)

	)

348 
	#ARM_VM_SECTION_B
 (1 << 2)

	)

350 
	#ARM_VM_SECTION_C
 (1 << 3)

	)

352 
	#ARM_VM_SECTION_DOMAIN
 (0xF << 5)

	)

354 
	#ARM_VM_SECTION_SUPER
 (0x1 << 10)

	)

356 
	#ARM_VM_SECTION_USER
 (0x3 << 10)

	)

358 
	#ARM_VM_SECTION_TEX0
 (1 << 12)

	)

360 
	#ARM_VM_SECTION_TEX1
 (1 << 13)

	)

362 
	#ARM_VM_SECTION_TEX2
 (1 << 14)

	)

364 
	#ARM_VM_SECTION_RO
 (1 << 15)

	)

366 
	#ARM_VM_SECTION_SHAREABLE
 (1 << 16)

	)

368 
	#ARM_VM_SECTION_NOTGLOBAL
 (1 << 17)

	)

371 
	#ARM_VM_SECTION_WB
 \

372 (
ARM_VM_SECTION_TEX2
 | 
ARM_VM_SECTION_TEX0
 | 
ARM_VM_SECTION_B
 )

	)

374 
	#ARM_VM_SECTION_WT
 \

375 (
ARM_VM_SECTION_TEX2
 | 
ARM_VM_SECTION_TEX1
 | 
ARM_VM_SECTION_C
 )

	)

377 
	#ARM_VM_SECTION_WTWB
 \

378 (
ARM_VM_SECTION_TEX2
 | 
ARM_VM_SECTION_TEX0
 | 
ARM_VM_SECTION_C
 )

	)

382 
	#ARM_VM_SECTION_CACHED
 
ARM_VM_SECTION_WTWB


	)

383 
	#ARM_VM_SECTION_DEVICE
 (
ARM_VM_SECTION_B
)

	)

	@src/lib/libcpu/arm/shared/include/omap_timer.h

7 
	~<¡dt.h
>

9 
	som­_tim_»gi¡s


11 
ut32_t
 
	mTIDR
;

12 
ut32_t
 
	mTIOCP_CFG
;

13 
ut32_t
 
	mTISTAT
;

14 
ut32_t
 
	mTISR
;

15 
ut32_t
 
	mTIER
;

16 
ut32_t
 
	mTWER
;

17 
ut32_t
 
	mTCLR
;

18 
ut32_t
 
	mTCRR
;

19 
ut32_t
 
	mTLDR
;

20 
ut32_t
 
	mTTGR
;

21 
ut32_t
 
	mTWPS
;

22 
ut32_t
 
	mTMAR
;

23 
ut32_t
 
	mTCAR1
;

24 
ut32_t
 
	mTSICR
;

25 
ut32_t
 
	mTCAR2
;

26 
ut32_t
 
	mTPIR
;

27 
ut32_t
 
	mTNIR
;

28 
ut32_t
 
	mTCVR
;

29 
ut32_t
 
	mTOCR
;

30 
ut32_t
 
	mTOWR
;

32 } 
	tom­_tim_»gi¡s_t
;

34 
	som­_tim


36 
ut32_t
 
	mba£
;

37 
	mq_Ä
;

38 
om­_tim_»gi¡s
 *
	m»gs
;

39 } 
	tom­_tim_t
;

	@src/lib/libcpu/shared/include/cache.h

21 #iâdeà
__LIBCPU_CACHE_h


22 
	#__LIBCPU_CACHE_h


	)

24 
_CPU_ÿche_æush_1_d©a_le
(cÚ¡ *
d_addr
);

25 
_CPU_ÿche_v®id©e_1_d©a_le
(cÚ¡ *
d_addr
);

26 
_CPU_ÿche_äze_d©a
();

27 
_CPU_ÿche_unäze_d©a
();

28 
_CPU_ÿche_v®id©e_1_¡ruùiÚ_le
(cÚ¡ *
d_addr
);

29 
_CPU_ÿche_äze_¡ruùiÚ
();

30 
_CPU_ÿche_unäze_¡ruùiÚ
();

31 
_CPU_ÿche_æush_te_d©a
();

32 
_CPU_ÿche_v®id©e_te_d©a
();

33 
_CPU_ÿche_abË_d©a
();

34 
_CPU_ÿche_di§bË_d©a
();

35 
_CPU_ÿche_v®id©e_te_¡ruùiÚ
();

36 
_CPU_ÿche_abË_¡ruùiÚ
();

37 
_CPU_ÿche_di§bË_¡ruùiÚ
();

	@src/lib/libcpu/shared/src/cache_manager.c

42 
	~<¹ems.h
>

43 
	~"ÿche_.h
"

45 #ià
defed
(
RTEMS_SMP
)

47 
	~<¹ems/scÜe/smpim¶.h
>

50 cÚ¡ *
	maddr
;

51 
size_t
 
	msize
;

52 } 
	tsmp_ÿche_¬
;

54 #ià
defed
(
CPU_DATA_CACHE_ALIGNMENT
)

56 
	$smp_ÿche_d©a_æush
(*
¬g
)

58 
smp_ÿche_¬
 *
¬
 = 
¬g
;

60 
	`¹ems_ÿche_æush_muÉË_d©a_les
(
¬
->
addr
,»a->
size
);

61 
	}
}

63 
	$smp_ÿche_d©a_v
(*
¬g
)

65 
smp_ÿche_¬
 *
¬
 = 
¬g
;

67 
	`¹ems_ÿche_v®id©e_muÉË_d©a_les
(
¬
->
addr
,»a->
size
);

68 
	}
}

70 
	$smp_ÿche_d©a_æush_®l
(*
¬g
)

72 
	`¹ems_ÿche_æush_te_d©a
();

73 
	}
}

75 
	$smp_ÿche_d©a_v_®l
(*
¬g
)

77 
	`¹ems_ÿche_v®id©e_te_d©a
();

78 
	}
}

83 
	$¹ems_ÿche_æush_muÉË_d©a_les_´oûssÜ_£t
(

84 cÚ¡ *
addr
,

85 
size_t
 
size
,

86 cÚ¡ 
size_t
 
£tsize
,

87 cÚ¡ 
ýu_£t_t
 *
£t


90 #ià
	`defed
(
CPU_DATA_CACHE_ALIGNMENT
)

91 
smp_ÿche_¬
 
¬
 = { 
addr
, 
size
 };

93 
	`_SMP_MuÉiÿ¡_aùiÚ
Ð
£tsize
, 
£t
, 
smp_ÿche_d©a_æush
, &
¬
 );

95 
	}
}

98 
	$¹ems_ÿche_v®id©e_muÉË_d©a_les_´oûssÜ_£t
(

99 cÚ¡ *
addr
,

100 
size_t
 
size
,

101 cÚ¡ 
size_t
 
£tsize
,

102 cÚ¡ 
ýu_£t_t
 *
£t


105 #ià
	`defed
(
CPU_DATA_CACHE_ALIGNMENT
)

106 
smp_ÿche_¬
 
¬
 = { 
addr
, 
size
 };

108 
	`_SMP_MuÉiÿ¡_aùiÚ
Ð
£tsize
, 
£t
, 
smp_ÿche_d©a_v
, &
¬
 );

110 
	}
}

113 
	$¹ems_ÿche_æush_te_d©a_´oûssÜ_£t
(

114 cÚ¡ 
size_t
 
£tsize
,

115 cÚ¡ 
ýu_£t_t
 *
£t


118 #ià
	`defed
(
CPU_DATA_CACHE_ALIGNMENT
)

119 
	`_SMP_MuÉiÿ¡_aùiÚ
Ð
£tsize
, 
£t
, 
smp_ÿche_d©a_æush_®l
, 
NULL
 );

121 
	}
}

124 
	$¹ems_ÿche_v®id©e_te_d©a_´oûssÜ_£t
(

125 cÚ¡ 
size_t
 
£tsize
,

126 cÚ¡ 
ýu_£t_t
 *
£t


129 #ià
	`defed
(
CPU_DATA_CACHE_ALIGNMENT
)

130 
	`_SMP_MuÉiÿ¡_aùiÚ
Ð
£tsize
, 
£t
, 
smp_ÿche_d©a_v_®l
, 
NULL
 );

132 
	}
}

146 
	$¹ems_ÿche_æush_muÉË_d©a_les
ÐcÚ¡ * 
d_addr
, 
size_t
 
n_bys
 )

148 #ià
	`defed
(
CPU_DATA_CACHE_ALIGNMENT
)

149 #ià
	`defed
(
CPU_CACHE_SUPPORT_PROVIDES_RANGE_FUNCTIONS
)

150 
	`_CPU_ÿche_æush_d©a_¿nge
Ð
d_addr
, 
n_bys
 );

152 cÚ¡ * 
f®_add»ss
;

160 ifÐ
n_bys
 == 0 )

164 
f®_add»ss
 = (*)((
size_t
)
d_addr
 + 
n_bys
 - 1);

165 
d_addr
 = (*)((
size_t
)d_add¸& ~(
CPU_DATA_CACHE_ALIGNMENT
 - 1));

166  
d_addr
 <ð
f®_add»ss
 ) {

167 
	`_CPU_ÿche_æush_1_d©a_le
Ð
d_addr
 );

168 
d_addr
 = (*)((
size_t
)d_add¸+ 
CPU_DATA_CACHE_ALIGNMENT
);

172 
	}
}

182 
	$¹ems_ÿche_v®id©e_muÉË_d©a_les
ÐcÚ¡ * 
d_addr
, 
size_t
 
n_bys
 )

184 #ià
	`defed
(
CPU_DATA_CACHE_ALIGNMENT
)

185 #ià
	`defed
(
CPU_CACHE_SUPPORT_PROVIDES_RANGE_FUNCTIONS
)

186 
	`_CPU_ÿche_v®id©e_d©a_¿nge
Ð
d_addr
, 
n_bys
 );

188 cÚ¡ * 
f®_add»ss
;

196 ifÐ
n_bys
 == 0 )

200 
f®_add»ss
 = (*)((
size_t
)
d_addr
 + 
n_bys
 - 1);

201 
d_addr
 = (*)((
size_t
)d_add¸& ~(
CPU_DATA_CACHE_ALIGNMENT
 - 1));

202  
f®_add»ss
 >ð
d_addr
 ) {

203 
	`_CPU_ÿche_v®id©e_1_d©a_le
Ð
d_addr
 );

204 
d_addr
 = (*)((
size_t
)d_add¸+ 
CPU_DATA_CACHE_ALIGNMENT
);

208 
	}
}

216 
	$¹ems_ÿche_æush_te_d©a
( )

218 #ià
	`defed
(
CPU_DATA_CACHE_ALIGNMENT
)

222 
	`_CPU_ÿche_æush_te_d©a
();

224 
	}
}

232 
	$¹ems_ÿche_v®id©e_te_d©a
( )

234 #ià
	`defed
(
CPU_DATA_CACHE_ALIGNMENT
)

239 
	`_CPU_ÿche_v®id©e_te_d©a
();

241 
	}
}

247 
size_t


248 
	$¹ems_ÿche_g_d©a_le_size
( )

250 #ià
	`defed
(
CPU_DATA_CACHE_ALIGNMENT
)

251  
CPU_DATA_CACHE_ALIGNMENT
;

255 
	}
}

258 
size_t


259 
	$¹ems_ÿche_g_d©a_ÿche_size
Ð
ut32_t
 
Ëv
 )

261 #ià
	`defed
(
CPU_CACHE_SUPPORT_PROVIDES_CACHE_SIZE_FUNCTIONS
)

262  
	`_CPU_ÿche_g_d©a_ÿche_size
Ð
Ëv
 );

266 
	}
}

273 
	$¹ems_ÿche_äze_d©a
( )

275 #ià
	`defed
(
CPU_DATA_CACHE_ALIGNMENT
)

276 
	`_CPU_ÿche_äze_d©a
();

278 
	}
}

284 
	$¹ems_ÿche_unäze_d©a
( )

286 #ià
	`defed
(
CPU_DATA_CACHE_ALIGNMENT
)

287 
	`_CPU_ÿche_unäze_d©a
();

289 
	}
}

294 
	$¹ems_ÿche_abË_d©a
( )

296 #ià
	`defed
(
CPU_DATA_CACHE_ALIGNMENT
)

297 
	`_CPU_ÿche_abË_d©a
();

299 
	}
}

304 
	$¹ems_ÿche_di§bË_d©a
( )

306 #ià
	`defed
(
CPU_DATA_CACHE_ALIGNMENT
)

307 
	`_CPU_ÿche_di§bË_d©a
();

309 
	}
}

317 #ià
defed
(
CPU_INSTRUCTION_CACHE_ALIGNMENT
) \

318 && 
defed
(
RTEMS_SMP
) \

319 && 
	$defed
(
CPU_CACHE_NO_INSTRUCTION_CACHE_SNOOPING
)

321 
	$smp_ÿche_¡_v
(*
¬g
)

323 
smp_ÿche_¬
 *
¬
 = 
¬g
;

325 
	`_CPU_ÿche_v®id©e_¡ruùiÚ_¿nge
(
¬
->
addr
,»a->
size
);

326 
	}
}

328 
	$smp_ÿche_¡_v_®l
(*
¬g
)

330 
	`_CPU_ÿche_v®id©e_te_¡ruùiÚ
();

331 
	}
}

341 #ià
defed
(
CPU_INSTRUCTION_CACHE_ALIGNMENT
) \

342 && !
	$defed
(
CPU_CACHE_SUPPORT_PROVIDES_RANGE_FUNCTIONS
)

344 
	$_CPU_ÿche_v®id©e_¡ruùiÚ_¿nge
(

345 cÚ¡ * 
i_addr
,

346 
size_t
 
n_bys


349 cÚ¡ * 
f®_add»ss
;

357 ifÐ
n_bys
 == 0 )

361 
f®_add»ss
 = (*)((
size_t
)
i_addr
 + 
n_bys
 - 1);

362 
i_addr
 = (*)((
size_t
)i_add¸& ~(
CPU_INSTRUCTION_CACHE_ALIGNMENT
 - 1));

363  
f®_add»ss
 >ð
i_addr
 ) {

364 
	`_CPU_ÿche_v®id©e_1_¡ruùiÚ_le
Ð
i_addr
 );

365 
i_addr
 = (*)((
size_t
)i_add¸+ 
CPU_INSTRUCTION_CACHE_ALIGNMENT
);

367 
	}
}

371 
	$¹ems_ÿche_v®id©e_muÉË_¡ruùiÚ_les
(

372 cÚ¡ * 
i_addr
,

373 
size_t
 
n_bys


376 #ià
	`defed
(
CPU_INSTRUCTION_CACHE_ALIGNMENT
)

377 #ià
	`defed
(
RTEMS_SMP
è&& defed(
CPU_CACHE_NO_INSTRUCTION_CACHE_SNOOPING
)

378 
smp_ÿche_¬
 
¬
 = { 
i_addr
, 
n_bys
 };

380 
	`_SMP_MuÉiÿ¡_aùiÚ
Ð0, 
NULL
, 
smp_ÿche_¡_v
, &
¬
 );

382 
	`_CPU_ÿche_v®id©e_¡ruùiÚ_¿nge
Ð
i_addr
, 
n_bys
 );

385 
	}
}

393 
	$¹ems_ÿche_v®id©e_te_¡ruùiÚ
( )

395 #ià
	`defed
(
CPU_INSTRUCTION_CACHE_ALIGNMENT
)

396 #ià
	`defed
(
RTEMS_SMP
è&& defed(
CPU_CACHE_NO_INSTRUCTION_CACHE_SNOOPING
)

397 
	`_SMP_MuÉiÿ¡_aùiÚ
Ð0, 
NULL
, 
smp_ÿche_¡_v_®l
, NULL );

399 
	`_CPU_ÿche_v®id©e_te_¡ruùiÚ
();

402 
	}
}

408 
size_t


409 
	$¹ems_ÿche_g_¡ruùiÚ_le_size
( )

411 #ià
	`defed
(
CPU_INSTRUCTION_CACHE_ALIGNMENT
)

412  
CPU_INSTRUCTION_CACHE_ALIGNMENT
;

416 
	}
}

419 
size_t


420 
	$¹ems_ÿche_g_¡ruùiÚ_ÿche_size
Ð
ut32_t
 
Ëv
 )

422 #ià
	`defed
(
CPU_CACHE_SUPPORT_PROVIDES_CACHE_SIZE_FUNCTIONS
)

423  
	`_CPU_ÿche_g_¡ruùiÚ_ÿche_size
Ð
Ëv
 );

427 
	}
}

435 
	$¹ems_ÿche_äze_¡ruùiÚ
( )

437 #ià
	`defed
(
CPU_INSTRUCTION_CACHE_ALIGNMENT
)

438 
	`_CPU_ÿche_äze_¡ruùiÚ
();

440 
	}
}

446 
	$¹ems_ÿche_unäze_¡ruùiÚ
( )

448 #ià
	`defed
(
CPU_INSTRUCTION_CACHE_ALIGNMENT
)

449 
	`_CPU_ÿche_unäze_¡ruùiÚ
();

451 
	}
}

456 
	$¹ems_ÿche_abË_¡ruùiÚ
( )

458 #ià
	`defed
(
CPU_INSTRUCTION_CACHE_ALIGNMENT
)

459 
	`_CPU_ÿche_abË_¡ruùiÚ
();

461 
	}
}

466 
	$¹ems_ÿche_di§bË_¡ruùiÚ
( )

468 #ià
	`defed
(
CPU_INSTRUCTION_CACHE_ALIGNMENT
)

469 
	`_CPU_ÿche_di§bË_¡ruùiÚ
();

471 
	}
}

	@src/lib/libcpu/shared/src/no_cache.c

5 
	~<¹ems.h
>

6 
	~"ÿche_.h
"

18 
	$_CPU_ÿche_äze_d©a
 ( è{
	}
}

19 
	$_CPU_ÿche_unäze_d©a
 ( è{
	}
}

20 
	$_CPU_ÿche_äze_¡ruùiÚ
 ( è{
	}
}

21 
	$_CPU_ÿche_unäze_¡ruùiÚ
 ( è{
	}
}

23 
	$_CPU_ÿche_æush_1_d©a_le
 (

24 cÚ¡ * 
d_addr
 )

26 
	}
}

28 
	$_CPU_ÿche_v®id©e_1_d©a_le
 (

29 cÚ¡ * 
d_addr
 )

31 
	}
}

33 
	$_CPU_ÿche_æush_te_d©a
 ( )

35 
	}
}

37 
	$_CPU_ÿche_v®id©e_te_d©a
 ( )

39 
	}
}

41 
	$_CPU_ÿche_abË_d©a
 ( )

43 
	}
}

45 
	$_CPU_ÿche_di§bË_d©a
 ( )

47 
	}
}

49 
	$_CPU_ÿche_v®id©e_1_¡ruùiÚ_le
 (

50 cÚ¡ * 
i_addr
 )

52 
	}
}

54 
	$_CPU_ÿche_v®id©e_te_¡ruùiÚ
 ( )

56 
	}
}

58 
	$_CPU_ÿche_abË_¡ruùiÚ
 ( )

60 
	}
}

62 
	$_CPU_ÿche_di§bË_¡ruùiÚ
 ( )

64 
	}
}

	@src/libchip/display/disp_fonts.h

21 #iâdeà
DISP_FONTS_H


22 
	#DISP_FONTS_H


	)

24 
	~<¹ems.h
>

26 
t8_t
 
	tdi¥_fÚt_dim
;

28 
	sdi¥_fÚt_boundg_box


30 
di¥_fÚt_dim
 
	mw
, 
	mh
, 
	mx
, 
	my
;

33 
	sdi¥_fÚt_glyph


35 
di¥_fÚt_boundg_box
 
	mbb
;

36 
di¥_fÚt_dim
 
	mwx
, 
	mwy
;

37 cÚ¡ *
	mbm­
;

40 
	sdi¥_fÚt_ba£


42 
t8_t
 
	mªs
;

43 
di¥_fÚt_boundg_box
 
	mfbb
;

44 
di¥_fÚt_dim
 
	masûÁ
, 
	mdesûÁ
;

45 
ut8_t
 
	mdeçuÉ_ch¬
;

46 
di¥_fÚt_glyph
 *
	mÏt1
[256];

49 
di¥_fÚt_ba£
 *
	tdi¥_fÚt_t
;

	@src/libchip/display/disp_hcms29xx.c

21 
	~<¡rg.h
>

22 
	~<¡dlib.h
>

24 
	~<¹ems.h
>

25 
	~<¹ems/libio.h
>

26 
	~<b¥.h
>

27 
	~<¹ems/libi2c.h
>

28 
	~<libch/di¥_hcms29xx.h
>

29 
	~"fÚt_hcms29xx.h
"

30 
	#FONT_BASE
 
fÚt_hcms29xx_ba£


	)

33 
	#DISP_HCMS29XX_DIGIT_CNT
 (4)

	)

34 
	#DISP_HCMS29XX_SEMA_NAME
 
	`¹ems_bud_Çme
('D','4','I','Q')

	)

35 
	#DISP_HCMS29XX_TRNS_SEMA_NAME
 
	`¹ems_bud_Çme
('D','4','T','R')

	)

36 
	#DISP_HCMS29XX_TIMER_NAME
 
	`¹ems_bud_Çme
('D','4','T','M')

	)

37 
	#DISP_HCMS29XX_TASK_NAME
 
	`¹ems_bud_Çme
('D','4','T','A')

	)

39 
	#DISP_HCMS29XX_EVENT_TIMER
 
RTEMS_EVENT_1


	)

40 
	#DISP_HCMS29XX_EVENT_NEWSTR
 
RTEMS_EVENT_2


	)

43 
di¥_fÚt_t
 
	gdi¥_hcms29xx_fÚt_nÜm®
;

44 
di¥_fÚt_t
 
	gdi¥_hcms29xx_fÚt_rÙ©e
;

45 cÚ¡ 
¹ems_libi2c_tä_mode_t
 
	g¥i_di¥hcms29xx_tä_mode
 = {

46 .
baud¿
 = 1000000,

47 .
	gbs_³r_ch¬
 = 8,

48 .
	glsb_f¡
 = 
ue
,

49 .
	gþock_v
 = 
ue
,

50 .
	gþock_phs
 = 
ue
,

51 .
	gidË_ch¬
 = 0

54 
di¥_hcms29xx_drv_t
 
	gdi¥_hcms29xx_drv_tbl
;

63 
¹ems_¡©us_code
 
	gdi¥_hcms29xx_fÚt_¡ruù_size


71 
di¥_fÚt_t
 
	g¤c
,

72 
size_t
 *
	gd¡_size


80 
¹ems_¡©us_code
 
	grc
 = 
RTEMS_SUCCESSFUL
;

81 
size_t
 
	gfÚt_size
 = 0;

82 
size_t
 
	gglyph_idx
;

86 ià((
	grc
 =ð
RTEMS_SUCCESSFUL
) &&

87 (
¤c
 =ð
NULL
)) {

88 
rc
 = 
RTEMS_INVALID_ADDRESS
;

90 ià(
	grc
 =ð
RTEMS_SUCCESSFUL
) {

91 
fÚt_size
 =

92 (*
¤c
);

94 
	gglyph_idx
 = 0;

95 (
	grc
 =ð
RTEMS_SUCCESSFUL
) &&

96 (
glyph_idx
 < ((
¤c
->
Ït1
)/(src->latin1[0])))) {

97 ià(
¤c
->
Ït1
[
glyph_idx
] !ð
NULL
) {

98 
fÚt_size
 +ð(*(
¤c
->
Ït1
[
glyph_idx
]))

99 + (
size_t
è
¤c
->
Ït1
[
glyph_idx
]->
bb
.
w
;

101 
	gglyph_idx
++;

103 *
	gd¡_size
 = 
fÚt_size
;

105  
	grc
;

111 
le
 
	gdi¥_hcms29xx_bsw­


119 
	gby


126 
	g»suÉ
 = 0;

127 
	gsmsk
,
	gdmsk
;

128 
	gsmsk
 = 0x01,
	gdmsk
=0x80;

129 
	gsmsk
 < 0x100;

130 
	gsmsk
<<=1 ,
	gdmsk
>>=1) {

131 ià((
by
 & 
smsk
) != 0) {

132 
»suÉ
 |ð(è
dmsk
;

135  
	g»suÉ
;

141 
¹ems_¡©us_code
 
	gdi¥_hcms29xx_cÝy_fÚt


149 
di¥_fÚt_t
 
	g¤c
,

150 
di¥_fÚt_ba£
 *
	gd¡
,

151 
	gshiá_út
,

152 
boÞ
 
	gdo_rÙ©e


160 
¹ems_¡©us_code
 
	grc
 = 
RTEMS_SUCCESSFUL
;

161 *
	g®loc_Ãxt
 = (*)
d¡
;

162 
size_t
 
	gglyph_idx
 = 0;

163 
	gglyph_size
;

164 
	gby
;

165 
	gbút
;

170 ià((
	grc
 =ð
RTEMS_SUCCESSFUL
) &&

171 ((
¤c
 =ð
NULL
) ||

172 (
d¡
 =ð
NULL
))) {

173 
rc
 = 
RTEMS_INVALID_ADDRESS
;

178 ià(
	grc
 =ð
RTEMS_SUCCESSFUL
) {

179 *
d¡
 = *
¤c
;

180 
	g®loc_Ãxt
 +ð(*
d¡
);

185 
	gglyph_idx
 = 0;

186 (
	grc
 =ð
RTEMS_SUCCESSFUL
) &&

187 
glyph_idx
 < ((
¤c
->
Ït1
)/(src->latin1[0]))) {

188 ià(
¤c
->
Ït1
[
glyph_idx
] !ð
NULL
) {

192 
d¡
->
Ït1
[
glyph_idx
] = (
di¥_fÚt_glyph
 *)
®loc_Ãxt
;

193 
	g®loc_Ãxt
 +ð(*(
d¡
->
Ït1
[
glyph_idx
]));

198 *(
	gdi¥_fÚt_glyph
 *)(
	gd¡
->
	gÏt1
[
glyph_idx
]) =

199 *(
¤c
->
Ït1
[
glyph_idx
]);

202 
	gd¡
->
	gÏt1
[
glyph_idx
] = 
NULL
;

204 
	gglyph_idx
++;

210 
	gglyph_idx
 = 0;

211 (
	grc
 =ð
RTEMS_SUCCESSFUL
) &&

212 
glyph_idx
 < ((
¤c
->
Ït1
)/(src->latin1[0]))) {

213 ià(
¤c
->
Ït1
[
glyph_idx
] !ð
NULL
) {

214 
glyph_size
 = 
¤c
->
Ït1
[
glyph_idx
]->
bb
.
w
;

218 
	gd¡
->
	gÏt1
[
glyph_idx
]->
	gbm­
 = (cÚ¡ *è
®loc_Ãxt
;

219 
	g®loc_Ãxt
 +ð
glyph_size
;

223 
	gbút
 = 0;bú< 
	gglyph_size
;bcnt++) {

224 ià(
	gdo_rÙ©e
) {

225 
	gby
 = 
¤c
->
Ït1
[
glyph_idx
]->
bm­
[
glyph_size
 - 1 - 
bút
];

226 
	gby
 = 
di¥_hcms29xx_bsw­
(
by
);

229 
	gby
 = 
¤c
->
Ït1
[
glyph_idx
]->
bm­
[
bút
];

231 ià(
	gshiá_út
 < 0) {

232 
	gby
 = 
by
 >> 
shiá_út
;

234 ià(
	gshiá_út
 > 0) {

235 
	gby
 = 
by
 >> 
shiá_út
;

237 ((*)(
	gd¡
->
	gÏt1
[
glyph_idx
]->
	gbm­
))[
bút
] = 
by
;

240 
	gglyph_idx
++;

242  
	grc
;

248 
¹ems_¡©us_code
 
	gdi¥_hcms29xx_®loc_cÝy_fÚt


256 cÚ¡ 
di¥_fÚt_t
 
	g¤c
,

257 
di¥_fÚt_t
 *
	gd¡
,

258 
	gshiá_út
,

259 
boÞ
 
	gdo_rÙ©e


267 
¹ems_¡©us_code
 
	grc
 = 
RTEMS_SUCCESSFUL
;

268 
size_t
 
	g¤c_size
 = 0;

272 ià((
	grc
 =ð
RTEMS_SUCCESSFUL
) &&

273 ((
¤c
 =ð
NULL
)

274 || (
d¡
 =ð
NULL
))) {

275 
rc
 = 
RTEMS_INVALID_ADDRESS
;

280 ià(
	grc
 =ð
RTEMS_SUCCESSFUL
) {

281 
rc
 = 
di¥_hcms29xx_fÚt_¡ruù_size
(
¤c
,&
¤c_size
);

286 ià(
	grc
 =ð
RTEMS_SUCCESSFUL
) {

287 *
d¡
 = 
m®loc
(
¤c_size
);

288 ià(*
	gd¡
 =ð
NULL
) {

289 
rc
 = 
RTEMS_UNSATISFIED
;

295 ià(
	grc
 =ð
RTEMS_SUCCESSFUL
) {

296 
rc
 = 
di¥_hcms29xx_cÝy_fÚt
(
¤c
,*
d¡
,
shiá_út
,
do_rÙ©e
);

298  
	grc
;

308 
¹ems_¡©us_code
 
	gdi¥_hcms29xx_£nd_to_di¥Ïy


317 
di¥_hcms29xx_drv_t
 *
	gsoác_±r
,

318 cÚ¡ vÞ©*
	gdi¥_bufãr


325 
¹ems_¡©us_code
 
	grc
 = 
RTEMS_SUCCESSFUL
;

326 
boÞ
 
	gch¬_ava
;

327 cÚ¡ 
di¥_fÚt_glyph
 *
	gglyph_±r
;

328 
di¥_fÚt_t
 
	gcu¼_fÚt
;

329 
	gi
, 
	g»t_út
;

330 
	gc
;

335 ià(
	grc
 =ð
RTEMS_SUCCESSFUL
) {

336 
rc
 = 
¹ems_libi2c_£nd_¡¬t
(
soác_±r
->
di¥_·¿m
.
mÜ
);

341 ià(
	grc
 =ð
RTEMS_SUCCESSFUL
) {

342 
rc
 = -
¹ems_libi2c_ioùl
(
soác_±r
->
di¥_·¿m
.
mÜ
,

343 
RTEMS_LIBI2C_IOCTL_SET_TFRMODE
,

344 &
¥i_di¥hcms29xx_tä_mode
);

350 ià(
	grc
 =ð
RTEMS_SUCCESSFUL
) {

351 
rc
 = 
¹ems_libi2c_£nd_addr
(
soác_±r
->
di¥_·¿m
.
mÜ
,
ue
);

357 ià(
	grc
 =ð
RTEMS_SUCCESSFUL
) {

358 
cu¼_fÚt
 =

359 
soác_±r
->
di¥_·¿m
.
rÙ©e


360 ? 
di¥_hcms29xx_fÚt_rÙ©e


361 : 
di¥_hcms29xx_fÚt_nÜm®
;

363 
	gch¬_ava
 = 
ue
;

369 
	gi
 = 0;

370 ((
	grc
 =ð
RTEMS_SUCCESSFUL
) &&

371 (
i
 < 
DISP_HCMS29XX_DIGIT_CNT
));

372 
	gi
++) {

374 
	gc
 = 
di¥_bufãr
[
i
];

375 ià(
	gch¬_ava
 && (
	gc
 == '\0')) {

376 
ch¬_ava
 = 
çl£
;

378 
	gglyph_±r
 = (
ch¬_ava


379 ? 
cu¼_fÚt
->
Ït1
[
c
]

380 : 
NULL
);

381 ià(
	gglyph_±r
 =ð
NULL
) {

382 
glyph_±r
 = 
cu¼_fÚt
->
Ït1
[' '];

388 ià(
	grc
 =ð
RTEMS_SUCCESSFUL
) {

389 
»t_út
 = 
¹ems_libi2c_wre_bys
(
soác_±r
->
di¥_·¿m
.
mÜ
,

390 
glyph_±r
->
bm­
,5);

391 ià(
	g»t_út
 < 0) {

392 
	grc
 = -
»t_út
;

400 ià(
	grc
 =ð
RTEMS_SUCCESSFUL
) {

401 
rc
 = 
¹ems_libi2c_£nd_¡Ý
(
soác_±r
->
di¥_·¿m
.
mÜ
);

404  
	grc
;

410 
¹ems_¡©us_code
 
	gdi¥_hcms29xx_£nd_to_cÚÞ


419 
di¥_hcms29xx_drv_t
 *
	gsoác_±r
,

420 
	gpwm
,

421 
	g³ak
,

422 
	g¦p
,

423 
	gdiv
,

424 
	gcha


431 
¹ems_¡©us_code
 
	grc
 = 
RTEMS_SUCCESSFUL
;

432 
	grun
, 
	g»t_út
;

433 
ut8_t
 
	gù¾_bufãr
;

436 
	grun
 = 0;

437 ((
	grc
 =ð
RTEMS_SUCCESSFUL
è&& (
run
 <= 1));

438 
	grun
++) {

439 ià(
	grc
 =ð
RTEMS_SUCCESSFUL
) {

440 ià(
run
 == 0) {

441 
ù¾_bufãr
 =

443 ((
¦p
 & 0x01) << 6) |

444 ((
³ak
 & 0x03) << 4) |

445 ((
pwm
 & 0x0f) << 0);

448 
	gù¾_bufãr
 =

450 ((
div
 & 0x01) << 1) |

451 ((
cha
 & 0x01) << 0);

456 ià(
	grc
 =ð
RTEMS_SUCCESSFUL
) {

457 
rc
 = 
¹ems_libi2c_£nd_¡¬t
(
soác_±r
->
di¥_·¿m
.
mÜ
);

462 ià(
	grc
 =ð
RTEMS_SUCCESSFUL
) {

463 
rc
 = -
¹ems_libi2c_ioùl
(
soác_±r
->
di¥_·¿m
.
mÜ
,

464 
RTEMS_LIBI2C_IOCTL_SET_TFRMODE
,

465 &
¥i_di¥hcms29xx_tä_mode
);

471 ià(
	grc
 =ð
RTEMS_SUCCESSFUL
) {

472 
rc
 = 
¹ems_libi2c_£nd_addr
(
soác_±r
->
di¥_·¿m
.
mÜ
,
ue
);

478 ià(
	grc
 =ð
RTEMS_SUCCESSFUL
) {

479 
»t_út
 = 
¹ems_libi2c_wre_bys
(
soác_±r
->
di¥_·¿m
.
mÜ
,

480 &
ù¾_bufãr
,1);

481 ià(
	g»t_út
 < 0) {

482 
	grc
 = -
»t_út
;

491 ià(
	grc
 =ð
RTEMS_SUCCESSFUL
) {

492 
rc
 = 
¹ems_libi2c_£nd_¡Ý
(
soác_±r
->
di¥_·¿m
.
mÜ
);

495  
	grc
;

501 
¹ems_tim_£rviû_route
 
	gdi¥_hcms29xx_tim_¤


509 
¹ems_id
 
	gid
,

510 * 
	g¬g


517 
di¥_hcms29xx_drv_t
 *
	gsoác_±r
 = 
¬g
;

519 
¹ems_evt_£nd
(
soác_±r
->
di¥_·¿m
.
sk_id
, 
DISP_HCMS29XX_EVENT_TIMER
);

525 
¹ems_sk
 
	gdi¥_hcms29xx_upd©e_sk


533 
¹ems_sk_¬gumt
 
	g¬gumt


540 
¹ems_evt_£t
 
	gmy_evts
;

541 
¹ems_¡©us_code
 
	grc
 = 
RTEMS_SUCCESSFUL
;

542 
	gdi¥_off£t
 = 0;

543 
¹ems_id
 
	gdi¥_hcms29xx_tim_id
;

544 
di¥_hcms29xx_drv_t
 *
	gsoác_±r
 = &
di¥_hcms29xx_drv_tbl
;

553 ià(
	grc
 =ð
RTEMS_SUCCESSFUL
) {

554 
rc
 = 
di¥_hcms29xx_£nd_to_cÚÞ
(
soác_±r
,

561 ià(
	grc
 =ð
RTEMS_SUCCESSFUL
) {

562 
rc
 = 
di¥_hcms29xx_£nd_to_di¥Ïy
(
soác_±r
,

569 ià(
	grc
 =ð
RTEMS_SUCCESSFUL
) {

570 
rc
 = 
¹ems_tim_ü
(
DISP_HCMS29XX_TIMER_NAME
,

571 &
di¥_hcms29xx_tim_id
);

574 
	grc
 =ð
RTEMS_SUCCESSFUL
) {

578 
rc
 = 
¹ems_evt_»ûive
(
DISP_HCMS29XX_EVENT_NEWSTR
 |

579 
DISP_HCMS29XX_EVENT_TIMER
 ,

580 
RTEMS_WAIT
 | 
RTEMS_EVENT_ANY
,

581 
RTEMS_NO_TIMEOUT
,

582 &
my_evts
);

583 ià(
	gmy_evts
 & 
	gDISP_HCMS29XX_EVENT_NEWSTR
) {

587 ià(
	grc
 =ð
RTEMS_SUCCESSFUL
) {

588 
rc
 = 
¹ems_£m­hÜe_ob
(
soác_±r
->
di¥_·¿m
.
ns_£ma_id
,

589 
RTEMS_WAIT
,
RTEMS_NO_TIMEOUT
);

591 ià(
	grc
 =ð
RTEMS_SUCCESSFUL
) {

592 
¡ºýy
(
soác_±r
->
di¥_·¿m
.
di¥_bufãr
,

593 
soác_±r
->
di¥_·¿m
.
ns_bufãr
,

594 (
soác_±r
->
di¥_·¿m
.
di¥_bufãr
));

595 
	gsoác_±r
->
	gdi¥_·¿m
.
	gdi¥_bufãr
[(
soác_±r
->
di¥_·¿m
.
di¥_bufãr
)-1] = '\0';

596 
	gsoác_±r
->
	gdi¥_·¿m
.
	gdi¥_buf_út
 =

597 (è
¡¾
(
soác_±r
->
di¥_·¿m
.
di¥_bufãr
);

599 ià(
	grc
 =ð
RTEMS_SUCCESSFUL
) {

600 
rc
 = 
¹ems_£m­hÜe_»Ëa£
(
soác_±r
->
di¥_·¿m
.
ns_£ma_id
);

606 
	gdi¥_off£t
 = -4;

608 ià(
	gmy_evts
 & 
	gDISP_HCMS29XX_EVENT_TIMER
) {

612 ià((
	gdi¥_off£t
 < 0) ||

613 (
	gdi¥_off£t
 < 
	gsoác_±r
->
	gdi¥_·¿m
.
	gdi¥_buf_út
-

614 
	gDISP_HCMS29XX_DIGIT_CNT
/2)) {

615 
	gdi¥_off£t
++;

618 
	gdi¥_off£t
 = -4;

624 ià(
	gdi¥_off£t
 < 0) {

625 
	grc
 = 
di¥_hcms29xx_£nd_to_di¥Ïy
(
soác_±r
,

626 
soác_±r
->
di¥_·¿m
.
di¥_bufãr
);

628 ià(
	gdi¥_off£t


629 < (
	gsoác_±r
->
	gdi¥_·¿m
.
	gdi¥_buf_út
 - 
	gDISP_HCMS29XX_DIGIT_CNT
)) {

630 
	grc
 = 
di¥_hcms29xx_£nd_to_di¥Ïy
(
soác_±r
,

631 
soác_±r
->
di¥_·¿m
.
di¥_bufãr
+
di¥_off£t
);

634 
	grc
 = 
di¥_hcms29xx_£nd_to_di¥Ïy
(
soác_±r
,

635 
soác_±r
->
di¥_·¿m
.
di¥_bufãr


636 + 
soác_±r
->
di¥_·¿m
.
di¥_buf_út


637 - 
DISP_HCMS29XX_DIGIT_CNT
);

642 ià(
	grc
 =ð
RTEMS_SUCCESSFUL
) {

643 ià(
soác_±r
->
di¥_·¿m
.
di¥_buf_út
 > 
DISP_HCMS29XX_DIGIT_CNT
) {

644 
rc
 = 
¹ems_tim_fe_aá
(
di¥_hcms29xx_tim_id
,

646 
di¥_hcms29xx_tim_¤
,

647 
NULL
);

650 
	grc
 = 
¹ems_tim_ÿnûl
(
di¥_hcms29xx_tim_id
);

662 
¹ems_¡©us_code
 
	gdi¥_hcms29xx_upd©e


670 
di¥_hcms29xx_drv_t
 *
	gsoác_±r
,

671 cÚ¡ *
	g¤c


678 
¹ems_¡©us_code
 
	grc
 = 
RTEMS_SUCCESSFUL
;

683 ià(
	grc
 =ð
RTEMS_SUCCESSFUL
) {

684 
rc
 = 
¹ems_£m­hÜe_ob
(
soác_±r
->
di¥_·¿m
.
ns_£ma_id
,

685 
RTEMS_WAIT
,
RTEMS_NO_TIMEOUT
);

690 
¡ºýy
(
soác_±r
->
di¥_·¿m
.
ns_bufãr
,
¤c
,

691 (
soác_±r
->
di¥_·¿m
.
ns_bufãr
));

692 
	gsoác_±r
->
	gdi¥_·¿m
.
	gns_bufãr
[(
soác_±r
->
di¥_·¿m
.
ns_bufãr
)-1] = '\0';

697 ià(
	grc
 =ð
RTEMS_SUCCESSFUL
) {

698 
rc
 = 
¹ems_£m­hÜe_»Ëa£
(
soác_±r
->
di¥_·¿m
.
ns_£ma_id
);

704 ià(
	grc
 =ð
RTEMS_SUCCESSFUL
) {

705 
rc
 = 
¹ems_evt_£nd
(
soác_±r
->
di¥_·¿m
.
sk_id
,

706 
DISP_HCMS29XX_EVENT_NEWSTR
);

709  
	grc
;

715 
¹ems_deviû_driv
 
	gdi¥_hcms29xx_dev_lize


724 
¹ems_deviû_majÜ_numb
 
	gmajÜ
,

725 
¹ems_deviû_mÜ_numb
 
	gmÜ
,

726 *
	g¬g


736 
¹ems_¡©us_code
 
	grc
 = 
RTEMS_SUCCESSFUL
;

737 
di¥_hcms29xx_drv_t
 *
	gsoác_±r
 = &
di¥_hcms29xx_drv_tbl
;

747 ià(
	grc
 =ð
RTEMS_SUCCESSFUL
) {

748 
rc
 = 
di¥_hcms29xx_®loc_cÝy_fÚt
(

749 &
FONT_BASE
,

750 &
di¥_hcms29xx_fÚt_nÜm®
,

751 
FONT_BASE
.
desûÁ
,

752 
FALSE
);

755 ià(
	grc
 =ð
RTEMS_SUCCESSFUL
) {

756 
rc
 = 
di¥_hcms29xx_®loc_cÝy_fÚt
(&
FONT_BASE
,

757 &
di¥_hcms29xx_fÚt_rÙ©e
,

759 
ue
);

764 ià(
	grc
 =ð
RTEMS_SUCCESSFUL
) {

765 
rc
 = 
¹ems_£m­hÜe_ü
 (
DISP_HCMS29XX_TRNS_SEMA_NAME
,1,

766 
RTEMS_PRIORITY


767 |
RTEMS_BINARY_SEMAPHORE


768 |
RTEMS_INHERIT_PRIORITY


769 |
RTEMS_NO_PRIORITY_CEILING


770 |
RTEMS_LOCAL
,

772 &
soác_±r
->
di¥_·¿m
.
ns_£ma_id
);

778 ià(
	grc
 =ð
RTEMS_SUCCESSFUL
) {

779 
rc
 = 
¹ems_sk_ü
(
DISP_HCMS29XX_TASK_NAME
,

781 
RTEMS_MINIMUM_STACK_SIZE
,

782 
RTEMS_INTERRUPT_LEVEL
(0è| 
RTEMS_TIMESLICE
,

783 
RTEMS_DEFAULT_ATTRIBUTES
,

784 &
soác_±r
->
di¥_·¿m
.
sk_id
);

786 ià(
	grc
 =ð
RTEMS_SUCCESSFUL
) {

787 
rc
 = 
¹ems_sk_¡¬t
(
soác_±r
->
di¥_·¿m
.
sk_id
,

788 
di¥_hcms29xx_upd©e_sk
,0);

790  
	grc
;

796 
¹ems_deviû_driv
 
	gdi¥_hcms29xx_dev_Ý


804 
¹ems_deviû_majÜ_numb
 
	gmajÜ
,

805 
¹ems_deviû_mÜ_numb
 
	gmÜ
,

806 *
	g¬g


813 
di¥_hcms29xx_drv_t
 *
	gsoác_±r
 = &
di¥_hcms29xx_drv_tbl
;

817 
	gsoác_±r
->
	gdi¥_·¿m
.
	gdev_buf_út
 = 0;

819  
	gRTEMS_SUCCESSFUL
;

825 
¹ems_deviû_driv
 
	gdi¥_hcms29xx_dev_wre


833 
¹ems_deviû_majÜ_numb
 
	gmajÜ
,

834 
¹ems_deviû_mÜ_numb
 
	gmÜ
,

835 *
	g¬g


842 
¹ems_libio_rw_¬gs_t
 *
	g¬gs
 = 
¬g
;

843 
ut32_t
 
	gút
;

844 
di¥_hcms29xx_drv_t
 *
	gsoác_±r
 = &
di¥_hcms29xx_drv_tbl
;

846 
	gút
 = 0;ú< 
	g¬gs
->
	gcouÁ
;cnt++) {

850 ià(((
	gsoác_±r
->
	gdi¥_·¿m
.
	gdev_buf_út
 > 0)

851 &&((
	g¬gs
->
	gbufãr
[
út
] == '\n')

852 || (
¬gs
->
bufãr
[
út
] == '\0'))

854 ||Ð
soác_±r
->
di¥_·¿m
.
dev_buf_út
 >=

855 (è(
soác_±r
->
di¥_·¿m
.
dev_bufãr
) - 1)) {

856 
soác_±r
->
di¥_·¿m
.
dev_bufãr
[soác_±r->di¥_·¿m.
dev_buf_út
] = '\0';

860 
di¥_hcms29xx_upd©e
(
soác_±r
,soác_±r->
di¥_·¿m
.
dev_bufãr
);

861 
	gsoác_±r
->
	gdi¥_·¿m
.
	gdev_buf_út
 = 0;

866 ià((
	g¬gs
->
	gbufãr
[
út
] != '\n') &&

867 (
¬gs
->
bufãr
[
út
] != '\0')) {

868 
soác_±r
->
di¥_·¿m
.
dev_bufãr
[soác_±r->di¥_·¿m.
dev_buf_út
++] =

869 
¬gs
->
bufãr
[
út
];

872 
	g¬gs
->
	gbys_moved
 = 
¬gs
->
couÁ
;

874  
	gRTEMS_SUCCESSFUL
;

880 
¹ems_deviû_driv
 
	gdi¥_hcms29xx_dev_þo£


888 
¹ems_deviû_majÜ_numb
 
	gmajÜ
,

889 
¹ems_deviû_mÜ_numb
 
	gmÜ
,

890 *
	g¬g


898  
	gRTEMS_SUCCESSFUL
;

904 
¹ems_driv_add»ss_bË
 
	gdi¥_hcms29xx_Ýs
 = {

905 .
liz©iÚ_y
 = 
di¥_hcms29xx_dev_lize
,

906 .
	gÝ_y
 = 
di¥_hcms29xx_dev_Ý
,

907 .
	gwre_y
 = 
di¥_hcms29xx_dev_wre
,

908 .
	gþo£_y
 = 
di¥_hcms29xx_dev_þo£


912 
di¥_hcms29xx_drv_t
 
	gdi¥_hcms29xx_drv_tbl
 = {

914 .
Ýs
 = &
di¥_hcms29xx_Ýs
,

915 .
	gsize
 =  (
di¥_hcms29xx_drv_t
),

926 
	gçl£


930 
¹ems_libi2c_drv_t
 *
	gdi¥_hcms29xx_driv_desütÜ
 =

931 &
di¥_hcms29xx_drv_tbl
.
libi2c_drv_y
;

	@src/libchip/display/disp_hcms29xx.h

21 #iâdeà
_DISP_HCMS29XX_H


22 
	#_DISP_HCMS29XX_H


	)

23 
	~<¹ems.h
>

24 
	~<time.h
>

26 #ifdeà
__ýlu¥lus


29 
	#DISP_HCMS29XX_TEXT_CNT
 (128)

	)

32 
¹ems_deviû_mÜ_numb
 
mÜ
;

36 
di¥_bufãr
[
DISP_HCMS29XX_TEXT_CNT
];

37 
di¥_buf_út
;

41 
ns_bufãr
[
DISP_HCMS29XX_TEXT_CNT
];

45 
dev_bufãr
[
DISP_HCMS29XX_TEXT_CNT
];

46 
dev_buf_út
;

48 
¹ems_id
 
ns_£ma_id
;

49 
¹ems_id
 
sk_id
;

50 
boÞ
 
rÙ©e
;

51 } 
	t¥i_di¥_hcms29xx_·¿m_t
;

54 
¹ems_libi2c_drv_t
 
libi2c_drv_y
;

55 
¥i_di¥_hcms29xx_·¿m_t
 
di¥_·¿m
;

56 } 
	tdi¥_hcms29xx_drv_t
;

60 
¹ems_libi2c_drv_t
 *
di¥_hcms29xx_driv_desütÜ
;

65 
¹ems_deviû_driv
 
	gdi¥_hcms29xx_dev_lize


74 
¹ems_deviû_majÜ_numb
 
	gmajÜ
,

75 
¹ems_deviû_mÜ_numb
 
	gmÜ
,

76 *
	g¬g


86 
¹ems_deviû_driv
 
	gdi¥_hcms29xx_dev_Ý


94 
¹ems_deviû_majÜ_numb
 
	gmajÜ
,

95 
¹ems_deviû_mÜ_numb
 
	gmÜ
,

96 *
	g¬g


106 
¹ems_deviû_driv
 
	gdi¥_hcms29xx_dev_wre


114 
¹ems_deviû_majÜ_numb
 
	gmajÜ
,

115 
¹ems_deviû_mÜ_numb
 
	gmÜ
,

116 *
	g¬g


126 
¹ems_deviû_driv
 
	gdi¥_hcms29xx_dev_þo£


134 
¹ems_deviû_majÜ_numb
 
	gmajÜ
,

135 
¹ems_deviû_mÜ_numb
 
	gmÜ
,

136 *
	g¬g


143 
	#DISP_HCMS29XX_DRIVER
 { \

144 
di¥_hcms29xx_dev_lize
, \

145 
di¥_hcms29xx_dev_Ý
, \

146 
NULL
, \

147 
di¥_hcms29xx_dev_wre
, \

148 
NULL
, \

149 
di¥_hcms29xx_dev_þo£
}

	)

152 #ifdeà
__ýlu¥lus


	@src/libchip/display/font_hcms29xx.c

20 
	~<¡ddef.h
>

21 
	~"di¥_fÚts.h
"

23 cÚ¡ 
	gbm­_hp_fixed_5_7_0
 [5] = {

30 
di¥_fÚt_glyph
 
	gglyph_hp_fixed_5_7_0
 = {

32 5, 0, 
bm­_hp_fixed_5_7_0
,

35 cÚ¡ 
	gbm­_hp_fixed_5_7_1
 [5] = {

42 
di¥_fÚt_glyph
 
	gglyph_hp_fixed_5_7_1
 = {

44 5, 0, 
bm­_hp_fixed_5_7_1
,

47 cÚ¡ 
	gbm­_hp_fixed_5_7_2
 [5] = {

54 
di¥_fÚt_glyph
 
	gglyph_hp_fixed_5_7_2
 = {

56 5, 0, 
bm­_hp_fixed_5_7_2
,

59 cÚ¡ 
	gbm­_hp_fixed_5_7_3
 [5] = {

66 
di¥_fÚt_glyph
 
	gglyph_hp_fixed_5_7_3
 = {

68 5, 0, 
bm­_hp_fixed_5_7_3
,

71 cÚ¡ 
	gbm­_hp_fixed_5_7_4
 [5] = {

78 
di¥_fÚt_glyph
 
	gglyph_hp_fixed_5_7_4
 = {

80 5, 0, 
bm­_hp_fixed_5_7_4
,

83 cÚ¡ 
	gbm­_hp_fixed_5_7_5
 [5] = {

90 
di¥_fÚt_glyph
 
	gglyph_hp_fixed_5_7_5
 = {

92 5, 0, 
bm­_hp_fixed_5_7_5
,

95 cÚ¡ 
	gbm­_hp_fixed_5_7_6
 [5] = {

102 
di¥_fÚt_glyph
 
	gglyph_hp_fixed_5_7_6
 = {

104 5, 0, 
bm­_hp_fixed_5_7_6
,

107 cÚ¡ 
	gbm­_hp_fixed_5_7_7
 [5] = {

114 
di¥_fÚt_glyph
 
	gglyph_hp_fixed_5_7_7
 = {

116 5, 0, 
bm­_hp_fixed_5_7_7
,

119 cÚ¡ 
	gbm­_hp_fixed_5_7_8
 [5] = {

126 
di¥_fÚt_glyph
 
	gglyph_hp_fixed_5_7_8
 = {

128 5, 0, 
bm­_hp_fixed_5_7_8
,

131 cÚ¡ 
	gbm­_hp_fixed_5_7_9
 [5] = {

138 
di¥_fÚt_glyph
 
	gglyph_hp_fixed_5_7_9
 = {

140 5, 0, 
bm­_hp_fixed_5_7_9
,

143 cÚ¡ 
	gbm­_hp_fixed_5_7_10
 [5] = {

150 
di¥_fÚt_glyph
 
	gglyph_hp_fixed_5_7_10
 = {

152 5, 0, 
bm­_hp_fixed_5_7_10
,

155 cÚ¡ 
	gbm­_hp_fixed_5_7_11
 [5] = {

162 
di¥_fÚt_glyph
 
	gglyph_hp_fixed_5_7_11
 = {

164 5, 0, 
bm­_hp_fixed_5_7_11
,

167 cÚ¡ 
	gbm­_hp_fixed_5_7_12
 [5] = {

174 
di¥_fÚt_glyph
 
	gglyph_hp_fixed_5_7_12
 = {

176 5, 0, 
bm­_hp_fixed_5_7_12
,

179 cÚ¡ 
	gbm­_hp_fixed_5_7_13
 [5] = {

186 
di¥_fÚt_glyph
 
	gglyph_hp_fixed_5_7_13
 = {

188 5, 0, 
bm­_hp_fixed_5_7_13
,

191 cÚ¡ 
	gbm­_hp_fixed_5_7_14
 [5] = {

198 
di¥_fÚt_glyph
 
	gglyph_hp_fixed_5_7_14
 = {

200 5, 0, 
bm­_hp_fixed_5_7_14
,

203 cÚ¡ 
	gbm­_hp_fixed_5_7_15
 [5] = {

210 
di¥_fÚt_glyph
 
	gglyph_hp_fixed_5_7_15
 = {

212 5, 0, 
bm­_hp_fixed_5_7_15
,

215 cÚ¡ 
	gbm­_hp_fixed_5_7_16
 [5] = {

222 
di¥_fÚt_glyph
 
	gglyph_hp_fixed_5_7_16
 = {

224 5, 0, 
bm­_hp_fixed_5_7_16
,

227 cÚ¡ 
	gbm­_hp_fixed_5_7_17
 [5] = {

234 
di¥_fÚt_glyph
 
	gglyph_hp_fixed_5_7_17
 = {

236 5, 0, 
bm­_hp_fixed_5_7_17
,

239 cÚ¡ 
	gbm­_hp_fixed_5_7_18
 [5] = {

246 
di¥_fÚt_glyph
 
	gglyph_hp_fixed_5_7_18
 = {

248 5, 0, 
bm­_hp_fixed_5_7_18
,

251 cÚ¡ 
	gbm­_hp_fixed_5_7_19
 [5] = {

258 
di¥_fÚt_glyph
 
	gglyph_hp_fixed_5_7_19
 = {

260 5, 0, 
bm­_hp_fixed_5_7_19
,

263 cÚ¡ 
	gbm­_hp_fixed_5_7_20
 [5] = {

270 
di¥_fÚt_glyph
 
	gglyph_hp_fixed_5_7_20
 = {

272 5, 0, 
bm­_hp_fixed_5_7_20
,

275 cÚ¡ 
	gbm­_hp_fixed_5_7_21
 [5] = {

282 
di¥_fÚt_glyph
 
	gglyph_hp_fixed_5_7_21
 = {

284 5, 0, 
bm­_hp_fixed_5_7_21
,

287 cÚ¡ 
	gbm­_hp_fixed_5_7_22
 [5] = {

294 
di¥_fÚt_glyph
 
	gglyph_hp_fixed_5_7_22
 = {

296 5, 0, 
bm­_hp_fixed_5_7_22
,

299 cÚ¡ 
	gbm­_hp_fixed_5_7_23
 [5] = {

306 
di¥_fÚt_glyph
 
	gglyph_hp_fixed_5_7_23
 = {

308 5, 0, 
bm­_hp_fixed_5_7_23
,

311 cÚ¡ 
	gbm­_hp_fixed_5_7_24
 [5] = {

318 
di¥_fÚt_glyph
 
	gglyph_hp_fixed_5_7_24
 = {

320 5, 0, 
bm­_hp_fixed_5_7_24
,

323 cÚ¡ 
	gbm­_hp_fixed_5_7_25
 [5] = {

330 
di¥_fÚt_glyph
 
	gglyph_hp_fixed_5_7_25
 = {

332 5, 0, 
bm­_hp_fixed_5_7_25
,

335 cÚ¡ 
	gbm­_hp_fixed_5_7_26
 [5] = {

342 
di¥_fÚt_glyph
 
	gglyph_hp_fixed_5_7_26
 = {

344 5, 0, 
bm­_hp_fixed_5_7_26
,

347 cÚ¡ 
	gbm­_hp_fixed_5_7_27
 [5] = {

354 
di¥_fÚt_glyph
 
	gglyph_hp_fixed_5_7_27
 = {

356 5, 0, 
bm­_hp_fixed_5_7_27
,

359 cÚ¡ 
	gbm­_hp_fixed_5_7_28
 [5] = {

366 
di¥_fÚt_glyph
 
	gglyph_hp_fixed_5_7_28
 = {

368 5, 0, 
bm­_hp_fixed_5_7_28
,

371 cÚ¡ 
	gbm­_hp_fixed_5_7_29
 [5] = {

378 
di¥_fÚt_glyph
 
	gglyph_hp_fixed_5_7_29
 = {

380 5, 0, 
bm­_hp_fixed_5_7_29
,

383 cÚ¡ 
	gbm­_hp_fixed_5_7_30
 [5] = {

390 
di¥_fÚt_glyph
 
	gglyph_hp_fixed_5_7_30
 = {

392 5, 0, 
bm­_hp_fixed_5_7_30
,

395 cÚ¡ 
	gbm­_hp_fixed_5_7_31
 [5] = {

402 
di¥_fÚt_glyph
 
	gglyph_hp_fixed_5_7_31
 = {

404 5, 0, 
bm­_hp_fixed_5_7_31
,

407 cÚ¡ 
	gbm­_hp_fixed_5_7_32
 [5] = {

414 
di¥_fÚt_glyph
 
	gglyph_hp_fixed_5_7_32
 = {

416 5, 0, 
bm­_hp_fixed_5_7_32
,

419 cÚ¡ 
	gbm­_hp_fixed_5_7_33
 [5] = {

426 
di¥_fÚt_glyph
 
	gglyph_hp_fixed_5_7_33
 = {

428 5, 0, 
bm­_hp_fixed_5_7_33
,

431 cÚ¡ 
	gbm­_hp_fixed_5_7_34
 [5] = {

438 
di¥_fÚt_glyph
 
	gglyph_hp_fixed_5_7_34
 = {

440 5, 0, 
bm­_hp_fixed_5_7_34
,

443 cÚ¡ 
	gbm­_hp_fixed_5_7_35
 [5] = {

450 
di¥_fÚt_glyph
 
	gglyph_hp_fixed_5_7_35
 = {

452 5, 0, 
bm­_hp_fixed_5_7_35
,

455 cÚ¡ 
	gbm­_hp_fixed_5_7_36
 [5] = {

462 
di¥_fÚt_glyph
 
	gglyph_hp_fixed_5_7_36
 = {

464 5, 0, 
bm­_hp_fixed_5_7_36
,

467 cÚ¡ 
	gbm­_hp_fixed_5_7_37
 [5] = {

474 
di¥_fÚt_glyph
 
	gglyph_hp_fixed_5_7_37
 = {

476 5, 0, 
bm­_hp_fixed_5_7_37
,

479 cÚ¡ 
	gbm­_hp_fixed_5_7_38
 [5] = {

486 
di¥_fÚt_glyph
 
	gglyph_hp_fixed_5_7_38
 = {

488 5, 0, 
bm­_hp_fixed_5_7_38
,

491 cÚ¡ 
	gbm­_hp_fixed_5_7_39
 [5] = {

498 
di¥_fÚt_glyph
 
	gglyph_hp_fixed_5_7_39
 = {

500 5, 0, 
bm­_hp_fixed_5_7_39
,

503 cÚ¡ 
	gbm­_hp_fixed_5_7_40
 [5] = {

510 
di¥_fÚt_glyph
 
	gglyph_hp_fixed_5_7_40
 = {

512 5, 0, 
bm­_hp_fixed_5_7_40
,

515 cÚ¡ 
	gbm­_hp_fixed_5_7_41
 [5] = {

522 
di¥_fÚt_glyph
 
	gglyph_hp_fixed_5_7_41
 = {

524 5, 0, 
bm­_hp_fixed_5_7_41
,

527 cÚ¡ 
	gbm­_hp_fixed_5_7_42
 [5] = {

534 
di¥_fÚt_glyph
 
	gglyph_hp_fixed_5_7_42
 = {

536 5, 0, 
bm­_hp_fixed_5_7_42
,

539 cÚ¡ 
	gbm­_hp_fixed_5_7_43
 [5] = {

546 
di¥_fÚt_glyph
 
	gglyph_hp_fixed_5_7_43
 = {

548 5, 0, 
bm­_hp_fixed_5_7_43
,

551 cÚ¡ 
	gbm­_hp_fixed_5_7_44
 [5] = {

558 
di¥_fÚt_glyph
 
	gglyph_hp_fixed_5_7_44
 = {

560 5, 0, 
bm­_hp_fixed_5_7_44
,

563 cÚ¡ 
	gbm­_hp_fixed_5_7_45
 [5] = {

570 
di¥_fÚt_glyph
 
	gglyph_hp_fixed_5_7_45
 = {

572 5, 0, 
bm­_hp_fixed_5_7_45
,

575 cÚ¡ 
	gbm­_hp_fixed_5_7_46
 [5] = {

582 
di¥_fÚt_glyph
 
	gglyph_hp_fixed_5_7_46
 = {

584 5, 0, 
bm­_hp_fixed_5_7_46
,

587 cÚ¡ 
	gbm­_hp_fixed_5_7_47
 [5] = {

594 
di¥_fÚt_glyph
 
	gglyph_hp_fixed_5_7_47
 = {

596 5, 0, 
bm­_hp_fixed_5_7_47
,

599 cÚ¡ 
	gbm­_hp_fixed_5_7_48
 [5] = {

606 
di¥_fÚt_glyph
 
	gglyph_hp_fixed_5_7_48
 = {

608 5, 0, 
bm­_hp_fixed_5_7_48
,

611 cÚ¡ 
	gbm­_hp_fixed_5_7_49
 [5] = {

618 
di¥_fÚt_glyph
 
	gglyph_hp_fixed_5_7_49
 = {

620 5, 0, 
bm­_hp_fixed_5_7_49
,

623 cÚ¡ 
	gbm­_hp_fixed_5_7_50
 [5] = {

630 
di¥_fÚt_glyph
 
	gglyph_hp_fixed_5_7_50
 = {

632 5, 0, 
bm­_hp_fixed_5_7_50
,

635 cÚ¡ 
	gbm­_hp_fixed_5_7_51
 [5] = {

642 
di¥_fÚt_glyph
 
	gglyph_hp_fixed_5_7_51
 = {

644 5, 0, 
bm­_hp_fixed_5_7_51
,

647 cÚ¡ 
	gbm­_hp_fixed_5_7_52
 [5] = {

654 
di¥_fÚt_glyph
 
	gglyph_hp_fixed_5_7_52
 = {

656 5, 0, 
bm­_hp_fixed_5_7_52
,

659 cÚ¡ 
	gbm­_hp_fixed_5_7_53
 [5] = {

666 
di¥_fÚt_glyph
 
	gglyph_hp_fixed_5_7_53
 = {

668 5, 0, 
bm­_hp_fixed_5_7_53
,

671 cÚ¡ 
	gbm­_hp_fixed_5_7_54
 [5] = {

678 
di¥_fÚt_glyph
 
	gglyph_hp_fixed_5_7_54
 = {

680 5, 0, 
bm­_hp_fixed_5_7_54
,

683 cÚ¡ 
	gbm­_hp_fixed_5_7_55
 [5] = {

690 
di¥_fÚt_glyph
 
	gglyph_hp_fixed_5_7_55
 = {

692 5, 0, 
bm­_hp_fixed_5_7_55
,

695 cÚ¡ 
	gbm­_hp_fixed_5_7_56
 [5] = {

702 
di¥_fÚt_glyph
 
	gglyph_hp_fixed_5_7_56
 = {

704 5, 0, 
bm­_hp_fixed_5_7_56
,

707 cÚ¡ 
	gbm­_hp_fixed_5_7_57
 [5] = {

714 
di¥_fÚt_glyph
 
	gglyph_hp_fixed_5_7_57
 = {

716 5, 0, 
bm­_hp_fixed_5_7_57
,

719 cÚ¡ 
	gbm­_hp_fixed_5_7_58
 [5] = {

726 
di¥_fÚt_glyph
 
	gglyph_hp_fixed_5_7_58
 = {

728 5, 0, 
bm­_hp_fixed_5_7_58
,

731 cÚ¡ 
	gbm­_hp_fixed_5_7_59
 [5] = {

738 
di¥_fÚt_glyph
 
	gglyph_hp_fixed_5_7_59
 = {

740 5, 0, 
bm­_hp_fixed_5_7_59
,

743 cÚ¡ 
	gbm­_hp_fixed_5_7_60
 [5] = {

750 
di¥_fÚt_glyph
 
	gglyph_hp_fixed_5_7_60
 = {

752 5, 0, 
bm­_hp_fixed_5_7_60
,

755 cÚ¡ 
	gbm­_hp_fixed_5_7_61
 [5] = {

762 
di¥_fÚt_glyph
 
	gglyph_hp_fixed_5_7_61
 = {

764 5, 0, 
bm­_hp_fixed_5_7_61
,

767 cÚ¡ 
	gbm­_hp_fixed_5_7_62
 [5] = {

774 
di¥_fÚt_glyph
 
	gglyph_hp_fixed_5_7_62
 = {

776 5, 0, 
bm­_hp_fixed_5_7_62
,

779 cÚ¡ 
	gbm­_hp_fixed_5_7_63
 [5] = {

786 
di¥_fÚt_glyph
 
	gglyph_hp_fixed_5_7_63
 = {

788 5, 0, 
bm­_hp_fixed_5_7_63
,

791 cÚ¡ 
	gbm­_hp_fixed_5_7_64
 [5] = {

798 
di¥_fÚt_glyph
 
	gglyph_hp_fixed_5_7_64
 = {

800 5, 0, 
bm­_hp_fixed_5_7_64
,

803 cÚ¡ 
	gbm­_hp_fixed_5_7_65
 [5] = {

810 
di¥_fÚt_glyph
 
	gglyph_hp_fixed_5_7_65
 = {

812 5, 0, 
bm­_hp_fixed_5_7_65
,

815 cÚ¡ 
	gbm­_hp_fixed_5_7_66
 [5] = {

822 
di¥_fÚt_glyph
 
	gglyph_hp_fixed_5_7_66
 = {

824 5, 0, 
bm­_hp_fixed_5_7_66
,

827 cÚ¡ 
	gbm­_hp_fixed_5_7_67
 [5] = {

834 
di¥_fÚt_glyph
 
	gglyph_hp_fixed_5_7_67
 = {

836 5, 0, 
bm­_hp_fixed_5_7_67
,

839 cÚ¡ 
	gbm­_hp_fixed_5_7_68
 [5] = {

846 
di¥_fÚt_glyph
 
	gglyph_hp_fixed_5_7_68
 = {

848 5, 0, 
bm­_hp_fixed_5_7_68
,

851 cÚ¡ 
	gbm­_hp_fixed_5_7_69
 [5] = {

858 
di¥_fÚt_glyph
 
	gglyph_hp_fixed_5_7_69
 = {

860 5, 0, 
bm­_hp_fixed_5_7_69
,

863 cÚ¡ 
	gbm­_hp_fixed_5_7_70
 [5] = {

870 
di¥_fÚt_glyph
 
	gglyph_hp_fixed_5_7_70
 = {

872 5, 0, 
bm­_hp_fixed_5_7_70
,

875 cÚ¡ 
	gbm­_hp_fixed_5_7_71
 [5] = {

882 
di¥_fÚt_glyph
 
	gglyph_hp_fixed_5_7_71
 = {

884 5, 0, 
bm­_hp_fixed_5_7_71
,

887 cÚ¡ 
	gbm­_hp_fixed_5_7_72
 [5] = {

894 
di¥_fÚt_glyph
 
	gglyph_hp_fixed_5_7_72
 = {

896 5, 0, 
bm­_hp_fixed_5_7_72
,

899 cÚ¡ 
	gbm­_hp_fixed_5_7_73
 [5] = {

906 
di¥_fÚt_glyph
 
	gglyph_hp_fixed_5_7_73
 = {

908 5, 0, 
bm­_hp_fixed_5_7_73
,

911 cÚ¡ 
	gbm­_hp_fixed_5_7_74
 [5] = {

918 
di¥_fÚt_glyph
 
	gglyph_hp_fixed_5_7_74
 = {

920 5, 0, 
bm­_hp_fixed_5_7_74
,

923 cÚ¡ 
	gbm­_hp_fixed_5_7_75
 [5] = {

930 
di¥_fÚt_glyph
 
	gglyph_hp_fixed_5_7_75
 = {

932 5, 0, 
bm­_hp_fixed_5_7_75
,

935 cÚ¡ 
	gbm­_hp_fixed_5_7_76
 [5] = {

942 
di¥_fÚt_glyph
 
	gglyph_hp_fixed_5_7_76
 = {

944 5, 0, 
bm­_hp_fixed_5_7_76
,

947 cÚ¡ 
	gbm­_hp_fixed_5_7_77
 [5] = {

954 
di¥_fÚt_glyph
 
	gglyph_hp_fixed_5_7_77
 = {

956 5, 0, 
bm­_hp_fixed_5_7_77
,

959 cÚ¡ 
	gbm­_hp_fixed_5_7_78
 [5] = {

966 
di¥_fÚt_glyph
 
	gglyph_hp_fixed_5_7_78
 = {

968 5, 0, 
bm­_hp_fixed_5_7_78
,

971 cÚ¡ 
	gbm­_hp_fixed_5_7_79
 [5] = {

978 
di¥_fÚt_glyph
 
	gglyph_hp_fixed_5_7_79
 = {

980 5, 0, 
bm­_hp_fixed_5_7_79
,

983 cÚ¡ 
	gbm­_hp_fixed_5_7_80
 [5] = {

990 
di¥_fÚt_glyph
 
	gglyph_hp_fixed_5_7_80
 = {

992 5, 0, 
bm­_hp_fixed_5_7_80
,

995 cÚ¡ 
	gbm­_hp_fixed_5_7_81
 [5] = {

1002 
di¥_fÚt_glyph
 
	gglyph_hp_fixed_5_7_81
 = {

1004 5, 0, 
bm­_hp_fixed_5_7_81
,

1007 cÚ¡ 
	gbm­_hp_fixed_5_7_82
 [5] = {

1014 
di¥_fÚt_glyph
 
	gglyph_hp_fixed_5_7_82
 = {

1016 5, 0, 
bm­_hp_fixed_5_7_82
,

1019 cÚ¡ 
	gbm­_hp_fixed_5_7_83
 [5] = {

1026 
di¥_fÚt_glyph
 
	gglyph_hp_fixed_5_7_83
 = {

1028 5, 0, 
bm­_hp_fixed_5_7_83
,

1031 cÚ¡ 
	gbm­_hp_fixed_5_7_84
 [5] = {

1038 
di¥_fÚt_glyph
 
	gglyph_hp_fixed_5_7_84
 = {

1040 5, 0, 
bm­_hp_fixed_5_7_84
,

1043 cÚ¡ 
	gbm­_hp_fixed_5_7_85
 [5] = {

1050 
di¥_fÚt_glyph
 
	gglyph_hp_fixed_5_7_85
 = {

1052 5, 0, 
bm­_hp_fixed_5_7_85
,

1055 cÚ¡ 
	gbm­_hp_fixed_5_7_86
 [5] = {

1062 
di¥_fÚt_glyph
 
	gglyph_hp_fixed_5_7_86
 = {

1064 5, 0, 
bm­_hp_fixed_5_7_86
,

1067 cÚ¡ 
	gbm­_hp_fixed_5_7_87
 [5] = {

1074 
di¥_fÚt_glyph
 
	gglyph_hp_fixed_5_7_87
 = {

1076 5, 0, 
bm­_hp_fixed_5_7_87
,

1079 cÚ¡ 
	gbm­_hp_fixed_5_7_88
 [5] = {

1086 
di¥_fÚt_glyph
 
	gglyph_hp_fixed_5_7_88
 = {

1088 5, 0, 
bm­_hp_fixed_5_7_88
,

1091 cÚ¡ 
	gbm­_hp_fixed_5_7_89
 [5] = {

1098 
di¥_fÚt_glyph
 
	gglyph_hp_fixed_5_7_89
 = {

1100 5, 0, 
bm­_hp_fixed_5_7_89
,

1103 cÚ¡ 
	gbm­_hp_fixed_5_7_90
 [5] = {

1110 
di¥_fÚt_glyph
 
	gglyph_hp_fixed_5_7_90
 = {

1112 5, 0, 
bm­_hp_fixed_5_7_90
,

1115 cÚ¡ 
	gbm­_hp_fixed_5_7_91
 [5] = {

1122 
di¥_fÚt_glyph
 
	gglyph_hp_fixed_5_7_91
 = {

1124 5, 0, 
bm­_hp_fixed_5_7_91
,

1127 cÚ¡ 
	gbm­_hp_fixed_5_7_92
 [5] = {

1134 
di¥_fÚt_glyph
 
	gglyph_hp_fixed_5_7_92
 = {

1136 5, 0, 
bm­_hp_fixed_5_7_92
,

1139 cÚ¡ 
	gbm­_hp_fixed_5_7_93
 [5] = {

1146 
di¥_fÚt_glyph
 
	gglyph_hp_fixed_5_7_93
 = {

1148 5, 0, 
bm­_hp_fixed_5_7_93
,

1151 cÚ¡ 
	gbm­_hp_fixed_5_7_94
 [5] = {

1158 
di¥_fÚt_glyph
 
	gglyph_hp_fixed_5_7_94
 = {

1160 5, 0, 
bm­_hp_fixed_5_7_94
,

1163 cÚ¡ 
	gbm­_hp_fixed_5_7_95
 [5] = {

1170 
di¥_fÚt_glyph
 
	gglyph_hp_fixed_5_7_95
 = {

1172 5, 0, 
bm­_hp_fixed_5_7_95
,

1175 cÚ¡ 
	gbm­_hp_fixed_5_7_96
 [5] = {

1182 
di¥_fÚt_glyph
 
	gglyph_hp_fixed_5_7_96
 = {

1184 5, 0, 
bm­_hp_fixed_5_7_96
,

1187 cÚ¡ 
	gbm­_hp_fixed_5_7_97
 [5] = {

1194 
di¥_fÚt_glyph
 
	gglyph_hp_fixed_5_7_97
 = {

1196 5, 0, 
bm­_hp_fixed_5_7_97
,

1199 cÚ¡ 
	gbm­_hp_fixed_5_7_98
 [5] = {

1206 
di¥_fÚt_glyph
 
	gglyph_hp_fixed_5_7_98
 = {

1208 5, 0, 
bm­_hp_fixed_5_7_98
,

1211 cÚ¡ 
	gbm­_hp_fixed_5_7_99
 [5] = {

1218 
di¥_fÚt_glyph
 
	gglyph_hp_fixed_5_7_99
 = {

1220 5, 0, 
bm­_hp_fixed_5_7_99
,

1223 cÚ¡ 
	gbm­_hp_fixed_5_7_100
 [5] = {

1230 
di¥_fÚt_glyph
 
	gglyph_hp_fixed_5_7_100
 = {

1232 5, 0, 
bm­_hp_fixed_5_7_100
,

1235 cÚ¡ 
	gbm­_hp_fixed_5_7_101
 [5] = {

1242 
di¥_fÚt_glyph
 
	gglyph_hp_fixed_5_7_101
 = {

1244 5, 0, 
bm­_hp_fixed_5_7_101
,

1247 cÚ¡ 
	gbm­_hp_fixed_5_7_102
 [5] = {

1254 
di¥_fÚt_glyph
 
	gglyph_hp_fixed_5_7_102
 = {

1256 5, 0, 
bm­_hp_fixed_5_7_102
,

1259 cÚ¡ 
	gbm­_hp_fixed_5_7_103
 [5] = {

1266 
di¥_fÚt_glyph
 
	gglyph_hp_fixed_5_7_103
 = {

1268 5, 0, 
bm­_hp_fixed_5_7_103
,

1271 cÚ¡ 
	gbm­_hp_fixed_5_7_104
 [5] = {

1278 
di¥_fÚt_glyph
 
	gglyph_hp_fixed_5_7_104
 = {

1280 5, 0, 
bm­_hp_fixed_5_7_104
,

1283 cÚ¡ 
	gbm­_hp_fixed_5_7_105
 [5] = {

1290 
di¥_fÚt_glyph
 
	gglyph_hp_fixed_5_7_105
 = {

1292 5, 0, 
bm­_hp_fixed_5_7_105
,

1295 cÚ¡ 
	gbm­_hp_fixed_5_7_106
 [5] = {

1302 
di¥_fÚt_glyph
 
	gglyph_hp_fixed_5_7_106
 = {

1304 5, 0, 
bm­_hp_fixed_5_7_106
,

1307 cÚ¡ 
	gbm­_hp_fixed_5_7_107
 [5] = {

1314 
di¥_fÚt_glyph
 
	gglyph_hp_fixed_5_7_107
 = {

1316 5, 0, 
bm­_hp_fixed_5_7_107
,

1319 cÚ¡ 
	gbm­_hp_fixed_5_7_108
 [5] = {

1326 
di¥_fÚt_glyph
 
	gglyph_hp_fixed_5_7_108
 = {

1328 5, 0, 
bm­_hp_fixed_5_7_108
,

1331 cÚ¡ 
	gbm­_hp_fixed_5_7_109
 [5] = {

1338 
di¥_fÚt_glyph
 
	gglyph_hp_fixed_5_7_109
 = {

1340 5, 0, 
bm­_hp_fixed_5_7_109
,

1343 cÚ¡ 
	gbm­_hp_fixed_5_7_110
 [5] = {

1350 
di¥_fÚt_glyph
 
	gglyph_hp_fixed_5_7_110
 = {

1352 5, 0, 
bm­_hp_fixed_5_7_110
,

1355 cÚ¡ 
	gbm­_hp_fixed_5_7_111
 [5] = {

1362 
di¥_fÚt_glyph
 
	gglyph_hp_fixed_5_7_111
 = {

1364 5, 0, 
bm­_hp_fixed_5_7_111
,

1367 cÚ¡ 
	gbm­_hp_fixed_5_7_112
 [5] = {

1374 
di¥_fÚt_glyph
 
	gglyph_hp_fixed_5_7_112
 = {

1376 5, 0, 
bm­_hp_fixed_5_7_112
,

1379 cÚ¡ 
	gbm­_hp_fixed_5_7_113
 [5] = {

1386 
di¥_fÚt_glyph
 
	gglyph_hp_fixed_5_7_113
 = {

1388 5, 0, 
bm­_hp_fixed_5_7_113
,

1391 cÚ¡ 
	gbm­_hp_fixed_5_7_114
 [5] = {

1398 
di¥_fÚt_glyph
 
	gglyph_hp_fixed_5_7_114
 = {

1400 5, 0, 
bm­_hp_fixed_5_7_114
,

1403 cÚ¡ 
	gbm­_hp_fixed_5_7_115
 [5] = {

1410 
di¥_fÚt_glyph
 
	gglyph_hp_fixed_5_7_115
 = {

1412 5, 0, 
bm­_hp_fixed_5_7_115
,

1415 cÚ¡ 
	gbm­_hp_fixed_5_7_116
 [5] = {

1422 
di¥_fÚt_glyph
 
	gglyph_hp_fixed_5_7_116
 = {

1424 5, 0, 
bm­_hp_fixed_5_7_116
,

1427 cÚ¡ 
	gbm­_hp_fixed_5_7_117
 [5] = {

1434 
di¥_fÚt_glyph
 
	gglyph_hp_fixed_5_7_117
 = {

1436 5, 0, 
bm­_hp_fixed_5_7_117
,

1439 cÚ¡ 
	gbm­_hp_fixed_5_7_118
 [5] = {

1446 
di¥_fÚt_glyph
 
	gglyph_hp_fixed_5_7_118
 = {

1448 5, 0, 
bm­_hp_fixed_5_7_118
,

1451 cÚ¡ 
	gbm­_hp_fixed_5_7_119
 [5] = {

1458 
di¥_fÚt_glyph
 
	gglyph_hp_fixed_5_7_119
 = {

1460 5, 0, 
bm­_hp_fixed_5_7_119
,

1463 cÚ¡ 
	gbm­_hp_fixed_5_7_120
 [5] = {

1470 
di¥_fÚt_glyph
 
	gglyph_hp_fixed_5_7_120
 = {

1472 5, 0, 
bm­_hp_fixed_5_7_120
,

1475 cÚ¡ 
	gbm­_hp_fixed_5_7_121
 [5] = {

1482 
di¥_fÚt_glyph
 
	gglyph_hp_fixed_5_7_121
 = {

1484 5, 0, 
bm­_hp_fixed_5_7_121
,

1487 cÚ¡ 
	gbm­_hp_fixed_5_7_122
 [5] = {

1494 
di¥_fÚt_glyph
 
	gglyph_hp_fixed_5_7_122
 = {

1496 5, 0, 
bm­_hp_fixed_5_7_122
,

1499 cÚ¡ 
	gbm­_hp_fixed_5_7_123
 [5] = {

1506 
di¥_fÚt_glyph
 
	gglyph_hp_fixed_5_7_123
 = {

1508 5, 0, 
bm­_hp_fixed_5_7_123
,

1511 cÚ¡ 
	gbm­_hp_fixed_5_7_124
 [5] = {

1518 
di¥_fÚt_glyph
 
	gglyph_hp_fixed_5_7_124
 = {

1520 5, 0, 
bm­_hp_fixed_5_7_124
,

1523 cÚ¡ 
	gbm­_hp_fixed_5_7_125
 [5] = {

1530 
di¥_fÚt_glyph
 
	gglyph_hp_fixed_5_7_125
 = {

1532 5, 0, 
bm­_hp_fixed_5_7_125
,

1535 cÚ¡ 
	gbm­_hp_fixed_5_7_126
 [5] = {

1542 
di¥_fÚt_glyph
 
	gglyph_hp_fixed_5_7_126
 = {

1544 5, 0, 
bm­_hp_fixed_5_7_126
,

1547 cÚ¡ 
	gbm­_hp_fixed_5_7_127
 [5] = {

1554 
di¥_fÚt_glyph
 
	gglyph_hp_fixed_5_7_127
 = {

1556 5, 0, 
bm­_hp_fixed_5_7_127
,

1559 cÚ¡ 
di¥_fÚt_ba£
 
	gfÚt_hcms29xx_ba£
 = {

1564 {&
glyph_hp_fixed_5_7_0
,

1565 &
glyph_hp_fixed_5_7_1
,

1566 &
glyph_hp_fixed_5_7_2
,

1567 &
glyph_hp_fixed_5_7_3
,

1568 &
glyph_hp_fixed_5_7_4
,

1569 &
glyph_hp_fixed_5_7_5
,

1570 &
glyph_hp_fixed_5_7_6
,

1571 &
glyph_hp_fixed_5_7_7
,

1572 &
glyph_hp_fixed_5_7_8
,

1573 &
glyph_hp_fixed_5_7_9
,

1574 &
glyph_hp_fixed_5_7_10
,

1575 &
glyph_hp_fixed_5_7_11
,

1576 &
glyph_hp_fixed_5_7_12
,

1577 &
glyph_hp_fixed_5_7_13
,

1578 &
glyph_hp_fixed_5_7_14
,

1579 &
glyph_hp_fixed_5_7_15
,

1580 &
glyph_hp_fixed_5_7_16
,

1581 &
glyph_hp_fixed_5_7_17
,

1582 &
glyph_hp_fixed_5_7_18
,

1583 &
glyph_hp_fixed_5_7_19
,

1584 &
glyph_hp_fixed_5_7_20
,

1585 &
glyph_hp_fixed_5_7_21
,

1586 &
glyph_hp_fixed_5_7_22
,

1587 &
glyph_hp_fixed_5_7_23
,

1588 &
glyph_hp_fixed_5_7_24
,

1589 &
glyph_hp_fixed_5_7_25
,

1590 &
glyph_hp_fixed_5_7_26
,

1591 &
glyph_hp_fixed_5_7_27
,

1592 &
glyph_hp_fixed_5_7_28
,

1593 &
glyph_hp_fixed_5_7_29
,

1594 &
glyph_hp_fixed_5_7_30
,

1595 &
glyph_hp_fixed_5_7_31
,

1596 &
glyph_hp_fixed_5_7_32
,

1597 &
glyph_hp_fixed_5_7_33
,

1598 &
glyph_hp_fixed_5_7_34
,

1599 &
glyph_hp_fixed_5_7_35
,

1600 &
glyph_hp_fixed_5_7_36
,

1601 &
glyph_hp_fixed_5_7_37
,

1602 &
glyph_hp_fixed_5_7_38
,

1603 &
glyph_hp_fixed_5_7_39
,

1604 &
glyph_hp_fixed_5_7_40
,

1605 &
glyph_hp_fixed_5_7_41
,

1606 &
glyph_hp_fixed_5_7_42
,

1607 &
glyph_hp_fixed_5_7_43
,

1608 &
glyph_hp_fixed_5_7_44
,

1609 &
glyph_hp_fixed_5_7_45
,

1610 &
glyph_hp_fixed_5_7_46
,

1611 &
glyph_hp_fixed_5_7_47
,

1612 &
glyph_hp_fixed_5_7_48
,

1613 &
glyph_hp_fixed_5_7_49
,

1614 &
glyph_hp_fixed_5_7_50
,

1615 &
glyph_hp_fixed_5_7_51
,

1616 &
glyph_hp_fixed_5_7_52
,

1617 &
glyph_hp_fixed_5_7_53
,

1618 &
glyph_hp_fixed_5_7_54
,

1619 &
glyph_hp_fixed_5_7_55
,

1620 &
glyph_hp_fixed_5_7_56
,

1621 &
glyph_hp_fixed_5_7_57
,

1622 &
glyph_hp_fixed_5_7_58
,

1623 &
glyph_hp_fixed_5_7_59
,

1624 &
glyph_hp_fixed_5_7_60
,

1625 &
glyph_hp_fixed_5_7_61
,

1626 &
glyph_hp_fixed_5_7_62
,

1627 &
glyph_hp_fixed_5_7_63
,

1628 &
glyph_hp_fixed_5_7_64
,

1629 &
glyph_hp_fixed_5_7_65
,

1630 &
glyph_hp_fixed_5_7_66
,

1631 &
glyph_hp_fixed_5_7_67
,

1632 &
glyph_hp_fixed_5_7_68
,

1633 &
glyph_hp_fixed_5_7_69
,

1634 &
glyph_hp_fixed_5_7_70
,

1635 &
glyph_hp_fixed_5_7_71
,

1636 &
glyph_hp_fixed_5_7_72
,

1637 &
glyph_hp_fixed_5_7_73
,

1638 &
glyph_hp_fixed_5_7_74
,

1639 &
glyph_hp_fixed_5_7_75
,

1640 &
glyph_hp_fixed_5_7_76
,

1641 &
glyph_hp_fixed_5_7_77
,

1642 &
glyph_hp_fixed_5_7_78
,

1643 &
glyph_hp_fixed_5_7_79
,

1644 &
glyph_hp_fixed_5_7_80
,

1645 &
glyph_hp_fixed_5_7_81
,

1646 &
glyph_hp_fixed_5_7_82
,

1647 &
glyph_hp_fixed_5_7_83
,

1648 &
glyph_hp_fixed_5_7_84
,

1649 &
glyph_hp_fixed_5_7_85
,

1650 &
glyph_hp_fixed_5_7_86
,

1651 &
glyph_hp_fixed_5_7_87
,

1652 &
glyph_hp_fixed_5_7_88
,

1653 &
glyph_hp_fixed_5_7_89
,

1654 &
glyph_hp_fixed_5_7_90
,

1655 &
glyph_hp_fixed_5_7_91
,

1656 &
glyph_hp_fixed_5_7_92
,

1657 &
glyph_hp_fixed_5_7_93
,

1658 &
glyph_hp_fixed_5_7_94
,

1659 &
glyph_hp_fixed_5_7_95
,

1660 &
glyph_hp_fixed_5_7_96
,

1661 &
glyph_hp_fixed_5_7_97
,

1662 &
glyph_hp_fixed_5_7_98
,

1663 &
glyph_hp_fixed_5_7_99
,

1664 &
glyph_hp_fixed_5_7_100
,

1665 &
glyph_hp_fixed_5_7_101
,

1666 &
glyph_hp_fixed_5_7_102
,

1667 &
glyph_hp_fixed_5_7_103
,

1668 &
glyph_hp_fixed_5_7_104
,

1669 &
glyph_hp_fixed_5_7_105
,

1670 &
glyph_hp_fixed_5_7_106
,

1671 &
glyph_hp_fixed_5_7_107
,

1672 &
glyph_hp_fixed_5_7_108
,

1673 &
glyph_hp_fixed_5_7_109
,

1674 &
glyph_hp_fixed_5_7_110
,

1675 &
glyph_hp_fixed_5_7_111
,

1676 &
glyph_hp_fixed_5_7_112
,

1677 &
glyph_hp_fixed_5_7_113
,

1678 &
glyph_hp_fixed_5_7_114
,

1679 &
glyph_hp_fixed_5_7_115
,

1680 &
glyph_hp_fixed_5_7_116
,

1681 &
glyph_hp_fixed_5_7_117
,

1682 &
glyph_hp_fixed_5_7_118
,

1683 &
glyph_hp_fixed_5_7_119
,

1684 &
glyph_hp_fixed_5_7_120
,

1685 &
glyph_hp_fixed_5_7_121
,

1686 &
glyph_hp_fixed_5_7_122
,

1687 &
glyph_hp_fixed_5_7_123
,

1688 &
glyph_hp_fixed_5_7_124
,

1689 &
glyph_hp_fixed_5_7_125
,

1690 &
glyph_hp_fixed_5_7_126
,

1691 &
glyph_hp_fixed_5_7_127
,

1692 
NULL
,

1693 
NULL
,

1694 
NULL
,

1695 
NULL
,

1696 
NULL
,

1697 
NULL
,

1698 
NULL
,

1699 
NULL
,

1700 
NULL
,

1701 
NULL
,

1702 
NULL
,

1703 
NULL
,

1704 
NULL
,

1705 
NULL
,

1706 
NULL
,

1707 
NULL
,

1708 
NULL
,

1709 
NULL
,

1710 
NULL
,

1711 
NULL
,

1712 
NULL
,

1713 
NULL
,

1714 
NULL
,

1715 
NULL
,

1716 
NULL
,

1717 
NULL
,

1718 
NULL
,

1719 
NULL
,

1720 
NULL
,

1721 
NULL
,

1722 
NULL
,

1723 
NULL
,

1724 
NULL
,

1725 
NULL
,

1726 
NULL
,

1727 
NULL
,

1728 
NULL
,

1729 
NULL
,

1730 
NULL
,

1731 
NULL
,

1732 
NULL
,

1733 
NULL
,

1734 
NULL
,

1735 
NULL
,

1736 
NULL
,

1737 
NULL
,

1738 
NULL
,

1739 
NULL
,

1740 
NULL
,

1741 
NULL
,

1742 
NULL
,

1743 
NULL
,

1744 
NULL
,

1745 
NULL
,

1746 
NULL
,

1747 
NULL
,

1748 
NULL
,

1749 
NULL
,

1750 
NULL
,

1751 
NULL
,

1752 
NULL
,

1753 
NULL
,

1754 
NULL
,

1755 
NULL
,

1756 
NULL
,

1757 
NULL
,

1758 
NULL
,

1759 
NULL
,

1760 
NULL
,

1761 
NULL
,

1762 
NULL
,

1763 
NULL
,

1764 
NULL
,

1765 
NULL
,

1766 
NULL
,

1767 
NULL
,

1768 
NULL
,

1769 
NULL
,

1770 
NULL
,

1771 
NULL
,

1772 
NULL
,

1773 
NULL
,

1774 
NULL
,

1775 
NULL
,

1776 
NULL
,

1777 
NULL
,

1778 
NULL
,

1779 
NULL
,

1780 
NULL
,

1781 
NULL
,

1782 
NULL
,

1783 
NULL
,

1784 
NULL
,

1785 
NULL
,

1786 
NULL
,

1787 
NULL
,

1788 
NULL
,

1789 
NULL
,

1790 
NULL
,

1791 
NULL
,

1792 
NULL
,

1793 
NULL
,

1794 
NULL
,

1795 
NULL
,

1796 
NULL
,

1797 
NULL
,

1798 
NULL
,

1799 
NULL
,

1800 
NULL
,

1801 
NULL
,

1802 
NULL
,

1803 
NULL
,

1804 
NULL
,

1805 
NULL
,

1806 
NULL
,

1807 
NULL
,

1808 
NULL
,

1809 
NULL
,

1810 
NULL
,

1811 
NULL
,

1812 
NULL
,

1813 
NULL
,

1814 
NULL
,

1815 
NULL
,

1816 
NULL
,

1817 
NULL
,

1818 
NULL
,

1819 
NULL
}

	@src/libchip/display/font_hcms29xx.h

20 #iâdeà
FONT_HCMS29XX_H


21 
	#FONT_HCMS29XX_H


	)

23 
	~"di¥_fÚts.h
"

26 #ifdeà
__ýlu¥lus


30 
di¥_fÚt_ba£
 
fÚt_hcms29xx_ba£
;

32 #ifdeà
__ýlu¥lus


	@src/libchip/flash/am29lv160.c

12 
	~<¡dio.h
>

13 
	~<ºo.h
>

14 
	~<¡rg.h
>

16 
	~<¹ems.h
>

18 
	~<libch/am29lv160.h
>

20 #iâdeà
AM26LV160_ERROR_TRACE


21 
	#AM26LV160_ERROR_TRACE
 (0)

	)

27 cÚ¡ 
¹ems_fdisk_£gmt_desc
 
	g¹ems_am29lv160t_£gmts
[4] =

30 .
couÁ
 = 31,

31 .
	g£gmt
 = 0,

32 .
	goff£t
 = 0x00000000,

33 .
	gsize
 = 
RTEMS_FDISK_KBYTES
 (64)

36 .
	gcouÁ
 = 1,

37 .
	g£gmt
 = 31,

38 .
	goff£t
 = 0x001f0000,

39 .
	gsize
 = 
RTEMS_FDISK_KBYTES
 (32)

42 .
	gcouÁ
 = 2,

43 .
	g£gmt
 = 32,

44 .
	goff£t
 = 0x001f8000,

45 .
	gsize
 = 
RTEMS_FDISK_KBYTES
 (8)

48 .
	gcouÁ
 = 1,

49 .
	g£gmt
 = 34,

50 .
	goff£t
 = 0x001fc000,

51 .
	gsize
 = 
RTEMS_FDISK_KBYTES
 (16)

58 cÚ¡ 
¹ems_fdisk_£gmt_desc
 
	g¹ems_am29lv160b_£gmts
[] =

61 .
couÁ
 = 1,

62 .
	g£gmt
 = 0,

63 .
	goff£t
 = 0x00000000,

64 .
	gsize
 = 
RTEMS_FDISK_KBYTES
 (16)

67 . 
	gcouÁ
 = 2,

68 .
	g£gmt
 = 1,

69 .
	goff£t
 = 0x00004000,

70 .
	gsize
 = 
RTEMS_FDISK_KBYTES
 (8)

73 .
	gcouÁ
 = 1,

74 .
	g£gmt
 = 3,

75 .
	goff£t
 = 0x00008000,

76 .
	gsize
 = 
RTEMS_FDISK_KBYTES
 (32)

79 .
	gcouÁ
 = 31,

80 .
	g£gmt
 = 4,

81 .
	goff£t
 = 0x00010000,

82 .
	gsize
 = 
RTEMS_FDISK_KBYTES
 (64)

87 
	$¹ems_am29lv160_bÏnk
 (cÚ¡ 
¹ems_fdisk_£gmt_desc
* 
sd
,

88 
ut32_t
 
deviû
,

89 
ut32_t
 
£gmt
,

90 
ut32_t
 
off£t
,

91 
ut32_t
 
size
)

93 cÚ¡ 
¹ems_am29lv160_cÚfig
* 
ac
 = &
¹ems_am29lv160_cÚfigu¿tiÚ
[
deviû
];

94 vÞ©
ut8_t
* 
£g_8
 = 
ac
->
ba£
;

95 vÞ©
ut32_t
* 
£g_32
;

96 
ut32_t
 
couÁ
;

98 
off£t
 +ð
sd
->off£+ (
£gmt
 - sd->£gmtè* sd->
size
;

100 
£g_8
 +ð
off£t
;

102 
couÁ
 = 
off£t
 & ( (
ut32_t
) - 1);

103 
size
 -ð
couÁ
;

105 
couÁ
--)

106 ià(*
£g_8
++ != 0xff)

108 #ià
AM26LV160_ERROR_TRACE


109 
	`´tf
 ("AM26LV160: blank checkrror: %p = 0x%02x\n",

110 
£g_8
 - 1, *(seg_8 - 1));

112  
EIO
;

115 
£g_32
 = (vÞ©
ut32_t
*è
£g_8
;

117 
couÁ
 = 
size
 /  (
ut32_t
);

118 
size
 -ð
couÁ
 *  (
ut32_t
);

120 
couÁ
--)

121 ià(*
£g_32
++ != 0xffffffff)

123 #ià
AM26LV160_ERROR_TRACE


124 
	`´tf
 ("AM26LV160: blank checkrror: %p = 0x%08lx\n",

125 
£g_32
 - 1, *(seg_32 - 1));

127  
EIO
;

130 
£g_8
 = (vÞ©
ut8_t
*è
£g_32
;

132 
size
--)

133 ià(*
£g_8
++ != 0xff)

135 #ià
AM26LV160_ERROR_TRACE


136 
	`´tf
 ("AM26LV160: blank checkrror: %p = 0x%02x\n",

137 
£g_8
 - 1, *(seg_8 - 1));

139  
EIO
;

143 
	}
}

146 
	$¹ems_am29lv160_vify
 (cÚ¡ 
¹ems_fdisk_£gmt_desc
* 
sd
,

147 
ut32_t
 
deviû
,

148 
ut32_t
 
£gmt
,

149 
ut32_t
 
off£t
,

150 cÚ¡ * 
bufãr
,

151 
ut32_t
 
size
)

153 cÚ¡ 
¹ems_am29lv160_cÚfig
* 
ac
 = &
¹ems_am29lv160_cÚfigu¿tiÚ
[
deviû
];

154 cÚ¡ 
ut8_t
* 
addr
 = 
ac
->
ba£
;

156 
addr
 +ð(
sd
->
off£t
 + (
£gmt
 - sd->£gmtè* sd->
size
) + offset;

158 ià(
	`memcmp
 (
addr
, 
bufãr
, 
size
) != 0)

159  
EIO
;

162 
	}
}

165 
	$¹ems_am29lv160_toggË_wa_8
 (vÞ©
ut8_t
* 
¡©us
)

169 vÞ©
ut8_t
 
¡©us1
 = *
¡©us
;

170 vÞ©
ut8_t
 
¡©us2
 = *
¡©us
;

172 ià(((
¡©us1
 ^ 
¡©us2
) & (1 << 6)) == 0)

175 ià((
¡©us1
 & (1 << 5)) != 0)

177 
¡©us1
 = *
¡©us
;

178 
¡©us2
 = *
¡©us
;

180 ià(((
¡©us1
 ^ 
¡©us2
) & (1 << 6)) == 0)

183 #ià
AM26LV160_ERROR_TRACE


184 
	`´tf
 ("AM26LV160:rror bit detected: %p = 0x%04x\n",

185 
¡©us
, 
¡©us1
);

188 *
¡©us
 = 0xf0;

189  
EIO
;

192 
	}
}

195 
	$¹ems_am29lv160_toggË_wa_16
 (vÞ©
ut16_t
* 
¡©us
)

199 vÞ©
ut16_t
 
¡©us1
 = *
¡©us
;

200 vÞ©
ut16_t
 
¡©us2
 = *
¡©us
;

202 ià(((
¡©us1
 ^ 
¡©us2
) & (1 << 6)) == 0)

205 ià((
¡©us1
 & (1 << 5)) != 0)

207 
¡©us1
 = *
¡©us
;

208 
¡©us2
 = *
¡©us
;

210 ià(((
¡©us1
 ^ 
¡©us2
) & (1 << 6)) == 0)

213 #ià
AM26LV160_ERROR_TRACE


214 
	`´tf
 ("AM26LV160:rror bit detected: %p = 0x%04x/0x%04x\n",

215 
¡©us
, 
¡©us1
, 
¡©us2
);

218 *
¡©us
 = 0xf0;

219  
EIO
;

222 
	}
}

225 
	$¹ems_am29lv160_wre_d©a_8
 (vÞ©
ut8_t
* 
ba£
,

226 
ut32_t
 
off£t
,

227 cÚ¡ 
ut8_t
* 
d©a
,

228 
ut32_t
 
size
)

230 vÞ©
ut8_t
* 
£g
 = 
ba£
 + 
off£t
;

231 
¹ems_¼u±_Ëv
 
Ëv
;

236 *
ba£
 = 0xf0;

238 
size
)

240 
	`¹ems_¼u±_di§bË
 (
Ëv
);

241 *(
ba£
 + 0xaaa) = 0xaa;

242 *(
ba£
 + 0x555) = 0x55;

243 *(
ba£
 + 0xaaa) = 0xa0;

244 *
£g
 = *
d©a
++;

245 
	`¹ems_¼u±_abË
 (
Ëv
);

246 ià(
	`¹ems_am29lv160_toggË_wa_8
 (
£g
++) != 0)

247  
EIO
;

248 
size
--;

254 *
ba£
 = 0xf0;

257 
	}
}

260 
	$¹ems_am29lv160_wre_d©a_16
 (vÞ©
ut16_t
* 
ba£
,

261 
ut32_t
 
off£t
,

262 cÚ¡ 
ut16_t
* 
d©a
,

263 
ut32_t
 
size
)

265 vÞ©
ut16_t
* 
£g
 = 
ba£
 + (
off£t
 / 2);

266 
¹ems_¼u±_Ëv
 
Ëv
;

268 
size
 /= 2;

273 *
ba£
 = 0xf0;

275 
size
)

277 
	`¹ems_¼u±_di§bË
 (
Ëv
);

278 *(
ba£
 + 0x555) = 0xaa;

279 *(
ba£
 + 0x2aa) = 0x55;

280 *(
ba£
 + 0x555) = 0xa0;

281 *
£g
 = *
d©a
++;

282 
	`¹ems_¼u±_abË
 (
Ëv
);

283 ià(
	`¹ems_am29lv160_toggË_wa_16
 (
£g
++) != 0)

284  
EIO
;

285 
size
--;

291 *
ba£
 = 0xf0;

294 
	}
}

297 
	$¹ems_am29lv160_»ad
 (cÚ¡ 
¹ems_fdisk_£gmt_desc
* 
sd
,

298 
ut32_t
 
deviû
,

299 
ut32_t
 
£gmt
,

300 
ut32_t
 
off£t
,

301 * 
bufãr
,

302 
ut32_t
 
size
)

304 * 
addr
 =

305 
¹ems_am29lv160_cÚfigu¿tiÚ
[
deviû
].
ba£
 +

306 
sd
->
off£t
 + ((
£gmt
 - sd->£gmtè* sd->
size
) + offset;

307 
	`memýy
 (
bufãr
, 
addr
, 
size
);

309 
	}
}

315 
	$¹ems_am29lv160_wre
 (cÚ¡ 
¹ems_fdisk_£gmt_desc
* 
sd
,

316 
ut32_t
 
deviû
,

317 
ut32_t
 
£gmt
,

318 
ut32_t
 
off£t
,

319 cÚ¡ * 
bufãr
,

320 
ut32_t
 
size
)

322 
»t
 = 
	`¹ems_am29lv160_vify
 (
sd
, 
deviû
, 
£gmt
, 
off£t
, 
bufãr
, 
size
);

324 ià(
»t
 != 0)

326 cÚ¡ 
¹ems_am29lv160_cÚfig
* 
ac
 = &
¹ems_am29lv160_cÚfigu¿tiÚ
[
deviû
];

327 
ut32_t
 
soff£t
;

329 
soff£t
 = 
off£t
 + 
sd
->off£+ ((
£gmt
 - sd->£gmtè* sd->
size
);

331 ià(
off£t
 & 1)

332 
	`´tf
 ("rtems_am29lv160_write: offset is odd\n");

334 ià(
size
 & 1)

335 
	`´tf
 ("rtems_am29lv160_write: size is odd\n");

337 ià(
ac
->
bus_8b
)

338 
»t
 = 
	`¹ems_am29lv160_wre_d©a_8
 (
ac
->
ba£
, 
soff£t
, 
bufãr
, 
size
);

340 
»t
 = 
	`¹ems_am29lv160_wre_d©a_16
 (
ac
->
ba£
, 
soff£t
, 
bufãr
, 
size
);

345 ià(
»t
 == 0)

347 
»t
 = 
	`¹ems_am29lv160_vify
 (
sd
, 
deviû
, 
£gmt
, 
off£t
, 
bufãr
, 
size
);

348 #ià
AM26LV160_ERROR_TRACE


349 ià(
»t
)

350 
	`´tf
 ("AM26LV160: verify failed: %ld-%ld-%08lx: s=%ld\n",

351 
deviû
, 
£gmt
, 
off£t
, 
size
);

356  
»t
;

357 
	}
}

360 
	$¹ems_am29lv160_a£
 (cÚ¡ 
¹ems_fdisk_£gmt_desc
* 
sd
,

361 
ut32_t
 
deviû
,

362 
ut32_t
 
£gmt
)

364 
»t
 = 
	`¹ems_am29lv160_bÏnk
 (
sd
, 
deviû
, 
£gmt
, 0, sd->
size
);

365 ià(
»t
 != 0)

367 cÚ¡ 
¹ems_am29lv160_cÚfig
* 
ac
 = &
¹ems_am29lv160_cÚfigu¿tiÚ
[
deviû
];

368 
ut32_t
 
off£t
;

369 
¹ems_¼u±_Ëv
 
Ëv
;

371 
off£t
 = 
sd
->off£+ ((
£gmt
 - sd->£gmtè* sd->
size
);

373 ià(
ac
->
bus_8b
)

375 vÞ©
ut8_t
* 
ba£
 = 
ac
->base;

376 vÞ©
ut8_t
* 
£g
 = 
ba£
 + 
off£t
;

381 
	`¹ems_¼u±_di§bË
 (
Ëv
);

382 *
ba£
 = 0xf0;

383 *(
ba£
 + 0xaaa) = 0xaa;

384 *(
ba£
 + 0x555) = 0x55;

385 *(
ba£
 + 0xaaa) = 0x80;

386 *(
ba£
 + 0xaaa) = 0xaa;

387 *(
ba£
 + 0x555) = 0x55;

388 *
£g
 = 0x30;

389 
	`¹ems_¼u±_abË
 (
Ëv
);

391 
»t
 = 
	`¹ems_am29lv160_toggË_wa_8
 (
£g
);

396 *
ba£
 = 0xf0;

400 vÞ©
ut16_t
* 
ba£
 = 
ac
->base;

401 vÞ©
ut16_t
* 
£g
 = 
ba£
 + (
off£t
 / 2);

406 
	`¹ems_¼u±_di§bË
 (
Ëv
);

407 *
ba£
 = 0xf0;

408 *(
ba£
 + 0x555) = 0xaa;

409 *(
ba£
 + 0x2aa) = 0x55;

410 *(
ba£
 + 0x555) = 0x80;

411 *(
ba£
 + 0x555) = 0xaa;

412 *(
ba£
 + 0x2aa) = 0x55;

413 *
£g
 = 0x30;

414 
	`¹ems_¼u±_abË
 (
Ëv
);

416 
»t
 = 
	`¹ems_am29lv160_toggË_wa_16
 (
£g
);

421 *
ba£
 = 0xf0;

427 ià(
»t
 == 0)

429 
»t
 = 
	`¹ems_am29lv160_bÏnk
 (
sd
, 
deviû
, 
£gmt
, 0, sd->
size
);

430 #ià
AM26LV160_ERROR_TRACE


431 ià(
»t
)

432 
	`´tf
 ("AM26LV160:¿£ faed: %ld-%ld\n", 
deviû
, 
£gmt
);

437  
»t
;

438 
	}
}

441 
	$¹ems_am29lv160_a£_deviû
 (cÚ¡ 
¹ems_fdisk_deviû_desc
* 
dd
,

442 
ut32_t
 
deviû
)

444 
ut32_t
 
£gmt
;

446 
£gmt
 = 0; segm< 
dd
->
£gmt_couÁ
; segment++)

448 
ut32_t
 
£g_£gmt
;

450 
£g_£gmt
 = 0;

451 
£g_£gmt
 < 
dd
->
£gmts
[
£gmt
].
couÁ
;

452 
£g_£gmt
++)

454 
»t
 = 
	`¹ems_am29lv160_a£
 (&
dd
->
£gmts
[
£gmt
],

455 
deviû
,

456 
£gmt
 + 
£g_£gmt
);

457 ià(
»t
)

458  
»t
;

463 
	}
}

465 cÚ¡ 
¹ems_fdisk_driv_hªdËrs
 
	g¹ems_am29lv160_hªdËrs
 =

467 .
»ad
 = 
¹ems_am29lv160_»ad
,

468 .
	gwre
 = 
¹ems_am29lv160_wre
,

469 .
	gbÏnk
 = 
¹ems_am29lv160_bÏnk
,

470 .
	gvify
 = 
¹ems_am29lv160_vify
,

471 .
	ga£
 = 
¹ems_am29lv160_a£
,

472 .
	ga£_deviû
 = 
¹ems_am29lv160_a£_deviû


	@src/libchip/flash/am29lv160.h

14 #ià!
defed
 (
_RTEMS_AM29LV160_H_
)

15 
	#_RTEMS_AM29LV160_H_


	)

17 
	~<¹ems/æashdisk.h
>

22 
	#¹ems_am29lv160t_£gmt_couÁ
 (4)

	)

23 cÚ¡ 
¹ems_fdisk_£gmt_desc
 
¹ems_am29lv160t_£gmts
[4];

28 
	#¹ems_am29lv160b_£gmt_couÁ
 (4)

	)

29 cÚ¡ 
¹ems_fdisk_£gmt_desc
 
¹ems_am29lv160b_£gmts
[4];

34 cÚ¡ 
¹ems_fdisk_driv_hªdËrs
 
¹ems_am29lv160_hªdËrs
;

39 
	s¹ems_am29lv160_cÚfig


41 
	mbus_8b
;

42 * 
	mba£
;

43 } 
	t¹ems_am29lv160_cÚfig
;

48 cÚ¡ 
¹ems_am29lv160_cÚfig
 
¹ems_am29lv160_cÚfigu¿tiÚ
[];

53 
ut32_t
 
¹ems_am29lv160_cÚfigu¿tiÚ_size
;

	@src/libchip/i2c/i2c-2b-eeprom.c

52 
	~<¹ems.h
>

53 
	~<¹ems/libi2c.h
>

55 
	~<libch/i2c-2b-´om.h
>

56 
	~<¹ems/libio.h
>

58 
	#EEPROM_PG_SZ
 32

	)

59 
	#ALGN
(
x
è(((
ut32_t
)(xè+ 
EEPROM_PG_SZ
è& ~(EEPROM_PG_SZ-1))

	)

61 
¹ems_¡©us_code


62 
	$£nd_fe_±r
 (
¹ems_deviû_mÜ_numb
 
mÜ
, 
pos
, 
tout
)

64 
sc
;

65 
bys
[2];

67 
bys
[0] = (
pos
 >> 8) & 0xff;

68 
bys
[1] = (
pos
) & 0xff;

74 (
sc
 = 
	`¹ems_libi2c_¡¬t_wre_bys
 (
mÜ
, 
bys
, 2)) < 0) {

75 ià(--
tout
 <= 0)

76  
tout
 ? -
sc
 : 
RTEMS_TIMEOUT
;

77 
	`¹ems_sk_wake_aá
 (1);

79  
RTEMS_SUCCESSFUL
;

80 
	}
}

82 
¹ems_¡©us_code


83 
	$i2c_2b_´om_wre
 (
¹ems_deviû_majÜ_numb
 
majÜ
,

84 
¹ems_deviû_mÜ_numb
 
mÜ
, *
¬g
)

86 
¹ems_libio_rw_¬gs_t
 *
rw¬gs
 = 
¬g
;

87 
off
 = 
rw¬gs
->
off£t
;

88 
út
 = 
rw¬gs
->
couÁ
;

89 *
buf
 = (*)
rw¬gs
->
bufãr
;

90 
sc
;

91 
d
;

92 
l
;

94 ià(
út
 <= 0)

95  
RTEMS_SUCCESSFUL
;

97 ià((
sc
 = 
	`£nd_fe_±r
 (
mÜ
, 
off
, 0)))

98  
sc
;

102 
d
 = 
	`ALGN
 (
off
);

103 
l
 = 
d
 - 
off
;

104 ià(
l
 > 
út
)

105 
l
 = 
út
;

107 
sc
 = 
	`¹ems_libi2c_wre_bys
 (
mÜ
, 
buf
, 
l
);

108 ià(
sc
 < 0)

109  -
sc
;

111 
sc
 = 
	`¹ems_libi2c_£nd_¡Ý
 (
mÜ
);

112 ià(
sc
)

113  
sc
;

115 
rw¬gs
->
bys_moved
 +ð
l
;

117 
buf
 +ð
l
;

118 
út
 -ð
l
;

119 
off
 +ð
l
;

122 ià((
sc
 = 
	`£nd_fe_±r
 (
mÜ
, 
off
, 100)))

123  
sc
;

125 } 
út
 > 0);

127  
	`¹ems_libi2c_£nd_¡Ý
 (
mÜ
);

128 
	}
}

130 
¹ems_¡©us_code


131 
	$i2c_2b_´om_»ad
 (
¹ems_deviû_majÜ_numb
 
majÜ
,

132 
¹ems_deviû_mÜ_numb
 
mÜ
, *
¬g
)

134 
sc
;

135 
¹ems_libio_rw_¬gs_t
 *
rw¬gs
 = 
¬g
;

137 ià(
RTEMS_SUCCESSFUL
 !ð(
sc
 = 
	`£nd_fe_±r
 (
mÜ
, 
rw¬gs
->
off£t
, 0)))

138  -
sc
;

140 
sc
 = 
	`¹ems_libi2c_¡¬t_»ad_bys
(

141 
mÜ
,

142 (*)
rw¬gs
->
bufãr
,

143 
rw¬gs
->
couÁ


146 ià(
sc
 < 0) {

147 
rw¬gs
->
bys_moved
 = 0;

148  -
sc
;

150 
rw¬gs
->
bys_moved
 = 
sc
;

152  
	`¹ems_libi2c_£nd_¡Ý
 (
mÜ
);

153 
	}
}

155 
¹ems_driv_add»ss_bË
 
	gmyÝs
 = {

156 .
»ad_y
 = 
i2c_2b_´om_»ad
,

157 .
	gwre_y
 = 
i2c_2b_´om_wre
,

160 
¹ems_libi2c_drv_t
 
	gmy_drv_tbl
 = {

161 .
Ýs
 = &
myÝs
,

162 .
	gsize
 =  (
my_drv_tbl
),

166 
¹ems_driv_add»ss_bË
 
	gmy_ro_Ýs
 = {

167 .
»ad_y
 = 
i2c_2b_´om_»ad
,

170 
¹ems_libi2c_drv_t
 
	gmy_ro_drv_tbl
 = {

171 .
Ýs
 = &
my_ro_Ýs
,

172 .
	gsize
 =  (
my_ro_drv_tbl
),

176 
¹ems_libi2c_drv_t
 *
	gi2c_2b_´om_driv_desütÜ
 = &
my_drv_tbl
;

177 
¹ems_libi2c_drv_t
 *
	gi2c_2b_´om_ro_driv_desütÜ
 = &
my_ro_drv_tbl
;

	@src/libchip/i2c/i2c-2b-eeprom.h

1 #iâdeà
I2C_2B_EEPROM_DRIVER_H


2 
	#I2C_2B_EEPROM_DRIVER_H


	)

55 
	~<¹ems.h
>

56 
	~<¹ems/libi2c.h
>

58 #ifdeà
__ýlu¥lus


65 
¹ems_libi2c_drv_t
 *
i2c_2b_´om_ro_driv_desütÜ
;

68 
¹ems_libi2c_drv_t
 *
i2c_2b_´om_driv_desütÜ
;

70 #ifdeà
__ýlu¥lus


	@src/libchip/i2c/i2c-ds1621.c

51 
	~<¹ems.h
>

52 
	~<¹ems/libi2c.h
>

54 
	~<libch/i2c-ds1621.h
>

56 
	~<¹ems/libio.h
>

59 
¹ems_¡©us_code


60 
	$ds1621_
 (
¹ems_deviû_majÜ_numb
 
majÜ
, 
¹ems_deviû_mÜ_numb
 
mÜ
,

61 *
¬g
)

63 
sc
;

64 
c¤
[2] = { 
DS1621_CMD_CSR_ACCESS
, 0 }, 
cmd
;

69 
sc
 = 
	`¹ems_libi2c_¡¬t_wre_bys
 (
mÜ
, 
c¤
, 1);

70 ià(
sc
 < 0)

71  -
sc
;

73 
sc
 = 
	`¹ems_libi2c_¡¬t_»ad_bys
 (
mÜ
, 
c¤
 + 1, 1);

74 ià(
sc
 < 0)

75  -
sc
;

77 
c¤
[1] &ð~
DS1621_CSR_1SHOT
;

79 
sc
 = 
	`¹ems_libi2c_¡¬t_wre_bys
 (
mÜ
, 
c¤
, 2);

80 ià(
sc
 < 0)

81  -
sc
;

84 
cmd
 = 
DS1621_CMD_START_CONV
;

86 
sc
 = 
	`¹ems_libi2c_¡¬t_wre_bys
 (
mÜ
, &
cmd
, 1);

87 ià(
sc
 < 0)

88  -
sc
;

93  
	`¹ems_libi2c_£nd_¡Ý
 (
mÜ
);

94 
	}
}

96 
¹ems_¡©us_code


97 
	$ds1621_»ad
 (
¹ems_deviû_majÜ_numb
 
majÜ
, 
¹ems_deviû_mÜ_numb
 
mÜ
,

98 *
¬g
)

100 
sc
;

101 
¹ems_libio_rw_¬gs_t
 *
rw¬gs
 = 
¬g
;

102 
cmd
 = 
DS1621_CMD_READ_TEMP
;

104 
sc
 = 
	`¹ems_libi2c_¡¬t_wre_bys
 (
mÜ
, &
cmd
, 1);

105 ià(
sc
 < 0)

106  -
sc
;

107 ià(
sc
 < 1)

108  
RTEMS_IO_ERROR
;

109 
sc
 = 
	`¹ems_libi2c_¡¬t_»ad_bys
(
mÜ
, (*)
rw¬gs
->
bufãr
, 1);

110 ià(
sc
 < 0) {

111 
rw¬gs
->
bys_moved
 = 0;

112  -
sc
;

114 
rw¬gs
->
bys_moved
 = 1;

115  
	`¹ems_libi2c_£nd_¡Ý
 (
mÜ
);

116 
	}
}

118 
¹ems_driv_add»ss_bË
 
	gmyÝs
 = {

119 .
liz©iÚ_y
 = 
ds1621_
,

120 .
	g»ad_y
 = 
ds1621_»ad
,

123 
¹ems_libi2c_drv_t
 
	gmy_drv_tbl
 = {

124 .
Ýs
 = &
myÝs
,

125 .
	gsize
 =  (
my_drv_tbl
),

128 
¹ems_libi2c_drv_t
 *
	gi2c_ds1621_driv_desütÜ
 = &
my_drv_tbl
;

	@src/libchip/i2c/i2c-ds1621.h

1 #iâdeà
I2C_DS_1621_DRIVER_H


2 
	#I2C_DS_1621_DRIVER_H


	)

55 
	#DS1621_CMD_READ_TEMP
 0x¯

	)

56 
	#DS1621_CMD_CSR_ACCESS
 0xac

	)

57 
	#DS1621_CMD_START_CONV
 0x

	)

60 
	#DS1621_CSR_DONE
 (1<<7)

	)

61 
	#DS1621_CSR_TEMP_HI
 (1<<6è

	)

62 
	#DS1621_CSR_TEMP_LO
 (1<<5è

	)

63 
	#DS1621_CSR_NVMEM_BSY
 (1<<4è

	)

64 
	#DS1621_CSR_OUT_POL
 (1<<1è

	)

65 
	#DS1621_CSR_1SHOT
 (1<<0è

	)

67 
	~<¹ems.h
>

68 
	~<¹ems/libi2c.h
>

70 #ifdeà
__ýlu¥lus


75 
¹ems_libi2c_drv_t
 *
i2c_ds1621_driv_desütÜ
;

77 #ifdeà
__ýlu¥lus


	@src/libchip/i2c/i2c-sc620.c

21 #ifdeà
HAVE_CONFIG_H


22 
	~"cÚfig.h
"

25 
	~<libch/i2c-sc620.h
>

27 
	~<¹ems/libio.h
>

29 
	#SC620_REG_COUNT
 10

	)

31 
¹ems_¡©us_code
 
	$i2c_sc620_wre
(

32 
¹ems_deviû_majÜ_numb
 
majÜ
,

33 
¹ems_deviû_mÜ_numb
 
mÜ
,

34 *
¬g


37 
¹ems_¡©us_code
 
sc
 = 
RTEMS_IO_ERROR
;

38 
¹ems_libio_rw_¬gs_t
 *
rw
 = 
¬g
;

39 *
buf
 = (*è&
rw
->
bufãr
[0];

41 ià(
rw
->
couÁ
 =ð2 && 
buf
[0] < 
SC620_REG_COUNT
) {

42 
rv
;

44 
rv
 = 
	`¹ems_libi2c_¡¬t_wre_bys
(

45 
mÜ
, 
buf
, 2

47 ià(
rv
 == 2) {

48 
sc
 = 
	`¹ems_libi2c_£nd_¡Ý
(
mÜ
);

52 
rw
->
bys_moved
 = 
sc
 =ð
RTEMS_SUCCESSFUL
 ? 2 : 0;

54  
sc
;

55 
	}
}

57 
¹ems_¡©us_code
 
	$i2c_sc620_»ad
(

58 
¹ems_deviû_majÜ_numb
 
majÜ
,

59 
¹ems_deviû_mÜ_numb
 
mÜ
,

60 *
¬g


63 
¹ems_¡©us_code
 
sc
 = 
RTEMS_IO_ERROR
;

64 
¹ems_libio_rw_¬gs_t
 *
rw
 = 
¬g
;

65 *
buf
 = (*è&
rw
->
bufãr
[0];

67 ià(
rw
->
couÁ
 =ð1 && 
buf
[0] < 
SC620_REG_COUNT
) {

68 
rv
;

70 
rv
 = 
	`¹ems_libi2c_¡¬t_wre_bys
(
mÜ
, 
buf
, 1);

71 ià(
rv
 == 1) {

72 
sc
 = 
	`¹ems_libi2c_£nd_addr
(
mÜ
, 0);

73 ià(
sc
 =ð
RTEMS_SUCCESSFUL
) {

74 
rv
 = 
	`¹ems_libi2c_»ad_bys
(
mÜ
, 
buf
, 1);

75 ià(
rv
 == 1) {

76 
sc
 = 
	`¹ems_libi2c_£nd_¡Ý
(
mÜ
);

82 
rw
->
bys_moved
 = 
sc
 =ð
RTEMS_SUCCESSFUL
 ? 1 : 0;

84  
sc
;

85 
	}
}

87 
¹ems_driv_add»ss_bË
 
	gi2c_sc620_Ýs
 = {

88 .
»ad_y
 = 
i2c_sc620_»ad
,

89 .
	gwre_y
 = 
i2c_sc620_wre


92 
¹ems_libi2c_drv_t
 
	gi2c_sc620_driv
 = {

93 .
Ýs
 = &
i2c_sc620_Ýs
,

94 .
	gsize
 = (
i2c_sc620_driv
)

	@src/libchip/i2c/i2c-sc620.h

15 #iâdeà
I2C_SC620_H


16 
	#I2C_SC620_H


	)

18 
	~<¹ems/libi2c.h
>

20 #ifdeà
__ýlu¥lus


34 
¹ems_libi2c_drv_t
 
i2c_sc620_driv
;

36 #ifdeà
__ýlu¥lus


	@src/libchip/i2c/spi-flash-m25p40.c

19 
	~<¹ems.h
>

20 
	~<¹ems/libi2c.h
>

22 
	~<libch/¥i-æash-m25p40.h
>

23 
	~<¹ems/libio.h
>

26 
¥i_memdrv_t
 
	g¥i_æash_m25p40_rw_drv_t
 = {

28 .
Ýs
 = &
¥i_memdrv_rw_Ýs
,

29 .
	gsize
 =  (
¥i_æash_m25p40_rw_drv_t
),

32 .
	gbaud¿
 = 2000000,

33 .
	ga£_befÜe_´og¿m
 = 
ue
,

34 .
	gem±y_¡©e
 = 0xff,

35 .
	g·ge_size
 = 256,

36 .
	g£ùÜ_size
 = 0x10000,

37 .
	gmem_size
 = 0x80000,

41 
¹ems_libi2c_drv_t
 *
	g¥i_æash_m25p40_rw_driv_desütÜ
 =

42 &
¥i_æash_m25p40_rw_drv_t
.
libi2c_drv_y
;

44 
¥i_memdrv_t
 
	g¥i_æash_m25p40_ro_drv_t
 = {

46 .
Ýs
 = &
¥i_memdrv_ro_Ýs
,

47 .
	gsize
 =  (
¥i_æash_m25p40_ro_drv_t
),

50 .
	gbaud¿
 = 2000000,

51 .
	ga£_befÜe_´og¿m
 = 
ue
,

52 .
	gem±y_¡©e
 = 0xff,

53 .
	g·ge_size
 = 256,

54 .
	g£ùÜ_size
 = 0x10000,

55 .
	gmem_size
 = 0x80000,

59 
¹ems_libi2c_drv_t
 *
	g¥i_æash_m25p40_ro_driv_desütÜ
 =

60 &
¥i_æash_m25p40_ro_drv_t
.
libi2c_drv_y
;

	@src/libchip/i2c/spi-flash-m25p40.h

24 #iâdeà
_LIBCHIP_SPI_FLASH_M25P40_H


25 
	#_LIBCHIP_SPI_FLASH_M25P40_H


	)

27 
	~<libch/¥i-memdrv.h
>

29 #ifdeà
__ýlu¥lus


36 
¹ems_libi2c_drv_t
 *
¥i_æash_m25p40_rw_driv_desütÜ
;

38 
¹ems_libi2c_drv_t
 *
¥i_æash_m25p40_ro_driv_desütÜ
;

40 #ifdeà
__ýlu¥lus


	@src/libchip/i2c/spi-fram-fm25l256.c

19 
	~<¹ems.h
>

20 
	~<¹ems/libi2c.h
>

22 
	~<libch/¥i-äam-fm25l256.h
>

23 
	~<¹ems/libio.h
>

26 
¥i_memdrv_t
 
	g¥i_äam_fm25l256_rw_drv_t
 = {

28 .
Ýs
 = &
¥i_memdrv_rw_Ýs
,

29 .
	gsize
 =  (
¥i_äam_fm25l256_rw_drv_t
),

32 .
	gbaud¿
 = 2000000,

33 .
	ga£_befÜe_´og¿m
 = 
çl£
,

34 .
	gem±y_¡©e
 = 0xff,

35 .
	g·ge_size
 = 0x8000,

36 .
	g£ùÜ_size
 = 1,

37 .
	gmem_size
 = 0x8000,

41 
¹ems_libi2c_drv_t
 *
	g¥i_äam_fm25l256_rw_driv_desütÜ
 =

42 &
¥i_äam_fm25l256_rw_drv_t
.
libi2c_drv_y
;

44 
¥i_memdrv_t
 
	g¥i_äam_fm25l256_ro_drv_t
 = {

46 .
Ýs
 = &
¥i_memdrv_ro_Ýs
,

47 .
	gsize
 =  (
¥i_äam_fm25l256_ro_drv_t
),

50 .
	gbaud¿
 = 2000000,

51 .
	ga£_befÜe_´og¿m
 = 
çl£
,

52 .
	gem±y_¡©e
 = 0xff,

53 .
	g·ge_size
 = 0x8000,

54 .
	g£ùÜ_size
 = 1,

55 .
	gmem_size
 = 0x8000,

59 
¹ems_libi2c_drv_t
 *
	g¥i_äam_fm25l256_ro_driv_desütÜ
 =

60 &
¥i_äam_fm25l256_ro_drv_t
.
libi2c_drv_y
;

	@src/libchip/i2c/spi-fram-fm25l256.h

24 #iâdeà
_LIBCHIP_SPI_FRAM_FM25L256_H


25 
	#_LIBCHIP_SPI_FRAM_FM25L256_H


	)

27 
	~<libch/¥i-memdrv.h
>

29 #ifdeà
__ýlu¥lus


36 
¹ems_libi2c_drv_t
 *
¥i_äam_fm25l256_rw_driv_desütÜ
;

38 
¹ems_libi2c_drv_t
 *
¥i_äam_fm25l256_ro_driv_desütÜ
;

40 #ifdeà
__ýlu¥lus


	@src/libchip/i2c/spi-memdrv.c

24 
	~<¹ems.h
>

25 
	~<¹ems/libi2c.h
>

27 
	~<libch/¥i-memdrv.h
>

28 
	~<¹ems/libio.h
>

30 
	#SPI_MEM_CMD_WREN
 0x06

	)

31 
	#SPI_MEM_CMD_WRDIS
 0x04

	)

32 
	#SPI_MEM_CMD_RDID
 0x9F

	)

33 
	#SPI_MEM_CMD_RDSR
 0x05

	)

34 
	#SPI_MEM_CMD_WRSR
 0x01

	)

35 
	#SPI_MEM_CMD_READ
 0x03

	)

36 
	#SPI_MEM_CMD_PP
 0x02

	)

37 
	#SPI_MEM_CMD_SE
 0xD8

	)

38 
	#SPI_MEM_CMD_BE
 0xC7

	)

39 
	#SPI_MEM_CMD_DP
 0xB9

	)

40 
	#SPI_MEM_CMD_RES
 0xAB

	)

45 
¹ems_¡©us_code
 
	g¥i_memdrv_mÜ2·¿m_±r


53 
¹ems_deviû_mÜ_numb
 
	gmÜ
,

54 
¥i_memdrv_·¿m_t
 **
	g·¿m_±r


61 
¹ems_¡©us_code
 
	grc
 = 
RTEMS_SUCCESSFUL
;

62 
¥i_memdrv_t
 *
	gdrv_±r
;

64 ià(
	grc
 =ð
RTEMS_SUCCESSFUL
) {

65 
rc
 = -
¹ems_libi2c_ioùl
(
mÜ
,

66 
RTEMS_LIBI2C_IOCTL_GET_DRV_T
,

67 &
drv_±r
);

69 ià((
	grc
 =ð
RTEMS_SUCCESSFUL
) &&

70 (
drv_±r
->
libi2c_drv_y
.
size
 !ð(
¥i_memdrv_t
))) {

71 
rc
 = 
RTEMS_INVALID_SIZE
;

73 ià(
	grc
 =ð
RTEMS_SUCCESSFUL
) {

74 *
·¿m_±r
 = &(
drv_±r
->
¥i_memdrv_·¿m
);

76  
	grc
;

82 
¹ems_¡©us_code
 
	g¥i_memdrv_wa_ms


90 
	gms


97 
¹ems_rv®
 
	gticks_³r_£cÚd
;

99 
	gticks_³r_£cÚd
 = 
¹ems_þock_g_ticks_³r_£cÚd
();

100 (è
¹ems_sk_wake_aá
(
ticks_³r_£cÚd
 * 
ms
 / 1000);

107 
¹ems_¡©us_code
 
	g¥i_memdrv_wre


115 
¹ems_deviû_majÜ_numb
 
	gmajÜ
,

116 
¹ems_deviû_mÜ_numb
 
	gmÜ
,

117 *
	g¬g


124 
¹ems_¡©us_code
 
	grc
 = 
RTEMS_SUCCESSFUL
;

125 
¹ems_libio_rw_¬gs_t
 *
	grw¬gs
 = 
¬g
;

126 
off_t
 
	goff
 = 
rw¬gs
->
off£t
;

127 
	gút
 = 
rw¬gs
->
couÁ
;

128 *
	gbuf
 = (*)
rw¬gs
->
bufãr
;

129 
	gbys_£Á
 = 0;

130 
	gcu¼_út
;

131 
	gcmdbuf
[4];

132 
	g»t_út
 = 0;

133 
	gcmd_size
;

134 
¥i_memdrv_·¿m_t
 *
	gmem_·¿m_±r
;

135 
¹ems_libi2c_tä_mode_t
 
	gtä_mode
 = {

136 .
baud¿
 = 20000000,

137 .
	gbs_³r_ch¬
 = 8,

138 .
	glsb_f¡
 = 
FALSE
,

139 .
	gþock_v
 = 
FALSE
,

140 .
	gþock_phs
 = 
FALSE


146 ià(
	grc
 =ð
RTEMS_SUCCESSFUL
) {

147 
rc
 = 
¥i_memdrv_mÜ2·¿m_±r
(
mÜ
,&
mem_·¿m_±r
);

152 ià(
	grc
 =ð
RTEMS_SUCCESSFUL
) {

153 ià((
út
 <= 0) ||

154 (
út
 > 
mem_·¿m_±r
->
mem_size
) ||

155 (
off
 > (
mem_·¿m_±r
->
mem_size
-
út
))) {

156 
rc
 = 
RTEMS_INVALID_SIZE
;

158 ià(
	gbuf
 =ð
NULL
) {

159 
rc
 = 
RTEMS_INVALID_ADDRESS
;

162 (
	grc
 =ð
RTEMS_SUCCESSFUL
) &&

163 (
út
 > 
bys_£Á
)) {

164 
cu¼_út
 = 
út
 - 
bys_£Á
;

165 ià((
	gmem_·¿m_±r
->
	g·ge_size
 > 0) &&

166 (
	goff
 / 
	gmem_·¿m_±r
->
	g·ge_size
) !=

167 ((
off
+
cu¼_út
+1è/ 
mem_·¿m_±r
->
·ge_size
)) {

168 
cu¼_út
 = 
mem_·¿m_±r
->
·ge_size
 - (
off
 % mem_param_ptr->page_size);

173 ià(
	grc
 =ð
RTEMS_SUCCESSFUL
) {

174 
rc
 = 
¹ems_libi2c_£nd_¡¬t
(
mÜ
);

179 ià(
	grc
 =ð
RTEMS_SUCCESSFUL
) {

180 
tä_mode
.
baud¿
 = 
mem_·¿m_±r
->baudrate;

181 
	grc
 = -
¹ems_libi2c_ioùl
(
mÜ
,

182 
RTEMS_LIBI2C_IOCTL_SET_TFRMODE
,

183 &
tä_mode
);

189 ià(
	grc
 =ð
RTEMS_SUCCESSFUL
) {

190 
rc
 = 
¹ems_libi2c_£nd_addr
(
mÜ
,
TRUE
);

196 ià(
	grc
 =ð
RTEMS_SUCCESSFUL
) {

197 
cmdbuf
[0] = 
SPI_MEM_CMD_WREN
;

198 
	g»t_út
 = 
¹ems_libi2c_wre_bys
(
mÜ
,
cmdbuf
,1);

199 ià(
	g»t_út
 < 0) {

200 
	grc
 = -
»t_út
;

206 ià(
	grc
 =ð
RTEMS_SUCCESSFUL
) {

207 
rc
 = 
¹ems_libi2c_£nd_¡Ý
(
mÜ
);

212 ià(
	grc
 =ð
RTEMS_SUCCESSFUL
) {

213 
rc
 = 
¹ems_libi2c_£nd_¡¬t
(
mÜ
);

219 ià(
	grc
 =ð
RTEMS_SUCCESSFUL
) {

220 
rc
 = 
¹ems_libi2c_£nd_addr
(
mÜ
,
TRUE
);

226 ià(
	grc
 =ð
RTEMS_SUCCESSFUL
) {

227 
rc
 = -
¹ems_libi2c_ioùl
(
mÜ
,

228 
RTEMS_LIBI2C_IOCTL_SET_TFRMODE
,

229 &
tä_mode
);

234 ià(
	grc
 =ð
RTEMS_SUCCESSFUL
) {

235 
cmdbuf
[0] = 
SPI_MEM_CMD_PP
;

236 ià(
	gmem_·¿m_±r
->
	gmem_size
 > 0x10000 ) {

237 
	gcmdbuf
[1] = (
off
 >> 16) & 0xff;

238 
	gcmdbuf
[2] = (
off
 >> 8) & 0xff;

239 
	gcmdbuf
[3] = (
off
 >> 0) & 0xff;

240 
	gcmd_size
 = 4;

242 ià(
	gmem_·¿m_±r
->
	gmem_size
 > 256) {

243 
	gcmdbuf
[1] = (
off
 >> 8) & 0xff;

244 
	gcmdbuf
[2] = (
off
 >> 0) & 0xff;

245 
	gcmd_size
 = 3;

248 
	gcmdbuf
[1] = (
off
 >> 0) & 0xff;

249 
	gcmd_size
 = 1;

252 
	g»t_út
 = 
¹ems_libi2c_wre_bys
(
mÜ
,
cmdbuf
,
cmd_size
);

253 ià(
	g»t_út
 < 0) {

254 
	grc
 = -
»t_út
;

260 ià(
	grc
 =ð
RTEMS_SUCCESSFUL
) {

261 
»t_út
 = 
¹ems_libi2c_wre_bys
(
mÜ
,
buf
,
cu¼_út
);

262 ià(
	g»t_út
 < 0) {

263 
	grc
 = -
»t_út
;

269 ià(
	grc
 =ð
RTEMS_SUCCESSFUL
) {

270 
rc
 = 
¹ems_libi2c_£nd_¡Ý
(
mÜ
);

276 ià(
	grc
 =ð
RTEMS_SUCCESSFUL
) {

277 
rc
 = 
¥i_memdrv_wa_ms
(5);

282 
	gbys_£Á
 +ð
cu¼_út
;

283 
	goff
 +ð
cu¼_út
;

284 
	gbuf
 +ð
cu¼_út
;

286 
	grw¬gs
->
	gbys_moved
 = 
bys_£Á
;

287  
	grc
;

293 
¹ems_¡©us_code
 
	g¥i_memdrv_»ad


301 
¹ems_deviû_majÜ_numb
 
	gmajÜ
,

302 
¹ems_deviû_mÜ_numb
 
	gmÜ
,

303 *
	g¬g


310 
¹ems_¡©us_code
 
	grc
 = 
RTEMS_SUCCESSFUL
;

311 
¹ems_libio_rw_¬gs_t
 *
	grw¬gs
 = 
¬g
;

312 
off_t
 
	goff
 = 
rw¬gs
->
off£t
;

313 
	gút
 = 
rw¬gs
->
couÁ
;

314 *
	gbuf
 = (*)
rw¬gs
->
bufãr
;

315 
	gcmdbuf
[4];

316 
	g»t_út
 = 0;

317 
	gcmd_size
;

318 
¥i_memdrv_·¿m_t
 *
	gmem_·¿m_±r
;

319 
¹ems_libi2c_tä_mode_t
 
	gtä_mode
 = {

320 .
baud¿
 = 20000000,

321 .
	gbs_³r_ch¬
 = 8,

322 .
	glsb_f¡
 = 
FALSE
,

323 .
	gþock_v
 = 
FALSE
,

324 .
	gþock_phs
 = 
FALSE


330 ià(
	grc
 =ð
RTEMS_SUCCESSFUL
) {

331 
rc
 = 
¥i_memdrv_mÜ2·¿m_±r
(
mÜ
,&
mem_·¿m_±r
);

336 ià(
	grc
 =ð
RTEMS_SUCCESSFUL
) {

337 ià((
út
 <= 0) ||

338 (
út
 > 
mem_·¿m_±r
->
mem_size
) ||

339 (
off
 > (
mem_·¿m_±r
->
mem_size
-
út
))) {

340 
rc
 = 
RTEMS_INVALID_SIZE
;

342 ià(
	gbuf
 =ð
NULL
) {

343 
rc
 = 
RTEMS_INVALID_ADDRESS
;

349 ià(
	grc
 =ð
RTEMS_SUCCESSFUL
) {

350 
rc
 = 
¹ems_libi2c_£nd_¡¬t
(
mÜ
);

355 ià(
	grc
 =ð
RTEMS_SUCCESSFUL
) {

356 
tä_mode
.
baud¿
 = 
mem_·¿m_±r
->baudrate;

357 
	grc
 = -
¹ems_libi2c_ioùl
(
mÜ
,

358 
RTEMS_LIBI2C_IOCTL_SET_TFRMODE
,

359 &
tä_mode
);

364 ià(
	grc
 =ð
RTEMS_SUCCESSFUL
) {

365 
rc
 = 
¹ems_libi2c_£nd_addr
(
mÜ
,
TRUE
);

368 ià(
	goff
 >ð
mem_·¿m_±r
->
mem_size
) {

375 ià(
rc
 =ð
RTEMS_SUCCESSFUL
) {

376 
cmdbuf
[0] = 
SPI_MEM_CMD_RDSR
;

377 
	g»t_út
 = 
¹ems_libi2c_wre_bys
(
mÜ
,
cmdbuf
,1);

378 ià(
	g»t_út
 < 0) {

379 
	grc
 = -
»t_út
;

387 ià(
	grc
 =ð
RTEMS_SUCCESSFUL
) {

388 
cmdbuf
[0] = 
SPI_MEM_CMD_READ
;

389 ià(
	gmem_·¿m_±r
->
	gmem_size
 > 0x10000 ) {

390 
	gcmdbuf
[1] = (
off
 >> 16) & 0xff;

391 
	gcmdbuf
[2] = (
off
 >> 8) & 0xff;

392 
	gcmdbuf
[3] = (
off
 >> 0) & 0xff;

393 
	gcmd_size
 = 4;

395 ià(
	gmem_·¿m_±r
->
	gmem_size
 > 256) {

396 
	gcmdbuf
[1] = (
off
 >> 8) & 0xff;

397 
	gcmdbuf
[2] = (
off
 >> 0) & 0xff;

398 
	gcmd_size
 = 3;

401 
	gcmdbuf
[1] = (
off
 >> 0) & 0xff;

402 
	gcmd_size
 = 1;

404 
	g»t_út
 = 
¹ems_libi2c_wre_bys
(
mÜ
,
cmdbuf
,
cmd_size
);

405 ià(
	g»t_út
 < 0) {

406 
	grc
 = -
»t_út
;

413 ià(
	grc
 =ð
RTEMS_SUCCESSFUL
) {

414 
»t_út
 = 
¹ems_libi2c_»ad_bys
 (
mÜ
,
buf
,
út
);

415 ià(
	g»t_út
 < 0) {

416 
	grc
 = -
»t_út
;

423 ià(
	grc
 =ð
RTEMS_SUCCESSFUL
) {

424 
rc
 = 
¹ems_libi2c_£nd_¡Ý
(
mÜ
);

426 
	grw¬gs
->
	gbys_moved
 = (
rc
 =ð
RTEMS_SUCCESSFUL
è? 
»t_út
 : 0;

428  
	grc
;

434 
¹ems_driv_add»ss_bË
 
	g¥i_memdrv_rw_Ýs
 = {

435 .
»ad_y
 = 
¥i_memdrv_»ad
,

436 .
	gwre_y
 = 
¥i_memdrv_wre


439 
¹ems_driv_add»ss_bË
 
	g¥i_memdrv_ro_Ýs
 = {

440 .
»ad_y
 = 
¥i_memdrv_»ad
,

	@src/libchip/i2c/spi-memdrv.h

20 #iâdeà
_LIBCHIP_SPI_MEMDRV_H


21 
	#_LIBCHIP_SPI_MEMDRV_H


	)

23 
	~<¹ems/libi2c.h
>

25 #ifdeà
__ýlu¥lus


32 
¹ems_¡©us_code
 
¥i_memdrv_wre


40 
¹ems_deviû_majÜ_numb
 
majÜ
,

41 
¹ems_deviû_majÜ_numb
 
mÜ
,

42 *
¬g


52 
¹ems_¡©us_code
 
¥i_memdrv_»ad


60 
¹ems_deviû_majÜ_numb
 
majÜ
,

61 
¹ems_deviû_majÜ_numb
 
mÜ
,

62 *
¬g


70 
ut32_t
 
baud¿
;

71 
boÞ
 
a£_befÜe_´og¿m
;

72 
ut32_t
 
em±y_¡©e
;

73 
ut32_t
 
·ge_size
;

74 
ut32_t
 
£ùÜ_size
;

75 
ut32_t
 
mem_size
;

76 } 
	t¥i_memdrv_·¿m_t
;

79 
¹ems_libi2c_drv_t
 
libi2c_drv_y
;

80 
¥i_memdrv_·¿m_t
 
¥i_memdrv_·¿m
;

81 } 
	t¥i_memdrv_t
;

83 
¹ems_driv_add»ss_bË
 
¥i_memdrv_rw_Ýs
;

84 
¹ems_driv_add»ss_bË
 
¥i_memdrv_ro_Ýs
;

86 #ifdeà
__ýlu¥lus


	@src/libchip/i2c/spi-sd-card.c

20 
	~<¡dio.h
>

21 
	~<¡rg.h
>

22 
	~<ºo.h
>

23 
	~<y³s.h
>

25 
	~<¹ems.h
>

26 
	~<¹ems/libi2c.h
>

27 
	~<¹ems/libio.h
>

28 
	~<¹ems/diskdevs.h
>

29 
	~<¹ems/blkdev.h
>

31 
	~<libch/¥i-sd-ÿrd.h
>

33 
	~<¹ems/¡©us-checks.h
>

40 
le
 
ut16_t
 
	$sd_ÿrd_g_ut16
ÐcÚ¡ 
ut8_t
 *
s
)

42  (
ut16_t
è((
s
 [0] << 8) | s [1]);

43 
	}
}

45 
le
 
ut32_t
 
	$sd_ÿrd_g_ut32
ÐcÚ¡ 
ut8_t
 *
s
)

47  ((
ut32_t
è
s
 [0] << 24) | ((uint32_t) s [1] << 16) | ((uint32_t) s [2] << 8) | (uint32_t) s [3];

48 
	}
}

50 
le
 
	$sd_ÿrd_put_ut16
Ð
ut16_t
 
v
, 
ut8_t
 *
s
)

52 *
s
++ = (
ut8_t
è(
v
 >> 8);

53 *
s
 = (
ut8_t
è(
v
);

54 
	}
}

56 
le
 
	$sd_ÿrd_put_ut32
Ð
ut32_t
 
v
, 
ut8_t
 *
s
)

58 *
s
++ = (
ut8_t
è(
v
 >> 24);

59 *
s
++ = (
ut8_t
è(
v
 >> 16);

60 *
s
++ = (
ut8_t
è(
v
 >> 8);

61 *
s
 = (
ut8_t
è(
v
);

62 
	}
}

66 
	#SD_CARD_BUSY_TOKEN
 0

	)

68 
	#SD_CARD_BLOCK_SIZE_DEFAULT
 512

	)

70 
	#SD_CARD_COMMAND_RESPONSE_START
 7

	)

77 
	#SD_CARD_CMD_GO_IDLE_STATE
 0

	)

78 
	#SD_CARD_CMD_SEND_OP_COND
 1

	)

79 
	#SD_CARD_CMD_SEND_IF_COND
 8

	)

80 
	#SD_CARD_CMD_SEND_CSD
 9

	)

81 
	#SD_CARD_CMD_SEND_CID
 10

	)

82 
	#SD_CARD_CMD_STOP_TRANSMISSION
 12

	)

83 
	#SD_CARD_CMD_SEND_STATUS
 13

	)

84 
	#SD_CARD_CMD_SET_BLOCKLEN
 16

	)

85 
	#SD_CARD_CMD_READ_SINGLE_BLOCK
 17

	)

86 
	#SD_CARD_CMD_READ_MULTIPLE_BLOCK
 18

	)

87 
	#SD_CARD_CMD_SET_BLOCK_COUNT
 23

	)

88 
	#SD_CARD_CMD_WRITE_BLOCK
 24

	)

89 
	#SD_CARD_CMD_WRITE_MULTIPLE_BLOCK
 25

	)

90 
	#SD_CARD_CMD_PROGRAM_CSD
 27

	)

91 
	#SD_CARD_CMD_SET_WRITE_PROT
 28

	)

92 
	#SD_CARD_CMD_CLR_WRITE_PROT
 29

	)

93 
	#SD_CARD_CMD_SEND_WRITE_PROT
 30

	)

94 
	#SD_CARD_CMD_TAG_SECTOR_START
 32

	)

95 
	#SD_CARD_CMD_TAG_SECTOR_END
 33

	)

96 
	#SD_CARD_CMD_UNTAG_SECTOR
 34

	)

97 
	#SD_CARD_CMD_TAG_ERASE_GROUP_START
 35

	)

98 
	#SD_CARD_CMD_TAG_ERASE_GROUP_END
 36

	)

99 
	#SD_CARD_CMD_UNTAG_ERASE_GROUP
 37

	)

100 
	#SD_CARD_CMD_ERASE
 38

	)

101 
	#SD_CARD_CMD_LOCK_UNLOCK
 42

	)

102 
	#SD_CARD_CMD_APP_CMD
 55

	)

103 
	#SD_CARD_CMD_GEN_CND
 56

	)

104 
	#SD_CARD_CMD_READ_OCR
 58

	)

105 
	#SD_CARD_CMD_CRC_ON_OFF
 59

	)

114 
	#SD_CARD_ACMD_SD_SEND_OP_COND
 41

	)

123 
	#SD_CARD_FLAG_HCS
 0x40000000U

	)

125 
	#SD_CARD_FLAG_VHS_2_7_TO_3_3
 0x00000100U

	)

127 
	#SD_CARD_FLAG_CHECK_PATTERN
 0x000000¯U

	)

136 
	#SD_CARD_COMMAND_SET_COMMAND
Ð
c
, 
cmd
è(cè[1] = (
ut8_t
è(0x40 + ((cmdè& 0x3f))

	)

138 
	#SD_CARD_COMMAND_SET_ARGUMENT
Ð
c
, 
¬g
è
	`sd_ÿrd_put_ut32
Ð×rg), &((cè[2]))

	)

140 
	#SD_CARD_COMMAND_SET_CRC7
Ð
c
, 
üc7
è((cè[6] = ((üc7è<< 1è| 1U)

	)

142 
	#SD_CARD_COMMAND_GET_CRC7
Ð
c
è((cè[6] >> 1)

	)

151 
	#SD_CARD_IS_RESPONSE
Ð
r
è((Ôè& 0x80è=ð0)

	)

153 
	#SD_CARD_IS_ERRORLESS_RESPONSE
Ð
r
è((Ôè& 0x7eè=ð0)

	)

155 
	#SD_CARD_IS_NOT_IDLE_RESPONSE
Ð
r
è((Ôè& 0x81è=ð0)

	)

157 
	#SD_CARD_IS_DATA_ERROR
Ð
r
è((Ôè& 0xe0è=ð0)

	)

159 
	#SD_CARD_IS_DATA_REJECTED
Ð
r
è((Ôè& 0x1fè!ð0x05)

	)

168 
	#SD_CARD_CID_SIZE
 16

	)

170 
	#SD_CARD_CID_GET_MID
Ð
cid
è((cidè[0])

	)

171 
	#SD_CARD_CID_GET_OID
Ð
cid
è
	`sd_ÿrd_g_ut16
Ðcid + 1)

	)

172 
	#SD_CARD_CID_GET_PNM
Ð
cid
, 
i
è((è(cidè[3 + (i)])

	)

173 
	#SD_CARD_CID_GET_PRV
Ð
cid
è((cidè[9])

	)

174 
	#SD_CARD_CID_GET_PSN
Ð
cid
è
	`sd_ÿrd_g_ut32
Ðcid + 10)

	)

175 
	#SD_CARD_CID_GET_MDT
Ð
cid
è((cidè[14])

	)

176 
	#SD_CARD_CID_GET_CRC7
Ð
cid
è((cidè[15] >> 1)

	)

185 
	#SD_CARD_CSD_SIZE
 16

	)

187 
	#SD_CARD_CSD_GET_CSD_STRUCTURE
Ð
csd
è((csdè[0] >> 6)

	)

188 
	#SD_CARD_CSD_GET_SPEC_VERS
Ð
csd
è(((csdè[0] >> 2è& 0xf)

	)

189 
	#SD_CARD_CSD_GET_TAAC
Ð
csd
è((csdè[1])

	)

190 
	#SD_CARD_CSD_GET_NSAC
Ð
csd
è((
ut32_t
è(csdè[2])

	)

191 
	#SD_CARD_CSD_GET_TRAN_SPEED
Ð
csd
è((csdè[3])

	)

192 
	#SD_CARD_CSD_GET_C_SIZE
Ð
csd
è((((
ut32_t
è(csdè[6] & 0x3è<< 10è+ (((ut32_tè(csdè[7]è<< 2è+ ((((ut32_tè(csdè[8]è>> 6è& 0x3))

	)

193 
	#SD_CARD_CSD_GET_C_SIZE_MULT
Ð
csd
è((((csdè[9] & 0x3è<< 1è+ (((csdè[10] >> 7è& 0x1))

	)

194 
	#SD_CARD_CSD_GET_READ_BLK_LEN
Ð
csd
è((
ut32_t
è(csdè[5] & 0xf)

	)

195 
	#SD_CARD_CSD_GET_WRITE_BLK_LEN
Ð
csd
è((((
ut32_t
è(csdè[12] & 0x3è<< 2è+ ((((ut32_tè(csdè[13]è>> 6è& 0x3))

	)

196 
	#SD_CARD_CSD_1_GET_C_SIZE
Ð
csd
è((((
ut32_t
è(csdè[7] & 0x3fè<< 16è+ (((ut32_tè(csdè[8]è<< 8è+ (ut32_tè(csdè[9])

	)

200 
	#SD_CARD_INVALIDATE_RESPONSE_INDEX
Ð
e
èe->
»¥Ú£_dex
 = 
SD_CARD_COMMAND_SIZE


	)

207 
	#SD_CARD_START_BLOCK_SINGLE_BLOCK_READ
 0xã

	)

208 
	#SD_CARD_START_BLOCK_MULTIPLE_BLOCK_READ
 0xã

	)

209 
	#SD_CARD_START_BLOCK_SINGLE_BLOCK_WRITE
 0xã

	)

210 
	#SD_CARD_START_BLOCK_MULTIPLE_BLOCK_WRITE
 0xfc

	)

211 
	#SD_CARD_STOP_TRANSFER_MULTIPLE_BLOCK_WRITE
 0xfd

	)

220 
le
 
ut32_t
 
	$sd_ÿrd_block_numb
ÐcÚ¡ 
ut8_t
 *
csd
)

222 
ut32_t
 
size
 = 
	`SD_CARD_CSD_GET_C_SIZE
Ð
csd
);

223 
ut32_t
 
muÉ
 = 1U << (
	`SD_CARD_CSD_GET_C_SIZE_MULT
Ð
csd
) + 2);

224  (
size
 + 1è* 
muÉ
;

225 
	}
}

227 
le
 
ut32_t
 
	$sd_ÿrd_ÿ·cy
ÐcÚ¡ 
ut8_t
 *
csd
)

229 
ut32_t
 
block_size
 = 1U << 
	`SD_CARD_CSD_GET_READ_BLK_LEN
Ð
csd
);

230  
	`sd_ÿrd_block_numb
Ð
csd
è* 
block_size
;

231 
	}
}

233 
le
 
ut32_t
 
	$sd_ÿrd_ªsãr_¥d
ÐcÚ¡ 
ut8_t
 *
csd
)

235 
ut32_t
 
s
 = 
	`SD_CARD_CSD_GET_TRAN_SPEED
Ð
csd
);

236 
ut32_t
 
e
 = 
s
 & 0x7;

237 
ut32_t
 
m
 = 
s
 >> 3;

238 
e
) {

239 0: 
s
 = 10000; ;

240 1: 
s
 = 100000; ;

241 2: 
s
 = 1000000; ;

242 3: 
s
 = 10000000; ;

243 : 
s
 = 0; ;

245 
m
) {

246 1: 
s
 *= 10; ;

247 2: 
s
 *= 12; ;

248 3: 
s
 *= 13; ;

249 4: 
s
 *= 15; ;

250 5: 
s
 *= 20; ;

251 6: 
s
 *= 25; ;

252 7: 
s
 *= 30; ;

253 8: 
s
 *= 35; ;

254 9: 
s
 *= 40; ;

255 10: 
s
 *= 45; ;

256 11: 
s
 *= 50; ;

257 12: 
s
 *= 55; ;

258 13: 
s
 *= 60; ;

259 14: 
s
 *= 70; ;

260 15: 
s
 *= 80; ;

261 : 
s
 *= 0; ;

263  
s
;

264 
	}
}

266 
le
 
ut32_t
 
	$sd_ÿrd_acûss_time
ÐcÚ¡ 
ut8_t
 *
csd
)

268 
ut32_t
 
ac
 = 
	`SD_CARD_CSD_GET_TAAC
Ð
csd
);

269 
ut32_t
 
e
 = 
ac
 & 0x7;

270 
ut32_t
 
m
 = 
ac
 >> 3;

271 
e
) {

272 0: 
ac
 = 1; ;

273 1: 
ac
 = 10; ;

274 2: 
ac
 = 100; ;

275 3: 
ac
 = 1000; ;

276 4: 
ac
 = 10000; ;

277 5: 
ac
 = 100000; ;

278 6: 
ac
 = 1000000; ;

279 7: 
ac
 = 10000000; ;

280 : 
ac
 = 0; ;

282 
m
) {

283 1: 
ac
 *= 10; ;

284 2: 
ac
 *= 12; ;

285 3: 
ac
 *= 13; ;

286 4: 
ac
 *= 15; ;

287 5: 
ac
 *= 20; ;

288 6: 
ac
 *= 25; ;

289 7: 
ac
 *= 30; ;

290 8: 
ac
 *= 35; ;

291 9: 
ac
 *= 40; ;

292 10: 
ac
 *= 45; ;

293 11: 
ac
 *= 50; ;

294 12: 
ac
 *= 55; ;

295 13: 
ac
 *= 60; ;

296 14: 
ac
 *= 70; ;

297 15: 
ac
 *= 80; ;

298 : 
ac
 *= 0; ;

300  
ac
 / 10;

301 
	}
}

303 
le
 
ut32_t
 
	$sd_ÿrd_max_acûss_time
ÐcÚ¡ 
ut8_t
 *
csd
, 
ut32_t
 
ªsãr_¥d
)

305 
ut64_t
 
ac
 = 
	`sd_ÿrd_acûss_time
Ð
csd
);

306 
ut32_t
 
ac_100ms
 = 
ªsãr_¥d
 / 80;

307 
ut32_t
 
n
 = 
	`SD_CARD_CSD_GET_NSAC
Ð
csd
) * 100;

310 
ac
 =ø* 
ªsãr_¥d
 / 80000000;

311 
ac
 =ø+ 100*
n
;

312 ià((
ut32_t
)
ac
 > 
ac_100ms
)

313  
ac_100ms
;

315  (
ut32_t
)
ac
;

316 
	}
}

328 
ut8_t
 
	$sd_ÿrd_compu_üc7
 (
ut8_t
 *
d©a
, 
size_t
 
Ën
)

330 
ut8_t
 
e
, 
f
, 
üc
;

331 
size_t
 
i
;

333 
üc
 = 0;

334 
i
 = 0; i < 
Ën
; i++) {

335 
e
 = 
üc
 ^ 
d©a
[
i
];

336 
f
 = 
e
 ^ (e >> 4) ^ (e >> 7);

337 
üc
 = (
f
 << 1) ^ (f << 4);

339  
üc
 >> 1;

340 
	}
}

342 
ut16_t
 
	$sd_ÿrd_compu_üc16
 (
ut8_t
 *
d©a
, 
size_t
 
Ën
)

344 
ut8_t
 
s
, 
t
;

345 
ut16_t
 
üc
;

346 
size_t
 
i
;

348 
üc
 = 0;

349 
i
 = 0; i < 
Ën
; i++) {

350 
s
 = 
d©a
[
i
] ^ (
üc
 >> 8);

351 
t
 = 
s
 ^ (s >> 4);

352 
üc
 = (üø<< 8è^ 
t
 ^ (t << 5) ^ (t << 12);

354  
üc
;

355 
	}
}

364 
le
 
	$sd_ÿrd_quy
Ð
sd_ÿrd_driv_y
 *
e
, 
ut8_t
 *

, 
n
)

366  
	`¹ems_libi2c_»ad_bys
Ð
e
->
bus
, 

, 
n
);

367 
	}
}

369 
	$sd_ÿrd_wa
Ð
sd_ÿrd_driv_y
 *
e
)

371 
rv
 = 0;

372 
r
 = 0;

373 
n
 = 2;

377 
»s
 = 
e
->
n_ac_max
 * 25 / 10;

381 
wa_time_bys
 = (
»s
 + 149) / 150;

382 
e
->
busy
) {

384 
rv
 = 
	`sd_ÿrd_quy
Ð
e
,->
»¥Ú£
, 
n
);

385 
	`RTEMS_CHECK_RV
Ð
rv
, "Busy");

388 
r
 = 0; < 
n
; ++r) {

389 ià(
e
->
»¥Ú£
 [
r
] !ð
SD_CARD_BUSY_TOKEN
) {

390 
e
->
busy
 = 
çl£
;

394 
»s
 -ð
n
;

395 ià(
»s
 <= 0) {

396  -
RTEMS_TIMEOUT
;

399 ià(
e
->
scheduË_if_busy
) {

400 
ut64_t
 
wa_time_us
 = 
wa_time_bys
;

401 
wa_time_us
 *= 8000000;

402 
wa_time_us
 /ð
e
->
ªsãr_mode
.
baud¿
;

403 
	`¹ems_sk_wake_aá
Ð
	`RTEMS_MICROSECONDS_TO_TICKS
(
wa_time_us
));

404 
»s
 -ð
wa_time_bys
;

405 
wa_time_bys
 = wait_time_bytes * 15 / 10;

407 
n
 = 
SD_CARD_COMMAND_SIZE
;

411 
	}
}

413 
	$sd_ÿrd_£nd_commªd
Ð
sd_ÿrd_driv_y
 *
e
, 
ut32_t
 
commªd
, ut32_
¬gumt
)

415 
rv
 = 0;

416 
¹ems_libi2c_»ad_wre_t
 
rw
 = {

417 .
rd_buf
 = 
e
->
»¥Ú£
,

418 .
wr_buf
 = 
e
->
commªd
,

419 .
by_út
 = 
SD_CARD_COMMAND_SIZE


421 
r
 = 0;

422 
ut8_t
 
üc7
;

424 
	`SD_CARD_INVALIDATE_RESPONSE_INDEX
Ð
e
);

427 
rv
 = 
	`sd_ÿrd_wa
Ð
e
);

428 
	`RTEMS_CHECK_RV
Ð
rv
, "Wait");

431 
	`SD_CARD_COMMAND_SET_COMMAND
Ð
e
->
commªd
, command);

432 
	`SD_CARD_COMMAND_SET_ARGUMENT
Ð
e
->
commªd
, 
¬gumt
);

433 
üc7
 = 
	`sd_ÿrd_compu_üc7
Ð
e
->
commªd
 + 1, 5);

434 
	`SD_CARD_COMMAND_SET_CRC7
Ð
e
->
commªd
, 
üc7
);

435 
rv
 = 
	`¹ems_libi2c_ioùl
Ð
e
->
bus
, 
RTEMS_LIBI2C_IOCTL_READ_WRITE
, &
rw
);

436 
	`RTEMS_CHECK_RV
Ð
rv
, "Write commandndeadesponse");

439 
r
 = 
SD_CARD_COMMAND_RESPONSE_START
; < 
SD_CARD_COMMAND_SIZE
; ++r) {

440 
	`RTEMS_DEBUG_PRINT
Ð"Tok [%02u]: 0x%02x\n", 
r
, 
e
->
»¥Ú£
 [r]);

441 
e
->
»¥Ú£_dex
 = 
r
;

442 ià(
	`SD_CARD_IS_RESPONSE
Ð
e
->
»¥Ú£
 [
r
])) {

443 ià(
	`SD_CARD_IS_ERRORLESS_RESPONSE
Ð
e
->
»¥Ú£
 [
r
])) {

446 
	`RTEMS_SYSLOG_ERROR
Ð"Commªd¼Ü [%02i]: 0x%02" 
PRIx8
 "\n", 
r
, 
e
->
»¥Ú£
 [r]);

447 
sd_ÿrd_£nd_commªd_rÜ
;

449 } ià(
e
->
»¥Ú£
 [
r
] !ð
SD_CARD_IDLE_TOKEN
) {

450 
	`RTEMS_SYSLOG_ERROR
Ð"UÃx³ùedok [%02i]: 0x%02" 
PRIx8
 "\n", 
r
, 
e
->
»¥Ú£
 [r]);

451 
sd_ÿrd_£nd_commªd_rÜ
;

455 
	`RTEMS_SYSLOG_ERROR
( "Timeout\n");

457 
sd_ÿrd_£nd_commªd_rÜ
:

459 
	`RTEMS_SYSLOG_ERROR
( "Response:");

460 
r
 = 0; < 
SD_CARD_COMMAND_SIZE
; ++r) {

461 ià(
e
->
»¥Ú£_dex
 =ð
r
) {

462 
	`RTEMS_SYSLOG_PRINT
Ð" %02" 
PRIx8
 ":[%02" PRIx8 "]", 
e
->
commªd
 [
r
],->
»¥Ú£
 [r]);

464 
	`RTEMS_SYSLOG_PRINT
Ð" %02" 
PRIx8
 ":%02" PRIx8 "", 
e
->
commªd
 [
r
],->
»¥Ú£
 [r]);

467 
	`RTEMS_SYSLOG_PRINT
( "\n");

469  -
RTEMS_IO_ERROR
;

470 
	}
}

472 
	$sd_ÿrd_£nd_»gi¡_commªd
Ð
sd_ÿrd_driv_y
 *
e
, 
ut32_t
 
commªd
, ut32_
¬gumt
, ut32_*
»g
)

474 
rv
 = 0;

475 
ut8_t
 
üc7
;

477 
rv
 = 
	`sd_ÿrd_£nd_commªd
Ð
e
, 
commªd
, 
¬gumt
);

478 
	`RTEMS_CHECK_RV
Ð
rv
, "Send command");

480 ià(
e
->
»¥Ú£_dex
 + 5 > 
SD_CARD_COMMAND_SIZE
) {

485 
	`RTEMS_SYSLOG_ERROR
( "Unexpectedesponseosition\n");

486  -
RTEMS_IO_ERROR
;

489 
üc7
 = 
	`sd_ÿrd_compu_üc7
Ð
e
->
»¥Ú£
 +->
»¥Ú£_dex
, 5);

490 ià(
üc7
 !ð
	`SD_CARD_COMMAND_GET_CRC7
Ð
e
->
»¥Ú£
 +->
»¥Ú£_dex
) &&

491 
	`SD_CARD_COMMAND_GET_CRC7
Ð
e
->
»¥Ú£
 +->
»¥Ú£_dex
) != 0x7f) {

492 
	`RTEMS_SYSLOG_ERROR
( "CRC check failed onegister command\n");

493  -
RTEMS_IO_ERROR
;

496 *
»g
 = 
	`sd_ÿrd_g_ut32
Ð
e
->
»¥Ú£
 +->
»¥Ú£_dex
 + 1);

499 
	}
}

501 
	$sd_ÿrd_¡Ý_muÉË_block_»ad
Ð
sd_ÿrd_driv_y
 *
e
)

503 
rv
 = 0;

504 
ut8_t
 
üc7
;

506 
	`SD_CARD_COMMAND_SET_COMMAND
Ð
e
->
commªd
, 
SD_CARD_CMD_STOP_TRANSMISSION
);

507 
	`SD_CARD_COMMAND_SET_ARGUMENT
Ð
e
->
commªd
, 0);

509 
üc7
 = 0x30;

510 
	`SD_CARD_COMMAND_SET_CRC7
Ð
e
->
commªd
, 
üc7
);

511 
rv
 = 
	`¹ems_libi2c_wre_bys
Ð
e
->
bus
,->
commªd
, 
SD_CARD_COMMAND_SIZE
);

512 
	`RTEMS_CHECK_RV
Ð
rv
, "Write stopransferoken");

515 
	}
}

517 
	$sd_ÿrd_¡Ý_muÉË_block_wre
Ð
sd_ÿrd_driv_y
 *
e
)

519 
rv
 = 0;

520 
ut8_t
 
¡Ý_ªsãr
 [3] = { 
SD_CARD_IDLE_TOKEN
, 
SD_CARD_STOP_TRANSFER_MULTIPLE_BLOCK_WRITE
, SD_CARD_IDLE_TOKEN };

523 
rv
 = 
	`sd_ÿrd_wa
Ð
e
);

524 
	`RTEMS_CHECK_RV
Ð
rv
, "Wait");

527 
rv
 = 
	`¹ems_libi2c_wre_bys
Ð
e
->
bus
, 
¡Ý_ªsãr
, 3);

528 
	`RTEMS_CHECK_RV
Ð
rv
, "Write stopransferoken");

531 
e
->
busy
 = 
ue
;

534 
	}
}

536 
	$sd_ÿrd_»ad
Ð
sd_ÿrd_driv_y
 *
e
, 
ut8_t
 
¡¬t_tok
, ut8_*

, 
n
)

538 
rv
 = 0;

541 
r
 = 
e
->
»¥Ú£_dex
 + 1;

544 
»¥Ú£_size
 = 
SD_CARD_COMMAND_SIZE
;

547 
ut8_t
 *
»¥Ú£
 = 
e
->response;

550 
i
 = 0;

553 
ut16_t
 
üc16
;

556 
»s
 = 
e
->
n_ac_max
;

558 
	`SD_CARD_INVALIDATE_RESPONSE_INDEX
Ð
e
);

560 
ue
) {

561 
	`RTEMS_DEBUG_PRINT
Ð"Srch from %uØ%u\n", 
r
, 
»¥Ú£_size
 - 1);

564 
»s
 -ð(
»¥Ú£_size
 - 
r
);

565 
r
 < 
»¥Ú£_size
) {

566 
	`RTEMS_DEBUG_PRINT
Ð"Tok [%02u]: 0x%02x\n", 
r
, 
»¥Ú£
 [r]);

567 ià(
»¥Ú£
 [
r
] =ð
¡¬t_tok
) {

569 ++
r
;

570 
sd_ÿrd_»ad_¡¬t
;

571 } ià(
	`SD_CARD_IS_DATA_ERROR
Ð
»¥Ú£
 [
r
])) {

572 
	`RTEMS_SYSLOG_ERROR
Ð"D©¨rÜok [%02i]: 0x%02" 
PRIx8
 "\n", 
r
, 
»¥Ú£
 [r]);

573  -
RTEMS_IO_ERROR
;

574 } ià(
»¥Ú£
 [
r
] !ð
SD_CARD_IDLE_TOKEN
) {

575 
	`RTEMS_SYSLOG_ERROR
Ð"UÃx³ùedok [%02i]: 0x%02" 
PRIx8
 "\n", 
r
, 
»¥Ú£
 [r]);

576  -
RTEMS_IO_ERROR
;

578 ++
r
;

581 ià(
»s
 <= 0) {

582 
	`RTEMS_SYSLOG_ERROR
( "Timeout\n");

583  -
RTEMS_IO_ERROR
;

586 ià(
e
->
scheduË_if_busy
)

587 
	`¹ems_sk_wake_aá
Ð
RTEMS_YIELD_PROCESSOR
);

593 
»¥Ú£
 = 

;

594 
»¥Ú£_size
 = 50;

595 ià(
»¥Ú£_size
 > 
n
)

596 
»¥Ú£_size
 = 
n
;

597 
rv
 = 
	`sd_ÿrd_quy
Ð
e
, 
»¥Ú£
, 
»¥Ú£_size
);

598 
	`RTEMS_CHECK_RV
Ð
rv
, "Query data startoken");

601 
r
 = 0;

604 
sd_ÿrd_»ad_¡¬t
:

607 
r
 < 
»¥Ú£_size
 && 
i
 < 
n
) {

608 

 [
i
++] = 
»¥Ú£
 [
r
++];

612 ià(
i
 < 
n
) {

613 
rv
 = 
	`sd_ÿrd_quy
Ð
e
, &

 [
i
], 
n
 - i);

614 
	`RTEMS_CHECK_RV
Ð
rv
, "Read data");

615 
i
 +ð
rv
;

619 
rv
 = 
	`sd_ÿrd_quy
Ð
e
,->
»¥Ú£
, 3);

620 
	`RTEMS_CHECK_RV
Ð
rv
, "Read CRC 16");

622 
üc16
 = 
	`sd_ÿrd_compu_üc16
 (

, 
n
);

623 ià((
e
->
»¥Ú£
[0] !ð((
üc16
 >> 8) & 0xff)) ||

624 (
e
->
»¥Ú£
[1] !ð(
üc16
 & 0xff))) {

625 
	`RTEMS_SYSLOG_ERROR
( "CRC check failed onead\n");

626  -
RTEMS_IO_ERROR
;

629  
i
;

630 
	}
}

632 
	$sd_ÿrd_wre
Ð
sd_ÿrd_driv_y
 *
e
, 
ut8_t
 
¡¬t_tok
, ut8_*
out
, 
n
)

634 
rv
 = 0;

635 
ut8_t
 
üc16_bys
 [2] = { 0, 0 };

636 
ut16_t
 
üc16
;

639 
o
 = 0;

642 
rv
 = 
	`sd_ÿrd_wa
Ð
e
);

643 
	`RTEMS_CHECK_RV
Ð
rv
, "Wait");

646 
rv
 = 
	`¹ems_libi2c_wre_bys
Ð
e
->
bus
, &
¡¬t_tok
, 1);

647 
	`RTEMS_CHECK_RV
Ð
rv
, "Write data startoken");

650 
o
 = 
	`¹ems_libi2c_wre_bys
Ð
e
->
bus
, 
out
, 
n
);

651 
	`RTEMS_CHECK_RV
Ð
o
, "Write data");

654 
üc16
 = 
	`sd_ÿrd_compu_üc16
(
out
, 
n
);

655 
üc16_bys
[0] = (
üc16
>>8) & 0xff;

656 
üc16_bys
[1] = (
üc16
) & 0xff;

657 
rv
 = 
	`¹ems_libi2c_wre_bys
Ð
e
->
bus
, 
üc16_bys
, 2);

658 
	`RTEMS_CHECK_RV
Ð
rv
, "Write CRC 16");

661 
rv
 = 
	`sd_ÿrd_quy
Ð
e
,->
»¥Ú£
, 2);

662 
	`RTEMS_CHECK_RV
Ð
rv
, "Read dataesponse");

663 ià(
	`SD_CARD_IS_DATA_REJECTED
Ð
e
->
»¥Ú£
 [0])) {

664 
	`RTEMS_SYSLOG_ERROR
Ð"D©¨»jeùed: 0x%02" 
PRIx8
 "\n", 
e
->
»¥Ú£
 [0]);

665  -
RTEMS_IO_ERROR
;

669 
e
->
busy
 = 
ue
;

671  
o
;

672 
	}
}

674 
le
 
¹ems_¡©us_code
 
	$sd_ÿrd_¡¬t
Ð
sd_ÿrd_driv_y
 *
e
)

676 
¹ems_¡©us_code
 
sc
 = 
RTEMS_SUCCESSFUL
;

677 
rv
 = 0;

679 
sc
 = 
	`¹ems_libi2c_£nd_¡¬t
Ð
e
->
bus
);

680 
	`RTEMS_CHECK_SC
Ð
sc
, "Send start");

682 
rv
 = 
	`¹ems_libi2c_ioùl
Ð
e
->
bus
, 
RTEMS_LIBI2C_IOCTL_SET_TFRMODE
, &e->
ªsãr_mode
);

683 
	`RTEMS_CHECK_RV_SC
Ð
rv
, "Setransfer mode");

685 
sc
 = 
	`¹ems_libi2c_£nd_addr
Ð
e
->
bus
, 1);

686 
	`RTEMS_CHECK_SC
Ð
sc
, "Sendddress");

688  
RTEMS_SUCCESSFUL
;

689 
	}
}

691 
le
 
¹ems_¡©us_code
 
	$sd_ÿrd_¡Ý
Ð
sd_ÿrd_driv_y
 *
e
)

693 
¹ems_¡©us_code
 
sc
 = 
RTEMS_SUCCESSFUL
;

695 
sc
 = 
	`¹ems_libi2c_£nd_¡Ý
Ð
e
->
bus
);

696 
	`RTEMS_CHECK_SC
Ð
sc
, "Send stop");

698  
RTEMS_SUCCESSFUL
;

699 
	}
}

701 
¹ems_¡©us_code
 
	$sd_ÿrd_
Ð
sd_ÿrd_driv_y
 *
e
)

703 
¹ems_¡©us_code
 
sc
 = 
RTEMS_SUCCESSFUL
;

704 
rv
 = 0;

705 
ut8_t
 
block
 [
SD_CARD_BLOCK_SIZE_DEFAULT
];

706 
ut32_t
 
ªsãr_¥d
 = 0;

707 
ut32_t
 
»ad_block_size
 = 0;

708 
ut32_t
 
wre_block_size
 = 0;

709 
ut8_t
 
csd_¡ruùu»
 = 0;

710 
ut64_t
 
ÿ·cy
 = 0;

711 
ut8_t
 
üc7
;

714 
boÞ
 
assume_sd
 = 
ue
;

720 
boÞ
 
high_ÿ·cy
 = 
ue
;

722 
boÞ
 
do_cmd58
 = 
ue
;

723 
ut32_t
 
cmd_¬g
 = 0;

724 
ut32_t
 
if_cÚd_¡
 = 
SD_CARD_FLAG_VHS_2_7_TO_3_3
 | 
SD_CARD_FLAG_CHECK_PATTERN
;

725 
ut32_t
 
if_cÚd_»g
 = 
if_cÚd_¡
;

728 
sc
 = 
	`sd_ÿrd_¡¬t
Ð
e
);

729 
	`RTEMS_CLEANUP_SC
Ð
sc
, 
sd_ÿrd_driv__þnup
, "Start");

732 
rv
 = 
	`sd_ÿrd_wa
Ð
e
);

733 
	`RTEMS_CLEANUP_RV_SC
Ð
rv
, 
sc
, 
sd_ÿrd_driv__þnup
, "Wait");

736 
	`mem£t
Ð
block
, 
SD_CARD_IDLE_TOKEN
, 
SD_CARD_BLOCK_SIZE_DEFAULT
);

737 
rv
 = 
	`¹ems_libi2c_wre_bys
Ð
e
->
bus
, 
block
, 
SD_CARD_BLOCK_SIZE_DEFAULT
);

738 
	`RTEMS_CLEANUP_RV_SC
Ð
rv
, 
sc
, 
sd_ÿrd_driv__þnup
, "Active chip select delay");

741 
sc
 = 
	`sd_ÿrd_¡Ý
Ð
e
);

742 
	`RTEMS_CHECK_SC
Ð
sc
, "Stop");

745 
sc
 = 
	`¹ems_libi2c_£nd_¡¬t
Ð
e
->
bus
);

746 
	`RTEMS_CHECK_SC
Ð
sc
, "Send start");

749 
rv
 = 
	`¹ems_libi2c_ioùl
Ð
e
->
bus
, 
RTEMS_LIBI2C_IOCTL_SET_TFRMODE
, &e->
ªsãr_mode
);

750 
	`RTEMS_CLEANUP_RV_SC
Ð
rv
, 
sc
, 
sd_ÿrd_driv__þnup
, "Setransfer mode");

753 
rv
 = 
	`sd_ÿrd_quy
Ð
e
,->
»¥Ú£
, 
SD_CARD_COMMAND_SIZE
);

754 
	`RTEMS_CLEANUP_RV_SC
Ð
rv
, 
sc
, 
sd_ÿrd_driv__þnup
, "Inactive chip select delay");

757 
sc
 = 
	`¹ems_libi2c_£nd_addr
Ð
e
->
bus
, 1);

758 
	`RTEMS_CLEANUP_SC
Ð
sc
, 
sd_ÿrd_driv__þnup
, "Sendddress");

761 
	`sd_ÿrd_¡Ý_muÉË_block_wre
Ð
e
);

764 
	`sd_ÿrd_£nd_commªd
Ð
e
, 
SD_CARD_CMD_SEND_STATUS
, 0);

767 
	`sd_ÿrd_¡Ý_muÉË_block_»ad
Ð
e
);

770 
rv
 = 
	`sd_ÿrd_£nd_commªd
Ð
e
, 
SD_CARD_CMD_GO_IDLE_STATE
, 0);

771 
	`RTEMS_CLEANUP_RV_SC
Ð
rv
, 
sc
, 
sd_ÿrd_driv__þnup
, "Send: SD_CARD_CMD_GO_IDLE_STATE");

780 
rv
 = 
	`sd_ÿrd_£nd_»gi¡_commªd
Ð
e
, 
SD_CARD_CMD_SEND_IF_COND
, 
if_cÚd_»g
, &if_cond_reg);

788 ià(
rv
 < 0) {

790 
cmd_¬g
 = 0;

792 
cmd_¬g
 = 
SD_CARD_FLAG_HCS
;

796 
	`sd_ÿrd_£nd_commªd
Ð
e
, 
SD_CARD_CMD_CRC_ON_OFF
, 1);

799 
ue
) {

800 ià(
assume_sd
) {

802 
rv
 = 
	`sd_ÿrd_£nd_commªd
Ð
e
, 
SD_CARD_CMD_APP_CMD
, 0);

803 ià(
rv
 < 0) {

804 
	`RTEMS_SYSLOG
( "CMD55 failed. Assume MMCndry CMD1\n");

805 
assume_sd
 = 
çl£
;

813 
rv
 = 
	`sd_ÿrd_£nd_commªd
Ð
e
, 
SD_CARD_ACMD_SD_SEND_OP_COND
, 
cmd_¬g
);

814 ià(
rv
 < 0) {

819 
	`RTEMS_SYSLOG
( "ACMD41 failed. Assume MMCnd do CMD58 (once)hen CMD1\n");

820 
assume_sd
 = 
çl£
;

821 
cmd_¬g
 = 
SD_CARD_FLAG_HCS
;

822 
do_cmd58
 = 
ue
;

830 ià(
if_cÚd_»g
 !ð
if_cÚd_¡
) {

831 
	`RTEMS_CLEANUP_RV_SC
Ð-1, 
sc
, 
sd_ÿrd_driv__þnup
, "Bad voltage for SD");

843 ià(
do_cmd58
) {

844 
rv
 = 
	`sd_ÿrd_£nd_commªd
Ð
e
, 
SD_CARD_CMD_READ_OCR
, 
cmd_¬g
);

845 
	`RTEMS_CLEANUP_RV_SC
Ð
rv
, 
sc
, 
sd_ÿrd_driv__þnup
, "Failed CMD58 for MMC");

848 
do_cmd58
 = 
çl£
;

852 
rv
 = 
	`sd_ÿrd_£nd_commªd
Ð
e
, 
SD_CARD_CMD_SEND_OP_COND
, 0);

853 ià(
rv
 < 0) {

854 ià(
cmd_¬g
 != 0) {

860 
cmd_¬g
 = 0;

861 
do_cmd58
 = 
ue
;

862 
high_ÿ·cy
 = 
çl£
;

866 
	`RTEMS_CLEANUP_RV_SC
Ð
rv
, 
sc
, 
sd_ÿrd_driv__þnup
, "Failedo initialize MMC");

876 ià(
	`SD_CARD_IS_NOT_IDLE_RESPONSE
Ð
e
->
»¥Ú£
 [e->
»¥Ú£_dex
])) {

881 
	`¹ems_sk_wake_aá
Ð
RTEMS_YIELD_PROCESSOR
);

885 ià(
assume_sd
) {

886 ià(
cmd_¬g
 == 0) {

888 
high_ÿ·cy
 = 0;

890 
ut32_t
 
»g
 = 0;

898 
rv
 = 
	`sd_ÿrd_£nd_»gi¡_commªd
Ð
e
, 
SD_CARD_CMD_READ_OCR
, 0, &
»g
);

899 
	`RTEMS_CLEANUP_RV_SC
Ð
rv
, 
sc
, 
sd_ÿrd_driv__þnup
, "Failed CMD58 for SD 2.x");

902 
high_ÿ·cy
 = (
»g
 & 
SD_CARD_FLAG_HCS
) != 0;

909 ià(
high_ÿ·cy
) {

910 
ut32_t
 
»g
 = 0;

916 
rv
 = 
	`sd_ÿrd_£nd_»gi¡_commªd
Ð
e
, 
SD_CARD_CMD_READ_OCR
, 
cmd_¬g
, &
»g
);

917 
	`RTEMS_CLEANUP_RV_SC
Ð
rv
, 
sc
, 
sd_ÿrd_driv__þnup
, "Failed CMD58 for MMC 4.2");

920 
high_ÿ·cy
 = (
»g
 & 0x6000000è=ð
SD_CARD_FLAG_HCS
;

925 ià(
e
->
vbo£
) {

926 
rv
 = 
	`sd_ÿrd_£nd_commªd
Ð
e
, 
SD_CARD_CMD_SEND_CID
, 0);

927 
	`RTEMS_CLEANUP_RV_SC
Ð
rv
, 
sc
, 
sd_ÿrd_driv__þnup
, "Send: SD_CARD_CMD_SEND_CID");

928 
rv
 = 
	`sd_ÿrd_»ad
Ð
e
, 
SD_CARD_START_BLOCK_SINGLE_BLOCK_READ
, 
block
, 
SD_CARD_CID_SIZE
);

929 
	`RTEMS_CLEANUP_RV_SC
Ð
rv
, 
sc
, 
sd_ÿrd_driv__þnup
, "Read: SD_CARD_CMD_SEND_CID");

930 
	`RTEMS_SYSLOG
( "*** Card Identification ***\n");

931 
	`RTEMS_SYSLOG
Ð"Mªuçùu»¸ID : %" 
PRIu8
 "\n", 
	`SD_CARD_CID_GET_MID
Ð
block
));

932 
	`RTEMS_SYSLOG
Ð"OEM/AµliÿtiÚ ID : %" 
PRIu16
 "\n", 
	`SD_CARD_CID_GET_OID
Ð
block
));

933 
	`RTEMS_SYSLOG
(

935 
	`SD_CARD_CID_GET_PNM
Ð
block
, 0),

936 
	`SD_CARD_CID_GET_PNM
Ð
block
, 1),

937 
	`SD_CARD_CID_GET_PNM
Ð
block
, 2),

938 
	`SD_CARD_CID_GET_PNM
Ð
block
, 3),

939 
	`SD_CARD_CID_GET_PNM
Ð
block
, 4),

940 
	`SD_CARD_CID_GET_PNM
Ð
block
, 5)

942 
	`RTEMS_SYSLOG
Ð"ProduùevisiÚ : %" 
PRIu8
 "\n", 
	`SD_CARD_CID_GET_PRV
Ð
block
));

943 
	`RTEMS_SYSLOG
Ð"Produù sÈnumb : %" 
PRIu32
 "\n", 
	`SD_CARD_CID_GET_PSN
Ð
block
));

944 
	`RTEMS_SYSLOG
Ð"Mªuçùurg d© : %" 
PRIu8
 "\n", 
	`SD_CARD_CID_GET_MDT
Ð
block
));

945 
	`RTEMS_SYSLOG
Ð"7-b CRC checksum : %" 
PRIu8
 "\n", 
	`SD_CARD_CID_GET_CRC7
Ð
block
));

946 
üc7
 = 
	`sd_ÿrd_compu_üc7
Ð
block
, 15);

947 ià(
üc7
 !ð
	`SD_CARD_CID_GET_CRC7
Ð
block
))

948 
	`RTEMS_SYSLOG
Ð" Faed! (compud %02" 
PRIx8
 ")\n", 
üc7
);

954 
rv
 = 
	`sd_ÿrd_£nd_commªd
Ð
e
, 
SD_CARD_CMD_SEND_CSD
, 0);

955 
	`RTEMS_CLEANUP_RV_SC
Ð
rv
, 
sc
, 
sd_ÿrd_driv__þnup
, "Send: SD_CARD_CMD_SEND_CSD");

956 
rv
 = 
	`sd_ÿrd_»ad
Ð
e
, 
SD_CARD_START_BLOCK_SINGLE_BLOCK_READ
, 
block
, 
SD_CARD_CSD_SIZE
);

957 
	`RTEMS_CLEANUP_RV_SC
Ð
rv
, 
sc
, 
sd_ÿrd_driv__þnup
, "Read: SD_CARD_CMD_SEND_CSD");

959 
üc7
 = 
	`sd_ÿrd_compu_üc7
Ð
block
, 15);

960 ià(
üc7
 !ð
	`SD_CARD_CID_GET_CRC7
Ð
block
)) {

961 
	`RTEMS_SYSLOG
( "SD_CARD_CMD_SEND_CSD CRC failed\n");

962 
sc
 = 
RTEMS_IO_ERROR
;

963 
sd_ÿrd_driv__þnup
;

967 
csd_¡ruùu»
 = 
	`SD_CARD_CSD_GET_CSD_STRUCTURE
Ð
block
);

970 
ªsãr_¥d
 = 
	`sd_ÿrd_ªsãr_¥d
Ð
block
);

971 
e
->
ªsãr_mode
.
baud¿
 = 
ªsãr_¥d
;

972 
e
->
n_ac_max
 = 
	`sd_ÿrd_max_acûss_time
Ð
block
, 
ªsãr_¥d
);

975 ià(
csd_¡ruùu»
 =ð0 || !
assume_sd
) {

978 
»ad_block_size
 = 1U << 
	`SD_CARD_CSD_GET_READ_BLK_LEN
Ð
block
);

979 
e
->
block_size_shiá
 = 
	`SD_CARD_CSD_GET_WRITE_BLK_LEN
Ð
block
);

980 
wre_block_size
 = 1U << 
e
->
block_size_shiá
;

981 ià(
»ad_block_size
 < 
wre_block_size
) {

982 
	`RTEMS_SYSLOG_ERROR
( "Read block size smallerhan write block size\n");

983  -
RTEMS_IO_ERROR
;

985 
e
->
block_size
 = 
wre_block_size
;

986 
e
->
block_numb
 = 
	`sd_ÿrd_block_numb
Ð
block
);

987 
ÿ·cy
 = 
	`sd_ÿrd_ÿ·cy
Ð
block
);

988 } ià(
csd_¡ruùu»
 == 1) {

989 
ut32_t
 
c_size
 = 
	`SD_CARD_CSD_1_GET_C_SIZE
Ð
block
);

992 
e
->
block_size_shiá
 = 9;

993 
e
->
block_size
 = 512;

995 
e
->
block_numb
 = (
c_size
 + 1) * 1024;

996 
ÿ·cy
 = (
c_size
 + 1) * 512 * 1024;

997 
»ad_block_size
 = 512;

998 
wre_block_size
 = 512;

1001 
e
->
n_ac_max
 = 
ªsãr_¥d
 / 80;

1003 
	`RTEMS_DO_CLEANUP_SC
Ð
RTEMS_IO_ERROR
, 
sc
, 
sd_ÿrd_driv__þnup
, "Unexpected CSD Structureumber");

1007 ià(
e
->
vbo£
) {

1008 
	`RTEMS_SYSLOG
( "*** Card Specific Data ***\n");

1009 
	`RTEMS_SYSLOG
Ð"CSD suùu» : %" 
PRIu8
 "\n", 
	`SD_CARD_CSD_GET_CSD_STRUCTURE
Ð
block
));

1010 
	`RTEMS_SYSLOG
Ð"S³øvsiÚ : %" 
PRIu8
 "\n", 
	`SD_CARD_CSD_GET_SPEC_VERS
Ð
block
));

1011 
	`RTEMS_SYSLOG
Ð"Acûs tim[ns] : %" 
PRIu32
 "\n", 
	`sd_ÿrd_acûss_time
Ð
block
));

1012 
	`RTEMS_SYSLOG
Ð"Acûs tim[N] : %" 
PRIu32
 "\n", 
	`SD_CARD_CSD_GET_NSAC
Ð
block
)*100);

1013 
	`RTEMS_SYSLOG
Ð"Maxcûs tim[N] : %" 
PRIu32
 "\n", 
e
->
n_ac_max
);

1014 
	`RTEMS_SYSLOG
Ð"Maxd block siz[B] : %" 
PRIu32
 "\n", 
»ad_block_size
);

1015 
	`RTEMS_SYSLOG
Ð"Max wrblock siz[B] : %" 
PRIu32
 "\n", 
wre_block_size
);

1016 
	`RTEMS_SYSLOG
Ð"Block siz[B] : %" 
PRIu32
 "\n", 
e
->
block_size
);

1017 
	`RTEMS_SYSLOG
Ð"Blockumb : %" 
PRIu32
 "\n", 
e
->
block_numb
);

1018 
	`RTEMS_SYSLOG
Ð"C­acy [B] : %" 
PRIu64
 "\n", 
ÿ·cy
);

1019 
	`RTEMS_SYSLOG
Ð"Max¿nsã¸¥d [b/s] : %" 
PRIu32
 "\n", 
ªsãr_¥d
);

1022 ià(
high_ÿ·cy
) {

1024 
e
->
block_size_shiá
 = 0;

1025 } ià(
e
->
block_size_shiá
 == 10) {

1032 
e
->
block_size_shiá
 = 9;

1033 
e
->
block_size
 = 512;

1034 
e
->
block_numb
 *= 2;

1038 
rv
 = 
	`sd_ÿrd_£nd_commªd
Ð
e
, 
SD_CARD_CMD_SET_BLOCKLEN
,->
block_size
);

1039 
	`RTEMS_CLEANUP_RV_SC
Ð
rv
, 
sc
, 
sd_ÿrd_driv__þnup
, "Send: SD_CARD_CMD_SET_BLOCKLEN");

1042 
sc
 = 
	`sd_ÿrd_¡Ý
Ð
e
);

1043 
	`RTEMS_CHECK_SC
Ð
sc
, "Stop");

1045  
RTEMS_SUCCESSFUL
;

1047 
sd_ÿrd_driv__þnup
:

1050 
	`sd_ÿrd_¡Ý
Ð
e
);

1052  
sc
;

1053 
	}
}

1061 
	$sd_ÿrd_disk_block_»ad
Ð
sd_ÿrd_driv_y
 *
e
, 
¹ems_blkdev_»que¡
 *
r
)

1063 
¹ems_¡©us_code
 
sc
 = 
RTEMS_SUCCESSFUL
;

1064 
rv
 = 0;

1065 
ut32_t
 
¡¬t_add»ss
 = 
	`RTEMS_BLKDEV_START_BLOCK
 (
r
è<< 
e
->
block_size_shiá
;

1066 
ut32_t
 
i
 = 0;

1068 #ifdeà
DEBUG


1070 ià(
r
->
bufs
[0].
block
 >ð
e
->
block_numb
) {

1071 
	`RTEMS_SYSLOG_ERROR
( "Start blockumber out ofange");

1072  -
RTEMS_INTERNAL_ERROR
;

1073 } ià(
r
->
buâum
 > 
e
->
block_numb
 - 
	`RTEMS_BLKDEV_START_BLOCK
 (r)) {

1074 
	`RTEMS_SYSLOG_ERROR
( "Block count out ofange");

1075  -
RTEMS_INTERNAL_ERROR
;

1080 
sc
 = 
	`sd_ÿrd_¡¬t
Ð
e
);

1081 
	`RTEMS_CLEANUP_SC_RV
Ð
sc
, 
rv
, 
sd_ÿrd_disk_block_»ad_þnup
, "Start");

1083 ià(
r
->
buâum
 == 1) {

1084 #ifdeà
DEBUG


1086 ià(
r
->
bufs
 [0].
Ëngth
 !ð
e
->
block_size
) {

1087 
	`RTEMS_DO_CLEANUP_RV
Ð-
RTEMS_INTERNAL_ERROR
, 
rv
, 
sd_ÿrd_disk_block_»ad_þnup
, "Buffernd disk block sizereotqual");

1089 
	`RTEMS_DEBUG_PRINT
Ð"[01:01]: bufã¸ð0x%08x, sizð%u\n", 
r
->
bufs
 [0].
bufãr
,->buf [0].
Ëngth
);

1093 
rv
 = 
	`sd_ÿrd_£nd_commªd
Ð
e
, 
SD_CARD_CMD_READ_SINGLE_BLOCK
, 
¡¬t_add»ss
);

1094 
	`RTEMS_CLEANUP_RV
Ð
rv
, 
sd_ÿrd_disk_block_»ad_þnup
, "Send: SD_CARD_CMD_READ_SINGLE_BLOCK");

1095 
rv
 = 
	`sd_ÿrd_»ad
Ð
e
, 
SD_CARD_START_BLOCK_SINGLE_BLOCK_READ
, (
ut8_t
 *è
r
->
bufs
 [0].
bufãr
, (èe->
block_size
);

1096 
	`RTEMS_CLEANUP_RV
Ð
rv
, 
sd_ÿrd_disk_block_»ad_þnup
, "Read: SD_CARD_CMD_READ_SINGLE_BLOCK");

1099 
rv
 = 
	`sd_ÿrd_£nd_commªd
Ð
e
, 
SD_CARD_CMD_READ_MULTIPLE_BLOCK
, 
¡¬t_add»ss
);

1100 
	`RTEMS_CLEANUP_RV
Ð
rv
, 
sd_ÿrd_disk_block_»ad_¡Ý_þnup
, "Send: SD_CARD_CMD_READ_MULTIPLE_BLOCK");

1103 
i
 = 0; i < 
r
->
buâum
; ++i) {

1104 #ifdeà
DEBUG


1106 ià(
r
->
bufs
 [
i
].
Ëngth
 !ð
e
->
block_size
) {

1107 
	`RTEMS_DO_CLEANUP_RV
Ð-
RTEMS_INTERNAL_ERROR
, 
rv
, 
sd_ÿrd_disk_block_»ad_¡Ý_þnup
, "Buffernd disk block sizereotqual");

1109 
	`RTEMS_DEBUG_PRINT
Ð"[%02u:%02u]: bufã¸ð0x%08x, sizð%u\n", 
i
 + 1, 
r
->
buâum
,->
bufs
 [i].
bufãr
,->buf [i].
Ëngth
);

1112 
rv
 = 
	`sd_ÿrd_»ad
Ð
e
, 
SD_CARD_START_BLOCK_MULTIPLE_BLOCK_READ
, (
ut8_t
 *è
r
->
bufs
 [
i
].
bufãr
, (èe->
block_size
);

1113 
	`RTEMS_CLEANUP_RV
Ð
rv
, 
sd_ÿrd_disk_block_»ad_¡Ý_þnup
, "Read block");

1117 
rv
 = 
	`sd_ÿrd_¡Ý_muÉË_block_»ad
Ð
e
);

1118 
	`RTEMS_CLEANUP_RV
Ð
rv
, 
sd_ÿrd_disk_block_»ad_þnup
, "Stop multiple blockead");

1122 
sc
 = 
	`sd_ÿrd_¡Ý
Ð
e
);

1123 
	`RTEMS_CHECK_SC_RV
Ð
sc
, "Stop");

1126 
	`¹ems_blkdev_»que¡_dÚe
Ð
r
, 
RTEMS_SUCCESSFUL
);

1130 
sd_ÿrd_disk_block_»ad_¡Ý_þnup
:

1133 
	`sd_ÿrd_¡Ý_muÉË_block_»ad
Ð
e
);

1135 
sd_ÿrd_disk_block_»ad_þnup
:

1138 
	`sd_ÿrd_¡Ý
Ð
e
);

1141 
	`¹ems_blkdev_»que¡_dÚe
Ð
r
, 
RTEMS_IO_ERROR
);

1144 
	}
}

1146 
	$sd_ÿrd_disk_block_wre
Ð
sd_ÿrd_driv_y
 *
e
, 
¹ems_blkdev_»que¡
 *
r
)

1148 
¹ems_¡©us_code
 
sc
 = 
RTEMS_SUCCESSFUL
;

1149 
rv
 = 0;

1150 
ut32_t
 
¡¬t_add»ss
 = 
	`RTEMS_BLKDEV_START_BLOCK
 (
r
è<< 
e
->
block_size_shiá
;

1151 
ut32_t
 
i
 = 0;

1153 #ifdeà
DEBUG


1155 ià(
r
->
bufs
[0].
block
 >ð
e
->
block_numb
) {

1156 
	`RTEMS_SYSLOG_ERROR
( "Start blockumber out ofange");

1157  -
RTEMS_INTERNAL_ERROR
;

1158 } ià(
r
->
buâum
 > 
e
->
block_numb
 - 
	`RTEMS_BLKDEV_START_BLOCK
 (r)) {

1159 
	`RTEMS_SYSLOG_ERROR
( "Block count out ofange");

1160  -
RTEMS_INTERNAL_ERROR
;

1165 
sc
 = 
	`sd_ÿrd_¡¬t
Ð
e
);

1166 
	`RTEMS_CLEANUP_SC_RV
Ð
sc
, 
rv
, 
sd_ÿrd_disk_block_wre_þnup
, "Start");

1168 ià(
r
->
buâum
 == 1) {

1169 #ifdeà
DEBUG


1171 ià(
r
->
bufs
 [0].
Ëngth
 !ð
e
->
block_size
) {

1172 
	`RTEMS_DO_CLEANUP_RV
Ð-
RTEMS_INTERNAL_ERROR
, 
rv
, 
sd_ÿrd_disk_block_wre_þnup
, "Buffernd disk block sizereotqual");

1174 
	`RTEMS_DEBUG_PRINT
Ð"[01:01]: bufã¸ð0x%08x, sizð%u\n", 
r
->
bufs
 [0].
bufãr
,->buf [0].
Ëngth
);

1178 
rv
 = 
	`sd_ÿrd_£nd_commªd
Ð
e
, 
SD_CARD_CMD_WRITE_BLOCK
, 
¡¬t_add»ss
);

1179 
	`RTEMS_CLEANUP_RV
Ð
rv
, 
sd_ÿrd_disk_block_wre_þnup
, "Send: SD_CARD_CMD_WRITE_BLOCK");

1180 
rv
 = 
	`sd_ÿrd_wre
Ð
e
, 
SD_CARD_START_BLOCK_SINGLE_BLOCK_WRITE
, (
ut8_t
 *è
r
->
bufs
 [0].
bufãr
, (èe->
block_size
);

1181 
	`RTEMS_CLEANUP_RV
Ð
rv
, 
sd_ÿrd_disk_block_wre_þnup
, "Write: SD_CARD_CMD_WRITE_BLOCK");

1184 
rv
 = 
	`sd_ÿrd_£nd_commªd
Ð
e
, 
SD_CARD_CMD_WRITE_MULTIPLE_BLOCK
, 
¡¬t_add»ss
);

1185 
	`RTEMS_CLEANUP_RV
Ð
rv
, 
sd_ÿrd_disk_block_wre_¡Ý_þnup
, "Send: SD_CARD_CMD_WRITE_MULTIPLE_BLOCK");

1188 
i
 = 0; i < 
r
->
buâum
; ++i) {

1189 #ifdeà
DEBUG


1191 ià(
r
->
bufs
 [
i
].
Ëngth
 !ð
e
->
block_size
) {

1192 
	`RTEMS_DO_CLEANUP_RV
Ð-
RTEMS_INTERNAL_ERROR
, 
rv
, 
sd_ÿrd_disk_block_wre_¡Ý_þnup
, "Buffernd disk block sizereotqual");

1194 
	`RTEMS_DEBUG_PRINT
Ð"[%02u:%02u]: bufã¸ð0x%08x, sizð%u\n", 
i
 + 1, 
r
->
buâum
,->
bufs
 [i].
bufãr
,->buf [i].
Ëngth
);

1197 
rv
 = 
	`sd_ÿrd_wre
Ð
e
, 
SD_CARD_START_BLOCK_MULTIPLE_BLOCK_WRITE
, (
ut8_t
 *è
r
->
bufs
 [
i
].
bufãr
, (èe->
block_size
);

1198 
	`RTEMS_CLEANUP_RV
Ð
rv
, 
sd_ÿrd_disk_block_wre_¡Ý_þnup
, "Write block");

1202 
rv
 = 
	`sd_ÿrd_¡Ý_muÉË_block_wre
Ð
e
);

1203 
	`RTEMS_CLEANUP_RV
Ð
rv
, 
sd_ÿrd_disk_block_wre_þnup
, "Stop multiple block write");

1207 
rv
 = 
	`sd_ÿrd_£nd_commªd
Ð
e
, 
SD_CARD_CMD_SEND_STATUS
, 0);

1208 
	`RTEMS_CHECK_RV
Ð
rv
, "Send: SD_CARD_CMD_SEND_STATUS");

1211 
sc
 = 
	`sd_ÿrd_¡Ý
Ð
e
);

1212 
	`RTEMS_CHECK_SC_RV
Ð
sc
, "Stop");

1215 
	`¹ems_blkdev_»que¡_dÚe
Ð
r
, 
RTEMS_SUCCESSFUL
);

1219 
sd_ÿrd_disk_block_wre_¡Ý_þnup
:

1222 
	`sd_ÿrd_¡Ý_muÉË_block_wre
Ð
e
);

1224 
sd_ÿrd_disk_block_wre_þnup
:

1227 
rv
 = 
	`sd_ÿrd_£nd_commªd
Ð
e
, 
SD_CARD_CMD_SEND_STATUS
, 0);

1228 
	`RTEMS_CHECK_RV
Ð
rv
, "Send: SD_CARD_CMD_SEND_STATUS");

1231 
	`sd_ÿrd_¡Ý
Ð
e
);

1234 
	`¹ems_blkdev_»que¡_dÚe
Ð
r
, 
RTEMS_IO_ERROR
);

1237 
	}
}

1239 
	$sd_ÿrd_disk_ioùl
Ð
¹ems_disk_deviû
 *
dd
, 
ut32_t
 
»q
, *
¬g
)

1241 
	`RTEMS_DEBUG_PRINT
( "sd_card_disk_ioctl minor = %u,eq = 0x%08x,rg = %p\n",

1242 ()
	`¹ems_fesy¡em_dev_mÜ_t
(
dd
->
dev
), ()
»q
, 
¬g
);

1243 ià(
»q
 =ð
RTEMS_BLKIO_REQUEST
) {

1244 
¹ems_deviû_mÜ_numb
 
mÜ
 = 
	`¹ems_disk_g_mÜ_numb
Ð
dd
);

1245 
sd_ÿrd_driv_y
 *
e
 = &
sd_ÿrd_driv_bË
 [
mÜ
];

1246 
¹ems_blkdev_»que¡
 *
r
 = (¹ems_blkdev_»que¡ *è
¬g
;

1247 (*
f
)Ð
sd_ÿrd_driv_y
 *, 
¹ems_blkdev_»que¡
 *);

1248 
ut32_t
 
»s
 = 
e
->retries;

1249 
»suÉ
;

1251 
r
->
»q
) {

1252 
RTEMS_BLKDEV_REQ_READ
:

1253 
f
 = 
sd_ÿrd_disk_block_»ad
;

1255 
RTEMS_BLKDEV_REQ_WRITE
:

1256 
f
 = 
sd_ÿrd_disk_block_wre
;

1259 
ºo
 = 
EINVAL
;

1263 
»suÉ
 = 
	`f
Ð
e
, 
r
);

1264 } 
»s
-- > 0 && 
»suÉ
 != 0);

1265  
»suÉ
;

1267 } ià(
»q
 =ð
RTEMS_BLKIO_CAPABILITIES
) {

1268 *(
ut32_t
 *è
¬g
 = 
RTEMS_BLKDEV_CAP_MULTISECTOR_CONT
;

1271  
	`¹ems_blkdev_ioùl
Ð
dd
, 
»q
, 
¬g
 );

1273 
	}
}

1275 
¹ems_¡©us_code
 
	$sd_ÿrd_disk_
Ð
¹ems_deviû_majÜ_numb
 
majÜ
, 
¹ems_deviû_mÜ_numb
 
mÜ
, *
¬g
)

1277 
¹ems_¡©us_code
 
sc
 = 
RTEMS_SUCCESSFUL
;

1280 
sc
 = 
	`¹ems_disk_io_lize
();

1281 
	`RTEMS_CHECK_SC
Ð
sc
, "Initialize RTEMS disk IO");

1283 
mÜ
 = 0; mÜ < 
sd_ÿrd_driv_bË_size
; ++minor) {

1284 
sd_ÿrd_driv_y
 *
e
 = &
sd_ÿrd_driv_bË
 [
mÜ
];

1285 
dev_t
 
dev
 = 
	`¹ems_fesy¡em_make_dev_t
Ð
majÜ
, 
mÜ
);

1286 
ut32_t
 
»s
 = 
e
->retries;

1290 
sc
 = 
	`sd_ÿrd_
Ð
e
);

1291 } 
»s
-- > 0 && 
sc
 !ð
RTEMS_SUCCESSFUL
);

1292 
	`RTEMS_CHECK_SC
Ð
sc
, "Initialize SD Card");

1295 
sc
 = 
	`¹ems_disk_ü_phys
Ð
dev
, 
e
->
block_size
,->
block_numb
, 
sd_ÿrd_disk_ioùl
, 
NULL
,->
deviû_Çme
);

1296 
	`RTEMS_CHECK_SC
Ð
sc
, "Create disk device");

1299  
RTEMS_SUCCESSFUL
;

1300 
	}
}

1304 cÚ¡ 
¹ems_driv_add»ss_bË
 
	gsd_ÿrd_disk_Ýs
 = {

1305 .
liz©iÚ_y
 = 
sd_ÿrd_disk_
,

1306 .
	gÝ_y
 = 
¹ems_blkdev_gic_Ý
,

1307 .
	gþo£_y
 = 
¹ems_blkdev_gic_þo£
,

1308 .
	g»ad_y
 = 
¹ems_blkdev_gic_»ad
,

1309 .
	gwre_y
 = 
¹ems_blkdev_gic_wre
,

1310 .
	gcÚÞ_y
 = 
¹ems_blkdev_gic_ioùl


1313 
¹ems_¡©us_code
 
	$sd_ÿrd_»gi¡
( )

1315 
¹ems_¡©us_code
 
sc
 = 
RTEMS_SUCCESSFUL
;

1316 
¹ems_deviû_majÜ_numb
 
majÜ
 = 0;

1318 
sc
 = 
	`¹ems_io_»gi¡_driv
Ð0, &
sd_ÿrd_disk_Ýs
, &
majÜ
);

1319 
	`RTEMS_CHECK_SC
Ð
sc
, "Register disk SD Card driver");

1321  
RTEMS_SUCCESSFUL
;

1322 
	}
}

	@src/libchip/i2c/spi-sd-card.h

20 #iâdeà
LIBI2C_SD_CARD_H


21 
	#LIBI2C_SD_CARD_H


	)

23 
	~<¡dt.h
>

24 
	~<¡dboÞ.h
>

26 
	~<¹ems/libi2c.h
>

28 #ifdeà
__ýlu¥lus


32 
	#SD_CARD_IDLE_TOKEN
 0xff

	)

41 
	#SD_CARD_COMMAND_SIZE
 18

	)

43 
	#SD_CARD_TRANSFER_MODE_DEFAULT
 { .
baud¿
 = 400000, .
bs_³r_ch¬
 = 8, .
lsb_f¡
 = 
FALSE
, .
þock_v
 = FALSE, .
þock_phs
 = FALSE, .
idË_ch¬
 = 
SD_CARD_IDLE_TOKEN
 }

	)

45 
	#SD_CARD_COMMAND_DEFAULT
 { \

46 
SD_CARD_IDLE_TOKEN
, \

48 
SD_CARD_IDLE_TOKEN
, SD_CARD_IDLE_TOKEN, \

49 
SD_CARD_IDLE_TOKEN
, SD_CARD_IDLE_TOKEN, \

50 
SD_CARD_IDLE_TOKEN
, SD_CARD_IDLE_TOKEN, \

51 
SD_CARD_IDLE_TOKEN
, SD_CARD_IDLE_TOKEN, \

52 
SD_CARD_IDLE_TOKEN
, SD_CARD_IDLE_TOKEN, \

53 
SD_CARD_IDLE_TOKEN
 \

54 }

	)

57 
	#SD_CARD_N_AC_MAX_DEFAULT
 5000

	)

60 cÚ¡ *
deviû_Çme
;

61 
¹ems_deviû_mÜ_numb
 
bus
;

62 
¹ems_libi2c_tä_mode_t
 
ªsãr_mode
;

63 
ut8_t
 
commªd
 [
SD_CARD_COMMAND_SIZE
];

64 
ut8_t
 
»¥Ú£
 [
SD_CARD_COMMAND_SIZE
];

65 
»¥Ú£_dex
;

66 
ut32_t
 
n_ac_max
;

67 
ut32_t
 
block_numb
;

68 
ut32_t
 
block_size
;

69 
ut32_t
 
block_size_shiá
;

70 
boÞ
 
busy
;

71 
boÞ
 
vbo£
;

72 
boÞ
 
scheduË_if_busy
;

73 
ut32_t
 
»s
;

74 } 
	tsd_ÿrd_driv_y
;

76 
sd_ÿrd_driv_y
 
sd_ÿrd_driv_bË
 [];

78 
size_t
 
sd_ÿrd_driv_bË_size
;

80 
¹ems_¡©us_code
 
sd_ÿrd_»gi¡
( );

82 #ifdeà
__ýlu¥lus


	@src/libchip/ide/ata.c

16 
	~<ºo.h
>

17 
	~<¹ems/cha.h
>

18 
	~<as£¹.h
>

19 
	~<¡rg.h
>

21 
	~<¹ems/diskdevs.h
>

22 
	~<¹ems/blkdev.h
>

23 
	~<libch/ide_ù¾_io.h
>

24 
	~<libch/ide_ù¾_cfg.h
>

25 
	~"©a_º®.h
"

26 
	~<libch/©a.h
>

28 
	#ATA_DEBUG
 0

	)

30 #ià
ATA_DEBUG


31 
	~<¡dio.h
>

32 
boÞ
 
	g©a_aû
;

33 
	#©a_´tf
 ià(
©a_aû
è
´tf


	)

36 #ià
CPU_SIMPLE_VECTORED_INTERRUPTS
 !ð
TRUE


37 
	~<¹ems/q.h
>

38 
	#ATA_IRQ_CHAIN_MAX_CNT
 4

	)

40 
¹ems_q_numb
 
	mÇme
;

41 
¹ems_cha_cÚÞ
 
	mq_cha
;

42 } 
	t©a_q_cha_t
;

44 
©a_q_cha_t
 
	g©a_q_cha
[
ATA_IRQ_CHAIN_MAX_CNT
];

45 
	g©a_q_cha_út
 = 0;

48 
¹ems_id
 
	g©a_lock
;

50 
	$¹ems_©a_lock
 ()

52 
¹ems_¡©us_code
 
sc
 = 
	`¹ems_£m­hÜe_ob
 (
©a_lock
,

53 
RTEMS_WAIT
,

54 
RTEMS_NO_TIMEOUT
);

55 ià(
sc
 !ð
RTEMS_SUCCESSFUL
)

56 
	`¹ems_çl_rÜ_occu¼ed
 (
RTEMS_INTERNAL_ERROR
);

57 
	}
}

60 
	$¹ems_©a_uÆock
 ()

62 
¹ems_¡©us_code
 
sc
 = 
	`¹ems_£m­hÜe_»Ëa£
 (
©a_lock
);

63 ià(
sc
 !ð
RTEMS_SUCCESSFUL
)

64 
	`¹ems_çl_rÜ_occu¼ed
 (
RTEMS_INTERNAL_ERROR
);

65 
	}
}

67 
	#RTEMS_ATA_LOCK_ATTRIBS
 \

68 (
RTEMS_PRIORITY
 | 
RTEMS_BINARY_SEMAPHORE
 | \

69 
RTEMS_INHERIT_PRIORITY
 | 
RTEMS_NO_PRIORITY_CEILING
 | 
RTEMS_LOCAL
)

	)

72 #undeà
ATA_DEV_IS_FLASH_DISK


75 
©a_ide_ù¾_t
 
	g©a_ide_ù¾s
[
IDE_CTRL_MAX_MINOR_NUMBER
];

81 
©a_ide_dev_t
 
	g©a_devs
[2 * 
IDE_CTRL_MAX_MINOR_NUMBER
];

82 
	g©a_devs_numb
;

85 
boÞ
 
	g©a_lized
 = 
çl£
;

89 
¹ems_id
 
	g©a_sk_id
;

90 
¹ems_id
 
	g©a_queue_id
;

92 #ià
CPU_SIMPLE_VECTORED_INTERRUPTS
 =ð
TRUE


94 
¹ems_cha_cÚÞ
 
	g©a_t_vec
[
ATA_MAX_RTEMS_INT_VEC_NUMBER
 + 1];

98 
©a_´oûss_»que¡
(
¹ems_deviû_mÜ_numb
 
ù¾_mÜ
);

101 
©a_add_to_cÚÞËr_queue
(
¹ems_deviû_mÜ_numb
 
ù¾_mÜ
,

102 
©a_»q_t
 *
¬eq
);

121 
¹ems_¡©us_code


122 
	$©a_io_d©a_»que¡
(
dev_t
 
deviû
, 
¹ems_blkdev_»que¡
 *
»q
)

124 
©a_»q_t
 *
¬eq
;

125 
¹ems_deviû_mÜ_numb
 
»l_mÜ
;

128 
¹ems_deviû_mÜ_numb
 
ù¾_mÜ
;

129 
ut8_t
 
dev
;

131 
»l_mÜ
 = (
	`¹ems_fesy¡em_dev_mÜ_t
(
deviû
)) /

132 
ATA_MINOR_NUM_RESERVED_PER_ATA_DEVICE
;

135 
ù¾_mÜ
 = 
©a_devs
[
»l_mÜ
].ctrl_minor;

138 
dev
 = 
©a_devs
[
»l_mÜ
].
deviû
;

140 
¬eq
 = 
	`m®loc
((
©a_»q_t
));

141 ià(
¬eq
 =ð
NULL
)

143 
	`¹ems_blkdev_»que¡_dÚe
(
»q
, 
RTEMS_NO_MEMORY
);

144  
RTEMS_SUCCESSFUL
;

147 
¬eq
->
b»q
 = 
»q
;

148 
¬eq
->
út
 = 
»q
->
buâum
;

149 
¬eq
->
cbuf
 = 0;

150 
¬eq
->
pos
 = 0;

153 
¬eq
->
»gs
.
to_wre
 = 
ATA_REGISTERS_POSITION
;

154 
¬eq
->
»gs
.
to_»ad
 = 
	`ATA_REGISTERS_VALUE
(
IDE_REGISTER_STATUS
);

157 
¬eq
->
»gs
.»gs[
IDE_REGISTER_DEVICE_HEAD
] =

158 (
dev
 << 
IDE_REGISTER_DEVICE_HEAD_DEV_POS
);

161 ià(
	`ATA_DEV_INFO
(
ù¾_mÜ
, 
dev
).
mode_aùive
 & 
ATA_MODES_DMA
)

164 
¬eq
->
ty³
 = 
ATA_COMMAND_TYPE_DMA
;

165 ià(
»q
->»q =ð
RTEMS_BLKDEV_REQ_READ
)

166 
¬eq
->
»gs
.»gs[
IDE_REGISTER_COMMAND
] = 
ATA_COMMAND_READ_DMA
;

168 
¬eq
->
»gs
.»gs[
IDE_REGISTER_COMMAND
] = 
ATA_COMMAND_WRITE_DMA
;

172 ià(
»q
->»q =ð
RTEMS_BLKDEV_REQ_READ
)

174 
¬eq
->
ty³
 = 
ATA_COMMAND_TYPE_PIO_IN
;

175 
¬eq
->
»gs
.»gs[
IDE_REGISTER_COMMAND
] = 
ATA_COMMAND_READ_SECTORS
;

176 #ià
ATA_DEBUG


177 
	`©a_´tf
("ata_io_data_request:ype: READ: %lu, %lu cmd:%02x\n",

178 
»q
->
bufs
[0].
block
,eq->
buâum
,

179 
¬eq
->
»gs
.»gs[
IDE_REGISTER_COMMAND
]);

184 
¬eq
->
ty³
 = 
ATA_COMMAND_TYPE_PIO_OUT
;

185 
¬eq
->
»gs
.»gs[
IDE_REGISTER_COMMAND
] = 
ATA_COMMAND_WRITE_SECTORS
;

186 #ià
ATA_DEBUG


187 
	`©a_´tf
("ata_io_data_request:ype: WRITE: %lu, %lu cmd:%02x\n",

188 
»q
->
bufs
[0].
block
,eq->
buâum
,

189 
¬eq
->
»gs
.»gs[
IDE_REGISTER_COMMAND
]);

197 ià(
	`ATA_DEV_INFO
(
ù¾_mÜ
, 
dev
).
lba_avaibË
)

199 
ut32_t
 
¡¬t
 = 
»q
->
bufs
[0].
block
;

200 
¬eq
->
»gs
.»gs[
IDE_REGISTER_LBA0
] = (
ut8_t
)
¡¬t
;

201 
¬eq
->
»gs
.»gs[
IDE_REGISTER_LBA1
] = (
ut8_t
)(
¡¬t
 >> 8);

202 
¬eq
->
»gs
.»gs[
IDE_REGISTER_LBA2
] = (
ut8_t
)(
¡¬t
 >> 16);

204 
¬eq
->
»gs
.»gs[
IDE_REGISTER_LBA3
] |ð(
ut8_t
è(
¡¬t
 >> 24);

205 
¬eq
->
»gs
.»gs[
IDE_REGISTER_LBA3
] |ð
IDE_REGISTER_LBA3_L
;

209 
ut32_t
 
couÁ
 = 
»q
->
bufs
[0].
block
;

211 
¬eq
->
»gs
.»gs[
IDE_REGISTER_SECTOR_NUMBER
] =

212 (
couÁ
 % 
	`ATA_DEV_INFO
(
ù¾_mÜ
, 
dev
).
£ùÜs
) + 1;

215 
couÁ
 /ð
	`ATA_DEV_INFO
(
ù¾_mÜ
, 
dev
).
£ùÜs
;

216 
¬eq
->
»gs
.»gs[
IDE_REGISTER_DEVICE_HEAD
] |=

217 (
couÁ
 / 
	`ATA_DEV_INFO
(
ù¾_mÜ
, 
dev
).
cylds
);

220 
couÁ
 %ð
	`ATA_DEV_INFO
(
ù¾_mÜ
, 
dev
).
cylds
;

221 
¬eq
->
»gs
.»gs[
IDE_REGISTER_CYLINDER_LOW
] = (
ut8_t
)
couÁ
;

222 
¬eq
->
»gs
.»gs[
IDE_REGISTER_CYLINDER_HIGH
] = (
ut8_t
)(
couÁ
 >> 8);

223 
¬eq
->
»gs
.»gs[
IDE_REGISTER_DEVICE_HEAD
] &=

224 ~
IDE_REGISTER_DEVICE_HEAD_L
;

231 
¬eq
->
»gs
.»gs[
IDE_REGISTER_SECTOR_COUNT
] =

232 
¬eq
->
b»q
->
buâum
 * (¬eq->b»q->
bufs
[0].
Ëngth
 / 
ATA_SECTOR_SIZE
);

235 
	`©a_add_to_cÚÞËr_queue
(
ù¾_mÜ
, 
¬eq
);

237  
RTEMS_SUCCESSFUL
;

238 
	}
}

253 
¹ems_¡©us_code


254 
	$©a_nÚ_d©a_»que¡
(
dev_t
 
deviû
, 
ut32_t
 
cmd
, *
¬gp
)

256 
¹ems_¡©us_code
 
rc
;

257 
©a_»q_t
 *
¬eq
;

258 
¹ems_deviû_mÜ_numb
 
»l_mÜ
;

261 
¹ems_deviû_mÜ_numb
 
ù¾_mÜ
;

262 
ut8_t
 
dev
;

263 
©a_queue_msg_t
 
msg
;

265 
»l_mÜ
 = (
	`¹ems_fesy¡em_dev_mÜ_t
(
deviû
)) /

266 
ATA_MINOR_NUM_RESERVED_PER_ATA_DEVICE
;

269 
ù¾_mÜ
 = 
©a_devs
[
»l_mÜ
].ctrl_minor;

272 
dev
 = 
©a_devs
[
»l_mÜ
].
deviû
;

275 
¬eq
 = 
	`m®loc
((
©a_»q_t
));

276 ià(
¬eq
 =ð
NULL
)

278  
RTEMS_NO_MEMORY
;

280 
	`mem£t
(
¬eq
, 0, (
©a_»q_t
));

282 
¬eq
->
ty³
 = 
ATA_COMMAND_TYPE_NON_DATA
;

283 
¬eq
->
»gs
.
to_wre
 = 
	`ATA_REGISTERS_VALUE
(
IDE_REGISTER_COMMAND
);

284 
¬eq
->
»gs
.»gs[
IDE_REGISTER_DEVICE_HEAD
] |=

285 (
dev
 << 
IDE_REGISTER_DEVICE_HEAD_DEV_POS
);

286 
¬eq
->
b»q
 = 
NULL
;

287 
¬eq
->
»gs
.
to_»ad
 = 
	`ATA_REGISTERS_VALUE
(
IDE_REGISTER_ERROR
);

293 
cmd
)

295 
ATAIO_SET_MULTIPLE_MODE
:

296 
¬eq
->
»gs
.»gs[
IDE_REGISTER_COMMAND
] =

297 
ATA_COMMAND_SET_MULTIPLE_MODE
;

298 
¬eq
->
»gs
.
to_wre
 |=

299 
	`ATA_REGISTERS_VALUE
(
IDE_REGISTER_SECTOR_COUNT
);

300 
¬eq
->
»gs
.»gs[
IDE_REGISTER_SECTOR_COUNT
] = *(
ut8_t
*)
¬gp
;

304 
	`ä
(
¬eq
);

305  
RTEMS_INVALID_NUMBER
;

309 
rc
 = 
	`¹ems_£m­hÜe_ü
(
	`¹ems_bud_Çme
('I', 'D', 'E', 'S'),

311 
RTEMS_FIFO
 | 
RTEMS_COUNTING_SEMAPHORE
 |

312 
RTEMS_NO_INHERIT_PRIORITY
 |

313 
RTEMS_NO_PRIORITY_CEILING
 | 
RTEMS_LOCAL
,

315 &(
¬eq
->
£ma
));

316 ià(
rc
 !ð
RTEMS_SUCCESSFUL
)

318 
	`ä
(
¬eq
);

319  
rc
;

322 
	`©a_add_to_cÚÞËr_queue
(
ù¾_mÜ
, 
¬eq
);

325 
rc
 = 
	`¹ems_£m­hÜe_ob
(
¬eq
->
£ma
, 
RTEMS_WAIT
, 
RTEMS_NO_TIMEOUT
);

326 ià(
rc
 !ð
RTEMS_SUCCESSFUL
)

328 
	`ä
(
¬eq
);

329  
rc
;

332 
	`¹ems_£m­hÜe_de
(
¬eq
->
£ma
);

338 ià(
¬eq
->
¡©us
 =ð
RTEMS_SUCCESSFUL
)

340 
cmd
)

342 
ATAIO_SET_MULTIPLE_MODE
:

345 
rc
 = 
RTEMS_INVALID_NUMBER
;

354 
rc
 = 
RTEMS_IO_ERROR
;

358 
	`ATA_SEND_EVT
(
msg
, 
ATA_MSG_SUCCESS_EVT
, 
ù¾_mÜ
, 0);

360  
rc
;

361 
	}
}

373 
	$©a_´oûss_»que¡
(
¹ems_deviû_mÜ_numb
 
ù¾_mÜ
)

375 
©a_»q_t
 *
¬eq
;

376 
ut16_t
 
by
;

377 
©a_queue_msg_t
 
msg
;

378 
ut8_t
 
i
;

380 
ut8_t
 
dev
;

382 
ut16_t
 
v®
;

383 
ISR_Lev
 
Ëv
;

386 ià(
	`¹ems_cha_is_em±y
(&
©a_ide_ù¾s
[
ù¾_mÜ
].
»qs
))

390 
	`_ISR_Di§bË
(
Ëv
);

391 
¬eq
 = (
©a_»q_t
 *)
	`¹ems_cha_f¡
(&
©a_ide_ù¾s
[
ù¾_mÜ
].
»qs
);

392 
	`_ISR_EÇbË
(
Ëv
);

396 
dev
 = 
¬eq
->
»gs
.»gs[
IDE_REGISTER_DEVICE_HEAD
] &

397 
IDE_REGISTER_DEVICE_HEAD_DEV
;

401 
	`ide_cÚÞËr_wre_»gi¡
(
ù¾_mÜ
, 
IDE_REGISTER_DEVICE_HEAD
,

402 
¬eq
->
»gs
.»gs[
IDE_REGISTER_DEVICE_HEAD
]);

405 
	`ide_cÚÞËr_»ad_»gi¡
(
ù¾_mÜ
, 
IDE_REGISTER_STATUS
, &
by
);

406 } (
by
 & 
IDE_REGISTER_STATUS_BSY
) ||

407 (!(
by
 & 
IDE_REGISTER_STATUS_DRDY
)));

410 
i
=0; i< 
ATA_MAX_CMD_REG_OFFSET
; i++)

412 
ut32_t
 
»g
 = (1 << 
i
);

413 ià(
¬eq
->
»gs
.
to_wre
 & 
»g
)

414 
	`ide_cÚÞËr_wre_»gi¡
(
ù¾_mÜ
, 
i
, 
¬eq
->
»gs
.regs[i]);

417 #ià
ATA_DEBUG


418 
	`©a_´tf
("©a_´oûss_»que¡:y³: %d\n", 
¬eq
->
ty³
);

422 ià(
¬eq
->
ty³
 =ð
ATA_COMMAND_TYPE_PIO_OUT
)

425 
	`ide_cÚÞËr_»ad_»gi¡
(
ù¾_mÜ
, 
IDE_REGISTER_STATUS
,

426 &
by
);

427 } 
by
 & 
IDE_REGISTER_STATUS_BSY
);

429 ià(
by
 & 
IDE_REGISTER_STATUS_DRQ
)

431 ià(
¬eq
->
út
)

433 
ccbuf
 = 
¬eq
->
cbuf
;

434 
	`ide_cÚÞËr_wre_d©a_block
(
ù¾_mÜ
,

435 
¬eq
->
b»q
->
bufs
[0].
Ëngth
 *»q->
út
,

436 
¬eq
->
b»q
->
bufs
, &¬eq->
cbuf
,

437 &
¬eq
->
pos
);

438 
ccbuf
 = 
¬eq
->
cbuf
 - ccbuf;

439 
¬eq
->
út
 -ð
ccbuf
;

444 ià(
IDE_CÚÞËr_TabË
[
ù¾_mÜ
].
t_driv
 =ð
çl£
)

446 
	`ide_cÚÞËr_»ad_»gi¡
(

447 
ù¾_mÜ
,

448 
IDE_REGISTER_ALTERNATE_STATUS_OFFSET
,

449 &
v®
);

450 
	`ide_cÚÞËr_»ad_»gi¡
(
ù¾_mÜ
, 
IDE_REGISTER_STATUS
,

451 &
v®
);

453 
	`ATA_SEND_EVT
(
msg
, 
ATA_MSG_ERROR_EVT
, 
ù¾_mÜ
,

454 
RTEMS_IO_ERROR
);

459 ià(
IDE_CÚÞËr_TabË
[
ù¾_mÜ
].
t_driv
 =ð
çl£
)

462 
	`ide_cÚÞËr_»ad_»gi¡
(
ù¾_mÜ
, 
IDE_REGISTER_STATUS
,

463 &
by
);

464 } 
by
 & 
IDE_REGISTER_STATUS_BSY
);

466 
	`ATA_SEND_EVT
(
msg
, 
ATA_MSG_GEN_EVT
, 
ù¾_mÜ
, 0);

468 
	}
}

483 
le
 

484 
	$©a_»que¡_dÚe
(
©a_»q_t
 *
¬eq
, 
¹ems_deviû_mÜ_numb
 
ù¾_mÜ
,

485 
¹ems_¡©us_code
 
¡©us
)

487 
	`as£¹
(
¬eq
);

489 #ià
ATA_DEBUG


490 
	`©a_´tf
("ata_request_done:ntry\n");

493 
	`ATA_EXEC_CALLBACK
(
¬eq
, 
¡©us
);

494 
	`¹ems_cha_exaù
(&
¬eq
->
lk
);

496 ià(!
	`¹ems_cha_is_em±y
(&
©a_ide_ù¾s
[
ù¾_mÜ
].
»qs
))

498 
	`ä
(
¬eq
);

499 
	`©a_´oûss_»que¡
(
ù¾_mÜ
);

503 
	`ä
(
¬eq
);

505 #ià
ATA_DEBUG


506 
	`©a_´tf
("ata_request_done:xit\n");

508 
	}
}

522 
le
 

523 
	$©a_nÚ_d©a_»que¡_dÚe
(
©a_»q_t
 *
¬eq
,

524 
¹ems_deviû_mÜ_numb
 
ù¾_mÜ
,

525 
¹ems_¡©us_code
 
¡©us
, 
fo
)

527 #ià
ATA_DEBUG


528 
	`©a_´tf
("ata_non_data_request_done:ntry\n");

531 
¬eq
->
¡©us
 = status;

532 
¬eq
->
fo
 = info;

533 
	`¹ems_£m­hÜe_»Ëa£
(
¬eq
->
£ma
);

534 
	}
}

548 
	$©a_add_to_cÚÞËr_queue
(
¹ems_deviû_mÜ_numb
 
ù¾_mÜ
,

549 
©a_»q_t
 *
¬eq
)

551 
	`¹ems_©a_lock
();

553 
	`¹ems_cha_­³nd
(&
©a_ide_ù¾s
[
ù¾_mÜ
].
»qs
, &
¬eq
->
lk
);

554 ià(
	`¹ems_cha_has_Úly_Úe_node
(&
©a_ide_ù¾s
[
ù¾_mÜ
].
»qs
))

557 
©a_queue_msg_t
 
msg
;

559 #ià
ATA_DEBUG_DOES_NOT_WORK_WITH_QEMU


560 
ut16_t
 
v®
;

565 
	`ide_cÚÞËr_»ad_»gi¡
(
ù¾_mÜ
,

566 
IDE_REGISTER_ALTERNATE_STATUS
,

567 &
v®
);

568 ià(
v®
 & 
IDE_REGISTER_STATUS_BSY
)

571 
	`ATA_SEND_EVT
(
msg
, 
ATA_MSG_PROCESS_NEXT_EVT
, 
ù¾_mÜ
, 0);

574 
	`¹ems_©a_uÆock
();

575 
	}
}

589 #ià
CPU_SIMPLE_VECTORED_INTERRUPTS
 =ð
TRUE


590 
¹ems_i¤
 
	$©a_¼u±_hªdËr
(
¹ems_veùÜ_numb
 
vec
)

592 
¹ems_cha_node
 *
the_node
 = 
	`¹ems_cha_f¡
(&
©a_t_vec
[
vec
]);

593 
©a_queue_msg_t
 
msg
;

594 
ut16_t
 
by
;

596  ; !
	`¹ems_cha_is_
(&
©a_t_vec
[
vec
], 
the_node
) ; )

604 
msg
.
ù¾_mÜ
 = ((
©a_t_¡_t
 *)
the_node
)->ctrl_minor;

605 
	`ide_cÚÞËr_»ad_»gi¡
(
msg
.
ù¾_mÜ
, 
IDE_REGISTER_STATUS
,

606 &
by
);

607 
	`ATA_SEND_EVT
(
msg
, 
ATA_MSG_GEN_EVT
, msg.
ù¾_mÜ
, 0);

609 
the_node
 =he_node->
Ãxt
;

611 
	}
}

613 
	$©a_¼u±_hªdËr
(
¹ems_q_hdl_·¿m
 
hªdË
)

615 
©a_q_cha_dex
 = (è
hªdË
;

616 
¹ems_cha_node
 *
the_node
 =

617 
	`¹ems_cha_Ï¡
(&
©a_q_cha
[
©a_q_cha_dex
].
q_cha
);

618 
©a_queue_msg_t
 
msg
;

619 
ut16_t
 
by
;

622  ; !
	`¹ems_cha_is_
(&
©a_q_cha
[
©a_q_cha_dex
].
q_cha
,

623 
the_node
) ; )

631 
msg
.
ù¾_mÜ
 = ((
©a_t_¡_t
 *)
the_node
)->ctrl_minor;

632 
	`ide_cÚÞËr_»ad_»gi¡
(
msg
.
ù¾_mÜ
, 
IDE_REGISTER_STATUS
,

633 &
by
);

634 
	`ATA_SEND_EVT
(
msg
, 
ATA_MSG_GEN_EVT
, msg.
ù¾_mÜ
, 0);

636 
the_node
 =he_node->
Ãxt
;

638 
	}
}

640 
	$©a_¼u±_Ú
(cÚ¡ 
¹ems_q_cÚÃù_d©a
 *
±r
)

644 
	`ide_cÚÞËr_wre_»gi¡
(0,

645 
IDE_REGISTER_DEVICE_CONTROL_OFFSET
,

648 
	}
}

651 
	$©a_¼u±_off
(cÚ¡ 
¹ems_q_cÚÃù_d©a
 *
±r
)

655 
	`ide_cÚÞËr_wre_»gi¡
(0,

656 
IDE_REGISTER_DEVICE_CONTROL_OFFSET
,

657 
IDE_REGISTER_DEVICE_CONTROL_nIEN


659 
	}
}

662 
	$©a_¼u±_isOn
(cÚ¡ 
¹ems_q_cÚÃù_d©a
 *
±r
)

664 
ut16_t
 
by
;

667 
	`ide_cÚÞËr_»ad_»gi¡
(0,

668 
IDE_REGISTER_DEVICE_CONTROL_OFFSET
,

669 &
by


672  !(
by
 & 
IDE_REGISTER_DEVICE_CONTROL_nIEN
);

673 
	}
}

676 
¹ems_q_cÚÃù_d©a
 
	g©a_q_d©a
 =

680 
©a_¼u±_hªdËr
,

681 
NULL
,

682 
©a_¼u±_Ú
,

683 
©a_¼u±_off
,

684 
©a_¼u±_isOn


698 
le
 

699 
	$©a_pio__´ÙocÞ
(
¹ems_deviû_mÜ_numb
 
ù¾_mÜ
, 
©a_»q_t
 *
¬eq
)

701 
ut16_t
 
v®
;

703 
ut8_t
 
dev
;

705 
©a_queue_msg_t
 
msg
;

708 
dev
 = 
¬eq
->
»gs
.»gs[
IDE_REGISTER_DEVICE_HEAD
] &

709 
IDE_REGISTER_DEVICE_HEAD_DEV
;

712 ià(
¬eq
->
út
)

714 
ccbuf
 = 
¬eq
->
cbuf
;

715 
	`ide_cÚÞËr_»ad_d©a_block
(
ù¾_mÜ
,

716 
¬eq
->
b»q
->
bufs
[0].
Ëngth
 *»q->
út
,

717 
¬eq
->
b»q
->
bufs
, &¬eq->
cbuf
, &¬eq->
pos
);

718 
ccbuf
 = 
¬eq
->
cbuf
 - ccbuf;

719 
¬eq
->
út
 -ð
ccbuf
;

722 ià(
¬eq
->
út
 == 0)

724 
	`©a_»que¡_dÚe
(
¬eq
, 
ù¾_mÜ
, 
RTEMS_SUCCESSFUL
);

726 ià(
IDE_CÚÞËr_TabË
[
ù¾_mÜ
].
t_driv
 =ð
çl£
)

729 
	`ide_cÚÞËr_»ad_»gi¡
(
ù¾_mÜ
, 
IDE_REGISTER_STATUS
, &
v®
);

730 } 
v®
 & 
IDE_REGISTER_STATUS_BSY
);

732 
	`ATA_SEND_EVT
(
msg
, 
ATA_MSG_GEN_EVT
, 
ù¾_mÜ
, 0);

734 
	}
}

746 
le
 

747 
	$©a_pio_out_´ÙocÞ
(
¹ems_deviû_mÜ_numb
 
ù¾_mÜ
, 
©a_»q_t
 *
¬eq
)

749 
ut16_t
 
v®
;

751 
ut8_t
 
dev
;

753 
©a_queue_msg_t
 
msg
;

755 #ià
ATA_DEBUG


756 
	`©a_´tf
("ata_pio_out_protocol:\n");

760 
dev
 = 
¬eq
->
»gs
.»gs[
IDE_REGISTER_DEVICE_HEAD
] &

761 
IDE_REGISTER_DEVICE_HEAD_DEV
;

764 ià(
¬eq
->
út
 == 0)

766 
	`©a_»que¡_dÚe
(
¬eq
, 
ù¾_mÜ
, 
RTEMS_SUCCESSFUL
);

770 ià(
¬eq
->
út
)

772 
ccbuf
 = 
¬eq
->
cbuf
;

773 
	`ide_cÚÞËr_wre_d©a_block
(
ù¾_mÜ
,

774 
¬eq
->
b»q
->
bufs
[0].
Ëngth
 *»q->
út
,

775 
¬eq
->
b»q
->
bufs
, &¬eq->
cbuf
,

776 &
¬eq
->
pos
);

777 
ccbuf
 = 
¬eq
->
cbuf
 - ccbuf;

778 
¬eq
->
út
 -ð
ccbuf
;

780 ià(
IDE_CÚÞËr_TabË
[
ù¾_mÜ
].
t_driv
 =ð
çl£
)

783 
	`ide_cÚÞËr_»ad_»gi¡
(
ù¾_mÜ
, 
IDE_REGISTER_STATUS
,

784 &
v®
);

785 } 
v®
 & 
IDE_REGISTER_STATUS_BSY
);

787 
	`ATA_SEND_EVT
(
msg
, 
ATA_MSG_GEN_EVT
, 
ù¾_mÜ
, 0);

790 
	}
}

804 
¹ems_sk


805 
	$©a_queue_sk
(
¹ems_sk_¬gumt
 
¬g
)

807 
©a_queue_msg_t
 
msg
;

808 
size_t
 
size
;

809 
©a_»q_t
 *
¬eq
;

810 
¹ems_deviû_mÜ_numb
 
ù¾_mÜ
;

811 
ut16_t
 
v®
;

812 
ut16_t
 
v®1
;

813 
¹ems_¡©us_code
 
rc
;

814 
ISR_Lev
 
Ëv
;

816 
	`¹ems_©a_lock
();

820 
	`¹ems_©a_uÆock
();

823 
rc
 = 
	`¹ems_mes§ge_queue_»ûive
(
©a_queue_id
, &
msg
, &
size
, 
RTEMS_WAIT
,

824 
RTEMS_NO_TIMEOUT
);

825 ià(
rc
 !ð
RTEMS_SUCCESSFUL
)

826 
	`¹ems_çl_rÜ_occu¼ed
(
RTEMS_INTERNAL_ERROR
);

829 
ù¾_mÜ
 = 
msg
.ctrl_minor;

831 
	`¹ems_©a_lock
();

834 
	`_ISR_Di§bË
(
Ëv
);

835 
¬eq
 = (
©a_»q_t
 *)
	`¹ems_cha_f¡
(&
©a_ide_ù¾s
[
ù¾_mÜ
].
»qs
);

836 
	`_ISR_EÇbË
(
Ëv
);

838 
msg
.
ty³
)

840 
ATA_MSG_PROCESS_NEXT_EVT
:

842 
	`©a_´oûss_»que¡
(
ù¾_mÜ
);

845 
ATA_MSG_SUCCESS_EVT
:

851 
	`©a_»que¡_dÚe
(
¬eq
, 
ù¾_mÜ
, 
RTEMS_SUCCESSFUL
);

854 
ATA_MSG_ERROR_EVT
:

860 
	`©a_»que¡_dÚe
(
¬eq
, 
ù¾_mÜ
, 
RTEMS_IO_ERROR
);

863 
ATA_MSG_GEN_EVT
:

869 
	`ide_cÚÞËr_»ad_»gi¡
(
ù¾_mÜ
, 
IDE_REGISTER_STATUS
,

870 &
v®
);

872 ià(
v®
 & 
IDE_REGISTER_STATUS_ERR
)

874 
	`ide_cÚÞËr_»ad_»gi¡
(
ù¾_mÜ
,

875 
IDE_REGISTER_ERROR
,

876 &
v®
);

877 ià(
v®
 & (
IDE_REGISTER_ERROR_UNC
 |

878 
IDE_REGISTER_ERROR_ICRC
 |

879 
IDE_REGISTER_ERROR_IDNF
 |

880 
IDE_REGISTER_ERROR_NM
 |

881 
IDE_REGISTER_ERROR_MED
))

883 ià(
¬eq
->
ty³
 =ð
ATA_COMMAND_TYPE_NON_DATA
)

884 
	`©a_nÚ_d©a_»que¡_dÚe
(
¬eq
, 
ù¾_mÜ
,

885 
RTEMS_UNSATISFIED
,

886 
RTEMS_IO_ERROR
);

888 
	`©a_»que¡_dÚe
(
¬eq
, 
ù¾_mÜ
, 
RTEMS_IO_ERROR
);

893 
¬eq
->
ty³
)

895 
ATA_COMMAND_TYPE_PIO_IN
:

896 
	`©a_pio__´ÙocÞ
(
ù¾_mÜ
, 
¬eq
);

899 
ATA_COMMAND_TYPE_PIO_OUT
:

900 
	`©a_pio_out_´ÙocÞ
(
ù¾_mÜ
, 
¬eq
);

903 
ATA_COMMAND_TYPE_NON_DATA
:

904 
	`ide_cÚÞËr_»ad_»gi¡
(
ù¾_mÜ
,

905 
IDE_REGISTER_ERROR
,

906 &
v®1
);

907 
	`©a_nÚ_d©a_»que¡_dÚe
(
¬eq
, 
ù¾_mÜ
,

908 
RTEMS_SUCCESSFUL
,

909 
v®1
);

913 #ià
ATA_DEBUG


914 
	`©a_´tf
("ata_queue_task:on-supported commandype\n");

916 
	`©a_»que¡_dÚe
(
¬eq
, 
ù¾_mÜ
, 
RTEMS_IO_ERROR
);

922 #ià
ATA_DEBUG


923 
	`©a_´tf
("ata_queue_task: internalrror\n");

924 
	`¹ems_sk_de
 (
RTEMS_SELF
);

926 
	`¹ems_çl_rÜ_occu¼ed
(
RTEMS_INTERNAL_ERROR
);

930 
	}
}

944 
	$©a_ioùl
(
¹ems_disk_deviû
 *
dd
, 
ut32_t
 
cmd
, *
¬gp
)

946 
dev_t
 
deviû
 = 
	`¹ems_disk_g_deviû_idtifr
(
dd
);

947 
¹ems_¡©us_code
 
¡©us
;

948 
¹ems_deviû_mÜ_numb
 
»l_mÜ
;

950 
»l_mÜ
 = (
	`¹ems_fesy¡em_dev_mÜ_t
(
deviû
)) /

951 
ATA_MINOR_NUM_RESERVED_PER_ATA_DEVICE
;

957 ià(
©a_devs
[
»l_mÜ
].
deviû
 =ð
ATA_UNDEFINED_VALUE
)

959 
ºo
 = 
ENODEV
;

963 
cmd
)

965 
RTEMS_BLKIO_REQUEST
:

966 
¡©us
 = 
	`©a_io_d©a_»que¡
(
deviû
, (
¹ems_blkdev_»que¡
 *)
¬gp
);

969 
ATAIO_SET_MULTIPLE_MODE
:

970 
¡©us
 = 
	`©a_nÚ_d©a_»que¡
(
deviû
, 
cmd
, 
¬gp
);

973 
RTEMS_BLKIO_CAPABILITIES
:

974 *((
ut32_t
*è
¬gp
èð
RTEMS_BLKDEV_CAP_MULTISECTOR_CONT
;

975 
¡©us
 = 
RTEMS_SUCCESSFUL
;

979  
	`¹ems_blkdev_ioùl
 (
dd
, 
cmd
, 
¬gp
);

983 ià(
¡©us
 !ð
RTEMS_SUCCESSFUL
)

985 
ºo
 = 
EIO
;

989 
	}
}

991 
	$©a_execu_deviû_dgno¡ic
(

992 
¹ems_deviû_mÜ_numb
 
ù¾_mÜ
,

993 
ut16_t
 *
£ùÜ_bufãr


996 #ià
ATA_EXEC_DEVICE_DIAGNOSTIC


997 
©a_»q_t
 
¬eq
;

998 
blkdev_»que¡1
 
b»q
;

1000 
	`©a_b»q_
(&
b»q
, 
£ùÜ_bufãr
);

1010 
	`mem£t
(&
¬eq
, 0, (
©a_»q_t
));

1011 
¬eq
.
ty³
 = 
ATA_COMMAND_TYPE_NON_DATA
;

1012 
¬eq
.
»gs
.
to_wre
 = 
	`ATA_REGISTERS_VALUE
(
IDE_REGISTER_COMMAND
);

1013 
¬eq
.
»gs
.»gs[
IDE_REGISTER_COMMAND
] =

1014 
ATA_COMMAND_EXECUTE_DEVICE_DIAGNOSTIC
;

1015 
¬eq
.
»gs
.
to_»ad
 = 
	`ATA_REGISTERS_VALUE
(
IDE_REGISTER_ERROR
);

1017 
¬eq
.
b»q
 = (
¹ems_blkdev_»que¡
 *)&breq;

1024 
	`©a_´oûss_»que¡_Ú__pha£
(
ù¾_mÜ
, &
¬eq
);

1029 ià(
b»q
.
»q
.
¡©us
 =ð
RTEMS_SUCCESSFUL
)

1032 ià(
¬eq
.
fo
 =ð
ATA_DEV0_PASSED_DEV1_PASSED_OR_NOT_PRSNT
)

1034 
	`´tk
("ATA: cl:%d:rim¬y, secÚd¬y\n", 
ù¾_mÜ
);

1035 
	`ATA_DEV_INFO
(
ù¾_mÜ
,0).
´e£Á
 = 
ue
;

1036 
	`ATA_DEV_INFO
(
ù¾_mÜ
,1).
´e£Á
 = 
ue
;

1038 ià(
¬eq
.
fo
 =ð
ATA_DEV0_PASSED_DEV1_FAILED
)

1040 
	`´tk
("ATA: cl:%d:rim¬y\n", 
ù¾_mÜ
);

1041 
	`ATA_DEV_INFO
(
ù¾_mÜ
,0).
´e£Á
 = 
ue
;

1042 
	`ATA_DEV_INFO
(
ù¾_mÜ
,1).
´e£Á
 = 
çl£
;

1044 ià(
¬eq
.
fo
 < 
ATA_DEV1_PASSED_DEV0_FAILED
)

1046 
	`´tk
("ATA: cl:%d: secÚd¬y\n", 
ù¾_mÜ
);

1047 
	`ATA_DEV_INFO
(
ù¾_mÜ
,0).
´e£Á
 = 
çl£
;

1048 
	`ATA_DEV_INFO
(
ù¾_mÜ
,1).
´e£Á
 = 
ue
;

1052 
	`´tk
("ATA: cl:%d:Úe\n", 
ù¾_mÜ
);

1053 
	`ATA_DEV_INFO
(
ù¾_mÜ
, 0).
´e£Á
 = 
çl£
;

1054 
	`ATA_DEV_INFO
(
ù¾_mÜ
, 1).
´e£Á
 = 
çl£
;

1058 ià(
	`ATA_DEV_INFO
(
ù¾_mÜ
, 1).
´e£Á
)

1060 
ut16_t
 
ec
 = 0;

1061 
	`ide_cÚÞËr_»ad_»gi¡
(
ù¾_mÜ
, 
IDE_REGISTER_ERROR
, &
ec
);

1062 ià(
ec
 & 
ATA_DEV1_PASSED_DEV0_FAILED
)

1064 
	`´tk
("ATA: cl:%d: secÚd¬y infÜûd\n", 
ù¾_mÜ
);

1065 
	`ATA_DEV_INFO
(
ù¾_mÜ
, 1).
´e£Á
 = 
ue
;

1069 
	`´tk
("ATA: cl:%d: secÚd¬yemoved\n", 
ù¾_mÜ
);

1070 
	`ATA_DEV_INFO
(
ù¾_mÜ
, 1).
´e£Á
 = 
çl£
;

1077 
	`ATA_DEV_INFO
(
ù¾_mÜ
, 0).
´e£Á
 = 
ue
;

1078 
	`ATA_DEV_INFO
(
ù¾_mÜ
,1).
´e£Á
 = 
ue
;

1080 
	}
}

1095 
¹ems_deviû_driv


1096 
	$¹ems_©a_lize
(
¹ems_deviû_majÜ_numb
 
majÜ
,

1097 
¹ems_deviû_mÜ_numb
 
mÜ_¬g
,

1098 *
¬gs
)

1100 
ut32_t
 
ù¾_mÜ
;

1101 
¹ems_¡©us_code
 
¡©us
;

1102 
ut16_t
 *
bufãr
;

1103 
i
, 
dev
 = 0;

1104 
Çme
[
ATA_MAX_NAME_LENGTH
];

1105 
dev_t
 
deviû
;

1106 
©a_t_¡_t
 *
t_¡
;

1108 #ià
CPU_SIMPLE_VECTORED_INTERRUPTS
 =ð
TRUE


1109 
¹ems_i¤_y
 
Þd_i¤
;

1111 
©a_q_cha_u£
;

1114 ià(
©a_lized
)

1115  
RTEMS_SUCCESSFUL
;

1118 
¡©us
 = 
	`¹ems_disk_io_lize
();

1119 ià(
¡©us
 !ð
RTEMS_SUCCESSFUL
)

1120  
¡©us
;

1122 
¡©us
 = 
	`¹ems_£m­hÜe_ü
 (
	`¹ems_bud_Çme
 ('A', 'T', 'A', 'L'),

1123 1, 
RTEMS_ATA_LOCK_ATTRIBS
, 0,

1124 &
©a_lock
);

1125 ià(
¡©us
 !ð
RTEMS_SUCCESSFUL
)

1126  
¡©us
;

1129 
¡©us
 = 
	`¹ems_mes§ge_queue_ü
(

1130 
	`¹ems_bud_Çme
('A', 'T', 'A', 'Q'),

1131 
ATA_DRIVER_MESSAGE_QUEUE_SIZE
,

1132 (
©a_queue_msg_t
),

1133 
RTEMS_FIFO
 | 
RTEMS_LOCAL
,

1134 &
©a_queue_id
);

1135 ià(
¡©us
 !ð
RTEMS_SUCCESSFUL
)

1137 
	`¹ems_disk_io_dÚe
();

1138  
¡©us
;

1145 
¡©us
 = 
	`¹ems_sk_ü
(

1146 
	`¹ems_bud_Çme
 ('A', 'T', 'A', 'T'),

1147 ((
¹ems_©a_driv_sk_´iÜy
 > 0)

1148 ? 
¹ems_©a_driv_sk_´iÜy


1149 : 
ATA_DRIVER_TASK_DEFAULT_PRIORITY
),

1150 
ATA_DRIVER_TASK_STACK_SIZE
,

1151 
RTEMS_PREEMPT
 | 
RTEMS_NO_TIMESLICE
 | 
RTEMS_NO_ASR
 |

1152 
	`RTEMS_INTERRUPT_LEVEL
(0),

1153 
RTEMS_NO_FLOATING_POINT
 | 
RTEMS_LOCAL
,

1154 &
©a_sk_id
);

1155 ià(
¡©us
 !ð
RTEMS_SUCCESSFUL
)

1157 
	`¹ems_mes§ge_queue_de
(
©a_queue_id
);

1158 
	`¹ems_disk_io_dÚe
();

1159  
¡©us
;

1166 
¡©us
 = 
	`¹ems_sk_¡¬t
(
©a_sk_id
, 
©a_queue_sk
, 0);

1167 ià(
¡©us
 !ð
RTEMS_SUCCESSFUL
)

1169 
	`¹ems_sk_de
(
©a_sk_id
);

1170 
	`¹ems_mes§ge_queue_de
(
©a_queue_id
);

1171 
	`¹ems_disk_io_dÚe
();

1172  
¡©us
;

1175 
bufãr
 = (
ut16_t
*)
	`m®loc
(
ATA_SECTOR_SIZE
);

1176 ià(
bufãr
 =ð
NULL
)

1178 
	`¹ems_sk_de
(
©a_sk_id
);

1179 
	`¹ems_mes§ge_queue_de
(
©a_queue_id
);

1180 
	`¹ems_disk_io_dÚe
();

1181  
RTEMS_NO_MEMORY
;

1184 
©a_devs_numb
 = 0;

1186 
i
 = 0; i < (2 * 
IDE_CTRL_MAX_MINOR_NUMBER
); i++)

1187 
©a_devs
[
i
].
deviû
 = 
ATA_UNDEFINED_VALUE
;

1189 #ià
CPU_SIMPLE_VECTORED_INTERRUPTS
 =ð
TRUE


1191 
i
 = 0; i < 
ATA_MAX_RTEMS_INT_VEC_NUMBER
; i++)

1192 
	`¹ems_cha_lize_em±y
(&
©a_t_vec
[
i
]);

1194 
i
 = 0; i < 
ATA_IRQ_CHAIN_MAX_CNT
; i++) {

1195 
	`¹ems_cha_lize_em±y
(&(
©a_q_cha
[
i
].
q_cha
));

1211 
ù¾_mÜ
 = 0; cl_mÜ < 
IDE_CÚÞËr_CouÁ
; ctrl_minor++)

1212 ià(
IDE_CÚÞËr_TabË
[
ù¾_mÜ
].
¡©us
 =ð
IDE_CTRL_INITIALIZED
)

1214 
	`¹ems_cha_lize_em±y
(&
©a_ide_ù¾s
[
ù¾_mÜ
].
»qs
);

1216 ià(
IDE_CÚÞËr_TabË
[
ù¾_mÜ
].
t_driv
 =ð
ue
)

1218 
t_¡
 = 
	`m®loc
((
©a_t_¡_t
));

1219 ià(
t_¡
 =ð
NULL
)

1221 
	`ä
(
bufãr
);

1222 
	`¹ems_sk_de
(
©a_sk_id
);

1223 
	`¹ems_mes§ge_queue_de
(
©a_queue_id
);

1224 
	`¹ems_disk_io_dÚe
();

1225  
RTEMS_NO_MEMORY
;

1228 
t_¡
->
ù¾_mÜ
 = ctrl_minor;

1229 #ià
CPU_SIMPLE_VECTORED_INTERRUPTS
 =ð
TRUE


1230 
¡©us
 = 
	`¹ems_¼u±_ÿtch
(

1231 
©a_¼u±_hªdËr
,

1232 
IDE_CÚÞËr_TabË
[
ù¾_mÜ
].
t_vec
,

1233 &
Þd_i¤
);

1240 
©a_q_cha_u£
 = -1;

1241 
i
 = 0;

1242 ((
i
 < 
©a_q_cha_út
) &&

1243 (
©a_q_cha_u£
 < 0));
i
++) {

1244 ià(
©a_q_cha
[
i
].
Çme
 ==

1245 
IDE_CÚÞËr_TabË
[
ù¾_mÜ
].
t_vec
) {

1246 
©a_q_cha_u£
 = 
i
;

1249 ià(
©a_q_cha_u£
 < 0) {

1253 ià(
©a_q_cha_út
 < 
ATA_IRQ_CHAIN_MAX_CNT
) {

1254 
©a_q_cha_u£
 = 
©a_q_cha_út
++;

1256 
©a_q_cha
[
©a_q_cha_u£
].
Çme
 =

1257 
IDE_CÚÞËr_TabË
[
ù¾_mÜ
].
t_vec
;

1258 
©a_q_d©a
.
Çme
 =

1259 
IDE_CÚÞËr_TabË
[
ù¾_mÜ
].
t_vec
;

1260 
©a_q_d©a
.
hdl
 = 
©a_¼u±_hªdËr
;

1261 
©a_q_d©a
.
hªdË
 = (
¹ems_q_hdl_·¿m
è
ù¾_mÜ
;

1263 
¡©us
 = ((0 =ð
	`BSP_¡®l_¹ems_q_hªdËr
(&
©a_q_d©a
))

1264 ? 
RTEMS_INVALID_NUMBER


1265 : 
RTEMS_SUCCESSFUL
);

1268 
¡©us
 = 
RTEMS_TOO_MANY
;

1272 ià(
¡©us
 !ð
RTEMS_SUCCESSFUL
)

1274 
	`ä
(
t_¡
);

1275 
	`ä
(
bufãr
);

1276 
	`¹ems_sk_de
(
©a_sk_id
);

1277 
	`¹ems_mes§ge_queue_de
(
©a_queue_id
);

1278 
	`¹ems_disk_io_dÚe
();

1279  
¡©us
;

1281 #ià
CPU_SIMPLE_VECTORED_INTERRUPTS
 =ð
TRUE


1282 
	`¹ems_cha_­³nd
(

1283 &
©a_t_vec
[
IDE_CÚÞËr_TabË
[
ù¾_mÜ
].
t_vec
],

1284 &
t_¡
->
lk
);

1286 
	`¹ems_cha_­³nd
(

1287 &(
©a_q_cha
[
©a_q_cha_u£
].
q_cha
),

1288 &
t_¡
->
lk
);

1292 
	`ide_cÚÞËr_wre_»gi¡
(
ù¾_mÜ
,

1293 
IDE_REGISTER_DEVICE_CONTROL_OFFSET
,

1294 
IDE_REGISTER_DEVICE_CONTROL_nIEN
);

1297 
	`©a_execu_deviû_dgno¡ic
(
ù¾_mÜ
, 
bufãr
);

1300 
dev
 = 0; dev < 2; dev++)

1301 ià(
	`ATA_DEV_INFO
(
ù¾_mÜ
, 
dev
).
´e£Á
)

1303 
¡©us
 = 
	`©a_idtify_deviû
(

1304 
ù¾_mÜ
,

1305 
dev
,

1306 
bufãr
,

1307 &
	`ATA_DEV_INFO
(
ù¾_mÜ
, 
dev
));

1308 ià(
¡©us
 !ð
RTEMS_SUCCESSFUL
)

1315 
¡©us
 = 
	`ide_cÚÞËr_cÚfig_io_¥d
(

1316 
ù¾_mÜ
,

1317 
	`ATA_DEV_INFO
(
ù¾_mÜ
, 
dev
).
modes_avaabË
);

1318 ià(
¡©us
 !ð
RTEMS_SUCCESSFUL
)

1324 
©a_devs
[
©a_devs_numb
].
ù¾_mÜ
 = ctrl_minor;

1325 
©a_devs
[
©a_devs_numb
].
deviû
 = 
dev
;

1328 
	`¡rýy
(
Çme
, "/dev/hd ");

1329 
Çme
[7] = 'a' + 2 * 
ù¾_mÜ
 + 
dev
;

1331 
deviû
 = 
	`¹ems_fesy¡em_make_dev_t
(

1332 
majÜ
,

1333 (
©a_devs_numb
 *

1334 
ATA_MINOR_NUM_RESERVED_PER_ATA_DEVICE
));

1335 
¡©us
 = 
	`¹ems_disk_ü_phys
(
deviû
, 
ATA_SECTOR_SIZE
,

1336 
	`ATA_DEV_INFO
(
ù¾_mÜ
, 
dev
).
lba_avaibË
 ?

1337 
	`ATA_DEV_INFO
(
ù¾_mÜ
, 
dev
).
lba_£ùÜs
 :

1338 (
	`ATA_DEV_INFO
(
ù¾_mÜ
, 
dev
).
hds
 *

1339 
	`ATA_DEV_INFO
(
ù¾_mÜ
, 
dev
).
cylds
 *

1340 
	`ATA_DEV_INFO
(
ù¾_mÜ
, 
dev
).
£ùÜs
),

1341 
©a_ioùl
, 
NULL
, 
Çme
);

1342 ià(
¡©us
 !ð
RTEMS_SUCCESSFUL
)

1344 
©a_devs
[
©a_devs_numb
].
deviû
 = 
ATA_UNDEFINED_VALUE
;

1347 
©a_devs_numb
++;

1349 ià(
IDE_CÚÞËr_TabË
[
ù¾_mÜ
].
t_driv
 =ð
ue
)

1351 
	`ide_cÚÞËr_wre_»gi¡
(
ù¾_mÜ
,

1352 
IDE_REGISTER_DEVICE_CONTROL_OFFSET
,

1357 
	`ä
(
bufãr
);

1358 
©a_lized
 = 
ue
;

1359  
RTEMS_SUCCESSFUL
;

1360 
	}
}

	@src/libchip/ide/ata.h

14 #iâdeà
__ATA_H__


15 
	#__ATA_H__


	)

17 
	~<¹ems.h
>

18 
	~<sys/ioùl.h
>

20 
	~<¹ems/blkdev.h
>

22 #ifdeà
__ýlu¥lus


26 
¹ems_deviû_driv
 
¹ems_©a_lize
(

27 
¹ems_deviû_majÜ_numb
 
majÜ
,

28 
¹ems_deviû_mÜ_numb
 
mÜ
,

29 *
¬gs
);

31 
	#ATA_DRIVER_TABLE_ENTRY
 \

32 {
¹ems_©a_lize
, 
RTEMS_GENERIC_BLOCK_DEVICE_DRIVER_ENTRIES
}

	)

35 
	#ATAIO_SET_MULTIPLE_MODE
 
	`_IO
('A', 1)

	)

41 
	#ATA_DRIVER_MESSAGE_QUEUE_SIZE
 50

	)

42 
	#ATA_DRIVER_TASK_STACK_SIZE
 16*1024

	)

43 
	#ATA_DRIVER_TASK_DEFAULT_PRIORITY
 140

	)

44 
¹ems_sk_´iÜy
 
¹ems_©a_driv_sk_´iÜy
;

45 #ifdeà
__ýlu¥lus


	@src/libchip/ide/ata_internal.h

15 #iâdeà
__ATA_INTERNAL_H__


16 
	#__ATA_INTERNAL_H__


	)

18 
	~<sys/·¿m.h
>

19 
	~<¹ems.h
>

20 
	~<sys/ty³s.h
>

21 
	~<¹ems/libio.h
>

22 
	~<¡dlib.h
>

24 
	~<¹ems/blkdev.h
>

25 
	~<¹ems/diskdevs.h
>

27 #ifdeà
__ýlu¥lus


37 #ià(
CPU_BIG_ENDIAN
 =ð
TRUE
)

38 
	#CF_LE_W
(
v
è
	`CPU_sw­_u16
(v)

	)

39 
	#CF_LE_L
(
v
è
	`CPU_sw­_u32
(v)

	)

40 
	#CT_LE_W
(
v
è
	`CPU_sw­_u16
(v)

	)

41 
	#CT_LE_L
(
v
è
	`CPU_sw­_u32
(v)

	)

43 
	#CF_LE_W
(
v
è(v)

	)

44 
	#CF_LE_L
(
v
è(v)

	)

45 
	#CT_LE_W
(
v
è(v)

	)

46 
	#CT_LE_L
(
v
è(v)

	)

49 
	#ATA_UNDEFINED_VALUE
 (-1)

	)

52 
	#ATA_SECTOR_SIZE
 512

	)

55 
	#ATA_MAX_CMD_REG_OFFSET
 8

	)

61 
	#ATA_COMMAND_TYPE_NON_DATA
 0

	)

62 
	#ATA_COMMAND_TYPE_PIO_IN
 1

	)

63 
	#ATA_COMMAND_TYPE_PIO_OUT
 2

	)

64 
	#ATA_COMMAND_TYPE_DMA
 3

	)

74 
	#ATA_COMMAND_NOP
 0x00

	)

75 
	#ATA_COMMAND_READ_SECTORS
 0x20

	)

76 
	#ATA_COMMAND_WRITE_SECTORS
 0x30

	)

77 
	#ATA_COMMAND_READ_VERIFY_SECTORS
 0x40

	)

78 
	#ATA_COMMAND_SEEK
 0x70

	)

79 
	#ATA_COMMAND_EXECUTE_DEVICE_DIAGNOSTIC
 0x90

	)

80 
	#ATA_COMMAND_INITIALIZE_DEVICE_PARAMETERS
 0x91

	)

81 
	#ATA_COMMAND_DOWNLOAD_MICROCODE
 0x92

	)

82 
	#ATA_COMMAND_READ_MULTIPLE
 0xc4

	)

83 
	#ATA_COMMAND_WRITE_MULTIPLE
 0xc5

	)

84 
	#ATA_COMMAND_SET_MULTIPLE_MODE
 0xc6

	)

85 
	#ATA_COMMAND_READ_DMA
 0xc8

	)

86 
	#ATA_COMMAND_WRITE_DMA
 0xÿ

	)

87 
	#ATA_COMMAND_STANDBY_IMMEDIATE
 0xe0

	)

88 
	#ATA_COMMAND_IDLE_IMMEDIATE
 0xe1

	)

89 
	#ATA_COMMAND_STANDBY
 0xe2

	)

90 
	#ATA_COMMAND_IDLE
 0xe3

	)

91 
	#ATA_COMMAND_READ_BUFFER
 0xe4

	)

92 
	#ATA_COMMAND_CHECK_POWER_MODE
 0xe5

	)

93 
	#ATA_COMMAND_SLEEP
 0xe6

	)

94 
	#ATA_COMMAND_WRITE_BUFFER
 0xe8

	)

95 
	#ATA_COMMAND_IDENTIFY_DEVICE
 0xec

	)

96 
	#ATA_COMMAND_SET_FEATURES
 0xef

	)

99 
	#ATA_COMMAND_MEDIA_LOCK
 0xde

	)

100 
	#ATA_COMMAND_MEDIA_UNLOCK
 0xdf

	)

101 
	#ATA_COMMAND_MEDIA_EJECT
 0xed

	)

105 
	#ATA_COMMAND_RECALIBRATE
 0x10

	)

106 
	#ATA_COMMAND_READ_SECTOR_NON_RETRY
 0x21

	)

107 
	#ATA_COMMAND_READ_LONG_RETRY
 0x22

	)

108 
	#ATA_COMMAND_READ_LONG_NON_RETRY
 0x23

	)

109 
	#ATA_COMMAND_WRITE_SECTOR_NON_RETRY
 0x31

	)

110 
	#ATA_COMMAND_WRITE_LONG_RETRY
 0x32

	)

111 
	#ATA_COMMAND_WRITE_LONG_NON_RETRY
 0x33

	)

112 
	#ATA_COMMAND_WRITE_VERIFY
 0x3c

	)

113 
	#ATA_COMMAND_READ_VERIFY_SECTOR_NON_RETRY
 0x41

	)

114 
	#ATA_COMMAND_FORMAT_TRACK
 0x50

	)

115 
	#ATA_COMMAND_READ_DMA_NON_RETRY
 0xc9

	)

116 
	#ATA_COMMAND_WRITE_DMA_NON_RETRY
 0xcb

	)

117 
	#ATA_COMMAND_ACKNOWLEGE_MEDIA_CHANGE
 0xdb

	)

118 
	#ATA_COMMAND_BOOT_POST_BOOT
 0xdc

	)

119 
	#ATA_COMMAND_BOOT_PRE_BOOT
 0xdd

	)

120 
	#ATA_COMMAND_WRITE_SAME
 0xe9

	)

123 
	#ATA_COMMAND_CFA_REQUEST_EXTENDED_ERROR_CODE
 0x03

	)

124 
	#ATA_COMMAND_CFA_WRITE_SECTORS_WITHOUT_ERASE
 0x38

	)

125 
	#ATA_COMMAND_CFA_TRANSLATE_SECTOR
 0x87

	)

126 
	#ATA_COMMAND_CFA_ERASE_SECTORS
 0xc0

	)

127 
	#ATA_COMMAND_CFA_WRITE_MULTIPLE_WITHOUT_ERASE
 0xcd

	)

130 
	#ATA_COMMAND_DEVICE_RESET
 0x08

	)

131 
	#ATA_COMMAND_PACKET
 0xa0

	)

132 
	#ATA_COMMAND_IDENTIFY_PACKET_DEVICE
 0xa1

	)

133 
	#ATA_COMMAND_SERVICE
 0xa2

	)

136 
	#ATA_COMMAND_SECURITY_SET_PASSWORD
 0xf1

	)

137 
	#ATA_COMMAND_SECURITY_UNLOCK
 0xf2

	)

138 
	#ATA_COMMAND_SECURITY_ERASE_PREPARE
 0xf3

	)

139 
	#ATA_COMMAND_SECURITY_ERASE_UNIT
 0xf4

	)

140 
	#ATA_COMMAND_SECURITY_FREEZE_LOCK
 0xf5

	)

141 
	#ATA_COMMAND_SECURITY_DISABLE_PASSWORD
 0xf6

	)

144 
	#ATA_COMMAND_SMART
 0xb0

	)

145 
	#ATA_COMMAND_READ_DMA_QUEUED
 0xc7

	)

146 
	#ATA_COMMAND_WRITE_DMA_QUEUED
 0xcc

	)

147 
	#ATA_COMMAND_GET_MEDIA_STATUS
 0xda

	)

148 
	#ATA_COMMAND_FLUSH_CACHE
 0xe7

	)

149 
	#ATA_COMMAND_READ_NATIVE_MAX_ADDRESS
 0xf8

	)

150 
	#ATA_COMMAND_SET_MAX_ADDRESS
 0xf9

	)

152 
	#ATA_REGISTERS_VALUE
(
»g
è(1 << (»g))

	)

155 
	#ATA_IDENT_WORD_RW_MULT
 47

	)

156 
	#ATA_IDENT_WORD_CAPABILITIES
 49

	)

157 
	#ATA_IDENT_WORD_FIELD_VALIDITY
 53

	)

158 
	#ATA_IDENT_WORD_NUM_OF_CURR_LOG_CLNDS
 54

	)

159 
	#ATA_IDENT_WORD_NUM_OF_CURR_LOG_HEADS
 55

	)

160 
	#ATA_IDENT_WORD_NUM_OF_CURR_LOG_SECS
 56

	)

161 
	#ATA_IDENT_WORD_MULT_SECS
 59

	)

162 
	#ATA_IDENT_WORD_NUM_OF_USR_SECS0
 60

	)

163 
	#ATA_IDENT_WORD_NUM_OF_USR_SECS1
 61

	)

164 
	#ATA_IDENT_WORD_PIO_SPPRTD
 64

	)

166 
	#ATA_IDENT_BIT_VALID
 0x02

	)

172 
	#ATA_REGISTERS_POSITION
 0xfc

	)

174 
	#ATA_MINOR_NUM_RESERVED_PER_ATA_DEVICE
 64

	)

176 
	#ATA_MAX_RTEMS_INT_VEC_NUMBER
 255

	)

178 
	#ATA_MAX_NAME_LENGTH
 10

	)

181 
	#ATA_DEV0_PASSED_DEV1_PASSED_OR_NOT_PRSNT
 0x01

	)

182 
	#ATA_DEV0_PASSED_DEV1_FAILED
 0x81

	)

183 
	#ATA_DEV1_PASSED_DEV0_FAILED
 0x80

	)

188 
	#ATA_DEV_INFO
(
cÚÞËr_mÜ
, 
dev
) \

189 
©a_ide_ù¾s
[
cÚÞËr_mÜ
].
deviû
[
dev
]

	)

194 
	s©a_»gi¡s_s
 {

195 
ut16_t
 
»gs
[8];

196 
ut16_t
 
to_»ad
;

197 
ut16_t
 
to_wre
;

198 } 
	t©a_»gi¡s_t
;

201 
	s©a_»q_s
 {

202 
¹ems_cha_node
 
lk
;

203 
ty³
;

204 
©a_»gi¡s_t
 
»gs
;

205 
ut32_t
 
út
;

206 
ut32_t
 
cbuf
;

207 
ut32_t
 
pos
;

208 
¹ems_blkdev_»que¡
 *
b»q
;

211 
¹ems_id
 
£ma
;

214 
¹ems_¡©us_code
 
¡©us
;

215 
fo
;

216 } 
	t©a_»q_t
;

219 
	#ATA_EXEC_CALLBACK
(
¬eq
, 
¡©us
) \

221 ià((
¬eq
)->
b»q
 !ð
NULL
) \

222 
	`¹ems_blkdev_»que¡_dÚe
((
¬eq
)->
b»q
, 
¡©us
); \

223 } 0)

	)

226 
	e©a_msg_ty³_s
 {

227 
ATA_MSG_GEN_EVT
 = 1,

228 
ATA_MSG_SUCCESS_EVT
,

229 
ATA_MSG_ERROR_EVT
,

230 
ATA_MSG_PROCESS_NEXT_EVT


231 } 
	t©a_msg_ty³_t
;

234 
	s©a_queue_msg_s
 {

235 
©a_msg_ty³_t
 
ty³
;

236 
¹ems_deviû_mÜ_numb
 
ù¾_mÜ
;

237 
rÜ
;

238 } 
	t©a_queue_msg_t
;

241 
	#ATA_FILL_MSG
(
msg
, 
evt_ty³
, 
ù¾
, 
r
)\

243 
msg
.
ty³
 = 
evt_ty³
;\

244 
msg
.
ù¾_mÜ
 = 
ù¾
;\

245 
msg
.
rÜ
 = 
r
;\

246 } 0)

	)

248 
	#ATA_SEND_EVT
(
msg
, 
ty³
, 
ù¾
, 
r
)\

250 
¹ems_¡©us_code
 
rc
;\

251 
	`ATA_FILL_MSG
(
msg
, 
ty³
, 
ù¾
, 
r
);\

252 
rc
 = 
	`¹ems_mes§ge_queue_£nd
(
©a_queue_id
, &
msg
,\

253 (
©a_queue_msg_t
));\

254 ià(
rc
 !ð
RTEMS_SUCCESSFUL
)\

255 
	`¹ems_çl_rÜ_occu¼ed
(
RTEMS_INTERNAL_ERROR
);\

256 } 0)

	)

262 
	s©a_t_¡_s
 {

263 
¹ems_cha_node
 
lk
;

264 
¹ems_deviû_mÜ_numb
 
ù¾_mÜ
;

265 } 
	t©a_t_¡_t
;

271 
	s©a_ide_dev_s
 {

272 
ù¾_mÜ
;

273 
deviû
;

274 } 
	t©a_ide_dev_t
;

279 
	s©a_dev_s
 {

280 
t8_t
 
´e£Á
;

282 
ut16_t
 
cylds
;

283 
ut16_t
 
hds
;

284 
ut16_t
 
£ùÜs
;

285 
ut32_t
 
lba_£ùÜs
;

288 
ut8_t
 
lba_avaibË
;

290 
ut16_t
 
modes_avaabË
;

291 
ut16_t
 
mode_aùive
;

292 } 
	t©a_dev_t
;

299 
	s©a_ide_ù¾_s
 {

300 
boÞ
 
´e£Á
;

301 
©a_dev_t
 
deviû
[2];

302 
¹ems_cha_cÚÞ
 
»qs
;

303 } 
	t©a_ide_ù¾_t
;

306 
	sblkdev_»que¡1
 {

307 
¹ems_blkdev_»que¡
 
»q
;

308 
¹ems_blkdev_sg_bufãr
 
sg
[1];

309 } 
	tblkdev_»que¡1
;

311 
©a_b»q_
(
blkdev_»que¡1
 *
b»q
, 
ut16_t
 *
£ùÜ_bufãr
);

313 
¹ems_¡©us_code
 
©a_idtify_deviû
(

314 
¹ems_deviû_mÜ_numb
 
ù¾_mÜ
,

315 
dev
,

316 
ut16_t
 *
£ùÜ_bufãr
,

317 
©a_dev_t
 *
deviû_y


320 
©a_´oûss_»que¡_Ú__pha£
(

321 
¹ems_deviû_mÜ_numb
 
ù¾_mÜ
,

322 
©a_»q_t
 *
¬eq


325 #ifdeà
__ýlu¥lus


	@src/libchip/ide/ata_util.c

12 
	~"©a_º®.h
"

14 
	~<as£¹.h
>

15 
	~<¡rg.h
>

17 
	~<libch/ide_ù¾_io.h
>

18 
	~<libch/ide_ù¾_cfg.h
>

32 
	$©a_´oûss_»que¡_Ú__pha£
(
¹ems_deviû_mÜ_numb
 
ù¾_mÜ
,

33 
©a_»q_t
 *
¬eq
)

35 
ut16_t
 
by
;

36 
ut8_t
 
i
;

38 
ut8_t
 
dev
;

40 
ut16_t
 
v®
, 
v®1
;

41 vÞ©
»s
;

43 
	`as£¹
(
¬eq
);

46 
dev
 = 
¬eq
->
»gs
.»gs[
IDE_REGISTER_DEVICE_HEAD
] &

47 
IDE_REGISTER_DEVICE_HEAD_DEV
;

50 
	`ide_cÚÞËr_wre_»gi¡
(
ù¾_mÜ
, 
IDE_REGISTER_DEVICE_HEAD
,

51 
¬eq
->
»gs
.»gs[
IDE_REGISTER_DEVICE_HEAD
]);

53 
»s
 = 0;

55 
	`ide_cÚÞËr_»ad_»gi¡
(
ù¾_mÜ
, 
IDE_REGISTER_STATUS
, &
by
);

62 iàÐ! (
by
 & (
IDE_REGISTER_STATUS_BSY
 | 
IDE_REGISTER_STATUS_DRDY
))) {

63 
»s
++;

64 iàÐ10000 =ð
»s
 ) {

66 
¬eq
->
b»q
->
¡©us
 = 
RTEMS_UNSATISFIED
;

70 } (
by
 & 
IDE_REGISTER_STATUS_BSY
) ||

71 (!(
by
 & 
IDE_REGISTER_STATUS_DRDY
)));

73 
i
=0; i< 
ATA_MAX_CMD_REG_OFFSET
; i++)

75 
ut32_t
 
»g
 = (1 << 
i
);

76 ià(
¬eq
->
»gs
.
to_wre
 & 
»g
)

77 
	`ide_cÚÞËr_wre_»gi¡
(
ù¾_mÜ
, 
i
,

78 
¬eq
->
»gs
.»gs[
i
]);

82 
	`ide_cÚÞËr_»ad_»gi¡
(
ù¾_mÜ
, 
IDE_REGISTER_STATUS
, &
by
);

83 } 
by
 & 
IDE_REGISTER_STATUS_BSY
);

85 
	`ide_cÚÞËr_»ad_»gi¡
(
ù¾_mÜ
, 
IDE_REGISTER_STATUS
, &
v®
);

86 
	`ide_cÚÞËr_»ad_»gi¡
(
ù¾_mÜ
, 
IDE_REGISTER_ERROR
, &
v®1
);

88 ià(
v®
 & 
IDE_REGISTER_STATUS_ERR
)

90 
¬eq
->
b»q
->
¡©us
 = 
RTEMS_IO_ERROR
;

94 
¬eq
->
ty³
)

96 
ATA_COMMAND_TYPE_PIO_IN
:

97 ià(
¬eq
->
út
)

99 
ccbuf
 = 
¬eq
->
cbuf
;

100 
	`ide_cÚÞËr_»ad_d©a_block
(
ù¾_mÜ
,

101 
¬eq
->
b»q
->
bufs
[0].
Ëngth
 *»q->
út
,

102 
¬eq
->
b»q
->
bufs
, &¬eq->
cbuf
,

103 &
¬eq
->
pos
);

104 
ccbuf
 = 
¬eq
->
cbuf
 - ccbuf;

105 
¬eq
->
út
 -ð
ccbuf
;

107 ià(
¬eq
->
út
 == 0)

109 
¬eq
->
b»q
->
¡©us
 = 
RTEMS_SUCCESSFUL
;

117 
	`¹ems_çl_rÜ_occu¼ed
(
RTEMS_INTERNAL_ERROR
);

121 
ATA_COMMAND_TYPE_NON_DATA
:

122 
¬eq
->
b»q
->
¡©us
 = 
RTEMS_SUCCESSFUL
;

123 
¬eq
->
fo
 = 
v®1
;

127 
¬eq
->
b»q
->
¡©us
 = 
RTEMS_IO_ERROR
;

130 
	}
}

132 
	$©a_b»q_
(
blkdev_»que¡1
 *
b»q
, 
ut16_t
 *
£ùÜ_bufãr
)

134 
	`mem£t
(
b»q
, 0, (*breq));

136 
b»q
->
»q
.
dÚe_¬g
 = breq;

137 
b»q
->
»q
.
buâum
 = 1;

138 
b»q
->
»q
.
bufs
 [0].
Ëngth
 = 
ATA_SECTOR_SIZE
;

139 
b»q
->
»q
.
bufs
 [0].
bufãr
 = 
£ùÜ_bufãr
;

140 
	}
}

142 
¹ems_¡©us_code
 
	$©a_idtify_deviû
(

143 
¹ems_deviû_mÜ_numb
 
ù¾_mÜ
,

144 
dev
,

145 
ut16_t
 *
£ùÜ_bufãr
,

146 
©a_dev_t
 *
deviû_y


149 
©a_»q_t
 
¬eq
;

150 
blkdev_»que¡1
 
b»q
;

152 
	`©a_b»q_
(&
b»q
, 
£ùÜ_bufãr
);

158 
	`mem£t
(&
¬eq
, 0, (
©a_»q_t
));

159 
¬eq
.
ty³
 = 
ATA_COMMAND_TYPE_PIO_IN
;

160 
¬eq
.
»gs
.
to_wre
 = 
	`ATA_REGISTERS_VALUE
(
IDE_REGISTER_COMMAND
);

161 
¬eq
.
»gs
.»g [
IDE_REGISTER_COMMAND
] = 
ATA_COMMAND_IDENTIFY_DEVICE
;

162 
¬eq
.
»gs
.
to_»ad
 = 
	`ATA_REGISTERS_VALUE
(
IDE_REGISTER_STATUS
);

163 
¬eq
.
b»q
 = (
¹ems_blkdev_»que¡
 *)&breq;

164 
¬eq
.
út
 = 
b»q
.
»q
.
buâum
;

165 
¬eq
.
»gs
.»g [
IDE_REGISTER_DEVICE_HEAD
] |=

166 
dev
 << 
IDE_REGISTER_DEVICE_HEAD_DEV_POS
;

173 
	`©a_´oûss_»que¡_Ú__pha£
(
ù¾_mÜ
, &
¬eq
);

176 ià(
b»q
.
»q
.
¡©us
 !ð
RTEMS_SUCCESSFUL
) {

177  
RTEMS_IO_ERROR
;

184 
deviû_y
->
cylds
 =

185 
	`CF_LE_W
(
£ùÜ_bufãr
[
ATA_IDENT_WORD_NUM_OF_CURR_LOG_CLNDS
]);

186 
deviû_y
->
hds
 =

187 
	`CF_LE_W
(
£ùÜ_bufãr
[
ATA_IDENT_WORD_NUM_OF_CURR_LOG_HEADS
]);

188 
deviû_y
->
£ùÜs
 =

189 
	`CF_LE_W
(
£ùÜ_bufãr
[
ATA_IDENT_WORD_NUM_OF_CURR_LOG_SECS
]);

190 
deviû_y
->
lba_£ùÜs
 =

191 
	`CF_LE_W
(
£ùÜ_bufãr
[
ATA_IDENT_WORD_NUM_OF_USR_SECS1
]);

192 
deviû_y
->
lba_£ùÜs
 <<= 16;

193 
deviû_y
->
lba_£ùÜs
 +ð
	`CF_LE_W
(
£ùÜ_bufãr
[
ATA_IDENT_WORD_NUM_OF_USR_SECS0
]);

194 
deviû_y
->
lba_avaibË
 =

195 (
	`CF_LE_W
(
£ùÜ_bufãr
[
ATA_IDENT_WORD_CAPABILITIES
]) >> 9) & 0x1;

197 ià((
	`CF_LE_W
(
£ùÜ_bufãr
[
ATA_IDENT_WORD_FIELD_VALIDITY
]) &

198 
ATA_IDENT_BIT_VALID
) == 0) {

200 
deviû_y
->
mode_aùive
 = 
ATA_MODES_PIO3
;

202 
deviû_y
->
modes_avaabË
 =

203 ((
	`CF_LE_W
(
£ùÜ_bufãr
[64]è& 0x1è? 
ATA_MODES_PIO3
 : 0) |

204 ((
	`CF_LE_W
(
£ùÜ_bufãr
[64]è& 0x2è? 
ATA_MODES_PIO4
 : 0) |

205 ((
	`CF_LE_W
(
£ùÜ_bufãr
[63]è& 0x1è? 
ATA_MODES_DMA0
 : 0) |

206 ((
	`CF_LE_W
(
£ùÜ_bufãr
[63]) & 0x2) ?

207 
ATA_MODES_DMA0
 | 
ATA_MODES_DMA1
 : 0) |

208 ((
	`CF_LE_W
(
£ùÜ_bufãr
[63]) & 0x4) ?

209 
ATA_MODES_DMA0
 | 
ATA_MODES_DMA1
 | 
ATA_MODES_DMA2
 : 0);

210 ià(
deviû_y
->
modes_avaabË
 == 0) {

211  
RTEMS_IO_ERROR
;

215  
RTEMS_SUCCESSFUL
;

216 
	}
}

	@src/libchip/ide/ide_controller.c

16 
	#IDE_CONTROLLER_TRACE
 0

	)

18 
	~<¹ems/cha.h
>

19 
	~<ºo.h
>

20 
	~<¹ems/blkdev.h
>

22 
	~<libch/ide_ù¾.h
>

23 
	~<libch/ide_ù¾_cfg.h
>

24 
	~<libch/ide_ù¾_io.h
>

26 #ià
IDE_CONTROLLER_TRACE


27 
	gide_cÚÞËr_aû
 = 1;

44 
¹ems_deviû_driv


45 
	$ide_cÚÞËr_lize
(
¹ems_deviû_majÜ_numb
 
majÜ
,

46 
¹ems_deviû_mÜ_numb
 
mÜ_¬g
,

47 *
¬gs
)

49 
mÜ
;

52 ià(
IDE_CÚÞËr_CouÁ
 > 
IDE_CTRL_MAX_MINOR_NUMBER
)

53 
	`¹ems_çl_rÜ_occu¼ed
(
RTEMS_TOO_MANY
);

55 
mÜ
=0; mÜ < 
IDE_CÚÞËr_CouÁ
; minor++)

57 
IDE_CÚÞËr_TabË
[
mÜ
].
¡©us
 = 
IDE_CTRL_NON_INITIALIZED
;

59 ià((
IDE_CÚÞËr_TabË
[
mÜ
].
´obe
 =ð
NULL
 ||

60 
IDE_CÚÞËr_TabË
[
mÜ
].
	`´obe
(minor)) &&

61 (
IDE_CÚÞËr_TabË
[
mÜ
].
âs
->
ù¾_´obe
 =ð
NULL
 ||

62 
IDE_CÚÞËr_TabË
[
mÜ
].
âs
->
	`ù¾_´obe
(minor)))

64 
dev_t
 
dev
;

65 
dev
 = 
	`¹ems_fesy¡em_make_dev_t
Ð
majÜ
, 
mÜ
 );

66 ià(
	`mknod
(
IDE_CÚÞËr_TabË
[
mÜ
].
Çme
,

67 0777 | 
S_IFBLK
, 
dev
 ) < 0)

68 
	`¹ems_çl_rÜ_occu¼ed
(
ºo
);

69 
IDE_CÚÞËr_TabË
[
mÜ
].
âs
->
	`ù¾_lize
(minor);

70 
IDE_CÚÞËr_TabË
[
mÜ
].
¡©us
 = 
IDE_CTRL_INITIALIZED
;

73  
RTEMS_SUCCESSFUL
;

74 
	}
}

91 
	$ide_cÚÞËr_»ad_d©a_block
(
¹ems_deviû_mÜ_numb
 
mÜ
,

92 
ut32_t
 
block_size
,

93 
¹ems_blkdev_sg_bufãr
 *
bufs
,

94 
ut32_t
 *
cbuf
,

95 
ut32_t
 *
pos
)

97 #ià
IDE_CONTROLLER_TRACE


98 ià(
ide_cÚÞËr_aû
)

99 
	`´tk
 ("IDE d©¨blockd: %d:%d\n", *
cbuf
, 
bufs
[*cbuf].
block
);

101 
IDE_CÚÞËr_TabË
[
mÜ
].
âs
->
	`ù¾_»ad_block
(mÜ, 
block_size
, 
bufs
,

102 
cbuf
, 
pos
);

103 
	}
}

120 
	$ide_cÚÞËr_wre_d©a_block
(
¹ems_deviû_mÜ_numb
 
mÜ
,

121 
ut32_t
 
block_size
,

122 
¹ems_blkdev_sg_bufãr
 *
bufs
,

123 
ut32_t
 *
cbuf
,

124 
ut32_t
 *
pos
)

127 #ià
IDE_CONTROLLER_TRACE


128 ià(
ide_cÚÞËr_aû
)

129 
	`´tk
 ("IDE d©¨block wre: %d:%d\n", *
cbuf
, 
bufs
[*cbuf].
block
);

131 
IDE_CÚÞËr_TabË
[
mÜ
].
âs
->
	`ù¾_wre_block
(mÜ, 
block_size
, 
bufs
,

132 
cbuf
, 
pos
);

133 
	}
}

148 
	$ide_cÚÞËr_»ad_»gi¡
(
¹ems_deviû_mÜ_numb
 
mÜ
,

149 
»g
,

150 
ut16_t
 *
v®ue
)

152 
IDE_CÚÞËr_TabË
[
mÜ
].
âs
->
	`ù¾_»g_»ad
(mÜ, 
»g
, 
v®ue
);

153 #ià
IDE_CONTROLLER_TRACE


154 ià(
ide_cÚÞËr_aû
)

155 
	`´tk
 ("IDEdeg: %d => %04x\n", 
»g
, *
v®ue
);

157 
	}
}

172 
	$ide_cÚÞËr_wre_»gi¡
(
¹ems_deviû_mÜ_numb
 
mÜ
, 
»g
,

173 
ut16_t
 
v®ue
)

175 #ià
IDE_CONTROLLER_TRACE


176 ià(
ide_cÚÞËr_aû
)

177 
	`´tk
 ("IDE wr»g: %d => %04x\n", 
»g
, 
v®ue
);

179 
IDE_CÚÞËr_TabË
[
mÜ
].
âs
->
	`ù¾_»g_wre
(mÜ, 
»g
, 
v®ue
);

180 
	}
}

194 
¹ems_¡©us_code


195 
	$ide_cÚÞËr_cÚfig_io_¥d
(
mÜ
, 
ut16_t
 
modes_avaabË
)

197  
IDE_CÚÞËr_TabË
[
mÜ
].
âs
->
	`ù¾_cÚfig_io_¥d
(

198 
mÜ
,

199 
modes_avaabË
);

200 
	}
}

	@src/libchip/ide/ide_ctrl.h

13 #iâdeà
__IDE_CTRL_H__


14 
	#__IDE_CTRL_H__


	)

16 #ifdeà
__ýlu¥lus


20 
¹ems_deviû_driv
 
ide_cÚÞËr_lize
(

21 
¹ems_deviû_majÜ_numb
 
majÜ
,

22 
¹ems_deviû_mÜ_numb
 
mÜ
,

23 *
¬gs
);

26 
	#IDE_CONTROLLER_DRIVER_TABLE_ENTRY
 \

27 {
ide_cÚÞËr_lize
, 
NULL
, NULL, NULL, NULL, NULL}

	)

30 #ifdeà
__ýlu¥lus


	@src/libchip/ide/ide_ctrl_cfg.h

14 #iâdeà
__IDE_CTRL_CFG_H__


15 
	#__IDE_CTRL_CFG_H__


	)

17 
	~<¹ems/blkdev.h
>

19 #ifdeà
__ýlu¥lus


27 
IDE_STD
,

28 
IDE_CUSTOM


29 } 
	tide_ù¾_devs_t
;

32 
	#ATA_MODES_PIO3
 0x001

	)

33 
	#ATA_MODES_PIO4
 0x002

	)

35 
	#ATA_MODES_PIO
 0x003

	)

37 
	#ATA_MODES_DMA0
 0x004

	)

38 
	#ATA_MODES_DMA1
 0x008

	)

39 
	#ATA_MODES_DMA2
 0x010

	)

41 
	#ATA_MODES_UDMA0
 0x020

	)

42 
	#ATA_MODES_UDMA1
 0x040

	)

43 
	#ATA_MODES_UDMA2
 0x080

	)

44 
	#ATA_MODES_UDMA3
 0x100

	)

45 
	#ATA_MODES_UDMA4
 0x200

	)

46 
	#ATA_MODES_UDMA5
 0x400

	)

48 
	#ATA_MODES_UDMA
 0x7e0

	)

49 
	#ATA_MODES_DMA
 0x7fc

	)

57 
	side_ù¾_âs_s
 {

58 
boÞ
 (*
ù¾_´obe
)(
mÜ
);

59 (*
ù¾_lize
)(
mÜ
);

60 (*
ù¾_cÚÞ
)(
mÜ
, 
ut32_t
 
commªd
,

61 *
¬g
);

67 (*
ù¾_»g_»ad
)(
mÜ
, 
»gi¡
, 
ut16_t
 *
v®ue
);

68 (*
ù¾_»g_wre
)(
mÜ
, 
»gi¡
, 
ut16_t
 
v®ue
);

74 (*
ù¾_»ad_block
)(
mÜ
, 
ut32_t
 
block_size
,

75 
¹ems_blkdev_sg_bufãr
 *
bufs
, 
ut32_t
 *
cbuf
,

76 
ut32_t
 *
pos
);

77 (*
ù¾_wre_block
)(
mÜ
, 
ut32_t
 
block_size
,

78 
¹ems_blkdev_sg_bufãr
 *
bufs
, 
ut32_t
 *
cbuf
,

79 
ut32_t
 *
pos
);

81 
¹ems_¡©us_code
 (*
ù¾_cÚfig_io_¥d
)(
mÜ
,

82 
ut16_t
 
modes_avaabË
);

83 } 
	tide_ù¾_âs_t
;

89 
	side_cÚÞËr_b¥_bË_s
 {

90 *
Çme
;

91 
ide_ù¾_devs_t
 
ty³
;

92 
ide_ù¾_âs_t
 *
âs
;

93 
boÞ
 (*
´obe
)(
mÜ
);

94 
ut8_t
 
¡©us
;

97 
ut32_t
 
pÜt1
;

98 
boÞ
 
t_driv
;

99 
¹ems_veùÜ_numb
 
t_vec
;

100 *
·¿ms
;

104 } 
	tide_cÚÞËr_b¥_bË_t
;

107 
ide_cÚÞËr_b¥_bË_t
 
IDE_CÚÞËr_TabË
[];

110 
IDE_CÚÞËr_CouÁ
;

113 
	#IDE_CTRL_MAX_MINOR_NUMBER
 4

	)

115 
	#IDE_CTRL_NON_INITIALIZED
 0

	)

116 
	#IDE_CTRL_INITIALIZED
 1

	)

118 #ifdeà
__ýlu¥lus


	@src/libchip/ide/ide_ctrl_io.h

14 #iâdeà
__IDE_CTRL_IO_H__


15 
	#__IDE_CTRL_IO_H__


	)

17 #ifdeà
__ýlu¥lus


21 
	~<¹ems/blkdev.h
>

24 
	#IDE_REGISTER_DATA
 0

	)

25 
	#IDE_REGISTER_ERROR
 1

	)

26 
	#IDE_REGISTER_FEATURES
 
IDE_REGISTER_ERROR


	)

27 
	#IDE_REGISTER_SECTOR_COUNT
 2

	)

28 
	#IDE_REGISTER_SECTOR_NUMBER
 3

	)

29 
	#IDE_REGISTER_LBA0
 
IDE_REGISTER_SECTOR_NUMBER


	)

30 
	#IDE_REGISTER_CYLINDER_LOW
 4

	)

31 
	#IDE_REGISTER_LBA1
 
IDE_REGISTER_CYLINDER_LOW


	)

32 
	#IDE_REGISTER_CYLINDER_HIGH
 5

	)

33 
	#IDE_REGISTER_LBA2
 
IDE_REGISTER_CYLINDER_HIGH


	)

34 
	#IDE_REGISTER_DEVICE_HEAD
 6

	)

35 
	#IDE_REGISTER_LBA3
 
IDE_REGISTER_DEVICE_HEAD


	)

36 
	#IDE_REGISTER_STATUS
 7

	)

37 
	#IDE_REGISTER_COMMAND
 
IDE_REGISTER_STATUS


	)

40 
	#IDE_REGISTER_ALTERNATE_STATUS
 6

	)

41 
	#IDE_REGISTER_DEVICE_CONTROL
 
IDE_REGISTER_ALTERNATE_STATUS


	)

44 
	#IDE_REGISTER_DEVICE_CONTROL_OFFSET
 8

	)

45 
	#IDE_REGISTER_ALTERNATE_STATUS_OFFSET
 
IDE_REGISTER_DEVICE_CONTROL_OFFSET


	)

46 
	#IDE_REGISTER_DATA_BYTE
 9

	)

47 
	#IDE_REGISTER_DATA_WORD
 10

	)

52 
	#IDE_REGISTER_STATUS_BSY
 0x80

	)

53 
	#IDE_REGISTER_STATUS_DRDY
 0x40

	)

54 
	#IDE_REGISTER_STATUS_DF
 0x20

	)

55 
	#IDE_REGISTER_STATUS_DSC
 0x10

	)

57 
	#IDE_REGISTER_STATUS_DRQ
 0x08

	)

58 
	#IDE_REGISTER_STATUS_CORR
 0x04

	)

60 
	#IDE_REGISTER_STATUS_IDX
 0x02

	)

62 
	#IDE_REGISTER_STATUS_ERR
 0x01

	)

64 
	#IDE_REGISTER_DEVICE_CONTROL_SRST
 0x04

	)

65 
	#IDE_REGISTER_DEVICE_CONTROL_nIEN
 0x02

	)

67 
	#IDE_REGISTER_DEVICE_HEAD_L
 0x40

	)

68 
	#IDE_REGISTER_DEVICE_HEAD_DEV
 0x10

	)

69 
	#IDE_REGISTER_DEVICE_HEAD_DEV_POS
 4

	)

70 
	#IDE_REGISTER_DEVICE_HEAD_HS
 0x0à

	)

71 
	#IDE_REGISTER_LBA3_L
 0x40

	)

72 
	#IDE_REGISTER_LBA3_DEV
 0x10

	)

73 
	#IDE_REGISTER_LBA3_LBA
 0x0f

	)

75 
	#IDE_REGISTER_ERROR_ICRC
 (1 << 7è

	)

77 
	#IDE_REGISTER_ERROR_UNC
 (1 << 6è

	)

78 #ià
CCJ_COULD_NOT_FIND_THIS_ERROR


79 
	#IDE_REGISTER_ERROR_WP
 (1 << 6è

	)

81 
	#IDE_REGISTER_ERROR_MC
 (1 << 5è

	)

82 
	#IDE_REGISTER_ERROR_IDNF
 (1 << 4è

	)

83 
	#IDE_REGISTER_ERROR_MCR
 (1 << 3è

	)

85 
	#IDE_REGISTER_ERROR_ABRT
 (1 << 2è

	)

86 
	#IDE_REGISTER_ERROR_NM
 (1 << 1è

	)

87 
	#IDE_REGISTER_ERROR_AMNF
 (1 << 0è

	)

89 
	#IDE_REGISTER_ERROR_MED
 (1 << 0è

	)

106 
ide_cÚÞËr_»ad_d©a_block
(
¹ems_deviû_mÜ_numb
 
mÜ
,

107 
ut32_t
 
block_size
,

108 
¹ems_blkdev_sg_bufãr
 *
bufs
,

109 
ut32_t
 *
cbuf
,

110 
ut32_t
 *
pos
);

127 
ide_cÚÞËr_wre_d©a_block
(
¹ems_deviû_mÜ_numb
 
mÜ
,

128 
ut32_t
 
block_size
,

129 
¹ems_blkdev_sg_bufãr
 *
bufs
,

130 
ut32_t
 *
cbuf
,

131 
ut32_t
 *
pos
);

146 
ide_cÚÞËr_»ad_»gi¡
(
¹ems_deviû_mÜ_numb
 
mÜ
,

147 
»g
,

148 
ut16_t
 *
v®ue
);

163 
ide_cÚÞËr_wre_»gi¡
(
¹ems_deviû_mÜ_numb
 
mÜ
,

164 
»g
, 
ut16_t
 
v®ue
);

178 
¹ems_¡©us_code


179 
ide_cÚÞËr_cÚfig_io_¥d
(
mÜ
, 
ut16_t
 
modes_avaabË
);

181 #ifdeà
__ýlu¥lus


	@src/libchip/network/cs8900.c

26 
	~<ºo.h
>

27 
	~<¡rg.h
>

28 
	~<¡dio.h
>

30 
	~"cs8900.h
"

36 #ià(
MCLBYTES
 < 1520)

44 
	#CS8900_RX_OK_EVENT
 
RTEMS_EVENT_1


	)

45 
	#CS8900_TX_START_EVENT
 
RTEMS_EVENT_1


	)

46 
	#CS8900_TX_OK_EVENT
 
RTEMS_EVENT_2


	)

47 
	#CS8900_TX_WAIT_EVENT
 
RTEMS_EVENT_3


	)

53 
le
 

54 
	$io_µ_g_»g_16
 (
cs8900_deviû
 *
cs
, 
»g
)

56 
¹ems_¼u±_Ëv
 
Ëv
;

57 
d©a
;

58 
	`¹ems_¼u±_di§bË
 (
Ëv
);

59 
	`cs8900_io_£t_»g
 (
cs
, 
CS8900_IO_PACKET_PAGE_PTR
,

60 0x3000 | 
CS8900_PPP_AUTO_INCREMENT
 | 
»g
);

61 
d©a
 = 
	`cs8900_io_g_»g
 (
cs
, 
CS8900_IO_PP_DATA_PORT0
);

62 
	`¹ems_¼u±_abË
 (
Ëv
);

63  
d©a
;

64 
	}
}

66 
le
 
ut32_t


67 
	$io_µ_g_»g_32
 (
cs8900_deviû
 *
cs
, 
ut16_t
 
»g
)

69 
¹ems_¼u±_Ëv
 
Ëv
;

70 
ut32_t
 
d©a
;

71 
	`¹ems_¼u±_di§bË
 (
Ëv
);

72 
	`cs8900_io_£t_»g
 (
cs
, 
CS8900_IO_PACKET_PAGE_PTR
,

73 0x3000 | 
CS8900_PPP_AUTO_INCREMENT
 | 
»g
);

74 
d©a
 = 
	`cs8900_io_g_»g
 (
cs
, 
CS8900_IO_PP_DATA_PORT0
);

75 
d©a
 <<= 16;

76 
d©a
 |ð
	`cs8900_io_g_»g
 (
cs
, 
CS8900_IO_PP_DATA_PORT1
);

77 
	`¹ems_¼u±_abË
 (
Ëv
);

78  
d©a
;

79 
	}
}

81 
le
 

82 
	$io_µ_£t_»g_16
 (
cs8900_deviû
 *
cs
, 
»g
, 
d©a
)

84 
¹ems_¼u±_Ëv
 
Ëv
;

85 
	`¹ems_¼u±_di§bË
 (
Ëv
);

86 
	`cs8900_io_£t_»g
 (
cs
, 
CS8900_IO_PACKET_PAGE_PTR
,

87 0x3000 | 
CS8900_PPP_AUTO_INCREMENT
 | 
»g
);

88 
	`cs8900_io_£t_»g
 (
cs
, 
CS8900_IO_PP_DATA_PORT0
, 
d©a
);

89 
	`¹ems_¼u±_abË
 (
Ëv
);

90 
	}
}

92 
le
 

93 
	$io_µ_£t_»g_32
 (
cs8900_deviû
 *
cs
, 
»g
, 
d©a
)

95 
	`cs8900_io_£t_»g
 (
cs
, 
CS8900_IO_PACKET_PAGE_PTR
,

96 0x3000 | 
CS8900_PPP_AUTO_INCREMENT
 | 
»g
);

97 
	`cs8900_io_£t_»g
 (
cs
, 
CS8900_IO_PP_DATA_PORT0
, 
d©a
 >> 16);

98 
	`cs8900_io_£t_»g
 (
cs
, 
CS8900_IO_PP_DATA_PORT1
, 
d©a
);

99 
	}
}

101 
le
 

102 
	$io_µ_b_£t_»g_16
 (
cs8900_deviû
 *
cs
, 
»g
, 
mask
)

104 
¹ems_¼u±_Ëv
 
Ëv
;

105 
	`¹ems_¼u±_di§bË
 (
Ëv
);

106 
	`io_µ_£t_»g_16
 (
cs
, 
»g
, 
	`io_µ_g_»g_16
 (cs,egè| 
mask
);

107 
	`¹ems_¼u±_abË
 (
Ëv
);

108 
	}
}

110 
le
 

111 
	$io_µ_b_þr_»g_16
 (
cs8900_deviû
 *
cs
, 
»g
, 
mask
)

113 
¹ems_¼u±_Ëv
 
Ëv
;

114 
	`¹ems_¼u±_di§bË
 (
Ëv
);

115 
	`io_µ_£t_»g_16
 (
cs
, 
»g
, 
	`io_µ_g_»g_16
 (cs,egè& ~
mask
);

116 
	`¹ems_¼u±_abË
 (
Ëv
);

117 
	}
}

125 
le
 

126 
	$mem_µ_g_»g
 (
cs8900_deviû
 *
cs
, 
»g
)

128 ià(!
cs
->
mem_ba£
)

129  
	`io_µ_g_»g_16
 (
cs
, 
»g
);

130  
	`cs8900_mem_g_»g
 (
cs
, 
»g
);

131 
	}
}

133 
le
 

134 
	$mem_µ_£t_»g
 (
cs8900_deviû
 *
cs
, 
»g
, 
d©a
)

136 ià(!
cs
->
mem_ba£
)

137 
	`io_µ_£t_»g_16
 (
cs
, 
»g
, 
d©a
);

139 
	`cs8900_mem_£t_»g
 (
cs
, 
»g
, 
d©a
);

140 
	}
}

142 
le
 

143 
	$mem_µ_b_£t_»g
 (
cs8900_deviû
 *
cs
, 
»g
, 
mask
)

145 ià(!
cs
->
mem_ba£
)

146 
	`io_µ_b_£t_»g_16
 (
cs
, 
»g
, 
mask
);

149 
¹ems_¼u±_Ëv
 
Ëv
;

150 
	`¹ems_¼u±_di§bË
 (
Ëv
);

151 
	`mem_µ_£t_»g
 (
cs
, 
»g
, 
	`mem_µ_g_»g
 (cs,egè| 
mask
);

152 
	`¹ems_¼u±_abË
 (
Ëv
);

154 
	}
}

156 
le
 

157 
	$mem_µ_b_þr_»g
 (
cs8900_deviû
 *
cs
, 
»g
, 
mask
)

159 ià(!
cs
->
mem_ba£
)

160 
	`io_µ_b_þr_»g_16
 (
cs
, 
»g
, 
mask
);

163 
¹ems_¼u±_Ëv
 
Ëv
;

164 
	`¹ems_¼u±_di§bË
 (
Ëv
);

165 
	`mem_µ_£t_»g
 (
cs
, 
»g
, 
	`mem_µ_g_»g
 (cs,egè& ~
mask
);

166 
	`¹ems_¼u±_abË
 (
Ëv
);

168 
	}
}

174 
	#CS8900_T_INT
 (0)

	)

175 
	#CS8900_T_RX_OK
 (1)

	)

176 
	#CS8900_T_RX_DROPPED
 (2)

	)

177 
	#CS8900_T_NO_MBUF
 (3)

	)

178 
	#CS8900_T_NO_CLUSTERS
 (4)

	)

179 
	#CS8900_T_RX_BEGIN
 (5)

	)

180 
	#CS8900_T_RX_END
 (6)

	)

182 #ià
CS8900_TRACE


184 cÚ¡ *
	gcs8900_aû_Ïbs
[] =

199 
ut32_t
 
¹ems_»ad_tim
 ();

201 
le
 

202 
	$cs8900_aû
 (
cs8900_deviû
 *
cs
, 
key
, 
v¬
)

204 
¹ems_¼u±_Ëv
 
Ëv
;

206 
	`¹ems_¼u±_di§bË
 (
Ëv
);

208 ià(
cs
->
aû_
 < 
CS8900_TRACE_SIZE
)

210 
cs
->
aû_key
[cs->
aû_
] = 
key
;

211 
cs
->
aû_v¬
[cs->
aû_
] = 
v¬
;

212 
cs
->
aû_time
[cs->
aû_
] = 
	`¹ems_»ad_tim
 ();

213 
cs
->
aû_
++;

216 
	`¹ems_¼u±_abË
 (
Ëv
);

217 
	}
}

219 
	#cs8900_aû
(
c
, 
k
, 
v
)

	)

222 
	$cs8900_g_mac_addr
 (
cs8900_deviû
 *
cs
, *
mac_add»ss
)

224 
ma
;

231 
ma
 = 
	`io_µ_g_»g_16
 (
cs
, 
CS8900_PP_IA
);

232 
mac_add»ss
[0] = 
ma
 >> 8;

233 
mac_add»ss
[1] = 
ma
;

235 
ma
 = 
	`io_µ_g_»g_16
 (
cs
, 
CS8900_PP_IA
 + 2);

236 
mac_add»ss
[2] = 
ma
 >> 8;

237 
mac_add»ss
[3] = 
ma
;

239 
ma
 = 
	`io_µ_g_»g_16
 (
cs
, 
CS8900_PP_IA
 + 4);

240 
mac_add»ss
[4] = 
ma
 >> 8;

241 
mac_add»ss
[5] = 
ma
;

242 
	}
}

249 
	$cs8900_h¬dw¬e_
 (
cs8900_deviû
 *
cs
)

251 
´od_id
;

252 
¡©us
;

259 
	`io_µ_b_£t_»g_16
 (
cs
, 
CS8900_PP_SfCTL
, 
CS8900_SELF_CTRL_RESET
);

261 
	`¹ems_sk_wake_aá
 (
	`RTEMS_MILLISECONDS_TO_TICKS
 (20));

263 
¡©us
 = 
	`io_µ_g_»g_16
 (
cs
, 
CS8900_PP_SfST
);

264 ià(
¡©us
 == 0) {

265 
	`´tf
("Reading statusegistergain\n");

266 
¡©us
 = 
	`io_µ_g_»g_16
 (
cs
, 
CS8900_PP_SfST
);

269 ià(((
¡©us
 & 
CS8900_SELF_STATUS_INITD
) == 0) ||

270 ((
¡©us
 & 
CS8900_SELF_STATUS_INITD
) &&

271 (
¡©us
 & 
CS8900_SELF_STATUS_EEPROM_PRESENT
) &&

272 (
¡©us
 & 
CS8900_SELF_STATUS_SIBUST
)))

274 
	`´tf
 ("CS8900: %s. Initialisationborted.\n",

275 (
¡©us
 & 
CS8900_SELF_STATUS_INITD
) ?

283 ià(
cs
->
rx_queue_size
 == 0)

284 
cs
->
rx_queue_size
 = 10;

288 
´od_id
 = 
	`io_µ_g_»g_32
 (
cs
, 
CS8900_PP_PROD_ID
);

290 ià((
´od_id
 >> 16è!ð
CS8900_ESIA_ID
)

292 
	`´tf
 ("CS8900: Inv®id EISA ID,droduù cod0x%08lx\n", 
´od_id
);

296 ià((
´od_id
 & 0x000000ff) != 0)

298 
	`´tf
 ("CS8900: Unsupportedroduct id,eadroduct code 0x%08lx\n",

299 
´od_id
);

303 
	`´tf
 ("CS8900 Rev %ld, %s, %s.\n",

304 (
´od_id
 >> 8) & 0x1f,

305 
¡©us
 & 
CS8900_SELF_STATUS_3_3_V
 ? "3.3V" : "5.0V",

306 
¡©us
 & 
CS8900_SELF_STATUS_EEPROM_PRESENT
 ?

313 ià(
cs
->
mem_ba£
)

315 
	`io_µ_£t_»g_16
 (
cs
, 
CS8900_PP_MEM_BASE
, cs->
mem_ba£
);

316 
	`io_µ_£t_»g_16
 (
cs
, 
CS8900_PP_MEM_BASE
 + 2, (cs->
mem_ba£
 >> 16) & 0xf);

318 
	`io_µ_£t_»g_16
 (
cs
,

319 
CS8900_PP_BusCTL
,

320 
CS8900_BUS_CTRL_RESET_RX_DMA
 |

321 
CS8900_BUS_CTRL_USE_SA
 |

322 
CS8900_BUS_CTRL_MEMORY_ENABLE
);

323 
	`io_µ_£t_»g_16
 (
cs
,

324 
CS8900_PP_BusCTL
,

325 
CS8900_BUS_CTRL_USE_SA
 |

326 
CS8900_BUS_CTRL_MEMORY_ENABLE
);

339 
	`mem_µ_£t_»g
 (
cs
, 
CS8900_PP_LeCFG
, 
CS8900_LINE_CTRL_10BASET
);

345 
	#MACO
(
o
è
cs
->
¬pcom
.
ac_addr
[o]

	)

347 
	`mem_µ_£t_»g
 (
cs
, 
CS8900_PP_IA
,

348 (((è
	`MACO
 (1)) << 8) |

349 ((è
	`MACO
 (0)));

350 
	`mem_µ_£t_»g
 (
cs
, 
CS8900_PP_IA
 + 2,

351 (((è
	`MACO
 (3)) << 8) |

352 ((è
	`MACO
 (2)));

353 
	`mem_µ_£t_»g
 (
cs
, 
CS8900_PP_IA
 + 4,

354 (((è
	`MACO
 (5)) << 8) |

355 ((è
	`MACO
 (4)));

361 
	`mem_µ_£t_»g
 (
cs
, 
CS8900_PP_BufCFG
,

362 
CS8900_BUFFER_CONFIG_RDY_FOR_TX
 |

363 
CS8900_BUFFER_CONFIG_TX_UNDERRUN
 |

364 
CS8900_BUFFER_CONFIG_TX_COL_OVF
 |

365 
CS8900_BUFFER_CONFIG_RX_MISSED_OVF
);

371 
	`mem_µ_£t_»g
 (
cs
, 
CS8900_PP_RxCFG
,

372 
CS8900_RX_CONFIG_RX_OK
 |

373 
CS8900_RX_CONFIG_CRC_ERROR
 |

374 
CS8900_RX_CONFIG_RUNT
|

375 
CS8900_RX_CONFIG_EXTRA_DATA
);

381 
	`mem_µ_£t_»g
 (
cs
, 
CS8900_PP_RxCTL
,

382 
CS8900_RX_CTRL_RX_OK
 |

383 
CS8900_RX_CTRL_MULTICAST
 |

384 
CS8900_RX_CTRL_INDIVIDUAL
 |

385 
CS8900_RX_CTRL_BROADCAST
);

391 
	`mem_µ_£t_»g
 (
cs
, 
CS8900_PP_TxCFG
,

392 
CS8900_TX_CONFIG_TX_OK
 |

393 
CS8900_TX_CONFIG_OUT_OF_WINDOW
 |

394 
CS8900_TX_CONFIG_JABBER
 |

395 
CS8900_TX_CONFIG_16_COLLISION
);

401 
	`cs8900_©ch_¼u±
 (
cs
);

409 
	`mem_µ_£t_»g
 (
cs
, 
CS8900_PP_INT
, cs->
q_Ëv
 & 3);

411 
	`mem_µ_b_£t_»g
 (
cs
, 
CS8900_PP_BusCTL
,

412 
CS8900_BUS_CTRL_ENABLE_INT
);

413 
	}
}

415 
¹ems_i¤


416 
	$cs8900_¼u±
 (
¹ems_veùÜ_numb
 
v
, *
c¥
)

418 
cs8900_deviû
 *
cs
 = 
c¥
;

419 
isq
 = 0;

420 
mbuf
 *
m
;

421 *
p
;

423 ++
cs
->
h_¡©s
.
¼u±s
;

427 
isq
 = 
	`mem_µ_g_»g
 (
cs
, 
CS8900_PP_ISQ
);

429 
	`cs8900_aû
 (
cs
, 
CS8900_T_INT
, 
isq
);

435 ià(
isq
 == 0)

438 
isq
 & 0x1f)

446 ++
cs
->
h_¡©s
.
rx_¼u±s
;

448 ià(
isq
 & 
CS8900_RX_EVENT_RX_OK
)

450 
m
 = 
cs
->
rx_»ady_hd
;

451 ià(
m
)

453 
cs
->
rx_»ady_hd
 = 
m
->
m_Ãxkt
;

454 ià(
cs
->
rx_»ady_hd
 == 0)

455 
cs
->
rx_»ady_
 = 0;

456 
m
->
m_Ãxkt
 = 0;

457 
cs
->
rx_»ady_Ën
--;

459 
p
 = 
	`mtod
 (
m
, *);

461 
m
->
m_pkthdr
.
Ën
 = 
	`cs8900_g_d©a_block
 (
cs
, 
p
);

463 ià(
cs
->
rx_lßded_
 == 0)

464 
cs
->
rx_lßded_hd
 = 
m
;

466 
cs
->
rx_lßded_
->
m_Ãxkt
 = 
m
;

467 
cs
->
rx_lßded_
 = 
m
;

468 
cs
->
rx_lßded_Ën
++;

470 ià(
cs
->
rx_lßded_Ën
 == 1)

472 
	`cs8900_aû
 (
cs
, 
CS8900_T_RX_OK
, cs->
rx_lßded_Ën
);

473 
	`¹ems_bsdÃt_evt_£nd
 (
cs
->
rx_sk
, 
CS8900_RX_OK_EVENT
);

478 ++
cs
->
h_¡©s
.
rx_drÝ³d
;

480 
	`cs8900_aû
 (
cs
, 
CS8900_T_RX_DROPPED
, cs->
rx_lßded_Ën
);

482 ià(
cs
->
rx_lßded_Ën
 == 0)

483 
	`¹ems_bsdÃt_evt_£nd
 (
cs
->
rx_sk
, 
CS8900_RX_OK_EVENT
);

488 ià(
isq
 & 
CS8900_RX_EVENT_CRC_ERROR
)

489 ++
cs
->
h_¡©s
.
rx_üc_rÜs
;

491 ià(
isq
 & 
CS8900_RX_EVENT_RUNT
)

492 ++
cs
->
h_¡©s
.
rx_ruÁ_rÜs
;

494 ià(
isq
 & 
CS8900_RX_EVENT_EXTRA_DATA
)

495 ++
cs
->
h_¡©s
.
rx_ovsize_rÜs
;

505 ++
cs
->
h_¡©s
.
tx_¼u±s
;

507 ià(
cs
->
tx_aùive
)

509 ià(
isq
 & 
CS8900_TX_EVENT_TX_OK
)

510 ++
cs
->
h_¡©s
.
tx_ok
;

512 
cs
->
tx_aùive
 = 0;

514 
	`¹ems_bsdÃt_evt_£nd
 (
cs
->
tx_sk
, 
CS8900_TX_OK_EVENT
);

524 ià(
isq
 & 
CS8900_BUFFER_EVENT_RDY_FOR_TX
)

526 ià(
cs
->
tx_aùive
)

528 ++
cs
->
h_¡©s
.
tx_rdy4tx
;

529 
	`¹ems_bsdÃt_evt_£nd
 (
cs
->
tx_sk
, 
CS8900_TX_WAIT_EVENT
);

532 ià(
isq
 & 
CS8900_BUFFER_EVENT_TX_UNDERRUN
)

534 ++
cs
->
h_¡©s
.
tx_undrun_rÜs
;

535 ià(
cs
->
tx_aùive
)

536 
	`¹ems_bsdÃt_evt_£nd
 (
cs
->
tx_sk
, 
CS8900_TX_OK_EVENT
);

538 ià(
isq
 & 
CS8900_BUFFER_EVENT_SW_INT
)

540 ++
cs
->
h_¡©s
.
t_swt_»s
;

550 
cs
->
h_¡©s
.
rx_mis£d_rÜs
 +=

551 
	`mem_µ_g_»g
 (
cs
, 
CS8900_PP_RxMISS
) >> 6;

560 
cs
->
h_¡©s
.
tx_cÞlisiÚs
 +=

561 
	`mem_µ_g_»g
 (
cs
, 
CS8900_PP_TxCÞ
) >> 6;

569 
	}
}

572 
	$cs8900_lk_aùive
 (
cs8900_deviû
 *
cs
)

574  ((
	`mem_µ_g_»g
 (
cs
, 
CS8900_PP_LeST
è& 
CS8900_LINE_STATUS_LINK_OK
) ?

576 
	}
}

578 
le
 

579 
	$cs8900_rx_»fl_queue
 (
cs8900_deviû
 *
cs
)

581 
iâ
 *
iå
 = &
cs
->
¬pcom
.
ac_if
;

582 
mbuf
 *
m
;

583 
¹ems_¼u±_Ëv
 
Ëv
;

590 
cs
->
rx_»ady_Ën
 < cs->
rx_queue_size
)

592 
	`MGETHDR
 (
m
, 
M_DONTWAIT
, 
MT_DATA
);

594 ià(!
m
)

596 ++
cs
->
h_¡©s
.
rx_no_mbufs
;

597 
	`cs8900_aû
 (
cs
, 
CS8900_T_NO_MBUF
, cs->
h_¡©s
.
rx_no_mbufs
);

601 
	`MCLGET
 (
m
, 
M_DONTWAIT
);

603 ià(!
m
->
m_ext
.
ext_buf
)

605 ++
cs
->
h_¡©s
.
rx_no_þu¡s
;

606 
	`cs8900_aû
 (
cs
, 
CS8900_T_NO_CLUSTERS
, cs->
h_¡©s
.
rx_no_þu¡s
);

607 
	`m_ä
 (
m
);

610 
m
->
m_pkthdr
.
rcvif
 = 
iå
;

611 
m
->
m_Ãxkt
 = 0;

613 
	`¹ems_¼u±_di§bË
 (
Ëv
);

615 ià(
cs
->
rx_»ady_
 == 0)

616 
cs
->
rx_»ady_hd
 = 
m
;

618 
cs
->
rx_»ady_
->
m_Ãxkt
 = 
m
;

619 
cs
->
rx_»ady_
 = 
m
;

620 
cs
->
rx_»ady_Ën
++;

622 
	`¹ems_¼u±_abË
 (
Ëv
);

624 
	}
}

627 
	$cs8900_rx_sk
 (*
¬g
)

629 
cs8900_deviû
 *
cs
 = 
¬g
;

630 
iâ
 *
iå
 = &
cs
->
¬pcom
.
ac_if
;

631 
¹ems_evt_£t
 
evts
;

632 
mbuf
 *
m
;

633 
h_hd
 *
eh
;

634 
¹ems_¡©us_code
 
sc
;

635 
¹ems_¼u±_Ëv
 
Ëv
;

641 
	`mem_µ_b_£t_»g
 (
cs
, 
CS8900_PP_LeCFG
,

642 
CS8900_LINE_CTRL_RX_ON
 |

643 
CS8900_LINE_CTRL_TX_ON
);

649 
	`mem_µ_b_£t_»g
 (
cs
, 
CS8900_PP_BufCFG
,

650 
CS8900_BUFFER_CONFIG_SW_INT
);

651 ++
cs
->
h_¡©s
.
t_swt_»q
;

659 
	`cs8900_rx_»fl_queue
 (
cs
);

661 
sc
 = 
	`¹ems_bsdÃt_evt_»ûive
 (
CS8900_RX_OK_EVENT
,

662 
RTEMS_WAIT
 | 
RTEMS_EVENT_ANY
,

663 
	`RTEMS_MILLISECONDS_TO_TICKS
 (250),

664 &
evts
);

666 
	`cs8900_rx_»fl_queue
 (
cs
);

668 ià(
sc
 =ð
RTEMS_TIMEOUT
)

679 ià((
cs
->
h_¡©s
.
t_swt_»q
 - cs->h_¡©s.
t_swt_»s
) > 1)

681 
	`´tf
 ("cs8900: intockup, isq flush\n");

683 
	`mem_µ_b_þr_»g
 (
cs
, 
CS8900_PP_BusCTL
,

684 
CS8900_BUS_CTRL_ENABLE_INT
);

686 
	`mem_µ_g_»g
 (
cs
, 
CS8900_PP_ISQ
) != 0);

688 
cs
->
h_¡©s
.
t_swt_»q
 = cs->h_¡©s.
t_swt_»s
 = 0;

689 ++
cs
->
h_¡©s
.
t_lockup
;

691 
	`mem_µ_b_£t_»g
 (
cs
, 
CS8900_PP_BusCTL
,

692 
CS8900_BUS_CTRL_ENABLE_INT
);

695 
	`mem_µ_b_£t_»g
 (
cs
, 
CS8900_PP_BufCFG
,

696 
CS8900_BUFFER_CONFIG_SW_INT
);

697 ++
cs
->
h_¡©s
.
t_swt_»q
;

700 
	`cs8900_aû
 (
cs
, 
CS8900_T_RX_BEGIN
, cs->
rx_lßded_Ën
);

702 
cs
->
rx_lßded_Ën
)

704 
	`¹ems_¼u±_di§bË
 (
Ëv
);

706 
m
 = 
cs
->
rx_lßded_hd
;

707 ià(
m
)

709 
cs
->
rx_lßded_hd
 = 
m
->
m_Ãxkt
;

710 ià(
cs
->
rx_lßded_hd
 == 0)

711 
cs
->
rx_lßded_
 = 0;

712 
m
->
m_Ãxkt
 = 0;

713 
cs
->
rx_lßded_Ën
--;

715 
	`¹ems_¼u±_abË
 (
Ëv
);

717 
m
->
m_pkthdr
.
rcvif
 = 
iå
;

719 
cs
->
h_¡©s
.
rx_bys
 +ð
m
->
m_pkthdr
.
Ën
;

721 
m
->
m_Ën
 = m->
m_pkthdr
.
Ën
 = m->m_pkthdr.ËÀ-  (
h_hd
);

723 
eh
 = 
	`mtod
 (
m
, 
h_hd
 *);

724 
m
->
m_d©a
 +ð (
h_hd
);

726 ++
cs
->
h_¡©s
.
rx_·cks
;

728 
	`h_put
 (
iå
, 
eh
, 
m
);

732 
	`¹ems_¼u±_abË
 (
Ëv
);

735 
	`cs8900_aû
 (
cs
, 
CS8900_T_RX_END
, cs->
rx_lßded_Ën
);

737 
	}
}

740 
	$cs8900_tx_sk
 (*
¬g
)

742 
cs8900_deviû
 *
cs
 = 
¬g
;

743 
iâ
 *
iå
 = &
cs
->
¬pcom
.
ac_if
;

744 
¹ems_evt_£t
 
evts
;

745 
mbuf
 *
m
;

746 
¹ems_¡©us_code
 
sc
;

752 
	`¹ems_sk_wake_aá
 (
	`RTEMS_MILLISECONDS_TO_TICKS
 (750));

764 
	`IF_DEQUEUE
 (&
iå
->
if_¢d
, 
m
);

770 ià(!
m
)

772 
iå
->
if_æags
 &ð~
IFF_OACTIVE
;

774 
	`¹ems_bsdÃt_evt_»ûive
 (
CS8900_TX_START_EVENT
,

775 
RTEMS_WAIT
 | 
RTEMS_EVENT_ANY
,

776 
RTEMS_NO_TIMEOUT
,

777 &
evts
);

781 ià(
	`cs8900_lk_aùive
 (
cs
))

783 
»£ndg
;

787 
buf_¡©us
;

789 
»£ndg
 = 0;

791 
cs
->
tx_aùive
 = 1;

793 
	`mem_µ_£t_»g
 (
cs
, 
CS8900_PP_TxCMD
,

794 
CS8900_TX_CMD_STATUS_TX_START_ENTIRE
 |

795 
CS8900_TX_CMD_STATUS_FORCE
);

796 
	`mem_µ_£t_»g
 (
cs
, 
CS8900_PP_TxLgth
, 
m
->
m_pkthdr
.
Ën
);

798 
buf_¡©us
 = 
	`mem_µ_g_»g
 (
cs
, 
CS8900_PP_BusST
);

805 ià(
buf_¡©us
 & 
CS8900_BUS_STATUS_TX_BID_ERROR
)

806 ++
cs
->
h_¡©s
.
tx_bid_rÜs
;

813 ià((
buf_¡©us
 & 
CS8900_BUS_STATUS_RDY_FOR_TX_NOW
) == 0)

815 
cs
->
h_¡©s
.
tx_wa_fÜ_rdy4tx
++;

816 
sc
 = 
	`¹ems_bsdÃt_evt_»ûive
 (
CS8900_TX_WAIT_EVENT
,

817 
RTEMS_WAIT
 | 
RTEMS_EVENT_ANY
,

818 
	`RTEMS_MILLISECONDS_TO_TICKS
 (750),

819 &
evts
);

820 ià(
sc
 =ð
RTEMS_TIMEOUT
)

827 
	`´tf
 ("txesend\n");

828 ++
cs
->
h_¡©s
.
tx_»£nds
;

829 
»£ndg
 = 1;

833 ià(!
»£ndg
)

835 
	`cs8900_tx_lßd
 (
cs
, 
m
);

836 
cs
->
h_¡©s
.
tx_·cks
++;

837 
cs
->
h_¡©s
.
tx_bys
 +ð
m
->
m_pkthdr
.
Ën
;

841 
»£ndg
);

843 
	`m_äm
 (
m
);

847 
	`¹ems_bsdÃt_evt_»ûive
 (
CS8900_TX_OK_EVENT
,

848 
RTEMS_WAIT
 | 
RTEMS_EVENT_ANY
,

849 
RTEMS_NO_TIMEOUT
,

850 &
evts
);

852 
cs
->
tx_aùive
);

856 ++
cs
->
h_¡©s
.
tx_drÝ³d
;

857 
	`m_äm
 (
m
);

861 
	}
}

864 
	$cs8900_¡¬t
 (
iâ
 *
iå
)

866 
cs8900_deviû
 *
cs
 = 
iå
->
if_soác
;

872 
iå
->
if_æags
 |ð
IFF_OACTIVE
;

874 
	`¹ems_bsdÃt_evt_£nd
 (
cs
->
tx_sk
, 
CS8900_TX_START_EVENT
);

875 
	}
}

878 
	$cs8900_¡Ý
 (
cs8900_deviû
 *
cs
)

880 
	`mem_µ_b_þr_»g
 (
cs
, 
CS8900_PP_LeCFG
,

881 
CS8900_LINE_CTRL_RX_ON
 |

882 
CS8900_LINE_CTRL_TX_ON
);

884 
	`mem_µ_b_þr_»g
 (
cs
, 
CS8900_PP_BusCTL
,

885 
CS8900_BUS_CTRL_ENABLE_INT
);

886 
	}
}

888 cÚ¡ *
	gh_¡©i¡ics_Ïbs
[] =

918 
	$cs8900_¡©s
 (
cs8900_deviû
 *
cs
)

920 
i
;

921 
max_Ïb
 = 0;

922 
Ën
;

923 *
v®ue
 = (*è&
cs
->
h_¡©s
.
rx_·cks
;

925 
cs
->
h_¡©s
.
rx_mis£d_rÜs
 +=

926 
	`mem_µ_g_»g
 (
cs
, 
CS8900_PP_RxMISS
) >> 6;

928 
cs
->
h_¡©s
.
tx_cÞlisiÚs
 +=

929 
	`mem_µ_g_»g
 (
cs
, 
CS8900_PP_TxCÞ
) >> 6;

931 
	`´tf
 ("Network Driver Stats for CS8900 :\n");

933 
i
 = 0; i < ( (
h_¡©i¡ics_Ïbs
) /  (const *)); i++)

935 
Ën
 = 
	`¡¾
 (
h_¡©i¡ics_Ïbs
[
i
]);

936 ià(
Ën
 > 
max_Ïb
)

937 
max_Ïb
 = 
Ën
;

940 
max_Ïb
 += 2;

942 
	`´tf
 ("%*s - %10u %*s - %10u\n",

943 
max_Ïb
, "rxdy", 
cs
->
rx_»ady_Ën
,

944 
max_Ïb
, "rxßded", 
cs
->
rx_lßded_Ën
);

946 
i
 = 0;

947 
i
 < ( (
h_¡©i¡ics_Ïbs
) /  (const *));

948 
i
++)

950 
	`´tf
 ("%*s - %10lu",

951 
max_Ïb
, 
h_¡©i¡ics_Ïbs
[
i
], 
v®ue
[i]);

953 
i
++;

955 ià(
i
 < ( (
h_¡©i¡ics_Ïbs
) /  (const *)))

956 
	`´tf
 (" %*s - %10lu",

957 
max_Ïb
, 
h_¡©i¡ics_Ïbs
[
i
], 
v®ue
[i]);

958 
	`´tf
 ("\n");

961 #ià
CS8900_TRACE


963 
i
 = 0; i < 
cs
->
aû_
; i++)

965 
	`´tf
 ("%8ld.%03ld ", 
cs
->
aû_time
[
i
] / 1000, cs->trace_time[i] % 1000);

967 ià(
cs
->
aû_key
[
i
] <  (
cs8900_aû_Ïbs
) /  (*))

968 
	`´tf
 ("% : ", 
cs8900_aû_Ïbs
[
cs
->
aû_key
[
i
]]);

970 
	`´tf
 ("unknowÀaû key, %d : ", 
cs
->
aû_key
[
i
]);

972 ià(
cs
->
aû_key
[
i
] =ð
CS8900_T_INT
)

974 
	`´tf
 ("0x%04lx ", 
cs
->
aû_v¬
[
i
]);

975 ià(
cs
->
aû_v¬
[
i
] == 0)

976 
	`´tf
 ("end");

979 
cs
->
aû_v¬
[
i
] & 0x1f)

982 
	`´tf
 ("rxvent");

986 
	`´tf
 ("txvent");

990 
	`´tf
 ("buffervent");

994 
	`´tf
 ("rx missed");

998 
	`´tf
 ("tx collisions");

1002 
	`´tf
 ("txequest");

1006 
	`´tf
 ("tx wait 4x");

1010 
	`´tf
 ("txlreadyctive");

1014 
	`´tf
 ("unknownvent");

1020 
	`´tf
 ("0x%08lx", 
cs
->
aû_v¬
[
i
]);

1022 
	`´tf
 ("\n");

1025 
cs
->
aû_
 = 0;

1028 
	}
}

1031 
	$cs8900_
 (*
¬g
)

1033 
cs8900_deviû
 *
cs
 = 
¬g
;

1034 
iâ
 *
iå
 = &
cs
->
¬pcom
.
ac_if
;

1036 ià(
cs
->
rx_sk
 == 0)

1043 
	`cs8900_h¬dw¬e_
 (
cs
);

1049 
cs
->
rx_sk
 = 
	`¹ems_bsdÃt_Ãw´oc
 ("CSr0", 4096, 
cs8900_rx_sk
, cs);

1050 
cs
->
tx_sk
 = 
	`¹ems_bsdÃt_Ãw´oc
 ("CSt0", 4096, 
cs8900_tx_sk
, cs);

1053 #ifdeà
todo


1057 ià(
iå
->
if_æags
 & 
IFF_PROMISC
)

1065 
iå
->
if_æags
 |ð
IFF_RUNNING
;

1071 
	`mem_µ_b_£t_»g
 (
cs
, 
CS8900_PP_LeCFG
,

1072 
CS8900_LINE_CTRL_RX_ON
 |

1073 
CS8900_LINE_CTRL_TX_ON
);

1075 
	`mem_µ_b_£t_»g
 (
cs
, 
CS8900_PP_BusCTL
,

1076 
CS8900_BUS_CTRL_ENABLE_INT
);

1077 
	}
}

1080 
	$cs8900_ioùl
 (
iâ
 *
iå
, 
ioùl_commªd_t
 
cmd
, 
ÿddr_t
 
d©a
)

1082 
cs8900_deviû
 *
cs
 = 
iå
->
if_soác
;

1083 
rÜ
 = 0;

1085 
cmd
)

1087 
SIOCGIFADDR
:

1088 
SIOCSIFADDR
:

1090 
rÜ
 = 
	`h_ioùl
 (
iå
, 
cmd
, 
d©a
);

1093 
SIOCSIFFLAGS
:

1095 
iå
->
if_æags
 & (
IFF_UP
 | 
IFF_RUNNING
))

1097 
IFF_RUNNING
:

1099 
	`cs8900_¡Ý
 (
cs
);

1102 
IFF_UP
:

1104 
	`cs8900_
 (
cs
);

1107 
IFF_UP
 | 
IFF_RUNNING
:

1109 
	`cs8900_¡Ý
 (
cs
);

1110 
	`cs8900_
 (
cs
);

1118 
SIO_RTEMS_SHOW_STATS
:

1120 
	`cs8900_¡©s
 (
cs
);

1126 
rÜ
 = 
EINVAL
;

1130  
rÜ
;

1131 
	}
}

1134 
	$cs8900_driv_©ch
 (
¹ems_bsdÃt_ifcÚfig
 *
cÚfig
, 
©chg
)

1136 
cs8900_deviû
 *
cs
;

1137 
iâ
 *
iå
;

1138 
mtu
;

1139 
un
;

1140 *
Çme
;

1146 ià((
un
 = 
	`¹ems_bsdÃt_·r£_driv_Çme
 (
cÚfig
, &
Çme
)) < 0)

1149 
cs
 = 
cÚfig
->
drv_ù¾
;

1150 
cs
->
dev
 = 
un
;

1151 
iå
 = &
cs
->
¬pcom
.
ac_if
;

1153 ià(
©chg
)

1155 ià(
iå
->
if_soác
)

1157 
	`´tf
 ("Driv `%s'Ìdy iÀu£.\n", 
cÚfig
->
Çme
);

1165 ià(
cÚfig
->
h¬dw¬e_add»ss
)

1166 
	`memýy
 (
cs
->
¬pcom
.
ac_addr
, 
cÚfig
->
h¬dw¬e_add»ss
, 
ETHER_ADDR_LEN
);

1168 
	`cs8900_g_mac_addr
 (
cs
, cs->
¬pcom
.
ac_addr
);

1170 ià(
cÚfig
->
mtu
)

1171 
mtu
 = 
cÚfig
->mtu;

1173 
mtu
 = 
ETHERMTU
;

1175 
cs
->
acû±_bÿ¡
 = !
cÚfig
->
ignÜe_brßdÿ¡
;

1181 
iå
->
if_soác
 = 
cs
;

1182 
iå
->
if_un
 = 
un
;

1183 
iå
->
if_Çme
 = 
Çme
;

1184 
iå
->
if_mtu
 = 
mtu
;

1185 
iå
->
if_
 = 
cs8900_
;

1186 
iå
->
if_ioùl
 = 
cs8900_ioùl
;

1187 
iå
->
if_¡¬t
 = 
cs8900_¡¬t
;

1188 
iå
->
if_ouut
 = 
h_ouut
;

1189 
iå
->
if_æags
 = 
IFF_BROADCAST
 | 
IFF_SIMPLEX
;

1191 ià(
iå
->
if_¢d
.
ifq_maxËn
 == 0)

1192 
iå
->
if_¢d
.
ifq_maxËn
 = 
ifqmaxËn
;

1198 
	`if_©ch
 (
iå
);

1199 
	`h_içach
 (
iå
);

1203 ià(!
iå
->
if_soác
)

1205 
	`´tf
 ("Driv `%s'Ù found.\n", 
cÚfig
->
Çme
);

1209 
	`cs8900_¡Ý
 (
cs
);

1210 
	`cs8900_dach_¼u±
 (
cs
);

1214 
	}
}

	@src/libchip/network/cs8900.h

147 #ià!
defed
(
_CS8900_H_
)

148 
	#_CS8900_H_


	)

150 
	~<¹ems.h
>

151 
	~<¹ems/rÜ.h
>

152 
	~<¹ems/¹ems_bsdÃt.h
>

154 
	~<sys/·¿m.h
>

155 
	~<sys/mbuf.h
>

156 
	~<sys/sock.h
>

157 
	~<sys/sockio.h
>

159 
	~<Ãt/if.h
>

161 
	~<Ãt/.h
>

162 
	~<Ãt/if_h.h
>

166 
	#ET_MINLEN
 60

	)

176 
	#CS8900_ESIA_ID
 (0x630e)

	)

182 
	#CS8900_IO_RX_TX_DATA_PORT0
 (0x0000)

	)

183 
	#CS8900_IO_TX_TX_DATA_PORT1
 (0x0002)

	)

184 
	#CS8900_IO_TxCMD
 (0x0004)

	)

185 
	#CS8900_IO_TxLgth
 (0x0006)

	)

186 
	#CS8900_IO_ISQ
 (0x0008)

	)

187 
	#CS8900_IO_PACKET_PAGE_PTR
 (0x000a)

	)

188 
	#CS8900_IO_PP_DATA_PORT0
 (0x000c)

	)

189 
	#CS8900_IO_PP_DATA_PORT1
 (0x000e)

	)

199 
	#CS8900_PP_PROD_ID
 (0x0000)

	)

200 
	#CS8900_PP_IO_BASE
 (0x0020)

	)

201 
	#CS8900_PP_INT
 (0x0022)

	)

202 
	#CS8900_PP_DMA_CHANNEL
 (0x0024)

	)

203 
	#CS8900_PP_DMA_SOF
 (0x0026)

	)

204 
	#CS8900_PP_DMA_FRM_CNT
 (0x0028)

	)

205 
	#CS8900_PP_DMA_RX_BCNT
 (0x002a)

	)

206 
	#CS8900_PP_MEM_BASE
 (0x002c)

	)

207 
	#CS8900_PP_BPROM_BASE
 (0x0030)

	)

208 
	#CS8900_PP_BPROM_AMASK
 (0x0034)

	)

209 
	#CS8900_PP_EEPROM_CMD
 (0x0040)

	)

210 
	#CS8900_PP_EEPROM_DATA
 (0x0042)

	)

211 
	#CS8900_PP_RX_FRAME_BCNT
 (0x0050)

	)

217 
	#CS8900_PP_RxCFG
 (0x0102)

	)

218 
	#CS8900_PP_RxCTL
 (0x0104)

	)

219 
	#CS8900_PP_TxCFG
 (0x0106)

	)

220 
	#CS8900_PP_TxCMD_READ
 (0x0108)

	)

221 
	#CS8900_PP_BufCFG
 (0x010a)

	)

222 
	#CS8900_PP_LeCFG
 (0x0112)

	)

223 
	#CS8900_PP_SfCTL
 (0x0114)

	)

224 
	#CS8900_PP_BusCTL
 (0x0116)

	)

225 
	#CS8900_PP_Te¡CTL
 (0x0118)

	)

231 
	#CS8900_PP_ISQ
 (0x0120)

	)

232 
	#CS8900_PP_RxEvt
 (0x0124)

	)

233 
	#CS8900_PP_TxEvt
 (0x0128)

	)

234 
	#CS8900_PP_BufEvt
 (0x012c)

	)

235 
	#CS8900_PP_RxMISS
 (0x0130)

	)

236 
	#CS8900_PP_TxCÞ
 (0x0132)

	)

237 
	#CS8900_PP_LeST
 (0x0134)

	)

238 
	#CS8900_PP_SfST
 (0x0136)

	)

239 
	#CS8900_PP_BusST
 (0x0138)

	)

240 
	#CS8900_PP_TDR
 (0x013c)

	)

246 
	#CS8900_PP_TxCMD
 (0x0144)

	)

247 
	#CS8900_PP_TxLgth
 (0x0146)

	)

253 
	#CS8900_PP_LAF
 (0x0150)

	)

254 
	#CS8900_PP_IA
 (0x0158)

	)

260 
	#CS8900_PP_RxStus
 (0x0400)

	)

261 
	#CS8900_PP_RxLgth
 (0x0402)

	)

262 
	#CS8900_PP_RxF¿meLoc
 (0x0404)

	)

263 
	#CS8900_PP_TxF¿meLoc
 (0x0a00)

	)

273 
	#CS8900_PPP_AUTO_INCREMENT
 (0x8000)

	)

279 
	#CS8900_RX_CONFIG_SKIP_1
 (1 << 6)

	)

280 
	#CS8900_RX_CONFIG_STREAM_ENABLE
 (1 << 7)

	)

281 
	#CS8900_RX_CONFIG_RX_OK
 (1 << 8)

	)

282 
	#CS8900_RX_CONFIG_RX_DMA
 (1 << 9)

	)

283 
	#CS8900_RX_CONFIG_RX_AUTO_DMA
 (1 << 10)

	)

284 
	#CS8900_RX_CONFIG_BUFFER_CRC
 (1 << 11)

	)

285 
	#CS8900_RX_CONFIG_CRC_ERROR
 (1 << 12)

	)

286 
	#CS8900_RX_CONFIG_RUNT
 (1 << 13)

	)

287 
	#CS8900_RX_CONFIG_EXTRA_DATA
 (1 << 14)

	)

293 
	#CS8900_RX_EVENT_HASH_IA_MATCH
 (1 << 6)

	)

294 
	#CS8900_RX_EVENT_DRIBBLE_BITS
 (1 << 7)

	)

295 
	#CS8900_RX_EVENT_RX_OK
 (1 << 8)

	)

296 
	#CS8900_RX_EVENT_HASHED
 (1 << 9)

	)

297 
	#CS8900_RX_EVENT_IA
 (1 << 10)

	)

298 
	#CS8900_RX_EVENT_BROADCAST
 (1 << 11)

	)

299 
	#CS8900_RX_EVENT_CRC_ERROR
 (1 << 12)

	)

300 
	#CS8900_RX_EVENT_RUNT
 (1 << 13)

	)

301 
	#CS8900_RX_EVENT_EXTRA_DATA
 (1 << 14)

	)

307 
	#CS8900_RX_CTRL_HASH_IA_MATCH
 (1 << 6)

	)

308 
	#CS8900_RX_CTRL_PROMISCUOUS
 (1 << 7)

	)

309 
	#CS8900_RX_CTRL_RX_OK
 (1 << 8)

	)

310 
	#CS8900_RX_CTRL_MULTICAST
 (1 << 9)

	)

311 
	#CS8900_RX_CTRL_INDIVIDUAL
 (1 << 10)

	)

312 
	#CS8900_RX_CTRL_BROADCAST
 (1 << 11)

	)

313 
	#CS8900_RX_CTRL_CRC_ERROR
 (1 << 12)

	)

314 
	#CS8900_RX_CTRL_RUNT
 (1 << 13)

	)

315 
	#CS8900_RX_CTRL_EXTRA_DATA
 (1 << 14)

	)

321 
	#CS8900_TX_CONFIG_LOSS_OF_CARRIER
 (1 << 6)

	)

322 
	#CS8900_TX_CONFIG_SQ_ERROR
 (1 << 7)

	)

323 
	#CS8900_TX_CONFIG_TX_OK
 (1 << 8)

	)

324 
	#CS8900_TX_CONFIG_OUT_OF_WINDOW
 (1 << 9)

	)

325 
	#CS8900_TX_CONFIG_JABBER
 (1 << 10)

	)

326 
	#CS8900_TX_CONFIG_ANY_COLLISION
 (1 << 11)

	)

327 
	#CS8900_TX_CONFIG_16_COLLISION
 (1 << 15)

	)

333 
	#CS8900_TX_EVENT_LOSS_OF_CARRIER
 (1 << 6)

	)

334 
	#CS8900_TX_EVENT_SQ_ERROR
 (1 << 7)

	)

335 
	#CS8900_TX_EVENT_TX_OK
 (1 << 8)

	)

336 
	#CS8900_TX_EVENT_OUT_OF_WINDOW
 (1 << 9)

	)

337 
	#CS8900_TX_EVENT_JABBER
 (1 << 10)

	)

338 
	#CS8900_TX_EVENT_16_COLLISIONS
 (1 << 15)

	)

344 
	#CS8900_TX_CMD_STATUS_TX_START_5
 (0 << 6)

	)

345 
	#CS8900_TX_CMD_STATUS_TX_START_381
 (1 << 6)

	)

346 
	#CS8900_TX_CMD_STATUS_TX_START_1021
 (2 << 6)

	)

347 
	#CS8900_TX_CMD_STATUS_TX_START_ENTIRE
 (3 << 6)

	)

348 
	#CS8900_TX_CMD_STATUS_FORCE
 (1 << 8)

	)

349 
	#CS8900_TX_CMD_STATUS_ONE_COLLISION
 (1 << 9)

	)

350 
	#CS8900_TX_CMD_STATUS_INHIBIT_CRC
 (1 << 12)

	)

351 
	#CS8900_TX_CMD_STATUS_TX_PAD_DISABLED
 (1 << 13)

	)

357 
	#CS8900_BUFFER_CONFIG_SW_INT
 (1 << 6)

	)

358 
	#CS8900_BUFFER_CONFIG_RX_DMA_DONE
 (1 << 7)

	)

359 
	#CS8900_BUFFER_CONFIG_RDY_FOR_TX
 (1 << 8)

	)

360 
	#CS8900_BUFFER_CONFIG_TX_UNDERRUN
 (1 << 9)

	)

361 
	#CS8900_BUFFER_CONFIG_RX_MISSED
 (1 << 10)

	)

362 
	#CS8900_BUFFER_CONFIG_RX_128_BYTES
 (1 << 11)

	)

363 
	#CS8900_BUFFER_CONFIG_TX_COL_OVF
 (1 << 12)

	)

364 
	#CS8900_BUFFER_CONFIG_RX_MISSED_OVF
 (1 << 13)

	)

365 
	#CS8900_BUFFER_CONFIG_RX_DEST_MATCH
 (1 << 15)

	)

371 
	#CS8900_BUFFER_EVENT_SW_INT
 (1 << 6)

	)

372 
	#CS8900_BUFFER_EVENT_RX_DMA_DONE
 (1 << 7)

	)

373 
	#CS8900_BUFFER_EVENT_RDY_FOR_TX
 (1 << 8)

	)

374 
	#CS8900_BUFFER_EVENT_TX_UNDERRUN
 (1 << 9)

	)

375 
	#CS8900_BUFFER_EVENT_RX_MISSED
 (1 << 10)

	)

376 
	#CS8900_BUFFER_EVENT_RX_128_BYTES
 (1 << 11)

	)

377 
	#CS8900_BUFFER_EVENT_RX_DEST_MATCH
 (1 << 15)

	)

383 
	#CS8900_LINE_CTRL_RX_ON
 (1 << 6)

	)

384 
	#CS8900_LINE_CTRL_TX_ON
 (1 << 7)

	)

385 
	#CS8900_LINE_CTRL_AUI
 (1 << 8)

	)

386 
	#CS8900_LINE_CTRL_10BASET
 (0 << 9)

	)

387 
	#CS8900_LINE_CTRL_AUTO_AUI_10BASET
 (1 << 9)

	)

388 
	#CS8900_LINE_CTRL_MOD_BACKOFF
 (1 << 11)

	)

389 
	#CS8900_LINE_CTRL_POLARITY_DISABLED
 (1 << 12)

	)

390 
	#CS8900_LINE_CTRL_2_PART_DEF_DISABLED
 (1 << 13)

	)

391 
	#CS8900_LINE_CTRL_LO_RX_SQUELCH
 (1 << 14)

	)

397 
	#CS8900_LINE_STATUS_LINK_OK
 (1 << 7)

	)

398 
	#CS8900_LINE_STATUS_AUI
 (1 << 8)

	)

399 
	#CS8900_LINE_STATUS_10_BASE_T
 (1 << 9)

	)

400 
	#CS8900_LINE_STATUS_POLARITY_OK
 (1 << 12)

	)

401 
	#CS8900_LINE_STATUS_CRS
 (1 << 14)

	)

407 
	#CS8900_SELF_CTRL_RESET
 (1 << 6)

	)

408 
	#CS8900_SELF_CTRL_SW_SUSPEND
 (1 << 8)

	)

409 
	#CS8900_SELF_CTRL_HW_SLEEP
 (1 << 9)

	)

410 
	#CS8900_SELF_CTRL_HW_STANDBY
 (1 << 10)

	)

411 
	#CS8900_SELF_CTRL_HC0E
 (1 << 12)

	)

412 
	#CS8900_SELF_CTRL_HC1E
 (1 << 13)

	)

413 
	#CS8900_SELF_CTRL_HCB0
 (1 << 14)

	)

414 
	#CS8900_SELF_CTRL_HCB1
 (1 << 15)

	)

420 
	#CS8900_SELF_STATUS_3_3_V
 (1 << 6)

	)

421 
	#CS8900_SELF_STATUS_INITD
 (1 << 7)

	)

422 
	#CS8900_SELF_STATUS_SIBUST
 (1 << 8)

	)

423 
	#CS8900_SELF_STATUS_EEPROM_PRESENT
 (1 << 9)

	)

424 
	#CS8900_SELF_STATUS_EEPROM_OK
 (1 << 10)

	)

425 
	#CS8900_SELF_STATUS_EL_PRESENT
 (1 << 11)

	)

426 
	#CS8900_SELF_STATUS_EE_SIZE
 (1 << 12)

	)

432 
	#CS8900_BUS_CTRL_RESET_RX_DMA
 (1 << 6)

	)

433 
	#CS8900_BUS_CTRL_USE_SA
 (1 << 9)

	)

434 
	#CS8900_BUS_CTRL_MEMORY_ENABLE
 (1 << 10)

	)

435 
	#CS8900_BUS_CTRL_DMA_BURST
 (1 << 11)

	)

436 
	#CS8900_BUS_CTRL_IOCHRDYE
 (1 << 12)

	)

437 
	#CS8900_BUS_CTRL_RX_DMA_SIZE
 (1 << 13)

	)

438 
	#CS8900_BUS_CTRL_ENABLE_INT
 (1 << 15)

	)

444 
	#CS8900_BUS_STATUS_TX_BID_ERROR
 (1 << 7)

	)

445 
	#CS8900_BUS_STATUS_RDY_FOR_TX_NOW
 (1 << 8)

	)

450 
	#CS8900_TRACE
 0

	)

451 
	#CS8900_TRACE_SIZE
 (400)

	)

457 
	#CS8900_RX_QUEUE_SIZE
 (30)

	)

465 
	mrx_·cks
;

466 
	mtx_·cks
;

467 
	mrx_bys
;

468 
	mtx_bys
;

469 
	mrx_¼u±s
;

470 
	mtx_¼u±s
;

473 
	mrx_drÝ³d
;

474 
	mrx_no_mbufs
;

475 
	mrx_no_þu¡s
;

476 
	mrx_ovsize_rÜs
;

477 
	mrx_üc_rÜs
;

478 
	mrx_ruÁ_rÜs
;

479 
	mrx_mis£d_rÜs
;

482 
	mtx_ok
;

483 
	mtx_cÞlisiÚs
;

484 
	mtx_bid_rÜs
;

485 
	mtx_wa_fÜ_rdy4tx
;

486 
	mtx_rdy4tx
;

487 
	mtx_undrun_rÜs
;

488 
	mtx_drÝ³d
;

489 
	mtx_»£nds
;

492 
	mt_swt_»q
;

493 
	mt_swt_»s
;

494 
	mt_lockup
;

496 
	m¼u±s
;

498 } 
	th_¡©i¡ics
;

510 
	mdev
;

517 
	mio_ba£
;

518 
	mmem_ba£
;

530 
	mq_Ëv
;

536 
	mmac_add»ss
[6];

542 
¬pcom
 
	m¬pcom
;

548 
	macû±_bÿ¡
;

549 
	mtx_aùive
;

551 
¹ems_id
 
	mrx_sk
;

552 
¹ems_id
 
	mtx_sk
;

558 
mbuf
 *
	mrx_»ady_hd
;

559 
mbuf
 *
	mrx_»ady_
;

560 
	mrx_»ady_Ën
;

562 
mbuf
 *
	mrx_lßded_hd
;

563 
mbuf
 *
	mrx_lßded_
;

564 
	mrx_lßded_Ën
;

571 
	mrx_queue_size
;

573 #ià
CS8900_TRACE


574 
	maû_key
[
CS8900_TRACE_SIZE
];

575 
	maû_v¬
[
CS8900_TRACE_SIZE
];

576 
	maû_time
[
CS8900_TRACE_SIZE
];

577 
	maû_
;

584 
h_¡©i¡ics
 
	mh_¡©s
;

586 } 
	tcs8900_deviû
;

594 
cs8900_lk_aùive
 (
cs8900_deviû
 *
cs
);

610 
cs8900_driv_©ch
 (
¹ems_bsdÃt_ifcÚfig
 *
cÚfig
,

611 
©chg
);

625 
¹ems_i¤
 
cs8900_¼u±
 (
¹ems_veùÜ_numb
 
v
, *
cs
);

636 
cs8900_g_mac_addr
 (
cs8900_deviû
 *
cs
, *
mac_add»ss
);

647 
cs8900_©ch_¼u±
 (
cs8900_deviû
 *
cs
);

657 
cs8900_dach_¼u±
 (
cs8900_deviû
 *
cs
);

671 
cs8900_io_£t_»g
 (
cs8900_deviû
 *
cs
,

672 
»g
, 
d©a
);

686 
cs8900_io_g_»g
 (
cs8900_deviû
 *
cs
, 
»g
);

701 
cs8900_mem_£t_»g
 (
cs8900_deviû
 *
cs
,

702 
»g
, 
d©a
);

717 
cs8900_mem_g_»g
 (
cs8900_deviû
 *
cs
, 
»g
);

732 
cs8900_put_d©a_block
 (
cs8900_deviû
 *
cs
, 
Ën
, *
d©a
);

747 
cs8900_g_d©a_block
 (
cs8900_deviû
 *
cs
, *
d©a
);

759 
cs8900_tx_lßd
 (
cs8900_deviû
 *
cs
, 
mbuf
 *
m
);

	@src/libchip/network/dec21140.c

38 
	~<¹ems.h
>

46 #ià
defed
(
__i386__
)

47 
	#DEC21140_SUPPORTED


	)

48 
	#PCI_DRAM_OFFSET
 0

	)

50 #ià
defed
(
__PPC__
)

51 
	#DEC21140_SUPPORTED


	)

54 
	~<b¥.h
>

56 #ià!
defed
(
PCI_DRAM_OFFSET
)

57 #undeà
DEC21140_SUPPORTED


60 #ià
defed
(
DEC21140_SUPPORTED
)

61 
	~<¹ems/pci.h
>

63 #ià
defed
(
__PPC__
)

64 
	~<libýu/byÜd.h
>

65 
	~<libýu/io.h
>

68 #ià
defed
(
__i386__
)

69 
	~<libýu/byÜd.h
>

72 
	~<¡dlib.h
>

73 
	~<¡dio.h
>

74 
	~<¡d¬g.h
>

75 
	~<¡rg.h
>

76 
	~<ºo.h
>

77 
	~<¹ems/rÜ.h
>

78 
	~<¹ems/b¥Io.h
>

79 
	~<¹ems/¹ems_bsdÃt.h
>

81 
	~<sys/·¿m.h
>

82 
	~<sys/mbuf.h
>

84 
	~<sys/sock.h
>

85 
	~<sys/sockio.h
>

86 
	~<Ãt/if.h
>

87 
	~<Ãt/.h
>

88 
	~<Ãt/if_h.h
>

90 
	~<b¥/q.h
>

92 #ifdeà
m®loc


93 #undeà
m®loc


95 #ifdeà
ä


96 #undeà
ä


99 
	#DEC_DEBUG


	)

102 
	#PCI_VENDOR_ID_DEC
 0x1011

	)

103 
	#PCI_DEVICE_ID_DEC_21140
 0x0009

	)

104 
	#PCI_DEVICE_ID_DEC_21143
 0x0019

	)

106 
	#DRIVER_PREFIX
 "dc"

	)

108 
	#IO_MASK
 0x3

	)

109 
	#MEM_MASK
 0xF

	)

112 
	#ioCSR0
 0x00

	)

113 
	#ioCSR1
 0x08

	)

114 
	#ioCSR2
 0x10

	)

115 
	#ioCSR3
 0x18

	)

116 
	#ioCSR4
 0x20

	)

117 
	#ioCSR5
 0x28

	)

118 
	#ioCSR6
 0x30

	)

119 
	#ioCSR7
 0x38

	)

120 
	#ioCSR8
 0x40

	)

121 
	#ioCSR9
 0x48

	)

122 
	#ioCSR10
 0x50

	)

123 
	#ioCSR11
 0x58

	)

124 
	#ioCSR12
 0x60

	)

125 
	#ioCSR13
 0x68

	)

126 
	#ioCSR14
 0x70

	)

127 
	#ioCSR15
 0x78

	)

130 
	#memCSR0
 0x00

	)

131 
	#memCSR1
 0x02

	)

132 
	#memCSR2
 0x04

	)

133 
	#memCSR3
 0x06

	)

134 
	#memCSR4
 0x08

	)

135 
	#memCSR5
 0x0A

	)

136 
	#memCSR6
 0x0C

	)

137 
	#memCSR7
 0x0E

	)

138 
	#memCSR8
 0x10

	)

139 
	#memCSR9
 0x12

	)

140 
	#memCSR10
 0x14

	)

141 
	#memCSR11
 0x16

	)

142 
	#memCSR12
 0x18

	)

143 
	#memCSR13
 0x1A

	)

144 
	#memCSR14
 0x1C

	)

145 
	#memCSR15
 0x1E

	)

147 
	#DEC_REGISTER_SIZE
 0x100

	)

152 
	#RESET_CHIP
 0x00000001

	)

153 #ià
defed
(
__PPC__
)

154 
	#CSR0_MODE
 0x0030e002

	)

156 
	#CSR0_MODE
 0x0020e002

	)

158 
	#ROM_ADDRESS
 0x00004800

	)

159 
	#CSR6_INIT
 0x022cc000

	)

160 
	#CSR6_TX
 0x00002000

	)

161 
	#CSR6_TXRX
 0x00002002

	)

162 
	#IT_SETUP
 0x000100c0

	)

163 
	#CLEAR_IT
 0xFFFFFFFF

	)

164 
	#NO_IT
 0x00000000

	)

167 
	sMD
 {

169 vÞ©
ut32_t
 
	m¡©us
;

170 vÞ©
ut32_t
 
	mcouÁs
;

171 vÞ©
ut32_t
 
	mbuf1
, 
	mbuf2
;

173 vÞ©
mbuf
 *
	mm
;

174 vÞ©
MD
 *
	mÃxt
;

175 } 
__©ibu__
 ((
·cked
));

193 
	#NRXBUFS
 16

	)

194 
	#NTXBUFS
 16

	)

199 
	#NDECDRIVER
 8

	)

204 
	#RBUF_SIZE
 1536

	)

206 
	#ET_MINLEN
 60

	)

215 
¹ems_evt_£t
 
	gun_sigÇls
[
NDECDRIVER
]ð{ 
RTEMS_EVENT_1
,

216 
RTEMS_EVENT_2
,

217 
RTEMS_EVENT_3
,

218 
RTEMS_EVENT_4
,

219 
RTEMS_EVENT_5
,

220 
RTEMS_EVENT_6
,

221 
RTEMS_EVENT_7
,

222 
RTEMS_EVENT_8
 };

224 #ià
defed
(
__PPC__
)

225 
	#phys_to_bus
(
add»ss
è(()(×dd»ss)è+ 
PCI_DRAM_OFFSET
)

	)

226 
	#bus_to_phys
(
add»ss
è(()(×dd»ss)è- 
PCI_DRAM_OFFSET
)

	)

227 
	#CPU_CACHE_ALIGNMENT_FOR_BUFFER
 
PPC_CACHE_ALIGNMENT


	)

229 
Wa_X_ms
Ð
timeToWa
 );

230 
	#phys_to_bus
(
add»ss
è((è(×dd»ss)))

	)

231 
	#bus_to_phys
(
add»ss
è((è(×dd»ss)))

	)

232 
	#¹ems_b¥_day__bus_cyþes
(
cyþe
è
	`Wa_X_ms
Ðcyþe/100 )

	)

233 
	#CPU_CACHE_ALIGNMENT_FOR_BUFFER
 
PG_SIZE


	)

236 #ià(
MCLBYTES
 < 
RBUF_SIZE
)

243 
	sdec21140_soác
 {

245 
¬pcom
 
	m¬pcom
;

247 
¹ems_q_cÚÃù_d©a
 
	mqInfo
;

248 
¹ems_evt_£t
 
	miÛvt
;

250 
	mnumRxbufãrs
, 
	mnumTxbufãrs
;

252 vÞ©
MD
 *
	mMDba£
;

253 vÞ©
MD
 *
	mÃxtRxMD
;

254 vÞ©*
	mbufãrBa£
;

255 
	macû±Brßdÿ¡
;

257 vÞ©
MD
 *
	mTxMD
;

258 vÞ©
MD
 *
	mStTxMD
;

259 
	mPdgTxCouÁ
;

260 
	mTxSu¥ded
;

262 
	mpÜt
;

263 vÞ©
ut32_t
 *
	mba£
;

268 
	mrxIÁru±s
;

269 
	mrxNÙF¡
;

270 
	mrxNÙLa¡
;

271 
	mrxGÁ
;

272 
	mrxNÚOù
;

273 
	mrxRuÁ
;

274 
	mrxBadCRC
;

275 
	mrxOvrun
;

276 
	mrxCÞlisiÚ
;

278 
	mtxIÁru±s
;

279 
	mtxDeã¼ed
;

280 
	mtxH¹bt
;

281 
	mtxL©eCÞlisiÚ
;

282 
	mtxRryLim
;

283 
	mtxUndrun
;

284 
	mtxLo¡C¬rr
;

285 
	mtxRawWa
;

288 
dec21140_soác
 
	gdec21140_soác
[
NDECDRIVER
];

289 
¹ems_id
 
	grxD«mÚTid
;

290 
¹ems_id
 
	gtxD«mÚTid
;

296 
	#EE_SHIFT_CLK
 0x02

	)

297 
	#EE_CS
 0x01

	)

298 
	#EE_DATA_WRITE
 0x04

	)

299 
	#EE_WRITE_0
 0x01

	)

300 
	#EE_WRITE_1
 0x05

	)

301 
	#EE_DATA_READ
 0x08

	)

302 
	#EE_ENB
 (0x4800 | 
EE_CS
)

	)

305 
	#EE_WRITE_CMD
 (5 << 6)

	)

306 
	#EE_READ_CMD
 (6 << 6)

	)

307 
	#EE_ERASE_CMD
 (7 << 6)

	)

309 
	$g16
(vÞ©
ut32_t
 *
ißddr
, 
loÿtiÚ
)

311 
i
;

312 
»tv®
 = 0;

313 
»ad_cmd
 = 
loÿtiÚ
 | 
EE_READ_CMD
;

315 
	`¡_Ë32
(
ißddr
, 
EE_ENB
 & ~
EE_CS
);

316 
	`¡_Ë32
(
ißddr
, 
EE_ENB
);

319 
i
 = 10; i >= 0; i--) {

320 
d©av®
 = (
»ad_cmd
 & (1 << 
i
)è? 
EE_DATA_WRITE
 : 0;

321 
	`¡_Ë32
(
ißddr
, 
EE_ENB
 | 
d©av®
);

322 
	`¹ems_b¥_day__bus_cyþes
(200);

323 
	`¡_Ë32
(
ißddr
, 
EE_ENB
 | 
d©av®
 | 
EE_SHIFT_CLK
);

324 
	`¹ems_b¥_day__bus_cyþes
(200);

325 
	`¡_Ë32
(
ißddr
, 
EE_ENB
 | 
d©av®
);

326 
	`¹ems_b¥_day__bus_cyþes
(200);

328 
	`¡_Ë32
(
ißddr
, 
EE_ENB
);

330 
i
 = 16; i > 0; i--) {

331 
	`¡_Ë32
(
ißddr
, 
EE_ENB
 | 
EE_SHIFT_CLK
);

332 
	`¹ems_b¥_day__bus_cyþes
(200);

333 
»tv®
 = (»tv® << 1è| ((
	`ld_Ë32
(
ißddr
è& 
EE_DATA_READ
) ? 1 : 0);

334 
	`¡_Ë32
(
ißddr
, 
EE_ENB
);

335 
	`¹ems_b¥_day__bus_cyþes
(200);

339 
	`¡_Ë32
(
ißddr
, 
EE_ENB
 & ~
EE_CS
);

340  ( ((
»tv®
<<8)&0xff00) | ((retval>>8)&0xff) );

341 
	}
}

343 
	$no_Ý
(cÚ¡ 
¹ems_q_cÚÃù_d©a
* 
q
)

346 
	}
}

348 
	$dec21140IsOn
(cÚ¡ 
¹ems_q_cÚÃù_d©a
* 
q
)

350  
	`BSP_q_abËd_©_i8259s
 (
q
->
Çme
);

351 
	}
}

356 
¹ems_i¤


357 
	$dec21140EÃt_¼u±_hªdËr
 ( 
dec21140_soác
 *
sc
 )

359 vÞ©
ut32_t
 *
tba£
;

360 
ut32_t
 
¡©us
;

362 
tba£
 = (
ut32_t
*)(
sc
->
ba£
);

367 
¡©us
 = 
	`ld_Ë32
(
tba£
+
memCSR5
);

368 
	`¡_Ë32
((
tba£
+
memCSR5
), 
¡©us
);

373 ifÐ
¡©us
 & 0x000000c0 )

375 
sc
->
rxIÁru±s
++;

376 
	`¹ems_bsdÃt_evt_£nd
(
rxD«mÚTid
, 
sc
->
iÛvt
);

378 
	}
}

380 
¹ems_i¤


381 
	$dec21140EÃt_¼u±_hªdËr_y
()

383 
i
;

389 
i
=0; i< 
NDECDRIVER
; i++ )

391 ifÐ
dec21140_soác
[
i
].
ba£
 )

392 
	`dec21140EÃt_¼u±_hªdËr
Ð&
dec21140_soác
[
i
] );

394 
	}
}

400 
	$dec21140EÃt_lize_h¬dw¬e
 (
dec21140_soác
 *
sc
)

402 
i
,
¡
;

403 vÞ©
ut32_t
 *
tba£
;

404 vÞ©*
ý
, *
£tup_äm
, *
ddrs
;

405 vÞ©*
bufãr
;

406 vÞ©
MD
 *
rmd
;

409 #ifdeà
DEC_DEBUG


410 
	`´tk
("dec2114x : %02x:%02x:%02x:%02x:%02x:%02xame '%s%d', io %x, mem %x, int %d\n",

411 
sc
->
¬pcom
.
ac_addr
[0], sc->arpcom.ac_enaddr[1],

412 
sc
->
¬pcom
.
ac_addr
[2], sc->arpcom.ac_enaddr[3],

413 
sc
->
¬pcom
.
ac_addr
[4], sc->arpcom.ac_enaddr[5],

414 
sc
->
¬pcom
.
ac_if
.
if_Çme
, sc->¬pcom.ac_if.
if_un
,

415 
sc
->
pÜt
, (èsc->
ba£
, sc->
qInfo
.
Çme
 );

418 
tba£
 = 
sc
->
ba£
;

424 
	`¡_Ë32
Ð(
tba£
+
memCSR6
), 
CSR6_INIT
);

425 
	`¡_Ë32
Ð(
tba£
+
memCSR0
), 
RESET_CHIP
);

426 
	`¹ems_b¥_day__bus_cyþes
(200);

428 
	`¡_Ë32
Ð(
tba£
+
memCSR7
), 
NO_IT
);

433 
	`¡_Ë32
Ð(
tba£
+
memCSR0
), 
CSR0_MODE
);

438 
ý
 = (vÞ©*)
	`m®loc
(((
sc
->
numRxbufãrs
+sc->
numTxbufãrs
)*(
MD
))

439 + (
sc
->
numTxbufãrs
*
RBUF_SIZE
)

440 + 
CPU_CACHE_ALIGNMENT_FOR_BUFFER
);

441 
sc
->
bufãrBa£
 = 
ý
;

442 
ý
 +ð(
CPU_CACHE_ALIGNMENT_FOR_BUFFER
 - ()cp) & (CPU_CACHE_ALIGNMENT_FOR_BUFFER - 1);

443 #ià
	`defed
(
__i386__
)

444 #ifdeà
PCI_BRIDGE_DOES_NOT_ENSURE_CACHE_COHERENCY_FOR_DMA


445 ià(
	`_CPU_is_·gg_abËd
())

446 
_CPU_chªge_memÜy_m­pg_©ibu


447 (
NULL
, 
ý
,

448 ((
sc
->
numRxbufãrs
+sc->
numTxbufãrs
)*(
MD
))

449 + (
sc
->
numTxbufãrs
*
RBUF_SIZE
),

450 
PTE_CACHE_DISABLE
 | 
PTE_WRITABLE
);

453 
rmd
 = (vÞ©
MD
*)
ý
;

454 
sc
->
MDba£
 = 
rmd
;

455 
sc
->
ÃxtRxMD
 = sc->
MDba£
;

457 
bufãr
 = 
ý
 + ((
sc
->
numRxbufãrs
+sc->
numTxbufãrs
)*(
MD
));

458 
	`¡_Ë32
Ð(
tba£
+
memCSR3
), ()(
	`phys_to_bus
(()(
sc
->
MDba£
))));

460 
i
=0 ; i<
sc
->
numRxbufãrs
; i++)

462 
mbuf
 *
m
;

465 
	`MGETHDR
 (
m
, 
M_WAIT
, 
MT_DATA
);

466 
	`MCLGET
 (
m
, 
M_WAIT
);

467 
m
->
m_pkthdr
.
rcvif
 = &
sc
->
¬pcom
.
ac_if
;

468 
rmd
->
m
 = m;

470 
rmd
->
buf2
 = 
	`phys_to_bus
(rmd+1);

471 
rmd
->
buf1
 = 
	`phys_to_bus
(
	`mtod
(
m
, *));

472 
rmd
->
¡©us
 = 0x80000000;

473 
rmd
->
couÁs
 = 0xfdc00000 | (
RBUF_SIZE
);

474 
rmd
->
Ãxt
 =md+1;

475 
rmd
++;

480 
sc
->
MDba£
 [sc->
numRxbufãrs
-1].
buf2
 = 0;

481 
sc
->
MDba£
 [sc->
numRxbufãrs
-1].
couÁs
 = 0xãc00000 | (
RBUF_SIZE
);

482 
sc
->
MDba£
 [sc->
numRxbufãrs
-1].
Ãxt
 = sc->MDbase;

489 
	`¡_Ë32
Ð(
tba£
+
memCSR4
), ()(
	`phys_to_bus
(()(
rmd
))) );

490 
i
=0 ; i<
sc
->
numTxbufãrs
; i++){

491 (
rmd
+
i
)->
buf2
 = 
	`phys_to_bus
(rmd+i+1);

492 (
rmd
+
i
)->
buf1
 = 
	`phys_to_bus
(
bufãr
 + (i*
RBUF_SIZE
));

493 (
rmd
+
i
)->
couÁs
 = 0x01000000;

494 (
rmd
+
i
)->
¡©us
 = 0x0;

495 (
rmd
+
i
)->
Ãxt
 =md+i+1;

496 (
rmd
+
i
)->
m
 = 0;

502 (
rmd
+
sc
->
numTxbufãrs
-1)->
buf2
 = 
	`phys_to_bus
(rmd);

503 (
rmd
+
sc
->
numTxbufãrs
-1)->
Ãxt
 =md;

509 
£tup_äm
 = (vÞ©*)(
	`bus_to_phys
(
rmd
->
buf1
));

510 
ddrs
 = (*)(
sc
->
¬pcom
.
ac_addr
);

512 
i
 = 1; i < 16; i++) {

513 *
£tup_äm
++ = 
ddrs
[0];

514 *
£tup_äm
++ = 
ddrs
[1];

515 *
£tup_äm
++ = 
ddrs
[0];

516 *
£tup_äm
++ = 
ddrs
[1];

517 *
£tup_äm
++ = 
ddrs
[2];

518 *
£tup_äm
++ = 
ddrs
[3];

519 *
£tup_äm
++ = 
ddrs
[2];

520 *
£tup_äm
++ = 
ddrs
[3];

521 *
£tup_äm
++ = 
ddrs
[4];

522 *
£tup_äm
++ = 
ddrs
[5];

523 *
£tup_äm
++ = 
ddrs
[4];

524 *
£tup_äm
++ = 
ddrs
[5];

528 
	`mem£t
((*è
£tup_äm
, 0xff, 12);

529 
rmd
->
couÁs
 = 0x09000000 | 192 ;

530 
rmd
->
¡©us
 = 0x80000000;

531 
	`¡_Ë32
Ð(
tba£
+
memCSR6
), 
CSR6_INIT
 | 
CSR6_TX
);

532 
	`¡_Ë32
Ð(
tba£
+
memCSR1
), 1);

534 
rmd
->
¡©us
 != 0x7fffffff);

535 
rmd
->
couÁs
 = 0x01000000;

537 
sc
->
TxMD
 = 
rmd
+1;

539 
sc
->
qInfo
.
hdl
 = (
¹ems_q_hdl
)
dec21140EÃt_¼u±_hªdËr_y
;

540 
sc
->
qInfo
.
Ú
 = 
no_Ý
;

541 
sc
->
qInfo
.
off
 = 
no_Ý
;

542 
sc
->
qInfo
.
isOn
 = 
dec21140IsOn
;

544 #ifdeà
DEC_DEBUG


545 
	`´tk
Ð"dec2114x: In¡®lg IRQ %d\n", 
sc
->
qInfo
.
Çme
 );

547 #ifdeà
BSP_SHARED_HANDLER_SUPPORT


548 
¡
 = 
	`BSP_¡®l_¹ems_sh¬ed_q_hªdËr
Ð&
sc
->
qInfo
 );

550 
¡
 = 
	`BSP_¡®l_¹ems_q_hªdËr
Ð&
sc
->
qInfo
 );

553 ià(!
¡
)

554 
	`¹ems_·nic
 ("dec2114x : IÁru±am%dÌdy iÀu£\n", 
sc
->
qInfo
.
Çme
 );

555 
	}
}

558 
	$dec21140_rxD«mÚ
 (*
¬g
)

560 vÞ©
MD
 *
rmd
;

561 
dec21140_soác
 *
sc
;

562 
iâ
 *
iå
;

563 
h_hd
 *
eh
;

564 
mbuf
 *
m
;

565 
i
,
Ën
;

566 
¹ems_evt_£t
 
evts
;

571 
	`¹ems_bsdÃt_evt_»ûive
Ð
RTEMS_ALL_EVENTS
,

572 
RTEMS_WAIT
|
RTEMS_EVENT_ANY
,

573 
RTEMS_NO_TIMEOUT
,

574 &
evts
);

576 
i
=0; i< 
NDECDRIVER
; i++ )

578 
sc
 = &
dec21140_soác
[
i
];

579 ifÐ
sc
->
ba£
 )

581 ifÐ
evts
 & 
sc
->
iÛvt
 )

583 
iå
 = &
sc
->
¬pcom
.
ac_if
;

584 
rmd
 = 
sc
->
ÃxtRxMD
;

589 (
rmd
->
¡©us
 & 0x80000000) == 0)

594 
Ën
 = (
rmd
->
¡©us
 >> 16) & 0x7ff;

595 
m
 = (
mbuf
 *)(
rmd
->m);

596 
m
->
m_Ën
 = m->
m_pkthdr
.
Ën
 = - (
h_hd
);

597 
eh
 = 
	`mtod
 (
m
, 
h_hd
 *);

598 
m
->
m_d©a
 +ð(
h_hd
);

599 
	`h_put
 (
iå
, 
eh
, 
m
);

602 
	`MGETHDR
 (
m
, 
M_WAIT
, 
MT_DATA
);

603 
	`MCLGET
 (
m
, 
M_WAIT
);

604 
m
->
m_pkthdr
.
rcvif
 = 
iå
;

605 
rmd
->
m
 = m;

606 
rmd
->
buf1
 = 
	`phys_to_bus
(
	`mtod
(
m
, *));

609 
rmd
->
¡©us
 = 0x80000000;

611 
rmd
ômd->
Ãxt
;

614 
sc
->
ÃxtRxMD
 = 
rmd
;

620 
	}
}

623 
	$£nd·ck
 (
iâ
 *
iå
, 
mbuf
 *
m
)

625 
dec21140_soác
 *
dp
 = 
iå
->
if_soác
;

626 vÞ©
MD
 *
tmd
;

627 vÞ©*
mp
;

628 
mbuf
 *
n
;

629 
Ën
;

630 vÞ©
ut32_t
 *
tba£
;

632 
tba£
 = 
dp
->
ba£
;

637 
tmd
 = 
dp
->
TxMD
;

638 
n
 = 
m
;

640 (
tmd
->
¡©us
 & 0x80000000) != 0)

642 
tmd
ñmd->
Ãxt
;

645 
Ën
 = 0;

646 
mp
 = (vÞ©*)(
	`bus_to_phys
(
tmd
->
buf1
));

650 
Ën
 +ð
m
->
m_Ën
;

651 
	`memýy
((*è
mp
, (*)
m
->
m_d©a
, m->
m_Ën
);

652 
mp
 +ð
m
->
m_Ën
 ;

653 ià((
m
 = m->
m_Ãxt
è=ð
NULL
)

657 ià(
Ën
 < 
ET_MINLEN
)en = ET_MINLEN;

658 
tmd
->
couÁs
 = 0xe1000000 | (
Ën
 & 0x7ff);

659 
tmd
->
¡©us
 = 0x80000000;

661 
	`¡_Ë32
Ð(
tba£
+
memCSR1
), 0x1);

663 
	`m_äm
(
n
);

665 
dp
->
TxMD
 = 
tmd
->
Ãxt
;

666 
	}
}

672 
	$dec21140_txD«mÚ
 (*
¬g
)

674 
dec21140_soác
 *
sc
;

675 
iâ
 *
iå
;

676 
mbuf
 *
m
;

677 
i
;

678 
¹ems_evt_£t
 
evts
;

685 
	`¹ems_bsdÃt_evt_»ûive
Ð
RTEMS_ALL_EVENTS
,

686 
RTEMS_EVENT_ANY
 | 
RTEMS_WAIT
,

687 
RTEMS_NO_TIMEOUT
, &
evts
);

689 
i
=0; i< 
NDECDRIVER
; i++ )

691 
sc
 = &
dec21140_soác
[
i
];

692 ifÐ
sc
->
ba£
 )

694 ifÐ
evts
 & 
sc
->
iÛvt
 )

696 
iå
 = &
sc
->
¬pcom
.
ac_if
;

703 
	`IF_DEQUEUE
(&
iå
->
if_¢d
, 
m
);

704 ifÐ!
m
 ) ;

706 
	`£nd·ck
 (
iå
, 
m
);

709 
iå
->
if_æags
 &ð~
IFF_OACTIVE
;

715 
	}
}

718 
	$dec21140_¡¬t
 (
iâ
 *
iå
)

720 
dec21140_soác
 *
sc
 = 
iå
->
if_soác
;

721 
	`¹ems_bsdÃt_evt_£nd
Ð
txD«mÚTid
, 
sc
->
iÛvt
 );

722 
iå
->
if_æags
 |ð
IFF_OACTIVE
;

723 
	}
}

729 
	$dec21140_
 (*
¬g
)

731 
dec21140_soác
 *
sc
 = 
¬g
;

732 
iâ
 *
iå
 = &
sc
->
¬pcom
.
ac_if
;

733 vÞ©
ut32_t
 *
tba£
;

738 ifÐ!
sc
->
qInfo
.
hdl
 )

740 
	`dec21140EÃt_lize_h¬dw¬e
 (
sc
);

746 
tba£
 = 
sc
->
ba£
;

747 
	`¡_Ë32
Ð(
tba£
+
memCSR5
), 
IT_SETUP
);

748 
	`¡_Ë32
Ð(
tba£
+
memCSR7
), 
IT_SETUP
);

749 
	`¡_Ë32
Ð(
tba£
+
memCSR6
), 
CSR6_INIT
 | 
CSR6_TXRX
);

754 
iå
->
if_æags
 |ð
IFF_RUNNING
;

755 
	}
}

761 
	$dec21140_¡Ý
 (
dec21140_soác
 *
sc
)

763 vÞ©
ut32_t
 *
tba£
;

764 
iâ
 *
iå
 = &
sc
->
¬pcom
.
ac_if
;

766 
iå
->
if_æags
 &ð~
IFF_RUNNING
;

771 
tba£
 = 
sc
->
ba£
;

772 
	`¡_Ë32
Ð(
tba£
+
memCSR7
), 
NO_IT
);

773 
	`¡_Ë32
Ð(
tba£
+
memCSR6
), 
CSR6_INIT
);

776 
	}
}

782 
	$dec21140_¡©s
 (
dec21140_soác
 *
sc
)

784 
	`´tf
 (" Rx IÁru±s:%-8lu", 
sc
->
rxIÁru±s
);

785 
	`´tf
 (" NÙ F¡:%-8lu", 
sc
->
rxNÙF¡
);

786 
	`´tf
 (" NÙ La¡:%-8lu\n", 
sc
->
rxNÙLa¡
);

787 
	`´tf
 (" GÁ:%-8lu", 
sc
->
rxGÁ
);

788 
	`´tf
 (" RuÁ:%-8lu", 
sc
->
rxRuÁ
);

789 
	`´tf
 (" NÚ-où:%-8lu\n", 
sc
->
rxNÚOù
);

790 
	`´tf
 (" Bad CRC:%-8lu", 
sc
->
rxBadCRC
);

791 
	`´tf
 (" Ovrun:%-8lu", 
sc
->
rxOvrun
);

792 
	`´tf
 (" CÞlisiÚ:%-8lu\n", 
sc
->
rxCÞlisiÚ
);

794 
	`´tf
 (" Tx IÁru±s:%-8lu", 
sc
->
txIÁru±s
);

795 
	`´tf
 (" Deã¼ed:%-8lu", 
sc
->
txDeã¼ed
);

796 
	`´tf
 (" Mis£d Hrbt:%-8lu\n", 
sc
->
txH¹bt
);

797 
	`´tf
 (" NØC¬rr:%-8lu", 
sc
->
txLo¡C¬rr
);

798 
	`´tf
 ("R¿nsm Lim:%-8lu", 
sc
->
txRryLim
);

799 
	`´tf
 (" L©CÞlisiÚ:%-8lu\n", 
sc
->
txL©eCÞlisiÚ
);

800 
	`´tf
 (" Undrun:%-8lu", 
sc
->
txUndrun
);

801 
	`´tf
 (" Raw ouuwa:%-8lu\n", 
sc
->
txRawWa
);

802 
	}
}

808 
	$dec21140_ioùl
 (
iâ
 *
iå
, 
ioùl_commªd_t
 
commªd
, 
ÿddr_t
 
d©a
)

810 
dec21140_soác
 *
sc
 = 
iå
->
if_soác
;

811 
rÜ
 = 0;

813 
commªd
) {

814 
SIOCGIFADDR
:

815 
SIOCSIFADDR
:

816 
	`h_ioùl
 (
iå
, 
commªd
, 
d©a
);

819 
SIOCSIFFLAGS
:

820 
iå
->
if_æags
 & (
IFF_UP
 | 
IFF_RUNNING
)) {

821 
IFF_RUNNING
:

822 
	`dec21140_¡Ý
 (
sc
);

825 
IFF_UP
:

826 
	`dec21140_
 (
sc
);

829 
IFF_UP
 | 
IFF_RUNNING
:

830 
	`dec21140_¡Ý
 (
sc
);

831 
	`dec21140_
 (
sc
);

839 
SIO_RTEMS_SHOW_STATS
:

840 
	`dec21140_¡©s
 (
sc
);

847 
rÜ
 = 
EINVAL
;

851  
rÜ
;

852 
	}
}

876 
	$¹ems_dec21140_driv_©ch
 (
¹ems_bsdÃt_ifcÚfig
 *
cÚfig
, 
©ch
)

878 
dec21140_soác
 *
sc
;

879 
iâ
 *
iå
;

880 *
unName
;

881 
unNumb
;

882 
mtu
;

883 
cv®ue
;

884 #ià
	`defed
(
__i386__
)

885 
ut32_t
 
v®ue
;

886 
ut8_t
 
¼u±
;

888 
pbus
, 
pdev
, 
pfun
;

889 #ià
	`defed
(
__PPC__
)

890 
tmp
;

891 
ut32_t
 
lv®ue
;

898 ifÐ(
unNumb
 = 
	`¹ems_bsdÃt_·r£_driv_Çme
(
cÚfig
, &
unName
)) == -1 )

902 ifÐ
	`¡rcmp
(
unName
, 
DRIVER_PREFIX
) )

904 
	`´tk
("dec2114x : unam'%s'Ù %s\n", 
unName
, 
DRIVER_PREFIX
 );

911 iàÐ
	`pci_fd_deviû
(
PCI_VENDOR_ID_DEC
, 
PCI_DEVICE_ID_DEC_21140
,

912 
unNumb
-1, &
pbus
, &
pdev
, &
pfun
) == -1 ) {

913 iàÐ
	`pci_fd_deviû
(
PCI_VENDOR_ID_DEC
, 
PCI_DEVICE_ID_DEC_21143
,

914 
unNumb
-1, &
pbus
, &
pdev
, &
pfun
) != -1 ) {

917 #ià
	`defed
(
__i386__
)

918 
	`pci_wre_cÚfig_dwÜd
(
pbus
, 
pdev
, 
pfun
, 0x40, 0 );

920 
	`pci_wre_cÚfig_dwÜd
(
pbus
, 
pdev
, 
pfun
, 0x40, 
PCI_DEVICE_ID_DEC_21143
);

924 
	`´tk
("dec2114x : deviû '%s'Ù found oÀPCI bus\n", 
cÚfig
->
Çme
 );

929 #ifdeà
DEC_DEBUG


931 
	`´tk
("dec21140 : found device '%s', bus 0x%02x, dev 0x%02x, func 0x%02x\n",

932 
cÚfig
->
Çme
, 
pbus
, 
pdev
, 
pfun
);

936 ià((
unNumb
 < 1è|| (unNumb > 
NDECDRIVER
))

938 
	`´tk
("dec2114x : un %i v®id, mu¡ b(1 <ðÀ<ð%d)\n", 
unNumb
);

942 
sc
 = &
dec21140_soác
[
unNumb
 - 1];

943 
iå
 = &
sc
->
¬pcom
.
ac_if
;

944 ià(
iå
->
if_soác
 !ð
NULL
)

946 
	`´tk
("dec2114x : un %®»ady iÀu£.\n", 
unNumb
 );

954 
sc
->
iÛvt
 = 
un_sigÇls
[
unNumb
-1];

959 
sc
->
numRxbufãrs
 = (
cÚfig
->
rbuf_couÁ
è? cÚfig->rbuf_couÁ : 
NRXBUFS
;

960 
sc
->
numTxbufãrs
 = (
cÚfig
->
xbuf_couÁ
è? cÚfig->xbuf_couÁ : 
NTXBUFS
;

966 #ià
	`defed
(
__i386__
)

968 
	`pci_»ad_cÚfig_dwÜd
(
pbus
, 
pdev
, 
pfun
, 16, &
v®ue
);

969 
sc
->
pÜt
 = 
v®ue
 & ~
IO_MASK
;

971 
	`pci_»ad_cÚfig_dwÜd
(
pbus
, 
pdev
, 
pfun
, 20, &
v®ue
);

972 ià(
	`_CPU_is_·gg_abËd
())

973 
	`_CPU_m­_phys_add»ss
((**è&(
sc
->
ba£
),

974 (*)(
v®ue
 & ~
MEM_MASK
),

975 
DEC_REGISTER_SIZE
 ,

976 
PTE_CACHE_DISABLE
 | 
PTE_WRITABLE
);

978 
sc
->
ba£
 = (
ut32_t
 *)(
v®ue
 & ~
MEM_MASK
);

980 
	`pci_»ad_cÚfig_by
(
pbus
, 
pdev
, 
pfun
, 60, &
¼u±
);

981 
cv®ue
 = 
¼u±
;

983 #ià
	`defed
(
__PPC__
)

984 ()
	`pci_»ad_cÚfig_dwÜd
(
pbus
,

985 
pdev
,

986 
pfun
,

987 
PCI_BASE_ADDRESS_0
,

988 &
lv®ue
);

990 
sc
->
pÜt
 = 
lv®ue
 & ()(~
IO_MASK
);

992 ()
	`pci_»ad_cÚfig_dwÜd
(
pbus
,

993 
pdev
,

994 
pfun
,

995 
PCI_BASE_ADDRESS_1
,

996 &
lv®ue
);

998 
tmp
 = ()(
lv®ue
 & ()(~
MEM_MASK
))

999 + ()
PCI_MEM_BASE
;

1001 
sc
->
ba£
 = (
ut32_t
*)(
tmp
);

1003 
	`pci_»ad_cÚfig_by
(
pbus
,

1004 
pdev
,

1005 
pfun
,

1006 
PCI_INTERRUPT_LINE
,

1007 &
cv®ue
);

1015 
	`pci_wre_cÚfig_wÜd
(
pbus
, 
pdev
, 
pfun
,

1016 
PCI_COMMAND
,

1017 (
ut16_t
èÐ
PCI_COMMAND_IO
 | 
PCI_COMMAND_MEMORY
 | 
PCI_COMMAND_MASTER
 ) );

1023 
	`mem£t
(&
sc
->
qInfo
,0,(
¹ems_q_cÚÃù_d©a
));

1024 
sc
->
qInfo
.
Çme
 = 
cv®ue
;

1027 #ifdeà
DEC_DEBUG


1028 
	`´tk
("dec2114x : un %d ba£dd»s %08x.\n", 
unNumb
, 
sc
->
ba£
 );

1035 ià(
cÚfig
->
h¬dw¬e_add»ss
) {

1036 
	`memýy
 (
sc
->
¬pcom
.
ac_addr
, 
cÚfig
->
h¬dw¬e_add»ss
,

1037 
ETHER_ADDR_LEN
);

1040 uniÚ {
c
[64]; 
s
[32];} 
rombuf
;

1041 
i
;

1043 
i
=0; i<32; i++){

1044 
rombuf
.
s
[
i
] = 
	`g16
Ð
sc
->
ba£
 + 
memCSR9
, i);

1046 #ià
	`defed
(
__i386__
)

1047 
i
=0 ; i<(
ETHER_ADDR_LEN
/2); i++){

1048 
sc
->
¬pcom
.
ac_addr
[2*
i
] = 
rombuf
.
c
[20+2*i+1];

1049 
sc
->
¬pcom
.
ac_addr
[2*
i
+1] = 
rombuf
.
c
[20+2*i];

1052 #ià
	`defed
(
__PPC__
)

1053 
	`memýy
 (
sc
->
¬pcom
.
ac_addr
, 
rombuf
.
c
+20, 
ETHER_ADDR_LEN
);

1057 ià(
cÚfig
->
mtu
)

1058 
mtu
 = 
cÚfig
->mtu;

1060 
mtu
 = 
ETHERMTU
;

1062 
sc
->
acû±Brßdÿ¡
 = !
cÚfig
->
ignÜe_brßdÿ¡
;

1070 
iå
->
if_soác
 = 
sc
;

1071 
iå
->
if_un
 = 
unNumb
;

1072 
iå
->
if_Çme
 = 
unName
;

1073 
iå
->
if_mtu
 = 
mtu
;

1074 
iå
->
if_
 = 
dec21140_
;

1075 
iå
->
if_ioùl
 = 
dec21140_ioùl
;

1076 
iå
->
if_¡¬t
 = 
dec21140_¡¬t
;

1077 
iå
->
if_ouut
 = 
h_ouut
;

1078 
iå
->
if_æags
 = 
IFF_BROADCAST
 | 
IFF_SIMPLEX
;

1079 ià(
iå
->
if_¢d
.
ifq_maxËn
 == 0)

1080 
iå
->
if_¢d
.
ifq_maxËn
 = 
ifqmaxËn
;

1085 
	`if_©ch
 (
iå
);

1086 
	`h_içach
 (
iå
);

1088 #ifdeà
DEC_DEBUG


1089 
	`´tk
( "dec2114x : driverttached\n" );

1095 ià(
txD«mÚTid
 == 0)

1097 
rxD«mÚTid
 = 
	`¹ems_bsdÃt_Ãw´oc
( "DCrx", 4096,

1098 
dec21140_rxD«mÚ
, 
NULL
);

1100 
txD«mÚTid
 = 
	`¹ems_bsdÃt_Ãw´oc
( "DCtx", 4096,

1101 
dec21140_txD«mÚ
, 
NULL
);

1102 #ifdeà
DEC_DEBUG


1103 
	`´tk
( "dec2114x : driverasks created\n" );

1108 
	}
};

	@src/libchip/network/dwmac-1000-core.c

23 
	~<as£¹.h
>

24 
	~"dwmac-cÜe.h
"

25 
	~"dwmac-commÚ.h
"

27 
	#DWMAC_1000_CORE_DEBUG


	)

30 #ifdeà
DWMAC_1000_CORE_DEBUG


31 
	#DWMAC_1000_CORE_PRINT_DBG
Ð
fmt
, 
¬gs
 ... ) 
	`´tk
Ðfmt, ##rg )

	)

33 
	#DWMAC_1000_CORE_PRINT_DBG
Ð
fmt
, 
¬gs
 ... ) dØ{ }  0 )

	)

36 
	#DWMAC_1000_CORE_INIT
 \

38 Ð
MACGRP_MAC_CONFIGURATION_JD
 \

39 | 
MACGRP_MAC_CONFIGURATION_BE
 ) \

40 & ~
MACGRP_MAC_CONFIGURATION_PS
 \

41 )

	)

43 
	#DWMAC_1000_CORE_HASH_TABLE_SIZE
 256

	)

45 vÞ©
ut32_t
 *
	$dwmac_1000_cÜe_g_mac_addr_low
(

46 
dwmac_commÚ_cÚxt
 *
£lf
,

47 cÚ¡ 
mac_addr_dex
 )

49 vÞ©
ut32_t
 *
addr
 = 
NULL
;

51 
	`as£¹
Ð
£lf
 !ð
NULL
 );

52 
	`as£¹
Ð
mac_addr_dex
 <= 127 );

54 iàÐ
mac_addr_dex
 > 15 ) {

55 
addr
 = &
£lf
->
macg½
->
mac_addr16_127
[
mac_addr_dex
].
low
;

57 
addr
 = &
£lf
->
macg½
->
mac_addr0_15
[
mac_addr_dex
].
low
;

60  
addr
;

61 
	}
}

63 vÞ©
ut32_t
 *
	$dwmac_1000_cÜe_g_mac_addr_high
(

64 
dwmac_commÚ_cÚxt
 *
£lf
,

65 cÚ¡ 
mac_addr_dex
 )

67 vÞ©
ut32_t
 *
addr
 = 
NULL
;

69 
	`as£¹
Ð
£lf
 !ð
NULL
 );

70 
	`as£¹
Ð
mac_addr_dex
 <= 127 );

72 iàÐ
mac_addr_dex
 > 15 ) {

73 
addr
 = &
£lf
->
macg½
->
mac_addr16_127
[
mac_addr_dex
].
high
;

75 
addr
 = &
£lf
->
macg½
->
mac_addr0_15
[
mac_addr_dex
].
high
;

78  
addr
;

79 
	}
}

81 
	$dwmac_1000_cÜe_
Ð
dwmac_commÚ_cÚxt
 *
£lf
 )

83 
ut32_t
 
v®ue
 = 
£lf
->
macg½
->
mac_cÚfigu¿tiÚ
;

85 
v®ue
 |ð
DWMAC_1000_CORE_INIT
;

87 iàÐÐ
£lf
->
dmag½
->
hw_ã©u»
 & 
DMAGRP_HW_FEATURE_RXTYP1COE
 ) != 0

88 || ( 
£lf
->
dmag½
->
hw_ã©u»
 & 
DMAGRP_HW_FEATURE_RXTYP2COE
 ) != 0 ) {

90 
v®ue
 |ð
MACGRP_MAC_CONFIGURATION_IPC
;

94 
v®ue
 &ð~
MACGRP_MAC_CONFIGURATION_JE
;

95 
v®ue
 &ð~
MACGRP_MAC_CONFIGURATION_TWOKPE
;

96 
£lf
->
macg½
->
mac_cÚfigu¿tiÚ
 = 
v®ue
;

99 
£lf
->
macg½
->
¼u±_mask
 =

100 
MACGRP_INTERRUPT_MASK_RGSMIIIM


101 | 
MACGRP_INTERRUPT_MASK_PCSLCHGIM


102 | 
MACGRP_INTERRUPT_MASK_PCSANCIM


103 | 
MACGRP_INTERRUPT_MASK_TSIM
;

106 
£lf
->
macg½
->
mmc_»ûive_¼u±_mask
 = ( 
ut32_t
 ) ~0L;

107 
£lf
->
macg½
->
mmc_ªsm_¼u±_mask
 = ( 
ut32_t
 ) ~0L;

108 
£lf
->
macg½
->
mmc_c_»ûive_¼u±_mask
 = ( 
ut32_t
 ) ~0L;

109 
	}
}

111 
	$dwmac_1000_cÜe_£t_umac_addr
(

112 
dwmac_commÚ_cÚxt
 *
£lf
,

113 cÚ¡ 
ut8_t
 *
addr
,

114 
»g_n
 )

116 
	`dwmac_cÜe_£t_mac_addr
(

117 
addr
,

118 
	`dwmac_1000_cÜe_g_mac_addr_high
Ð
£lf
, 
»g_n
 ),

119 
	`dwmac_1000_cÜe_g_mac_addr_low
Ð
£lf
, 
»g_n
 )

121 
	}
}

123 
	$dwmac_1000_cÜe_£t_hash_fr
(

124 
dwmac_commÚ_cÚxt
 *
£lf
,

125 cÚ¡ 
boÞ
 
add
,

126 
iäeq
 *
iä
 )

128 
o
 = 0;

129 
¬pcom
 *
ac
 = &
£lf
->arpcom;

131 iàÐ
add
 ) {

132 
o
 = 
	`h_addmuÉi
Ð
iä
, 
ac
 );

134 
o
 = 
	`h_dmuÉi
Ð
iä
, 
ac
 );

137 iàÐ
o
 =ð
ENETRESET
 ) {

138 
h_muÉi¡
 
¡
;

139 
h_muÉi
 *
m
;

140 
num_muÉi
 = 0;

141 
dex
;

143 
	`ETHER_FIRST_MULTI
Ð
¡
, 
ac
, 
m
 );

145  
m
 !ð
NULL
 ) {

147 
ut64_t
 
add¾o
 = 0;

148 
ut64_t
 
addrhi
 = 0;

150 
	`memýy
Ð&
add¾o
, 
m
->
m_add¾o
, 
ETHER_ADDR_LEN
 );

151 
	`memýy
Ð&
addrhi
, 
m
->
m_addrhi
, 
ETHER_ADDR_LEN
 );

152 
num_muÉi
 +ð1U + (
ut32_t
èÐ
addrhi
 - 
add¾o
 );

155 iàÐ
num_muÉi
 > 
DWMAC_1000_CORE_HASH_TABLE_SIZE
 ) {

159  
dex
 = 0; index < 8; ++index ) {

160 
£lf
->
macg½
->
hash_bË_»g
[
dex
] = 0xffffffff;

163 
£lf
->
macg½
->
mac_äame_fr
 |ð
MACGRP_MAC_FRAME_FILTER_PM
;

164 } iàÐ
num_muÉi
 > 0 ) {

165 
ut32_t
 
hash_shadow
[8] = {0, 0, 0, 0, 0, 0, 0, 0};

166 
	`ETHER_FIRST_MULTI
Ð
¡
, 
ac
, 
m
 );

168  
m
 !ð
NULL
 ) {

169 
ut64_t
 
add¾o
 = 0;

170 
ut64_t
 
addrhi
 = 0;

172 
	`memýy
Ð&
add¾o
, 
m
->
m_add¾o
, 
ETHER_ADDR_LEN
 );

173 
	`memýy
Ð&
addrhi
, 
m
->
m_addrhi
, 
ETHER_ADDR_LEN
 );

175  
add¾o
 <ð
addrhi
 ) {

177 
ut32_t
 
üc
 = 
	`h_üc32_be
Ð(
ut8_t
 *è&
add¾o
, 
ETHER_ADDR_LEN
 );

182 
ut32_t
 
dex_»g
 = ( 
üc
 >> 29 ) & 0x7;

183 
ut32_t
 
dex_b
 = ( 
üc
 >> 24 ) & 0x1f;

185 
hash_shadow
[
dex_»g
] |ð1U << 
dex_b
;

186 ++
add¾o
;

189 
	`ETHER_NEXT_MULTI
Ð
¡
, 
m
 );

192  
dex
 = 0; index < 8; ++index ) {

193 
£lf
->
macg½
->
hash_bË_»g
[
dex
] = 
hash_shadow
[index];

197 
£lf
->
macg½
->
mac_äame_fr
 |ð
MACGRP_MAC_FRAME_FILTER_HMC
;

200  
dex
 = 0; index < 8; ++index ) {

201 
£lf
->
macg½
->
hash_bË_»g
[
dex
] = 0x00000000;

205 
£lf
->
macg½
->
mac_äame_fr
 |ð
MACGRP_MAC_FRAME_FILTER_HMC
;

208 
	`DWMAC_1000_CORE_PRINT_DBG
(

210 
£lf
->
macg½
->
mac_äame_fr


212 
	`DWMAC_1000_CORE_PRINT_DBG
(

222 
£lf
->
macg½
->
hash_bË_»g
[0],

223 
£lf
->
macg½
->
hash_bË_»g
[1],

224 
£lf
->
macg½
->
hash_bË_»g
[2],

225 
£lf
->
macg½
->
hash_bË_»g
[3],

226 
£lf
->
macg½
->
hash_bË_»g
[4],

227 
£lf
->
macg½
->
hash_bË_»g
[5],

228 
£lf
->
macg½
->
hash_bË_»g
[6],

229 
£lf
->
macg½
->
hash_bË_»g
[7]

232 
	}
}

234 cÚ¡ 
dwmac_commÚ_cÜe_Ýs
 
	gdwmac_cÜe_Ýs_1000
 = {

235 .
cÜe_
 = 
dwmac_1000_cÜe_
,

236 .
	g£t_hash_fr
 = 
dwmac_1000_cÜe_£t_hash_fr
,

237 .
	g£t_umac_addr
 = 
dwmac_1000_cÜe_£t_umac_addr
,

	@src/libchip/network/dwmac-1000-dma.c

23 
	~<ºo.h
>

24 
	~"dwmac-cÜe.h
"

25 
	~"dwmac-commÚ.h
"

28 
	mDWMAC100_OPERATION_MODE_TTC_CONTROL_64
 = 0x00000000,

29 
	mDWMAC100_OPERATION_MODE_TTC_CONTROL_128
 = 0x00004000,

30 
	mDWMAC100_OPERATION_MODE_TTC_CONTROL_192
 = 0x00008000,

31 
	mDWMAC100_OPERATION_MODE_TTC_CONTROL_256
 = 0x0000c000,

32 
	mDWMAC100_OPERATION_MODE_TTC_CONTROL_40
 = 0x00010000,

33 
	mDWMAC100_OPERATION_MODE_TTC_CONTROL_32
 = 0x00014000,

34 
	mDWMAC100_OPERATION_MODE_TTC_CONTROL_24
 = 0x00018000,

35 
	mDWMAC100_OPERATION_MODE_TTC_CONTROL_16
 = 0x0001c000,

36 } 
	tdwmac1000_Ý©iÚ_mode_c_cÚÞ
;

39 
	mDWMAC100_OPERATION_MODE_RTC_CONTROL_64
 = 0x00000000,

40 
	mDWMAC100_OPERATION_MODE_RTC_CONTROL_32
 = 0x00000008,

41 
	mDWMAC100_OPERATION_MODE_RTC_CONTROL_96
 = 0x00000010,

42 
	mDWMAC100_OPERATION_MODE_RTC_CONTROL_128
 = 0x00000018,

43 } 
	tdwmac1000_Ý©iÚ_mode_¹c_cÚÞ
;

45 
	$dwmac1000_dma_
(

46 
dwmac_commÚ_cÚxt
 *
£lf
,

47 cÚ¡ 
ut32_t
 
pbl
,

48 cÚ¡ 
ut32_t
 
fb
,

49 cÚ¡ 
ut32_t
 
mb
,

50 cÚ¡ 
boÞ
 
u£_hªûd_desc
,

51 cÚ¡ 
ut32_t
 
bur¡_Ën_4_suµÜt
,

52 cÚ¡ 
ut32_t
 
bur¡_Ën_8_suµÜt
,

53 cÚ¡ 
ut32_t
 
bur¡_Ën_16_suµÜt
,

54 cÚ¡ 
ut32_t
 
bur¡_bound¬y
,

55 vÞ©
dwmac_desc
 *
dma_tx
,

56 vÞ©
dwmac_desc
 *
dma_rx
 )

58 
o
 = 0;

59 
ut32_t
 
v®ue
 = 
£lf
->
dmag½
->
bus_mode
;

60 
lim
 = 10;

64 
v®ue
 |ð
DMAGRP_BUS_MODE_SWR
;

65 
£lf
->
dmag½
->
bus_mode
 = 
v®ue
;

67  
lim
-- ) {

68 iàÐ!Ð
£lf
->
dmag½
->
bus_mode
 & 
DMAGRP_BUS_MODE_SWR
 ) )

71 
	`¹ems_sk_wake_aá
Ð
	`¹ems_þock_g_ticks_³r_£cÚd
() / 100 );

74 iàÐ
lim
 < 0 ) {

75 
o
 = 
EBUSY
;

80 iàÐ
pbl
 >ð
DWMAC_DMA_CFG_BUS_MODE_BURST_LENGTH_8
 ) {

81 
v®ue
 =

82 
	`DMAGRP_BUS_MODE_PBL
ÐÐ
pbl
 + 1 ) / 8 ) | 
	`DMAGRP_BUS_MODE_RPBL
(

83 Ð
pbl
 + 1 ) / 8 ) | 
DMAGRP_BUS_MODE_EIGHTXPBL
;

85 
v®ue
 = 
	`DMAGRP_BUS_MODE_PBL
Ð
pbl
 + 1 ) | 
	`DMAGRP_BUS_MODE_RPBL
(bl + 1 );

89 iàÐ
fb
 ) {

90 
v®ue
 |ð
DMAGRP_BUS_MODE_FB
;

94 iàÐ
mb
 ) {

95 
v®ue
 |ð
DMAGRP_BUS_MODE_MB
;

98 iàÐ
u£_hªûd_desc
 ) {

99 
v®ue
 |ð
DMAGRP_BUS_MODE_ATDS
;

102 
£lf
->
dmag½
->
bus_mode
 = 
v®ue
;

120 
v®ue
 = 
£lf
->
dmag½
->
axi_bus_mode
;

122 iàÐ
bur¡_Ën_4_suµÜt
 ) {

123 
v®ue
 |ð
DMAGRP_AXI_BUS_MODE_BLEND4
;

125 
v®ue
 &ð~
DMAGRP_AXI_BUS_MODE_BLEND4
;

128 iàÐ
bur¡_Ën_8_suµÜt
 ) {

129 
v®ue
 |ð
DMAGRP_AXI_BUS_MODE_BLEND8
;

131 
v®ue
 &ð~
DMAGRP_AXI_BUS_MODE_BLEND8
;

134 iàÐ
bur¡_Ën_16_suµÜt
 ) {

135 
v®ue
 |ð
DMAGRP_AXI_BUS_MODE_BLEND16
;

137 
v®ue
 &ð~
DMAGRP_AXI_BUS_MODE_BLEND16
;

140 iàÐ
bur¡_bound¬y
 ) {

141 
v®ue
 |ð
DMAGRP_AXI_BUS_MODE_ONEKBBE
;

143 
v®ue
 &ð~
DMAGRP_AXI_BUS_MODE_ONEKBBE
;

146 
£lf
->
dmag½
->
axi_bus_mode
 = 
v®ue
;

149 
	`dwmac_cÜe_abË_dma_q_rx
Ð
£lf
 );

150 
	`dwmac_cÜe_abË_dma_q_tx_deçuÉ
Ð
£lf
 );

154 
£lf
->
dmag½
->
ªsm_desü_li¡_addr
 = (
u_t
è&
dma_tx
[0];

155 
£lf
->
dmag½
->
»ûive_desü_li¡_addr
 = (
u_t
è&
dma_rx
[0];

158  
o
;

159 
	}
}

161 
	$dwmac1000_dma_Ý©iÚ_mode
(

162 
dwmac_commÚ_cÚxt
 *
£lf
,

163 cÚ¡ 
txmode
,

164 cÚ¡ 
rxmode
 )

166 
ut32_t
 
v®ue
 = 
£lf
->
dmag½
->
Ý©iÚ_mode
;

169 iàÐ
txmode
 =ð
DWMAC_COMMON_DMA_MODE_STORE_AND_FORWARD
 ) {

171 
v®ue
 |ð
DMAGRP_OPERATION_MODE_TSF
;

175 
v®ue
 |ð
DMAGRP_OPERATION_MODE_OSF
;

177 
v®ue
 &ð~
DMAGRP_OPERATION_MODE_TSF
;

178 
v®ue
 &ð~
	`DMAGRP_OPERATION_MODE_TTC_GET
( value );

181 iàÐ
txmode
 <= 32 ) {

182 
v®ue
 |ð
	`DMAGRP_OPERATION_MODE_TTC_SET
(

183 
v®ue
,

184 
DWMAC100_OPERATION_MODE_TTC_CONTROL_32


186 } iàÐ
txmode
 <= 64 ) {

187 
v®ue
 = 
	`DMAGRP_OPERATION_MODE_TTC_SET
(

188 
v®ue
,

189 
DWMAC100_OPERATION_MODE_TTC_CONTROL_64


191 } iàÐ
txmode
 <= 128 ) {

192 
v®ue
 = 
	`DMAGRP_OPERATION_MODE_TTC_SET
(

193 
v®ue
,

194 
DWMAC100_OPERATION_MODE_TTC_CONTROL_128


196 } iàÐ
txmode
 <= 192 ) {

197 
v®ue
 = 
	`DMAGRP_OPERATION_MODE_TTC_SET
(

198 
v®ue
,

199 
DWMAC100_OPERATION_MODE_TTC_CONTROL_192


202 
v®ue
 = 
	`DMAGRP_OPERATION_MODE_TTC_SET
(

203 
v®ue
,

204 
DWMAC100_OPERATION_MODE_TTC_CONTROL_256


209 iàÐ
rxmode
 =ð
DWMAC_COMMON_DMA_MODE_STORE_AND_FORWARD
 ) {

210 
v®ue
 |ð
DMAGRP_OPERATION_MODE_RSF
;

212 
v®ue
 &ð~
DMAGRP_OPERATION_MODE_RSF
;

213 
v®ue
 &ð
	`DMAGRP_OPERATION_MODE_RTC_GET
( value );

215 iàÐ
rxmode
 <= 32 ) {

216 
v®ue
 = 
	`DMAGRP_OPERATION_MODE_RTC_SET
(

217 
v®ue
,

218 
DWMAC100_OPERATION_MODE_RTC_CONTROL_32


220 } iàÐ
rxmode
 <= 64 ) {

221 
v®ue
 = 
	`DMAGRP_OPERATION_MODE_RTC_SET
(

222 
v®ue
,

223 
DWMAC100_OPERATION_MODE_RTC_CONTROL_64


225 } iàÐ
rxmode
 <= 96 ) {

226 
v®ue
 = 
	`DMAGRP_OPERATION_MODE_RTC_SET
(

227 
v®ue
,

228 
DWMAC100_OPERATION_MODE_RTC_CONTROL_96


231 
v®ue
 = 
	`DMAGRP_OPERATION_MODE_RTC_SET
(

232 
v®ue
,

233 
DWMAC100_OPERATION_MODE_RTC_CONTROL_128


238 
£lf
->
dmag½
->
Ý©iÚ_mode
 = 
v®ue
;

239 
	}
}

241 cÚ¡ 
dwmac_commÚ_dma_Ýs
 
	gdwmac_dma_Ýs_1000
 = {

242 .

 = 
dwmac1000_dma_
,

243 .
	gdma_mode
 = 
dwmac1000_dma_Ý©iÚ_mode
,

	@src/libchip/network/dwmac-1000-ethernet-mac-ops.c

24 
	~"dwmac-commÚ.h
"

26 cÚ¡ 
dwmac_commÚ_dma_Ýs
 
dwmac_dma_Ýs_1000
;

27 cÚ¡ 
dwmac_commÚ_cÜe_Ýs
 
dwmac_cÜe_Ýs_1000
;

29 cÚ¡ 
dwmac_hÃt_mac_Ýs
 
	gDWMAC_1000_ETHERNET_MAC_OPS
 =

30 
DWMAC_ETHERNET_MAC_OPS_INITIALIZER
(

31 &
dwmac_cÜe_Ýs_1000
,

32 &
dwmac_dma_Ýs_1000


	@src/libchip/network/dwmac-common.h

19 #iâdeà
DWMAC_COMMON_H_


20 
	#DWMAC_COMMON_H_


	)

22 
	#__INSIDE_RTEMS_BSD_TCPIP_STACK__
 1

	)

23 
	#__BSD_VISIBLE
 1

	)

25 
	~<¡dt.h
>

26 
	~<¹ems.h
>

27 
	~<¹ems/¹ems_bsdÃt.h
>

28 
	~<¹ems/¹ems_mii_ioùl.h
>

30 
	~<sys/·¿m.h
>

31 
	~<sys/sock.h
>

32 
	~<sys/sockio.h
>

33 
	~<sys/mbuf.h
>

35 
	~<Ãt/if.h
>

36 
	~<Ãt/if_¬p.h
>

37 
	~<Ãt/.h
>

38 
	~<Ãt/if_h.h
>

39 
	~<Ãt/_sy¡m.h
>

40 
	~<Ãt/.h
>

42 
	~<libch/dwmac.h
>

43 
	~"dwmac-desc.h
"

44 
	~"dwmac-»gs.h
"

46 #ifdeà
__ýlu¥lus


50 
	#DWMAC_COMMON_DMA_MODE_STORE_AND_FORWARD
 1

	)

54 
	#DWMAC_COMMON_EVENT_TASK_INIT
 
RTEMS_EVENT_1


	)

55 
	#DWMAC_COMMON_EVENT_TASK_STOP
 
RTEMS_EVENT_2


	)

58 
	#DWMAC_COMMON_EVENT_TX_TRANSMIT_FRAME
 
RTEMS_EVENT_3


	)

59 
	#DWMAC_COMMON_EVENT_TX_FRAME_TRANSMITTED
 
RTEMS_EVENT_4


	)

60 
	#DWMAC_COMMON_EVENT_TX_BUMP_UP_DMA_THRESHOLD
 
RTEMS_EVENT_5


	)

61 
	#DWMAC_COMMON_EVENT_TX_PHY_STATUS_CHANGE
 
RTEMS_EVENT_6


	)

64 
	#DWMAC_COMMON_EVENT_RX_FRAME_RECEIVED
 
RTEMS_EVENT_3


	)

66 #ifdeà
__ARM_ARCH_7A__


67 
	#DWMAC_COMMON_DSB
(è
	`_ARM_D©a_synchrÚiz©iÚ_b¬rr
()

	)

69 
	#DWMAC_COMMON_DSB
()

	)

73 
dwmac_commÚ_cÜe_Ýs
 
	tdwmac_commÚ_cÜe_Ýs
;

74 
dwmac_commÚ_dma_Ýs
 
	tdwmac_commÚ_dma_Ýs
;

75 
dwmac_commÚ_desc_Ýs
 
	tdwmac_commÚ_desc_Ýs
;

78 
DWMAC_COMMON_RX_FRAME_STATUS_GOOD
,

79 
DWMAC_COMMON_RX_FRAME_STATUS_DISCARD
,

80 
DWMAC_COMMON_RX_FRAME_STATUS_CSUM_NONE
,

81 
DWMAC_COMMON_RX_FRAME_STATUS_LLC_SNAP


82 } 
	tdwmac_commÚ_rx_äame_¡©us
;

85 
DWMAC_COMMON_STATE_DOWN
,

86 
DWMAC_COMMON_STATE_UP
,

88 
DWMAC_COMMON_STATE_COUNT


89 } 
	tdwmac_commÚ_¡©e
;

92 
ut32_t
 
lk_down
;

93 
ut32_t
 
lk_up
;

94 } 
	tdwmac_commÚ_phy_¡©us_couÁs
;

97 
ut32_t
 
»ûive
;

98 
ut32_t
 
ªsm
;

99 
ut32_t
 
tx_undæow
;

100 
ut32_t
 
tx_jabb
;

101 
ut32_t
 
rx_ovæow
;

102 
ut32_t
 
rx_¾y
;

103 
ut32_t
 
rx_buf_uÇv
;

104 
ut32_t
 
rx_´oûss_¡Ý³d
;

105 
ut32_t
 
rx_w©chdog
;

106 
ut32_t
 
tx_¾y
;

107 
ut32_t
 
tx_buf_uÇv
;

108 
ut32_t
 
tx_´oûss_¡Ý³d
;

109 
ut32_t
 
çl_bus_rÜ
;

110 
ut32_t
 
unhªdËd
;

111 } 
	tdwmac_commÚ_dma_q_couÁs
;

114 
ut32_t
 
de¡_addr_ç
;

115 
ut32_t
 
üc_rÜ
;

117 
ut32_t
 
»ûive_rÜ
;

119 
ut32_t
 
w©chdog_timeout
;

121 
ut32_t
 
Ï_cÞlisiÚ
;

122 
ut32_t
 
gÁ_äame
;

130 
ut32_t
 
ovæow_rÜ
;

134 
ut32_t
 
desütÜ_rÜ
;

137 
ut32_t
 
sourû_addr_ç
;

138 
ut32_t
 
Ëngth_rÜ
;

140 
ut32_t
 
vÏn_g
;

143 
ut32_t
 
hÃt_äames
;

146 
ut32_t
 
dribbË_b_rÜ
;

148 } 
	tdwmac_commÚ_desc_¡©us_couÁs_rx
;

151 
ut32_t
 
jabb
;

153 
ut32_t
 
äame_æushed
;

155 
ut32_t
 
lossÿ¼r
;

158 
ut32_t
 
no_ÿ¼r
;

159 
ut32_t
 
exûssive_cÞlisiÚs
;

162 
ut32_t
 
exûssive_deã¼®
;

165 
ut32_t
 
undæow
;

169 
ut32_t
 
_hd_rÜ
;

175 
ut32_t
 
·ylßd_rÜ
;

178 
ut32_t
 
deã¼ed
;

180 
ut32_t
 
vÏn
;

181 } 
	tdwmac_commÚ_desc_¡©us_couÁs_tx
;

184 
ut32_t
 
rÜs
;

185 
ut32_t
 
drÝ³d
;

186 
ut32_t
 
äames_good
;

187 
ut32_t
 
bys_good
;

188 
ut32_t
 
äames
;

189 
ut32_t
 
dma_su¥ded
;

190 } 
	tdwmac_commÚ_rx_äame_couÁs
;

193 
ut32_t
 
äames_äom_¡ack
;

194 
ut32_t
 
äames_to_dma
;

195 
ut32_t
 
·cks_to_dma
;

196 
ut32_t
 
bys_to_dma
;

197 
ut32_t
 
·ck_rÜs
;

198 
ut32_t
 
·cks_ªmd_by_DMA
;

199 } 
	tdwmac_commÚ_tx_äame_couÁs
;

202 
dwmac_commÚ_phy_¡©us_couÁs
 
phy_¡©us_couÁs
;

203 
dwmac_commÚ_dma_q_couÁs
 
dma_q_couÁs
;

204 
dwmac_commÚ_desc_¡©us_couÁs_rx
 
desc_¡©us_couÁs_rx
;

205 
dwmac_commÚ_desc_¡©us_couÁs_tx
 
desc_¡©us_couÁs_tx
;

206 
dwmac_commÚ_rx_äame_couÁs
 
äame_couÁs_rx
;

207 
dwmac_commÚ_tx_äame_couÁs
 
äame_couÁs_tx
;

208 } 
	tdwmac_commÚ_¡©s
;

211 
¬pcom
rpcom;

212 
¹ems_bsdÃt_ifcÚfig
 *
bsd_cÚfig
;

213 
¹ems_mdio_fo
 
mdio
;

214 
¹ems_id
 
sk_id_rx
;

215 
¹ems_id
 
sk_id_tx
;

216 
¹ems_id
 
sk_id_cÚÞ
;

217 *
¬g
;

218 vÞ©
macg½
 *macgrp;

219 vÞ©
dmag½
 *dmagrp;

220 
c¤_þock
;

221 
dwmac_commÚ_¡©e
 
¡©e
;

222 
dwmac_commÚ_¡©s
 
¡©s
;

223 
dma_th»shÞd_cÚÞ
;

224 vÞ©
dwmac_desc
 *
dma_tx
;

225 vÞ©
dwmac_desc
 *
dma_rx
;

226 
idx_rx
;

227 
mbuf
 **
mbuf_addr_rx
;

228 
mbuf
 **
mbuf_addr_tx
;

229 cÚ¡ 
dwmac_cfg
 *
CFG
;

230 
MDIO_BUS_ADDR
;

231 } 
	tdwmac_commÚ_cÚxt
;

233 
	sdwmac_commÚ_cÜe_Ýs
 {

235 (*
cÜe_
èÐ
dwmac_commÚ_cÚxt
 *
£lf
 );

238 (*
£t_hash_fr
) (

239 
dwmac_commÚ_cÚxt
 *
£lf
,

240 cÚ¡ 
boÞ
 
add
,

241 
iäeq
 *
iä
 );

244 (*
£t_umac_addr
) (

245 
dwmac_commÚ_cÚxt
 *
ißddr
,

246 cÚ¡ *
addr
,

247 cÚ¡ 
»g_n
 );

250 
	sdwmac_commÚ_dma_Ýs
 {

252 (*

) (

253 
dwmac_commÚ_cÚxt
 *
£lf
,

254 cÚ¡ 
ut32_t
 
pbl
,

255 cÚ¡ 
ut32_t
 
fb
,

256 cÚ¡ 
ut32_t
 
mb
,

257 cÚ¡ 
boÞ
 
u£_hªûd_desc
,

258 cÚ¡ 
ut32_t
 
bur¡_Ën_4_suµÜt
,

259 cÚ¡ 
ut32_t
 
bur¡_Ën_8_suµÜt
,

260 cÚ¡ 
ut32_t
 
bur¡_Ën_16_suµÜt
,

261 cÚ¡ 
ut32_t
 
bur¡_bound¬y
,

262 vÞ©
dwmac_desc
 *
dma_tx
,

263 vÞ©
dwmac_desc
 *
dma_rx
 );

267 (*
dma_mode
) (

268 
dwmac_commÚ_cÚxt
 *
£lf
,

269 cÚ¡ 
txmode
,

270 cÚ¡ 
rxmode
 );

273 
	sdwmac_commÚ_desc_Ýs
 {

275 (*
v®id©e
èÐ
dwmac_commÚ_cÚxt
 *
£lf
 );

276 
boÞ
 (*
u£_hªûd_descs
èÐ
dwmac_commÚ_cÚxt
 *
£lf
 );

279 (*
ü_rx_desc
èÐ
dwmac_commÚ_cÚxt
 *
£lf
 );

282 (*
ü_tx_desc
èÐ
dwmac_commÚ_cÚxt
 *
£lf
 );

285 (*
de¡roy_rx_desc
èÐ
dwmac_commÚ_cÚxt
 *
£lf
 );

288 (*
de¡roy_tx_desc
èÐ
dwmac_commÚ_cÚxt
 *
£lf
 );

291 (*
_rx_desc
) (

292 
dwmac_commÚ_cÚxt
 *
£lf
,

293 cÚ¡ 
dex
 );

296 (*
_tx_desc
èÐ
dwmac_commÚ_cÚxt
 *
£lf
 );

299 (*
»Ëa£_rx_bufs
èÐ
dwmac_commÚ_cÚxt
 *
£lf
 );

302 
mbuf
 *(*
®loc_d©a_buf
)Ð
dwmac_commÚ_cÚxt
 *
£lf
 );

305 (*
»Ëa£_tx_bufs
èÐ
dwmac_commÚ_cÚxt
 *
£lf
 );

308 (*
´¬e_tx_desc
) (

309 
dwmac_commÚ_cÚxt
 *
£lf
,

310 cÚ¡ 
idx
,

311 cÚ¡ 
boÞ
 
is_f¡
,

312 cÚ¡ 
size_t
 
Ën
,

313 cÚ¡ *
pd©a
 );

316 (*
»Ëa£_tx_owÃrsh
) (

317 
dwmac_commÚ_cÚxt
 *
£lf
,

318 cÚ¡ 
idx_tx
 );

319 
boÞ
 (*
am_i_tx_owÃr
) (

320 
dwmac_commÚ_cÚxt
 *
£lf
,

321 cÚ¡ 
idx_tx
 );

324 (*
þo£_tx_desc
) (

325 
dwmac_commÚ_cÚxt
 *
£lf
,

326 cÚ¡ 
idx_tx
 );

329 (*
»Ëa£_tx_desc
) (

330 
dwmac_commÚ_cÚxt
 *
£lf
,

331 cÚ¡ 
idx_tx
 );

334 (*
g_tx_ls
) (

335 
dwmac_commÚ_cÚxt
 *
£lf
,

336 cÚ¡ 
idx_tx
 );

339 (*
tx_¡©us
) (

340 
dwmac_commÚ_cÚxt
 *
£lf
,

341 cÚ¡ 
idx_tx
 );

344 
boÞ
 (*
am_i_rx_owÃr
) (

345 
dwmac_commÚ_cÚxt
 *
£lf
,

346 cÚ¡ 
desc_idx
 );

349 
size_t
 (*
g_rx_äame_Ën
) (

350 
dwmac_commÚ_cÚxt
 *
£lf
,

351 cÚ¡ 
desc_idx
 );

354 
dwmac_commÚ_rx_äame_¡©us
 (*
rx_¡©us
) (

355 
dwmac_commÚ_cÚxt
 *
£lf
,

356 cÚ¡ 
desc_idx
 );

357 
boÞ
 (*
is_f¡_rx_£gmt
) (

358 
dwmac_commÚ_cÚxt
 *
£lf
,

359 cÚ¡ 
desütÜ_dex
 );

360 
boÞ
 (*
is_Ï¡_rx_£gmt
) (

361 
dwmac_commÚ_cÚxt
 *
£lf
,

362 cÚ¡ 
desütÜ_dex
 );

363 (*
´t_tx_desc
) (

364 vÞ©
dwmac_desc
 *
p
,

365 cÚ¡ 
couÁ
 );

366 (*
´t_rx_desc
) (

367 vÞ©
dwmac_desc
 *
p
,

368 cÚ¡ 
couÁ
 );

371 #ifdeà
__ýlu¥lus


	@src/libchip/network/dwmac-core.c

24 
	~"dwmac-cÜe.h
"

25 
	~"dwmac-commÚ.h
"

26 
	~"dwmac-»gs.h
"

28 #undeà
DWMAC_CORE_DEBUG


29 #ifdeà
DWMAC_CORE_DEBUG


30 
	#DWMAC_CORE_PRINT_DBG
Ð
fmt
, 
¬gs
 ... ) 
	`´tk
Ðfmt, ##rg )

	)

32 
	#DWMAC_CORE_PRINT_DBG
Ð
fmt
, 
¬gs
 ... ) dØ{ }  0 )

	)

36 
	#DWMAC_CORE_INTR_ENABLE_DEFAULT_MASK_RX
 \

38 
DMAGRP_INTERRUPT_ENABLE_NIE
 \

39 | 
DMAGRP_INTERRUPT_ENABLE_RIE
 \

40 )

	)

41 
	#DWMAC_CORE_INTR_ENABLE_DEFAULT_MASK_TX
 \

43 
DMAGRP_INTERRUPT_ENABLE_NIE
 \

44 | 
DMAGRP_INTERRUPT_ENABLE_FBE
 \

45 | 
DMAGRP_INTERRUPT_ENABLE_UNE
 \

46 | 
DMAGRP_INTERRUPT_ENABLE_AIE
 \

47 )

	)

49 
	#DWMAC_CORE_INTR_ENABLE_ALL_MASK_TX
 \

51 
DWMAC_CORE_INTR_ENABLE_DEFAULT_MASK_TX
 \

52 | 
DMAGRP_INTERRUPT_ENABLE_TIE
 \

53 )

	)

55 
	#DWMAC_CORE_INTR_STATUS_DEFAULT_MASK_RX
 \

57 
DMAGRP_STATUS_NIS
 \

58 | 
DMAGRP_STATUS_RI
 \

59 )

	)

60 
	#DWMAC_CORE_INTR_STATUS_DEFAULT_MASK_TX
 \

62 
DMAGRP_STATUS_NIS
 \

63 | 
DMAGRP_STATUS_TI
 \

64 | 
DMAGRP_STATUS_FBI
 \

65 | 
DMAGRP_STATUS_UNF
 \

66 | 
DMAGRP_STATUS_AIS
 \

67 )

	)

70 
	$dwmac_cÜe_dma_»¡¬t_tx
Ð
dwmac_commÚ_cÚxt
 *
£lf
 )

72 
£lf
->
dmag½
->
ªsm_pÞl_demªd
 = 1;

73 
	}
}

75 
	$dwmac_cÜe_abË_dma_q_tx_deçuÉ
Ð
dwmac_commÚ_cÚxt
 *
£lf
 )

77 
£lf
->
dmag½
->
¼u±_abË
 |ð
DWMAC_CORE_INTR_ENABLE_DEFAULT_MASK_TX
;

78 
	}
}

80 
	$dwmac_cÜe_abË_dma_q_tx_ªsmd
Ð
dwmac_commÚ_cÚxt
 *
£lf
 )

82 
£lf
->
dmag½
->
¼u±_abË
 |ð
DMAGRP_INTERRUPT_ENABLE_TIE
;

83 
	}
}

85 
	$dwmac_cÜe_abË_dma_q_rx
Ð
dwmac_commÚ_cÚxt
 *
£lf
 )

87 
£lf
->
dmag½
->
¼u±_abË
 |ð
DWMAC_CORE_INTR_ENABLE_DEFAULT_MASK_RX
;

88 
	}
}

90 
	$dwmac_cÜe_di§bË_dma_q_tx_®l
Ð
dwmac_commÚ_cÚxt
 *
£lf
 )

92 
£lf
->
dmag½
->
¼u±_abË
 &ð~
DWMAC_CORE_INTR_ENABLE_ALL_MASK_TX
;

93 
	}
}

95 
	$dwmac_cÜe_di§bË_dma_q_tx_ªsmd
Ð
dwmac_commÚ_cÚxt
 *
£lf
 )

97 
£lf
->
dmag½
->
¼u±_abË
 &ð~
DMAGRP_INTERRUPT_ENABLE_TIE
;

98 
	}
}

100 
	$dwmac_cÜe_»£t_dma_q_¡©us_tx
Ð
dwmac_commÚ_cÚxt
 *
£lf
 )

102 
£lf
->
dmag½
->
¡©us
 = 
DWMAC_CORE_INTR_STATUS_DEFAULT_MASK_TX
;

103 
	}
}

105 
	$dwmac_cÜe_»£t_dma_q_¡©us_rx
Ð
dwmac_commÚ_cÚxt
 *
£lf
 )

107 
£lf
->
dmag½
->
¡©us
 = 
DWMAC_CORE_INTR_STATUS_DEFAULT_MASK_RX
;

108 
	}
}

110 
	$dwmac_cÜe_di§bË_dma_q_rx
Ð
dwmac_commÚ_cÚxt
 *
£lf
 )

112 
£lf
->
dmag½
->
¼u±_abË
 &ð~
DWMAC_CORE_INTR_ENABLE_DEFAULT_MASK_RX
;

113 
	}
}

115 
	$dwmac_cÜe_dma_¡¬t_tx
Ð
dwmac_commÚ_cÚxt
 *
£lf
 )

117 
£lf
->
dmag½
->
Ý©iÚ_mode
 |ð
DMAGRP_OPERATION_MODE_ST
;

118 
	}
}

120 
	$dwmac_cÜe_dma_¡Ý_tx
Ð
dwmac_commÚ_cÚxt
 *
£lf
 )

122 
£lf
->
dmag½
->
Ý©iÚ_mode
 &ð~
DMAGRP_OPERATION_MODE_ST
;

123 
	}
}

125 
	$dwmac_cÜe_dma_¡¬t_rx
Ð
dwmac_commÚ_cÚxt
 *
£lf
 )

127 
£lf
->
dmag½
->
Ý©iÚ_mode
 |ð
DMAGRP_OPERATION_MODE_SR
;

128 
	}
}

130 
	$dwmac_cÜe_dma_¡Ý_rx
Ð
dwmac_commÚ_cÚxt
 *
£lf
 )

132 
£lf
->
dmag½
->
Ý©iÚ_mode
 &ð~
DMAGRP_OPERATION_MODE_SR
;

133 
	}
}

135 
	$dwmac_cÜe_dma_»¡¬t_rx
Ð
dwmac_commÚ_cÚxt
 *
£lf
 )

137 
£lf
->
dmag½
->
»ûive_pÞl_demªd
 = 1;

138 
	}
}

140 #ifdeà
DWMAC_CORE_DEBUG


141 
	$show_tx_´oûss_¡©e
ÐcÚ¡ 
ut32_t
 
¡©us
 )

143 cÚ¡ 
ut32_t
 
STATE
 = 
	`DMAGRP_STATUS_TS_GET
Ð
¡©us
 );

146  
STATE
 ) {

148 
	`DWMAC_CORE_PRINT_DBG
( "- TX (Stopped): Reset or Stop command\n" );

151 
	`DWMAC_CORE_PRINT_DBG
( "- TX (Running):Fetchinghe Tx desc\n" );

154 
	`DWMAC_CORE_PRINT_DBG
( "- TX (Running): Waiting fornd ofx\n" );

157 
	`DWMAC_CORE_PRINT_DBG
( "- TX (Running): Readinghe data "

161 
	`DWMAC_CORE_PRINT_DBG
( "- TX (Suspended): Tx Buff Underflow "

165 
	`DWMAC_CORE_PRINT_DBG
( "- TX (Running): Closing Tx descriptor\n" );

170 
	}
}

172 
	$show_rx_´oûss_¡©e
ÐcÚ¡ 
ut32_t
 
¡©us
 )

174 cÚ¡ 
ut32_t
 
STATE
 = 
	`DMAGRP_STATUS_RS_GET
Ð
¡©us
 );

177  
STATE
 ) {

179 
	`DWMAC_CORE_PRINT_DBG
( "- RX (Stopped): Reset or Stop command\n" );

182 
	`DWMAC_CORE_PRINT_DBG
( "- RX (Running): Fetchinghe Rx desc\n" );

185 
	`DWMAC_CORE_PRINT_DBG
( "- RX (Running):Checking fornd ofkt\n" );

188 
	`DWMAC_CORE_PRINT_DBG
( "- RX (Running): Waiting for Rxkt\n" );

191 
	`DWMAC_CORE_PRINT_DBG
( "- RX (Suspended): Unavailable Rx buf\n" );

194 
	`DWMAC_CORE_PRINT_DBG
( "- RX (Running): Closing Rx descriptor\n" );

197 
	`DWMAC_CORE_PRINT_DBG
( "- RX(Running): Flushinghe current frame"

201 
	`DWMAC_CORE_PRINT_DBG
( "- RX (Running): Queuinghe Rx frame"

207 
	}
}

210 
	#show_tx_´oûss_¡©e
Ð
¡©us
 )

	)

211 
	#show_rx_´oûss_¡©e
Ð
¡©us
 )

	)

214 
	$dwmac_cÜe_dma_¼u±
Ð*
¬g
 )

216 
dwmac_commÚ_cÚxt
 *
£lf
 = (dwmac_commÚ_cÚx*è
¬g
;

217 
dwmac_commÚ_dma_q_couÁs
 *
couÁ
 = &
£lf
->
¡©s
.
dma_q_couÁs
;

218 
¹ems_evt_£t
 
evts_»ûive
 = 0;

219 
¹ems_evt_£t
 
evts_ªsm
 = 0;

222 
ut32_t
 
q_¡©us
 = 
£lf
->
dmag½
->
¡©us
 & sf->dmag½->
¼u±_abË
;

223 
ut32_t
 
q_hªdËd
 = 0;

224 
ut32_t
 
q_di§bË
 = 0;

227 
	`DWMAC_CORE_PRINT_DBG
Ð"%s: [CSR5: 0x%08x]\n", 
__func__
, 
q_¡©us
 );

230 
	`show_tx_´oûss_¡©e
Ð
£lf
->
dmag½
->
¡©us
 );

231 
	`show_rx_´oûss_¡©e
Ð
£lf
->
dmag½
->
¡©us
 );

234 iàÐ
q_¡©us
 & 
DMAGRP_STATUS_AIS
 ) {

235 
	`DWMAC_CORE_PRINT_DBG
( "CSR5[15] DMA ABNORMAL IRQ: " );

237 iàÐ
q_¡©us
 & 
DMAGRP_STATUS_UNF
 ) {

238 
	`DWMAC_CORE_PRINT_DBG
( "transmit underflow\n" );

239 
evts_ªsm
 |ð
DWMAC_COMMON_EVENT_TX_BUMP_UP_DMA_THRESHOLD
;

240 
q_hªdËd
 |ð
DMAGRP_STATUS_UNF
;

241 
q_di§bË
 |ð
DMAGRP_INTERRUPT_ENABLE_UNE
;

242 ++
couÁ
->
tx_undæow
;

245 iàÐ
q_¡©us
 & 
DMAGRP_STATUS_TJT
 ) {

246 
	`DWMAC_CORE_PRINT_DBG
( "transmit jabber\n" );

247 
q_hªdËd
 |ð
DMAGRP_STATUS_TJT
;

248 ++
couÁ
->
tx_jabb
;

251 iàÐ
q_¡©us
 & 
DMAGRP_STATUS_OVF
 ) {

252 
	`DWMAC_CORE_PRINT_DBG
( "recv overflow\n" );

253 
q_hªdËd
 |ð
DMAGRP_STATUS_OVF
;

254 ++
couÁ
->
rx_ovæow
;

257 iàÐ
q_¡©us
 & 
DMAGRP_STATUS_TU
 ) {

258 
	`DWMAC_CORE_PRINT_DBG
( "transmit buffer unavailable\n" );

259 
q_hªdËd
 |ð
DMAGRP_STATUS_TU
;

260 ++
couÁ
->
tx_buf_uÇv
;

263 iàÐ
q_¡©us
 & 
DMAGRP_STATUS_RU
 ) {

264 
	`DWMAC_CORE_PRINT_DBG
( "receive buffer unavailable\n" );

265 
q_hªdËd
 |ð
DMAGRP_STATUS_RU
;

266 ++
couÁ
->
rx_buf_uÇv
;

269 iàÐ
q_¡©us
 & 
DMAGRP_STATUS_RPS
 ) {

270 
	`DWMAC_CORE_PRINT_DBG
( "receiverocess stopped\n" );

271 
q_hªdËd
 |ð
DMAGRP_STATUS_RPS
;

272 ++
couÁ
->
rx_´oûss_¡Ý³d
;

275 iàÐ
q_¡©us
 & 
DMAGRP_STATUS_RWT
 ) {

276 
	`DWMAC_CORE_PRINT_DBG
( "receive watchdog\n" );

277 
q_hªdËd
 |ð
DMAGRP_STATUS_RWT
;

278 ++
couÁ
->
rx_w©chdog
;

281 iàÐ
q_¡©us
 & 
DMAGRP_STATUS_ETI
 ) {

282 
	`DWMAC_CORE_PRINT_DBG
( "transmitarly interrupt\n" );

283 
q_hªdËd
 |ð
DMAGRP_STATUS_ETI
;

284 ++
couÁ
->
tx_¾y
;

287 iàÐ
q_¡©us
 & 
DMAGRP_STATUS_ERI
 ) {

288 
	`DWMAC_CORE_PRINT_DBG
( "receivearly interrupt\n" );

289 
q_hªdËd
 |ð
DMAGRP_STATUS_ERI
;

290 ++
couÁ
->
rx_¾y
;

293 iàÐ
q_¡©us
 & 
DMAGRP_STATUS_TPS
 ) {

294 
	`DWMAC_CORE_PRINT_DBG
( "transmitrocess stopped\n" );

295 
evts_ªsm
 |ð
DWMAC_COMMON_EVENT_TASK_INIT
;

296 
q_hªdËd
 |ð
DMAGRP_STATUS_TPS
;

297 
q_di§bË
 |ð
DMAGRP_INTERRUPT_ENABLE_TSE
;

298 ++
couÁ
->
tx_´oûss_¡Ý³d
;

301 iàÐ
q_¡©us
 & 
DMAGRP_STATUS_FBI
 ) {

302 
	`DWMAC_CORE_PRINT_DBG
( "fatal busrror\n" );

303 
evts_ªsm
 |ð
DWMAC_COMMON_EVENT_TASK_INIT
;

304 
q_hªdËd
 |ð
DMAGRP_STATUS_FBI
;

305 
q_di§bË
 |ð
DMAGRP_INTERRUPT_ENABLE_FBE
;

306 ++
couÁ
->
çl_bus_rÜ
;

309 
q_hªdËd
 |ð
DMAGRP_STATUS_AIS
;

313 iàÐ
q_¡©us
 & 
DMAGRP_STATUS_NIS
 ) {

315 iàÐ
q_¡©us
 & 
DMAGRP_STATUS_TI
 ) {

316 
evts_ªsm
 |ð
DWMAC_COMMON_EVENT_TX_FRAME_TRANSMITTED
;

317 
q_hªdËd
 |ð
DMAGRP_STATUS_TI
;

318 
q_di§bË
 |ð
DMAGRP_INTERRUPT_ENABLE_TIE
;

319 ++
couÁ
->
ªsm
;

323 iàÐ
q_¡©us
 & 
DMAGRP_STATUS_RI
 ) {

324 
evts_»ûive
 |ð
DWMAC_COMMON_EVENT_RX_FRAME_RECEIVED
;

325 
q_hªdËd
 |ð
DMAGRP_STATUS_RI
;

326 
q_di§bË
 |ð
DMAGRP_INTERRUPT_ENABLE_RIE
;

327 ++
couÁ
->
»ûive
;

330 
q_hªdËd
 |ð
DMAGRP_STATUS_NIS
;

334 iàÐ
q_¡©us


335 & ( 
DMAGRP_STATUS_GMI
 | 
DMAGRP_STATUS_GLI
 ) ) {

336 
	`DWMAC_CORE_PRINT_DBG
Ð"%s: uÃx³ùed stu %08x\n", 
__func__
,

337 
q_¡©us
 );

339 iàÐ
q_¡©us
 & 
DMAGRP_STATUS_GMI
 ) {

340 
q_hªdËd
 |ð
DMAGRP_STATUS_GMI
;

341 ++
couÁ
->
unhªdËd
;

344 iàÐ
q_¡©us
 & 
DMAGRP_STATUS_GLI
 ) {

345 
q_hªdËd
 |ð
DMAGRP_STATUS_GLI
;

346 ++
couÁ
->
unhªdËd
;

351 iàÐÐ
q_¡©us
 & 0x1FFCF ) !ð
q_hªdËd
 ) {

352 ++
couÁ
->
unhªdËd
;

357 
£lf
->
dmag½
->
¼u±_abË
 &ð~
q_di§bË
;

360 
£lf
->
dmag½
->
¡©us
 = 
q_hªdËd
;

363 iàÐ
evts_»ûive
 != 0 ) {

364 (è
	`¹ems_bsdÃt_evt_£nd
Ð
£lf
->
sk_id_rx
, 
evts_»ûive
 );

368 iàÐ
evts_ªsm
 != 0 ) {

369 (è
	`¹ems_bsdÃt_evt_£nd
Ð
£lf
->
sk_id_tx
, 
evts_ªsm
 );

372 
	`DWMAC_CORE_PRINT_DBG
( "\n\n" );

373 
	}
}

375 
	$dwmac_cÜe_dma_æush_tx_fifo
Ð
dwmac_commÚ_cÚxt
 *
£lf
 )

377 
£lf
->
dmag½
->
Ý©iÚ_mode
 |ð
DMAGRP_OPERATION_MODE_FTF
;

380 }  ( 
£lf
->
dmag½
->
Ý©iÚ_mode
 & 
DMAGRP_OPERATION_MODE_FTF
 ) != 0 );

381 
	}
}

383 
	$dwmac_cÜe_£t_mac_addr
(

384 cÚ¡ 
ut8_t
 
addr
[6],

385 vÞ©
ut32_t
 *
»g_high
,

386 vÞ©
ut32_t
 *
»g_low
 )

388 
ut32_t
 
d©a
 = 
	`MAC_HIGH_ADDRHI
ÐÐ
addr
[5] << 8 ) |ddr[4] );

395 
d©a
 |ð
MAC_HIGH_AE
;

396 *
»g_high
 = 
d©a
;

398 
d©a
 =

399 Ð(
ut32_t
è
addr
[3] << 24 )

400 | ( (
ut32_t
è
addr
[2] << 16 )

401 | ( (
ut32_t
è
addr
[1] << 8 )

402 | 
addr
[0];

403 *
»g_low
 = 
d©a
;

404 
	}
}

407 
	$dwmac_cÜe_£t_mac
(

408 
dwmac_commÚ_cÚxt
 *
£lf
,

409 cÚ¡ 
boÞ
 
abË
 )

411 
ut32_t
 
v®ue
 = 
£lf
->
macg½
->
mac_cÚfigu¿tiÚ
;

414 iàÐ
abË
 ) {

415 
v®ue
 |ð
MACGRP_MAC_CONFIGURATION_RE
 | 
MACGRP_MAC_CONFIGURATION_TE
;

417 
v®ue
 &ð~Ð
MACGRP_MAC_CONFIGURATION_RE
 | 
MACGRP_MAC_CONFIGURATION_TE
 );

420 
£lf
->
macg½
->
mac_cÚfigu¿tiÚ
 = 
v®ue
;

421 
	}
}

	@src/libchip/network/dwmac-core.h

25 #iâdeà
DWMAC_CORE_H_


26 
	#DWMAC_CORE_H_


	)

28 
	~<¡dt.h
>

29 
	~"dwmac-commÚ.h
"

31 #ifdeà
__ýlu¥lus


35 
dwmac_cÜe_£t_mac_addr
(

36 cÚ¡ 
ut8_t
 
addr
[6],

37 vÞ©
ut32_t
 *
»g_high
,

38 vÞ©
ut32_t
 *
»g_low
 );

40 
dwmac_cÜe_£t_mac
(

41 
dwmac_commÚ_cÚxt
 *
£lf
,

42 cÚ¡ 
boÞ
 
abË
 );

44 
dwmac_cÜe_dma_¡¬t_tx
Ð
dwmac_commÚ_cÚxt
 *
£lf
 );

46 
dwmac_cÜe_dma_¡Ý_tx
Ð
dwmac_commÚ_cÚxt
 *
£lf
 );

48 
dwmac_cÜe_dma_¡¬t_rx
Ð
dwmac_commÚ_cÚxt
 *
£lf
 );

50 
dwmac_cÜe_dma_¡Ý_rx
Ð
dwmac_commÚ_cÚxt
 *
£lf
 );

52 
dwmac_cÜe_dma_»¡¬t_rx
Ð
dwmac_commÚ_cÚxt
 *
£lf
 );

54 
dwmac_cÜe_dma_»¡¬t_tx
Ð
dwmac_commÚ_cÚxt
 *
£lf
 );

56 
dwmac_cÜe_abË_dma_q_rx
Ð
dwmac_commÚ_cÚxt
 *
£lf
 );

58 
dwmac_cÜe_abË_dma_q_tx_deçuÉ
Ð
dwmac_commÚ_cÚxt
 *
£lf
 );

60 
dwmac_cÜe_abË_dma_q_tx_ªsmd
Ð
dwmac_commÚ_cÚxt
 *
£lf
 );

62 
dwmac_cÜe_di§bË_dma_q_tx_®l
Ð
dwmac_commÚ_cÚxt
 *
£lf
 );

64 
dwmac_cÜe_di§bË_dma_q_tx_ªsmd
Ð
dwmac_commÚ_cÚxt
 *
£lf
 );

66 
dwmac_cÜe_di§bË_dma_q_rx
Ð
dwmac_commÚ_cÚxt
 *
£lf
 );

68 
dwmac_cÜe_»£t_dma_q_¡©us_tx
Ð
dwmac_commÚ_cÚxt
 *
£lf
 );

70 
dwmac_cÜe_»£t_dma_q_¡©us_rx
Ð
dwmac_commÚ_cÚxt
 *
£lf
 );

72 
dwmac_cÜe_dma_¼u±
Ð*
¬g
 );

74 
dwmac_cÜe_dma_æush_tx_fifo
Ð
dwmac_commÚ_cÚxt
 *
£lf
 );

76 #ifdeà
__ýlu¥lus


	@src/libchip/network/dwmac-desc-com.c

24 
	~"dwmac-desc-com.h
"

26 #undeà
DWMAC_DESC_COM_DEBUG


27 #ifdeà
DWMAC_DESC_COM_DEBUG


28 
	#DWMAC_DESC_COM_PRINT_DBG
Ð
fmt
, 
¬gs
 ... ) 
	`´tk
Ðfmt, ##rg )

	)

30 
	#DWMAC_DESC_COM_PRINT_DBG
Ð
fmt
, 
¬gs
 ... ) dØ{ }  0 )

	)

33 
mbuf
 *
	$dwmac_desc_com_Ãw_mbuf
Ð
dwmac_commÚ_cÚxt
 *
£lf
 ) {

34 
iâ
 *
iå
 = &
£lf
->
¬pcom
.
ac_if
;

35 
mbuf
 *
m
 = 
NULL
;

38 
	`MGETHDR
Ð
m
, 
M_DONTWAIT
, 
MT_DATA
 );

40 iàÐ
m
 !ð
NULL
 ) {

41 
	`MCLGET
Ð
m
, 
M_DONTWAIT
 );

43 iàÐ
m
->
m_ext
.
ext_buf
 !ð
NULL
 ) {

44 iàÐÐ
m
->
m_æags
 & 
M_EXT
 ) != 0 ) {

46 
m
->
m_pkthdr
.
rcvif
 = 
iå
;

49 
m
->
m_d©a
 = 
	`mtod
Ðm, * ) + 
ETHER_ALIGN
;

50  
m
;

52 
	`m_ä
Ð
m
 );

55 
	`m_ä
Ð
m
 );

59  
NULL
;

60 
	}
}

	@src/libchip/network/dwmac-desc-com.h

25 #iâdeà
DWMAC_DESC_COM_H_


26 
	#DWMAC_DESC_COM_H_


	)

28 
	~"dwmac-commÚ.h
"

29 
	~<sys/queue.h
>

31 #ifdeà
__ýlu¥lus


35 
	#DWMAC_DESC_COM_HW_CRC_BYTES
 4

	)

36 
	#DWMAC_DESC_COM_BUF_SIZE
 ( 
ETHER_MAX_LEN
 + 
DWMAC_DESC_COM_HW_CRC_BYTES
 )

	)

38 
mbuf
 *
dwmac_desc_com_Ãw_mbuf
Ð
dwmac_commÚ_cÚxt
 *
£lf
 );

40 #ifdeà
__ýlu¥lus


	@src/libchip/network/dwmac-desc-enh.c

24 
	~<as£¹.h
>

25 
	~<¡dlib.h
>

26 
	~<¡dio.h
>

27 
	~"dwmac-commÚ.h
"

28 
	~"dwmac-desc-com.h
"

29 
	~"dwmac-cÜe.h
"

30 
	~<sys/queue.h
>

32 #undeà
DWMAC_DESC_ENH_DEBUG


33 #ifdeà
DWMAC_DESC_ENH_DEBUG


34 
	#DWMAC_DESC_ENH_PRINT_DBG
Ð
fmt
, 
¬gs
 ... ) 
	`´tk
Ðfmt, ##rg )

	)

36 
	#DWMAC_DESC_ENH_PRINT_DBG
Ð
fmt
, 
¬gs
 ... ) dØ{ }  0 )

	)

40 
	mDWMAC_IP_PAYLOAD_TYPE_UNKNOWN
,

41 
	mDWMAC_IP_PAYLOAD_TYPE_UDP
,

42 
	mDWMAC_IP_PAYLOAD_TYPE_TCP
,

43 
	mDWMAC_IP_PAYLOAD_TYPE_ICMP


44 } 
	tdwmac__·ylßd_ty³
;

46 
	$dwmac_desc_h_rx_£t_Ú_rg_cha
(

47 vÞ©
dwmac_desc_ext
 *
p
, 
d
 )

51 
p
->
x
.
des0_3
.
des1
 = 
	`DWMAC_DESC_ERX_DES1_RECEIVE_BUFF_2_SIZE_SET
(

52 
p
->
x
.
des0_3
.
des1
, 0

54 
p
->
x
.
des0_3
.
des3
 = (
ut32_t
è
NULL
;

56 iàÐ
d
 )

57 
p
->
x
.
des0_3
.
des1
 |ð
DWMAC_DESC_ERX_DES1_RECEIVE_END_OF_RING
;

58 
	}
}

60 
	$dwmac_desc_h_tx_£t_Ú_rg_cha
(

61 vÞ©
dwmac_desc_ext
 *
p
, cÚ¡ 
boÞ
 
d
 )

63 iàÐ
d
 )

64 
p
->
x
.
des0_3
.
des0
 |ð
DWMAC_DESC_ETX_DES0_TRANSMIT_END_OF_RING
;

65 
	}
}

67 
	$dwmac_desc_h_£t_tx_desc_Ën
(

68 vÞ©
dwmac_desc_ext
 *
p_h
, 
size_t
 
Ën
 )

70 
p_h
->
x
.
des0_3
.
des1
 = 
	`DWMAC_DESC_ETX_DES1_TRANSMIT_BUFFER_1_SIZE_SET
(

71 
p_h
->
x
.
des0_3
.
des1
,

72 
Ën


74 
	}
}

76 
boÞ
 
	$dwmac_desc_h_is_gÁ_äame
ÐcÚ¡ 
ut32_t
 
des0
 )

79 Ð
des0


80 & 
DWMAC_DESC_ERX_DES0_TIMESTAMP_AVAIL_OR_CHECKSUM_ERROR_OR_GIANT_FRAME


83 
	}
}

85 
boÞ
 
	$dwmac_desc_h_is_udp_·ylßd
ÐcÚ¡ 
ut32_t
 
des4
 )

88 
	`DWMAC_DESC_EXT_ERX_DES4_IP_PAYLOAD_TYPE_GET
Ð
des4
 )

89 =ð
DWMAC_IP_PAYLOAD_TYPE_UDP


91 
	}
}

93 
boÞ
 
	$dwmac_desc_h_is_tý_·ylßd
ÐcÚ¡ 
ut32_t
 
des4
 )

96 
	`DWMAC_DESC_EXT_ERX_DES4_IP_PAYLOAD_TYPE_GET
Ð
des4
 )

97 =ð
DWMAC_IP_PAYLOAD_TYPE_TCP


99 
	}
}

101 
boÞ
 
	$dwmac_desc_h_is_icmp_·ylßd
ÐcÚ¡ 
ut32_t
 
des4
 )

104 
	`DWMAC_DESC_EXT_ERX_DES4_IP_PAYLOAD_TYPE_GET
Ð
des4
 )

105 =ð
DWMAC_IP_PAYLOAD_TYPE_ICMP


107 
	}
}

109 
dwmac_commÚ_rx_äame_¡©us
 
	$dwmac_desc_h_cÛ_¡©us
(

110 vÞ©
dwmac_desc_ext
 *
p_h
 )

112 
dwmac_commÚ_rx_äame_¡©us
 
»t
 = 
DWMAC_COMMON_RX_FRAME_STATUS_GOOD
;

113 cÚ¡ 
ut32_t
 
DES0
 = 
p_h
->
x
.
des0_3
.
des0
;

114 cÚ¡ 
ut32_t
 
DES4
 = 
p_h
->
x
.
des4
;

117 iàÐÐ
DES0
 & 
DWMAC_DESC_ERX_DES0_EXT_STATUS_AVAIL_OR_RX_MAC_ADDR_STATUS
 )

119 iàÐ!
	`dwmac_desc_h_is_gÁ_äame
Ð
DES0
 )

120 && ( 
DES0
 & 
DWMAC_DESC_ERX_DES0_FREAME_TYPE
 ) == 0

121 && ( 
DES4
 & 
DWMAC_DESC_EXT_ERX_DES4_IPV6_PACKET_RECEIVED
 ) == 0

122 && ( 
DES4
 & 
DWMAC_DESC_EXT_ERX_DES4_IPV4_PACKET_RECEIVED
 ) == 0

123 && ( 
DES4
 & 
DWMAC_DESC_EXT_ERX_DES4_IP_PAYLOAD_ERROR
 ) == 0

124 && ( 
DES4
 & 
DWMAC_DESC_EXT_ERX_DES4_IP_HEADER_ERROR
 ) == 0 ) {

125 
	`DWMAC_DESC_ENH_PRINT_DBG
( "RX Des0 status: IEEE 802.3 Type frame.\n" );

126 
»t
 = 
DWMAC_COMMON_RX_FRAME_STATUS_LLC_SNAP
;

127 } iàÐÐÐ
DES4
 & 
DWMAC_DESC_EXT_ERX_DES4_IPV6_PACKET_RECEIVED
 ) != 0

128 || ( 
DES4
 & 
DWMAC_DESC_EXT_ERX_DES4_IPV4_PACKET_RECEIVED
 )

130 && 
	`dwmac_desc_h_is_gÁ_äame
Ð
DES0
 ) ) {

131 
	`DWMAC_DESC_ENH_PRINT_DBG
( "RX Des0 status: IPv4/6 No CSUM Error.\n" );

132 
»t
 = 
DWMAC_COMMON_RX_FRAME_STATUS_GOOD
;

133 } iàÐÐÐ
DES4
 & 
DWMAC_DESC_EXT_ERX_DES4_IPV6_PACKET_RECEIVED
 ) != 0

134 || ( 
DES4
 & 
DWMAC_DESC_EXT_ERX_DES4_IPV4_PACKET_RECEIVED
 )

136 && ( 
DES4
 & 
DWMAC_DESC_EXT_ERX_DES4_IP_PAYLOAD_ERROR
 ) != 0 ) {

137 
	`DWMAC_DESC_ENH_PRINT_DBG
( "RX Des0 status: IPv4/6 Payload Error.\n" );

138 
»t
 = 
DWMAC_COMMON_RX_FRAME_STATUS_CSUM_NONE
;

139 } iàÐÐÐ
DES4
 & 
DWMAC_DESC_EXT_ERX_DES4_IPV6_PACKET_RECEIVED
 ) != 0

140 || ( 
DES4
 & 
DWMAC_DESC_EXT_ERX_DES4_IPV4_PACKET_RECEIVED
 )

142 && ( 
DES4
 & 
DWMAC_DESC_EXT_ERX_DES4_IP_HEADER_ERROR
 ) != 0 ) {

143 
	`DWMAC_DESC_ENH_PRINT_DBG
( "RX Des0 status: IPv4/6 Header Error.\n" );

144 
»t
 = 
DWMAC_COMMON_RX_FRAME_STATUS_CSUM_NONE
;

145 } iàÐÐÐ
DES4
 & 
DWMAC_DESC_EXT_ERX_DES4_IPV6_PACKET_RECEIVED
 ) != 0

146 || ( 
DES4
 & 
DWMAC_DESC_EXT_ERX_DES4_IPV4_PACKET_RECEIVED
 )

148 && ( 
DES4
 & 
DWMAC_DESC_EXT_ERX_DES4_IP_PAYLOAD_ERROR
 ) != 0

149 && ( 
DES4
 & 
DWMAC_DESC_EXT_ERX_DES4_IP_HEADER_ERROR
 ) != 0 ) {

150 
	`DWMAC_DESC_ENH_PRINT_DBG
(

152 
»t
 = 
DWMAC_COMMON_RX_FRAME_STATUS_CSUM_NONE
;

153 } iàÐÐÐ
DES4
 & 
DWMAC_DESC_EXT_ERX_DES4_IPV6_PACKET_RECEIVED
 ) != 0

154 || ( 
DES4
 & 
DWMAC_DESC_EXT_ERX_DES4_IPV4_PACKET_RECEIVED
 )

156 && ( !
	`dwmac_desc_h_is_udp_·ylßd
Ð
DES4
 ) )

157 && ( !
	`dwmac_desc_h_is_tý_·ylßd
Ð
DES4
 ) )

158 && ( !
	`dwmac_desc_h_is_icmp_·ylßd
Ð
DES4
 ) ) ) {

159 
	`DWMAC_DESC_ENH_PRINT_DBG
(

161 
»t
 = 
DWMAC_COMMON_RX_FRAME_STATUS_DISCARD
;

162 } iàÐÐ
DES4
 & 
DWMAC_DESC_EXT_ERX_DES4_IPV6_PACKET_RECEIVED
 ) == 0

163 && ( 
DES4
 & 
DWMAC_DESC_EXT_ERX_DES4_IPV4_PACKET_RECEIVED
 )

165 
	`DWMAC_DESC_ENH_PRINT_DBG
( "RX Des0 status: No IPv4, IPv6 frame.\n" );

166 
»t
 = 
DWMAC_COMMON_RX_FRAME_STATUS_DISCARD
;

169 
ut32_t
 
¡©us
 = (

170 (
ut32_t
èÐ
	`dwmac_desc_h_is_gÁ_äame
Ð
DES0
 ) << 2U )

171 | (
ut32_t
èÐÐÐ
DES0
 & 
DWMAC_DESC_ERX_DES0_FREAME_TYPE
 )

186 iàÐ
¡©us
 == 0x0 ) {

187 
	`DWMAC_DESC_ENH_PRINT_DBG
( "RX Des0 status: IEEE 802.3 Type frame.\n" );

188 
»t
 = 
DWMAC_COMMON_RX_FRAME_STATUS_LLC_SNAP
;

189 } iàÐ
¡©us
 == 0x4 ) {

190 
	`DWMAC_DESC_ENH_PRINT_DBG
( "RX Des0 status: IPv4/6 No CSUMrrorS.\n" );

191 
»t
 = 
DWMAC_COMMON_RX_FRAME_STATUS_GOOD
;

192 } iàÐ
¡©us
 == 0x5 ) {

193 
	`DWMAC_DESC_ENH_PRINT_DBG
( "RX Des0 status: IPv4/6 Payload Error.\n" );

194 
»t
 = 
DWMAC_COMMON_RX_FRAME_STATUS_CSUM_NONE
;

195 } iàÐ
¡©us
 == 0x6 ) {

196 
	`DWMAC_DESC_ENH_PRINT_DBG
( "RX Des0 status: IPv4/6 Header Error.\n" );

197 
»t
 = 
DWMAC_COMMON_RX_FRAME_STATUS_CSUM_NONE
;

198 } iàÐ
¡©us
 == 0x7 ) {

199 
	`DWMAC_DESC_ENH_PRINT_DBG
(

201 
»t
 = 
DWMAC_COMMON_RX_FRAME_STATUS_CSUM_NONE
;

202 } iàÐ
¡©us
 == 0x1 ) {

203 
	`DWMAC_DESC_ENH_PRINT_DBG
(

205 
»t
 = 
DWMAC_COMMON_RX_FRAME_STATUS_DISCARD
;

206 } iàÐ
¡©us
 == 0x3 ) {

207 
	`DWMAC_DESC_ENH_PRINT_DBG
( "RX Des0 status: No IPv4, IPv6 frame.\n" );

208 
»t
 = 
DWMAC_COMMON_RX_FRAME_STATUS_DISCARD
;

212  
»t
;

213 
	}
}

215 
	$dwmac_desc_h_g_tx_¡©us
(

216 
dwmac_commÚ_cÚxt
 *
£lf
,

217 cÚ¡ 
idx_tx
 )

219 
»t
 = 0;

220 vÞ©
dwmac_desc_ext
 *
dma_tx
 =

221 (vÞ©
dwmac_desc_ext
 *è
£lf
->
dma_tx
;

222 vÞ©
dwmac_desc_ext
 *
p_desc
 = &
dma_tx
[
idx_tx
];

223 
dwmac_commÚ_desc_¡©us_couÁs_tx
 *
couÁs
 =

224 &
£lf
->
¡©s
.
desc_¡©us_couÁs_tx
;

227 iàÐÐ
p_desc
->
x
.
des0_3
.
des0
 & 
DWMAC_DESC_ETX_DES0_ERROR_SUMMARY
 ) != 0 ) {

228 
	`DWMAC_DESC_ENH_PRINT_DBG
Ð"DWMAC TX¼Ü... 0x%08x\n", 
p
->
des01
.
x
 );

230 iàÐÐ
p_desc
->
x
.
des0_3
.
des0
 & 
DWMAC_DESC_ETX_DES0_JABBER_TIMEOUT
 )

232 
	`DWMAC_DESC_ENH_PRINT_DBG
( "\tjabber_timeoutrror\n" );

233 ++
couÁs
->
jabb
;

236 iàÐÐ
p_desc
->
x
.
des0_3
.
des0
 & 
DWMAC_DESC_ETX_DES0_FRAME_FLUSHED
 )

238 
	`DWMAC_DESC_ENH_PRINT_DBG
( "\tframe_flushedrror\n" );

239 ++
couÁs
->
äame_æushed
;

240 
	`dwmac_cÜe_dma_æush_tx_fifo
Ð
£lf
 );

243 iàÐÐ
p_desc
->
x
.
des0_3
.
des0
 & 
DWMAC_DESC_ETX_DES0_LOSS_OF_CARRIER
 )

245 
	`DWMAC_DESC_ENH_PRINT_DBG
( "\tloss_carrierrror\n" );

246 ++
couÁs
->
lossÿ¼r
;

249 iàÐÐ
p_desc
->
x
.
des0_3
.
des0
 & 
DWMAC_DESC_ETX_DES0_NO_CARRIER
 )

251 
	`DWMAC_DESC_ENH_PRINT_DBG
( "\tno_carrierrror\n" );

252 ++
couÁs
->
no_ÿ¼r
;

255 iàÐÐ
p_desc
->
x
.
des0_3
.
des0
 & 
DWMAC_DESC_ETX_DES0_EXCESSIVE_COLLISION
 )

257 
	`DWMAC_DESC_ENH_PRINT_DBG
( "\texcessive_collisions\n" );

258 ++
couÁs
->
exûssive_cÞlisiÚs
;

261 iàÐÐ
p_desc
->
x
.
des0_3
.
des0
 & 
DWMAC_DESC_ETX_DES0_EXCESSIVE_DEFERAL
 )

263 
	`DWMAC_DESC_ENH_PRINT_DBG
( "\texcessivex_deferral\n" );

264 ++
couÁs
->
exûssive_deã¼®
;

267 iàÐÐ
p_desc
->
x
.
des0_3
.
des0
 & 
DWMAC_DESC_ETX_DES0_UNDERFLOW_ERROR
 )

269 
	`DWMAC_DESC_ENH_PRINT_DBG
( "\tunderflowrror\n" );

270 
	`dwmac_cÜe_dma_æush_tx_fifo
Ð
£lf
 );

271 ++
couÁs
->
undæow
;

274 iàÐÐ
p_desc
->
x
.
des0_3
.
des0
 & 
DWMAC_DESC_ETX_DES0_IP_HEADER_ERROR
 )

276 
	`DWMAC_DESC_ENH_PRINT_DBG
( "\tTX IP header csumrror\n" );

277 ++
couÁs
->
_hd_rÜ
;

280 iàÐÐ
p_desc
->
x
.
des0_3
.
des0
 & 
DWMAC_DESC_ETX_DES0_IP_PAYLOAD_ERROR
 )

282 
	`DWMAC_DESC_ENH_PRINT_DBG
( "\tAddr/Payload csumrror\n" );

283 ++
couÁs
->
·ylßd_rÜ
;

284 
	`dwmac_cÜe_dma_æush_tx_fifo
Ð
£lf
 );

287 
»t
 = -1;

290 iàÐÐ
p_desc
->
x
.
des0_3
.
des0
 & 
DWMAC_DESC_ETX_DES0_DEFERRED_BIT
 ) != 0 ) {

291 
	`DWMAC_DESC_ENH_PRINT_DBG
( "GMAC TX status:x deferred\n" );

292 ++
couÁs
->
deã¼ed
;

295 iàÐÐ
p_desc
->
x
.
des0_3
.
des0
 & 
DWMAC_DESC_ETX_DES0_VLAN_FRAME
 ) != 0 ) {

296 
	`DWMAC_DESC_ENH_PRINT_DBG
( "GMAC TX status: VLAN frame\n" );

297 ++
couÁs
->
vÏn
;

300  
»t
;

301 
	}
}

303 
dwmac_commÚ_rx_äame_¡©us
 
	$dwmac_desc_h_g_rx_¡©us
(

304 
dwmac_commÚ_cÚxt
 *
£lf
,

305 cÚ¡ 
desc_idx
 )

307 
dwmac_commÚ_desc_¡©us_couÁs_rx
 *
couÁs
 =

308 &
£lf
->
¡©s
.
desc_¡©us_couÁs_rx
;

309 
dwmac_commÚ_rx_äame_¡©us
 
»t
 =

310 
DWMAC_COMMON_RX_FRAME_STATUS_GOOD
;

311 vÞ©
dwmac_desc_ext
 *
dma_rx
 =

312 (vÞ©
dwmac_desc_ext
 *è
£lf
->
dma_rx
;

313 cÚ¡ 
ut32_t
 
DES0
 = 
dma_rx
[
desc_idx
].
x
.
des0_3
.
des0
;

316 iàÐÐ
DES0
 & 
DWMAC_DESC_ERX_DES0_ERROR_SUMMARY
 ) != 0 ) {

317 
	`DWMAC_DESC_ENH_PRINT_DBG
( "GMAC RX Error Summary 0x%08x\n",

318 
DES0
 );

320 iàÐÐ
DES0
 & 
DWMAC_DESC_ERX_DES0_DESCRIPTOR_ERROR
 ) != 0 ) {

321 
	`DWMAC_DESC_ENH_PRINT_DBG
( "\tdescriptorrror\n" );

322 ++
couÁs
->
desütÜ_rÜ
;

325 iàÐÐ
DES0
 & 
DWMAC_DESC_ERX_DES0_OVERFLOW_ERROR
 ) != 0 ) {

326 
	`DWMAC_DESC_ENH_PRINT_DBG
( "\toverflowrror\n" );

327 ++
couÁs
->
ovæow_rÜ
;

330 iàÐ
	`dwmac_desc_h_is_gÁ_äame
Ð
DES0
 ) ) {

331 
	`DWMAC_DESC_ENH_PRINT_DBG
( "\tIPC Csum Error/Giant frame\n" );

332 ++
couÁs
->
gÁ_äame
;

335 iàÐÐ
DES0
 & 
DWMAC_DESC_ERX_DES0_LATE_COLLISION
 ) != 0 ) {

336 
	`DWMAC_DESC_ENH_PRINT_DBG
( "\tlate_collisionrror\n" );

337 ++
couÁs
->
Ï_cÞlisiÚ
;

340 iàÐÐ
DES0
 & 
DWMAC_DESC_ERX_DES0_RECEIVE_WATCHDOG_TIMEOUT
 )

342 
	`DWMAC_DESC_ENH_PRINT_DBG
( "\treceive_watchdogrror\n" );

343 ++
couÁs
->
w©chdog_timeout
;

346 iàÐÐ
DES0
 & 
DWMAC_DESC_ERX_DES0_RECEIVE_ERROR
 ) != 0 ) {

347 
	`DWMAC_DESC_ENH_PRINT_DBG
( "\tReceive Error\n" );

348 ++
couÁs
->
»ûive_rÜ
;

351 iàÐÐ
DES0
 & 
DWMAC_DESC_ERX_DES0_CRC_ERROR
 ) != 0 ) {

352 
	`DWMAC_DESC_ENH_PRINT_DBG
( "\tCRCrror\n" );

353 ++
couÁs
->
üc_rÜ
;

356 
»t
 = 
DWMAC_COMMON_RX_FRAME_STATUS_DISCARD
;

359 iàÐ
»t
 =ð
DWMAC_COMMON_RX_FRAME_STATUS_GOOD
 ) {

364 
»t
 = 
	`dwmac_desc_h_cÛ_¡©us
Ð&
dma_rx
[
desc_idx
] );

367 iàÐÐ
DES0
 & 
DWMAC_DESC_ERX_DES0_DRIBBLE_BIT_ERROR
 ) != 0 ) {

368 
	`DWMAC_DESC_ENH_PRINT_DBG
( "GMAC RX: dribblingrror\n" );

369 ++
couÁs
->
dribbË_b_rÜ
;

372 iàÐÐ
DES0
 & 
DWMAC_DESC_ERX_DES0_SRC_ADDR_FILTER_FAIL
 ) != 0 ) {

373 
	`DWMAC_DESC_ENH_PRINT_DBG
( "GMAC RX : Source Address filter fail\n" );

374 ++
couÁs
->
sourû_addr_ç
;

375 
»t
 = 
DWMAC_COMMON_RX_FRAME_STATUS_DISCARD
;

378 iàÐÐ
DES0
 & 
DWMAC_DESC_ERX_DES0_DEST_ADDR_FILTER_FAIL
 ) != 0 ) {

379 
	`DWMAC_DESC_ENH_PRINT_DBG
( "GMAC RX : Dest Address filter fail\n" );

380 ++
couÁs
->
de¡_addr_ç
;

381 
»t
 = 
DWMAC_COMMON_RX_FRAME_STATUS_DISCARD
;

384 iàÐÐ
DES0
 & 
DWMAC_DESC_ERX_DES0_LENGTH_ERROR
 ) != 0 ) {

385 
	`DWMAC_DESC_ENH_PRINT_DBG
( "GMAC RX:ength_errorrror\n" );

386 ++
couÁs
->
Ëngth_rÜ
;

387 
»t
 = 
DWMAC_COMMON_RX_FRAME_STATUS_DISCARD
;

390 iàÐÐ
DES0
 & 
DWMAC_DESC_ERX_DES0_VLAN_TAG
 ) != 0 ) {

391 
	`DWMAC_DESC_ENH_PRINT_DBG
( "GMAC RX: VLAN frameagged\n" );

392 ++
couÁs
->
vÏn_g
;

395  
»t
;

396 
	}
}

398 
	$dwmac_desc_h_´t_tx_desc
(

399 vÞ©
dwmac_desc
 *
p
,

400 cÚ¡ 
couÁ
 )

402 vÞ©
dwmac_desc_ext
 *
p_h
 = (vÞ©dwmac_desc_ex*è
p
;

403 
dex
;

406 iàÐ
p_h
 !ð
NULL
 ) {

407  
dex
 = 0; index < 
couÁ
; ++index ) {

408 
	`´tf
Ð"T¿nsm DMA DesütÜ %d\n", 
dex
 );

409 
	`´tf
( "des0\n" );

410 
	`´tf
(

426 Ð
p_h
[
dex
].
x
.
des0_3
.
des0
 & 
DWMAC_DESC_ETX_DES0_OWN_BIT
 ) != 0,

427 Ð
p_h
[
dex
].
x
.
des0_3
.
des0
 & 
DWMAC_DESC_ETX_DES0_IRQ_ON_COMPLETION
 ) != 0,

428 Ð
p_h
[
dex
].
x
.
des0_3
.
des0
 & 
DWMAC_DESC_ETX_DES0_LAST_SEGMENT
 ) != 0,

429 Ð
p_h
[
dex
].
x
.
des0_3
.
des0
 & 
DWMAC_DESC_ETX_DES0_FIRST_SEGMENT
 ) != 0,

430 Ð
p_h
[
dex
].
x
.
des0_3
.
des0
 & 
DWMAC_DESC_ETX_DES0_DISABLE_CRC
 ) != 0,

431 Ð
p_h
[
dex
].
x
.
des0_3
.
des0
 & 
DWMAC_DESC_ETX_DES0_DISABLE_PAD
 ) != 0,

432 Ð
p_h
[
dex
].
x
.
des0_3
.
des0


433 & 
DWMAC_DESC_ETX_DES0_TRANSMIT_TIMESTAMP_ENABLE
 ) != 0,

434 
	`DWMAC_DESC_ETX_DES0_CHECKSUM_INSERTION_CONTROL_GET
Ð
p_h
[
dex
].
x
.

435 
des0_3
.
des0
 ),

436 Ð
p_h
[
dex
].
x
.
des0_3
.
des0


437 & 
DWMAC_DESC_ETX_DES0_TRANSMIT_END_OF_RING
 ) != 0,

438 Ð
p_h
[
dex
].
x
.
des0_3
.
des0
 & 
DWMAC_DESC_ETX_DES0_SECOND_ADDR_CHAINED
 ) != 0,

439 Ð
p_h
[
dex
].
x
.
des0_3
.
des0


440 & 
DWMAC_DESC_ETX_DES0_TRANSMIT_TIMESTAMP_STATUS
 ) != 0,

441 Ð
p_h
[
dex
].
x
.
des0_3
.
des0
 & 
DWMAC_DESC_ETX_DES0_IP_HEADER_ERROR
 ) != 0,

442 Ð
p_h
[
dex
].
x
.
des0_3
.
des0
 & 
DWMAC_DESC_ETX_DES0_VLAN_FRAME
 ) != 0,

443 
	`DWMAC_DESC_ETX_DES0_COLLISION_COUNT_GET
Ð
p_h
[
dex
].
x
.
des0_3
.
des0
 ),

444 Ð
p_h
[
dex
].
x
.
des0_3
.
des0
 & 
DWMAC_DESC_ETX_DES0_DEFERRED_BIT
 ) != 0

447 iàÐÐ
p_h
[
dex
].
x
.
des0_3
.
des0


448 & 
DWMAC_DESC_ETX_DES0_ERROR_SUMMARY
 ) != 0 ) {

449 
	`´tf
( " Error Summary:\n" );

451 iàÐ
p_h
[
dex
].
x
.
des0_3
.
des0


452 & 
DWMAC_DESC_ETX_DES0_JABBER_TIMEOUT
 ) {

453 
	`´tf
( " Jabber Timeout\n" );

456 iàÐÐ
p_h
[
dex
].
x
.
des0_3
.
des0


457 & 
DWMAC_DESC_ETX_DES0_FRAME_FLUSHED
 ) != 0 ) {

458 
	`´tf
( " Frame Flush\n" );

461 iàÐÐ
p_h
[
dex
].
x
.
des0_3
.
des0


462 & 
DWMAC_DESC_ETX_DES0_IP_PAYLOAD_ERROR
 ) != 0 ) {

463 
	`´tf
( " Payload Error\n" );

466 iàÐÐ
p_h
[
dex
].
x
.
des0_3
.
des0


467 & 
DWMAC_DESC_ETX_DES0_LOSS_OF_CARRIER
 ) != 0 ) {

468 
	`´tf
( " Loss of Carrier\n" );

471 iàÐÐ
p_h
[
dex
].
x
.
des0_3
.
des0


472 & 
DWMAC_DESC_ETX_DES0_NO_CARRIER
 ) != 0 ) {

473 
	`´tf
( " No Carrier\n" );

476 iàÐÐ
p_h
[
dex
].
x
.
des0_3
.
des0


477 & 
DWMAC_DESC_ETX_DES0_EXCESSIVE_COLLISION
 ) != 0 ) {

478 
	`´tf
( " Excessive Collision\n" );

481 iàÐÐ
p_h
[
dex
].
x
.
des0_3
.
des0


482 & 
DWMAC_DESC_ETX_DES0_EXCESSIVE_COLLISION
 ) != 0 ) {

483 
	`´tf
( " Ecessive Deferral\n" );

486 iàÐÐ
p_h
[
dex
].
x
.
des0_3
.
des0


487 & 
DWMAC_DESC_ETX_DES0_UNDERFLOW_ERROR
 ) != 0 ) {

488 
	`´tf
( " Undeflow Error\n" );

492 
	`´tf
( "des1\n" );

493 
	`´tf
(

496 
	`DWMAC_DESC_ETX_DES1_TRANSMIT_BUFFER_2_SIZE_GET
Ð
p_h
[
dex
].
x
.
des0_3
.

497 
des1
 ),

498 
	`DWMAC_DESC_ETX_DES1_TRANSMIT_BUFFER_1_SIZE_GET
Ð
p_h
[
dex
].
x
.
des0_3
.

499 
des1
 )

501 
	`´tf
( "des2\n" );

502 
	`´tf
Ð" %°Bufã¸1 Add»ss\n", (*è
p_h
[
dex
].
x
.
des0_3
.
des2
 );

503 
	`´tf
( "des3\n" );

504 
	`´tf
Ð" %°Bufã¸2 Add»ss\n", (*è
p_h
[
dex
].
x
.
des0_3
.
des3
 );

507 
	}
}

509 
	$dwmac_desc_h_´t_rx_desc
(

510 vÞ©
dwmac_desc
 *
p
,

511 cÚ¡ 
couÁ
 )

513 vÞ©
dwmac_desc_ext
 *
p_h
 = (vÞ©dwmac_desc_ex*è
p
;

514 
dex
;

517 iàÐ
p_h
 !ð
NULL
 ) {

518  
dex
 = 0; index < 
couÁ
; ++index ) {

519 
	`´tf
Ð"ReûivDMA DesütÜ %d\n", 
dex
 );

520 
	`´tf
( "des0\n" );

521 
	`´tf
(

533 Ð
p_h
[
dex
].
x
.
des0_3
.
des0
 & 
DWMAC_DESC_ERX_DES0_OWN_BIT
 ) != 0,

534 Ð
p_h
[
dex
].
x
.
des0_3
.
des0


535 & 
DWMAC_DESC_ERX_DES0_DEST_ADDR_FILTER_FAIL
 ) != 0,

536 
	`DWMAC_DESC_ERX_DES0_FRAME_LENGTH_GET
(

537 
p_h
[
dex
].
x
.
des0_3
.
des0
 ),

538 Ð
p_h
[
dex
].
x
.
des0_3
.
des0


539 & 
DWMAC_DESC_ERX_DES0_SRC_ADDR_FILTER_FAIL
 ) != 0,

540 Ð
p_h
[
dex
].
x
.
des0_3
.
des0
 & 
DWMAC_DESC_ERX_DES0_LENGTH_ERROR
 ) != 0,

541 Ð
p_h
[
dex
].
x
.
des0_3
.
des0
 & 
DWMAC_DESC_ERX_DES0_VLAN_TAG
 ) != 0,

542 Ð
p_h
[
dex
].
x
.
des0_3
.
des0
 & 
DWMAC_DESC_ERX_DES0_FIRST_DESCRIPTOR
 ) != 0,

543 Ð
p_h
[
dex
].
x
.
des0_3
.
des0
 & 
DWMAC_DESC_ERX_DES0_LAST_DESCRIPTOR
 ) != 0,

544 Ð
p_h
[
dex
].
x
.
des0_3
.
des0
 & 
DWMAC_DESC_ERX_DES0_FREAME_TYPE
 ) != 0,

545 Ð
p_h
[
dex
].
x
.
des0_3
.
des0
 & 
DWMAC_DESC_ERX_DES0_DRIBBLE_BIT_ERROR
 ) != 0,

546 Ð
p_h
[
dex
].
x
.
des0_3
.
des0


547 & 
DWMAC_DESC_ERX_DES0_EXT_STATUS_AVAIL_OR_RX_MAC_ADDR_STATUS
 ) != 0

550 iàÐÐ
p_h
[
dex
].
x
.
des0_3
.
des0


551 & 
DWMAC_DESC_ERX_DES0_ERROR_SUMMARY
 ) != 0 ) {

552 
	`´tf
( " Error Summary:\n" );

554 iàÐÐ
p_h
[
dex
].
x
.
des0_3
.
des0


555 & 
DWMAC_DESC_ERX_DES0_DESCRIPTOR_ERROR
 ) != 0 ) {

556 
	`´tf
( " Descriptor Error\n" );

559 iàÐÐ
p_h
[
dex
].
x
.
des0_3
.
des0


560 & 
DWMAC_DESC_ERX_DES0_OVERFLOW_ERROR
 ) != 0 ) {

561 
	`´tf
( " Overflow Error\n" );

564 iàÐÐ
p_h
[
dex
].
x
.
des0_3
.
des0


566 
DWMAC_DESC_ERX_DES0_TIMESTAMP_AVAIL_OR_CHECKSUM_ERROR_OR_GIANT_FRAME
 )

568 
	`´tf
( " Giant Frame\n" );

571 iàÐÐ
p_h
[
dex
].
x
.
des0_3
.
des0


572 & 
DWMAC_DESC_ERX_DES0_LATE_COLLISION
 ) != 0 ) {

573 
	`´tf
( " Late Collision\n" );

576 iàÐÐ
p_h
[
dex
].
x
.
des0_3
.
des0


577 & 
DWMAC_DESC_ERX_DES0_RECEIVE_WATCHDOG_TIMEOUT
 ) != 0

578 || ( 
p_h
[
dex
].
x
.
des0_3
.
des0


579 & 
DWMAC_DESC_ERX_DES0_RECEIVE_ERROR
 ) != 0 ) {

580 
	`´tf
( " IP Header or IP Payload:\n" );

582 iàÐÐ
p_h
[
dex
].
x
.
des0_3
.
des0


583 & 
DWMAC_DESC_ERX_DES0_RECEIVE_WATCHDOG_TIMEOUT
 ) != 0 ) {

584 
	`´tf
( " Watchdog Timeout\n" );

587 iàÐÐ
p_h
[
dex
].
x
.
des0_3
.
des0


588 & 
DWMAC_DESC_ERX_DES0_RECEIVE_ERROR
 ) != 0 ) {

589 
	`´tf
( " Receive Error\n" );

593 iàÐÐ
p_h
[
dex
].
x
.
des0_3
.
des0
 & 
DWMAC_DESC_ERX_DES0_CRC_ERROR
 )

595 
	`´tf
( " CRC Error\n" );

599 
	`´tf
( "des1\n" );

600 
	`´tf
(

606 Ð
p_h
[
dex
].
x
.
des0_3
.
des1


607 & 
DWMAC_DESC_ERX_DES1_DISABLE_IRQ_ON_COMPLETION
 ) != 0,

608 
	`DWMAC_DESC_ERX_DES1_RECEIVE_BUFF_2_SIZE_GET
Ð
p_h
[
dex
].
x
.
des0_3
.

609 
des1
 ),

610 Ð
p_h
[
dex
].
x
.
des0_3
.
des1
 & 
DWMAC_DESC_ERX_DES1_RECEIVE_END_OF_RING
 ) != 0,

611 Ð
p_h
[
dex
].
x
.
des0_3
.
des1
 & 
DWMAC_DESC_ERX_DES1_SECOND_ADDR_CHAINED
 ) != 0,

612 
	`DWMAC_DESC_ERX_DES1_RECEIVE_BUFF_1_SIZE_GET
Ð
p_h
[
dex
].
x
.
des0_3
.

613 
des1
 )

615 
	`´tf
( "des2\n" );

616 
	`´tf
Ð" %°Bufã¸1 Add»ss\n", (*è
p_h
[
dex
].
x
.
des0_3
.
des2
 );

617 
	`´tf
( "des3\n" );

618 
	`´tf
Ð" %°Bufã¸2 Add»ss\n", (*è
p_h
[
dex
].
x
.
des0_3
.
des3
 );

621 
	}
}

623 
	$dwmac_desc_h_ü_rx_desc
Ð
dwmac_commÚ_cÚxt
 *
£lf
 )

625 
o
 = 0;

626 cÚ¡ 
size_t
 
NUM_DESCS
 = (size_tè
£lf
->
bsd_cÚfig
->
rbuf_couÁ
;

627 cÚ¡ 
size_t
 
SIZE_DESCS
 = 
NUM_DESCS
 * Ð
dwmac_desc_ext
 );

628 *
desc_mem
 = 
NULL
;

631 
	`as£¹
Ð
NULL
 =ð
£lf
->
dma_rx
 );

634 
£lf
->
mbuf_addr_rx
 = 
	`ÿÎoc
Ð
NUM_DESCS
, Ð
mbuf
 * ) );

636 iàÐ
£lf
->
mbuf_addr_rx
 =ð
NULL
 ) {

637 
o
 = 
ENOMEM
;

641 iàÐ
o
 == 0 ) {

642 
o
 = ( 
£lf
->
CFG
->
CALLBACK
.
mem_®loc_noÿche
 )(

643 
£lf
->
¬g
,

644 &
desc_mem
,

645 
SIZE_DESCS


649 iàÐ
o
 == 0 ) {

650 iàÐ
desc_mem
 !ð
NULL
 ) {

651 
	`mem£t
Ð
desc_mem
, 0, 
SIZE_DESCS
 );

652 
	`DWMAC_COMMON_DSB
();

654 
o
 = 
ENOMEM
;

658 iàÐ
o
 == 0 ) {

659 
£lf
->
dma_rx
 = (vÞ©
dwmac_desc
 *è
desc_mem
;

660 
	`DWMAC_COMMON_DSB
();

663  
o
;

664 
	}
}

666 
	$dwmac_desc_h__rx_desc
(

667 
dwmac_commÚ_cÚxt
 *
£lf
,

668 cÚ¡ 
dex
 )

670 vÞ©
dwmac_desc_ext
 *
p_h
 =

671 (vÞ©
dwmac_desc_ext
 *è
£lf
->
dma_rx
;

672 cÚ¡ 
size_t
 
NUM_DESCS
 = (size_tè
£lf
->
bsd_cÚfig
->
rbuf_couÁ
;

673 *
þu¡_¡¬t
 =

674 
	`mtod
Ð
£lf
->
mbuf_addr_rx
[
dex
], * );

677 
	`as£¹
Ð
NULL
 !ð
p_h
 );

679 
	`DWMAC_COMMON_DSB
();

681 
	`¹ems_ÿche_v®id©e_muÉË_d©a_les
(

682 
þu¡_¡¬t
,

683 
DWMAC_DESC_COM_BUF_SIZE
 + 
ETHER_ALIGN


686 iàÐ
£lf
->
mbuf_addr_rx
[
dex
] !ð
NULL
 ) {

687 
p_h
[
dex
].
x
.
des0_3
.
des1
 = 
	`DWMAC_DESC_ERX_DES1_RECEIVE_BUFF_1_SIZE_SET
(

688 
p_h
->
x
.
des0_3
.
des1
,

689 
DWMAC_DESC_COM_BUF_SIZE
 );

691 
p_h
[
dex
].
x
.
des0_3
.
des1
 = 
	`DWMAC_DESC_ERX_DES1_RECEIVE_BUFF_1_SIZE_SET
(

692 
p_h
->
x
.
des0_3
.
des1
,

696 
p_h
[
dex
].
x
.
des0_3
.
des2
 = (
ut32_t
è
þu¡_¡¬t
;

700 
	`dwmac_desc_h_rx_£t_Ú_rg_cha
Ð&
p_h
[
dex
],

701 Ð
dex
 =ð
NUM_DESCS
 - 1 ) );

702 
	`DWMAC_COMMON_DSB
();

703 
p_h
[
dex
].
x
.
des0_3
.
des0
 = 
DWMAC_DESC_ERX_DES0_OWN_BIT
;

704 
	}
}

706 
	$dwmac_desc_h_de¡roy_rx_desc
Ð
dwmac_commÚ_cÚxt
 *
£lf
 )

708 
o
 = 0;

709 vÞ©
dwmac_desc
 *
dma_rx
 = 
£lf
->dma_rx;

712 iàÐ
£lf
->
mbuf_addr_rx
 !ð
NULL
 ) {

713 
	`ä
Ð
£lf
->
mbuf_addr_rx
, 0 );

714 
£lf
->
mbuf_addr_rx
 = 
NULL
;

717 iàÐ
dma_rx
 !ð
NULL
 ) {

718 
o
 = 
£lf
->
CFG
->
CALLBACK
.
	`mem_ä_noÿche
(

719 
£lf
->
¬g
,

720 
	`RTEMS_DEVOLATILE
Ð*, 
dma_rx
 )

722 
£lf
->
dma_rx
 = 
NULL
;

725 
	`DWMAC_COMMON_DSB
();

727  
o
;

728 
	}
}

730 
	$dwmac_desc_h_»Ëa£_rx_bufs
Ð
dwmac_commÚ_cÚxt
 *
£lf
 )

732 vÞ©
dwmac_desc_ext
 *
p_h
 = (vÞ©dwmac_desc_ex*è
£lf
->
dma_rx
;

733 cÚ¡ 
size_t
 
NUM_DESCS
 = (size_tè
£lf
->
bsd_cÚfig
->
rbuf_couÁ
;

734 
i
;

737 
	`as£¹
Ð
p_h
 !ð
NULL
 );

739  
i
 = 0; i < 
NUM_DESCS
; ++i ) {

740 iàÐ
p_h
[
i
].
x
.
des0_3
.
des2
 != 0 ) {

741 
mbuf
 *
dummy
;

743 
	`as£¹
Ð
£lf
->
mbuf_addr_rx
[
i
] !ð
NULL
 );

745 
	`MFREE
Ð
£lf
->
mbuf_addr_rx
[
i
], 
dummy
 );

746 (è
dummy
;

747 
	`mem£t
(

748 
	`RTEMS_DEVOLATILE
Ð*, &
p_h
[
i
].
x
 ),

750 Ð
dwmac_desc_ext
 )

755 
£lf
->
dma_rx
 = (vÞ©
dwmac_desc
 *è
p_h
;

756 
	`DWMAC_COMMON_DSB
();

757 
	}
}

759 
	$dwmac_desc_h_ü_tx_desc
Ð
dwmac_commÚ_cÚxt
 *
£lf
 )

761 
o
 = 0;

762 *
mem_desc
 = 
NULL
;

763 cÚ¡ 
size_t
 
NUM_DESCS
 = (size_tè
£lf
->
bsd_cÚfig
->
xbuf_couÁ
;

764 cÚ¡ 
size_t
 
SIZE_DESCS
 = 
NUM_DESCS
 * Ð
dwmac_desc_ext
 );

767 
	`as£¹
Ð
£lf
->
dma_tx
 =ð
NULL
 );

770 
£lf
->
mbuf_addr_tx
 = 
	`ÿÎoc
Ð
NUM_DESCS
, Ð
mbuf
 * ) );

772 iàÐ
£lf
->
mbuf_addr_tx
 =ð
NULL
 ) {

773 
o
 = 
ENOMEM
;

776 iàÐ
o
 == 0 ) {

777 
o
 = ( 
£lf
->
CFG
->
CALLBACK
.
mem_®loc_noÿche
 )(

778 
£lf
->
¬g
,

779 &
mem_desc
,

780 
SIZE_DESCS


784 iàÐ
o
 == 0 ) {

785 iàÐ
mem_desc
 !ð
NULL
 ) {

786 
	`mem£t
Ð
mem_desc
, 0, 
SIZE_DESCS
 );

787 
	`DWMAC_COMMON_DSB
();

789 
o
 = 
ENOMEM
;

793 iàÐ
o
 == 0 ) {

794 
£lf
->
dma_tx
 = 
mem_desc
;

795 
	`DWMAC_COMMON_DSB
();

798  
o
;

799 
	}
}

801 
	$dwmac_desc_h__tx_desc
Ð
dwmac_commÚ_cÚxt
 *
£lf
 )

803 vÞ©
dwmac_desc_ext
 *
p_h
 = (vÞ©dwmac_desc_ex*è
£lf
->
dma_tx
;

804 cÚ¡ 
size_t
 
NUM_DESCS
 = (size_tè
£lf
->
bsd_cÚfig
->
xbuf_couÁ
;

805 
i
;

808 
	`as£¹
Ð
p_h
 !ð
NULL
 );

810  
i
 = 0; i < 
NUM_DESCS
; ++i ) {

811 
	`dwmac_desc_h_tx_£t_Ú_rg_cha
Ð&
p_h
[
i
], ( i =ð
NUM_DESCS
 - 1 ) );

814 
£lf
->
dma_tx
 = (vÞ©
dwmac_desc
 *è&
p_h
[0];

815 
	`DWMAC_COMMON_DSB
();

816 
	}
}

818 
	$dwmac_desc_h_de¡roy_tx_desc
Ð
dwmac_commÚ_cÚxt
 *
£lf
 )

820 
o
 = 0;

821 *
mem_desc
 = 
	`RTEMS_DEVOLATILE
Ð*, 
£lf
->
dma_tx
 );

824 iàÐ
£lf
->
mbuf_addr_tx
 !ð
NULL
 ) {

825 
	`ä
Ð
£lf
->
mbuf_addr_tx
, 0 );

826 
£lf
->
mbuf_addr_tx
 = 
NULL
;

829 iàÐ
mem_desc
 !ð
NULL
 ) {

830 
o
 = 
£lf
->
CFG
->
CALLBACK
.
	`mem_ä_noÿche
Ð£lf->
¬g
, 
mem_desc
 );

831 
mem_desc
 = 
NULL
;

832 
£lf
->
dma_tx
 = (vÞ©
dwmac_desc
 *è
mem_desc
;

835 
	`DWMAC_COMMON_DSB
();

837  
o
;

838 
	}
}

840 
	$dwmac_desc_h_»Ëa£_tx_bufs
Ð
dwmac_commÚ_cÚxt
 *
£lf
 )

842 vÞ©
dwmac_desc_ext
 *
p_h
 = (vÞ©dwmac_desc_ex*è
£lf
->
dma_tx
;

843 cÚ¡ 
size_t
 
NUM_DESCS
 = (size_tè
£lf
->
bsd_cÚfig
->
xbuf_couÁ
;

844 
i
;

847 
	`as£¹
Ð
p_h
 !ð
NULL
 );

849  
i
 = 0; i < 
NUM_DESCS
; ++i ) {

850 iàÐ
p_h
[
i
].
x
.
des0_3
.
des1
 != 0 ) {

851 
mbuf
 *
dummy
;

853 
	`as£¹
Ð
£lf
->
mbuf_addr_tx
[
i
] !ð
NULL
 );

855 
	`MFREE
Ð
£lf
->
mbuf_addr_tx
[
i
], 
dummy
 );

856 (è
dummy
;

857 
	`mem£t
Ð
	`RTEMS_DEVOLATILE
( *,

858 &
p_h
[
i
].
x
 ), 0, Ð
dwmac_desc_ext
 ) );

862 
£lf
->
dma_tx
 = (vÞ©
dwmac_desc
 *è
p_h
;

863 
	`DWMAC_COMMON_DSB
();

864 
	}
}

866 
le
 
size_t
 
	$dwmac_desc_h_g_rx_äame_Ën
(

867 
dwmac_commÚ_cÚxt
 *
£lf
,

868 cÚ¡ 
desc_idx
 )

870 vÞ©
dwmac_desc_ext
 *
p_h
 = (vÞ©dwmac_desc_ex*è
£lf
->
dma_rx
;

878 iàÐ
£lf
->
dmag½
->
hw_ã©u»
 & 
DMAGRP_HW_FEATURE_RXTYP1COE
 ) {

879  
	`DWMAC_DESC_ERX_DES0_FRAME_LENGTH_GET
Ð
p_h
[
desc_idx
].
x
.
des0_3
.
des0
 )

882  
	`DWMAC_DESC_ERX_DES0_FRAME_LENGTH_GET
Ð
p_h
[
desc_idx
].
x
.
des0_3
.
des0
 );

884 
	}
}

886 
boÞ
 
	$dwmac_desc_h_am_i_rx_owÃr
(

887 
dwmac_commÚ_cÚxt
 *
£lf
,

888 cÚ¡ 
desc_idx
 )

890 vÞ©
dwmac_desc_ext
 *
p_h
 = (vÞ©dwmac_desc_ex*è
£lf
->
dma_rx
;

891 
boÞ
 
am_i_owÃr
;

894 
	`DWMAC_COMMON_DSB
();

895 
am_i_owÃr
 =

896 Ð
p_h
[
desc_idx
].
x
.
des0_3
.
des0
 & 
DWMAC_DESC_ERX_DES0_OWN_BIT
 ) == 0;

898  
am_i_owÃr
;

899 
	}
}

901 
boÞ
 
	$dwmac_desc_h_am_i_tx_owÃr
(

902 
dwmac_commÚ_cÚxt
 *
£lf
,

903 cÚ¡ 
idx_tx
 )

905 vÞ©
dwmac_desc_ext
 *
p_h
 = (vÞ©dwmac_desc_ex*è
£lf
->
dma_tx
;

906 
boÞ
 
am_i_owÃr
;

909 
	`DWMAC_COMMON_DSB
();

910 
am_i_owÃr
 =

911 Ð
p_h
[
idx_tx
].
x
.
des0_3
.
des0
 & 
DWMAC_DESC_ETX_DES0_OWN_BIT
 ) == 0;

913  
am_i_owÃr
;

914 
	}
}

916 
	$dwmac_desc_h_»Ëa£_tx_owÃrsh
(

917 
dwmac_commÚ_cÚxt
 *
£lf
,

918 cÚ¡ 
idx_tx
 )

920 vÞ©
dwmac_desc_ext
 *
p_h
 = (vÞ©dwmac_desc_ex*è
£lf
->
dma_tx
;

923 
	`DWMAC_COMMON_DSB
();

924 
p_h
[
idx_tx
].
x
.
des0_3
.
des0
 |ð
DWMAC_DESC_ETX_DES0_OWN_BIT
;

925 
	}
}

927 
	$dwmac_desc_h_g_tx_ls
(

928 
dwmac_commÚ_cÚxt
 *
£lf
,

929 cÚ¡ 
idx_tx
 )

931 vÞ©
dwmac_desc_ext
 *
p_h
 = (vÞ©dwmac_desc_ex*è
£lf
->
dma_tx
;

934  ( ( 
p_h
[
idx_tx
].
x
.
des0_3
.
des0


935 & 
DWMAC_DESC_ETX_DES0_LAST_SEGMENT
 ) != 0 );

936 
	}
}

938 
	$dwmac_desc_h_»Ëa£_tx_desc
(

939 
dwmac_commÚ_cÚxt
 *
£lf
,

940 cÚ¡ 
idx_tx
 )

942 vÞ©
dwmac_desc_ext
 *
p_h
 = (vÞ©dwmac_desc_ex*è
£lf
->
dma_tx
;

945 
p_h
[
idx_tx
].
x
.
des0_3
.
des0
 =

946 
p_h
[
idx_tx
].
x
.
des0_3
.
des0


947 & ( 
DWMAC_DESC_ETX_DES0_TRANSMIT_END_OF_RING


948 | 
DWMAC_DESC_ETX_DES0_SECOND_ADDR_CHAINED
 );

950 
p_h
[
idx_tx
].
x
.
des0_3
.
des1
 = 0;

951 
	}
}

953 
	$dwmac_desc_h_´¬e_tx_desc
(

954 
dwmac_commÚ_cÚxt
 *
£lf
,

955 cÚ¡ 
idx
,

956 cÚ¡ 
boÞ
 
is_f¡
,

957 cÚ¡ 
size_t
 
Ën
,

958 cÚ¡ *
pd©a
 )

960 vÞ©
dwmac_desc_ext
 *
p_h
 = (vÞ©dwmac_desc_ex*è
£lf
->
dma_tx
;

963 iàÐ
is_f¡
 ) {

964 
p_h
[
idx
].
x
.
des0_3
.
des0
 |ð
DWMAC_DESC_ETX_DES0_FIRST_SEGMENT
;

967 
	`dwmac_desc_h_£t_tx_desc_Ën
Ð&
p_h
[
idx
], 
Ën
 );

969 
p_h
[
idx
].
x
.
des0_3
.
des2
 = (
u_t
è
pd©a
;

970 
	}
}

972 
	$dwmac_desc_h_þo£_tx_desc
(

973 
dwmac_commÚ_cÚxt
 *
£lf
,

974 cÚ¡ 
idx_tx


977 vÞ©
dwmac_desc_ext
 *
p_h
 = (vÞ©dwmac_desc_ex*è
£lf
->
dma_tx
;

979 
p_h
[
idx_tx
].
x
.
des0_3
.
des0
 |ð
DWMAC_DESC_ETX_DES0_LAST_SEGMENT
;

980 
p_h
[
idx_tx
].
x
.
des0_3
.
des0
 |ð
DWMAC_DESC_ETX_DES0_IRQ_ON_COMPLETION
;

981 
	}
}

983 
boÞ
 
	$dwmac_desc_h_is_f¡_rx_£gmt
(

984 
dwmac_commÚ_cÚxt
 *
£lf
,

985 cÚ¡ 
desütÜ_dex
 )

987 vÞ©
dwmac_desc_ext
 *
p_descs
 = (vÞ©dwmac_desc_ex*è
£lf
->
dma_rx
;

990  ( ( 
p_descs
[
desütÜ_dex
].
x
.
des0_3
.
des0


991 & 
DWMAC_DESC_ERX_DES0_FIRST_DESCRIPTOR
 ) != 0 );

992 
	}
}

994 
boÞ
 
	$dwmac_desc_h_is_Ï¡_rx_£gmt
(

995 
dwmac_commÚ_cÚxt
 *
£lf
,

996 cÚ¡ 
desütÜ_dex
 )

998 vÞ©
dwmac_desc_ext
 *
p_descs
 = (vÞ©dwmac_desc_ex*è
£lf
->
dma_rx
;

1001  ( ( 
p_descs
[
desütÜ_dex
].
x
.
des0_3
.
des0


1002 & 
DWMAC_DESC_ERX_DES0_LAST_DESCRIPTOR
 ) != 0 );

1003 
	}
}

1005 
	$dwmac_desc_h_v®id©e
Ð
dwmac_commÚ_cÚxt
 *
£lf
 )

1008 iàÐÐ
£lf
->
dmag½
->
hw_ã©u»
 & 
DMAGRP_HW_FEATURE_ENHDESSEL
 ) != 0 ) {

1011  
EINVAL
;

1013 
	}
}

1015 
boÞ
 
	$dwmac_desc_h_u£_hªûd_descs
Ð
dwmac_commÚ_cÚxt
 *
£lf
 )

1017 (è
£lf
;

1020  
ue
;

1021 
	}
}

1023 cÚ¡ 
dwmac_commÚ_desc_Ýs
 
	gdwmac_desc_Ýs_hªûd
 = {

1024 .
v®id©e
 = 
dwmac_desc_h_v®id©e
,

1025 .
	gu£_hªûd_descs
 = 
dwmac_desc_h_u£_hªûd_descs
,

1026 .
	gtx_¡©us
 = 
dwmac_desc_h_g_tx_¡©us
,

1027 .
	grx_¡©us
 = 
dwmac_desc_h_g_rx_¡©us
,

1028 .
	gü_rx_desc
 = 
dwmac_desc_h_ü_rx_desc
,

1029 .
	gü_tx_desc
 = 
dwmac_desc_h_ü_tx_desc
,

1030 .
	gde¡roy_rx_desc
 = 
dwmac_desc_h_de¡roy_rx_desc
,

1031 .
	gde¡roy_tx_desc
 = 
dwmac_desc_h_de¡roy_tx_desc
,

1032 .
	g_rx_desc
 = 
dwmac_desc_h__rx_desc
,

1033 .
	g_tx_desc
 = 
dwmac_desc_h__tx_desc
,

1034 .
	g»Ëa£_rx_bufs
 = 
dwmac_desc_h_»Ëa£_rx_bufs
,

1035 .
	g»Ëa£_tx_bufs
 = 
dwmac_desc_h_»Ëa£_tx_bufs
,

1036 .
	g®loc_d©a_buf
 = 
dwmac_desc_com_Ãw_mbuf
,

1037 .
	gam_i_tx_owÃr
 = 
dwmac_desc_h_am_i_tx_owÃr
,

1038 .
	gam_i_rx_owÃr
 = 
dwmac_desc_h_am_i_rx_owÃr
,

1039 .
	g»Ëa£_tx_desc
 = 
dwmac_desc_h_»Ëa£_tx_desc
,

1040 .
	g´¬e_tx_desc
 = 
dwmac_desc_h_´¬e_tx_desc
,

1041 .
	gþo£_tx_desc
 = 
dwmac_desc_h_þo£_tx_desc
,

1042 .
	gg_tx_ls
 = 
dwmac_desc_h_g_tx_ls
,

1043 .
	g»Ëa£_tx_owÃrsh
 = 
dwmac_desc_h_»Ëa£_tx_owÃrsh
,

1044 .
	gg_rx_äame_Ën
 = 
dwmac_desc_h_g_rx_äame_Ën
,

1045 .
	gis_f¡_rx_£gmt
 = 
dwmac_desc_h_is_f¡_rx_£gmt
,

1046 .
	gis_Ï¡_rx_£gmt
 = 
dwmac_desc_h_is_Ï¡_rx_£gmt
,

1047 .
	g´t_tx_desc
 = 
dwmac_desc_h_´t_tx_desc
,

1048 .
	g´t_rx_desc
 = 
dwmac_desc_h_´t_rx_desc
,

1053 cÚ¡ 
dwmac_desütÜ_Ýs
 
	gDWMAC_DESCRIPTOR_OPS_ENHANCED
 =

1054 
DWMAC_DESCRIPTOR_OPS_INITIALIZER
(

1055 &
dwmac_desc_Ýs_hªûd


	@src/libchip/network/dwmac-desc.h

1 #iâdeà
DWMAC_DESC_RX_REGS_H


2 
	#DWMAC_DESC_RX_REGS_H


	)

4 
	~<¡dt.h
>

6 
	#DWMAC_DESC_BIT32
(
b
) \

7 ((
ut32_t
è(((ut32_tè1è<< (
b
)))

	)

9 
	#DWMAC_DESC_MSK32
(
f¡_b
, 
Ï¡_b
) \

10 ((
ut32_t
è((
	`DWMAC_DESC_BIT32
((
Ï¡_b
è- (
f¡_b
è+ 1è- 1è<< (f¡_b)))

	)

12 
	#DWMAC_DESC_FLD32
(
v®
, 
f¡_b
, 
Ï¡_b
) \

13 ((
ut32_t
) \

14 ((((
ut32_t
è(
v®
)è<< (
f¡_b
)è& 
	`DWMAC_DESC_MSK32
(f¡_b, 
Ï¡_b
)))

	)

16 
	#DWMAC_DESC_FLD32GET
(
»g
, 
f¡_b
, 
Ï¡_b
) \

17 ((
ut32_t
è(((
»g
è& 
	`DWMAC_DESC_MSK32
(
f¡_b
, 
Ï¡_b
)è>> (f¡_b)))

	)

19 
	#DWMAC_DESC_FLD32SET
(
»g
, 
v®
, 
f¡_b
, 
Ï¡_b
) \

20 ((
ut32_t
è(((
»g
è& ~
	`DWMAC_DESC_MSK32
(
f¡_b
, 
Ï¡_b
)) \

21 | 
	`DWMAC_DESC_FLD32
(
v®
, 
f¡_b
, 
Ï¡_b
)))

	)

24 
ut32_t
 
	mdes0
;

25 
	#DWMAC_DESC_RX_DES0_OWN_BIT
 
	`DWMAC_DESC_BIT32
(31)

	)

26 
	#DWMAC_DESC_RX_DES0_DEST_ADDR_FILTER_FAIL
 
	`DWMAC_DESC_BIT32
(30)

	)

27 
	#DWMAC_DESC_RX_DES0_FRAME_LENGTH
(
v®
è
	`DWMAC_DESC_FLD32
(v®, 16, 29)

	)

28 
	#DWMAC_DESC_RX_DES0_FRAME_LENGTH_GET
(
»g
è
	`DWMAC_DESC_FLD32GET
Ôeg, 16, 29)

	)

29 
	#DWMAC_DESC_RX_DES0_FRAME_LENGTH_SET
(
»g
, 
v®
è
	`DWMAC_DESC_FLD32SET
Ôeg, v®, 16, 29)

	)

30 
	#DWMAC_DESC_RX_DES0_ERROR_SUMMARY
 
	`DWMAC_DESC_BIT32
(15)

	)

31 
	#DWMAC_DESC_RX_DES0_DESCRIPTOR_ERROR
 
	`DWMAC_DESC_BIT32
(14)

	)

32 
	#DWMAC_DESC_RX_DES0_SRC_ADDR_FILTER_FAIL
 
	`DWMAC_DESC_BIT32
(13)

	)

33 
	#DWMAC_DESC_RX_DES0_LENGTH_ERROR
 
	`DWMAC_DESC_BIT32
(12)

	)

34 
	#DWMAC_DESC_RX_DES0_OVERFLOW_ERROR
 
	`DWMAC_DESC_BIT32
(11)

	)

35 
	#DWMAC_DESC_RX_DES0_VLAN_TAG
 
	`DWMAC_DESC_BIT32
(10)

	)

36 
	#DWMAC_DESC_RX_DES0_FIRST_DESCRIPTOR
 
	`DWMAC_DESC_BIT32
(9)

	)

37 
	#DWMAC_DESC_RX_DES0_LAST_DESCRIPTOR
 
	`DWMAC_DESC_BIT32
(8)

	)

38 
	#DWMAC_DESC_RX_DES0_CHECKSUM_ERROR
 
	`DWMAC_DESC_BIT32
(7)

	)

39 
	#DWMAC_DESC_RX_DES0_LATE_COLLISION
 
	`DWMAC_DESC_BIT32
(6)

	)

40 
	#DWMAC_DESC_RX_DES0_FRAME_TYPE
 
	`DWMAC_DESC_BIT32
(5)

	)

41 
	#DWMAC_DESC_RX_DES0_RECEIVE_WATCHDOG_TIMEOUT
 
	`DWMAC_DESC_BIT32
(4)

	)

42 
	#DWMAC_DESC_RX_DES0_RECEIVE_ERROR
 
	`DWMAC_DESC_BIT32
(3)

	)

43 
	#DWMAC_DESC_RX_DES0_DRIBBLE_BIT_ERROR
 
	`DWMAC_DESC_BIT32
(2)

	)

44 
	#DWMAC_DESC_RX_DES0_CRC_ERROR
 
	`DWMAC_DESC_BIT32
(1)

	)

45 
	#DWMAC_DESC_RX_DES0_RX_MAC_ADDR_OR_PAYLOAD_CHECKSUM_ERROR
 
	`DWMAC_DESC_BIT32
(0)

	)

46 
ut32_t
 
	mdes1
;

47 
	#DWMAC_DESC_RX_DES1_DISABLE_IRQ_ON_COMPLETION
 
	`DWMAC_DESC_BIT32
(31)

	)

48 
	#DWMAC_DESC_RX_DES1_RECEIVE_END_OF_RING
 
	`DWMAC_DESC_BIT32
(25)

	)

49 
	#DWMAC_DESC_RX_DES1_SECOND_ADDR_CHAINED
 
	`DWMAC_DESC_BIT32
(24)

	)

50 
	#DWMAC_DESC_RX_DES1_RECEIVE_BUFFER_2_SIZE
(
v®
è
	`DWMAC_DESC_FLD32
(v®, 11, 21)

	)

51 
	#DWMAC_DESC_RX_DES1_RECEIVE_BUFFER_2_SIZE_GET
(
»g
è
	`DWMAC_DESC_FLD32GET
Ôeg, 11, 21)

	)

52 
	#DWMAC_DESC_RX_DES1_RECEIVE_BUFFER_2_SIZE_SET
(
»g
, 
v®
è
	`DWMAC_DESC_FLD32SET
Ôeg, v®, 11, 21)

	)

53 
	#DWMAC_DESC_RX_DES1_RECIVE_BUFFER_1_SIZE
(
v®
è
	`DWMAC_DESC_FLD32
(v®, 0, 10)

	)

54 
	#DWMAC_DESC_RX_DES1_RECIVE_BUFFER_1_SIZE_GET
(
»g
è
	`DWMAC_DESC_FLD32GET
Ôeg, 0, 10)

	)

55 
	#DWMAC_DESC_RX_DES1_RECIVE_BUFFER_1_SIZE_SET
(
»g
, 
v®
è
	`DWMAC_DESC_FLD32SET
Ôeg, v®, 0, 10)

	)

56 
ut32_t
 
	mdes2
;

57 
	#DWMAC_DESC_RX_DES2_BUFF_1_ADDR_PTR
(
v®
è
	`DWMAC_DESC_FLD32
(v®, 0, 31)

	)

58 
	#DWMAC_DESC_RX_DES2_BUFF_1_ADDR_PTR_GET
(
»g
è
	`DWMAC_DESC_FLD32GET
Ôeg, 0, 31)

	)

59 
	#DWMAC_DESC_RX_DES2_BUFF_1_ADDR_PTR_SET
(
»g
, 
v®
è
	`DWMAC_DESC_FLD32SET
Ôeg, v®, 0, 31)

	)

60 
	#DWMAC_DESC_RX_DES2_IEEE_RECEIVE_FRAME_TIMESTAMP_LOW
(
v®
è
	`DWMAC_DESC_FLD32
(v®, 0, 31)

	)

61 
	#DWMAC_DESC_RX_DES2_IEEE_RECEIVE_FRAME_TIMESTAMP_LOW_GET
(
»g
è
	`DWMAC_DESC_FLD32GET
Ôeg, 0, 31)

	)

62 
	#DWMAC_DESC_RX_DES2_IEEE_RECEIVE_FRAME_TIMESTAMP_LOW_SET
(
»g
, 
v®
è
	`DWMAC_DESC_FLD32SET
Ôeg, v®, 0, 31)

	)

63 
ut32_t
 
	mdes3
;

64 
	#DWMAC_DESC_RX_DES3_BUFF_2_ADDR_PTR
(
v®
è
	`DWMAC_DESC_FLD32
(v®, 0, 31)

	)

65 
	#DWMAC_DESC_RX_DES3_BUFF_2_ADDR_PTR_GET
(
»g
è
	`DWMAC_DESC_FLD32GET
Ôeg, 0, 31)

	)

66 
	#DWMAC_DESC_RX_DES3_BUFF_2_ADDR_PTR_SET
(
»g
, 
v®
è
	`DWMAC_DESC_FLD32SET
Ôeg, v®, 0, 31)

	)

67 
	#DWMAC_DESC_RX_DES3_IEEE_RECEIVE_FRAME_TIMESTAMP_LOW
(
v®
è
	`DWMAC_DESC_FLD32
(v®, 0, 31)

	)

68 
	#DWMAC_DESC_RX_DES3_IEEE_RECEIVE_FRAME_TIMESTAMP_LOW_GET
(
»g
è
	`DWMAC_DESC_FLD32GET
Ôeg, 0, 31)

	)

69 
	#DWMAC_DESC_RX_DES3_IEEE_RECEIVE_FRAME_TIMESTAMP_LOW_SET
(
»g
, 
v®
è
	`DWMAC_DESC_FLD32SET
Ôeg, v®, 0, 31)

	)

70 } 
	tdwmac_desc_rx
;

73 
ut32_t
 
	mdes0
;

74 
	#DWMAC_DESC_TX_DES0_OWN_BIT
 
	`DWMAC_DESC_BIT32
(31)

	)

75 
	#DWMAC_DESC_TX_DES0_TX_TIMESTAMP_STATUS
 
	`DWMAC_DESC_BIT32
(17)

	)

76 
	#DWMAC_DESC_TX_DES0_IP_HEADER_ERROR
 
	`DWMAC_DESC_BIT32
(16)

	)

77 
	#DWMAC_DESC_TX_DES0_ERROR_SUMMARY
 
	`DWMAC_DESC_BIT32
(15)

	)

78 
	#DWMAC_DESC_TX_DES0_JABBER_TIMEOUT
 
	`DWMAC_DESC_BIT32
(14)

	)

79 
	#DWMAC_DESC_TX_DES0_FRAME_FLUSHED
 
	`DWMAC_DESC_BIT32
(13)

	)

80 
	#DWMAC_DESC_TX_DES0_PAYLOAD_CHECKSUM_ERROR
 
	`DWMAC_DESC_BIT32
(12)

	)

81 
	#DWMAC_DESC_TX_DES0_LOSS_OF_CARRIER
 
	`DWMAC_DESC_BIT32
(11)

	)

82 
	#DWMAC_DESC_TX_DES0_NO_CARRIER
 
	`DWMAC_DESC_BIT32
(10)

	)

83 
	#DWMAC_DESC_TX_DES0_EXCESSIVE_COLLISION
 
	`DWMAC_DESC_BIT32
(8)

	)

84 
	#DWMAC_DESC_TX_DES0_VLAN_FRAME
 
	`DWMAC_DESC_BIT32
(7)

	)

85 
	#DWMAC_DESC_TX_DES0_COLLISION_TIMEOUT
(
v®
è
	`DWMAC_DESC_FLD32
(v®, 3, 6)

	)

86 
	#DWMAC_DESC_TX_DES0_COLLISION_TIMEOUT_GET
(
»g
è
	`DWMAC_DESC_FLD32GET
Ôeg, 3, 6)

	)

87 
	#DWMAC_DESC_TX_DES0_COLLISION_TIMEOUT_SET
(
»g
, 
v®
è
	`DWMAC_DESC_FLD32SET
Ôeg, v®, 3, 6)

	)

88 
	#DWMAC_DESC_TX_DES0_EXCESSIVE_DEFERAL
 
	`DWMAC_DESC_BIT32
(2)

	)

89 
	#DWMAC_DESC_TX_DES0_UNDERFLOW_ERROR
 
	`DWMAC_DESC_BIT32
(1)

	)

90 
	#DWMAC_DESC_TX_DES0_DEFERED_BIT
 
	`DWMAC_DESC_BIT32
(0)

	)

91 
ut32_t
 
	mdes1
;

92 
	#DWMAC_DESC_TX_DES1_IRQ_ON_COMPLETION
 
	`DWMAC_DESC_BIT32
(31)

	)

93 
	#DWMAC_DESC_TX_DES1_LAST_SEGMENT
 
	`DWMAC_DESC_BIT32
(30)

	)

94 
	#DWMAC_DESC_TX_DES1_FIRST_SEGMENT
 
	`DWMAC_DESC_BIT32
(29)

	)

95 
	#DWMAC_DESC_TX_DES1_CHECKSUM_INSERTION_CONTROL
(
v®
è
	`DWMAC_DESC_FLD32
(v®, 27, 28)

	)

96 
	#DWMAC_DESC_TX_DES1_CHECKSUM_INSERTION_CONTROL_GET
(
»g
è
	`DWMAC_DESC_FLD32GET
Ôeg, 27, 28)

	)

97 
	#DWMAC_DESC_TX_DES1_CHECKSUM_INSERTION_CONTROL_SET
(
»g
, 
v®
è
	`DWMAC_DESC_FLD32SET
Ôeg, v®, 27, 28)

	)

98 
	#DWMAC_DESC_TX_DES1_DISABLE_CRC
 
	`DWMAC_DESC_BIT32
(26)

	)

99 
	#DWMAC_DESC_TX_DES1_TRANSMIT_END_OF_RING
 
	`DWMAC_DESC_BIT32
(25)

	)

100 
	#DWMAC_DESC_TX_DES1_SECOND_ADDRESS_CHAINED
 
	`DWMAC_DESC_BIT32
(24)

	)

101 
	#DWMAC_DESC_TX_DES1_DISABLE_PADDING
 
	`DWMAC_DESC_BIT32
(23)

	)

102 
	#DWMAC_DESC_TX_DES1_TRANSMIT_TIMESTAMP_ENABLE
 
	`DWMAC_DESC_BIT32
(22)

	)

103 
	#DWMAC_DESC_TX_DES1_TRANMIT_BUFFER_2_SIZE
(
v®
è
	`DWMAC_DESC_FLD32
(v®, 11, 21)

	)

104 
	#DWMAC_DESC_TX_DES1_TRANMIT_BUFFER_2_SIZE_GET
(
»g
è
	`DWMAC_DESC_FLD32GET
Ôeg, 11, 21)

	)

105 
	#DWMAC_DESC_TX_DES1_TRANMIT_BUFFER_2_SIZE_SET
(
»g
, 
v®
è
	`DWMAC_DESC_FLD32SET
Ôeg, v®, 11, 21)

	)

106 
	#DWMAC_DESC_TX_DES1_TRANSMIT_BUFFER_1_SIZE
(
v®
è
	`DWMAC_DESC_FLD32
(v®, 0, 10)

	)

107 
	#DWMAC_DESC_TX_DES1_TRANSMIT_BUFFER_1_SIZE_GET
(
»g
è
	`DWMAC_DESC_FLD32GET
Ôeg, 0, 10)

	)

108 
	#DWMAC_DESC_TX_DES1_TRANSMIT_BUFFER_1_SIZE_SET
(
»g
, 
v®
è
	`DWMAC_DESC_FLD32SET
Ôeg, v®, 0, 10)

	)

109 
ut32_t
 
	mdes2
;

110 
	#DWMAC_DESC_TX_DES2_BUFF_1_ADDR_PTR
(
v®
è
	`DWMAC_DESC_FLD32
(v®, 0, 31)

	)

111 
	#DWMAC_DESC_TX_DES2_BUFF_1_ADDR_PTR_GET
(
»g
è
	`DWMAC_DESC_FLD32GET
Ôeg, 0, 31)

	)

112 
	#DWMAC_DESC_TX_DES2_BUFF_1_ADDR_PTR_SET
(
»g
, 
v®
è
	`DWMAC_DESC_FLD32SET
Ôeg, v®, 0, 31)

	)

113 
	#DWMAC_DESC_TX_DES2_IEEE_TRANSMIT_FRAME_TIMESTAMP_LOW
(
v®
è
	`DWMAC_DESC_FLD32
(v®, 0, 31)

	)

114 
	#DWMAC_DESC_TX_DES2_IEEE_TRANSMIT_FRAME_TIMESTAMP_LOW_GET
(
»g
è
	`DWMAC_DESC_FLD32GET
Ôeg, 0, 31)

	)

115 
	#DWMAC_DESC_TX_DES2_IEEE_TRANSMIT_FRAME_TIMESTAMP_LOW_SET
(
»g
, 
v®
è
	`DWMAC_DESC_FLD32SET
Ôeg, v®, 0, 31)

	)

116 
ut32_t
 
	mdes3
;

117 
	#DWMAC_DESC_TX_DES3_BUFF_2_ADDR_PTR
(
v®
è
	`DWMAC_DESC_FLD32
(v®, 0, 31)

	)

118 
	#DWMAC_DESC_TX_DES3_BUFF_2_ADDR_PTR_GET
(
»g
è
	`DWMAC_DESC_FLD32GET
Ôeg, 0, 31)

	)

119 
	#DWMAC_DESC_TX_DES3_BUFF_2_ADDR_PTR_SET
(
»g
, 
v®
è
	`DWMAC_DESC_FLD32SET
Ôeg, v®, 0, 31)

	)

120 
	#DWMAC_DESC_TX_DES3_IEEE_TRANSMIT_FRAME_TIMESTAMP_LOW
(
v®
è
	`DWMAC_DESC_FLD32
(v®, 0, 31)

	)

121 
	#DWMAC_DESC_TX_DES3_IEEE_TRANSMIT_FRAME_TIMESTAMP_LOW_GET
(
»g
è
	`DWMAC_DESC_FLD32GET
Ôeg, 0, 31)

	)

122 
	#DWMAC_DESC_TX_DES3_IEEE_TRANSMIT_FRAME_TIMESTAMP_LOW_SET
(
»g
, 
v®
è
	`DWMAC_DESC_FLD32SET
Ôeg, v®, 0, 31)

	)

123 } 
	tdwmac_desc_tx
;

126 
ut32_t
 
	mdes0
;

127 
	#DWMAC_DESC_ERX_DES0_OWN_BIT
 
	`DWMAC_DESC_BIT32
(31)

	)

128 
	#DWMAC_DESC_ERX_DES0_DEST_ADDR_FILTER_FAIL
 
	`DWMAC_DESC_BIT32
(30)

	)

129 
	#DWMAC_DESC_ERX_DES0_FRAME_LENGTH
(
v®
è
	`DWMAC_DESC_FLD32
(v®, 16, 29)

	)

130 
	#DWMAC_DESC_ERX_DES0_FRAME_LENGTH_GET
(
»g
è
	`DWMAC_DESC_FLD32GET
Ôeg, 16, 29)

	)

131 
	#DWMAC_DESC_ERX_DES0_FRAME_LENGTH_SET
(
»g
, 
v®
è
	`DWMAC_DESC_FLD32SET
Ôeg, v®, 16, 29)

	)

132 
	#DWMAC_DESC_ERX_DES0_ERROR_SUMMARY
 
	`DWMAC_DESC_BIT32
(15)

	)

133 
	#DWMAC_DESC_ERX_DES0_DESCRIPTOR_ERROR
 
	`DWMAC_DESC_BIT32
(14)

	)

134 
	#DWMAC_DESC_ERX_DES0_SRC_ADDR_FILTER_FAIL
 
	`DWMAC_DESC_BIT32
(13)

	)

135 
	#DWMAC_DESC_ERX_DES0_LENGTH_ERROR
 
	`DWMAC_DESC_BIT32
(12)

	)

136 
	#DWMAC_DESC_ERX_DES0_OVERFLOW_ERROR
 
	`DWMAC_DESC_BIT32
(11)

	)

137 
	#DWMAC_DESC_ERX_DES0_VLAN_TAG
 
	`DWMAC_DESC_BIT32
(10)

	)

138 
	#DWMAC_DESC_ERX_DES0_FIRST_DESCRIPTOR
 
	`DWMAC_DESC_BIT32
(9)

	)

139 
	#DWMAC_DESC_ERX_DES0_LAST_DESCRIPTOR
 
	`DWMAC_DESC_BIT32
(8)

	)

140 
	#DWMAC_DESC_ERX_DES0_TIMESTAMP_AVAIL_OR_CHECKSUM_ERROR_OR_GIANT_FRAME
 
	`DWMAC_DESC_BIT32
(7)

	)

141 
	#DWMAC_DESC_ERX_DES0_LATE_COLLISION
 
	`DWMAC_DESC_BIT32
(6)

	)

142 
	#DWMAC_DESC_ERX_DES0_FREAME_TYPE
 
	`DWMAC_DESC_BIT32
(5)

	)

143 
	#DWMAC_DESC_ERX_DES0_RECEIVE_WATCHDOG_TIMEOUT
 
	`DWMAC_DESC_BIT32
(4)

	)

144 
	#DWMAC_DESC_ERX_DES0_RECEIVE_ERROR
 
	`DWMAC_DESC_BIT32
(3)

	)

145 
	#DWMAC_DESC_ERX_DES0_DRIBBLE_BIT_ERROR
 
	`DWMAC_DESC_BIT32
(2)

	)

146 
	#DWMAC_DESC_ERX_DES0_CRC_ERROR
 
	`DWMAC_DESC_BIT32
(1)

	)

147 
	#DWMAC_DESC_ERX_DES0_EXT_STATUS_AVAIL_OR_RX_MAC_ADDR_STATUS
 
	`DWMAC_DESC_BIT32
(0)

	)

148 
ut32_t
 
	mdes1
;

149 
	#DWMAC_DESC_ERX_DES1_DISABLE_IRQ_ON_COMPLETION
 
	`DWMAC_DESC_BIT32
(31)

	)

150 
	#DWMAC_DESC_ERX_DES1_RECEIVE_BUFF_2_SIZE
(
v®
è
	`DWMAC_DESC_FLD32
(v®, 16, 28)

	)

151 
	#DWMAC_DESC_ERX_DES1_RECEIVE_BUFF_2_SIZE_GET
(
»g
è
	`DWMAC_DESC_FLD32GET
Ôeg, 16, 28)

	)

152 
	#DWMAC_DESC_ERX_DES1_RECEIVE_BUFF_2_SIZE_SET
(
»g
, 
v®
è
	`DWMAC_DESC_FLD32SET
Ôeg, v®, 16, 28)

	)

153 
	#DWMAC_DESC_ERX_DES1_RECEIVE_END_OF_RING
 
	`DWMAC_DESC_BIT32
(15)

	)

154 
	#DWMAC_DESC_ERX_DES1_SECOND_ADDR_CHAINED
 
	`DWMAC_DESC_BIT32
(14)

	)

155 
	#DWMAC_DESC_ERX_DES1_RECEIVE_BUFF_1_SIZE
(
v®
è
	`DWMAC_DESC_FLD32
(v®, 0, 12)

	)

156 
	#DWMAC_DESC_ERX_DES1_RECEIVE_BUFF_1_SIZE_GET
(
»g
è
	`DWMAC_DESC_FLD32GET
Ôeg, 0, 12)

	)

157 
	#DWMAC_DESC_ERX_DES1_RECEIVE_BUFF_1_SIZE_SET
(
»g
, 
v®
è
	`DWMAC_DESC_FLD32SET
Ôeg, v®, 0, 12)

	)

158 
ut32_t
 
	mdes2
;

159 
	#DWMAC_DESC_ERX_DES2_BUFF_1_ADDR_PTR
(
v®
è
	`DWMAC_DESC_FLD32
(v®, 0, 31)

	)

160 
	#DWMAC_DESC_ERX_DES2_BUFF_1_ADDR_PTR_GET
(
»g
è
	`DWMAC_DESC_FLD32GET
Ôeg, 0, 31)

	)

161 
	#DWMAC_DESC_ERX_DES2_BUFF_1_ADDR_PTR_SET
(
»g
, 
v®
è
	`DWMAC_DESC_FLD32SET
Ôeg, v®, 0, 31)

	)

162 
ut32_t
 
	mdes3
;

163 
	#DWMAC_DESC_ERX_DES3_BUFF_2_ADDR_PTR
(
v®
è
	`DWMAC_DESC_FLD32
(v®, 0, 31)

	)

164 
	#DWMAC_DESC_ERX_DES3_BUFF_2_ADDR_PTR_GET
(
»g
è
	`DWMAC_DESC_FLD32GET
Ôeg, 0, 31)

	)

165 
	#DWMAC_DESC_ERX_DES3_BUFF_2_ADDR_PTR_SET
(
»g
, 
v®
è
	`DWMAC_DESC_FLD32SET
Ôeg, v®, 0, 31)

	)

166 } 
	tdwmac_desc_x
;

169 
ut32_t
 
	mdes0
;

170 
	#DWMAC_DESC_ETX_DES0_OWN_BIT
 
	`DWMAC_DESC_BIT32
(31)

	)

171 
	#DWMAC_DESC_ETX_DES0_IRQ_ON_COMPLETION
 
	`DWMAC_DESC_BIT32
(30)

	)

172 
	#DWMAC_DESC_ETX_DES0_LAST_SEGMENT
 
	`DWMAC_DESC_BIT32
(29)

	)

173 
	#DWMAC_DESC_ETX_DES0_FIRST_SEGMENT
 
	`DWMAC_DESC_BIT32
(28)

	)

174 
	#DWMAC_DESC_ETX_DES0_DISABLE_CRC
 
	`DWMAC_DESC_BIT32
(27)

	)

175 
	#DWMAC_DESC_ETX_DES0_DISABLE_PAD
 
	`DWMAC_DESC_BIT32
(26)

	)

176 
	#DWMAC_DESC_ETX_DES0_TRANSMIT_TIMESTAMP_ENABLE
 
	`DWMAC_DESC_BIT32
(25)

	)

177 
	#DWMAC_DESC_ETX_DES0_CHECKSUM_INSERTION_CONTROL
(
v®
è
	`DWMAC_DESC_FLD32
(v®, 22, 23)

	)

178 
	#DWMAC_DESC_ETX_DES0_CHECKSUM_INSERTION_CONTROL_GET
(
»g
è
	`DWMAC_DESC_FLD32GET
Ôeg, 22, 23)

	)

179 
	#DWMAC_DESC_ETX_DES0_CHECKSUM_INSERTION_CONTROL_SET
(
»g
, 
v®
è
	`DWMAC_DESC_FLD32SET
Ôeg, v®, 22, 23)

	)

180 
	#DWMAC_DESC_ETX_DES0_TRANSMIT_END_OF_RING
 
	`DWMAC_DESC_BIT32
(21)

	)

181 
	#DWMAC_DESC_ETX_DES0_SECOND_ADDR_CHAINED
 
	`DWMAC_DESC_BIT32
(20)

	)

182 
	#DWMAC_DESC_ETX_DES0_TRANSMIT_TIMESTAMP_STATUS
 
	`DWMAC_DESC_BIT32
(17)

	)

183 
	#DWMAC_DESC_ETX_DES0_IP_HEADER_ERROR
 
	`DWMAC_DESC_BIT32
(16)

	)

184 
	#DWMAC_DESC_ETX_DES0_ERROR_SUMMARY
 
	`DWMAC_DESC_BIT32
(15)

	)

185 
	#DWMAC_DESC_ETX_DES0_JABBER_TIMEOUT
 
	`DWMAC_DESC_BIT32
(14)

	)

186 
	#DWMAC_DESC_ETX_DES0_FRAME_FLUSHED
 
	`DWMAC_DESC_BIT32
(13)

	)

187 
	#DWMAC_DESC_ETX_DES0_IP_PAYLOAD_ERROR
 
	`DWMAC_DESC_BIT32
(12)

	)

188 
	#DWMAC_DESC_ETX_DES0_LOSS_OF_CARRIER
 
	`DWMAC_DESC_BIT32
(11)

	)

189 
	#DWMAC_DESC_ETX_DES0_NO_CARRIER
 
	`DWMAC_DESC_BIT32
(10)

	)

190 
	#DWMAC_DESC_ETX_DES0_EXCESSIVE_COLLISION
 
	`DWMAC_DESC_BIT32
(8)

	)

191 
	#DWMAC_DESC_ETX_DES0_VLAN_FRAME
 
	`DWMAC_DESC_BIT32
(7)

	)

192 
	#DWMAC_DESC_ETX_DES0_COLLISION_COUNT
(
v®
è
	`DWMAC_DESC_FLD32
(v®, 3, 6)

	)

193 
	#DWMAC_DESC_ETX_DES0_COLLISION_COUNT_GET
(
»g
è
	`DWMAC_DESC_FLD32GET
Ôeg, 3, 6)

	)

194 
	#DWMAC_DESC_ETX_DES0_COLLISION_COUNT_SET
(
»g
, 
v®
è
	`DWMAC_DESC_FLD32SET
Ôeg, v®, 3, 6)

	)

195 
	#DWMAC_DESC_ETX_DES0_EXCESSIVE_DEFERAL
 
	`DWMAC_DESC_BIT32
(2)

	)

196 
	#DWMAC_DESC_ETX_DES0_UNDERFLOW_ERROR
 
	`DWMAC_DESC_BIT32
(1)

	)

197 
	#DWMAC_DESC_ETX_DES0_DEFERRED_BIT
 
	`DWMAC_DESC_BIT32
(0)

	)

198 
ut32_t
 
	mdes1
;

199 
	#DWMAC_DESC_ETX_DES1_TRANSMIT_BUFFER_2_SIZE
(
v®
è
	`DWMAC_DESC_FLD32
(v®, 16, 28)

	)

200 
	#DWMAC_DESC_ETX_DES1_TRANSMIT_BUFFER_2_SIZE_GET
(
»g
è
	`DWMAC_DESC_FLD32GET
Ôeg, 16, 28)

	)

201 
	#DWMAC_DESC_ETX_DES1_TRANSMIT_BUFFER_2_SIZE_SET
(
»g
, 
v®
è
	`DWMAC_DESC_FLD32SET
Ôeg, v®, 16, 28)

	)

202 
	#DWMAC_DESC_ETX_DES1_TRANSMIT_BUFFER_1_SIZE
(
v®
è
	`DWMAC_DESC_FLD32
(v®, 0, 12)

	)

203 
	#DWMAC_DESC_ETX_DES1_TRANSMIT_BUFFER_1_SIZE_GET
(
»g
è
	`DWMAC_DESC_FLD32GET
Ôeg, 0, 12)

	)

204 
	#DWMAC_DESC_ETX_DES1_TRANSMIT_BUFFER_1_SIZE_SET
(
»g
, 
v®
è
	`DWMAC_DESC_FLD32SET
Ôeg, v®, 0, 12)

	)

205 
ut32_t
 
	mdes2
;

206 
	#DWMAC_DESC_ETX_DES2_BUFF_1_ADDR_PTR
(
v®
è
	`DWMAC_DESC_FLD32
(v®, 0, 31)

	)

207 
	#DWMAC_DESC_ETX_DES2_BUFF_1_ADDR_PTR_GET
(
»g
è
	`DWMAC_DESC_FLD32GET
Ôeg, 0, 31)

	)

208 
	#DWMAC_DESC_ETX_DES2_BUFF_1_ADDR_PTR_SET
(
»g
, 
v®
è
	`DWMAC_DESC_FLD32SET
Ôeg, v®, 0, 31)

	)

209 
ut32_t
 
	mdes3
;

210 
	#DWMAC_DESC_ETX_DES3_BUFF_2_ADDR_PTR
(
v®
è
	`DWMAC_DESC_FLD32
(v®, 0, 31)

	)

211 
	#DWMAC_DESC_ETX_DES3_BUFF_2_ADDR_PTR_GET
(
»g
è
	`DWMAC_DESC_FLD32GET
Ôeg, 0, 31)

	)

212 
	#DWMAC_DESC_ETX_DES3_BUFF_2_ADDR_PTR_SET
(
»g
, 
v®
è
	`DWMAC_DESC_FLD32SET
Ôeg, v®, 0, 31)

	)

213 } 
	tdwmac_desc_x
;

216 
dwmac_desc_rx
 
	mrx
;

217 
dwmac_desc_tx
 
	mtx
;

218 
dwmac_desc_x
 
	mx
;

219 
dwmac_desc_x
 
	mx
;

220 } 
	tdwmac_desc
;

223 
dwmac_desc_x
 
	mdes0_3
;

224 
ut32_t
 
	mdes4
;

225 
	#DWMAC_DESC_EXT_ERX_DES4_LAYER3_AND_LAYER4_FILTER_MATCHED
(
v®
è
	`DWMAC_DESC_FLD32
(v®, 26, 27)

	)

226 
	#DWMAC_DESC_EXT_ERX_DES4_LAYER3_AND_LAYER4_FILTER_MATCHED_GET
(
»g
è
	`DWMAC_DESC_FLD32GET
Ôeg, 26, 27)

	)

227 
	#DWMAC_DESC_EXT_ERX_DES4_LAYER3_AND_LAYER4_FILTER_MATCHED_SET
(
»g
, 
v®
è
	`DWMAC_DESC_FLD32SET
Ôeg, v®, 26, 27)

	)

228 
	#DWMAC_DESC_EXT_ERX_DES4_LAYER4_FILTER_MATCH
 
	`DWMAC_DESC_BIT32
(25)

	)

229 
	#DWMAC_DESC_EXT_ERX_DES4_LAYER3_FILTER_MATCH
 
	`DWMAC_DESC_BIT32
(24)

	)

230 
	#DWMAC_DESC_EXT_ERX_DES4_TIMESTAMP_DROPPED
 
	`DWMAC_DESC_BIT32
(14)

	)

231 
	#DWMAC_DESC_EXT_ERX_DES4_PTP_VERSION
 
	`DWMAC_DESC_BIT32
(13)

	)

232 
	#DWMAC_DESC_EXT_ERX_DES4_PTP_FRAME_TYPE
 
	`DWMAC_DESC_BIT32
(12)

	)

233 
	#DWMAC_DESC_EXT_ERX_DES4_MESSAGE_TYPE
(
v®
è
	`DWMAC_DESC_FLD32
(v®, 8, 11)

	)

234 
	#DWMAC_DESC_EXT_ERX_DES4_MESSAGE_TYPE_GET
(
»g
è
	`DWMAC_DESC_FLD32GET
Ôeg, 8, 11)

	)

235 
	#DWMAC_DESC_EXT_ERX_DES4_MESSAGE_TYPE_SET
(
»g
, 
v®
è
	`DWMAC_DESC_FLD32SET
Ôeg, v®, 8, 11)

	)

236 
	#DWMAC_DESC_EXT_ERX_DES4_IPV6_PACKET_RECEIVED
 
	`DWMAC_DESC_BIT32
(7)

	)

237 
	#DWMAC_DESC_EXT_ERX_DES4_IPV4_PACKET_RECEIVED
 
	`DWMAC_DESC_BIT32
(6)

	)

238 
	#DWMAC_DESC_EXT_ERX_DES4_IP_CHECKSUM_BYPASSED
 
	`DWMAC_DESC_BIT32
(5)

	)

239 
	#DWMAC_DESC_EXT_ERX_DES4_IP_PAYLOAD_ERROR
 
	`DWMAC_DESC_BIT32
(4)

	)

240 
	#DWMAC_DESC_EXT_ERX_DES4_IP_HEADER_ERROR
 
	`DWMAC_DESC_BIT32
(3)

	)

241 
	#DWMAC_DESC_EXT_ERX_DES4_IP_PAYLOAD_TYPE
(
v®
è
	`DWMAC_DESC_FLD32
(v®, 0, 2)

	)

242 
	#DWMAC_DESC_EXT_ERX_DES4_IP_PAYLOAD_TYPE_GET
(
»g
è
	`DWMAC_DESC_FLD32GET
Ôeg, 0, 2)

	)

243 
	#DWMAC_DESC_EXT_ERX_DES4_IP_PAYLOAD_TYPE_SET
(
»g
, 
v®
è
	`DWMAC_DESC_FLD32SET
Ôeg, v®, 0, 2)

	)

244 
ut32_t
 
	mdes5
;

245 
ut32_t
 
	mdes6
;

246 
	#DWMAC_DESC_EXT_ERX_DES6_RECEIVE_FRAME_TIMESTAMP_LOW
(
v®
è
	`DWMAC_DESC_FLD32
(v®, 0, 31)

	)

247 
	#DWMAC_DESC_EXT_ERX_DES6_RECEIVE_FRAME_TIMESTAMP_LOW_GET
(
»g
è
	`DWMAC_DESC_FLD32GET
Ôeg, 0, 31)

	)

248 
	#DWMAC_DESC_EXT_ERX_DES6_RECEIVE_FRAME_TIMESTAMP_LOW_SET
(
»g
, 
v®
è
	`DWMAC_DESC_FLD32SET
Ôeg, v®, 0, 31)

	)

249 
ut32_t
 
	mdes7
;

250 
	#DWMAC_DESC_EXT_ERX_DES7_RECEIVE_FRAME_TIMESTAMP_HIGH
(
v®
è
	`DWMAC_DESC_FLD32
(v®, 0, 31)

	)

251 
	#DWMAC_DESC_EXT_ERX_DES7_RECEIVE_FRAME_TIMESTAMP_HIGH_GET
(
»g
è
	`DWMAC_DESC_FLD32GET
Ôeg, 0, 31)

	)

252 
	#DWMAC_DESC_EXT_ERX_DES7_RECEIVE_FRAME_TIMESTAMP_HIGH_SET
(
»g
, 
v®
è
	`DWMAC_DESC_FLD32SET
Ôeg, v®, 0, 31)

	)

253 } 
	tdwmac_desc_ext_x
;

256 
dwmac_desc_x
 
	mdes0_3
;

257 
ut32_t
 
	mdes4
;

258 
ut32_t
 
	mdes5
;

259 
ut32_t
 
	mdes6
;

260 
	#DWMAC_DESC_EXT_ETX_DES6_TRANSMIT_FRAME_TIMESTAMP_LOW
(
v®
è
	`DWMAC_DESC_FLD32
(v®, 0, 31)

	)

261 
	#DWMAC_DESC_EXT_ETX_DES6_TRANSMIT_FRAME_TIMESTAMP_LOW_GET
(
»g
è
	`DWMAC_DESC_FLD32GET
Ôeg, 0, 31)

	)

262 
	#DWMAC_DESC_EXT_ETX_DES6_TRANSMIT_FRAME_TIMESTAMP_LOW_SET
(
»g
, 
v®
è
	`DWMAC_DESC_FLD32SET
Ôeg, v®, 0, 31)

	)

263 
ut32_t
 
	mdes7
;

264 
	#DWMAC_DESC_EXT_ETX_DES7_TRANSMIT_FRAME_TIMESTAMP_HIGH
(
v®
è
	`DWMAC_DESC_FLD32
(v®, 0, 31)

	)

265 
	#DWMAC_DESC_EXT_ETX_DES7_TRANSMIT_FRAME_TIMESTAMP_HIGH_GET
(
»g
è
	`DWMAC_DESC_FLD32GET
Ôeg, 0, 31)

	)

266 
	#DWMAC_DESC_EXT_ETX_DES7_TRANSMIT_FRAME_TIMESTAMP_HIGH_SET
(
»g
, 
v®
è
	`DWMAC_DESC_FLD32SET
Ôeg, v®, 0, 31)

	)

267 } 
	tdwmac_desc_ext_x
;

270 
dwmac_desc_ext_x
 
	mx
;

271 
dwmac_desc_ext_x
 
	mx
;

272 } 
	tdwmac_desc_ext
;

	@src/libchip/network/dwmac-regs.h

1 #iâdeà
MAC_REGS_H


2 
	#MAC_REGS_H


	)

4 
	~<¡dt.h
>

6 
	#DWMAC_REGS_BIT32
(
b
) \

7 ((
ut32_t
è(((ut32_tè1è<< (
b
)))

	)

9 
	#DWMAC_REGS_MSK32
(
f¡_b
, 
Ï¡_b
) \

10 ((
ut32_t
è((
	`DWMAC_REGS_BIT32
((
Ï¡_b
è- (
f¡_b
è+ 1è- 1è<< (f¡_b)))

	)

12 
	#DWMAC_REGS_FLD32
(
v®
, 
f¡_b
, 
Ï¡_b
) \

13 ((
ut32_t
) \

14 ((((
ut32_t
è(
v®
)è<< (
f¡_b
)è& 
	`DWMAC_REGS_MSK32
(f¡_b, 
Ï¡_b
)))

	)

16 
	#DWMAC_REGS_FLD32GET
(
»g
, 
f¡_b
, 
Ï¡_b
) \

17 ((
ut32_t
è(((
»g
è& 
	`DWMAC_REGS_MSK32
(
f¡_b
, 
Ï¡_b
)è>> (f¡_b)))

	)

19 
	#DWMAC_REGS_FLD32SET
(
»g
, 
v®
, 
f¡_b
, 
Ï¡_b
) \

20 ((
ut32_t
è(((
»g
è& ~
	`DWMAC_REGS_MSK32
(
f¡_b
, 
Ï¡_b
)) \

21 | 
	`DWMAC_REGS_FLD32
(
v®
, 
f¡_b
, 
Ï¡_b
)))

	)

24 
ut32_t
 
	mhigh
;

25 
	#MAC_HIGH_ADDRHI
(
v®
è
	`DWMAC_REGS_FLD32
(v®, 0, 15)

	)

26 
	#MAC_HIGH_ADDRHI_GET
(
»g
è
	`DWMAC_REGS_FLD32GET
Ôeg, 0, 15)

	)

27 
	#MAC_HIGH_ADDRHI_SET
(
»g
, 
v®
è
	`DWMAC_REGS_FLD32SET
Ôeg, v®, 0, 15)

	)

28 
	#MAC_HIGH_MBC0
 
	`DWMAC_REGS_BIT32
(24)

	)

29 
	#MAC_HIGH_MBC1
 
	`DWMAC_REGS_BIT32
(25)

	)

30 
	#MAC_HIGH_MBC2
 
	`DWMAC_REGS_BIT32
(26)

	)

31 
	#MAC_HIGH_MBC3
 
	`DWMAC_REGS_BIT32
(27)

	)

32 
	#MAC_HIGH_MBC4
 
	`DWMAC_REGS_BIT32
(28)

	)

33 
	#MAC_HIGH_MBC5
 
	`DWMAC_REGS_BIT32
(29)

	)

34 
	#MAC_HIGH_SA
 
	`DWMAC_REGS_BIT32
(30)

	)

35 
	#MAC_HIGH_AE
 
	`DWMAC_REGS_BIT32
(31)

	)

36 
ut32_t
 
	mlow
;

37 
	#MAC_LOW_ADDRLO
(
v®
è
	`DWMAC_REGS_FLD32
(v®, 0, 32)

	)

38 
	#MAC_LOW_ADDRLO_GET
(
»g
è
	`DWMAC_REGS_FLD32GET
Ôeg, 0, 32)

	)

39 
	#MAC_LOW_ADDRLO_SET
(
»g
, 
v®
è
	`DWMAC_REGS_FLD32SET
Ôeg, v®, 0, 32)

	)

40 } 
	tmac
;

43 
ut32_t
 
	mmac_cÚfigu¿tiÚ
;

44 
	#MACGRP_MAC_CONFIGURATION_PRELEN
(
v®
è
	`DWMAC_REGS_FLD32
(v®, 0, 1)

	)

45 
	#MACGRP_MAC_CONFIGURATION_PRELEN_GET
(
»g
è
	`DWMAC_REGS_FLD32GET
Ôeg, 0, 1)

	)

46 
	#MACGRP_MAC_CONFIGURATION_PRELEN_SET
(
»g
, 
v®
è
	`DWMAC_REGS_FLD32SET
Ôeg, v®, 0, 1)

	)

47 
	#MACGRP_MAC_CONFIGURATION_RE
 
	`DWMAC_REGS_BIT32
(2)

	)

48 
	#MACGRP_MAC_CONFIGURATION_TE
 
	`DWMAC_REGS_BIT32
(3)

	)

49 
	#MACGRP_MAC_CONFIGURATION_DC
 
	`DWMAC_REGS_BIT32
(4)

	)

50 
	#MACGRP_MAC_CONFIGURATION_BL
(
v®
è
	`DWMAC_REGS_FLD32
(v®, 5, 6)

	)

51 
	#MACGRP_MAC_CONFIGURATION_BL_GET
(
»g
è
	`DWMAC_REGS_FLD32GET
Ôeg, 5, 6)

	)

52 
	#MACGRP_MAC_CONFIGURATION_BL_SET
(
»g
, 
v®
è
	`DWMAC_REGS_FLD32SET
Ôeg, v®, 5, 6)

	)

53 
	#MACGRP_MAC_CONFIGURATION_ACS
 
	`DWMAC_REGS_BIT32
(7)

	)

54 
	#MACGRP_MAC_CONFIGURATION_LUD
 
	`DWMAC_REGS_BIT32
(8)

	)

55 
	#MACGRP_MAC_CONFIGURATION_DR
 
	`DWMAC_REGS_BIT32
(9)

	)

56 
	#MACGRP_MAC_CONFIGURATION_IPC
 
	`DWMAC_REGS_BIT32
(10)

	)

57 
	#MACGRP_MAC_CONFIGURATION_DM
 
	`DWMAC_REGS_BIT32
(11)

	)

58 
	#MACGRP_MAC_CONFIGURATION_LM
 
	`DWMAC_REGS_BIT32
(12)

	)

59 
	#MACGRP_MAC_CONFIGURATION_DO
 
	`DWMAC_REGS_BIT32
(13)

	)

60 
	#MACGRP_MAC_CONFIGURATION_FES
 
	`DWMAC_REGS_BIT32
(14)

	)

61 
	#MACGRP_MAC_CONFIGURATION_PS
 
	`DWMAC_REGS_BIT32
(15)

	)

62 
	#MACGRP_MAC_CONFIGURATION_DCRS
 
	`DWMAC_REGS_BIT32
(16)

	)

63 
	#MACGRP_MAC_CONFIGURATION_IFG
(
v®
è
	`DWMAC_REGS_FLD32
(v®, 17, 19)

	)

64 
	#MACGRP_MAC_CONFIGURATION_IFG_GET
(
»g
è
	`DWMAC_REGS_FLD32GET
Ôeg, 17, 19)

	)

65 
	#MACGRP_MAC_CONFIGURATION_IFG_SET
(
»g
, 
v®
è
	`DWMAC_REGS_FLD32SET
Ôeg, v®, 17, 19)

	)

66 
	#MACGRP_MAC_CONFIGURATION_JE
 
	`DWMAC_REGS_BIT32
(20)

	)

67 
	#MACGRP_MAC_CONFIGURATION_BE
 
	`DWMAC_REGS_BIT32
(21)

	)

68 
	#MACGRP_MAC_CONFIGURATION_JD
 
	`DWMAC_REGS_BIT32
(22)

	)

69 
	#MACGRP_MAC_CONFIGURATION_WD
 
	`DWMAC_REGS_BIT32
(23)

	)

70 
	#MACGRP_MAC_CONFIGURATION_TC
 
	`DWMAC_REGS_BIT32
(24)

	)

71 
	#MACGRP_MAC_CONFIGURATION_CST
 
	`DWMAC_REGS_BIT32
(25)

	)

72 
	#MACGRP_MAC_CONFIGURATION_TWOKPE
 
	`DWMAC_REGS_BIT32
(27)

	)

73 
ut32_t
 
	mmac_äame_fr
;

74 
	#MACGRP_MAC_FRAME_FILTER_PR
 
	`DWMAC_REGS_BIT32
(0)

	)

75 
	#MACGRP_MAC_FRAME_FILTER_HUC
 
	`DWMAC_REGS_BIT32
(1)

	)

76 
	#MACGRP_MAC_FRAME_FILTER_HMC
 
	`DWMAC_REGS_BIT32
(2)

	)

77 
	#MACGRP_MAC_FRAME_FILTER_DAIF
 
	`DWMAC_REGS_BIT32
(3)

	)

78 
	#MACGRP_MAC_FRAME_FILTER_PM
 
	`DWMAC_REGS_BIT32
(4)

	)

79 
	#MACGRP_MAC_FRAME_FILTER_DBF
 
	`DWMAC_REGS_BIT32
(5)

	)

80 
	#MACGRP_MAC_FRAME_FILTER_PCF
(
v®
è
	`DWMAC_REGS_FLD32
(v®, 6, 7)

	)

81 
	#MACGRP_MAC_FRAME_FILTER_PCF_GET
(
»g
è
	`DWMAC_REGS_FLD32GET
Ôeg, 6, 7)

	)

82 
	#MACGRP_MAC_FRAME_FILTER_PCF_SET
(
»g
, 
v®
è
	`DWMAC_REGS_FLD32SET
Ôeg, v®, 6, 7)

	)

83 
	#MACGRP_MAC_FRAME_FILTER_SAIF
 
	`DWMAC_REGS_BIT32
(8)

	)

84 
	#MACGRP_MAC_FRAME_FILTER_SAF
 
	`DWMAC_REGS_BIT32
(9)

	)

85 
	#MACGRP_MAC_FRAME_FILTER_HPF
 
	`DWMAC_REGS_BIT32
(10)

	)

86 
	#MACGRP_MAC_FRAME_FILTER_VTFE
 
	`DWMAC_REGS_BIT32
(16)

	)

87 
	#MACGRP_MAC_FRAME_FILTER_IPFE
 
	`DWMAC_REGS_BIT32
(20)

	)

88 
	#MACGRP_MAC_FRAME_FILTER_DNTU
 
	`DWMAC_REGS_BIT32
(21)

	)

89 
	#MACGRP_MAC_FRAME_FILTER_RA
 
	`DWMAC_REGS_BIT32
(31)

	)

90 
ut32_t
 
	m»£rved_08
[2];

91 
ut32_t
 
	mgmii_add»ss
;

92 
	#MACGRP_GMII_ADDRESS_GMII_BUSY
 
	`DWMAC_REGS_BIT32
(0)

	)

93 
	#MACGRP_GMII_ADDRESS_GMII_WRITE
 
	`DWMAC_REGS_BIT32
(1)

	)

94 
	#MACGRP_GMII_ADDRESS_CSR_CLOCK_RANGE
(
v®
è
	`DWMAC_REGS_FLD32
(v®, 2, 5)

	)

95 
	#MACGRP_GMII_ADDRESS_CSR_CLOCK_RANGE_GET
(
»g
è
	`DWMAC_REGS_FLD32GET
Ôeg, 2, 5)

	)

96 
	#MACGRP_GMII_ADDRESS_CSR_CLOCK_RANGE_SET
(
»g
, 
v®
è
	`DWMAC_REGS_FLD32SET
Ôeg, v®, 2, 5)

	)

97 
	#MACGRP_GMII_ADDRESS_GMII_REGISTER
(
v®
è
	`DWMAC_REGS_FLD32
(v®, 6, 10)

	)

98 
	#MACGRP_GMII_ADDRESS_GMII_REGISTER_GET
(
»g
è
	`DWMAC_REGS_FLD32GET
Ôeg, 6, 10)

	)

99 
	#MACGRP_GMII_ADDRESS_GMII_REGISTER_SET
(
»g
, 
v®
è
	`DWMAC_REGS_FLD32SET
Ôeg, v®, 6, 10)

	)

100 
	#MACGRP_GMII_ADDRESS_PHYSICAL_LAYER_ADDRESS
(
v®
è
	`DWMAC_REGS_FLD32
(v®, 11, 15)

	)

101 
	#MACGRP_GMII_ADDRESS_PHYSICAL_LAYER_ADDRESS_GET
(
»g
è
	`DWMAC_REGS_FLD32GET
Ôeg, 11, 15)

	)

102 
	#MACGRP_GMII_ADDRESS_PHYSICAL_LAYER_ADDRESS_SET
(
»g
, 
v®
è
	`DWMAC_REGS_FLD32SET
Ôeg, v®, 11, 15)

	)

103 
ut32_t
 
	mgmii_d©a
;

104 
	#MACGRP_GMII_DATA_GMII_DATA
(
v®
è
	`DWMAC_REGS_FLD32
(v®, 0, 15)

	)

105 
	#MACGRP_GMII_DATA_GMII_DATA_GET
(
»g
è
	`DWMAC_REGS_FLD32GET
Ôeg, 0, 15)

	)

106 
	#MACGRP_GMII_DATA_GMII_DATA_SET
(
»g
, 
v®
è
	`DWMAC_REGS_FLD32SET
Ôeg, v®, 0, 15)

	)

107 
ut32_t
 
	m»£rved_18
[9];

108 
ut32_t
 
	m¼u±_mask
;

109 
	#MACGRP_INTERRUPT_MASK_RGSMIIIM
 
	`DWMAC_REGS_BIT32
(0)

	)

110 
	#MACGRP_INTERRUPT_MASK_PCSLCHGIM
 
	`DWMAC_REGS_BIT32
(1)

	)

111 
	#MACGRP_INTERRUPT_MASK_PCSANCIM
 
	`DWMAC_REGS_BIT32
(2)

	)

112 
	#MACGRP_INTERRUPT_MASK_TSIM
 
	`DWMAC_REGS_BIT32
(9)

	)

113 
	#MACGRP_INTERRUPT_MASK_LPIIM
 
	`DWMAC_REGS_BIT32
(10)

	)

114 
mac
 
	mmac_addr0_15
[16];

115 
ut32_t
 
	m»£rved_c0
[16];

116 
ut32_t
 
	mmmc_cÚÞ
;

117 
	#MACGRP_MMC_CONTROL_CNTRST
 
	`DWMAC_REGS_BIT32
(0)

	)

118 
	#MACGRP_MMC_CONTROL_CNTSTOPRO
 
	`DWMAC_REGS_BIT32
(1)

	)

119 
	#MACGRP_MMC_CONTROL_RSTONRD
 
	`DWMAC_REGS_BIT32
(2)

	)

120 
	#MACGRP_MMC_CONTROL_CNTFREEZ
 
	`DWMAC_REGS_BIT32
(3)

	)

121 
	#MACGRP_MMC_CONTROL_CNTPRST
 
	`DWMAC_REGS_BIT32
(4)

	)

122 
	#MACGRP_MMC_CONTROL_CNTPRSTLVL
 
	`DWMAC_REGS_BIT32
(5)

	)

123 
	#MACGRP_MMC_CONTROL_UCDBC
 
	`DWMAC_REGS_BIT32
(8)

	)

124 
ut32_t
 
	mmmc_»ûive_¼u±
;

125 
	#MACGRP_MMC_RECEIVE_INTERRUPT_RXGBFRMIS
 
	`DWMAC_REGS_BIT32
(0)

	)

126 
	#MACGRP_MMC_RECEIVE_INTERRUPT_RXGBOCTIS
 
	`DWMAC_REGS_BIT32
(1)

	)

127 
	#MACGRP_MMC_RECEIVE_INTERRUPT_RXGOCTIS
 
	`DWMAC_REGS_BIT32
(2)

	)

128 
	#MACGRP_MMC_RECEIVE_INTERRUPT_RXBCGFIS
 
	`DWMAC_REGS_BIT32
(3)

	)

129 
	#MACGRP_MMC_RECEIVE_INTERRUPT_RXMCGFIS
 
	`DWMAC_REGS_BIT32
(4)

	)

130 
	#MACGRP_MMC_RECEIVE_INTERRUPT_RXCRCERFIS
 
	`DWMAC_REGS_BIT32
(5)

	)

131 
	#MACGRP_MMC_RECEIVE_INTERRUPT_RXALGNERFIS
 
	`DWMAC_REGS_BIT32
(6)

	)

132 
	#MACGRP_MMC_RECEIVE_INTERRUPT_RXRUNTFIS
 
	`DWMAC_REGS_BIT32
(7)

	)

133 
	#MACGRP_MMC_RECEIVE_INTERRUPT_RXJABERFIS
 
	`DWMAC_REGS_BIT32
(8)

	)

134 
	#MACGRP_MMC_RECEIVE_INTERRUPT_RXUSIZEGFIS
 
	`DWMAC_REGS_BIT32
(9)

	)

135 
	#MACGRP_MMC_RECEIVE_INTERRUPT_RXOSIZEGFIS
 
	`DWMAC_REGS_BIT32
(10)

	)

136 
	#MACGRP_MMC_RECEIVE_INTERRUPT_RX64OCTGBFIS
 
	`DWMAC_REGS_BIT32
(11)

	)

137 
	#MACGRP_MMC_RECEIVE_INTERRUPT_RX65T127OCTGBFIS
 
	`DWMAC_REGS_BIT32
(12)

	)

138 
	#MACGRP_MMC_RECEIVE_INTERRUPT_RX128T255OCTGBFIS
 
	`DWMAC_REGS_BIT32
(13)

	)

139 
	#MACGRP_MMC_RECEIVE_INTERRUPT_RX256T511OCTGBFIS
 
	`DWMAC_REGS_BIT32
(14)

	)

140 
	#MACGRP_MMC_RECEIVE_INTERRUPT_RX512T1023OCTGBFIS
 
	`DWMAC_REGS_BIT32
(15)

	)

141 
	#MACGRP_MMC_RECEIVE_INTERRUPT_RX1024TMAXOCTGBFIS
 
	`DWMAC_REGS_BIT32
(16)

	)

142 
	#MACGRP_MMC_RECEIVE_INTERRUPT_RXUCGFIS
 
	`DWMAC_REGS_BIT32
(17)

	)

143 
	#MACGRP_MMC_RECEIVE_INTERRUPT_RXLENERFIS
 
	`DWMAC_REGS_BIT32
(18)

	)

144 
	#MACGRP_MMC_RECEIVE_INTERRUPT_RXORANGEFIS
 
	`DWMAC_REGS_BIT32
(19)

	)

145 
	#MACGRP_MMC_RECEIVE_INTERRUPT_RXPAUSFIS
 
	`DWMAC_REGS_BIT32
(20)

	)

146 
	#MACGRP_MMC_RECEIVE_INTERRUPT_RXFOVFIS
 
	`DWMAC_REGS_BIT32
(21)

	)

147 
	#MACGRP_MMC_RECEIVE_INTERRUPT_RXVLANGBFIS
 
	`DWMAC_REGS_BIT32
(22)

	)

148 
	#MACGRP_MMC_RECEIVE_INTERRUPT_RXWDOGFIS
 
	`DWMAC_REGS_BIT32
(23)

	)

149 
	#MACGRP_MMC_RECEIVE_INTERRUPT_RXRCVERRFIS
 
	`DWMAC_REGS_BIT32
(24)

	)

150 
	#MACGRP_MMC_RECEIVE_INTERRUPT_RXCTRLFIS
 
	`DWMAC_REGS_BIT32
(25)

	)

151 
ut32_t
 
	mmmc_ªsm_¼u±
;

152 
	#MACGRP_MMC_TRANSMIT_INTERRUPT_TXGBOCTIS
 
	`DWMAC_REGS_BIT32
(0)

	)

153 
	#MACGRP_MMC_TRANSMIT_INTERRUPT_TXGBFRMIS
 
	`DWMAC_REGS_BIT32
(1)

	)

154 
	#MACGRP_MMC_TRANSMIT_INTERRUPT_TXBCGFIS
 
	`DWMAC_REGS_BIT32
(2)

	)

155 
	#MACGRP_MMC_TRANSMIT_INTERRUPT_TXMCGFIS
 
	`DWMAC_REGS_BIT32
(3)

	)

156 
	#MACGRP_MMC_TRANSMIT_INTERRUPT_TX64OCTGBFIS
 
	`DWMAC_REGS_BIT32
(4)

	)

157 
	#MACGRP_MMC_TRANSMIT_INTERRUPT_TX65T127OCTGBFIS
 
	`DWMAC_REGS_BIT32
(5)

	)

158 
	#MACGRP_MMC_TRANSMIT_INTERRUPT_TX128T255OCTGBFIS
 
	`DWMAC_REGS_BIT32
(6)

	)

159 
	#MACGRP_MMC_TRANSMIT_INTERRUPT_TX256T511OCTGBFIS
 
	`DWMAC_REGS_BIT32
(7)

	)

160 
	#MACGRP_MMC_TRANSMIT_INTERRUPT_TX512T1023OCTGBFIS
 
	`DWMAC_REGS_BIT32
(8)

	)

161 
	#MACGRP_MMC_TRANSMIT_INTERRUPT_TX1024TMAXOCTGBFIS
 
	`DWMAC_REGS_BIT32
(9)

	)

162 
	#MACGRP_MMC_TRANSMIT_INTERRUPT_TXUCGBFIS
 
	`DWMAC_REGS_BIT32
(10)

	)

163 
	#MACGRP_MMC_TRANSMIT_INTERRUPT_TXMCGBFIS
 
	`DWMAC_REGS_BIT32
(11)

	)

164 
	#MACGRP_MMC_TRANSMIT_INTERRUPT_TXBCGBFIS
 
	`DWMAC_REGS_BIT32
(12)

	)

165 
	#MACGRP_MMC_TRANSMIT_INTERRUPT_TXUFLOWERFIS
 
	`DWMAC_REGS_BIT32
(13)

	)

166 
	#MACGRP_MMC_TRANSMIT_INTERRUPT_TXSCOLGFIS
 
	`DWMAC_REGS_BIT32
(14)

	)

167 
	#MACGRP_MMC_TRANSMIT_INTERRUPT_TXMCOLGFIS
 
	`DWMAC_REGS_BIT32
(15)

	)

168 
	#MACGRP_MMC_TRANSMIT_INTERRUPT_TXDEFFIS
 
	`DWMAC_REGS_BIT32
(16)

	)

169 
	#MACGRP_MMC_TRANSMIT_INTERRUPT_TXLATCOLFIS
 
	`DWMAC_REGS_BIT32
(17)

	)

170 
	#MACGRP_MMC_TRANSMIT_INTERRUPT_TXEXCOLFIS
 
	`DWMAC_REGS_BIT32
(18)

	)

171 
	#MACGRP_MMC_TRANSMIT_INTERRUPT_TXCARERFIS
 
	`DWMAC_REGS_BIT32
(19)

	)

172 
	#MACGRP_MMC_TRANSMIT_INTERRUPT_TXGOCTIS
 
	`DWMAC_REGS_BIT32
(20)

	)

173 
	#MACGRP_MMC_TRANSMIT_INTERRUPT_TXGFRMIS
 
	`DWMAC_REGS_BIT32
(21)

	)

174 
	#MACGRP_MMC_TRANSMIT_INTERRUPT_TXEXDEFFIS
 
	`DWMAC_REGS_BIT32
(22)

	)

175 
	#MACGRP_MMC_TRANSMIT_INTERRUPT_TXPAUSFIS
 
	`DWMAC_REGS_BIT32
(23)

	)

176 
	#MACGRP_MMC_TRANSMIT_INTERRUPT_TXVLANGFIS
 
	`DWMAC_REGS_BIT32
(24)

	)

177 
	#MACGRP_MMC_TRANSMIT_INTERRUPT_TXOSIZEGFIS
 
	`DWMAC_REGS_BIT32
(25)

	)

178 
ut32_t
 
	mmmc_»ûive_¼u±_mask
;

179 
	#MACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXGBFRMIM
 
	`DWMAC_REGS_BIT32
(0)

	)

180 
	#MACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXGBOCTIM
 
	`DWMAC_REGS_BIT32
(1)

	)

181 
	#MACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXGOCTIM
 
	`DWMAC_REGS_BIT32
(2)

	)

182 
	#MACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXBCGFIM
 
	`DWMAC_REGS_BIT32
(3)

	)

183 
	#MACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXMCGFIM
 
	`DWMAC_REGS_BIT32
(4)

	)

184 
	#MACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXCRCERFIM
 
	`DWMAC_REGS_BIT32
(5)

	)

185 
	#MACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXALGNERFIM
 
	`DWMAC_REGS_BIT32
(6)

	)

186 
	#MACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXRUNTFIM
 
	`DWMAC_REGS_BIT32
(7)

	)

187 
	#MACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXJABERFIM
 
	`DWMAC_REGS_BIT32
(8)

	)

188 
	#MACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXUSIZEGFIM
 
	`DWMAC_REGS_BIT32
(9)

	)

189 
	#MACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXOSIZEGFIM
 
	`DWMAC_REGS_BIT32
(10)

	)

190 
	#MACGRP_MMC_RECEIVE_INTERRUPT_MASK_RX64OCTGBFIM
 
	`DWMAC_REGS_BIT32
(11)

	)

191 
	#MACGRP_MMC_RECEIVE_INTERRUPT_MASK_RX65T127OCTGBFIM
 
	`DWMAC_REGS_BIT32
(12)

	)

192 
	#MACGRP_MMC_RECEIVE_INTERRUPT_MASK_RX128T255OCTGBFIM
 
	`DWMAC_REGS_BIT32
(13)

	)

193 
	#MACGRP_MMC_RECEIVE_INTERRUPT_MASK_RX256T511OCTGBFIM
 
	`DWMAC_REGS_BIT32
(14)

	)

194 
	#MACGRP_MMC_RECEIVE_INTERRUPT_MASK_RX512T1023OCTGBFIM
 
	`DWMAC_REGS_BIT32
(15)

	)

195 
	#MACGRP_MMC_RECEIVE_INTERRUPT_MASK_RX1024TMAXOCTGBFIM
 
	`DWMAC_REGS_BIT32
(16)

	)

196 
	#MACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXUCGFIM
 
	`DWMAC_REGS_BIT32
(17)

	)

197 
	#MACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXLENERFIM
 
	`DWMAC_REGS_BIT32
(18)

	)

198 
	#MACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXORANGEFIM
 
	`DWMAC_REGS_BIT32
(19)

	)

199 
	#MACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXPAUSFIM
 
	`DWMAC_REGS_BIT32
(20)

	)

200 
	#MACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXFOVFIM
 
	`DWMAC_REGS_BIT32
(21)

	)

201 
	#MACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXVLANGBFIM
 
	`DWMAC_REGS_BIT32
(22)

	)

202 
	#MACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXWDOGFIM
 
	`DWMAC_REGS_BIT32
(23)

	)

203 
	#MACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXRCVERRFIM
 
	`DWMAC_REGS_BIT32
(24)

	)

204 
	#MACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXCTRLFIM
 
	`DWMAC_REGS_BIT32
(25)

	)

205 
ut32_t
 
	mmmc_ªsm_¼u±_mask
;

206 
	#MACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXGBOCTIM
 
	`DWMAC_REGS_BIT32
(0)

	)

207 
	#MACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXGBFRMIM
 
	`DWMAC_REGS_BIT32
(1)

	)

208 
	#MACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXBCGFIM
 
	`DWMAC_REGS_BIT32
(2)

	)

209 
	#MACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXMCGFIM
 
	`DWMAC_REGS_BIT32
(3)

	)

210 
	#MACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TX64OCTGBFIM
 
	`DWMAC_REGS_BIT32
(4)

	)

211 
	#MACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TX65T127OCTGBFIM
 
	`DWMAC_REGS_BIT32
(5)

	)

212 
	#MACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TX128T255OCTGBFIM
 
	`DWMAC_REGS_BIT32
(6)

	)

213 
	#MACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TX256T511OCTGBFIM
 
	`DWMAC_REGS_BIT32
(7)

	)

214 
	#MACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TX512T1023OCTGBFIM
 
	`DWMAC_REGS_BIT32
(8)

	)

215 
	#MACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TX1024TMAXOCTGBFIM
 
	`DWMAC_REGS_BIT32
(9)

	)

216 
	#MACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXUCGBFIM
 
	`DWMAC_REGS_BIT32
(10)

	)

217 
	#MACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXMCGBFIM
 
	`DWMAC_REGS_BIT32
(11)

	)

218 
	#MACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXBCGBFIM
 
	`DWMAC_REGS_BIT32
(12)

	)

219 
	#MACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXUFLOWERFIM
 
	`DWMAC_REGS_BIT32
(13)

	)

220 
	#MACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXSCOLGFIM
 
	`DWMAC_REGS_BIT32
(14)

	)

221 
	#MACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXMCOLGFIM
 
	`DWMAC_REGS_BIT32
(15)

	)

222 
	#MACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXDEFFIM
 
	`DWMAC_REGS_BIT32
(16)

	)

223 
	#MACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXLATCOLFIM
 
	`DWMAC_REGS_BIT32
(17)

	)

224 
	#MACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXEXCOLFIM
 
	`DWMAC_REGS_BIT32
(18)

	)

225 
	#MACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXCARERFIM
 
	`DWMAC_REGS_BIT32
(19)

	)

226 
	#MACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXGOCTIM
 
	`DWMAC_REGS_BIT32
(20)

	)

227 
	#MACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXGFRMIM
 
	`DWMAC_REGS_BIT32
(21)

	)

228 
	#MACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXEXDEFFIM
 
	`DWMAC_REGS_BIT32
(22)

	)

229 
	#MACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXPAUSFIM
 
	`DWMAC_REGS_BIT32
(23)

	)

230 
	#MACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXVLANGFIM
 
	`DWMAC_REGS_BIT32
(24)

	)

231 
	#MACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXOSIZEGFIM
 
	`DWMAC_REGS_BIT32
(25)

	)

232 
ut32_t
 
	mtxoùcouÁ_gb
;

233 
ut32_t
 
	mtxäamecouÁ_gb
;

234 
ut32_t
 
	mtxbrßdÿ¡äames_g
;

235 
ut32_t
 
	mtxmuÉiÿ¡äames_g
;

236 
ut32_t
 
	mtx64oùs_gb
;

237 
ut32_t
 
	mtx65to127oùs_gb
;

238 
ut32_t
 
	mtx128to255oùs_gb
;

239 
ut32_t
 
	mtx256to511oùs_gb
;

240 
ut32_t
 
	mtx512to1023oùs_gb
;

241 
ut32_t
 
	mtx1024tomaxoùs_gb
;

242 
ut32_t
 
	mtxuniÿ¡äames_gb
;

243 
ut32_t
 
	mtxmuÉiÿ¡äames_gb
;

244 
ut32_t
 
	mtxbrßdÿ¡äames_gb
;

245 
ut32_t
 
	mtxundæowrÜ
;

246 
ut32_t
 
	mtxsgËcÞ_g
;

247 
ut32_t
 
	mtxmuÉicÞ_g
;

248 
ut32_t
 
	mtxdeã¼ed
;

249 
ut32_t
 
	mtxÏcÞ
;

250 
ut32_t
 
	mtxexesscÞ
;

251 
ut32_t
 
	mtxÿ¼»¼
;

252 
ut32_t
 
	mtxoùút
;

253 
ut32_t
 
	mtxäamecouÁ_g
;

254 
ut32_t
 
	mtxexûssdef
;

255 
ut32_t
 
	mtx·u£äames
;

256 
ut32_t
 
	mtxvÏnäames_g
;

257 
ut32_t
 
	mtxovsize_g
;

258 
ut32_t
 
	m»£rved_17c
;

259 
ut32_t
 
	mrxäamecouÁ_gb
;

260 
ut32_t
 
	mrxoùcouÁ_gb
;

261 
ut32_t
 
	mrxoùcouÁ_g
;

262 
ut32_t
 
	mrxbrßdÿ¡äames_g
;

263 
ut32_t
 
	mrxmuÉiÿ¡äames_g
;

264 
ut32_t
 
	mrxüû¼Ü
;

265 
ut32_t
 
	mrx®ignm¼Ü
;

266 
ut32_t
 
	mrxruÁrÜ
;

267 
ut32_t
 
	mrxjabbrÜ
;

268 
ut32_t
 
	mrxundsize_g
;

269 
ut32_t
 
	mrxovsize_g
;

270 
ut32_t
 
	mrx64oùs_gb
;

271 
ut32_t
 
	mrx65to127oùs_gb
;

272 
ut32_t
 
	mrx128to255oùs_gb
;

273 
ut32_t
 
	mrx256to511oùs_gb
;

274 
ut32_t
 
	mrx512to1023oùs_gb
;

275 
ut32_t
 
	mrx1024tomaxoùs_gb
;

276 
ut32_t
 
	mrxuniÿ¡äames_g
;

277 
ut32_t
 
	mrxËngthrÜ
;

278 
ut32_t
 
	mrxoutoäªgy³
;

279 
ut32_t
 
	mrx·u£äames
;

280 
ut32_t
 
	mrxfifoovæow
;

281 
ut32_t
 
	mrxvÏnäames_gb
;

282 
ut32_t
 
	mrxw©chdogrÜ
;

283 
ut32_t
 
	mrxrcvrÜ
;

284 
ut32_t
 
	mrxù¾äames_g
;

285 
ut32_t
 
	m»£rved_1e8
[6];

286 
ut32_t
 
	mmmc_c_»ûive_¼u±_mask
;

287 
	#MACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4GFIM
 
	`DWMAC_REGS_BIT32
(0)

	)

288 
	#MACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4HERFIM
 
	`DWMAC_REGS_BIT32
(1)

	)

289 
	#MACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4NOPAYFIM
 
	`DWMAC_REGS_BIT32
(2)

	)

290 
	#MACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4FRAGFIM
 
	`DWMAC_REGS_BIT32
(3)

	)

291 
	#MACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4UDSBLFIM
 
	`DWMAC_REGS_BIT32
(4)

	)

292 
	#MACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV6GFIM
 
	`DWMAC_REGS_BIT32
(5)

	)

293 
	#MACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV6HERFIM
 
	`DWMAC_REGS_BIT32
(6)

	)

294 
	#MACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV6NOPAYFIM
 
	`DWMAC_REGS_BIT32
(7)

	)

295 
	#MACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXUDPGFIM
 
	`DWMAC_REGS_BIT32
(8)

	)

296 
	#MACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXUDPERFIM
 
	`DWMAC_REGS_BIT32
(9)

	)

297 
	#MACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXTCPGFIM
 
	`DWMAC_REGS_BIT32
(10)

	)

298 
	#MACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXTCPERFIM
 
	`DWMAC_REGS_BIT32
(11)

	)

299 
	#MACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXICMPGFIM
 
	`DWMAC_REGS_BIT32
(12)

	)

300 
	#MACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXICMPERFIM
 
	`DWMAC_REGS_BIT32
(13)

	)

301 
	#MACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4GOIM
 
	`DWMAC_REGS_BIT32
(16)

	)

302 
	#MACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4HEROIM
 
	`DWMAC_REGS_BIT32
(17)

	)

303 
	#MACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4NOPAYOIM
 
	`DWMAC_REGS_BIT32
(18)

	)

304 
	#MACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4FRAGOIM
 
	`DWMAC_REGS_BIT32
(19)

	)

305 
	#MACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4UDSBLOIM
 
	`DWMAC_REGS_BIT32
(20)

	)

306 
	#MACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV6GOIM
 
	`DWMAC_REGS_BIT32
(21)

	)

307 
	#MACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV6HEROIM
 
	`DWMAC_REGS_BIT32
(22)

	)

308 
	#MACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV6NOPAYOIM
 
	`DWMAC_REGS_BIT32
(23)

	)

309 
	#MACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXUDPGOIM
 
	`DWMAC_REGS_BIT32
(24)

	)

310 
	#MACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXUDPEROIM
 
	`DWMAC_REGS_BIT32
(25)

	)

311 
	#MACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXTCPGOIM
 
	`DWMAC_REGS_BIT32
(26)

	)

312 
	#MACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXTCPEROIM
 
	`DWMAC_REGS_BIT32
(27)

	)

313 
	#MACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXICMPGOIM
 
	`DWMAC_REGS_BIT32
(28)

	)

314 
	#MACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXICMPEROIM
 
	`DWMAC_REGS_BIT32
(29)

	)

315 
ut32_t
 
	m»£rved_204
;

316 
ut32_t
 
	mmmc_c_»ûive_¼u±
;

317 
	#MACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV4GFIS
 
	`DWMAC_REGS_BIT32
(0)

	)

318 
	#MACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV4HERFIS
 
	`DWMAC_REGS_BIT32
(1)

	)

319 
	#MACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV4NOPAYFIS
 
	`DWMAC_REGS_BIT32
(2)

	)

320 
	#MACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV4FRAGFIS
 
	`DWMAC_REGS_BIT32
(3)

	)

321 
	#MACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV4UDSBLFIS
 
	`DWMAC_REGS_BIT32
(4)

	)

322 
	#MACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV6GFIS
 
	`DWMAC_REGS_BIT32
(5)

	)

323 
	#MACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV6HERFIS
 
	`DWMAC_REGS_BIT32
(6)

	)

324 
	#MACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV6NOPAYFIS
 
	`DWMAC_REGS_BIT32
(7)

	)

325 
	#MACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXUDPGFIS
 
	`DWMAC_REGS_BIT32
(8)

	)

326 
	#MACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXUDPERFIS
 
	`DWMAC_REGS_BIT32
(9)

	)

327 
	#MACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXTCPGFIS
 
	`DWMAC_REGS_BIT32
(10)

	)

328 
	#MACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXTCPERFIS
 
	`DWMAC_REGS_BIT32
(11)

	)

329 
	#MACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXICMPGFIS
 
	`DWMAC_REGS_BIT32
(12)

	)

330 
	#MACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXICMPERFIS
 
	`DWMAC_REGS_BIT32
(13)

	)

331 
	#MACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV4GOIS
 
	`DWMAC_REGS_BIT32
(16)

	)

332 
	#MACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV4HEROIS
 
	`DWMAC_REGS_BIT32
(17)

	)

333 
	#MACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV4NOPAYOIS
 
	`DWMAC_REGS_BIT32
(18)

	)

334 
	#MACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV4FRAGOIS
 
	`DWMAC_REGS_BIT32
(19)

	)

335 
	#MACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV4UDSBLOIS
 
	`DWMAC_REGS_BIT32
(20)

	)

336 
	#MACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV6GOIS
 
	`DWMAC_REGS_BIT32
(21)

	)

337 
	#MACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV6HEROIS
 
	`DWMAC_REGS_BIT32
(22)

	)

338 
	#MACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV6NOPAYOIS
 
	`DWMAC_REGS_BIT32
(23)

	)

339 
	#MACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXUDPGOIS
 
	`DWMAC_REGS_BIT32
(24)

	)

340 
	#MACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXUDPEROIS
 
	`DWMAC_REGS_BIT32
(25)

	)

341 
	#MACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXTCPGOIS
 
	`DWMAC_REGS_BIT32
(26)

	)

342 
	#MACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXTCPEROIS
 
	`DWMAC_REGS_BIT32
(27)

	)

343 
	#MACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXICMPGOIS
 
	`DWMAC_REGS_BIT32
(28)

	)

344 
	#MACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXICMPEROIS
 
	`DWMAC_REGS_BIT32
(29)

	)

345 
ut32_t
 
	m»£rved_20c
;

346 
ut32_t
 
	mrxv4_gd_äms
;

347 
ut32_t
 
	mrxv4_hd»¼_äms
;

348 
ut32_t
 
	mrxv4_nÝay_äms
;

349 
ut32_t
 
	mrxv4_äag_äms
;

350 
ut32_t
 
	mrxv4_udsbl_äms
;

351 
ut32_t
 
	mrxv6_gd_äms
;

352 
ut32_t
 
	mrxv6_hd»¼_äms
;

353 
ut32_t
 
	mrxv6_nÝay_äms
;

354 
ut32_t
 
	mrxudp_gd_äms
;

355 
ut32_t
 
	mrxudp_r_äms
;

356 
ut32_t
 
	mrxtý_gd_äms
;

357 
ut32_t
 
	mrxtý_r_äms
;

358 
ut32_t
 
	mrxicmp_gd_äms
;

359 
ut32_t
 
	mrxicmp_r_äms
;

360 
ut32_t
 
	m»£rved_248
[2];

361 
ut32_t
 
	mrxv4_gd_oùs
;

362 
ut32_t
 
	mrxv4_hd»¼_oùs
;

363 
ut32_t
 
	mrxv4_nÝay_oùs
;

364 
ut32_t
 
	mrxv4_äag_oùs
;

365 
ut32_t
 
	mrxv4_udsbl_oùs
;

366 
ut32_t
 
	mrxv6_gd_oùs
;

367 
ut32_t
 
	mrxv6_hd»¼_oùs
;

368 
ut32_t
 
	mrxv6_nÝay_oùs
;

369 
ut32_t
 
	mrxudp_gd_oùs
;

370 
ut32_t
 
	mrxudp_r_oùs
;

371 
ut32_t
 
	mrxtý_gd_oùs
;

372 
ut32_t
 
	mrxtýroùs
;

373 
ut32_t
 
	mrxicmp_gd_oùs
;

374 
ut32_t
 
	mrxicmp_r_oùs
;

375 
ut32_t
 
	m»£rved_288
[158];

376 
ut32_t
 
	mhash_bË_»g
[8];

377 
ut32_t
 
	m»£rved_520
[184];

378 
mac
 
	mmac_addr16_127
[112];

379 } 
	tmacg½
;

382 
ut32_t
 
	mbus_mode
;

383 
	#DMAGRP_BUS_MODE_SWR
 
	`DWMAC_REGS_BIT32
(0)

	)

384 
	#DMAGRP_BUS_MODE_DSL
(
v®
è
	`DWMAC_REGS_FLD32
(v®, 2, 6)

	)

385 
	#DMAGRP_BUS_MODE_DSL_GET
(
»g
è
	`DWMAC_REGS_FLD32GET
Ôeg, 2, 6)

	)

386 
	#DMAGRP_BUS_MODE_DSL_SET
(
»g
, 
v®
è
	`DWMAC_REGS_FLD32SET
Ôeg, v®, 2, 6)

	)

387 
	#DMAGRP_BUS_MODE_ATDS
 
	`DWMAC_REGS_BIT32
(7)

	)

388 
	#DMAGRP_BUS_MODE_PBL
(
v®
è
	`DWMAC_REGS_FLD32
(v®, 8, 13)

	)

389 
	#DMAGRP_BUS_MODE_PBL_GET
(
»g
è
	`DWMAC_REGS_FLD32GET
Ôeg, 8, 13)

	)

390 
	#DMAGRP_BUS_MODE_PBL_SET
(
»g
, 
v®
è
	`DWMAC_REGS_FLD32SET
Ôeg, v®, 8, 13)

	)

391 
	#DMAGRP_BUS_MODE_FB
 
	`DWMAC_REGS_BIT32
(16)

	)

392 
	#DMAGRP_BUS_MODE_RPBL
(
v®
è
	`DWMAC_REGS_FLD32
(v®, 17, 22)

	)

393 
	#DMAGRP_BUS_MODE_RPBL_GET
(
»g
è
	`DWMAC_REGS_FLD32GET
Ôeg, 17, 22)

	)

394 
	#DMAGRP_BUS_MODE_RPBL_SET
(
»g
, 
v®
è
	`DWMAC_REGS_FLD32SET
Ôeg, v®, 17, 22)

	)

395 
	#DMAGRP_BUS_MODE_USP
 
	`DWMAC_REGS_BIT32
(23)

	)

396 
	#DMAGRP_BUS_MODE_EIGHTXPBL
 
	`DWMAC_REGS_BIT32
(24)

	)

397 
	#DMAGRP_BUS_MODE_AAL
 
	`DWMAC_REGS_BIT32
(25)

	)

398 
	#DMAGRP_BUS_MODE_MB
 
	`DWMAC_REGS_BIT32
(26)

	)

399 
ut32_t
 
	mªsm_pÞl_demªd
;

400 
	#DMAGRP_TRANSMIT_POLL_DEMAND_TPD
(
v®
è
	`DWMAC_REGS_FLD32
(v®, 0, 31)

	)

401 
	#DMAGRP_TRANSMIT_POLL_DEMAND_TPD_GET
(
»g
è
	`DWMAC_REGS_FLD32GET
Ôeg, 0, 31)

	)

402 
	#DMAGRP_TRANSMIT_POLL_DEMAND_TPD_SET
(
»g
, 
v®
è
	`DWMAC_REGS_FLD32SET
Ôeg, v®, 0, 31)

	)

403 
ut32_t
 
	m»ûive_pÞl_demªd
;

404 
	#DMAGRP_RECEIVE_POLL_DEMAND_RPD
(
v®
è
	`DWMAC_REGS_FLD32
(v®, 0, 31)

	)

405 
	#DMAGRP_RECEIVE_POLL_DEMAND_RPD_GET
(
»g
è
	`DWMAC_REGS_FLD32GET
Ôeg, 0, 31)

	)

406 
	#DMAGRP_RECEIVE_POLL_DEMAND_RPD_SET
(
»g
, 
v®
è
	`DWMAC_REGS_FLD32SET
Ôeg, v®, 0, 31)

	)

407 
ut32_t
 
	m»ûive_desü_li¡_addr
;

408 
	#DMAGRP_RECEIVE_DESCR_LIST_ADDR_RDESLA_32BIT
(
v®
è
	`DWMAC_REGS_FLD32
(v®, 2, 31)

	)

409 
	#DMAGRP_RECEIVE_DESCR_LIST_ADDR_RDESLA_32BIT_GET
(
»g
è
	`DWMAC_REGS_FLD32GET
Ôeg, 2, 31)

	)

410 
	#DMAGRP_RECEIVE_DESCR_LIST_ADDR_RDESLA_32BIT_SET
(
»g
, 
v®
è
	`DWMAC_REGS_FLD32SET
Ôeg, v®, 2, 31)

	)

411 
ut32_t
 
	mªsm_desü_li¡_addr
;

412 
	#DMAGRP_TRANSMIT_DESCR_LIST_ADDR_TDESLA_32BIT
(
v®
è
	`DWMAC_REGS_FLD32
(v®, 2, 31)

	)

413 
	#DMAGRP_TRANSMIT_DESCR_LIST_ADDR_TDESLA_32BIT_GET
(
»g
è
	`DWMAC_REGS_FLD32GET
Ôeg, 2, 31)

	)

414 
	#DMAGRP_TRANSMIT_DESCR_LIST_ADDR_TDESLA_32BIT_SET
(
»g
, 
v®
è
	`DWMAC_REGS_FLD32SET
Ôeg, v®, 2, 31)

	)

415 
ut32_t
 
	m¡©us
;

416 
	#DMAGRP_STATUS_TI
 
	`DWMAC_REGS_BIT32
(0)

	)

417 
	#DMAGRP_STATUS_TPS
 
	`DWMAC_REGS_BIT32
(1)

	)

418 
	#DMAGRP_STATUS_TU
 
	`DWMAC_REGS_BIT32
(2)

	)

419 
	#DMAGRP_STATUS_TJT
 
	`DWMAC_REGS_BIT32
(3)

	)

420 
	#DMAGRP_STATUS_OVF
 
	`DWMAC_REGS_BIT32
(4)

	)

421 
	#DMAGRP_STATUS_UNF
 
	`DWMAC_REGS_BIT32
(5)

	)

422 
	#DMAGRP_STATUS_RI
 
	`DWMAC_REGS_BIT32
(6)

	)

423 
	#DMAGRP_STATUS_RU
 
	`DWMAC_REGS_BIT32
(7)

	)

424 
	#DMAGRP_STATUS_RPS
 
	`DWMAC_REGS_BIT32
(8)

	)

425 
	#DMAGRP_STATUS_RWT
 
	`DWMAC_REGS_BIT32
(9)

	)

426 
	#DMAGRP_STATUS_ETI
 
	`DWMAC_REGS_BIT32
(10)

	)

427 
	#DMAGRP_STATUS_FBI
 
	`DWMAC_REGS_BIT32
(13)

	)

428 
	#DMAGRP_STATUS_ERI
 
	`DWMAC_REGS_BIT32
(14)

	)

429 
	#DMAGRP_STATUS_AIS
 
	`DWMAC_REGS_BIT32
(15)

	)

430 
	#DMAGRP_STATUS_NIS
 
	`DWMAC_REGS_BIT32
(16)

	)

431 
	#DMAGRP_STATUS_RS
(
v®
è
	`DWMAC_REGS_FLD32
(v®, 17, 19)

	)

432 
	#DMAGRP_STATUS_RS_GET
(
»g
è
	`DWMAC_REGS_FLD32GET
Ôeg, 17, 19)

	)

433 
	#DMAGRP_STATUS_RS_SET
(
»g
, 
v®
è
	`DWMAC_REGS_FLD32SET
Ôeg, v®, 17, 19)

	)

434 
	#DMAGRP_STATUS_TS
(
v®
è
	`DWMAC_REGS_FLD32
(v®, 20, 22)

	)

435 
	#DMAGRP_STATUS_TS_GET
(
»g
è
	`DWMAC_REGS_FLD32GET
Ôeg, 20, 22)

	)

436 
	#DMAGRP_STATUS_TS_SET
(
»g
, 
v®
è
	`DWMAC_REGS_FLD32SET
Ôeg, v®, 20, 22)

	)

437 
	#DMAGRP_STATUS_EB
(
v®
è
	`DWMAC_REGS_FLD32
(v®, 23, 25)

	)

438 
	#DMAGRP_STATUS_EB_GET
(
»g
è
	`DWMAC_REGS_FLD32GET
Ôeg, 23, 25)

	)

439 
	#DMAGRP_STATUS_EB_SET
(
»g
, 
v®
è
	`DWMAC_REGS_FLD32SET
Ôeg, v®, 23, 25)

	)

440 
	#DMAGRP_STATUS_GLI
 
	`DWMAC_REGS_BIT32
(26)

	)

441 
	#DMAGRP_STATUS_GMI
 
	`DWMAC_REGS_BIT32
(27)

	)

442 
	#DMAGRP_STATUS_TTI
 
	`DWMAC_REGS_BIT32
(29)

	)

443 
	#DMAGRP_STATUS_GLPII
 
	`DWMAC_REGS_BIT32
(30)

	)

444 
ut32_t
 
	mÝ©iÚ_mode
;

445 
	#DMAGRP_OPERATION_MODE_SR
 
	`DWMAC_REGS_BIT32
(1)

	)

446 
	#DMAGRP_OPERATION_MODE_OSF
 
	`DWMAC_REGS_BIT32
(2)

	)

447 
	#DMAGRP_OPERATION_MODE_RTC
(
v®
è
	`DWMAC_REGS_FLD32
(v®, 3, 4)

	)

448 
	#DMAGRP_OPERATION_MODE_RTC_GET
(
»g
è
	`DWMAC_REGS_FLD32GET
Ôeg, 3, 4)

	)

449 
	#DMAGRP_OPERATION_MODE_RTC_SET
(
»g
, 
v®
è
	`DWMAC_REGS_FLD32SET
Ôeg, v®, 3, 4)

	)

450 
	#DMAGRP_OPERATION_MODE_FUF
 
	`DWMAC_REGS_BIT32
(6)

	)

451 
	#DMAGRP_OPERATION_MODE_FEF
 
	`DWMAC_REGS_BIT32
(7)

	)

452 
	#DMAGRP_OPERATION_MODE_EFC
 
	`DWMAC_REGS_BIT32
(8)

	)

453 
	#DMAGRP_OPERATION_MODE_RFA
(
v®
è
	`DWMAC_REGS_FLD32
(v®, 9, 10)

	)

454 
	#DMAGRP_OPERATION_MODE_RFA_GET
(
»g
è
	`DWMAC_REGS_FLD32GET
Ôeg, 9, 10)

	)

455 
	#DMAGRP_OPERATION_MODE_RFA_SET
(
»g
, 
v®
è
	`DWMAC_REGS_FLD32SET
Ôeg, v®, 9, 10)

	)

456 
	#DMAGRP_OPERATION_MODE_RFD
(
v®
è
	`DWMAC_REGS_FLD32
(v®, 11, 12)

	)

457 
	#DMAGRP_OPERATION_MODE_RFD_GET
(
»g
è
	`DWMAC_REGS_FLD32GET
Ôeg, 11, 12)

	)

458 
	#DMAGRP_OPERATION_MODE_RFD_SET
(
»g
, 
v®
è
	`DWMAC_REGS_FLD32SET
Ôeg, v®, 11, 12)

	)

459 
	#DMAGRP_OPERATION_MODE_ST
 
	`DWMAC_REGS_BIT32
(13)

	)

460 
	#DMAGRP_OPERATION_MODE_TTC
(
v®
è
	`DWMAC_REGS_FLD32
(v®, 14, 16)

	)

461 
	#DMAGRP_OPERATION_MODE_TTC_GET
(
»g
è
	`DWMAC_REGS_FLD32GET
Ôeg, 14, 16)

	)

462 
	#DMAGRP_OPERATION_MODE_TTC_SET
(
»g
, 
v®
è
	`DWMAC_REGS_FLD32SET
Ôeg, v®, 14, 16)

	)

463 
	#DMAGRP_OPERATION_MODE_FTF
 
	`DWMAC_REGS_BIT32
(20)

	)

464 
	#DMAGRP_OPERATION_MODE_TSF
 
	`DWMAC_REGS_BIT32
(21)

	)

465 
	#DMAGRP_OPERATION_MODE_DFF
 
	`DWMAC_REGS_BIT32
(24)

	)

466 
	#DMAGRP_OPERATION_MODE_RSF
 
	`DWMAC_REGS_BIT32
(25)

	)

467 
	#DMAGRP_OPERATION_MODE_DT
 
	`DWMAC_REGS_BIT32
(26)

	)

468 
ut32_t
 
	m¼u±_abË
;

469 
	#DMAGRP_INTERRUPT_ENABLE_TIE
 
	`DWMAC_REGS_BIT32
(0)

	)

470 
	#DMAGRP_INTERRUPT_ENABLE_TSE
 
	`DWMAC_REGS_BIT32
(1)

	)

471 
	#DMAGRP_INTERRUPT_ENABLE_TUE
 
	`DWMAC_REGS_BIT32
(2)

	)

472 
	#DMAGRP_INTERRUPT_ENABLE_TJE
 
	`DWMAC_REGS_BIT32
(3)

	)

473 
	#DMAGRP_INTERRUPT_ENABLE_OVE
 
	`DWMAC_REGS_BIT32
(4)

	)

474 
	#DMAGRP_INTERRUPT_ENABLE_UNE
 
	`DWMAC_REGS_BIT32
(5)

	)

475 
	#DMAGRP_INTERRUPT_ENABLE_RIE
 
	`DWMAC_REGS_BIT32
(6)

	)

476 
	#DMAGRP_INTERRUPT_ENABLE_RUE
 
	`DWMAC_REGS_BIT32
(7)

	)

477 
	#DMAGRP_INTERRUPT_ENABLE_RSE
 
	`DWMAC_REGS_BIT32
(8)

	)

478 
	#DMAGRP_INTERRUPT_ENABLE_RWE
 
	`DWMAC_REGS_BIT32
(9)

	)

479 
	#DMAGRP_INTERRUPT_ENABLE_ETE
 
	`DWMAC_REGS_BIT32
(10)

	)

480 
	#DMAGRP_INTERRUPT_ENABLE_FBE
 
	`DWMAC_REGS_BIT32
(13)

	)

481 
	#DMAGRP_INTERRUPT_ENABLE_ERE
 
	`DWMAC_REGS_BIT32
(14)

	)

482 
	#DMAGRP_INTERRUPT_ENABLE_AIE
 
	`DWMAC_REGS_BIT32
(15)

	)

483 
	#DMAGRP_INTERRUPT_ENABLE_NIE
 
	`DWMAC_REGS_BIT32
(16)

	)

484 
ut32_t
 
	m»£rved_20
[2];

485 
ut32_t
 
	maxi_bus_mode
;

486 
	#DMAGRP_AXI_BUS_MODE_UNDEFINED
 
	`DWMAC_REGS_BIT32
(0)

	)

487 
	#DMAGRP_AXI_BUS_MODE_BLEND4
 
	`DWMAC_REGS_BIT32
(1)

	)

488 
	#DMAGRP_AXI_BUS_MODE_BLEND8
 
	`DWMAC_REGS_BIT32
(2)

	)

489 
	#DMAGRP_AXI_BUS_MODE_BLEND16
 
	`DWMAC_REGS_BIT32
(3)

	)

490 
	#DMAGRP_AXI_BUS_MODE_AXI_AAL
 
	`DWMAC_REGS_BIT32
(12)

	)

491 
	#DMAGRP_AXI_BUS_MODE_ONEKBBE
 
	`DWMAC_REGS_BIT32
(13)

	)

492 
	#DMAGRP_AXI_BUS_MODE_RD_OSR_LMT
(
v®
è
	`DWMAC_REGS_FLD32
(v®, 16, 19)

	)

493 
	#DMAGRP_AXI_BUS_MODE_RD_OSR_LMT_GET
(
»g
è
	`DWMAC_REGS_FLD32GET
Ôeg, 16, 19)

	)

494 
	#DMAGRP_AXI_BUS_MODE_RD_OSR_LMT_SET
(
»g
, 
v®
è
	`DWMAC_REGS_FLD32SET
Ôeg, v®, 16, 19)

	)

495 
	#DMAGRP_AXI_BUS_MODE_WR_OSR_LMT
(
v®
è
	`DWMAC_REGS_FLD32
(v®, 20, 23)

	)

496 
	#DMAGRP_AXI_BUS_MODE_WR_OSR_LMT_GET
(
»g
è
	`DWMAC_REGS_FLD32GET
Ôeg, 20, 23)

	)

497 
	#DMAGRP_AXI_BUS_MODE_WR_OSR_LMT_SET
(
»g
, 
v®
è
	`DWMAC_REGS_FLD32SET
Ôeg, v®, 20, 23)

	)

498 
	#DMAGRP_AXI_BUS_MODE_LPI_XIT_FRM
 
	`DWMAC_REGS_BIT32
(30)

	)

499 
	#DMAGRP_AXI_BUS_MODE_EN_LPI
 
	`DWMAC_REGS_BIT32
(31)

	)

500 
ut32_t
 
	m»£rved_2c
[11];

501 
ut32_t
 
	mhw_ã©u»
;

502 
	#DMAGRP_HW_FEATURE_MIISEL
 
	`DWMAC_REGS_BIT32
(0)

	)

503 
	#DMAGRP_HW_FEATURE_GMIISEL
 
	`DWMAC_REGS_BIT32
(1)

	)

504 
	#DMAGRP_HW_FEATURE_HDSEL
 
	`DWMAC_REGS_BIT32
(2)

	)

505 
	#DMAGRP_HW_FEATURE_HASHSEL
 
	`DWMAC_REGS_BIT32
(4)

	)

506 
	#DMAGRP_HW_FEATURE_ADDMACADRSEL
 
	`DWMAC_REGS_BIT32
(5)

	)

507 
	#DMAGRP_HW_FEATURE_PCSSEL
 
	`DWMAC_REGS_BIT32
(6)

	)

508 
	#DMAGRP_HW_FEATURE_SMASEL
 
	`DWMAC_REGS_BIT32
(8)

	)

509 
	#DMAGRP_HW_FEATURE_RWKSEL
 
	`DWMAC_REGS_BIT32
(9)

	)

510 
	#DMAGRP_HW_FEATURE_MGKSEL
 
	`DWMAC_REGS_BIT32
(10)

	)

511 
	#DMAGRP_HW_FEATURE_MMCSEL
 
	`DWMAC_REGS_BIT32
(11)

	)

512 
	#DMAGRP_HW_FEATURE_TSVER1SEL
 
	`DWMAC_REGS_BIT32
(12)

	)

513 
	#DMAGRP_HW_FEATURE_TSVER2SEL
 
	`DWMAC_REGS_BIT32
(13)

	)

514 
	#DMAGRP_HW_FEATURE_EEESEL
 
	`DWMAC_REGS_BIT32
(14)

	)

515 
	#DMAGRP_HW_FEATURE_AVSEL
 
	`DWMAC_REGS_BIT32
(15)

	)

516 
	#DMAGRP_HW_FEATURE_TXOESEL
 
	`DWMAC_REGS_BIT32
(16)

	)

517 
	#DMAGRP_HW_FEATURE_RXTYP1COE
 
	`DWMAC_REGS_BIT32
(17)

	)

518 
	#DMAGRP_HW_FEATURE_RXTYP2COE
 
	`DWMAC_REGS_BIT32
(18)

	)

519 
	#DMAGRP_HW_FEATURE_RXFIFOSIZE
 
	`DWMAC_REGS_BIT32
(19)

	)

520 
	#DMAGRP_HW_FEATURE_RXCHCNT
(
v®
è
	`DWMAC_REGS_FLD32
(v®, 20, 21)

	)

521 
	#DMAGRP_HW_FEATURE_RXCHCNT_GET
(
»g
è
	`DWMAC_REGS_FLD32GET
Ôeg, 20, 21)

	)

522 
	#DMAGRP_HW_FEATURE_RXCHCNT_SET
(
»g
, 
v®
è
	`DWMAC_REGS_FLD32SET
Ôeg, v®, 20, 21)

	)

523 
	#DMAGRP_HW_FEATURE_TXCHCNT
(
v®
è
	`DWMAC_REGS_FLD32
(v®, 22, 23)

	)

524 
	#DMAGRP_HW_FEATURE_TXCHCNT_GET
(
»g
è
	`DWMAC_REGS_FLD32GET
Ôeg, 22, 23)

	)

525 
	#DMAGRP_HW_FEATURE_TXCHCNT_SET
(
»g
, 
v®
è
	`DWMAC_REGS_FLD32SET
Ôeg, v®, 22, 23)

	)

526 
	#DMAGRP_HW_FEATURE_ENHDESSEL
 
	`DWMAC_REGS_BIT32
(24)

	)

527 
	#DMAGRP_HW_FEATURE_ACTPHYIF
(
v®
è
	`DWMAC_REGS_FLD32
(v®, 28, 30)

	)

528 
	#DMAGRP_HW_FEATURE_ACTPHYIF_GET
(
»g
è
	`DWMAC_REGS_FLD32GET
Ôeg, 28, 30)

	)

529 
	#DMAGRP_HW_FEATURE_ACTPHYIF_SET
(
»g
, 
v®
è
	`DWMAC_REGS_FLD32SET
Ôeg, v®, 28, 30)

	)

530 } 
	tdmag½
;

	@src/libchip/network/dwmac.c

24 
	~<as£¹.h
>

25 
	~<¡dlib.h
>

26 
	~<¡dio.h
>

27 
	~<¡rg.h
>

28 
	~<ºo.h
>

29 
	~<b¥.h
>

30 
	~<b¥/çl.h
>

31 
	~<¹ems/dn.h
>

32 
	~"dwmac-commÚ.h
"

33 
	~"dwmac-cÜe.h
"

35 #ifdeà
BSP_FEATURE_IRQ_EXTENSION


36 
	~<b¥/q.h
>

41 cÚ¡ 
dwmac_phy_evt
 
	gPHY_EVENT_JABBER
 = 0x80;

42 cÚ¡ 
dwmac_phy_evt
 
	gPHY_EVENT_RECEIVE_ERROR
 = 0x40;

43 cÚ¡ 
dwmac_phy_evt
 
	gPHY_EVENT_PAGE_RECEIVE
 = 0x20;

44 cÚ¡ 
dwmac_phy_evt
 
	gPHY_EVENT_PARALLEL_DETECT_FAULT
 = 0x10;

45 cÚ¡ 
dwmac_phy_evt
 
	gPHY_EVENT_LINK_PARTNER_ACK
 = 0x08;

46 cÚ¡ 
dwmac_phy_evt
 
	gPHY_EVENT_LINK_DOWN
 = 0x04;

47 cÚ¡ 
dwmac_phy_evt
 
	gPHY_EVENT_REMOTE_FAULT
 = 0x02;

48 cÚ¡ 
dwmac_phy_evt
 
	gPHY_EVENT_LINK_UP
 = 0x01;

51 
	#DWMAC_CONFIG_RX_UNIT_COUNT_DEFAULT
 64

	)

52 
	#DWMAC_CONFIG_RX_UNIT_COUNT_MAX
 
INT_MAX


	)

53 
	#DWMAC_CONFIG_TX_UNIT_COUNT_DEFAULT
 64

	)

54 
	#DWMAC_CONFIG_TX_UNIT_COUNT_MAX
 
INT_MAX


	)

57 
	#DWMAC_DMA_BUS_MODE_PBL_DEFAULT
 
DWMAC_DMA_CFG_BUS_MODE_BURST_LENGTH_8


	)

58 
	#DWMAC_DMA_BUS_MODE_FB_DEFAULT
 \

59 
DWMAC_DMA_CFG_BUS_MODE_BURST_MODE_SINGLE_OR_INCR


	)

60 
	#DWMAC_DMA_BUS_MODE_MIXED_BURSTS_DEFAULT
 \

61 
DWMAC_DMA_CFG_BUS_MODE_BURST_NOT_MIXED


	)

62 
	#DWMAC_DMA_AXI_BURST_LENGTH_4_DEFAULT
 \

63 
DWMAC_DMA_CFG_AXI_BURST_LENGTH_4_NOT_SUPPORTED


	)

64 
	#DWMAC_DMA_AXI_BURST_LENGTH_8_DEFAULT
 \

65 
DWMAC_DMA_CFG_AXI_BURST_LENGTH_8_NOT_SUPPORTED


	)

66 
	#DWMAC_DMA_AXI_BURST_LENGTH_16_DEFAULT
 \

67 
DWMAC_DMA_CFG_AXI_BURST_LENGTH_16_NOT_SUPPORTED


	)

68 
	#DWMAC_DMA_AXI_BURST_BOUNDARY_DEFAULT
 \

69 
DWMAC_DMA_CFG_AXI_BURST_BOUNDARY_4_KB


	)

72 
	#DWCGNAC3504_CSR_F_35M
 35000000

	)

73 
	#DWCGNAC3504_CSR_F_60M
 60000000

	)

74 
	#DWCGNAC3504_CSR_F_100M
 100000000

	)

75 
	#DWCGNAC3504_CSR_F_150M
 150000000

	)

76 
	#DWCGNAC3504_CSR_F_250M
 250000000

	)

77 
	#DWCGNAC3504_CSR_F_300M
 300000000

	)

80 
	#DWCGNAC3504_CSR_60_100M
 0x0

	)

81 
	#DWCGNAC3504_CSR_100_150M
 0x1

	)

82 
	#DWCGNAC3504_CSR_20_35M
 0x2

	)

83 
	#DWCGNAC3504_CSR_35_60M
 0x3

	)

84 
	#DWCGNAC3504_CSR_150_250M
 0x4

	)

85 
	#DWCGNAC3504_CSR_250_300M
 0x5

	)

87 
	#DWMAC_ALIGN
Ð
v®ue
, 
num_bys_to_®ign_to
 ) \

88 ÐÐÐ
v®ue
 ) + ( ( 
	`ty³of
Ðv®uè)Ð
num_bys_to_®ign_to
 ) - 1 ) ) \

89 & ~ÐÐ
	`ty³of
Ð
v®ue
 ) )Ð
num_bys_to_®ign_to
 ) - 1 ) )

	)

91 #undeà
DWMAC_DEBUG


92 #ifdeà
DWMAC_DEBUG


93 
	#DWMAC_PRINT_DBG
Ð
fmt
, 
¬gs
 ... ) 
	`´tk
Ðfmt, ##rg )

	)

95 
	#DWMAC_PRINT_DBG
Ð
fmt
, 
¬gs
 ... ) dØ{ }  0 )

	)

98 
	#DWMAC_DMA_THRESHOLD_CONTROL_DEFAULT
 64

	)

100 
	#DWMAC_GLOBAL_MBUF_CNT
 (
¹ems_bsdÃt_cÚfig
.
mbuf_bycouÁ
 / (
mbuf
))

	)

101 
	#DWMAG_GLOBAL_MCLUST_CNT
 (
¹ems_bsdÃt_cÚfig
.
mbuf_þu¡_bycouÁ
 / 
MCLBYTES
)

	)

103 
	$dwmac_if_mdio_busy_wa
ÐcÚ¡ vÞ©
ut32_t
 *
gmii_add»ss
 )

105 
¹ems_rv®
 
timeout
 = 
	`¹ems_þock_g_ticks_³r_£cÚd
();

106 
¹ems_rv®
 
i
 = 0;

109  ( *
gmii_add»ss
 & 
MACGRP_GMII_ADDRESS_GMII_BUSY
 ) != 0

110 && 
i
 < 
timeout
 ) {

111 
	`¹ems_sk_wake_aá
( 1 );

112 ++
i
;

115  
i
 < 
timeout
 ? 0 : 
EBUSY
;

116 
	}
}

118 
	$dwmac_if_mdio_»ad
(

119 
phy
,

120 *
¬g
,

121 
phy_»g
,

122 
ut32_t
 *
v®
 )

124 
o
 = 0;

125 
dwmac_commÚ_cÚxt
 *
£lf
 = (dwmac_commÚ_cÚx*è
¬g
;

126 vÞ©
ut32_t
 *
mii_add»ss
 = &
£lf
->
macg½
->
gmii_add»ss
;

127 vÞ©
ut32_t
 *
mii_d©a
 = &
£lf
->
macg½
->
gmii_d©a
;

128 
ut32_t
 
»g_v®ue
 = 0;

131 iàÐ
phy
 == -1 ) {

132 
»g_v®ue
 = 
	`MACGRP_GMII_ADDRESS_PHYSICAL_LAYER_ADDRESS_SET
(

133 
»g_v®ue
,

134 
£lf
->
MDIO_BUS_ADDR


137 
»g_v®ue
 = 
	`MACGRP_GMII_ADDRESS_PHYSICAL_LAYER_ADDRESS_SET
(

138 
»g_v®ue
,

139 
phy


143 
»g_v®ue
 = 
	`MACGRP_GMII_ADDRESS_GMII_REGISTER_SET
(

144 
»g_v®ue
,

145 
phy_»g


147 
»g_v®ue
 &ð~
MACGRP_GMII_ADDRESS_GMII_WRITE
;

152 
»g_v®ue
 |ð
MACGRP_GMII_ADDRESS_GMII_BUSY
;

153 
»g_v®ue
 = 
	`MACGRP_GMII_ADDRESS_CSR_CLOCK_RANGE_SET
(

154 
»g_v®ue
,

155 
£lf
->
c¤_þock


158 
o
 = 
	`dwmac_if_mdio_busy_wa
Ð
mii_add»ss
 );

160 iàÐ
o
 == 0 ) {

161 *
mii_add»ss
 = 
»g_v®ue
;

163 iàÐ
	`dwmac_if_mdio_busy_wa
Ð
mii_add»ss
 ) ) {

164 
o
 = 
EBUSY
;

167 *
v®
 = 
	`MACGRP_GMII_DATA_GMII_DATA_GET
Ð*
mii_d©a
 );

171  
o
;

172 
	}
}

174 
	$dwmac_if_mdio_wre
(

175 
phy
,

176 *
¬g
,

177 
phy_»g
,

178 
ut32_t
 
v®
 )

180 
o
 = 0;

181 
dwmac_commÚ_cÚxt
 *
£lf
 = (dwmac_commÚ_cÚx*è
¬g
;

182 vÞ©
ut32_t
 *
mii_add»ss
 = &
£lf
->
macg½
->
gmii_add»ss
;

183 vÞ©
ut32_t
 *
mii_d©a
 = &
£lf
->
macg½
->
gmii_d©a
;

184 
ut32_t
 
»g_v®ue
 = *
mii_add»ss
;

187 iàÐ
phy
 == -1 ) {

188 
»g_v®ue
 = 
	`MACGRP_GMII_ADDRESS_PHYSICAL_LAYER_ADDRESS_SET
(

189 
»g_v®ue
,

190 
£lf
->
MDIO_BUS_ADDR


193 
»g_v®ue
 = 
	`MACGRP_GMII_ADDRESS_PHYSICAL_LAYER_ADDRESS_SET
(

194 
»g_v®ue
,

195 
phy


199 
»g_v®ue
 = 
	`MACGRP_GMII_ADDRESS_GMII_REGISTER_SET
(

200 
»g_v®ue
,

201 
phy_»g


203 
»g_v®ue
 |ð
MACGRP_GMII_ADDRESS_GMII_WRITE
;

204 
»g_v®ue
 |ð
MACGRP_GMII_ADDRESS_GMII_BUSY
;

205 
»g_v®ue
 = 
	`MACGRP_GMII_ADDRESS_CSR_CLOCK_RANGE_SET
(

206 
»g_v®ue
,

207 
£lf
->
c¤_þock


211 
o
 = 
	`dwmac_if_mdio_busy_wa
Ð
mii_add»ss
 );

213 iàÐ
o
 == 0 ) {

215 *
mii_d©a
 = 
v®
;

216 *
mii_add»ss
 = 
»g_v®ue
;

219 
o
 = 
	`dwmac_if_mdio_busy_wa
Ð
mii_add»ss
 );

222  
o
;

223 
	}
}

225 
	$dwmac_g_phy_fo
(

226 
dwmac_commÚ_cÚxt
 *
£lf
,

227 cÚ¡ 
ut8_t
 
mdio_bus_addr
,

228 
ut32_t
 *
oui
,

229 
ut8_t
 *
mod
,

230 
ut8_t
 *
»visiÚ
 )

232 
o
 = 0;

233 
ut32_t
 
»ad
;

236 
o
 = 
	`dwmac_if_mdio_»ad
(

237 
mdio_bus_addr
,

238 
£lf
,

240 &
»ad
 );

242 iàÐ
o
 == 0 ) {

243 *
oui
 = 0 | ( 
»ad
 << 6 );

244 
o
 = 
	`dwmac_if_mdio_»ad
(

245 
mdio_bus_addr
,

246 
£lf
,

248 &
»ad
 );

250 iàÐ
o
 == 0 ) {

251 *
oui
 |ðÐ
»ad
 & 0xFC00 ) >> 10;

252 *
mod
 = (
ut8_t
èÐÐ
»ad
 & 0x03F0 ) >> 4 );

253 *
»visiÚ
 = 
»ad
 & 0x000F;

257  
o
;

258 
	}
}

260 
le
 
	$dwmac_abË_q_rx
Ð
dwmac_commÚ_cÚxt
 *
£lf
 )

262 
	`dwmac_cÜe_abË_dma_q_rx
Ð
£lf
 );

263 
	}
}

265 
le
 
	$dwmac_abË_q_tx_deçuÉ
Ð
dwmac_commÚ_cÚxt
 *
£lf
 )

267 
	`dwmac_cÜe_abË_dma_q_tx_deçuÉ
Ð
£lf
 );

268 
	}
}

270 
le
 
	$dwmac_abË_q_tx_ªsmd
Ð
dwmac_commÚ_cÚxt
 *
£lf
 )

272 
	`dwmac_cÜe_abË_dma_q_tx_ªsmd
Ð
£lf
 );

273 
	}
}

275 
le
 
	$dwmac_di§bË_q_rx
Ð
dwmac_commÚ_cÚxt
 *
£lf
 )

277 
	`dwmac_cÜe_di§bË_dma_q_rx
Ð
£lf
 );

278 
	}
}

280 
le
 
	$dwmac_di§bË_q_tx_®l
Ð
dwmac_commÚ_cÚxt
 *
£lf
 )

282 
	`dwmac_cÜe_di§bË_dma_q_tx_®l
Ð
£lf
 );

283 
	}
}

285 
le
 
	$dwmac_di§bË_q_tx_ªsmd
 ( 
dwmac_commÚ_cÚxt
 *
£lf
 )

287 
	`dwmac_cÜe_di§bË_dma_q_tx_ªsmd
Ð
£lf
 );

288 
	}
}

290 
	$dwmac_cÚÞ_»que¡_com¶e
ÐcÚ¡ 
dwmac_commÚ_cÚxt
 *
£lf
 )

292 
¹ems_¡©us_code
 
sc
 = 
	`¹ems_evt_ªsÁ_£nd
Ð
£lf
->
sk_id_cÚÞ
 );

294 
	`as£¹
Ð
sc
 =ð
RTEMS_SUCCESSFUL
 );

295 
	}
}

297 
	$dwmac_cÚÞ_»que¡
(

298 
dwmac_commÚ_cÚxt
 *
£lf
,

299 
¹ems_id
 
sk
,

300 
¹ems_evt_£t
 
evt
 )

302 
o
 = 0;

303 
¹ems_¡©us_code
 
sc
 = 
RTEMS_SUCCESSFUL
;

304 
ut32_t
 
Ã¡_couÁ
 = 0;

307 
£lf
->
sk_id_cÚÞ
 = 
	`¹ems_sk_£lf
();

309 
sc
 = 
	`¹ems_bsdÃt_evt_£nd
Ð
sk
, 
evt
 );

311 
o
 = 
	`¹ems_¡©us_code_to_ºo
Ð
sc
 );

313 iàÐ
o
 == 0 ) {

314 
Ã¡_couÁ
 = 
	`¹ems_bsdÃt_£m­hÜe_»Ëa£_»cursive
();

315 
sc
 = 
	`¹ems_evt_ªsÁ_»ûive
Ð
RTEMS_WAIT
, 
RTEMS_NO_TIMEOUT
 );

316 
o
 = 
	`¹ems_¡©us_code_to_ºo
Ð
sc
 );

317 
	`¹ems_bsdÃt_£m­hÜe_ob_»cursive
Ð
Ã¡_couÁ
 );

318 
£lf
->
sk_id_cÚÞ
 = 0;

321  
o
;

322 
	}
}

324 
boÞ
 
	$dwmac_if_med_¡©us
(

325 
dwmac_commÚ_cÚxt
 *
£lf
,

326 *
med
,

327 
ut8_t
 
phy_add»ss
 )

329 
iâ
 *
iå
 = &
£lf
->
¬pcom
.
ac_if
;

332 *
med
 = (è
	`IFM_MAKEWORD
Ð0, 0, 0, 
phy_add»ss
 );

334  ( *
iå
->
if_ioùl
 )Ðiå, 
SIOCGIFMEDIA
, (
ÿddr_t
è
med
 ) == 0;

335 
	}
}

337 
	#DWMAC_PRINT_COUNTER
Ð
fmt
, 
couÁ
, 
¬gs
 ... ) \

338 iàÐ
couÁ
 != 0 ) { \

339 
	`´tf
Ð
fmt
, 
couÁ
, ## 
¬gs
 ); \

340 }

	)

343 
	$dwmac_if_rçû_¡©s
Ð*
¬g
 )

345 
o
 = 0;

346 
dwmac_commÚ_cÚxt
 *
£lf
 = 
¬g
;

347 vÞ©
macg½
 *macg½ = 
£lf
->macgrp;

348 
med
 = 0;

349 
boÞ
 
med_ok
 = 
	`dwmac_if_med_¡©us
(

350 
£lf
, &
med
, sf->
MDIO_BUS_ADDR
 );

351 
ut32_t
 
oui
;

352 
ut8_t
 
mod
;

353 
ut8_t
 
»visiÚ
;

354 
ut16_t
 
gÁ_äame_size
 = 1518;

357 iàÐÐ
MACGRP_MAC_CONFIGURATION_JE
 & 
macg½
->
mac_cÚfigu¿tiÚ
 ) != 0 ) {

359 
gÁ_äame_size
 = 9018;

362 iàÐ
med_ok
 ) {

363 
	`¹ems_ifmed2¡r
Ð
med
, 
NULL
, 0 );

364 
	`´tf
( "\n" );

365 
o
 = 
	`dwmac_g_phy_fo
(

366 
£lf
,

367 
£lf
->
MDIO_BUS_ADDR
,

368 &
oui
,

369 &
mod
,

370 &
»visiÚ
 );

372 iàÐ
o
 == 0 ) {

373 
	`´tf
Ð"PHY 0x%02x: OUI = 0x%04" 
PRIX32
 ", Mod = 0x%02" 
PRIX8
 ", Rev = "

374 "0x%02" 
PRIX8
 "\n",

375 
£lf
->
MDIO_BUS_ADDR
,

376 
oui
,

377 
mod
,

378 
»visiÚ
 );

379 
	`´tf
( "PHY status counters:\n" );

380 
	`DWMAC_PRINT_COUNTER
(

381 "%" 
PRIu32
 "ink down\n",

382 
£lf
->
¡©s
.
phy_¡©us_couÁs
.
lk_down


384 
	`DWMAC_PRINT_COUNTER
(

385 "%" 
PRIu32
 "ink up\n",

386 
£lf
->
¡©s
.
phy_¡©us_couÁs
.
lk_up


390 
	`´tf
Ð"PHY %d communiÿtiÚ¼Ü\n", 
£lf
->
MDIO_BUS_ADDR
 );

393 
	`´tf
( "\nHardware counters:\n" );

395 iàÐÐ
£lf
->
dmag½
->
hw_ã©u»
 & 
DMAGRP_HW_FEATURE_MMCSEL
 ) != 0 ) {

396 
	`DWMAC_PRINT_COUNTER
(

397 "%" 
PRIu32
 " bytesransmitted,xclusive ofreamblendetried bytes, "

399 
macg½
->
txoùcouÁ_gb


401 
	`DWMAC_PRINT_COUNTER
(

402 "%" 
PRIu32
 " goodnd bad framesransmitted,xclusive ofetried "

404 
macg½
->
txäamecouÁ_gb


406 
	`DWMAC_PRINT_COUNTER
(

407 "%" 
PRIu32
 " good broadcast framesransmitted\n",

408 
macg½
->
txbrßdÿ¡äames_g


410 
	`DWMAC_PRINT_COUNTER
(

411 "%" 
PRIu32
 " good multicast framesransmitted\n",

412 
macg½
->
txmuÉiÿ¡äames_g


414 
	`DWMAC_PRINT_COUNTER
(

415 "%" 
PRIu32
 " goodnd bad framesransmitted withength 64 bytes, "

417 
macg½
->
tx64oùs_gb


419 
	`DWMAC_PRINT_COUNTER
(

420 "%" 
PRIu32
 " goodnd bad framesransmitted withength between 65nd "

422 
macg½
->
tx65to127oùs_gb


424 
	`DWMAC_PRINT_COUNTER
(

425 "%" 
PRIu32
 " goodnd bad framesransmitted withength between 128nd "

427 
macg½
->
tx128to255oùs_gb


429 
	`DWMAC_PRINT_COUNTER
(

430 "%" 
PRIu32
 " goodnd bad framesransmitted withength between 256nd "

432 
macg½
->
tx256to511oùs_gb


434 
	`DWMAC_PRINT_COUNTER
(

435 "%" 
PRIu32
 " goodnd bad framesransmitted withength between 512nd "

437 
macg½
->
tx512to1023oùs_gb


439 
	`DWMAC_PRINT_COUNTER
(

440 "%" 
PRIu32
 " goodnd bad framesransmitted withength between 1,024nd"

442 
macg½
->
tx1024tomaxoùs_gb


444 
	`DWMAC_PRINT_COUNTER
(

445 "%" 
PRIu32
 " goodnd bad unicast framesransmitted\n",

446 
macg½
->
txuniÿ¡äames_gb


448 
	`DWMAC_PRINT_COUNTER
(

449 "%" 
PRIu32
 " goodnd bad multicast framesransmitted\n",

450 
macg½
->
txmuÉiÿ¡äames_gb


452 
	`DWMAC_PRINT_COUNTER
(

453 "%" 
PRIu32
 " goodnd bad broadcast framesransmitted\n",

454 
macg½
->
txbrßdÿ¡äames_gb


456 
	`DWMAC_PRINT_COUNTER
(

457 "%" 
PRIu32
 " framesborted dueo frame underflowrror\n",

458 
macg½
->
txundæowrÜ


460 
	`DWMAC_PRINT_COUNTER
(

461 "%" 
PRIu32
 " successfullyransmitted framesfter single collision in "

463 
macg½
->
txsgËcÞ_g


465 
	`DWMAC_PRINT_COUNTER
(

466 "%" 
PRIu32
 " successfullyransmitted framesfter morehan single"

468 
macg½
->
txmuÉicÞ_g


470 
	`DWMAC_PRINT_COUNTER
(

471 "%" 
PRIu32
 " successfullyransmitted framesfter deferral in "

473 
macg½
->
txdeã¼ed


475 
	`DWMAC_PRINT_COUNTER
(

476 "%" 
PRIu32
 " framesborted dueoate collisionrror\n",

477 
macg½
->
txÏcÞ


479 
	`DWMAC_PRINT_COUNTER
(

480 "%" 
PRIu32
 " framesborted dueoxcessive (16) collisionrrors\n",

481 
macg½
->
txexesscÞ


483 
	`DWMAC_PRINT_COUNTER
(

484 "%" 
PRIu32
 " framesborted dueo carrier senserror (no carrier oross"

486 
macg½
->
txÿ¼»¼


488 
	`DWMAC_PRINT_COUNTER
(

489 "%" 
PRIu32
 " bytesransmitted,xclusive ofreamble, in good frames "

491 
macg½
->
txoùút


493 
	`DWMAC_PRINT_COUNTER
(

494 "%" 
PRIu32
 " good framesransmitted\n",

495 
macg½
->
txäamecouÁ_g


497 
	`DWMAC_PRINT_COUNTER
(

498 "%" 
PRIu32
 " framesborted dueoxcessive deferralrror (deferred for"

500 
macg½
->
txexûssdef


502 
	`DWMAC_PRINT_COUNTER
(

503 "%" 
PRIu32
 " good PAUSE framesransmitted\n",

504 
macg½
->
tx·u£äames


506 
	`DWMAC_PRINT_COUNTER
(

507 "%" 
PRIu32
 " good VLAN framesransmitted,xclusive ofetried frames\n",

508 
macg½
->
txvÏnäames_g


510 
	`DWMAC_PRINT_COUNTER
(

511 "%" 
PRIu32
 " goodnd bad frameseceived\n",

512 
macg½
->
txovsize_g


514 
	`DWMAC_PRINT_COUNTER
(

515 "%" 
PRIu32
 " goodnd bad frameseceived\n",

516 
macg½
->
rxäamecouÁ_gb


518 
	`DWMAC_PRINT_COUNTER
(

519 "%" 
PRIu32
 " byteseceived,xclusive ofreamble, in goodnd bad "

521 
macg½
->
rxoùcouÁ_gb


523 
	`DWMAC_PRINT_COUNTER
(

524 "%" 
PRIu32
 " byteseceived,xclusive ofreamble, only in good frames\n",

525 
macg½
->
rxoùcouÁ_g


527 
	`DWMAC_PRINT_COUNTER
(

528 "%" 
PRIu32
 " good broadcast frameseceived\n",

529 
macg½
->
rxbrßdÿ¡äames_g


531 
	`DWMAC_PRINT_COUNTER
(

532 "%" 
PRIu32
 " good multicast frameseceived\n",

533 
macg½
->
rxmuÉiÿ¡äames_g


535 
	`DWMAC_PRINT_COUNTER
(

536 "%" 
PRIu32
 " frameseceived with CRCrror\n",

537 
macg½
->
rxüû¼Ü


539 
	`DWMAC_PRINT_COUNTER
(

540 "%" 
PRIu32
 " frameseceived withlignment (dribble)rror. Valid only"

542 
macg½
->
rx®ignm¼Ü


544 
	`DWMAC_PRINT_COUNTER
(

545 "%" 
PRIu32
 " frameseceived withunt (<64 bytesnd CRCrror)rror\n",

546 
macg½
->
rxruÁrÜ


548 
	`DWMAC_PRINT_COUNTER
(

549 "%" 
PRIu32
 " giant frameseceived withength (including CRC) greater "

550 "thª %" 
PRIu16
 " bytes (%" PRIu16 " bytes for VLANagged)nd with CRC"

552 
macg½
->
rxjabbrÜ
, 
gÁ_äame_size
, giant_frame_size + 4

554 
	`DWMAC_PRINT_COUNTER
(

555 "%" 
PRIu32
 " frameseceived withengthesshan 64 bytes, withoutny"

557 
macg½
->
rxundsize_g


559 
	`DWMAC_PRINT_COUNTER
(

560 "%" 
PRIu32
 " frameseceived withength greaterhanhe maxsize (1,518"

562 
macg½
->
rxovsize_g


564 
	`DWMAC_PRINT_COUNTER
(

565 "%" 
PRIu32
 " goodnd bad frameseceived withength 64 bytes,xclusive"

567 
macg½
->
rx64oùs_gb


569 
	`DWMAC_PRINT_COUNTER
(

570 "%" 
PRIu32
 " goodnd bad frameseceived withength between 65nd 127"

572 
macg½
->
rx65to127oùs_gb


574 
	`DWMAC_PRINT_COUNTER
(

575 "%" 
PRIu32
 " goodnd bad frameseceived withength between 128nd 255"

577 
macg½
->
rx128to255oùs_gb


579 
	`DWMAC_PRINT_COUNTER
(

580 "%" 
PRIu32
 " goodnd bad frameseceived withength between 256nd 511"

582 
macg½
->
rx256to511oùs_gb


584 
	`DWMAC_PRINT_COUNTER
(

585 "%" 
PRIu32
 " goodnd bad frameseceived withength between 512nd "

587 
macg½
->
rx512to1023oùs_gb


589 
	`DWMAC_PRINT_COUNTER
(

590 "%" 
PRIu32
 " goodnd bad frameseceived withength between 1,024nd"

592 
macg½
->
rx1024tomaxoùs_gb


594 
	`DWMAC_PRINT_COUNTER
(

595 "%" 
PRIu32
 " good unicast frameseceived\n",

596 
macg½
->
rxuniÿ¡äames_g


598 
	`DWMAC_PRINT_COUNTER
(

599 "%" 
PRIu32
 " frameseceived withengthrror (lengthype fieldot "

601 
macg½
->
rxËngthrÜ


603 
	`DWMAC_PRINT_COUNTER
(

604 "%" 
PRIu32
 " frameseceived withength fieldotqualohe valid "

606 
macg½
->
rxoutoäªgy³


608 
	`DWMAC_PRINT_COUNTER
(

609 "%" 
PRIu32
 " goodnd valid PAUSE frameseceived\n",

610 
macg½
->
rx·u£äames


612 
	`DWMAC_PRINT_COUNTER
(

613 "%" 
PRIu32
 " missedeceived frames dueo FIFO overflow\n",

614 
macg½
->
rxfifoovæow


616 
	`DWMAC_PRINT_COUNTER
(

617 "%" 
PRIu32
 " goodnd bad VLAN frameseceived\n",

618 
macg½
->
rxvÏnäames_gb


620 
	`DWMAC_PRINT_COUNTER
(

621 "%" 
PRIu32
 " frameseceived withrror dueo watchdogimeoutrror "

623 
macg½
->
rxw©chdogrÜ


625 
	`DWMAC_PRINT_COUNTER
(

626 "%" 
PRIu32
 " frameseceived with Receiverror or Frame Extensionrror"

628 
macg½
->
rxrcvrÜ


630 
	`DWMAC_PRINT_COUNTER
(

631 "%" 
PRIu32
 "eceived good control frames\n",

632 
macg½
->
rxù¾äames_g


635 
	`´tf
( "\n" );

637 
	`DWMAC_PRINT_COUNTER
(

638 "%" 
PRIu32
 " good IPv4 datagramseceived withhe TCP, UDP, or ICMP "

640 
macg½
->
rxv4_gd_äms


642 
	`DWMAC_PRINT_COUNTER
(

643 "%" 
PRIu32
 " IPv4 datagramseceived with header (checksum,ength, or "

645 
macg½
->
rxv4_hd»¼_äms


647 
	`DWMAC_PRINT_COUNTER
(

648 "%" 
PRIu32
 " IPv4 datagram frameseceivedhat didot have TCP, UDP, "

650 
macg½
->
rxv4_nÝay_äms


652 
	`DWMAC_PRINT_COUNTER
(

653 "%" 
PRIu32
 " good IPv4 datagrams with fragmentation\n",

654 
macg½
->
rxv4_äag_äms


656 
	`DWMAC_PRINT_COUNTER
(

657 "%" 
PRIu32
 " good IPv4 datagramseceivedhat had UDPayload with "

659 
macg½
->
rxv4_udsbl_äms


661 
	`DWMAC_PRINT_COUNTER
(

662 "%" 
PRIu32
 " good IPv6 datagramseceived with TCP, UDP, or ICMP "

664 
macg½
->
rxv6_gd_äms


666 
	`DWMAC_PRINT_COUNTER
(

667 "%" 
PRIu32
 " IPv6 datagramseceived with headerrrors (length or "

669 
macg½
->
rxv6_hd»¼_äms


671 
	`DWMAC_PRINT_COUNTER
(

672 "%" 
PRIu32
 " IPv6 datagram frameseceivedhat didot have TCP, UDP,"

675 
macg½
->
rxv6_nÝay_äms


677 
	`DWMAC_PRINT_COUNTER
(

678 "%" 
PRIu32
 " good IP datagrams with good UDPayload. This counter is "

680 
macg½
->
rxudp_gd_äms


682 
	`DWMAC_PRINT_COUNTER
(

683 "%" 
PRIu32
 " good IP datagrams whose UDPayload has checksumrror\n",

684 
macg½
->
rxudp_r_äms


686 
	`DWMAC_PRINT_COUNTER
(

687 "%" 
PRIu32
 " good IP datagrams with good TCPayload\n",

688 
macg½
->
rxtý_gd_äms


690 
	`DWMAC_PRINT_COUNTER
(

691 "%" 
PRIu32
 " good IP datagrams whose TCPayload has checksumrror\n",

692 
macg½
->
rxtý_r_äms


694 
	`DWMAC_PRINT_COUNTER
(

695 "%" 
PRIu32
 " good IP datagrams with good ICMPayload\n",

696 
macg½
->
rxicmp_gd_äms


698 
	`DWMAC_PRINT_COUNTER
(

699 "%" 
PRIu32
 " good IP datagrams whose ICMPayload has checksumrror\n",

700 
macg½
->
rxicmp_r_äms


702 
	`DWMAC_PRINT_COUNTER
(

703 "%" 
PRIu32
 " byteseceived in good IPv4 datagramsncapsulating TCP, UDP,"

705 
macg½
->
rxv4_gd_oùs


707 
	`DWMAC_PRINT_COUNTER
(

708 "%" 
PRIu32
 " byteseceived in IPv4 datagrams with headerrrors (checksum,"

711 
macg½
->
rxv4_hd»¼_oùs


713 
	`DWMAC_PRINT_COUNTER
(

714 "%" 
PRIu32
 " byteseceived in IPv4 datagramshat didot have TCP, UDP"

717 
macg½
->
rxv4_nÝay_oùs


719 
	`DWMAC_PRINT_COUNTER
(

720 "%" 
PRIu32
 " byteseceived in fragmented IPv4 datagrams. The value inhe"

722 
macg½
->
rxv4_äag_oùs


724 
	`DWMAC_PRINT_COUNTER
(

725 "%" 
PRIu32
 " byteseceived in UDP segmenthat hadhe UDP checksum "

727 
macg½
->
rxv4_udsbl_oùs


729 
	`DWMAC_PRINT_COUNTER
(

730 "%" 
PRIu32
 " byteseceived in good IPv6 datagramsncapsulating TCP, UDP "

732 
macg½
->
rxv6_gd_oùs


734 
	`DWMAC_PRINT_COUNTER
(

735 "%" 
PRIu32
 " byteseceived in IPv6 datagrams with headerrrors (length, "

738 
macg½
->
rxv6_hd»¼_oùs


740 
	`DWMAC_PRINT_COUNTER
(

741 "%" 
PRIu32
 " byteseceived in IPv6 datagramshat didot have TCP, UDP"

744 
macg½
->
rxv6_nÝay_oùs


746 
	`DWMAC_PRINT_COUNTER
(

747 "%" 
PRIu32
 " byteseceived in good UDP segment. This counter doesot "

749 
macg½
->
rxudp_gd_oùs


751 
	`DWMAC_PRINT_COUNTER
(

752 "%" 
PRIu32
 " byteseceived in UDP segmenthat had checksumrrors\n",

753 
macg½
->
rxudp_r_oùs


755 
	`DWMAC_PRINT_COUNTER
(

756 "%" 
PRIu32
 " byteseceived in good TCP segment\n",

757 
macg½
->
rxtý_gd_oùs


759 
	`DWMAC_PRINT_COUNTER
(

760 "%" 
PRIu32
 " byteseceived in TCP segment with checksumrrors\n",

761 
macg½
->
rxtýroùs


763 
	`DWMAC_PRINT_COUNTER
(

764 "%" 
PRIu32
 " byteseceived in good ICMP segment\n",

765 
macg½
->
rxicmp_gd_oùs


767 
	`DWMAC_PRINT_COUNTER
(

768 "%" 
PRIu32
 " byteseceived inn ICMP segment with checksumrrors\n",

769 
macg½
->
rxicmp_r_oùs


773 iàÐ
o
 == 0 ) {

774 
	`´tf
( "\nInterrupt counts:\n" );

775 
	`DWMAC_PRINT_COUNTER
Ð"%" 
PRIu32
 "eceive interrputs\n",

776 
£lf
->
¡©s
.
dma_q_couÁs
.
»ûive


778 
	`DWMAC_PRINT_COUNTER
Ð"%" 
PRIu32
 "ransmit interrupts\n",

779 
£lf
->
¡©s
.
dma_q_couÁs
.
ªsm


781 
	`DWMAC_PRINT_COUNTER
Ð"%" 
PRIu32
 "x jabber interrupts\n",

782 
£lf
->
¡©s
.
dma_q_couÁs
.
tx_jabb


784 
	`DWMAC_PRINT_COUNTER
Ð"%" 
PRIu32
 "x overflow interrupts\n",

785 
£lf
->
¡©s
.
dma_q_couÁs
.
rx_ovæow


787 
	`DWMAC_PRINT_COUNTER
Ð"%" 
PRIu32
 "xarly interrupts\n",

788 
£lf
->
¡©s
.
dma_q_couÁs
.
rx_¾y


790 
	`DWMAC_PRINT_COUNTER
Ð"%" 
PRIu32
 "x buffer unavailable interrupts\n",

791 
£lf
->
¡©s
.
dma_q_couÁs
.
rx_buf_uÇv


793 
	`DWMAC_PRINT_COUNTER
Ð"%" 
PRIu32
 "xrocess stopped interrupts\n",

794 
£lf
->
¡©s
.
dma_q_couÁs
.
rx_´oûss_¡Ý³d


796 
	`DWMAC_PRINT_COUNTER
Ð"%" 
PRIu32
 "x watchdog interrupts\n",

797 
£lf
->
¡©s
.
dma_q_couÁs
.
rx_w©chdog


799 
	`DWMAC_PRINT_COUNTER
Ð"%" 
PRIu32
 "xarly interrupts\n",

800 
£lf
->
¡©s
.
dma_q_couÁs
.
tx_¾y


802 
	`DWMAC_PRINT_COUNTER
Ð"%" 
PRIu32
 "x buffer unavailable interrupts\n",

803 
£lf
->
¡©s
.
dma_q_couÁs
.
tx_buf_uÇv


805 
	`DWMAC_PRINT_COUNTER
Ð"%" 
PRIu32
 "xrocess stopped interrupts\n",

806 
£lf
->
¡©s
.
dma_q_couÁs
.
tx_´oûss_¡Ý³d


808 
	`DWMAC_PRINT_COUNTER
Ð"%" 
PRIu32
 "x underflow interrupts\n",

809 
£lf
->
¡©s
.
dma_q_couÁs
.
tx_undæow


811 
	`DWMAC_PRINT_COUNTER
Ð"%" 
PRIu32
 " fatal busrror interrupts\n",

812 
£lf
->
¡©s
.
dma_q_couÁs
.
çl_bus_rÜ


814 
	`DWMAC_PRINT_COUNTER
Ð"%" 
PRIu32
 " unhandled interrupts\n",

815 
£lf
->
¡©s
.
dma_q_couÁs
.
unhªdËd


818 
	`´tf
( "\nRX DMA status counts:\n" );

819 
	`DWMAC_PRINT_COUNTER
Ð"%" 
PRIu32
 " CRCrrors\n",

820 
£lf
->
¡©s
.
desc_¡©us_couÁs_rx
.
üc_rÜ


822 
	`DWMAC_PRINT_COUNTER
(

823 "%" 
PRIu32
 "ate collision wheneceing in half duplex mode\n",

824 
£lf
->
¡©s
.
desc_¡©us_couÁs_rx
.
Ï_cÞlisiÚ


826 
	`DWMAC_PRINT_COUNTER
(

827 "%" 
PRIu32
 " giant frame orimestamp or checksumrror\n",

828 
£lf
->
¡©s
.
desc_¡©us_couÁs_rx
.
gÁ_äame


831 iàÐ
£lf
->
¡©s
.
desc_¡©us_couÁs_rx
.
w©chdog_timeout
 != 0

832 || 
£lf
->
¡©s
.
desc_¡©us_couÁs_rx
.
»ûive_rÜ
 != 0 ) {

833 
	`´tf
( " IP Header or IP Payload:\n" );

834 
	`DWMAC_PRINT_COUNTER
Ð"%" 
PRIu32
 "eceive watchdogimeout\n",

835 
£lf
->
¡©s
.
desc_¡©us_couÁs_rx
.
w©chdog_timeout


837 
	`DWMAC_PRINT_COUNTER
Ð"%" 
PRIu32
 "eceiverror\n",

838 
£lf
->
¡©s
.
desc_¡©us_couÁs_rx
.
»ûive_rÜ


842 
	`DWMAC_PRINT_COUNTER
Ð"%" 
PRIu32
 " buffer overflows in MTL\n",

843 
£lf
->
¡©s
.
desc_¡©us_couÁs_rx
.
ovæow_rÜ


845 
	`DWMAC_PRINT_COUNTER
Ð"%" 
PRIu32
 " descriptor buffersoo small\n",

846 
£lf
->
¡©s
.
desc_¡©us_couÁs_rx
.
desütÜ_rÜ


848 
	`DWMAC_PRINT_COUNTER
Ð"%" 
PRIu32
 "engthrrors\n",

849 
£lf
->
¡©s
.
desc_¡©us_couÁs_rx
.
Ëngth_rÜ


851 
	`DWMAC_PRINT_COUNTER
Ð"%" 
PRIu32
 " dribble bitrrors\n",

852 
£lf
->
¡©s
.
desc_¡©us_couÁs_rx
.
dribbË_b_rÜ


854 
	`DWMAC_PRINT_COUNTER
Ð"%" 
PRIu32
 " vlanags\n",

855 
£lf
->
¡©s
.
desc_¡©us_couÁs_rx
.
vÏn_g


857 
	`DWMAC_PRINT_COUNTER
Ð"%" 
PRIu32
 "thernet frames\n",

858 
£lf
->
¡©s
.
desc_¡©us_couÁs_rx
.
hÃt_äames


860 
	`DWMAC_PRINT_COUNTER
Ð"%" 
PRIu32
 " destinationddress filter failures\n",

861 
£lf
->
¡©s
.
desc_¡©us_couÁs_rx
.
de¡_addr_ç


863 
	`DWMAC_PRINT_COUNTER
Ð"%" 
PRIu32
 " sourceddresss filter failures\n",

864 
£lf
->
¡©s
.
desc_¡©us_couÁs_rx
.
sourû_addr_ç


867 
	`´tf
( "\nTX DMA status counts:\n" );

868 
	`DWMAC_PRINT_COUNTER
Ð"%" 
PRIu32
 " jabberime-outs\n",

869 
£lf
->
¡©s
.
desc_¡©us_couÁs_tx
.
jabb


871 
	`DWMAC_PRINT_COUNTER
Ð"%" 
PRIu32
 " frame flushes\n",

872 
£lf
->
¡©s
.
desc_¡©us_couÁs_tx
.
äame_æushed


874 
	`DWMAC_PRINT_COUNTER
Ð"%" 
PRIu32
 "osses of carrier\n",

875 
£lf
->
¡©s
.
desc_¡©us_couÁs_tx
.
lossÿ¼r


877 
	`DWMAC_PRINT_COUNTER
Ð"%" 
PRIu32
 "o carriers\n",

878 
£lf
->
¡©s
.
desc_¡©us_couÁs_tx
.
no_ÿ¼r


880 
	`DWMAC_PRINT_COUNTER
Ð"%" 
PRIu32
 "xcessive collisions\n",

881 
£lf
->
¡©s
.
desc_¡©us_couÁs_tx
.
exûssive_cÞlisiÚs


883 
	`DWMAC_PRINT_COUNTER
Ð"%" 
PRIu32
 "xcessive deferrals\n",

884 
£lf
->
¡©s
.
desc_¡©us_couÁs_tx
.
exûssive_deã¼®


886 
	`DWMAC_PRINT_COUNTER
Ð"%" 
PRIu32
 " underfolwrrors\n",

887 
£lf
->
¡©s
.
desc_¡©us_couÁs_tx
.
undæow


889 
	`DWMAC_PRINT_COUNTER
Ð"%" 
PRIu32
 " IP headerrror\n",

890 
£lf
->
¡©s
.
desc_¡©us_couÁs_tx
.
_hd_rÜ


892 
	`DWMAC_PRINT_COUNTER
Ð"%" 
PRIu32
 "ayloadrror\n",

893 
£lf
->
¡©s
.
desc_¡©us_couÁs_rx
.
sourû_addr_ç


895 
	`DWMAC_PRINT_COUNTER
(

896 "%" 
PRIu32
 " MAC defers beforeransmission because ofheresence of carrier\n",

897 
£lf
->
¡©s
.
desc_¡©us_couÁs_tx
.
deã¼ed


899 
	`DWMAC_PRINT_COUNTER
Ð"%" 
PRIu32
 " VLAN frames\n",

900 
£lf
->
¡©s
.
desc_¡©us_couÁs_tx
.
vÏn


903 
	`´tf
( "\nRX frame counts:\n" );

904 
	`DWMAC_PRINT_COUNTER
Ð"%" 
PRIu32
 " frames withrrors\n",

905 
£lf
->
¡©s
.
äame_couÁs_rx
.
rÜs


907 
	`DWMAC_PRINT_COUNTER
Ð"%" 
PRIu32
 " frames dropped\n",

908 
£lf
->
¡©s
.
äame_couÁs_rx
.
drÝ³d


910 
	`DWMAC_PRINT_COUNTER
Ð"%" 
PRIu32
 " frames good\n",

911 
£lf
->
¡©s
.
äame_couÁs_rx
.
äames_good


913 
	`DWMAC_PRINT_COUNTER
Ð"%" 
PRIu32
 " bytes in good frames\n",

914 
£lf
->
¡©s
.
äame_couÁs_rx
.
bys_good


916 
	`DWMAC_PRINT_COUNTER
Ð"%" 
PRIu32
 " frames good or bad\n",

917 
£lf
->
¡©s
.
äame_couÁs_rx
.
äames


919 
	`DWMAC_PRINT_COUNTER
Ð"%" 
PRIu32
 " DMA suspended\n",

920 
£lf
->
¡©s
.
äame_couÁs_rx
.
dma_su¥ded


923 
	`´tf
( "\nTX frame counts:\n" );

924 
	`DWMAC_PRINT_COUNTER
Ð"%" 
PRIu32
 " frameseceived frometwork stack\n",

925 
£lf
->
¡©s
.
äame_couÁs_tx
.
äames_äom_¡ack


927 
	`DWMAC_PRINT_COUNTER
Ð"%" 
PRIu32
 " framesranmittedo DMA\n",

928 
£lf
->
¡©s
.
äame_couÁs_tx
.
äames_to_dma


930 
	`DWMAC_PRINT_COUNTER
Ð"%" 
PRIu32
 "acketsranmittedo DMA\n",

931 
£lf
->
¡©s
.
äame_couÁs_tx
.
·cks_to_dma


933 
	`DWMAC_PRINT_COUNTER
Ð"%" 
PRIu32
 " bytesranmittedo DMA\n",

934 
£lf
->
¡©s
.
äame_couÁs_tx
.
bys_to_dma


936 
	`DWMAC_PRINT_COUNTER
Ð"%" 
PRIu32
 "acket buffersegained from DMA\n",

937 
£lf
->
¡©s
.
äame_couÁs_tx
.
·cks_ªmd_by_DMA


939 
	`DWMAC_PRINT_COUNTER
Ð"%" 
PRIu32
 "acketrrors\n",

940 
£lf
->
¡©s
.
äame_couÁs_tx
.
·ck_rÜs


943 
	`´tf
( "\n" );

945 #ifdeà
RTEMS_DEBUG


947 cÚ¡ 
dwmac_commÚ_desc_Ýs
 *
DESC_OPS
 =

948 (cÚ¡ 
dwmac_commÚ_desc_Ýs
 *è
£lf
->
CFG
->
DESC_OPS
->
Ýs
;

950 Ð
DESC_OPS
->
´t_rx_desc
 )(

951 
£lf
->
dma_rx
,

952 (è
£lf
->
bsd_cÚfig
->
xbuf_couÁ


955 Ð
DESC_OPS
->
´t_tx_desc
 )(

956 
£lf
->
dma_tx
,

957 (è
£lf
->
bsd_cÚfig
->
xbuf_couÁ


963  
o
;

964 
	}
}

966 
le
 
	$dwmac_üemt
(

967 cÚ¡ 
v®ue
,

968 cÚ¡ 
cyþe
 )

970 iàÐ
v®ue
 < 
cyþe
 ) {

971  
v®ue
 + 1;

975 
	}
}

979 
	$dwmac_sk_rx
Ð*
¬g
 )

981 
dwmac_commÚ_cÚxt
 *
£lf
 = 
¬g
;

982 
dwmac_commÚ_rx_äame_couÁs
 *
couÁs
 = &
£lf
->
¡©s
.
äame_couÁs_rx
;

983 cÚ¡ 
INDEX_MAX
 =

984 (è
£lf
->
bsd_cÚfig
->
rbuf_couÁ
 - 1U;

985 
size_t
 
äame_Ën_Ï¡
 = 0;

986 cÚ¡ 
dwmac_commÚ_desc_Ýs
 *
DESC_OPS
 =

987 (cÚ¡ 
dwmac_commÚ_desc_Ýs
 *è
£lf
->
CFG
->
DESC_OPS
->
Ýs
;

988 
size_t
 
£gmt_size
;

991  
ue
 ) {

992 
¹ems_evt_£t
 
evts
;

993 
¹ems_¡©us_code
 
sc
 = 
	`¹ems_bsdÃt_evt_»ûive
(

994 
DWMAC_COMMON_EVENT_TASK_INIT


995 | 
DWMAC_COMMON_EVENT_TASK_STOP


996 | 
DWMAC_COMMON_EVENT_RX_FRAME_RECEIVED
,

997 
RTEMS_EVENT_ANY
 | 
RTEMS_WAIT
,

998 
RTEMS_NO_TIMEOUT
,

999 &
evts


1001 
	`as£¹
Ð
sc
 =ð
RTEMS_SUCCESSFUL
 );

1004 iàÐÐ
evts
 & 
DWMAC_COMMON_EVENT_TASK_STOP
 ) != 0 ) {

1005 
	`dwmac_cÜe_dma_¡Ý_rx
Ð
£lf
 );

1006 
	`dwmac_di§bË_q_rx
Ð
£lf
 );

1009 Ð
DESC_OPS
->
»Ëa£_rx_bufs
 )Ð
£lf
 );

1011 
	`dwmac_cÚÞ_»que¡_com¶e
Ð
£lf
 );

1019 iàÐÐ
evts
 & 
DWMAC_COMMON_EVENT_TASK_INIT
 ) != 0 ) {

1020 
dex
;

1021 
	`dwmac_cÜe_dma_¡Ý_rx
Ð
£lf
 );

1022 Ð
DESC_OPS
->
»Ëa£_rx_bufs
 )Ð
£lf
 );

1024  
dex
 = 0; index <ð
INDEX_MAX
; ++index ) {

1025 
£lf
->
mbuf_addr_rx
[
dex
] = ( 
DESC_OPS
->
®loc_d©a_buf
 )( self );

1026 
	`as£¹
Ð
£lf
->
mbuf_addr_rx
[
dex
] !ð
NULL
 );

1027 Ð
DESC_OPS
->
_rx_desc
 )Ð
£lf
, 
dex
 );

1030 
£lf
->
idx_rx
 = 0;

1031 
äame_Ën_Ï¡
 = 0;

1034 
	`dwmac_cÜe_»£t_dma_q_¡©us_rx
Ð
£lf
 );

1036 
	`dwmac_cÜe_dma_¡¬t_rx
Ð
£lf
 );

1038 
	`dwmac_cÚÞ_»que¡_com¶e
Ð
£lf
 );

1039 
evts
 =vents

1040 & (
¹ems_evt_£t
èÐ~
DWMAC_COMMON_EVENT_RX_FRAME_RECEIVED
 );

1044 iàÐÐ
evts
 & 
DWMAC_COMMON_EVENT_RX_FRAME_RECEIVED
 ) != 0 ) {

1045 
idx
 = 
£lf
->
idx_rx
;

1048  ( 
DESC_OPS
->
am_i_rx_owÃr
 )Ð
£lf
, 
idx
 ) ) {

1049 
mbuf
 *
p_m_Ãw
;

1050 
dwmac_commÚ_rx_äame_¡©us
 
¡©us
;

1051 
idx_Ãxt
 = 
	`dwmac_üemt
(

1052 
£lf
->
idx_rx
, 
INDEX_MAX
 );

1055 
£lf
->
idx_rx
 = 
idx_Ãxt
;

1058 
¡©us
 = ( 
DESC_OPS
->
rx_¡©us
 )Ð
£lf
, 
idx
 );

1060 iàÐ
¡©us
 =ð
DWMAC_COMMON_RX_FRAME_STATUS_DISCARD


1061 || 
¡©us
 =ð
DWMAC_COMMON_RX_FRAME_STATUS_CSUM_NONE
 ) {

1062 
	`DWMAC_PRINT_DBG
(

1064 
idx


1066 ++
couÁs
->
rÜs
;

1069 Ð
DESC_OPS
->
_rx_desc
 )Ð
£lf
, 
idx
 );

1070 } iàÐ
¡©us
 =ð
DWMAC_COMMON_RX_FRAME_STATUS_LLC_SNAP
 ) {

1071 
	`DWMAC_PRINT_DBG
(

1073 
idx


1075 ++
couÁs
->
drÝ³d
;

1078 Ð
DESC_OPS
->
_rx_desc
 )Ð
£lf
, 
idx
 );

1082 
p_m_Ãw
 = ( 
DESC_OPS
->
®loc_d©a_buf
 )Ð
£lf
 );

1084 iàÐ
p_m_Ãw
 !ð
NULL
 ) {

1085 
boÞ
 
is_f¡_£g
;

1086 
boÞ
 
is_Ï¡_£g
;

1087 
mbuf
 *
p_m
;

1088 
ut32_t
 
äame_Ën
 = ( 
DESC_OPS
->
g_rx_äame_Ën
 )(

1089 
£lf
, 
idx
 );

1093 
is_f¡_£g
 = ( 
DESC_OPS
->
is_f¡_rx_£gmt
 )Ð
£lf
, 
idx
 );

1094 
is_Ï¡_£g
 = ( 
DESC_OPS
->
is_Ï¡_rx_£gmt
 )Ð
£lf
, 
idx
 );

1096 iàÐ
is_f¡_£g
 ) {

1097 
£gmt_size
 = 
äame_Ën
;

1099 
£gmt_size
 = 
äame_Ën
 - 
äame_Ën_Ï¡
;

1102 
äame_Ën_Ï¡
 = 
äame_Ën
;

1104 
p_m
 = 
£lf
->
mbuf_addr_rx
[
idx
];

1105 
£lf
->
mbuf_addr_rx
[
idx
] = 
p_m_Ãw
;

1108 Ð
DESC_OPS
->
_rx_desc
 )Ð
£lf
, 
idx
 );

1110 iàÐ
p_m
 !ð
NULL
 ) {

1112 
h_hd
 *
eh
 = 
	`mtod
Ð
p_m
, ether_header * );

1113 
sz
 = (è
£gmt_size
;

1115 
	`¹ems_ÿche_v®id©e_muÉË_d©a_les
(

1116 
eh
, 
£gmt_size
 );

1119 iàÐ
is_Ï¡_£g
 ) {

1120 
sz
 -ðÐ
ETHER_HDR_LEN
 + 
ETHER_CRC_LEN
 );

1122 
sz
 -ð
ETHER_HDR_LEN
;

1126 
p_m
->
m_Ën
 = 
sz
;

1127 
p_m
->
m_pkthdr
.
Ën
 = 
sz
;

1128 
p_m
->
m_d©a
 = 
	`mtod
Ðp_m, * ) + 
ETHER_HDR_LEN
;

1130 
	`DWMAC_COMMON_DSB
();

1132 
	`DWMAC_PRINT_DBG
(

1134 
idx
,

1135 
£gmt_size
,

1136 Ð
is_f¡_£g
 ) ? ( "F" ) : ( "" ),

1137 Ð
is_Ï¡_£g
 ) ? ( "L" ) : ( "" )

1140 
	`h_put
Ð&
£lf
->
¬pcom
.
ac_if
, 
eh
, 
p_m
 );

1142 ++
couÁs
->
äames_good
;

1143 
couÁs
->
bys_good
 +ð(
ut32_t
è
p_m
->
m_Ën
;

1145 
	`DWMAC_PRINT_DBG
( "rx: %s: Inconsistent Rx descriptor chain\n",

1146 
£lf
->
¬pcom
.
ac_if
.
if_Çme
 );

1147 ++
couÁs
->
drÝ³d
;

1152 ++
couÁs
->
drÝ³d
;

1155 Ð
DESC_OPS
->
_rx_desc
 )Ð
£lf
, 
idx
 );

1156 
	`DWMAC_PRINT_DBG
(

1158 
idx


1163 iàÐÐ
£lf
->
dmag½
->
¡©us
 & 
DMAGRP_STATUS_RU
 ) != 0 ) {

1165 
	`dwmac_cÜe_dma_»¡¬t_rx
Ð
£lf
 );

1166 
	`DWMAC_PRINT_DBG
(

1168 
idx


1170 ++
couÁs
->
dma_su¥ded
;

1171 
£lf
->
dmag½
->
¡©us
 = 
DMAGRP_STATUS_RU
;

1174 
idx
 = 
idx_Ãxt
;

1175 ++
couÁs
->
äames
;

1179 
£lf
->
dmag½
->
¡©us
 = 
DMAGRP_STATUS_RI
;

1183 
	`dwmac_abË_q_rx
Ð
£lf
 );

1185 
	}
}

1187 
mbuf
 *
	$dwmac_Ãxt_äagmt
(

1188 
iâ
 *
iå
,

1189 
mbuf
 *
m
,

1190 
boÞ
 *
is_f¡
,

1191 
boÞ
 *
is_Ï¡
,

1192 
size_t
 *
size
 ) {

1193 
mbuf
 *
n
 = 
NULL
;

1194 
sz
 = 0;

1197  
ue
 ) {

1198 iàÐ
m
 =ð
NULL
 ) {

1200 
	`IF_DEQUEUE
Ð&
iå
->
if_¢d
, 
m
 );

1203 iàÐ
m
 =ð
NULL
 ) {

1204  
m
;

1209 
	`as£¹
Ð
ETHER_MAX_LEN
 >ð
m
->
m_pkthdr
.
Ën
 );

1210 *
is_f¡
 = 
ue
;

1214 
sz
 = 
m
->
m_Ën
;

1216 iàÐ
sz
 > 0 ) {

1221 
m
 = 
	`m_ä
( m );

1226 *
size
 = (
size_t
è
sz
;

1229 
n
 = 
m
->
m_Ãxt
;

1231  
n
 !ð
NULL
 &&->
m_Ën
 <= 0 ) {

1232 
n
 = 
	`m_ä
( );

1235 
m
->
m_Ãxt
 = 
n
;

1238 iàÐ
n
 =ð
NULL
 ) {

1239 *
is_Ï¡
 = 
ue
;

1241 *
is_Ï¡
 = 
çl£
;

1244  
m
;

1245 
	}
}

1247 
	$dwmac_upd©e_autÚegÙtiÚ_·¿ms
Ð
dwmac_commÚ_cÚxt
 *
£lf
 )

1249 
o
 = 0;

1250 
ut32_t
 
v®ue
 = 
£lf
->
macg½
->
mac_cÚfigu¿tiÚ
;

1251 
med
 = 0;

1252 
boÞ
 
med_ok
 = 
	`dwmac_if_med_¡©us
(

1253 
£lf
, &
med
, sf->
MDIO_BUS_ADDR
 );

1256 iàÐ
med_ok
 ) {

1258 iàÐ
IFM_ETHER
 =ð
	`IFM_TYPE
Ð
med
 ) ) {

1259 iàÐ
IFM_NONE
 !ð
	`IFM_SUBTYPE
Ð
med
 ) ) {

1260 iàÐ
IFM_FDX
 & 
med
 ) {

1262 
v®ue
 |ð
MACGRP_MAC_CONFIGURATION_DM
;

1265 
v®ue
 &ð~
MACGRP_MAC_CONFIGURATION_DM
;

1268  
	`IFM_SUBTYPE
Ð
med
 ) ) {

1269 
IFM_10_T
:

1272 
v®ue
 &ð~
MACGRP_MAC_CONFIGURATION_FES
;

1275 
v®ue
 |ð
MACGRP_MAC_CONFIGURATION_PS
;

1277 
IFM_100_TX
:

1280 
v®ue
 |ð
MACGRP_MAC_CONFIGURATION_FES
;

1283 
v®ue
 |ð
MACGRP_MAC_CONFIGURATION_PS
;

1285 
IFM_1000_T
:

1288 
v®ue
 &ð~
MACGRP_MAC_CONFIGURATION_FES
;

1291 
v®ue
 &ð~
MACGRP_MAC_CONFIGURATION_PS
;

1294 
o
 = 
ENOTSUP
;

1298 
o
 = 
ENOTSUP
;

1301 
o
 = 
ENOTSUP
;

1304 
o
 = 
ENOTSUP
;

1307 iàÐ
o
 == 0 ) {

1308 
£lf
->
macg½
->
mac_cÚfigu¿tiÚ
 = 
v®ue
;

1311  
o
;

1312 
	}
}

1316 
	$dwmac_sk_tx
Ð*
¬g
 )

1318 
dwmac_commÚ_cÚxt
 *
£lf
 = 
¬g
;

1319 
idx_ªsm
 = 0;

1320 
idx_ªsm_f¡
 = 0;

1321 
idx_ªsmd
 = 0;

1322 
idx_»Ëa£
 = 0;

1323 
mbuf
 *
p_m
 = 
NULL
;

1324 
boÞ
 
is_f¡
 = 
çl£
;

1325 
boÞ
 
is_Ï¡
 = 
çl£
;

1326 
size_t
 
size
 = 0;

1327 cÚ¡ 
INDEX_MAX
 =

1328 (è
£lf
->
bsd_cÚfig
->
xbuf_couÁ
 - 1U;

1329 cÚ¡ 
dwmac_commÚ_dma_Ýs
 *
DMA_OPS
 =

1330 (cÚ¡ 
dwmac_commÚ_dma_Ýs
 *è
£lf
->
CFG
->
MAC_OPS
->
dma
;

1331 cÚ¡ 
dwmac_commÚ_desc_Ýs
 *
DESC_OPS
 =

1332 (cÚ¡ 
dwmac_commÚ_desc_Ýs
 *è
£lf
->
CFG
->
DESC_OPS
->
Ýs
;

1333 cÚ¡ 
dwmac_ÿÎback_cfg
 *
CALLBACK
 = &
£lf
->
CFG
->CALLBACK;

1336  
ue
 ) {

1337 
¹ems_evt_£t
 
evts
 = 0;

1338 
¹ems_¡©us_code
 
sc
 = 
	`¹ems_bsdÃt_evt_»ûive
(

1339 
DWMAC_COMMON_EVENT_TASK_INIT


1340 | 
DWMAC_COMMON_EVENT_TASK_STOP


1341 | 
DWMAC_COMMON_EVENT_TX_TRANSMIT_FRAME


1342 | 
DWMAC_COMMON_EVENT_TX_FRAME_TRANSMITTED


1343 | 
DWMAC_COMMON_EVENT_TX_BUMP_UP_DMA_THRESHOLD


1344 | 
DWMAC_COMMON_EVENT_TX_PHY_STATUS_CHANGE
,

1345 
RTEMS_EVENT_ANY
 | 
RTEMS_WAIT
,

1346 
RTEMS_NO_TIMEOUT
,

1347 &
evts


1349 
	`as£¹
Ð
sc
 =ð
RTEMS_SUCCESSFUL
 );

1351  
evts
 != 0 ) {

1353 iàÐÐ
evts
 & 
DWMAC_COMMON_EVENT_TX_PHY_STATUS_CHANGE
 ) != 0 ) {

1354 
evts
 &ð~
DWMAC_COMMON_EVENT_TX_PHY_STATUS_CHANGE
;

1355 
dwmac_commÚ_phy_¡©us_couÁs
 *
couÁs
 =

1356 &
£lf
->
¡©s
.
phy_¡©us_couÁs
;

1357 
dwmac_phy_evt
 
phy_evts
 = 0;

1358 
o
;

1361 
o
 = 
CALLBACK
->
	`phy_evts_g
(

1362 
£lf
->
¬g
,

1363 &
phy_evts


1366 iàÐ
o
 == 0 ) {

1368 
o
 = 
CALLBACK
->
	`phy_evt_þr
Ð
£lf
->
¬g
 );

1371 iàÐ
o
 == 0 ) {

1372 iàÐÐ
phy_evts
 & 
PHY_EVENT_LINK_DOWN
 ) != 0 ) {

1373 ++
couÁs
->
lk_down
;

1376 iàÐÐ
phy_evts
 & 
PHY_EVENT_LINK_UP
 ) != 0 ) {

1377 ++
couÁs
->
lk_up
;

1381 (è
	`dwmac_upd©e_autÚegÙtiÚ_·¿ms
Ð
£lf
 );

1385 
	`as£¹
Ð
o
 == 0 );

1389 iàÐÐ
evts
 & 
DWMAC_COMMON_EVENT_TASK_STOP
 ) != 0 ) {

1390 
	`dwmac_cÜe_dma_¡Ý_tx
Ð
£lf
 );

1391 
	`dwmac_di§bË_q_tx_®l
Ð
£lf
 );

1394 Ð
DESC_OPS
->
»Ëa£_tx_bufs
 )Ð
£lf
 );

1396 
	`dwmac_cÚÞ_»que¡_com¶e
Ð
£lf
 );

1400 
evts
 = 0;

1405 iàÐÐ
evts
 & 
DWMAC_COMMON_EVENT_TASK_INIT
 ) != 0 ) {

1406 
evts
 &ð~
DWMAC_COMMON_EVENT_TASK_INIT
;

1407 (è
	`dwmac_upd©e_autÚegÙtiÚ_·¿ms
Ð
£lf
 );

1408 
	`dwmac_cÜe_dma_¡Ý_tx
Ð
£lf
 );

1409 Ð
DESC_OPS
->
»Ëa£_tx_bufs
 )Ð
£lf
 );

1410 
idx_ªsm
 = 0;

1411 
idx_ªsm_f¡
 = 0;

1412 
idx_ªsmd
 = 0;

1413 
idx_»Ëa£
 = 0;

1414 
p_m
 = 
NULL
;

1415 
is_f¡
 = 
çl£
;

1416 
is_Ï¡
 = 
çl£
;

1417 
size
 = 0;

1418 Ð
DESC_OPS
->
_tx_desc
 )Ð
£lf
 );

1419 
	`dwmac_cÜe_dma_¡¬t_tx
Ð
£lf
 );

1420 
	`dwmac_cÜe_dma_»¡¬t_tx
Ð
£lf
 );

1423 
	`dwmac_cÜe_»£t_dma_q_¡©us_tx
Ð
£lf
 );

1424 
	`dwmac_abË_q_tx_deçuÉ
Ð
£lf
 );

1426 
	`dwmac_cÚÞ_»que¡_com¶e
Ð
£lf
 );

1430 iàÐÐ
evts
 & 
DWMAC_COMMON_EVENT_TX_BUMP_UP_DMA_THRESHOLD
 ) != 0 ) {

1431 
evts
 &ð~
DWMAC_COMMON_EVENT_TX_BUMP_UP_DMA_THRESHOLD
;

1432 iàÐ
£lf
->
dma_th»shÞd_cÚÞ


1433 !ð
DWMAC_COMMON_DMA_MODE_STORE_AND_FORWARD


1434 && 
£lf
->
dma_th»shÞd_cÚÞ
 <= 256 ) {

1435 
£lf
->
dma_th»shÞd_cÚÞ
 += 64;

1436 Ð
DMA_OPS
->
dma_mode
 )(

1437 
£lf
,

1438 
£lf
->
dma_th»shÞd_cÚÞ
,

1439 
DWMAC_COMMON_DMA_MODE_STORE_AND_FORWARD


1445 iàÐÐ
evts
 & 
DWMAC_COMMON_EVENT_TX_FRAME_TRANSMITTED
 ) != 0 ) {

1446 
evts
 &ð~
DWMAC_COMMON_EVENT_TX_FRAME_TRANSMITTED
;

1447 
dwmac_commÚ_tx_äame_couÁs
 *
couÁs
 = &
£lf
->
¡©s
.
äame_couÁs_tx
;

1448 
	`dwmac_di§bË_q_tx_ªsmd
Ð
£lf
 );

1451 
idx_ªsmd_Ãxt
 = 
	`dwmac_üemt
(

1452 
idx_ªsmd
, 
INDEX_MAX
 );

1455 ifÐ
idx_»Ëa£
 !ð
idx_ªsmd_Ãxt


1456 && ( 
DESC_OPS
->
am_i_tx_owÃr
 )Ð
£lf
, 
idx_»Ëa£
 ) ) {

1457  
idx_»Ëa£
 !ð
idx_ªsmd_Ãxt


1458 && ( 
DESC_OPS
->
am_i_tx_owÃr
 )Ð
£lf
, 
idx_»Ëa£
 ) ) {

1460 iàÐÐ
DESC_OPS
->
g_tx_ls
 )Ð
£lf
, 
idx_»Ëa£
 ) ) {

1461 
¡©us
 = ( 
DESC_OPS
->
tx_¡©us
 )(

1462 
£lf
, 
idx_»Ëa£


1465 iàÐ
¡©us
 == 0 ) {

1466 ++
couÁs
->
·cks_ªmd_by_DMA
;

1468 ++
couÁs
->
·ck_rÜs
;

1472 
	`DWMAC_PRINT_DBG
(

1474 
idx_»Ëa£


1478 Ð
DESC_OPS
->
»Ëa£_tx_desc
 )Ð
£lf
, 
idx_»Ëa£
 );

1481 
	`m_ä
Ð
£lf
->
mbuf_addr_tx
[
idx_»Ëa£
] );

1482 
£lf
->
mbuf_addr_tx
[
idx_»Ëa£
] = 
NULL
;

1485 
idx_»Ëa£
 = 
	`dwmac_üemt
(

1486 
idx_»Ëa£
, 
INDEX_MAX
 );

1488 iàÐÐ
£lf
->
¬pcom
.
ac_if
.
if_æags
 & 
IFF_OACTIVE
 ) != 0 ) {

1492 
evts
 |ð
DWMAC_COMMON_EVENT_TX_TRANSMIT_FRAME
;

1496 
£lf
->
dmag½
->
¡©us
 = 
DMAGRP_STATUS_TI
;

1498 
	`dwmac_abË_q_tx_ªsmd
Ð
£lf
 );

1503 iàÐÐ
evts
 & 
DWMAC_COMMON_EVENT_TX_TRANSMIT_FRAME
 ) != 0 ) {

1504 
evts
 &ð~
DWMAC_COMMON_EVENT_TX_TRANSMIT_FRAME
;

1505 
dwmac_commÚ_tx_äame_couÁs
 *
couÁs
 = &
£lf
->
¡©s
.
äame_couÁs_tx
;

1507 iàÐ
p_m
 !ð
NULL
 ) {

1509 --
couÁs
->
äames_äom_¡ack
;

1512  
ue
 ) {

1513 
idx
 = 
	`dwmac_üemt
(

1514 
idx_ªsm
, 
INDEX_MAX
 );

1516 
p_m
 = 
	`dwmac_Ãxt_äagmt
(

1517 &
£lf
->
¬pcom
.
ac_if
,

1518 
p_m
,

1519 &
is_f¡
,

1520 &
is_Ï¡
,

1521 &
size


1525 iàÐ
p_m
 !ð
NULL
 ) {

1526 ++
couÁs
->
äames_äom_¡ack
;

1529 iàÐ
idx
 =ð
idx_»Ëa£
 ) {

1530 
	`DWMAC_PRINT_DBG
Ð"tx: fuÎ queue: 0x%08x\n", 
p_m
 );

1537 
	`¹ems_ÿche_æush_muÉË_d©a_les
(

1538 
	`mtod
Ð
p_m
, const * ),

1539 
size


1542 Ð
DESC_OPS
->
´¬e_tx_desc
 )(

1543 
£lf
,

1544 
idx_ªsm
,

1545 
is_f¡
,

1546 
size
,

1547 
	`mtod
Ð
p_m
, const * )

1549 
£lf
->
mbuf_addr_tx
[
idx_ªsm
] = 
p_m
;

1551 ++
couÁs
->
äames_to_dma
;

1552 
couÁs
->
bys_to_dma
 +ð
size
;

1553 
	`DWMAC_PRINT_DBG
(

1554 "tx: %02" 
PRIu32
 ": %u %s%s\n",

1555 
idx_ªsm
, 
size
,

1556 Ð
is_f¡
 !ð
çl£
 ) ? ( "F" ) : ( "" ),

1557 Ð
is_Ï¡
 !ð
çl£
 ) ? ( "L" ) : ( "" )

1561 iàÐ
is_f¡
 ) {

1562 
idx_ªsm_f¡
 = 
idx_ªsm
;

1563 
is_f¡
 = 
çl£
;

1566 Ð
DESC_OPS
->
»Ëa£_tx_owÃrsh
 )Ð
£lf
, 
idx_ªsm
 );

1569 iàÐ
is_Ï¡
 ) {

1571 Ð
DESC_OPS
->
þo£_tx_desc
 )Ð
£lf
, 
idx_ªsm
 );

1574 Ð
DESC_OPS
->
»Ëa£_tx_owÃrsh
 )Ð
£lf
, 
idx_ªsm_f¡
 );

1575 
idx_ªsmd
 = 
idx_ªsm
;

1577 iàÐÐ
£lf
->
dmag½
->
¡©us
 & 
DMAGRP_STATUS_TU
 ) != 0 ) {

1579 
	`dwmac_cÜe_dma_»¡¬t_tx
Ð
£lf
 );

1580 
	`DWMAC_PRINT_DBG
(

1582 
idx_ªsm_f¡


1588 
idx_ªsm
 = 
idx
;

1590 iàÐ
is_Ï¡
 ) {

1591 ++
couÁs
->
·cks_to_dma
;

1595 
p_m
 =_m->
m_Ãxt
;

1603 iàÐ
p_m
 =ð
NULL
 ) {

1605 
£lf
->
¬pcom
.
ac_if
.
if_æags
 &ð~
IFF_OACTIVE
;

1611 
	`DWMAC_PRINT_DBG
( "tx:ransmission incomplete\n" );

1612 
evts
 |ð
DWMAC_COMMON_EVENT_TX_FRAME_TRANSMITTED
;

1618 
	`DWMAC_PRINT_DBG
( "tx:nableransmit interrupts\n" );

1621 
	}
}

1625 
	$dwmac_if_rçû_
Ð*
¬g
 )

1627 (è
¬g
;

1628 
	}
}

1630 
	$dwmac_if_£t_´omiscous_mode
(

1631 
dwmac_commÚ_cÚxt
 *
£lf
,

1632 cÚ¡ 
boÞ
 
abËd
 )

1634 iàÐ
abËd
 ) {

1636 
£lf
->
macg½
->
mac_äame_fr
 |ð
MACGRP_MAC_FRAME_FILTER_PR
;

1639 
£lf
->
macg½
->
mac_äame_fr
 &ð~
MACGRP_MAC_FRAME_FILTER_PR
;

1640 
£lf
->
macg½
->
mac_äame_fr
 &ð~
MACGRP_MAC_FRAME_FILTER_HUC
;

1641 
£lf
->
macg½
->
mac_äame_fr
 |ð
MACGRP_MAC_FRAME_FILTER_HPF
;

1643 
	}
}

1645 
	$dwmac_ü_dma_desc_rgs
Ð
dwmac_commÚ_cÚxt
 *
£lf
 )

1647 
o
 = 0;

1648 cÚ¡ 
dwmac_commÚ_desc_Ýs
 *
DESC_OPS
 =

1649 (cÚ¡ 
dwmac_commÚ_desc_Ýs
 *è
£lf
->
CFG
->
DESC_OPS
->
Ýs
;

1653 
o
 = ( 
DESC_OPS
->
ü_rx_desc
 )Ð
£lf
 );

1655 iàÐ
o
 == 0 ) {

1656 
o
 = ( 
DESC_OPS
->
ü_tx_desc
 )Ð
£lf
 );

1659  
o
;

1660 
	}
}

1662 
	$dwmac_de¡roy_dma_desc_rgs
Ð
dwmac_commÚ_cÚxt
 *
£lf
 )

1664 
o
 = 0;

1665 cÚ¡ 
dwmac_commÚ_desc_Ýs
 *
DESC_OPS
 =

1666 (cÚ¡ 
dwmac_commÚ_desc_Ýs
 *è
£lf
->
CFG
->
DESC_OPS
->
Ýs
;

1670 
o
 = ( 
DESC_OPS
->
de¡roy_rx_desc
 )Ð
£lf
 );

1672 iàÐ
o
 == 0 ) {

1673 
o
 = ( 
DESC_OPS
->
de¡roy_tx_desc
 )Ð
£lf
 );

1676  
o
;

1677 
	}
}

1679 
	$dwmac__dma_ge
Ð
dwmac_commÚ_cÚxt
 *
£lf
 )

1681 
ut32_t
 
pbl
 =

1682 
DWMAC_DMA_BUS_MODE_PBL_DEFAULT
;

1683 
ut32_t
 
fixed_bur¡
 =

1684 
DWMAC_DMA_BUS_MODE_FB_DEFAULT
;

1685 
ut32_t
 
mixed_bur¡
 =

1686 
DWMAC_DMA_BUS_MODE_MIXED_BURSTS_DEFAULT
;

1687 
ut32_t
 
bur¡_Ën_4_suµÜt
 =

1688 
DWMAC_DMA_AXI_BURST_LENGTH_4_DEFAULT
;

1689 
ut32_t
 
bur¡_Ën_8_suµÜt
 =

1690 
DWMAC_DMA_AXI_BURST_LENGTH_8_DEFAULT
;

1691 
ut32_t
 
bur¡_Ën_16_suµÜt
 =

1692 
DWMAC_DMA_AXI_BURST_LENGTH_16_DEFAULT
;

1693 
ut32_t
 
bur¡_bound¬y
 =

1694 
DWMAC_DMA_AXI_BURST_BOUNDARY_DEFAULT
;

1695 cÚ¡ 
dwmac_commÚ_dma_Ýs
 *
DMA_OPS
 =

1696 (cÚ¡ 
dwmac_commÚ_dma_Ýs
 *è
£lf
->
CFG
->
MAC_OPS
->
dma
;

1697 cÚ¡ 
dwmac_commÚ_desc_Ýs
 *
DESC_OPS
 =

1698 (cÚ¡ 
dwmac_commÚ_desc_Ýs
 *è
£lf
->
CFG
->
DESC_OPS
->
Ýs
;

1702 iàÐ
£lf
->
CFG
->
DMA_CFG
 !ð
NULL
 ) {

1703 cÚ¡ 
dwmac_dma_cfg
 *
DMA_CFG
 = 
£lf
->
CFG
->DMA_CFG;

1704 
pbl
 = 
DMA_CFG
->
bus_mode_bur¡_Ëngth
;

1705 
fixed_bur¡
 = 
DMA_CFG
->
bus_mode_bur¡_mode
;

1706 
mixed_bur¡
 = 
DMA_CFG
->
bus_mode_bur¡_mixed
;

1707 
bur¡_Ën_4_suµÜt
 = 
DMA_CFG
->
axi_bur¡_Ëngth_4_suµÜt
;

1708 
bur¡_Ën_8_suµÜt
 = 
DMA_CFG
->
axi_bur¡_Ëngth_8_suµÜt
;

1709 
bur¡_Ën_16_suµÜt
 = 
DMA_CFG
->
axi_bur¡_Ëngth_16_suµÜt
;

1710 
bur¡_bound¬y
 = 
DMA_CFG
->
axi_bur¡_bound¬y
;

1713  ( 
DMA_OPS
->

 )(

1714 
£lf
,

1715 
pbl
,

1716 
fixed_bur¡
,

1717 
mixed_bur¡
,

1718 Ð
DESC_OPS
->
u£_hªûd_descs
 )Ð
£lf
 ),

1719 
bur¡_Ën_4_suµÜt
,

1720 
bur¡_Ën_8_suµÜt
,

1721 
bur¡_Ën_16_suµÜt
,

1722 
bur¡_bound¬y
,

1723 &
£lf
->
dma_tx
[0],

1724 &
£lf
->
dma_rx
[0]

1726 
	}
}

1728 
	$dwmac_dma_Ý©iÚ_mode
Ð
dwmac_commÚ_cÚxt
 *
£lf
 )

1730 cÚ¡ 
dwmac_commÚ_dma_Ýs
 *
DMA_OPS
 =

1731 (cÚ¡ 
dwmac_commÚ_dma_Ýs
 *è
£lf
->
CFG
->
MAC_OPS
->
dma
;

1734 iàÐÐ
£lf
->
dmag½
->
hw_ã©u»
 & 
DMAGRP_HW_FEATURE_TXOESEL
 ) != 0 ) {

1735 Ð
DMA_OPS
->
dma_mode
 )(

1736 
£lf
,

1737 
DWMAC_COMMON_DMA_MODE_STORE_AND_FORWARD
,

1738 
DWMAC_COMMON_DMA_MODE_STORE_AND_FORWARD


1740 
£lf
->
dma_th»shÞd_cÚÞ
 = 
DWMAC_COMMON_DMA_MODE_STORE_AND_FORWARD
;

1742 Ð
DMA_OPS
->
dma_mode
 )(

1743 
£lf
,

1744 
£lf
->
dma_th»shÞd_cÚÞ
,

1745 
DWMAC_COMMON_DMA_MODE_STORE_AND_FORWARD


1748 
	}
}

1750 
	$dwmac_mmc_£tup
Ð
dwmac_commÚ_cÚxt
 *
£lf
 )

1756 
	`as£¹
ÐÐ
£lf
->
dmag½
->
hw_ã©u»
 & 
DMAGRP_HW_FEATURE_MMCSEL
 ) != 0 );

1758 iàÐÐ
£lf
->
dmag½
->
hw_ã©u»
 & 
DMAGRP_HW_FEATURE_MMCSEL
 ) != 0 ) {

1759 
£lf
->
macg½
->
mmc_cÚÞ
 = 
MACGRP_MMC_CONTROL_CNTRST
;

1761 
	}
}

1763 
	$dwmac_if_up_Ü_down
(

1764 
dwmac_commÚ_cÚxt
 *
£lf
,

1765 cÚ¡ 
boÞ
 
up
 )

1767 
o
 = 0;

1768 
¹ems_¡©us_code
 
sc
 = 
RTEMS_SUCCESSFUL
;

1769 
iâ
 *
iå
 = &
£lf
->
¬pcom
.
ac_if
;

1770 cÚ¡ 
dwmac_ÿÎback_cfg
 *
CALLBACK
 = &
£lf
->
CFG
->CALLBACK;

1771 cÚ¡ 
dwmac_commÚ_cÜe_Ýs
 *
CORE_OPS
 =

1772 (cÚ¡ 
dwmac_commÚ_cÜe_Ýs
 *è
£lf
->
CFG
->
MAC_OPS
->
cÜe
;

1775 iàÐ
up
 && 
£lf
->
¡©e
 =ð
DWMAC_COMMON_STATE_DOWN
 ) {

1776 
o
 = 
CALLBACK
->
	`nic_abË
Ð
£lf
->
¬g
 );

1778 iàÐ
o
 == 0 ) {

1779 
o
 = 
CALLBACK
->
	`phy_abË
Ð
£lf
->
¬g
 );

1782 iàÐ
o
 == 0 ) {

1783 
o
 = 
CALLBACK
->
	`phy_evt_abË
(

1784 
£lf
->
¬g
,

1785 
PHY_EVENT_LINK_DOWN


1786 | 
PHY_EVENT_LINK_UP


1790 iàÐ
o
 == 0 ) {

1791 
o
 = 
	`dwmac_ü_dma_desc_rgs
Ð
£lf
 );

1794 iàÐ
o
 == 0 ) {

1795 
o
 = 
	`dwmac__dma_ge
Ð
£lf
 );

1798 iàÐ
o
 == 0 ) {

1800 Ð
CORE_OPS
->
£t_umac_addr
 )Ð
£lf
, sf->
¬pcom
.
ac_addr
, 0 );

1802 
o
 = ( 
CALLBACK
->
bus_£tup
 )Ð
£lf
->
¬g
 );

1805 iàÐ
o
 == 0 ) {

1807 Ð
CORE_OPS
->
cÜe_
 )Ð
£lf
 );

1810 
	`dwmac_cÜe_£t_mac
Ð
£lf
, 
ue
 );

1813 
	`dwmac_dma_Ý©iÚ_mode
Ð
£lf
 );

1816 
	`dwmac_mmc_£tup
Ð
£lf
 );

1818 #ifdeà
BSP_FEATURE_IRQ_EXTENSION


1820 
sc
 = 
	`¹ems_¼u±_hªdËr_¡®l
(

1821 
£lf
->
CFG
->
IRQ_EMAC
,

1823 
RTEMS_INTERRUPT_UNIQUE
,

1824 
dwmac_cÜe_dma_¼u±
,

1825 
£lf


1828 
sc
 = 
RTEMS_NOT_IMPLEMENTED
;

1830 
o
 = 
	`¹ems_¡©us_code_to_ºo
Ð
sc
 );

1833 iàÐ
o
 == 0 ) {

1835 
o
 = 
	`dwmac_cÚÞ_»que¡
(

1836 
£lf
, sf->
sk_id_tx
, 
DWMAC_COMMON_EVENT_TASK_INIT
 );

1839 iàÐ
o
 == 0 ) {

1840 
o
 = 
	`dwmac_cÚÞ_»que¡
(

1841 
£lf
, sf->
sk_id_rx
, 
DWMAC_COMMON_EVENT_TASK_INIT
 );

1844 iàÐ
o
 == 0 ) {

1845 
	`dwmac_cÜe_dma_¡¬t_rx
Ð
£lf
 );

1848 
o
 = ( 
CALLBACK
->
phy_¡¬t
 )Ð
£lf
->
¬g
 );

1851 iàÐ
o
 == 0 ) {

1852 
£lf
->
¡©e
 = 
DWMAC_COMMON_STATE_UP
;

1854 
iå
->
if_æags
 &ð~
IFF_UP
;

1855 (è
	`dwmac_cÚÞ_»que¡
(

1856 
£lf
, sf->
sk_id_tx
, 
DWMAC_COMMON_EVENT_TASK_STOP
 );

1857 (è
	`dwmac_cÚÞ_»que¡
(

1858 
£lf
, sf->
sk_id_rx
, 
DWMAC_COMMON_EVENT_TASK_STOP
 );

1859 #ifdeà
BSP_FEATURE_IRQ_EXTENSION


1860 (è
	`¹ems_¼u±_hªdËr_»move
(

1861 
£lf
->
CFG
->
IRQ_EMAC
,

1862 
dwmac_cÜe_dma_¼u±
,

1863 
£lf


1866 (èÐ
CALLBACK
->
phy_¡Ý
 )Ð
£lf
->
¬g
 );

1867 (èÐ
CALLBACK
->
phy_di§bË
 )Ð
£lf
->
¬g
 );

1870 
	`dwmac_cÜe_£t_mac
Ð
£lf
, 
çl£
 );

1871 (èÐ
CALLBACK
->
nic_di§bË
 )Ð
£lf
->
¬g
 );

1872 (è
	`dwmac_de¡roy_dma_desc_rgs
Ð
£lf
 );

1874 } iàÐ!
up
 && 
£lf
->
¡©e
 =ð
DWMAC_COMMON_STATE_UP
 ) {

1875 iàÐ
o
 == 0 ) {

1876 
o
 = 
	`dwmac_cÚÞ_»que¡
(

1877 
£lf
, sf->
sk_id_tx
, 
DWMAC_COMMON_EVENT_TASK_STOP
 );

1880 iàÐ
o
 == 0 ) {

1881 
o
 = 
	`dwmac_cÚÞ_»que¡
(

1882 
£lf
, sf->
sk_id_rx
, 
DWMAC_COMMON_EVENT_TASK_STOP
 );

1885 iàÐ
o
 == 0 ) {

1886 #ifdeà
BSP_FEATURE_IRQ_EXTENSION


1887 
sc
 = 
	`¹ems_¼u±_hªdËr_»move
(

1888 
£lf
->
CFG
->
IRQ_EMAC
,

1889 
dwmac_cÜe_dma_¼u±
,

1890 
£lf


1893 
sc
 = 
RTEMS_NOT_IMPLEMENTED
;

1895 
o
 = 
	`¹ems_¡©us_code_to_ºo
Ð
sc
 );

1898 iàÐ
o
 == 0 ) {

1899 
o
 = ( 
CALLBACK
->
phy_¡Ý
 )Ð
£lf
->
¬g
 );

1902 iàÐ
o
 == 0 ) {

1903 
o
 = ( 
CALLBACK
->
phy_di§bË
 )Ð
£lf
->
¬g
 );

1906 iàÐ
o
 == 0 ) {

1908 
	`dwmac_cÜe_£t_mac
Ð
£lf
, 
çl£
 );

1910 
o
 = 
CALLBACK
->
	`nic_di§bË
Ð
£lf
->
¬g
 );

1913 iàÐ
o
 == 0 ) {

1914 
o
 = 
	`dwmac_de¡roy_dma_desc_rgs
Ð
£lf
 );

1917 iàÐ
o
 == 0 ) {

1919 
	`mem£t
Ð&
£lf
->
¡©s
, 0, Ð
dwmac_commÚ_¡©s
 ) );

1922 
£lf
->
¡©e
 = 
DWMAC_COMMON_STATE_DOWN
;

1926  
o
;

1927 
	}
}

1931 
	$dwmac_if_rçû_ioùl
(

1932 
iâ
 *
iå
,

1933 
ioùl_commªd_t
 
cmd
,

1934 
ÿddr_t
 
d©a
 )

1936 
dwmac_commÚ_cÚxt
 *
£lf
 = 
iå
->
if_soác
;

1937 
o
 = 0;

1940  
cmd
 ) {

1941 
SIOCGIFMEDIA
:

1942 
SIOCSIFMEDIA
:

1943 
	`¹ems_mii_ioùl
Ð&
£lf
->
mdio
, sf, 
cmd
, (*è
d©a
 );

1945 
SIOCGIFADDR
:

1946 
SIOCSIFADDR
:

1947 
	`h_ioùl
Ð
iå
, 
cmd
, 
d©a
 );

1949 
SIOCSIFFLAGS
:

1950 
o
 = 
	`dwmac_if_up_Ü_down
Ð
£lf
, ( 
iå
->
if_æags
 & 
IFF_UP
 ) != 0 );

1952 iàÐ
o
 =ð0 && ( 
iå
->
if_æags
 & 
IFF_UP
 ) != 0 ) {

1953 
	`dwmac_if_£t_´omiscous_mode
Ð
£lf
, ( 
iå
->
if_æags
 & 
IFF_PROMISC
 )

1956 
	`as£¹
Ð
o
 == 0 );

1960 
SIOCADDMULTI
:

1961 
SIOCDELMULTI
:

1962 #iâdeà
COMMENTED_OUT


1963 
o
 = 
ENOTSUP
;

1966 
iäeq
 *
iä
 = (iäeq *è
d©a
;

1967 cÚ¡ 
dwmac_commÚ_cÜe_Ýs
 *
CORE_OPS
 =

1968 (cÚ¡ 
dwmac_commÚ_cÜe_Ýs
 *è
£lf
->
CFG
->
MAC_OPS
->
cÜe
;

1969 Ð
CORE_OPS
->
£t_hash_fr
 )Ð
£lf
, 
cmd
 =ð
SIOCADDMULTI
, 
iä
 );

1973 
SIO_RTEMS_SHOW_STATS
:

1974 
o
 = 
	`dwmac_if_rçû_¡©s
Ð
£lf
 );

1977 
o
 = 
EINVAL
;

1981  
o
;

1982 
	}
}

1985 
	$dwmac_if_rçû_¡¬t
Ð
iâ
 *
iå
 )

1987 
¹ems_¡©us_code
 
sc
;

1988 
dwmac_commÚ_cÚxt
 *
£lf
 = 
iå
->
if_soác
;

1992 
iå
->
if_æags
 |ð
IFF_OACTIVE
;

1994 iàÐ
£lf
->
¡©e
 =ð
DWMAC_COMMON_STATE_UP
 ) {

1996 
sc
 = 
	`¹ems_bsdÃt_evt_£nd
Ð
£lf
->
sk_id_tx
,

1997 
DWMAC_COMMON_EVENT_TX_TRANSMIT_FRAME
 );

1998 
	`as£¹
Ð
sc
 =ð
RTEMS_SUCCESSFUL
 );

2000 
	}
}

2002 
	$dwmac_if_þk_c¤_£t
(

2003 cÚ¡ 
ut32_t
 
gmii_þk_¿
,

2004 
dwmac_commÚ_cÚxt
 *
£lf
 )

2006 
o
 = 0;

2009 iàÐ
gmii_þk_¿
 < 
DWCGNAC3504_CSR_F_35M
 ) {

2010 
£lf
->
c¤_þock
 = 
DWCGNAC3504_CSR_20_35M
;

2011 } iàÐÐ
gmii_þk_¿
 >ð
DWCGNAC3504_CSR_F_35M
 )

2012 && ( 
gmii_þk_¿
 < 
DWCGNAC3504_CSR_F_60M
 ) ) {

2013 
£lf
->
c¤_þock
 = 
DWCGNAC3504_CSR_35_60M
;

2014 } iàÐÐ
gmii_þk_¿
 >ð
DWCGNAC3504_CSR_F_60M
 )

2015 && ( 
gmii_þk_¿
 < 
DWCGNAC3504_CSR_F_100M
 ) ) {

2016 
£lf
->
c¤_þock
 = 
DWCGNAC3504_CSR_60_100M
;

2017 } iàÐÐ
gmii_þk_¿
 >ð
DWCGNAC3504_CSR_F_100M
 )

2018 && ( 
gmii_þk_¿
 < 
DWCGNAC3504_CSR_F_150M
 ) ) {

2019 
£lf
->
c¤_þock
 = 
DWCGNAC3504_CSR_100_150M
;

2020 } iàÐÐ
gmii_þk_¿
 >ð
DWCGNAC3504_CSR_F_150M
 )

2021 && ( 
gmii_þk_¿
 < 
DWCGNAC3504_CSR_F_250M
 ) ) {

2022 
£lf
->
c¤_þock
 = 
DWCGNAC3504_CSR_150_250M
;

2023 } iàÐÐ
gmii_þk_¿
 >ð
DWCGNAC3504_CSR_F_250M
 )

2024 && ( 
gmii_þk_¿
 < 
DWCGNAC3504_CSR_F_300M
 ) ) {

2025 
£lf
->
c¤_þock
 = 
DWCGNAC3504_CSR_250_300M
;

2027 
	`as£¹
Ð
gmii_þk_¿
 < 
DWCGNAC3504_CSR_F_300M
 );

2028 
o
 = 
EINVAL
;

2031  
o
;

2032 
	}
}

2034 
	$dwmac_fixup_un_couÁ
(

2035 cÚ¡ 
dwmac_commÚ_cÚxt
 *
£lf
,

2036 cÚ¡ 
couÁ
,

2037 cÚ¡ 
deçuÉ_v®ue
,

2038 cÚ¡ 
max
 )

2040 
»t
 = 
couÁ
;

2043 iàÐ
»t
 <= 0 ) {

2044 
»t
 = 
	`DWMAC_ALIGN
Ð
deçuÉ_v®ue
, 
£lf
->
CFG
->
L1_CACHE_LINE_SIZE
 );

2045 } iàÐ
»t
 > 
max
 ) {

2046 
»t
 = 
	`DWMAC_ALIGN
Ð
max
, 
£lf
->
CFG
->
L1_CACHE_LINE_SIZE
 );

2049  
»t
;

2050 
	}
}

2053 
	$dwmac_if_©ch
(

2054 
dwmac_commÚ_cÚxt
 *
£lf
,

2055 
¹ems_bsdÃt_ifcÚfig
 *
bsd_cÚfig
,

2056 cÚ¡ 
dwmac_cfg
 *
driv_cÚfig
,

2057 *
¬g
 )

2059 
o
 = 0;

2060 
iâ
 *
iå
 = &
£lf
->
¬pcom
.
ac_if
;

2061 *
un_Çme
 = 
NULL
;

2062 
un_numb
 = 
	`¹ems_bsdÃt_·r£_driv_Çme
(

2063 
bsd_cÚfig
,

2064 &
un_Çme
 );

2065 cÚ¡ 
dwmac_ÿÎback_cfg
 *
CALLBACK
 = &
driv_cÚfig
->CALLBACK;

2066 cÚ¡ 
dwmac_commÚ_desc_Ýs
 *
DESC_OPS
 =

2067 (cÚ¡ 
dwmac_commÚ_desc_Ýs
 *è
driv_cÚfig
->
DESC_OPS
->
Ýs
;

2068 cÚ¡ 
dwmac_ifcÚfig_drv_ù¾
 *
drv_ù¾
 =

2069 (cÚ¡ 
dwmac_ifcÚfig_drv_ù¾
 *è
bsd_cÚfig
->
drv_ù¾
;

2071 
	`as£¹
Ð
£lf
 !ð
NULL
 );

2072 
	`as£¹
Ð
bsd_cÚfig
 !ð
NULL
 );

2073 
	`as£¹
Ð
driv_cÚfig
 !ð
NULL
 );

2074 
	`as£¹
Ð
CALLBACK
 !ð
NULL
 );

2076 iàÐ
£lf
 =ð
NULL


2077 || 
bsd_cÚfig
 =ð
NULL


2078 || 
driv_cÚfig
 =ð
NULL


2079 || 
CALLBACK
 =ð
NULL


2081 
o
 = 
EINVAL
;

2083 
	`as£¹
Ð
CALLBACK
->
nic_abË
 !ð
NULL
 );

2084 
	`as£¹
Ð
CALLBACK
->
nic_di§bË
 !ð
NULL
 );

2085 
	`as£¹
Ð
CALLBACK
->
phy_abË
 !ð
NULL
 );

2086 
	`as£¹
Ð
CALLBACK
->
phy_di§bË
 !ð
NULL
 );

2087 
	`as£¹
Ð
CALLBACK
->
phy_evt_abË
 !ð
NULL
 );

2088 
	`as£¹
Ð
CALLBACK
->
phy_evt_þr
 !ð
NULL
 );

2089 
	`as£¹
Ð
CALLBACK
->
phy_evts_g
 !ð
NULL
 );

2090 
	`as£¹
Ð
CALLBACK
->
phy_¡¬t
 !ð
NULL
 );

2091 
	`as£¹
Ð
CALLBACK
->
phy_¡Ý
 !ð
NULL
 );

2092 
	`as£¹
Ð
CALLBACK
->
mem_®loc_noÿche
 !ð
NULL
 );

2093 
	`as£¹
Ð
CALLBACK
->
mem_ä_noÿche
 !ð
NULL
 );

2094 
	`as£¹
Ð
CALLBACK
->
bus_£tup
 !ð
NULL
 );

2096 iàÐ
CALLBACK
->
nic_abË
 =ð
NULL


2097 || 
CALLBACK
->
nic_di§bË
 =ð
NULL


2098 || 
CALLBACK
->
phy_abË
 =ð
NULL


2099 || 
CALLBACK
->
phy_di§bË
 =ð
NULL


2100 || 
CALLBACK
->
phy_evt_abË
 =ð
NULL


2101 || 
CALLBACK
->
phy_evt_þr
 =ð
NULL


2102 || 
CALLBACK
->
phy_evts_g
 =ð
NULL


2103 || 
CALLBACK
->
phy_¡¬t
 =ð
NULL


2104 || 
CALLBACK
->
phy_¡Ý
 =ð
NULL


2105 || 
CALLBACK
->
mem_®loc_noÿche
 =ð
NULL


2106 || 
CALLBACK
->
mem_ä_noÿche
 =ð
NULL


2107 || 
CALLBACK
->
bus_£tup
 =ð
NULL


2109 
o
 = 
EINVAL
;

2113 iàÐ
o
 == 0 ) {

2114 
£lf
->
dma_th»shÞd_cÚÞ
 = 
DWMAC_DMA_THRESHOLD_CONTROL_DEFAULT
;

2116 
	`as£¹
Ð
driv_cÚfig
->
addr_gmac_»gs
 !ð
NULL
 );

2117 iàÐ
driv_cÚfig
->
addr_gmac_»gs
 !ð
NULL
 ) {

2118 
£lf
->
macg½
 = 
driv_cÚfig
->
addr_gmac_»gs
;

2120 
	`as£¹
Ð
driv_cÚfig
->
addr_dma_»gs
 !ð
NULL
 );

2121 iàÐ
driv_cÚfig
->
addr_dma_»gs
 !ð
NULL
 ) {

2122 
£lf
->
dmag½
 = 
driv_cÚfig
->
addr_dma_»gs
;

2124 
o
 = 
EINVAL
;

2127 
o
 = 
EINVAL
;

2131 iàÐ
o
 == 0 ) {

2132 
o
 = 
	`dwmac_if_þk_c¤_£t
(

2133 
driv_cÚfig
->
GMII_CLK_RATE
,

2134 
£lf


2138 iàÐ
o
 == 0 ) {

2139 iàÐ
drv_ù¾
 =ð
NULL
 ) {

2140 
£lf
->
MDIO_BUS_ADDR
 = 
driv_cÚfig
->MDIO_BUS_ADDR;

2142 
£lf
->
MDIO_BUS_ADDR
 = 
drv_ù¾
->
phy_addr
;

2145 
	`as£¹
Ð32 >ð
£lf
->
MDIO_BUS_ADDR
 );

2147 iàÐ32 < 
£lf
->
MDIO_BUS_ADDR
 ) {

2148 
o
 = 
EINVAL
;

2152 iàÐ
o
 == 0 ) {

2153 
£lf
->
¬g
 =rg;

2154 
£lf
->
¡©e
 = 
DWMAC_COMMON_STATE_DOWN
;

2155 
£lf
->
bsd_cÚfig
 = bsd_config;

2159 
bsd_cÚfig
->
drv_ù¾
 = 
NULL
;

2162 
£lf
->
mdio
.
mdio_r
 = 
dwmac_if_mdio_»ad
;

2164 
£lf
->
mdio
.
mdio_w
 = 
dwmac_if_mdio_wre
;

2167 iàÐ
driv_cÚfig
->
MAC_OPS
 =ð&
DWMAC_1000_ETHERNET_MAC_OPS
 ) {

2168 
£lf
->
mdio
.
has_gmii
 = 1;

2170 
£lf
->
mdio
.
has_gmii
 = 0;

2173 
	`as£¹
Ð
driv_cÚfig
->
MAC_OPS
 =ð&
DWMAC_1000_ETHERNET_MAC_OPS
 );

2174 
o
 = 
ENOTSUP
;

2177 iàÐ
o
 == 0 ) {

2178 
£lf
->
CFG
 = 
driv_cÚfig
;

2179 
iå
->
if_ioùl
 = 
dwmac_if_rçû_ioùl
;

2181 
iå
->
if_
 = 
dwmac_if_rçû_
;

2185 
bsd_cÚfig
->
rbuf_couÁ
 = 
	`dwmac_fixup_un_couÁ
(

2186 
£lf
,

2187 
bsd_cÚfig
->
rbuf_couÁ
,

2188 
DWMAC_CONFIG_RX_UNIT_COUNT_DEFAULT
,

2189 
DWMAC_CONFIG_RX_UNIT_COUNT_MAX


2193 
bsd_cÚfig
->
xbuf_couÁ
 = 
	`dwmac_fixup_un_couÁ
(

2194 
£lf
,

2195 
bsd_cÚfig
->
xbuf_couÁ
,

2196 
DWMAC_CONFIG_TX_UNIT_COUNT_DEFAULT
,

2197 
DWMAC_CONFIG_TX_UNIT_COUNT_MAX


2201 
DWMAC_GLOBAL_MBUF_CNT
 / 4 < 
bsd_cÚfig
->
rbuf_couÁ


2202 || 
DWMAG_GLOBAL_MCLUST_CNT
 / 4 < 
bsd_cÚfig
->
rbuf_couÁ


2204 
	`b¥_çl
Ð
DWMAC_FATAL_TOO_MANY_RBUFS_CONFIGURED
 );

2208 
	`memýy
(

2209 
£lf
->
¬pcom
.
ac_addr
,

2210 
bsd_cÚfig
->
h¬dw¬e_add»ss
,

2211 
ETHER_ADDR_LEN


2215 
iå
->
if_soác
 = 
£lf
;

2216 
iå
->
if_un
 = (è
un_numb
;

2217 
iå
->
if_Çme
 = 
un_Çme
;

2219 
iå
->
if_¡¬t
 = 
dwmac_if_rçû_¡¬t
;

2221 
iå
->
if_ouut
 = 
h_ouut
;

2222 
iå
->
if_w©chdog
 = 
NULL
;

2223 
iå
->
if_æags
 = 
IFF_BROADCAST
 | 
IFF_SIMPLEX
;

2224 
iå
->
if_¢d
.
ifq_maxËn
 = 
ifqmaxËn
;

2225 
iå
->
if_tim
 = 0;

2226 
iå
->
if_mtu
 =

2227 
bsd_cÚfig
->
mtu
 > 0 ? (
u_lÚg
èbsd_cÚfig->mtu : 
ETHERMTU
;

2229 
o
 = 
DESC_OPS
->
	`v®id©e
Ð
£lf
 );

2230 
	`as£¹
Ð
o
 == 0 );

2233 iàÐ
o
 == 0 ) {

2235 
	`as£¹
Ð
£lf
->
sk_id_rx
 =ð
RTEMS_ID_NONE
 );

2236 
£lf
->
sk_id_rx
 = 
	`¹ems_bsdÃt_Ãw´oc
(

2239 
dwmac_sk_rx
,

2240 
£lf


2242 
	`as£¹
Ð
£lf
->
sk_id_rx
 !ð
RTEMS_ID_NONE
 );

2244 iàÐ
£lf
->
sk_id_rx
 =ð
RTEMS_ID_NONE
 ) {

2245 
o
 = 
ENOMEM
;

2249 iàÐ
o
 == 0 ) {

2251 
	`as£¹
Ð
£lf
->
sk_id_tx
 =ð
RTEMS_ID_NONE
 );

2252 
£lf
->
sk_id_tx
 = 
	`¹ems_bsdÃt_Ãw´oc
(

2255 
dwmac_sk_tx
,

2256 
£lf


2258 
	`as£¹
Ð
£lf
->
sk_id_tx
 !ð
RTEMS_ID_NONE
 );

2260 iàÐ
£lf
->
sk_id_tx
 =ð
RTEMS_ID_NONE
 ) {

2261 
o
 = 
ENOMEM
;

2266 iàÐ
o
 == 0 ) {

2268 
iå
->
if_æags
 |ð
IFF_RUNNING
;

2271 
	`if_©ch
Ð
iå
 );

2272 
	`h_içach
Ð
iå
 );

2275  
o
;

2276 
	}
}

2280 *
	$dwmac_ÃtwÜk_if_©ch_dach
(

2281 
¹ems_bsdÃt_ifcÚfig
 *
bsd_cÚfig
,

2282 cÚ¡ 
dwmac_cfg
 *
driv_cÚfig
,

2283 *
¬g
,

2284 
©chg
 )

2286 
o
 = 0;

2287 
dwmac_commÚ_cÚxt
 *
cÚxt
 = 
NULL
;

2290 iàÐ
©chg
 ) {

2291 
cÚxt
 = 
	`ÿÎoc
Ð1, Ð
dwmac_commÚ_cÚxt
 ) );

2292 
	`as£¹
Ð
cÚxt
 !ð
NULL
 );

2294 iàÐ
cÚxt
 !ð
NULL
 ) {

2295 
o
 = 
	`dwmac_if_©ch
(

2296 
cÚxt
,

2297 
bsd_cÚfig
,

2298 
driv_cÚfig
,

2299 
¬g


2302 iàÐ
o
 != 0 ) {

2303 
	`ä
Ð
cÚxt
, 0 );

2304 
cÚxt
 = 
NULL
;

2309 
	`as£¹
Ð
©chg
 !ð
çl£
 );

2312  
cÚxt
;

2313 
	}
}

2315 
	$dwmac_if_»ad_äom_phy
(

2316 *
¬g
,

2317 cÚ¡ 
phy_»g
,

2318 
ut16_t
 *
v®
 )

2320 
o
 = 
EINVAL
;

2321 
dwmac_commÚ_cÚxt
 *
£lf
 = (dwmac_commÚ_cÚx*è
¬g
;

2322 
ut32_t
 
v®ue
;

2325 iàÐ
¬g
 !ð
NULL
 ) {

2326 
o
 = 
	`dwmac_if_mdio_»ad
(

2327 
£lf
->
MDIO_BUS_ADDR
,

2328 
£lf
,

2329 
phy_»g
,

2330 &
v®ue
 );

2333 iàÐ
o
 == 0 ) {

2334 *
v®
 = (
ut16_t
è
v®ue
;

2337  
o
;

2338 
	}
}

2340 
	$dwmac_if_wre_to_phy
(

2341 *
¬g
,

2342 cÚ¡ 
phy_»g
,

2343 cÚ¡ 
ut16_t
 
v®
 )

2345 
o
 = 
EINVAL
;

2346 
dwmac_commÚ_cÚxt
 *
£lf
 = (dwmac_commÚ_cÚx*è
¬g
;

2349 iàÐ
¬g
 !ð
NULL
 ) {

2350 
o
 = 
	`dwmac_if_mdio_wre
(

2351 
£lf
->
MDIO_BUS_ADDR
,

2352 
£lf
,

2353 
phy_»g
,

2354 
v®
 );

2357  
o
;

2358 
	}
}

2360 
	$dwmac_if_hªdË_phy_evt
Ð*
¬g
 )

2362 
o
;

2363 
¹ems_¡©us_code
 
sc
;

2364 
dwmac_commÚ_cÚxt
 *
£lf
 = (dwmac_commÚ_cÚx*è
¬g
;

2367 
sc
 = 
	`¹ems_bsdÃt_evt_£nd
(

2368 
£lf
->
sk_id_tx
,

2369 
DWMAC_COMMON_EVENT_TX_PHY_STATUS_CHANGE


2371 
o
 = 
	`¹ems_¡©us_code_to_ºo
Ð
sc
 );

2373  
o
;

2374 
	}
}

	@src/libchip/network/dwmac.h

23 #iâdeà
DWMAC_H_


24 
	#DWMAC_H_


	)

26 
	~<¡ddef.h
>

27 
	~<¡dt.h
>

28 
	~<¹ems/¹ems_bsdÃt.h
>

30 #ifdeà
__ýlu¥lus


41 
phy_addr
;

42 } 
	tdwmac_ifcÚfig_drv_ù¾
;

48 
ut8_t
 
	tdwmac_phy_evt
;

51 cÚ¡ 
dwmac_phy_evt
 
PHY_EVENT_JABBER
;

54 cÚ¡ 
dwmac_phy_evt
 
PHY_EVENT_RECEIVE_ERROR
;

57 cÚ¡ 
dwmac_phy_evt
 
PHY_EVENT_PAGE_RECEIVE
;

60 cÚ¡ 
dwmac_phy_evt
 
PHY_EVENT_PARALLEL_DETECT_FAULT
;

63 cÚ¡ 
dwmac_phy_evt
 
PHY_EVENT_LINK_PARTNER_ACK
;

66 cÚ¡ 
dwmac_phy_evt
 
PHY_EVENT_LINK_DOWN
;

69 cÚ¡ 
dwmac_phy_evt
 
PHY_EVENT_REMOTE_FAULT
;

72 cÚ¡ 
dwmac_phy_evt
 
PHY_EVENT_LINK_UP
;

83 (*
	tdwmac_if_nic_abË
)Ð*
	t¬g
 );

94 (*
	tdwmac_if_nic_di§bË
)Ð*
	t¬g
 );

105 (*
	tdwmac_if_phy_abË
)Ð*
	t¬g
 );

116 (*
	tdwmac_if_phy_di§bË
)Ð*
	t¬g
 );

129 (*
	tdwmac_if_phy_evt_abË
)(

130 *
	t¬g
,

131 cÚ¡ 
	tdwmac_phy_evt
 
	tevt_£t
 );

142 (*
	tdwmac_if_phy_evt_¡©us_þr
)Ð*
	t¬g
 );

157 (*
	tdwmac_if_phy_evts_¡©us_g
)(

158 *
	t¬g
,

159 
	tdwmac_phy_evt
 *
	tevt_£t
 );

172 (*
	tdwcmac_if_phy_¡¬t
)Ð*
	t¬g
 );

184 (*
	tdwcmac_if_phy_¡Ý
)Ð*
	t¬g
 );

199 (*
	tdwmac_if_mem_®loc_noÿche
)(

200 *
	t¬g
,

201 **
	tmemÜy
,

202 cÚ¡ 
	tsize_t
 
	tsize
 );

215 (*
	tdwmac_if_mem_ä_noÿche
)(

216 *
	t¬g
,

217 *
	tmemÜy
 );

229 (*
	tdwmac_if_bus_£tup
)Ð*
	t¬g
 );

242 
dwmac_if_nic_abË
 
	gnic_abË
;

245 
dwmac_if_nic_di§bË
 
	gnic_di§bË
;

248 
dwmac_if_phy_abË
 
	gphy_abË
;

251 
dwmac_if_phy_di§bË
 
	gphy_di§bË
;

254 
dwmac_if_phy_evt_abË
 
	gphy_evt_abË
;

257 
dwmac_if_phy_evt_¡©us_þr
 
	gphy_evt_þr
;

260 
dwmac_if_phy_evts_¡©us_g
 
	gphy_evts_g
;

263 
dwcmac_if_phy_¡¬t
 
	gphy_¡¬t
;

266 
dwcmac_if_phy_¡Ý
 
	gphy_¡Ý
;

269 
dwmac_if_mem_®loc_noÿche
 
	gmem_®loc_noÿche
;

272 
dwmac_if_mem_ä_noÿche
 
	gmem_ä_noÿche
;

275 
dwmac_if_bus_£tup
 
	gbus_£tup
;

276 } 
	tdwmac_ÿÎback_cfg
;

321 
	#DWMAC_CALLBACK_CFG_INITIALIZER
( \

322 
nic_abË
, \

323 
nic_di§bË
, \

324 
phy_abË
, \

325 
phy_di§bË
, \

326 
phy_evt_abË
, \

327 
phy_evt_þr
, \

328 
phy_evts_g
, \

329 
phy_¡¬t
, \

330 
phy_¡Ý
, \

331 
mem_®loc_noÿche
, \

332 
mem_ä_noÿche
, \

333 
bus_£tup
 \

336 
nic_abË
, \

337 
nic_di§bË
, \

338 
phy_abË
, \

339 
phy_di§bË
, \

340 
phy_evt_abË
, \

341 
phy_evt_þr
, \

342 
phy_evts_g
, \

343 
phy_¡¬t
, \

344 
phy_¡Ý
, \

345 
mem_®loc_noÿche
, \

346 
mem_ä_noÿche
, \

347 
bus_£tup
 \

348 }

	)

367 cÚ¡ *
	gcÜe
;

368 cÚ¡ *
	gdma
;

369 } 
	tdwmac_hÃt_mac_Ýs
;

381 
	#DWMAC_ETHERNET_MAC_OPS_INITIALIZER
( \

382 
cÜe_Ýs_addr
, \

383 
dma_Ýs_addr
 \

386 
cÜe_Ýs_addr
, \

387 
dma_Ýs_addr
 \

388 }

	)

407 cÚ¡ *
	gÝs
;

408 } 
	tdwmac_desütÜ_Ýs
;

418 
	#DWMAC_DESCRIPTOR_OPS_INITIALIZER
( \

419 
desc_Ýs_addr
 \

422 
desc_Ýs_addr
 \

423 }

	)

431 cÚ¡ 
dwmac_hÃt_mac_Ýs
 
DWMAC_1000_ETHERNET_MAC_OPS
;

440 cÚ¡ 
dwmac_hÃt_mac_Ýs
 
DWMAC_100_ETHERNET_MAC_OPS
;

449 cÚ¡ 
dwmac_desütÜ_Ýs
 
DWMAC_DESCRIPTOR_OPS_NORMAL
;

457 cÚ¡ 
dwmac_desütÜ_Ýs
 
DWMAC_DESCRIPTOR_OPS_ENHANCED
;

462 
	gDWMAC_DMA_CFG_BUS_MODE_BURST_LENGTH_1
 = 0,

465 
	gDWMAC_DMA_CFG_BUS_MODE_BURST_LENGTH_2
 = 1,

468 
	gDWMAC_DMA_CFG_BUS_MODE_BURST_LENGTH_4
 = 3,

471 
	gDWMAC_DMA_CFG_BUS_MODE_BURST_LENGTH_8
 = 7,

474 
	gDWMAC_DMA_CFG_BUS_MODE_BURST_LENGTH_16
 = 15,

477 
	gDWMAC_DMA_CFG_BUS_MODE_BURST_LENGTH_32
 = 31,

480 
	gDWMAC_DMA_CFG_BUS_MODE_BURST_LENGTH_64
 = 63,

483 
	gDWMAC_DMA_CFG_BUS_MODE_BURST_LENGTH_128
 = 127,

486 
	gDWMAC_DMA_CFG_BUS_MODE_BURST_LENGTH_256
 = 255

487 } 
	tdwmac_dma_cfg_bus_mode_bur¡_Ëngth
;

492 
	gDWMAC_DMA_CFG_BUS_MODE_BURST_MODE_SINGLE_OR_INCR
,

495 
	gDWMAC_DMA_CFG_BUS_MODE_BURST_MODE_FIXED


496 } 
	tdwmac_dma_cfg_bus_mode_bur¡_mode
;

501 
	gDWMAC_DMA_CFG_BUS_MODE_BURST_NOT_MIXED
,

503 
	gDWMAC_DMA_CFG_BUS_MODE_BURST_MIXED


504 } 
	tdwmac_dma_cfg_bus_mode_bur¡_mixed
;

509 
	gDWMAC_DMA_CFG_AXI_BURST_LENGTH_4_NOT_SUPPORTED
,

512 
	gDWMAC_DMA_CFG_AXI_BURST_LENGTH_4_SUPPORTED


513 } 
	tdwmac_dma_cfg_axi_bur¡_Ëngth_4_suµÜt
;

518 
	gDWMAC_DMA_CFG_AXI_BURST_LENGTH_8_NOT_SUPPORTED
,

521 
	gDWMAC_DMA_CFG_AXI_BURST_LENGTH_8_SUPPORTED


522 } 
	tdwmac_dma_cfg_axi_bur¡_Ëngth_8_suµÜt
;

527 
	gDWMAC_DMA_CFG_AXI_BURST_LENGTH_16_NOT_SUPPORTED
,

530 
	gDWMAC_DMA_CFG_AXI_BURST_LENGTH_16_SUPPORTED


531 } 
	tdwmac_dma_cfg_axi_bur¡_Ëngth_16_suµÜt
;

536 
	gDWMAC_DMA_CFG_AXI_BURST_BOUNDARY_4_KB
,

539 
	gDWMAC_DMA_CFG_AXI_BURST_BOUNDARY_1_KB


540 } 
	tdwmac_dma_cfg_axi_bur¡_bound¬y
;

549 
ut16_t
 
	g¿w
;

564 
ut16_t
 
	gbus_mode_bur¡_Ëngth
 : 6;

573 
ut16_t
 
	gbus_mode_bur¡_mode
 : 1;

579 
ut16_t
 
	gbus_mode_bur¡_mixed
 : 1;

586 
ut16_t
 
	gaxi_bur¡_Ëngth_4_suµÜt
 : 1;

593 
ut16_t
 
	gaxi_bur¡_Ëngth_8_suµÜt
 : 1;

601 
ut16_t
 
	gaxi_bur¡_Ëngth_16_suµÜt
 : 1;

610 
ut16_t
 
	gaxi_bur¡_bound¬y
 : 1;

612 
ut16_t
 
	gunu£d
 : 4;

614 } 
	tdwmac_dma_cfg
;

642 
	#DWMAC_DMA_CFG_INITIALIZER
( \

643 
bus_mode_bur¡_Ëngth
, \

644 
bus_mode_bur¡_mode
, \

645 
bus_mode_bur¡_mixed
, \

646 
axi_bur¡_Ëngth_4_suµÜt
, \

647 
axi_bur¡_Ëngth_8_suµÜt
, \

648 
axi_bur¡_Ëngth_16_suµÜt
, \

649 
axi_bur¡_bound¬y
 \

652 
	`BSP_FLD16
Ð
bus_mode_bur¡_Ëngth
, 0, 5 ) \

653 | 
	`BSP_FLD16
Ð
bus_mode_bur¡_mode
, 6, 6 ) \

654 | 
	`BSP_FLD16
Ð
bus_mode_bur¡_mixed
, 7, 7 ) \

655 | 
	`BSP_FLD16
Ð
axi_bur¡_Ëngth_4_suµÜt
, 8, 8 ) \

656 | 
	`BSP_FLD16
Ð
axi_bur¡_Ëngth_8_suµÜt
, 9, 9 ) \

657 | 
	`BSP_FLD16
Ð
axi_bur¡_Ëngth_16_suµÜt
, 10, 10 ) \

658 | 
	`BSP_FLD16
Ð
axi_bur¡_bound¬y
, 11, 11 ) \

659 }

	)

669 cÚ¡ 
ut32_t
 
	gGMII_CLK_RATE
;

672 vÞ©*
	gaddr_gmac_»gs
;

675 vÞ©*
	gaddr_dma_»gs
;

678 cÚ¡ 
ut8_t
 
	gMDIO_BUS_ADDR
;

681 cÚ¡ 
ut8_t
 
	gL1_CACHE_LINE_SIZE
;

684 cÚ¡ 
¹ems_veùÜ_numb
 
	gIRQ_EMAC
;

687 cÚ¡ 
dwmac_dma_cfg
 *
	gDMA_CFG
;

690 cÚ¡ 
dwmac_ÿÎback_cfg
 
	gCALLBACK
;

693 cÚ¡ 
dwmac_hÃt_mac_Ýs
 *
	gMAC_OPS
;

696 cÚ¡ 
dwmac_desütÜ_Ýs
 *
	gDESC_OPS
;

697 } 
	tdwmac_cfg
;

768 
	#DWMAC_CFG_INITIALIZER
( \

769 
mdio_þk_¿
, \

770 
macg½_»gs_addr
, \

771 
dmag½_»gs_addr
, \

772 
mdio_bus_addr
, \

773 
l1_ÿche_le_size
, \

774 
q_emac
, \

775 
dma_cfg_addr
, \

776 
nic_abË
, \

777 
nic_di§bË
, \

778 
phy_abË
, \

779 
phy_di§bË
, \

780 
phy_evt_abË
, \

781 
phy_evt_þr
, \

782 
phy_evts_g
, \

783 
phy_¡¬t
, \

784 
phy_¡Ý
, \

785 
mem_®loc_noÿche
, \

786 
mem_ä_noÿche
, \

787 
bus_£tup
, \

788 
hÃt_mac_Ýs_addr
, \

789 
desütÜ_Ýs_addr
 \

792 
mdio_þk_¿
, \

793 
macg½_»gs_addr
, \

794 
dmag½_»gs_addr
, \

795 
mdio_bus_addr
, \

796 
l1_ÿche_le_size
, \

797 
q_emac
, \

798 
dma_cfg_addr
, \

799 
	`DWMAC_CALLBACK_CFG_INITIALIZER
( \

800 
nic_abË
, \

801 
nic_di§bË
, \

802 
phy_abË
, \

803 
phy_di§bË
, \

804 
phy_evt_abË
, \

805 
phy_evt_þr
, \

806 
phy_evts_g
, \

807 
phy_¡¬t
, \

808 
phy_¡Ý
, \

809 
mem_®loc_noÿche
, \

810 
mem_ä_noÿche
, \

811 
bus_£tup
 \

813 
hÃt_mac_Ýs_addr
, \

814 
desütÜ_Ýs_addr
 \

815 }

	)

835 *
dwmac_ÃtwÜk_if_©ch_dach
(

836 
¹ems_bsdÃt_ifcÚfig
 *
bsd_cÚfig
,

837 cÚ¡ 
dwmac_cfg
 *
driv_cÚfig
,

838 *
¬g
,

839 
©chg
 );

852 
dwmac_if_»ad_äom_phy
(

853 *
¬g
,

854 cÚ¡ 
phy_»g
,

855 
ut16_t
 *
v®
 );

868 
dwmac_if_wre_to_phy
(

869 *
¬g
,

870 cÚ¡ 
phy_»g
,

871 cÚ¡ 
ut16_t
 
v®
 );

882 
dwmac_if_hªdË_phy_evt
Ð*
¬g
 );

884 #ifdeà
__ýlu¥lus


	@src/libchip/network/elnk.c

65 
	~<¹ems.h
>

73 #ià
defed
(
__i386__
)

74 
	#ELNK_SUPPORTED


	)

75 
	#PCI_DRAM_OFFSET
 0

	)

78 #ià
defed
(
__PPC__
)

79 
	#ELNK_SUPPORTED


	)

82 
	~<b¥.h
>

84 #ià!
defed
(
PCI_DRAM_OFFSET
)

85 #undeà
ELNK_SUPPORTED


91 #ià
defed
(
ELNK_SUPPORTED
)

92 
	~<¹ems/pci.h
>

94 #ià
defed
(
__PPC__
)

95 
	~<libýu/byÜd.h
>

96 
	~<libýu/io.h
>

99 #ià
defed
(
__i386__
)

100 
	~<libýu/byÜd.h
>

103 
	~<¡dlib.h
>

104 
	~<¡dio.h
>

105 
	~<¡d¬g.h
>

106 
	~<¡rg.h
>

107 
	~<ºo.h
>

108 
	~<¹ems/rÜ.h
>

109 
	~<¹ems/b¥Io.h
>

110 
	~<¹ems/¹ems_bsdÃt.h
>

112 
	~<sys/·¿m.h
>

113 
	~<sys/mbuf.h
>

115 
	~<sys/sock.h
>

116 
	~<sys/sockio.h
>

117 
	~<Ãt/if.h
>

118 
	~<Ãt/.h
>

119 
	~<Ãt/if_h.h
>

121 
	~<Ãt/if_med.h
>

122 
	~<dev/mii/mii.h
>

123 
	~<b¥/q.h
>

125 #ià
defed
(
__i386__
)

126 
	#IO_MASK
 0x3

	)

127 
	#MEM_MASK
 0xF

	)

130 #ifdeà
m®loc


131 #undeà
m®loc


133 #ifdeà
ä


134 #undeà
ä


137 
	#ELNK_DEBUG


	)

140 
	#DRIVER_PREFIX
 "nk"

	)

166 
	#RX_RING_SIZE
 16

	)

167 
	#TX_RING_SIZE
 16

	)

173 
	#NUM_UNITS
 8

	)

178 
	#XL_PACKET_SIZE
 1540

	)

188 
¹ems_evt_£t
 
	gun_sigÇls
[
NUM_UNITS
]ð{ 
RTEMS_EVENT_1
,

189 
RTEMS_EVENT_2
,

190 
RTEMS_EVENT_3
,

191 
RTEMS_EVENT_4
,

192 
RTEMS_EVENT_5
,

193 
RTEMS_EVENT_6
,

194 
RTEMS_EVENT_7
,

195 
RTEMS_EVENT_8
 };

200 #ià
defed
(
__PPC__
)

201 
	#phys_to_bus
(
add»ss
è(()(×dd»ss)è+ 
PCI_DRAM_OFFSET
)

	)

202 
	#bus_to_phys
(
add»ss
è(()(×dd»ss)è- 
PCI_DRAM_OFFSET
)

	)

203 
	#CPU_CACHE_ALIGNMENT_FOR_BUFFER
 
PPC_CACHE_ALIGNMENT


	)

205 
Wa_X_ms
Ð
timeToWa
 );

206 
	#phys_to_bus
(
add»ss
è((è(×dd»ss)))

	)

207 
	#bus_to_phys
(
add»ss
è((è(×dd»ss)))

	)

208 
	#¹ems_b¥_day__bus_cyþes
(
cyþe
è
	`Wa_X_ms
Ðcyþe/100 )

	)

209 
	#CPU_CACHE_ALIGNMENT_FOR_BUFFER
 
PG_SIZE


	)

218 
	#DELAY
(
n
è
	`¹ems_b¥_day__bus_cyþes
Ðn*20 )

	)

226 
	#XL_COMMAND
 0x0E

	)

227 
	#XL_STATUS
 0x0E

	)

229 
	#XL_TX_STATUS
 0x1B

	)

230 
	#XL_TX_FREE
 0x1C

	)

231 
	#XL_DMACTL
 0x20

	)

232 
	#XL_DOWNLIST_PTR
 0x24

	)

233 
	#XL_DOWN_POLL
 0x2D

	)

234 
	#XL_TX_FREETHRESH
 0x2F

	)

235 
	#XL_UPLIST_PTR
 0x38

	)

236 
	#XL_UPLIST_STATUS
 0x30

	)

237 
	#XL_UP_POLL
 0x3D

	)

239 
	#XL_PKTSTAT_UP_STALLED
 0x00002000

	)

240 
	#XL_PKTSTAT_UP_ERROR
 0x00004000

	)

241 
	#XL_PKTSTAT_UP_CMPLT
 0x00008000

	)

243 
	#XL_DMACTL_DN_CMPLT_REQ
 0x00000002

	)

244 
	#XL_DMACTL_DOWN_STALLED
 0x00000004

	)

245 
	#XL_DMACTL_UP_CMPLT
 0x00000008

	)

246 
	#XL_DMACTL_DOWN_CMPLT
 0x00000010

	)

247 
	#XL_DMACTL_UP_RX_EARLY
 0x00000020

	)

248 
	#XL_DMACTL_ARM_COUNTDOWN
 0x00000040

	)

249 
	#XL_DMACTL_DOWN_INPROG
 0x00000080

	)

250 
	#XL_DMACTL_COUNTER_SPEED
 0x00000100

	)

251 
	#XL_DMACTL_DOWNDOWN_MODE
 0x00000200

	)

252 
	#XL_DMACTL_TARGET_ABORT
 0x40000000

	)

253 
	#XL_DMACTL_MASTER_ABORT
 0x80000000

	)

259 
	#XL_CMD_RESET
 0x0000

	)

260 
	#XL_CMD_WINSEL
 0x0800

	)

261 
	#XL_CMD_COAX_START
 0x1000

	)

262 
	#XL_CMD_RX_DISABLE
 0x1800

	)

263 
	#XL_CMD_RX_ENABLE
 0x2000

	)

264 
	#XL_CMD_RX_RESET
 0x2800

	)

265 
	#XL_CMD_UP_STALL
 0x3000

	)

266 
	#XL_CMD_UP_UNSTALL
 0x3001

	)

267 
	#XL_CMD_DOWN_STALL
 0x3002

	)

268 
	#XL_CMD_DOWN_UNSTALL
 0x3003

	)

269 
	#XL_CMD_RX_DISCARD
 0x4000

	)

270 
	#XL_CMD_TX_ENABLE
 0x4800

	)

271 
	#XL_CMD_TX_DISABLE
 0x5000

	)

272 
	#XL_CMD_TX_RESET
 0x5800

	)

273 
	#XL_CMD_INTR_FAKE
 0x6000

	)

274 
	#XL_CMD_INTR_ACK
 0x6800

	)

275 
	#XL_CMD_INTR_ENB
 0x7000

	)

276 
	#XL_CMD_STAT_ENB
 0x7800

	)

277 
	#XL_CMD_RX_SET_FILT
 0x8000

	)

278 
	#XL_CMD_RX_SET_THRESH
 0x8800

	)

279 
	#XL_CMD_TX_SET_THRESH
 0x9000

	)

280 
	#XL_CMD_TX_SET_START
 0x9800

	)

281 
	#XL_CMD_DMA_UP
 0xA000

	)

282 
	#XL_CMD_DMA_STOP
 0xA001

	)

283 
	#XL_CMD_STATS_ENABLE
 0xA800

	)

284 
	#XL_CMD_STATS_DISABLE
 0xB000

	)

285 
	#XL_CMD_COAX_STOP
 0xB800

	)

287 
	#XL_CMD_SET_TX_RECLAIM
 0xC000

	)

288 
	#XL_CMD_RX_SET_HASH
 0xC800

	)

290 
	#XL_HASH_SET
 0x0400

	)

291 
	#XL_HASHFILT_SIZE
 256

	)

298 
	#XL_STAT_INTLATCH
 0x0001

	)

299 
	#XL_STAT_ADFAIL
 0x0002

	)

300 
	#XL_STAT_TX_COMPLETE
 0x0004

	)

301 
	#XL_STAT_TX_AVAIL
 0x0008

	)

302 
	#XL_STAT_RX_COMPLETE
 0x0010

	)

303 
	#XL_STAT_RX_EARLY
 0x0020

	)

304 
	#XL_STAT_INTREQ
 0x0040

	)

305 
	#XL_STAT_STATSOFLOW
 0x0080

	)

306 
	#XL_STAT_DMADONE
 0x0100

	)

307 
	#XL_STAT_LINKSTAT
 0x0100

	)

308 
	#XL_STAT_DOWN_COMPLETE
 0x0200

	)

309 
	#XL_STAT_UP_COMPLETE
 0x0400

	)

310 
	#XL_STAT_DMABUSY
 0x0800

	)

311 
	#XL_STAT_CMDBUSY
 0x1000

	)

316 
	#XL_INTRS
 \

317 (
XL_STAT_UP_COMPLETE
 | 
XL_STAT_STATSOFLOW
 | 
XL_STAT_ADFAIL
| \

318 
XL_STAT_DOWN_COMPLETE
 | 
XL_STAT_TX_COMPLETE
 | 
XL_STAT_INTLATCH
)

	)

327 
	#TC_VENDORID
 0x10B7

	)

332 
	#TC_DEVICEID_BOOMERANG_10BT
 0x9000

	)

333 
	#TC_DEVICEID_BOOMERANG_10BT_COMBO
 0x9001

	)

334 
	#TC_DEVICEID_BOOMERANG_10_100BT
 0x9050

	)

335 
	#TC_DEVICEID_BOOMERANG_100BT4
 0x9051

	)

336 
	#TC_DEVICEID_KRAKATOA_10BT
 0x9004

	)

337 
	#TC_DEVICEID_KRAKATOA_10BT_COMBO
 0x9005

	)

338 
	#TC_DEVICEID_KRAKATOA_10BT_TPC
 0x9006

	)

339 
	#TC_DEVICEID_CYCLONE_10FL
 0x900A

	)

340 
	#TC_DEVICEID_HURRICANE_10_100BT
 0x9055

	)

341 
	#TC_DEVICEID_CYCLONE_10_100BT4
 0x9056

	)

342 
	#TC_DEVICEID_CYCLONE_10_100_COMBO
 0x9058

	)

343 
	#TC_DEVICEID_CYCLONE_10_100FX
 0x905A

	)

344 
	#TC_DEVICEID_TORNADO_10_100BT
 0x9200

	)

345 
	#TC_DEVICEID_TORNADO_10_100BT_920B
 0x9201

	)

346 
	#TC_DEVICEID_HURRICANE_10_100BT_SERV
 0x9800

	)

347 
	#TC_DEVICEID_TORNADO_10_100BT_SERV
 0x9805

	)

348 
	#TC_DEVICEID_HURRICANE_SOHO100TX
 0x7646

	)

349 
	#TC_DEVICEID_TORNADO_HOMECONNECT
 0x4500

	)

350 
	#TC_DEVICEID_HURRICANE_555
 0x5055

	)

351 
	#TC_DEVICEID_HURRICANE_556
 0x6055

	)

352 
	#TC_DEVICEID_HURRICANE_556B
 0x6056

	)

353 
	#TC_DEVICEID_HURRICANE_575A
 0x5057

	)

354 
	#TC_DEVICEID_HURRICANE_575B
 0x5157

	)

355 
	#TC_DEVICEID_HURRICANE_575C
 0x5257

	)

356 
	#TC_DEVICEID_HURRICANE_656
 0x6560

	)

357 
	#TC_DEVICEID_HURRICANE_656B
 0x6562

	)

358 
	#TC_DEVICEID_TORNADO_656C
 0x6564

	)

362 
	#XL_RXSTAT_LENMASK
 0x00001FFF

	)

363 
	#XL_RXSTAT_UP_ERROR
 0x00004000

	)

364 
	#XL_RXSTAT_UP_CMPLT
 0x00008000

	)

365 
	#XL_RXSTAT_UP_OVERRUN
 0x00010000

	)

366 
	#XL_RXSTAT_RUNT
 0x00020000

	)

367 
	#XL_RXSTAT_ALIGN
 0x00040000

	)

368 
	#XL_RXSTAT_CRC
 0x00080000

	)

369 
	#XL_RXSTAT_OVERSIZE
 0x00100000

	)

370 
	#XL_RXSTAT_DRIBBLE
 0x00800000

	)

371 
	#XL_RXSTAT_UP_OFLOW
 0x01000000

	)

372 
	#XL_RXSTAT_IPCKERR
 0x02000000

	)

373 
	#XL_RXSTAT_TCPCKERR
 0x04000000

	)

374 
	#XL_RXSTAT_UDPCKERR
 0x08000000

	)

375 
	#XL_RXSTAT_BUFEN
 0x10000000

	)

376 
	#XL_RXSTAT_IPCKOK
 0x20000000

	)

377 
	#XL_RXSTAT_TCPCOK
 0x40000000

	)

378 
	#XL_RXSTAT_UDPCKOK
 0x80000000

	)

380 
	#XL_TXSTAT_LENMASK
 0x00001FFF

	)

381 
	#XL_TXSTAT_CRCDIS
 0x00002000

	)

382 
	#XL_TXSTAT_TX_INTR
 0x00008000

	)

383 
	#XL_TXSTAT_DL_COMPLETE
 0x00010000

	)

384 
	#XL_TXSTAT_IPCKSUM
 0x02000000

	)

385 
	#XL_TXSTAT_TCPCKSUM
 0x04000000

	)

386 
	#XL_TXSTAT_UDPCKSUM
 0x08000000

	)

387 
	#XL_TXSTAT_RND_DEFEAT
 0x10000000

	)

388 
	#XL_TXSTAT_EMPTY
 0x20000000

	)

389 
	#XL_TXSTAT_DL_INTR
 0x80000000

	)

392 
	#XL_FLAG_FUNCREG
 0x0001

	)

393 
	#XL_FLAG_PHYOK
 0x0002

	)

394 
	#XL_FLAG_EEPROM_OFFSET_30
 0x0004

	)

395 
	#XL_FLAG_WEIRDRESET
 0x0008

	)

396 
	#XL_FLAG_8BITROM
 0x0010

	)

397 
	#XL_FLAG_INVERT_LED_PWR
 0x0020

	)

398 
	#XL_FLAG_INVERT_MII_PWR
 0x0040

	)

399 
	#XL_FLAG_NO_XCVR_PWR
 0x0080

	)

400 
	#XL_FLAG_USE_MMIO
 0x0100

	)

404 
	#XL_EE_READ
 0x0080

	)

405 
	#XL_EE_WRITE
 0x0040

	)

406 
	#XL_EE_ERASE
 0x00c0

	)

407 
	#XL_EE_EWEN
 0x0030

	)

408 
	#XL_EE_8BIT_READ
 0x0200

	)

409 
	#XL_EE_BUSY
 0x8000

	)

411 
	#XL_EE_EADDR0
 0x00

	)

412 
	#XL_EE_EADDR1
 0x01

	)

413 
	#XL_EE_EADDR2
 0x02

	)

414 
	#XL_EE_PRODID
 0x03

	)

415 
	#XL_EE_MDATA_DATE
 0x04

	)

416 
	#XL_EE_MDATA_DIV
 0x05

	)

417 
	#XL_EE_MDATA_PCODE
 0x06

	)

418 
	#XL_EE_MFG_ID
 0x07

	)

419 
	#XL_EE_PCI_PARM
 0x08

	)

420 
	#XL_EE_ROM_ONFO
 0x09

	)

421 
	#XL_EE_OEM_ADR0
 0x0A

	)

422 
	#XL_EE_OEM_ADR1
 0x0B

	)

423 
	#XL_EE_OEM_ADR2
 0x0C

	)

424 
	#XL_EE_SOFTINFO1
 0x0D

	)

425 
	#XL_EE_COMPAT
 0x0E

	)

426 
	#XL_EE_SOFTINFO2
 0x0F

	)

427 
	#XL_EE_CAPS
 0x10

	)

428 
	#XL_EE_RSVD0
 0x11

	)

429 
	#XL_EE_ICFG_0
 0x12

	)

430 
	#XL_EE_ICFG_1
 0x13

	)

431 
	#XL_EE_RSVD1
 0x14

	)

432 
	#XL_EE_SOFTINFO3
 0x15

	)

433 
	#XL_EE_RSVD_2
 0x16

	)

438 
	#XL_CAPS_PNP
 0x0001

	)

439 
	#XL_CAPS_FULL_DUPLEX
 0x0002

	)

440 
	#XL_CAPS_LARGE_PKTS
 0x0004

	)

441 
	#XL_CAPS_SLAVE_DMA
 0x0008

	)

442 
	#XL_CAPS_SECOND_DMA
 0x0010

	)

443 
	#XL_CAPS_FULL_BM
 0x0020

	)

444 
	#XL_CAPS_FRAG_BM
 0x0040

	)

445 
	#XL_CAPS_CRC_PASSTHRU
 0x0080

	)

446 
	#XL_CAPS_TXDONE
 0x0100

	)

447 
	#XL_CAPS_NO_TXLENGTH
 0x0200

	)

448 
	#XL_CAPS_RX_REPEAT
 0x0400

	)

449 
	#XL_CAPS_SNOOPING
 0x0800

	)

450 
	#XL_CAPS_100MBPS
 0x1000

	)

451 
	#XL_CAPS_PWRMGMT
 0x2000

	)

458 
	#XL_W0_EE_DATA
 0x0C

	)

459 
	#XL_W0_EE_CMD
 0x0A

	)

460 
	#XL_W0_RSRC_CFG
 0x08

	)

461 
	#XL_W0_ADDR_CFG
 0x06

	)

462 
	#XL_W0_CFG_CTRL
 0x04

	)

464 
	#XL_W0_PROD_ID
 0x02

	)

465 
	#XL_W0_MFG_ID
 0x00

	)

471 
	#XL_W1_TX_FIFO
 0x10

	)

473 
	#XL_W1_FREE_TX
 0x0C

	)

474 
	#XL_W1_TX_STATUS
 0x0B

	)

475 
	#XL_W1_TX_TIMER
 0x0A

	)

476 
	#XL_W1_RX_STATUS
 0x08

	)

477 
	#XL_W1_RX_FIFO
 0x00

	)

482 
	#XL_RXSTATUS_OVERRUN
 0x01

	)

483 
	#XL_RXSTATUS_RUNT
 0x02

	)

484 
	#XL_RXSTATUS_ALIGN
 0x04

	)

485 
	#XL_RXSTATUS_CRC
 0x08

	)

486 
	#XL_RXSTATUS_OVERSIZE
 0x10

	)

487 
	#XL_RXSTATUS_DRIBBLE
 0x20

	)

492 
	#XL_TXSTATUS_RECLAIM
 0x02

	)

493 
	#XL_TXSTATUS_OVERFLOW
 0x04

	)

494 
	#XL_TXSTATUS_MAXCOLS
 0x08

	)

495 
	#XL_TXSTATUS_UNDERRUN
 0x10

	)

496 
	#XL_TXSTATUS_JABBER
 0x20

	)

497 
	#XL_TXSTATUS_INTREQ
 0x40

	)

498 
	#XL_TXSTATUS_COMPLETE
 0x80

	)

503 
	#XL_W2_RESET_OPTIONS
 0x0C

	)

504 
	#XL_W2_STATION_MASK_HI
 0x0A

	)

505 
	#XL_W2_STATION_MASK_MID
 0x08

	)

506 
	#XL_W2_STATION_MASK_LO
 0x06

	)

507 
	#XL_W2_STATION_ADDR_HI
 0x04

	)

508 
	#XL_W2_STATION_ADDR_MID
 0x02

	)

509 
	#XL_W2_STATION_ADDR_LO
 0x00

	)

511 
	#XL_RESETOPT_FEATUREMASK
 0x0001|0x0002|0x004

	)

512 
	#XL_RESETOPT_D3RESETDIS
 0x0008

	)

513 
	#XL_RESETOPT_DISADVFD
 0x0010

	)

514 
	#XL_RESETOPT_DISADV100
 0x0020

	)

515 
	#XL_RESETOPT_DISAUTONEG
 0x0040

	)

516 
	#XL_RESETOPT_DEBUGMODE
 0x0080

	)

517 
	#XL_RESETOPT_FASTAUTO
 0x0100

	)

518 
	#XL_RESETOPT_FASTEE
 0x0200

	)

519 
	#XL_RESETOPT_FORCEDCONF
 0x0400

	)

520 
	#XL_RESETOPT_TESTPDTPDR
 0x0800

	)

521 
	#XL_RESETOPT_TEST100TX
 0x1000

	)

522 
	#XL_RESETOPT_TEST100RX
 0x2000

	)

524 
	#XL_RESETOPT_INVERT_LED
 0x0010

	)

525 
	#XL_RESETOPT_INVERT_MII
 0x4000

	)

530 
	#XL_W3_INTERNAL_CFG
 0x00

	)

531 
	#XL_W3_MAXPKTSIZE
 0x04

	)

532 
	#XL_W3_RESET_OPT
 0x08

	)

533 
	#XL_W3_FREE_TX
 0x0C

	)

534 
	#XL_W3_FREE_RX
 0x0A

	)

535 
	#XL_W3_MAC_CTRL
 0x06

	)

537 
	#XL_ICFG_CONNECTOR_MASK
 0x00F00000

	)

538 
	#XL_ICFG_CONNECTOR_BITS
 20

	)

540 
	#XL_ICFG_RAMSIZE_MASK
 0x00000007

	)

541 
	#XL_ICFG_RAMWIDTH
 0x00000008

	)

542 
	#XL_ICFG_ROMSIZE_MASK
 (0x00000040|0x00000080)

	)

543 
	#XL_ICFG_DISABLE_BASSD
 0x00000100

	)

544 
	#XL_ICFG_RAMLOC
 0x00000200

	)

545 
	#XL_ICFG_RAMPART
 (0x00010000|0x00020000)

	)

546 
	#XL_ICFG_XCVRSEL
 (0x00100000|0x00200000|0x00400000)

	)

547 
	#XL_ICFG_AUTOSEL
 0x01000000

	)

549 
	#XL_XCVR_10BT
 0x00

	)

550 
	#XL_XCVR_AUI
 0x01

	)

551 
	#XL_XCVR_RSVD_0
 0x02

	)

552 
	#XL_XCVR_COAX
 0x03

	)

553 
	#XL_XCVR_100BTX
 0x04

	)

554 
	#XL_XCVR_100BFX
 0x05

	)

555 
	#XL_XCVR_MII
 0x06

	)

556 
	#XL_XCVR_RSVD_1
 0x07

	)

557 
	#XL_XCVR_AUTO
 0x08

	)

559 
	#XL_MACCTRL_DEFER_EXT_END
 0x0001

	)

560 
	#XL_MACCTRL_DEFER_0
 0x0002

	)

561 
	#XL_MACCTRL_DEFER_1
 0x0004

	)

562 
	#XL_MACCTRL_DEFER_2
 0x0008

	)

563 
	#XL_MACCTRL_DEFER_3
 0x0010

	)

564 
	#XL_MACCTRL_DUPLEX
 0x0020

	)

565 
	#XL_MACCTRL_ALLOW_LARGE_PACK
 0x0040

	)

566 
	#XL_MACCTRL_EXTEND_AFTER_COL
 0x0080 (3c905B 
Úly
)

	)

567 
	#XL_MACCTRL_FLOW_CONTROL_ENB
 0x0100 (3c905B 
Úly
)

	)

568 
	#XL_MACCTRL_VLT_END
 0x0200 (3c905B 
Úly
)

	)

575 
	#XL_W3_MEDIA_OPT
 0x08

	)

577 
	#XL_MEDIAOPT_BT4
 0x0001

	)

578 
	#XL_MEDIAOPT_BTX
 0x0002

	)

579 
	#XL_MEDIAOPT_BFX
 0x0004

	)

580 
	#XL_MEDIAOPT_BT
 0x0008

	)

581 
	#XL_MEDIAOPT_BNC
 0x0010

	)

582 
	#XL_MEDIAOPT_AUI
 0x0020

	)

583 
	#XL_MEDIAOPT_MII
 0x0040

	)

584 
	#XL_MEDIAOPT_VCO
 0x0100

	)

586 
	#XL_MEDIAOPT_10FL
 0x0100

	)

587 
	#XL_MEDIAOPT_MASK
 0x01FF

	)

592 
	#XL_W4_UPPERBYTESOK
 0x0D

	)

593 
	#XL_W4_BADSSD
 0x0C

	)

594 
	#XL_W4_MEDIA_STATUS
 0x0A

	)

595 
	#XL_W4_PHY_MGMT
 0x08

	)

596 
	#XL_W4_NET_DIAG
 0x06

	)

597 
	#XL_W4_FIFO_DIAG
 0x04

	)

598 
	#XL_W4_VCO_DIAG
 0x02

	)

600 
	#XL_W4_CTRLR_STAT
 0x08

	)

601 
	#XL_W4_TX_DIAG
 0x00

	)

603 
	#XL_MII_CLK
 0x01

	)

604 
	#XL_MII_DATA
 0x02

	)

605 
	#XL_MII_DIR
 0x04

	)

607 
	#XL_MEDIA_SQE
 0x0008

	)

608 
	#XL_MEDIA_10TP
 0x00C0

	)

609 
	#XL_MEDIA_LNK
 0x0080

	)

610 
	#XL_MEDIA_LNKBEAT
 0x0800

	)

612 
	#XL_MEDIASTAT_CRCSTRIP
 0x0004

	)

613 
	#XL_MEDIASTAT_SQEENB
 0x0008

	)

614 
	#XL_MEDIASTAT_COLDET
 0x0010

	)

615 
	#XL_MEDIASTAT_CARRIER
 0x0020

	)

616 
	#XL_MEDIASTAT_JABGUARD
 0x0040

	)

617 
	#XL_MEDIASTAT_LINKBEAT
 0x0080

	)

618 
	#XL_MEDIASTAT_JABDETECT
 0x0200

	)

619 
	#XL_MEDIASTAT_POLREVERS
 0x0400

	)

620 
	#XL_MEDIASTAT_LINKDETECT
 0x0800

	)

621 
	#XL_MEDIASTAT_TXINPROG
 0x1000

	)

622 
	#XL_MEDIASTAT_DCENB
 0x4000

	)

623 
	#XL_MEDIASTAT_AUIDIS
 0x8000

	)

625 
	#XL_NETDIAG_TEST_LOWVOLT
 0x0001

	)

626 
	#XL_NETDIAG_ASIC_REVMASK
 (0x0002|0x0004|0x0008|0x0010|0x0020)

	)

627 
	#XL_NETDIAG_UPPER_BYTES_ENABLE
 0x0040

	)

628 
	#XL_NETDIAG_STATS_ENABLED
 0x0080

	)

629 
	#XL_NETDIAG_TX_FATALERR
 0x0100

	)

630 
	#XL_NETDIAG_TRANSMITTING
 0x0200

	)

631 
	#XL_NETDIAG_RX_ENABLED
 0x0400

	)

632 
	#XL_NETDIAG_TX_ENABLED
 0x0800

	)

633 
	#XL_NETDIAG_FIFO_LOOPBACK
 0x1000

	)

634 
	#XL_NETDIAG_MAC_LOOPBACK
 0x2000

	)

635 
	#XL_NETDIAG_ENDEC_LOOPBACK
 0x4000

	)

636 
	#XL_NETDIAG_EXTERNAL_LOOP
 0x8000

	)

641 
	#XL_W5_STAT_ENB
 0x0C

	)

642 
	#XL_W5_INTR_ENB
 0x0A

	)

643 
	#XL_W5_RECLAIM_THRESH
 0x09

	)

644 
	#XL_W5_RX_FILTER
 0x08

	)

645 
	#XL_W5_RX_EARLYTHRESH
 0x06

	)

646 
	#XL_W5_TX_AVAILTHRESH
 0x02

	)

647 
	#XL_W5_TX_STARTTHRESH
 0x00

	)

652 
	#XL_RXFILTER_INDIVIDUAL
 0x01

	)

653 
	#XL_RXFILTER_ALLMULTI
 0x02

	)

654 
	#XL_RXFILTER_BROADCAST
 0x04

	)

655 
	#XL_RXFILTER_ALLFRAMES
 0x08

	)

656 
	#XL_RXFILTER_MULTIHASH
 0x10

	)

661 
	#XL_W6_TX_BYTES_OK
 0x0C

	)

662 
	#XL_W6_RX_BYTES_OK
 0x0A

	)

663 
	#XL_W6_UPPER_FRAMES_OK
 0x09

	)

664 
	#XL_W6_DEFERRED
 0x08

	)

665 
	#XL_W6_RX_OK
 0x07

	)

666 
	#XL_W6_TX_OK
 0x06

	)

667 
	#XL_W6_RX_OVERRUN
 0x05

	)

668 
	#XL_W6_COL_LATE
 0x04

	)

669 
	#XL_W6_COL_SINGLE
 0x03

	)

670 
	#XL_W6_COL_MULTIPLE
 0x02

	)

671 
	#XL_W6_SQE_ERRORS
 0x01

	)

672 
	#XL_W6_CARRIER_LOST
 0x00

	)

677 
	#XL_W7_BM_ADDR
 0x00

	)

678 
	#XL_W7_BM_LEN
 0x06

	)

679 
	#XL_W7_BM_STATUS
 0x0B

	)

680 
	#XL_W7_BM_TIMEr
 0x0A

	)

685 
	#XL_BM_PKTSTAT
 0x20

	)

686 
	#XL_BM_DOWNLISTPTR
 0x24

	)

687 
	#XL_BM_FRAGADDR
 0x28

	)

688 
	#XL_BM_FRAGLEN
 0x2C

	)

689 
	#XL_BM_TXFREETHRESH
 0x2F

	)

690 
	#XL_BM_UPPKTSTAT
 0x30

	)

691 
	#XL_BM_UPLISTPTR
 0x38

	)

700 
	sxl_mii_äame
 {

701 
u_t8_t
 
	mmii_¡dim
;

702 
u_t8_t
 
	mmii_Ýcode
;

703 
u_t8_t
 
	mmii_phyaddr
;

704 
u_t8_t
 
	mmii_»gaddr
;

705 
u_t8_t
 
	mmii_tuº¬ound
;

706 
u_t16_t
 
	mmii_d©a
;

712 
	#XL_MII_STARTDELIM
 0x01

	)

713 
	#XL_MII_READOP
 0x02

	)

714 
	#XL_MII_WRITEOP
 0x01

	)

715 
	#XL_MII_TURNAROUND
 0x02

	)

728 
	#XL_TYPE_905B
 1

	)

729 
	#XL_TYPE_90X
 2

	)

731 
	#XL_FLAG_FUNCREG
 0x0001

	)

732 
	#XL_FLAG_PHYOK
 0x0002

	)

733 
	#XL_FLAG_EEPROM_OFFSET_30
 0x0004

	)

734 
	#XL_FLAG_WEIRDRESET
 0x0008

	)

735 
	#XL_FLAG_8BITROM
 0x0010

	)

736 
	#XL_FLAG_INVERT_LED_PWR
 0x0020

	)

737 
	#XL_FLAG_INVERT_MII_PWR
 0x0040

	)

738 
	#XL_FLAG_NO_XCVR_PWR
 0x0080

	)

739 
	#XL_FLAG_USE_MMIO
 0x0100

	)

741 
	#XL_NO_XCVR_PWR_MAGICBITS
 0x0900

	)

744 
	#XL_MIN_FRAMELEN
 60

	)

746 
	#XL_LAST_FRAG
 0x80000000

	)

754 
	sxl_¡©s


757 
u_t16_t
 
	mxl_ÿ¼r_lo¡
;

758 
u_t16_t
 
	mxl_sqe_rs
;

759 
u_t16_t
 
	mxl_tx_muÉi_cÞlisiÚ
;

760 
u_t16_t
 
	mxl_tx_sgË_cÞlisiÚ
;

761 
u_t16_t
 
	mxl_tx_Ï_cÞlisiÚ
;

762 
u_t16_t
 
	mxl_rx_ovrun
;

763 
u_t16_t
 
	mxl_tx_deã¼ed
;

765 
u_t32_t
 
	mxl_rx_bys_ok
;

766 
u_t32_t
 
	mxl_tx_bys_ok
;

768 
u_t32_t
 
	mxl_tx_äames_ok
;

769 
u_t32_t
 
	mxl_rx_äames_ok
;

771 
u_t16_t
 
	mxl_badssd
;

774 
u_t16_t
 
	mt¡©us
;

775 
u_t16_t
 
	mrx¡©us
;

776 
u_t8_t
 
	mtx¡©us
;

777 
u_t16_t
 
	mmed¡©us
;

779 
u_t32_t
 
	mtxcom¶e_ts
;

781 
u_t16_t
 
	mmiÄ
, 
	mmi¬
, 
	mmii¡©us
, 
	mmiicmd
;

783 
u_t32_t
 
	mdeviû_¼u±s
;

784 
u_t32_t
 
	mº®cÚfig
;

785 
u_t16_t
 
	mmac_cÚÞ
;

787 
u_t16_t
 
	msmb¡©us
;

788 
u_t32_t
 
	mdmaùl
;

789 
u_t16_t
 
	mtxä
;

794 
	sxl_ty³


796 
u_t16_t
 
	mxl_vid
;

797 
u_t16_t
 
	mxl_did
;

798 *
	mxl_Çme
;

806 
xl_ty³
 
	gxl_devs
[] = {

807 { 
TC_VENDORID
, 
TC_DEVICEID_BOOMERANG_10BT
,

809 { 
TC_VENDORID
, 
TC_DEVICEID_BOOMERANG_10BT_COMBO
,

811 { 
TC_VENDORID
, 
TC_DEVICEID_BOOMERANG_10_100BT
,

813 { 
TC_VENDORID
, 
TC_DEVICEID_BOOMERANG_100BT4
,

815 { 
TC_VENDORID
, 
TC_DEVICEID_KRAKATOA_10BT
,

817 { 
TC_VENDORID
, 
TC_DEVICEID_KRAKATOA_10BT_COMBO
,

819 { 
TC_VENDORID
, 
TC_DEVICEID_KRAKATOA_10BT_TPC
,

821 { 
TC_VENDORID
, 
TC_DEVICEID_CYCLONE_10FL
,

823 { 
TC_VENDORID
, 
TC_DEVICEID_HURRICANE_10_100BT
,

825 { 
TC_VENDORID
, 
TC_DEVICEID_CYCLONE_10_100BT4
,

827 { 
TC_VENDORID
, 
TC_DEVICEID_CYCLONE_10_100FX
,

829 { 
TC_VENDORID
, 
TC_DEVICEID_CYCLONE_10_100_COMBO
,

831 { 
TC_VENDORID
, 
TC_DEVICEID_TORNADO_10_100BT
,

833 { 
TC_VENDORID
, 
TC_DEVICEID_TORNADO_10_100BT_920B
,

835 { 
TC_VENDORID
, 
TC_DEVICEID_HURRICANE_10_100BT_SERV
,

837 { 
TC_VENDORID
, 
TC_DEVICEID_TORNADO_10_100BT_SERV
,

839 { 
TC_VENDORID
, 
TC_DEVICEID_HURRICANE_SOHO100TX
,

841 { 
TC_VENDORID
, 
TC_DEVICEID_TORNADO_HOMECONNECT
,

843 { 
TC_VENDORID
, 
TC_DEVICEID_HURRICANE_555
,

845 { 
TC_VENDORID
, 
TC_DEVICEID_HURRICANE_556
,

847 { 
TC_VENDORID
, 
TC_DEVICEID_HURRICANE_556B
,

849 { 
TC_VENDORID
, 
TC_DEVICEID_HURRICANE_575A
,

851 { 
TC_VENDORID
, 
TC_DEVICEID_HURRICANE_575B
,

853 { 
TC_VENDORID
, 
TC_DEVICEID_HURRICANE_575C
,

855 { 
TC_VENDORID
, 
TC_DEVICEID_HURRICANE_656
,

857 { 
TC_VENDORID
, 
TC_DEVICEID_HURRICANE_656B
,

859 { 
TC_VENDORID
, 
TC_DEVICEID_TORNADO_656C
,

861 { 0, 0, 
NULL
 }

865 
	#XL_TIMEOUT
 1000

	)

873 
	sRXMD


876 vÞ©
ut32_t
 
	mÃxt
;

877 vÞ©
ut32_t
 
	m¡©us
;

878 vÞ©
ut32_t
 
	maddr
;

879 vÞ©
ut32_t
 
	mËngth
;

881 
mbuf
 *
	mmbuf
;

882 
RXMD
 *
	mÃxt_md
;

883 } 
__©ibu__
 ((
®igÃd
 (8), 
·cked
));

889 
	#NUM_FRAGS
 6

	)

895 
	stäag


897 vÞ©
ut32_t
 
	maddr
;

898 vÞ©
ut32_t
 
	mËngth
;

899 } 
__©ibu__
 ((
·cked
));

901 
	sTXMD


904 vÞ©
ut32_t
 
	mÃxt
;

905 vÞ©
ut32_t
 
	m¡©us
;

906 
täag
 
	mtxäags
[
NUM_FRAGS
];

908 
mbuf
 *
	mmbuf
;

909 
TXMD
 *
	mÃxt_md
, *
	mcha±r
;

910 } 
__©ibu__
 ((
®igÃd
 (8), 
·cked
));

916 
	#NUM_CHAIN_LENGTHS
 50

	)

923 
	snk_soác


925 
¬pcom
 
	m¬pcom
;

927 
¹ems_q_cÚÃù_d©a
 
	mqInfo
;

928 
¹ems_evt_£t
 
	miÛvt
;

929 
	mißddr
;

931 *
	mbufãrBa£
, *
	mrgBa£
;

933 
RXMD
 *
	mrx_rg
, *
	mcu¼_rx_md
;

934 
TXMD
 *
	mtx_rg
, *
	mÏ¡_tx_md
, *
	mÏ¡_txcha_hd
;

936 
¹ems_id
 
	m¡©_tim_id
;

937 
ut32_t
 
	m¡©s_upd©e_ticks
;

939 
xl_¡©s
 
	mxl_¡©s
;

941 
u_t8_t
 
	mxl_un
;

942 
u_t8_t
 
	mxl_ty³
;

943 
	mxl_æags
;

944 
u_t16_t
 
	mxl_med
;

945 
u_t16_t
 
	mxl_ÿps
;

946 
u_t32_t
 
	mxl_xcvr
;

947 
u_t8_t
 
	mxl_¡©s_no_timeout
;

948 
u_t16_t
 
	mxl_tx_th»sh
;

950 
	mtx_idË
;

952 
	mcha_Ëngths
[
NUM_CHAIN_LENGTHS
];

953 
	mchËnIndex
;

955 
	mvdÜID
, 
	mdeviûID
;

956 
	macû±Brßdÿ¡
;

957 
	mnumTxbufãrs
, 
	mnumRxbufãrs
;

960 
nk_soác
 
	gnk_soác
[
NUM_UNITS
];

961 
¹ems_id
 
	grxD«mÚTid
;

962 
¹ems_id
 
	gtxD«mÚTid
;

963 
¹ems_id
 
	gchaRecovyQueue
;

971 #ià
defed
(
__i386__
)

973 
	#CSR_WRITE_4
(
sc
, 
»g
, 
v®
è
	`i386_ouÜt_lÚg
Ðsc->
ißddr
 +eg, v® )

	)

974 
	#CSR_WRITE_2
(
sc
, 
»g
, 
v®
è
	`i386_ouÜt_wÜd
Ðsc->
ißddr
 +eg, v® )

	)

975 
	#CSR_WRITE_1
(
sc
, 
»g
, 
v®
è
	`i386_ouÜt_by
Ðsc->
ißddr
 +eg, v® )

	)

978 
le
 
	$CSR_READ_4
Ð
nk_soác
 *
sc
, 
»g
)

980 
myv®
;

981 
	`i386_pÜt_lÚg
Ð
sc
->
ißddr
 + 
»g
, 
myv®
 );

982  
myv®
;

983 
	}
}

985 
le
 
	$CSR_READ_2
Ð
nk_soác
 *
sc
, 
»g
)

987 
myv®
;

988 
	`i386_pÜt_wÜd
Ð
sc
->
ißddr
 + 
»g
, 
myv®
 );

989  
myv®
;

990 
	}
}

992 
le
 
	$CSR_READ_1
Ð
nk_soác
 *
sc
, 
»g
)

994 
myv®
;

995 
	`i386_pÜt_by
Ð
sc
->
ißddr
 + 
»g
, 
myv®
 );

996  
myv®
;

997 
	}
}

1001 #ià
defed
(
__PPC__
)

1003 
	#CSR_WRITE_4
(
sc
, 
»g
, 
v®
è
	`ou
Ðv®, sc->
ißddr
 +eg)

	)

1004 
	#CSR_WRITE_2
(
sc
, 
»g
, 
v®
è
	`outw
Ðv®, sc->
ißddr
 +eg)

	)

1005 
	#CSR_WRITE_1
(
sc
, 
»g
, 
v®
è
	`outb
Ðv®, sc->
ißddr
 +eg)

	)

1007 
	#CSR_READ_4
(
sc
, 
»g
è
	`l
(sc->
ißddr
 +eg)

	)

1008 
	#CSR_READ_2
(
sc
, 
»g
è
	`w
(sc->
ißddr
 +eg)

	)

1009 
	#CSR_READ_1
(
sc
, 
»g
è
	`b
(sc->
ißddr
 +eg)

	)

1014 
	#XL_SEL_WIN
(
x
è
	`CSR_WRITE_2
(
sc
, 
XL_COMMAND
, 
XL_CMD_WINSEL
 | x)

	)

1035 
	$xl_wa
(
nk_soác
 *
sc
)

1037 
i
;

1039 
i
 = 0; i < 
XL_TIMEOUT
; i++)

1041 ià(!(
	`CSR_READ_2
(
sc
, 
XL_STATUS
è& 
XL_STAT_CMDBUSY
))

1045 ià(
i
 =ð
XL_TIMEOUT
)

1046 
	`´tk
("hlk : unÊk%d commªdev com¶ed\n", 
sc
->
xl_un
 );

1048 
	}
}

1064 
	#MII_SET
(
x
) \

1065 
	`CSR_WRITE_2
(
sc
, 
XL_W4_PHY_MGMT
, \

1066 
	`CSR_READ_2
(
sc
, 
XL_W4_PHY_MGMT
è| (
x
))

	)

1068 
	#MII_CLR
(
x
) \

1069 
	`CSR_WRITE_2
(
sc
, 
XL_W4_PHY_MGMT
, \

1070 
	`CSR_READ_2
(
sc
, 
XL_W4_PHY_MGMT
è& ~(
x
))

	)

1076 
	$xl_mii_sync
(

1077 
nk_soác
 *
sc
)

1079 
i
;

1081 
	`XL_SEL_WIN
(4);

1082 
	`MII_SET
(
XL_MII_DIR
|
XL_MII_DATA
);

1084 
i
 = 0; i < 32; i++) {

1085 
	`MII_SET
(
XL_MII_CLK
);

1086 
	`MII_SET
(
XL_MII_DATA
);

1087 
	`MII_CLR
(
XL_MII_CLK
);

1088 
	`MII_SET
(
XL_MII_DATA
);

1092 
	}
}

1098 
	$xl_mii_£nd
(

1099 
nk_soác
 *
sc
,

1100 
u_t32_t
 
bs
,

1101 
út
 )

1103 
i
;

1105 
	`XL_SEL_WIN
(4);

1106 
	`MII_CLR
(
XL_MII_CLK
);

1108 
i
 = (0x1 << (
út
 - 1)); i; i >>= 1) {

1109 ià(
bs
 & 
i
) {

1110 
	`MII_SET
(
XL_MII_DATA
);

1112 
	`MII_CLR
(
XL_MII_DATA
);

1114 
	`MII_CLR
(
XL_MII_CLK
);

1115 
	`MII_SET
(
XL_MII_CLK
);

1117 
	}
}

1123 
	$xl_mii_»ad»g
(

1124 
nk_soác
 *
sc
,

1125 
xl_mii_äame
 *
äame
 )

1127 
i
, 
ack
;

1132 
äame
->
mii_¡dim
 = 
XL_MII_STARTDELIM
;

1133 
äame
->
mii_Ýcode
 = 
XL_MII_READOP
;

1134 
äame
->
mii_tuº¬ound
 = 0;

1135 
äame
->
mii_d©a
 = 0;

1141 
	`XL_SEL_WIN
(4);

1143 
	`CSR_WRITE_2
(
sc
, 
XL_W4_PHY_MGMT
, 0);

1147 
	`MII_SET
(
XL_MII_DIR
);

1149 
	`xl_mii_sync
(
sc
);

1154 
	`xl_mii_£nd
(
sc
, 
äame
->
mii_¡dim
, 2);

1155 
	`xl_mii_£nd
(
sc
, 
äame
->
mii_Ýcode
, 2);

1156 
	`xl_mii_£nd
(
sc
, 
äame
->
mii_phyaddr
, 5);

1157 
	`xl_mii_£nd
(
sc
, 
äame
->
mii_»gaddr
, 5);

1160 
	`MII_CLR
((
XL_MII_CLK
|
XL_MII_DATA
));

1161 
	`MII_SET
(
XL_MII_CLK
);

1164 
	`MII_CLR
(
XL_MII_DIR
);

1167 
	`MII_CLR
(
XL_MII_CLK
);

1168 
ack
 = 
	`CSR_READ_2
(
sc
, 
XL_W4_PHY_MGMT
è& 
XL_MII_DATA
;

1169 
	`MII_SET
(
XL_MII_CLK
);

1175 ià(
ack
) {

1176 
i
 = 0; i < 16; i++) {

1177 
	`MII_CLR
(
XL_MII_CLK
);

1178 
	`MII_SET
(
XL_MII_CLK
);

1180 
ç
;

1183 
i
 = 0x8000; i; i >>= 1) {

1184 
	`MII_CLR
(
XL_MII_CLK
);

1185 ià(!
ack
) {

1186 ià(
	`CSR_READ_2
(
sc
, 
XL_W4_PHY_MGMT
è& 
XL_MII_DATA
)

1187 
äame
->
mii_d©a
 |ð
i
;

1189 
	`MII_SET
(
XL_MII_CLK
);

1192 
ç
:

1194 
	`MII_CLR
(
XL_MII_CLK
);

1195 
	`MII_SET
(
XL_MII_CLK
);

1197 ià(
ack
)

1200 
	}
}

1206 
	$xl_mii_wreg
(

1207 
nk_soác
 *
sc
,

1208 
xl_mii_äame
 *
äame
 )

1214 
äame
->
mii_¡dim
 = 
XL_MII_STARTDELIM
;

1215 
äame
->
mii_Ýcode
 = 
XL_MII_WRITEOP
;

1216 
äame
->
mii_tuº¬ound
 = 
XL_MII_TURNAROUND
;

1221 
	`XL_SEL_WIN
(4);

1226 
	`MII_SET
(
XL_MII_DIR
);

1228 
	`xl_mii_sync
(
sc
);

1230 
	`xl_mii_£nd
(
sc
, 
äame
->
mii_¡dim
, 2);

1231 
	`xl_mii_£nd
(
sc
, 
äame
->
mii_Ýcode
, 2);

1232 
	`xl_mii_£nd
(
sc
, 
äame
->
mii_phyaddr
, 5);

1233 
	`xl_mii_£nd
(
sc
, 
äame
->
mii_»gaddr
, 5);

1234 
	`xl_mii_£nd
(
sc
, 
äame
->
mii_tuº¬ound
, 2);

1235 
	`xl_mii_£nd
(
sc
, 
äame
->
mii_d©a
, 16);

1238 
	`MII_SET
(
XL_MII_CLK
);

1239 
	`MII_CLR
(
XL_MII_CLK
);

1244 
	`MII_CLR
(
XL_MII_DIR
);

1247 
	}
}

1250 
	$xl_miibus_»ad»g
(

1251 
nk_soác
 *
sc
,

1252 
phy
,

1253 
»g
 )

1255 
xl_mii_äame
 
äame
;

1264 ià((!(
sc
->
xl_æags
 & 
XL_FLAG_PHYOK
)è&& 
phy
 != 24)

1266 
	`´tk
("hlk : unÊk%d xl_miibus_»ad»guºed\n", 
sc
->
xl_un
);

1270 
	`mem£t
((*)&
äame
, 0, (frame));

1272 
äame
.
mii_phyaddr
 = 
phy
;

1273 
äame
.
mii_»gaddr
 = 
»g
;

1274 
	`xl_mii_»ad»g
(
sc
, &
äame
);

1276 (
äame
.
mii_d©a
);

1277 
	}
}

1280 
	$xl_miibus_wreg
(

1281 
nk_soác
 *
sc
,

1282 
phy
,

1283 
»g
,

1284 
d©a
 )

1286 
xl_mii_äame
 
äame
;

1288 ià((!(
sc
->
xl_æags
 & 
XL_FLAG_PHYOK
)è&& 
phy
 != 24)

1290 
	`´tk
("hlk : unÊk%d xl_miibus_wreguºed\n", 
sc
->
xl_un
);

1294 
	`mem£t
((*)&
äame
, 0, (frame));

1296 
äame
.
mii_phyaddr
 = 
phy
;

1297 
äame
.
mii_»gaddr
 = 
»g
;

1298 
äame
.
mii_d©a
 = 
d©a
;

1300 
	`xl_mii_wreg
(
sc
, &
äame
);

1303 
	}
}

1318 
	$xl_´om_wa
(
nk_soác
 *
sc
)

1320 
i
;

1322 
i
 = 0; i < 100; i++) {

1323 ià(
	`CSR_READ_2
(
sc
, 
XL_W0_EE_CMD
è& 
XL_EE_BUSY
)

1324 
	`DELAY
(162);

1329 ià(
i
 == 100) {

1330 
	`´tk
("hlk : unÊk%drom faedØcom»ady\n", 
sc
->
xl_un
);

1335 
	}
}

1342 
	$xl_»ad_´om
(

1343 
nk_soác
 *
sc
,

1344 
ÿddr_t
 
de¡
,

1345 
off
,

1346 
út
,

1347 
sw­
)

1349 
r
 = 0, 
i
;

1350 
u_t16_t
 
wÜd
 = 0, *
±r
;

1351 
	#EEPROM_5BIT_OFFSET
(
A
è((((Aè<< 2è& 0x7F00è| ((Aè& 0x003F))

	)

1352 
	#EEPROM_8BIT_OFFSET
(
A
è((Aè& 0x003F)

	)

1357 
	`XL_SEL_WIN
(0);

1359 ià(
	`xl_´om_wa
(
sc
))

1362 ià(
sc
->
xl_æags
 & 
XL_FLAG_EEPROM_OFFSET_30
)

1363 
off
 += 0x30;

1365 
i
 = 0; i < 
út
; i++) {

1366 ià(
sc
->
xl_æags
 & 
XL_FLAG_8BITROM
)

1367 
	`CSR_WRITE_2
(
sc
, 
XL_W0_EE_CMD
,

1368 
XL_EE_8BIT_READ
 | 
	`EEPROM_8BIT_OFFSET
(
off
 + 
i
));

1370 
	`CSR_WRITE_2
(
sc
, 
XL_W0_EE_CMD
,

1371 
XL_EE_READ
 | 
	`EEPROM_5BIT_OFFSET
(
off
 + 
i
));

1372 
r
 = 
	`xl_´om_wa
(
sc
);

1373 ià(
r
)

1375 
wÜd
 = 
	`CSR_READ_2
(
sc
, 
XL_W0_EE_DATA
);

1376 
±r
 = (
u_t16_t
*)(
de¡
 + (
i
 * 2));

1377 ià(
sw­
)

1378 *
±r
 = 
	`Áohs
(
wÜd
);

1380 *
±r
 = 
wÜd
;

1383 (
r
 ? 1 : 0);

1384 
	}
}

1390 
	$xl_¡©s_upd©e
(

1391 
¹ems_id
 
timid
,

1392 *
xsc
)

1394 
nk_soác
 *
sc
 = (nk_soáø*)
xsc
;

1395 
iâ
 *
iå
 = &
sc
->
¬pcom
.
ac_if
;

1396 
u_t32_t
 
t1
;

1398 
sc
->
xl_¡©s
.
t¡©us
 = 
	`CSR_READ_2
(sc, 
XL_STATUS
);

1400 
sc
->
xl_¡©s
.
miÄ
 = 
	`xl_miibus_»ad»g
(sc, 0x18, 
MII_ANAR
 );

1401 
sc
->
xl_¡©s
.
mi¬
 = 
	`xl_miibus_»ad»g
(sc, 0x18, 
MII_ANLPAR
 );

1402 
sc
->
xl_¡©s
.
mii¡©us
 = 
	`xl_miibus_»ad»g
(sc, 0x18, 
MII_BMSR
 );

1403 
sc
->
xl_¡©s
.
miicmd
 = 
	`xl_miibus_»ad»g
(sc, 0x18, 
MII_BMCR
 );

1405 
	`XL_SEL_WIN
(1);

1406 
sc
->
xl_¡©s
.
rx¡©us
 = 
	`CSR_READ_2
(sc, 
XL_W1_RX_STATUS
 );

1407 
sc
->
xl_¡©s
.
tx¡©us
 = 
	`CSR_READ_1
(sc, 
XL_W1_TX_STATUS
 );

1408 
sc
->
xl_¡©s
.
smb¡©us
 = 
	`CSR_READ_2
(sc, 2 );

1410 
	`XL_SEL_WIN
(3);

1411 
sc
->
xl_¡©s
.
º®cÚfig
 = 
	`CSR_READ_4
(sc, 
XL_W3_INTERNAL_CFG
);

1412 
sc
->
xl_¡©s
.
mac_cÚÞ
 = 
	`CSR_READ_2
(sc, 
XL_W3_MAC_CTRL
);

1413 
sc
->
xl_¡©s
.
txä
 = 
	`CSR_READ_2
(sc, 
XL_W3_FREE_TX
 );

1417 
	`XL_SEL_WIN
(6);

1419 
sc
->
xl_¡©s
.
xl_ÿ¼r_lo¡
 +ð
	`CSR_READ_1
(sc, 
XL_W6_CARRIER_LOST
);

1420 
sc
->
xl_¡©s
.
xl_sqe_rs
 +ð
	`CSR_READ_1
(sc, 
XL_W6_SQE_ERRORS
);

1421 
sc
->
xl_¡©s
.
xl_tx_muÉi_cÞlisiÚ
 +ð
	`CSR_READ_1
(sc, 
XL_W6_COL_MULTIPLE
);

1422 
sc
->
xl_¡©s
.
xl_tx_sgË_cÞlisiÚ
 +ð
	`CSR_READ_1
(sc, 
XL_W6_COL_SINGLE
);

1423 
sc
->
xl_¡©s
.
xl_tx_Ï_cÞlisiÚ
 +ð
	`CSR_READ_1
(sc, 
XL_W6_COL_LATE
);

1424 
sc
->
xl_¡©s
.
xl_rx_ovrun
 +ð
	`CSR_READ_1
(sc, 
XL_W6_RX_OVERRUN
);

1425 
sc
->
xl_¡©s
.
xl_tx_deã¼ed
 +ð
	`CSR_READ_1
(sc, 
XL_W6_DEFERRED
);

1427 
sc
->
xl_¡©s
.
xl_tx_äames_ok
 +ð
	`CSR_READ_1
(sc, 
XL_W6_TX_OK
);

1428 
sc
->
xl_¡©s
.
xl_rx_äames_ok
 +ð
	`CSR_READ_1
(sc, 
XL_W6_RX_OK
);

1430 
sc
->
xl_¡©s
.
xl_rx_bys_ok
 +ð
	`CSR_READ_2
(sc, 
XL_W6_TX_BYTES_OK
 );

1431 
sc
->
xl_¡©s
.
xl_tx_bys_ok
 +ð
	`CSR_READ_2
(sc, 
XL_W6_RX_BYTES_OK
 );

1433 
t1
 = 
	`CSR_READ_1
(
sc
, 
XL_W6_UPPER_FRAMES_OK
);

1434 
sc
->
xl_¡©s
.
xl_rx_äames_ok
 +ð((
t1
 & 0x3) << 8);

1435 
sc
->
xl_¡©s
.
xl_tx_äames_ok
 +ð(((
t1
 >> 4) & 0x3) << 8);

1438 
iå
->
if_¼Üs
 +ð
sc
->
xl_¡©s
.
xl_rx_ovrun
;

1440 
iå
->
if_cÞlisiÚs
 +ð
sc
->
xl_¡©s
.
xl_tx_muÉi_cÞlisiÚ
 +

1441 
sc
->
xl_¡©s
.
xl_tx_sgË_cÞlisiÚ
 +

1442 
sc
->
xl_¡©s
.
xl_tx_Ï_cÞlisiÚ
;

1450 
	`XL_SEL_WIN
(4);

1452 
t1
 = 
	`CSR_READ_1
(
sc
, 
XL_W4_UPPERBYTESOK
);

1453 
sc
->
xl_¡©s
.
xl_rx_bys_ok
 +ð((
t1
 & 0xf) << 16);

1454 
sc
->
xl_¡©s
.
xl_tx_bys_ok
 +ð(((
t1
 >> 4) & 0xf) << 16);

1456 
sc
->
xl_¡©s
.
xl_badssd
 +ð
	`CSR_READ_1
(sc, 
XL_W4_BADSSD
);

1458 
sc
->
xl_¡©s
.
med¡©us
 = 
	`CSR_READ_2
(sc, 
XL_W4_MEDIA_STATUS
 );

1459 
sc
->
xl_¡©s
.
dmaùl
 = 
	`CSR_READ_4
(sc, 
XL_DMACTL
 );

1462 
	`XL_SEL_WIN
(7);

1464 ià(!
sc
->
xl_¡©s_no_timeout
)

1465 
	`¹ems_tim_fe_aá
Ð
sc
->
¡©_tim_id
, sc->
¡©s_upd©e_ticks
, 
xl_¡©s_upd©e
, (*)sc );

1467 
	}
}

1476 
	$xl_»£t
(
nk_soác
 *
sc
)

1478 
i
;

1480 
	`XL_SEL_WIN
(0);

1481 
	`CSR_WRITE_2
(
sc
, 
XL_COMMAND
, 
XL_CMD_RESET
 |

1482 ((
sc
->
xl_æags
 & 
XL_FLAG_WEIRDRESET
) ?

1483 
XL_RESETOPT_DISADVFD
:0));

1485 
i
 = 0; i < 
XL_TIMEOUT
; i++) {

1486 
	`DELAY
(10);

1487 ià(!(
	`CSR_READ_2
(
sc
, 
XL_STATUS
è& 
XL_STAT_CMDBUSY
))

1491 ià(
i
 =ð
XL_TIMEOUT
)

1492 
	`´tk
("hlk : unÊk%de£didn'com¶e\n", 
sc
->
xl_un
);

1501 
	`CSR_WRITE_2
(
sc
, 
XL_COMMAND
, 
XL_CMD_RX_RESET
);

1502 
	`DELAY
(100000);

1503 
	`xl_wa
(
sc
);

1504 
	`CSR_WRITE_2
(
sc
, 
XL_COMMAND
, 
XL_CMD_TX_RESET
);

1505 
	`xl_wa
(
sc
);

1507 ià(
sc
->
xl_æags
 & 
XL_FLAG_INVERT_LED_PWR
 ||

1508 
sc
->
xl_æags
 & 
XL_FLAG_INVERT_MII_PWR
)

1510 
	`XL_SEL_WIN
(2);

1511 
	`CSR_WRITE_2
(
sc
, 
XL_W2_RESET_OPTIONS
, 
	`CSR_READ_2
(sc,

1512 
XL_W2_RESET_OPTIONS
)

1513 | ((
sc
->
xl_æags
 & 
XL_FLAG_INVERT_LED_PWR
)?
XL_RESETOPT_INVERT_LED
:0)

1514 | ((
sc
->
xl_æags
 & 
XL_FLAG_INVERT_MII_PWR
)?
XL_RESETOPT_INVERT_MII
:0)

1519 
	`DELAY
(100000);

1521 
	}
}

1527 
	$xl_¡Ý
(
nk_soác
 *
sc
)

1529 
iâ
 *
iå
;

1531 
iå
 = &
sc
->
¬pcom
.
ac_if
;

1532 
iå
->
if_tim
 = 0;

1534 
	`¹ems_tim_ÿnûl
Ð
sc
->
¡©_tim_id
 );

1536 
	`CSR_WRITE_2
(
sc
, 
XL_COMMAND
, 
XL_CMD_RX_DISABLE
);

1537 
	`CSR_WRITE_2
(
sc
, 
XL_COMMAND
, 
XL_CMD_STATS_DISABLE
);

1538 
	`CSR_WRITE_2
(
sc
, 
XL_COMMAND
, 
XL_CMD_INTR_ENB
);

1539 
	`CSR_WRITE_2
(
sc
, 
XL_COMMAND
, 
XL_CMD_RX_DISCARD
);

1540 
	`xl_wa
(
sc
);

1541 
	`CSR_WRITE_2
(
sc
, 
XL_COMMAND
, 
XL_CMD_TX_DISABLE
);

1542 
	`CSR_WRITE_2
(
sc
, 
XL_COMMAND
, 
XL_CMD_COAX_STOP
);

1543 
	`DELAY
(800);

1545 
	`CSR_WRITE_2
(
sc
, 
XL_COMMAND
, 
XL_CMD_INTR_ACK
|
XL_STAT_INTLATCH
);

1546 
	`CSR_WRITE_2
(
sc
, 
XL_COMMAND
, 
XL_CMD_STAT_ENB
|0);

1547 
	`CSR_WRITE_2
(
sc
, 
XL_COMMAND
, 
XL_CMD_INTR_ENB
|0);

1550 
	}
}

1567 
	$xl_£tcfg
(
nk_soác
 *
sc
)

1569 
u_t32_t
 
icfg
;

1571 
	`XL_SEL_WIN
(3);

1572 
icfg
 = 
	`CSR_READ_4
(
sc
, 
XL_W3_INTERNAL_CFG
);

1574 
icfg
 &ð~
XL_ICFG_CONNECTOR_MASK
;

1576 ià(
sc
->
xl_med
 & 
XL_MEDIAOPT_MII
 || sc->xl_med & 
XL_MEDIAOPT_BT4
)

1577 
icfg
 |ð(
XL_XCVR_MII
 << 
XL_ICFG_CONNECTOR_BITS
);

1579 ià(
sc
->
xl_med
 & 
XL_MEDIAOPT_BTX
)

1580 
icfg
 |ð(
XL_XCVR_AUTO
 << 
XL_ICFG_CONNECTOR_BITS
);

1582 
	`CSR_WRITE_4
(
sc
, 
XL_W3_INTERNAL_CFG
, 
icfg
);

1583 
	`CSR_WRITE_2
(
sc
, 
XL_COMMAND
, 
XL_CMD_COAX_STOP
);

1585 
	`XL_SEL_WIN
(7);

1587 
	}
}

1592 
	$xl_£tmode
(

1593 
nk_soác
 *
sc
,

1594 
med
)

1596 
u_t32_t
 
icfg
;

1597 
u_t16_t
 
med¡©
;

1599 
	`´tk
("hlk : unÊk%d seùg ", 
sc
->
xl_un
);

1601 
	`XL_SEL_WIN
(4);

1602 
med¡©
 = 
	`CSR_READ_2
(
sc
, 
XL_W4_MEDIA_STATUS
);

1603 
	`XL_SEL_WIN
(3);

1604 
icfg
 = 
	`CSR_READ_4
(
sc
, 
XL_W3_INTERNAL_CFG
);

1606 ià(
sc
->
xl_med
 & 
XL_MEDIAOPT_BT
) {

1607 ià(
	`IFM_SUBTYPE
(
med
è=ð
IFM_10_T
) {

1608 
	`´tk
("10baseTransceiver, ");

1609 
sc
->
xl_xcvr
 = 
XL_XCVR_10BT
;

1610 
icfg
 &ð~
XL_ICFG_CONNECTOR_MASK
;

1611 
icfg
 |ð(
XL_XCVR_10BT
 << 
XL_ICFG_CONNECTOR_BITS
);

1612 
med¡©
 |ð
XL_MEDIASTAT_LINKBEAT
|

1613 
XL_MEDIASTAT_JABGUARD
;

1614 
med¡©
 &ð~
XL_MEDIASTAT_SQEENB
;

1618 ià(
sc
->
xl_med
 & 
XL_MEDIAOPT_BFX
) {

1619 ià(
	`IFM_SUBTYPE
(
med
è=ð
IFM_100_FX
) {

1620 
	`´tk
("100baseFXort, ");

1621 
sc
->
xl_xcvr
 = 
XL_XCVR_100BFX
;

1622 
icfg
 &ð~
XL_ICFG_CONNECTOR_MASK
;

1623 
icfg
 |ð(
XL_XCVR_100BFX
 << 
XL_ICFG_CONNECTOR_BITS
);

1624 
med¡©
 |ð
XL_MEDIASTAT_LINKBEAT
;

1625 
med¡©
 &ð~
XL_MEDIASTAT_SQEENB
;

1629 ià(
sc
->
xl_med
 & (
XL_MEDIAOPT_AUI
|
XL_MEDIAOPT_10FL
)) {

1630 ià(
	`IFM_SUBTYPE
(
med
è=ð
IFM_10_5
) {

1631 
	`´tk
("AUIort, ");

1632 
sc
->
xl_xcvr
 = 
XL_XCVR_AUI
;

1633 
icfg
 &ð~
XL_ICFG_CONNECTOR_MASK
;

1634 
icfg
 |ð(
XL_XCVR_AUI
 << 
XL_ICFG_CONNECTOR_BITS
);

1635 
med¡©
 &ð~(
XL_MEDIASTAT_LINKBEAT
|

1636 
XL_MEDIASTAT_JABGUARD
);

1637 
med¡©
 |ð~
XL_MEDIASTAT_SQEENB
;

1639 ià(
	`IFM_SUBTYPE
(
med
è=ð
IFM_10_FL
) {

1640 
	`´tk
("10baseFLransceiver, ");

1641 
sc
->
xl_xcvr
 = 
XL_XCVR_AUI
;

1642 
icfg
 &ð~
XL_ICFG_CONNECTOR_MASK
;

1643 
icfg
 |ð(
XL_XCVR_AUI
 << 
XL_ICFG_CONNECTOR_BITS
);

1644 
med¡©
 &ð~(
XL_MEDIASTAT_LINKBEAT
|

1645 
XL_MEDIASTAT_JABGUARD
);

1646 
med¡©
 |ð~
XL_MEDIASTAT_SQEENB
;

1650 ià(
sc
->
xl_med
 & 
XL_MEDIAOPT_BNC
) {

1651 ià(
	`IFM_SUBTYPE
(
med
è=ð
IFM_10_2
) {

1652 
	`´tk
("BNCort, ");

1653 
sc
->
xl_xcvr
 = 
XL_XCVR_COAX
;

1654 
icfg
 &ð~
XL_ICFG_CONNECTOR_MASK
;

1655 
icfg
 |ð(
XL_XCVR_COAX
 << 
XL_ICFG_CONNECTOR_BITS
);

1656 
med¡©
 &ð~(
XL_MEDIASTAT_LINKBEAT
|

1657 
XL_MEDIASTAT_JABGUARD
|

1658 
XL_MEDIASTAT_SQEENB
);

1662 ià((
med
 & 
IFM_GMASK
è=ð
IFM_FDX
 ||

1663 
	`IFM_SUBTYPE
(
med
è=ð
IFM_100_FX
) {

1664 
	`´tk
("full duplex\n");

1665 
	`XL_SEL_WIN
(3);

1666 
	`CSR_WRITE_1
(
sc
, 
XL_W3_MAC_CTRL
, 
XL_MACCTRL_DUPLEX
);

1668 
	`´tk
("half duplex\n");

1669 
	`XL_SEL_WIN
(3);

1670 
	`CSR_WRITE_1
(
sc
, 
XL_W3_MAC_CTRL
,

1671 (
	`CSR_READ_1
(
sc
, 
XL_W3_MAC_CTRL
è& ~
XL_MACCTRL_DUPLEX
));

1674 ià(
	`IFM_SUBTYPE
(
med
è=ð
IFM_10_2
)

1675 
	`CSR_WRITE_2
(
sc
, 
XL_COMMAND
, 
XL_CMD_COAX_START
);

1677 
	`CSR_WRITE_2
(
sc
, 
XL_COMMAND
, 
XL_CMD_COAX_STOP
);

1679 
	`CSR_WRITE_4
(
sc
, 
XL_W3_INTERNAL_CFG
, 
icfg
);

1680 
	`XL_SEL_WIN
(4);

1681 
	`CSR_WRITE_2
(
sc
, 
XL_W4_MEDIA_STATUS
, 
med¡©
);

1682 
	`DELAY
(800);

1683 
	`XL_SEL_WIN
(7);

1686 
	}
}

1695 
	$xl_choo£_xcvr
(

1696 
nk_soác
 *
sc
,

1697 
vbo£
)

1699 
u_t16_t
 
devid
;

1706 
	`xl_»ad_´om
(
sc
, (
ÿddr_t
)&
devid
, 
XL_EE_PRODID
, 1, 0);

1708 
devid
) {

1709 
TC_DEVICEID_BOOMERANG_10BT
:

1710 
TC_DEVICEID_KRAKATOA_10BT
:

1711 
sc
->
xl_med
 = 
XL_MEDIAOPT_BT
;

1712 
sc
->
xl_xcvr
 = 
XL_XCVR_10BT
;

1713 ià(
vbo£
)

1714 
	`´tk
("etherlink : unitlnk%d guessing 10BaseT "

1715 "ªsûiv\n", 
sc
->
xl_un
);

1717 
TC_DEVICEID_BOOMERANG_10BT_COMBO
:

1718 
TC_DEVICEID_KRAKATOA_10BT_COMBO
:

1719 
sc
->
xl_med
 = 
XL_MEDIAOPT_BT
|
XL_MEDIAOPT_BNC
|
XL_MEDIAOPT_AUI
;

1720 
sc
->
xl_xcvr
 = 
XL_XCVR_10BT
;

1721 ià(
vbo£
)

1722 
	`´tk
("etherlink : unitlnk%d guessing COMBO "

1723 "(AUI/BNC/TP)\n", 
sc
->
xl_un
);

1725 
TC_DEVICEID_KRAKATOA_10BT_TPC
:

1726 
sc
->
xl_med
 = 
XL_MEDIAOPT_BT
|
XL_MEDIAOPT_BNC
;

1727 
sc
->
xl_xcvr
 = 
XL_XCVR_10BT
;

1728 ià(
vbo£
)

1729 
	`´tk
("hlk : unÊk%d guessg TPC (BNC/TP)\n", 
sc
->
xl_un
);

1731 
TC_DEVICEID_CYCLONE_10FL
:

1732 
sc
->
xl_med
 = 
XL_MEDIAOPT_10FL
;

1733 
sc
->
xl_xcvr
 = 
XL_XCVR_AUI
;

1734 ià(
vbo£
)

1735 
	`´tk
("hlk : unÊk%d guessg 10ba£FL\n", 
sc
->
xl_un
);

1737 
TC_DEVICEID_BOOMERANG_10_100BT
:

1738 
TC_DEVICEID_HURRICANE_555
:

1739 
TC_DEVICEID_HURRICANE_556
:

1740 
TC_DEVICEID_HURRICANE_556B
:

1741 
TC_DEVICEID_HURRICANE_575A
:

1742 
TC_DEVICEID_HURRICANE_575B
:

1743 
TC_DEVICEID_HURRICANE_575C
:

1744 
TC_DEVICEID_HURRICANE_656
:

1745 
TC_DEVICEID_HURRICANE_656B
:

1746 
TC_DEVICEID_TORNADO_656C
:

1747 
TC_DEVICEID_TORNADO_10_100BT_920B
:

1748 
sc
->
xl_med
 = 
XL_MEDIAOPT_MII
;

1749 
sc
->
xl_xcvr
 = 
XL_XCVR_MII
;

1750 ià(
vbo£
)

1751 
	`´tk
("hlk : unÊk%d guessg MII\n", 
sc
->
xl_un
);

1753 
TC_DEVICEID_BOOMERANG_100BT4
:

1754 
TC_DEVICEID_CYCLONE_10_100BT4
:

1755 
sc
->
xl_med
 = 
XL_MEDIAOPT_BT4
;

1756 
sc
->
xl_xcvr
 = 
XL_XCVR_MII
;

1757 ià(
vbo£
)

1758 
	`´tk
("hlk : unÊk%d guessg 100Ba£T4/MII\n", 
sc
->
xl_un
);

1760 
TC_DEVICEID_HURRICANE_10_100BT
:

1761 
TC_DEVICEID_HURRICANE_10_100BT_SERV
:

1762 
TC_DEVICEID_TORNADO_10_100BT_SERV
:

1763 
TC_DEVICEID_HURRICANE_SOHO100TX
:

1764 
TC_DEVICEID_TORNADO_10_100BT
:

1765 
TC_DEVICEID_TORNADO_HOMECONNECT
:

1766 
sc
->
xl_med
 = 
XL_MEDIAOPT_BTX
;

1767 
sc
->
xl_xcvr
 = 
XL_XCVR_AUTO
;

1768 ià(
vbo£
)

1769 
	`´tk
("hlk : unÊk%d guessg 10/100 iÁÇl\n", 
sc
->
xl_un
);

1771 
TC_DEVICEID_CYCLONE_10_100_COMBO
:

1772 
sc
->
xl_med
 = 
XL_MEDIAOPT_BTX
|
XL_MEDIAOPT_BNC
|
XL_MEDIAOPT_AUI
;

1773 
sc
->
xl_xcvr
 = 
XL_XCVR_AUTO
;

1774 ià(
vbo£
)

1775 
	`´tk
("etherlink : unitlnk%d guessing 10/100 "

1776 "¶u BNC/AUI\n", 
sc
->
xl_un
);

1779 
	`´tk
("etherlink : unitlnk%d unknown device ID: %x -- "

1780 "deçuÉgØ10ba£T\n", 
sc
->
xl_un
, 
devid
);

1781 
sc
->
xl_med
 = 
XL_MEDIAOPT_BT
;

1786 
	}
}

1807 
	$xl_medcheck
(
nk_soác
 *
sc
)

1810 
	`xl_choo£_xcvr
(
sc
, 1);

1818 ià(
sc
->
xl_med
 & (
XL_MEDIAOPT_MASK
 & ~
XL_MEDIAOPT_VCO
)) {

1823 ià(
sc
->
xl_xcvr
 <ð
XL_XCVR_AUTO
)

1826 
	`´tk
("etherlink : unitlnk%d bogus xcvr value "

1827 " EEPROM (%x)\n", 
sc
->
xl_un
, sc->
xl_xcvr
);

1828 
	`´tk
("etherlink : unitlnk%d choosingew default based "

1829 "Ú c¬dy³\n", 
sc
->
xl_un
);

1832 ià(
sc
->
xl_ty³
 =ð
XL_TYPE_905B
 &&

1833 
sc
->
xl_med
 & 
XL_MEDIAOPT_10FL
)

1835 
	`´tk
("etherlink : unitlnk%d WARNING:o media options bits set in "

1836 "thmed o±iÚ »gi¡!!\n", 
sc
->
xl_un
);

1837 
	`´tk
("etherlink : unitlnk%dhis could be manufacturing defect in "

1838 "you¸ad­¸Ü sy¡em\n", 
sc
->
xl_un
);

1839 
	`´tk
("etherlink : unitlnk%dttemptingo guess mediaype; you "

1840 "shouldrobably cÚsuÉ you¸vdÜ\n", 
sc
->
xl_un
);

1844 
	}
}

1870 
	$no_Ý
(cÚ¡ 
¹ems_q_cÚÃù_d©a
* 
q
)

1873 
	}
}

1878 
	$nkIsOn
(cÚ¡ 
¹ems_q_cÚÃù_d©a
* 
q
)

1880  
	`BSP_q_abËd_©_i8259s
 (
q
->
Çme
);

1881 
	}
}

1889 
	$nk_¡¬t_txcha
Ð
nk_soác
 *
sc
, 
TXMD
 *
chahd
 )

1891 
	`xl_wa
(
sc
);

1892 
	`CSR_WRITE_2
(
sc
, 
XL_COMMAND
, 
XL_CMD_DOWN_STALL
);

1895 
sc
->
Ï¡_txcha_hd
 = 
chahd
;

1896 
sc
->
tx_idË
 = 0;

1898 
	`xl_wa
(
sc
);

1900 
	`CSR_WRITE_4
(
sc
, 
XL_DOWNLIST_PTR
, 
	`phys_to_bus
Ðsc->
Ï¡_txcha_hd
 ));

1901 
	`CSR_WRITE_2
(
sc
, 
XL_COMMAND
, 
XL_CMD_DOWN_UNSTALL
);

1902 
	}
}

1911 
¹ems_i¤


1912 
	$nk_¼u±_hªdËr
 ( 
nk_soác
 *
sc
 )

1914 
iâ
 *
iå
 = &
sc
->
¬pcom
.
ac_if
;

1915 
u_t16_t
 
¡©us
;

1917  ((
¡©us
 = 
	`CSR_READ_2
(
sc
, 
XL_STATUS
)è& 
XL_INTRS
) && status != 0xFFFF)

1919 
sc
->
xl_¡©s
.
deviû_¼u±s
++;

1921 
	`CSR_WRITE_2
(
sc
, 
XL_COMMAND
, 
XL_CMD_INTR_ACK
 | (
¡©us
 & 
XL_INTRS
));

1924 
	`´tk
("hlk : unÊk%d iÁ¡©u %04x\n", 
sc
->
xl_un
, 
¡©us
 );

1927 ià(
¡©us
 & 
XL_STAT_UP_COMPLETE
)

1930 
	`´tk
("hlk : unÊk%dx\n", 
sc
->
xl_un
 );

1933 
	`¹ems_bsdÃt_evt_£nd
(
rxD«mÚTid
, 
sc
->
iÛvt
);

1936 ifÐ(
¡©us
 & 
XL_STAT_DOWN_COMPLETE
è|| (¡©u & 
XL_STAT_TX_COMPLETE
) )

1939 
TXMD
 *
chamd
 = 
NULL
;

1942 ifÐ
¡©us
 & 
XL_STAT_TX_COMPLETE
 )

1947 
iå
->
if_Û¼Üs
++;

1948 
sc
->
xl_¡©s
.
txcom¶e_ts
++;

1950 
	`´tk
("hlk : unÊk%d¿nsm¼Ü\n", 
sc
->
xl_un
 );

1954 
	`xl_wa
(
sc
);

1955 
	`CSR_WRITE_2
(
sc
, 
XL_COMMAND
, 
XL_CMD_TX_DISABLE
);

1957 
	`xl_wa
(
sc
);

1958 
	`CSR_WRITE_2
(
sc
, 
XL_COMMAND
, 
XL_CMD_TX_RESET
 | 1 );

1960 
	`xl_wa
(
sc
);

1961 
	`CSR_WRITE_2
(
sc
, 
XL_COMMAND
, 
XL_CMD_TX_ENABLE
);

1963 
	`xl_wa
(
sc
);

1969 
	`¹ems_mes§ge_queue_£nd
Ð
chaRecovyQueue
, &
sc
->
Ï¡_txcha_hd
, (
TXMD
 *));

1973 ifÐ
sc
->
Ï¡_txcha_hd
->
cha±r
 )

1980 ifÐ()
sc
->
Ï¡_txcha_hd
->
cha±r
 == -1 )

1989 
chamd
 = 
sc
->
Ï¡_txcha_hd
;

1999 
chamd
 = 
sc
->
Ï¡_txcha_hd
->
cha±r
;

2000 ifÐ!
chamd
->
cha±r
 ) chamd = 
NULL
;

2004 ifÐ
chamd
 )

2007 
	`nk_¡¬t_txcha
(
sc
, 
chamd
->
Ãxt_md
 );

2012 
sc
->
tx_idË
 = -1;

2016 
	`¹ems_bsdÃt_evt_£nd
Ð
txD«mÚTid
, 
sc
->
iÛvt
 );

2018 
	`´tk
("unÊk%dx dÚe\n", 
sc
->
xl_un
 );

2024 ià(
¡©us
 & 
XL_STAT_ADFAIL
)

2026 
	`´tk
("hlk : unÊk%d C©a¡rÝhiøbu çu»\n", 
sc
->
xl_un
 );

2028 ià(
¡©us
 & 
XL_STAT_STATSOFLOW
)

2030 
sc
->
xl_¡©s_no_timeout
 = 1;

2031 
	`xl_¡©s_upd©e
(
sc
->
¡©_tim_id
,sc);

2032 
sc
->
xl_¡©s_no_timeout
 = 0;

2039 
ut16_t
 
t¡©us
, 
ÇbË
, 
dabË
;

2041 
t¡©us
 = 
	`CSR_READ_2
(
sc
, 
XL_STATUS
 );

2043 
	`XL_SEL_WIN
(5);

2044 
ÇbË
 = 
	`CSR_READ_2
(
sc
, 
XL_W5_INTR_ENB
 );

2045 
dabË
 = 
	`CSR_READ_2
(
sc
, 
XL_W5_STAT_ENB
 );

2046 
	`XL_SEL_WIN
(7);

2047 
	`´tk
("hlk : unÊk%d i¡© %04x, i %04x, ind %04x\n", 
sc
->
xl_un
, 
t¡©us
, 
ÇbË
, 
dabË
 );

2050 
	}
}

2056 
¹ems_i¤


2057 
	$nk_¼u±_hªdËr_y
()

2059 
i
;

2065 
i
=0; i< 
NUM_UNITS
; i++ )

2067 ifÐ
nk_soác
[
i
].
ißddr
 )

2068 
	`nk_¼u±_hªdËr
Ð&
nk_soác
[
i
] );

2070 
	}
}

2086 
	$nk_lize_h¬dw¬e
 (
nk_soác
 *
sc
)

2088 *
ý
;

2089 
i
, 
j
, 
rxsize
, 
txsize
, 
rgsize
;

2094 
ý
 = (*)
	`m®loc
Ð(
rgsize
 = ((
rxsize
 = (
sc
->
numRxbufãrs
 * (
RXMD
))) +

2095 (
txsize
 = (
sc
->
numTxbufãrs
 * (
TXMD
)))) ) +

2096 + 
CPU_CACHE_ALIGNMENT_FOR_BUFFER
);

2097 
sc
->
bufãrBa£
 = 
ý
;

2098 
ý
 +ð(
CPU_CACHE_ALIGNMENT_FOR_BUFFER
 - ()cp) & (CPU_CACHE_ALIGNMENT_FOR_BUFFER - 1);

2099 #ià
	`defed
(
__i386__
)

2100 #ifdeà
PCI_BRIDGE_DOES_NOT_ENSURE_CACHE_COHERENCY_FOR_DMA


2101 ià(
	`_CPU_is_·gg_abËd
())

2102 
_CPU_chªge_memÜy_m­pg_©ibu


2103 (
NULL
, 
ý
, 
rgsize
, 
PTE_CACHE_DISABLE
 | 
PTE_WRITABLE
);

2106 
sc
->
rgBa£
 = 
ý
;

2110 
sc
->
rx_rg
 = (
RXMD
 *)sc->
rgBa£
;

2111 
sc
->
tx_rg
 = (
TXMD
 *)&sc->
rgBa£
[ 
rxsize
 ];

2114 
mbuf
 *
m
;

2115 
RXMD
 *
nxtmd
;

2122 
i
=0 ; i<
sc
->
numRxbufãrs
; i++)

2124 ifÐ((
ut32_t
)&
sc
->
rx_rg
[
i
] & 0x7) )

2126 
	`¹ems_·nic
 ("hlk : unÊk%dxgÁry %dÙligÃdØ8 bys\n", 
sc
->
xl_un
, 
i
 );

2130 
	`MGETHDR
 (
m
, 
M_WAIT
, 
MT_DATA
);

2131 
	`MCLGET
 (
m
, 
M_WAIT
);

2132 
m
->
m_pkthdr
.
rcvif
 = &
sc
->
¬pcom
.
ac_if
;

2134 ifÐ
i
 =ð
sc
->
numRxbufãrs
-1 )

2135 
nxtmd
 = &
sc
->
rx_rg
[0];

2137 
nxtmd
 = &
sc
->
rx_rg
[
i
+1];

2139 
sc
->
rx_rg
[
i
].
Ãxt_md
 = 
nxtmd
;

2140 
sc
->
rx_rg
[
i
].
mbuf
 = 
m
;

2142 
	`¡_Ë32
Ð&
sc
->
rx_rg
[
i
].
¡©us
, 0);

2143 
	`¡_Ë32
Ð&
sc
->
rx_rg
[
i
].
Ãxt
, (
ut32_t
)
	`phys_to_bus
Ð
nxtmd
 ));

2144 
	`¡_Ë32
Ð&
sc
->
rx_rg
[
i
].
addr
, (
ut32_t
)
	`phys_to_bus
Ð
	`mtod
(
m
, *) ));

2145 
	`¡_Ë32
Ð&
sc
->
rx_rg
[
i
].
Ëngth
, 
XL_LAST_FRAG
 | 
XL_PACKET_SIZE
 );

2147 
sc
->
cu¼_rx_md
 = &sc->
rx_rg
[0];

2152 
TXMD
 *
thismd
, *
nxtmd
;

2171 
i
=0 ; i<
sc
->
numTxbufãrs
; i++)

2173 ifÐ((
ut32_t
)&
sc
->
tx_rg
[
i
] & 0x7) )

2175 
	`¹ems_·nic
 ("hlk : unÊk%dxgÁry %dÙligÃdØ8 bys\n", 
sc
->
xl_un
, 
i
 );

2178 ifÐ
i
 =ð
sc
->
numTxbufãrs
-1 )

2179 
nxtmd
 = &
sc
->
tx_rg
[0];

2181 
nxtmd
 = &
sc
->
tx_rg
[
i
+1];

2183 
thismd
 = &
sc
->
tx_rg
[
i
];

2185 
thismd
->
Ãxt_md
 = 
nxtmd
;

2186 
thismd
->
cha±r
 = 
NULL
;

2187 
thismd
->
mbuf
 = 
NULL
;

2189 
	`¡_Ë32
Ð&
thismd
->
¡©us
, 
XL_TXSTAT_DL_COMPLETE
 );

2190 
	`¡_Ë32
Ð&
thismd
->
Ãxt
, 0);

2192 
j
=0; j< 
NUM_FRAGS
; j++)

2194 
	`¡_Ë32
Ð&
thismd
->
txäags
[
j
].
addr
, 0 );

2195 
	`¡_Ë32
Ð&
thismd
->
txäags
[
j
].
Ëngth
, 0 );

2198 
sc
->
Ï¡_tx_md
 = &sc->
tx_rg
[0];

2204 #ifdeà
ELNK_DEBUG


2205 
	`´tk
("etherlink : %02x:%02x:%02x:%02x:%02x:%02xame 'elnk%d', io %x, int %d\n",

2206 
sc
->
¬pcom
.
ac_addr
[0], sc->arpcom.ac_enaddr[1],

2207 
sc
->
¬pcom
.
ac_addr
[2], sc->arpcom.ac_enaddr[3],

2208 
sc
->
¬pcom
.
ac_addr
[4], sc->arpcom.ac_enaddr[5],

2209 
sc
->
xl_un
,

2210 ()
sc
->
ißddr
, sc->
qInfo
.
Çme
 );

2214 
sc
->
qInfo
.
hdl
 = (
¹ems_q_hdl
)
nk_¼u±_hªdËr_y
;

2215 
sc
->
qInfo
.
Ú
 = 
no_Ý
;

2216 
sc
->
qInfo
.
off
 = 
no_Ý
;

2217 
sc
->
qInfo
.
isOn
 = 
nkIsOn
;

2219 ifÐ
sc
->
qInfo
.
Çme
 != 255 )

2221 
¡
;

2223 #ifdeà
BSP_SHARED_HANDLER_SUPPORT


2224 
¡
 = 
	`BSP_¡®l_¹ems_sh¬ed_q_hªdËr
Ð&
sc
->
qInfo
 );

2226 
¡
 = 
	`BSP_¡®l_¹ems_q_hªdËr
Ð&
sc
->
qInfo
 );

2228 ià(!
¡
)

2229 
	`¹ems_·nic
 ("hlk : unÊk%d IÁru±am%dÌdy iÀu£\n", 
sc
->
xl_un
, sc->
qInfo
.
Çme
 );

2233 
	`´tk
("hlk : unÊk%d IÁru±Ù s³cifd by deviû\n", 
sc
->
xl_un
 );

2235 
	}
}

2248 
	$nk_rxD«mÚ
 (*
¬g
)

2250 
nk_soác
 *
sc
;

2251 
h_hd
 *
eh
;

2252 
mbuf
 *
m
;

2253 
RXMD
 *
rmd
;

2254 
i
,
Ën
, 
rx¡©
;

2255 
¹ems_evt_£t
 
evts
;

2260 
	`¹ems_bsdÃt_evt_»ûive
Ð
RTEMS_ALL_EVENTS
,

2261 
RTEMS_WAIT
|
RTEMS_EVENT_ANY
,

2262 
RTEMS_NO_TIMEOUT
,

2263 &
evts
);

2267 
i
=0; i< 
NUM_UNITS
; i++ )

2269 
sc
 = &
nk_soác
[
i
];

2270 ifÐ
sc
->
ißddr
 )

2272 ifÐ
evts
 & 
sc
->
iÛvt
 )

2274 
iâ
 *
iå
 = &
sc
->
¬pcom
.
ac_if
;

2276 
rmd
 = 
sc
->
cu¼_rx_md
;

2281  (
rx¡©
 = 
	`ld_Ë32
(&
rmd
->
¡©us
)) )

2283 ià(
rx¡©
 & 
XL_RXSTAT_UP_ERROR
)

2285 
	`´tk
("un %u°rÜ\n", 
sc
->
xl_un
 );

2286 
iå
->
if_¼Üs
++;

2289 ifÐ(
rx¡©
 & 
XL_RXSTAT_UP_CMPLT
) )

2294 *
pkt
, *
dim
;

2295 
i
;

2296 
pkt
 = 
	`mtod
(
rmd
->
mbuf
, *);

2297 
	`´tk
("un %rxk(%08xè", 
sc
->
xl_un
, 
pkt
 );

2298 
dim
="", 
i
=0; i < (
h_hd
)+8; i++, delim=":")

2299 
	`´tk
("%s%02x", 
dim
, (è
pkt
[
i
] );

2300 
	`´tk
("\n");

2305 
Ën
 = ( 
	`ld_Ë32
(&
rmd
->
¡©us
è& 
XL_RXSTAT_LENMASK
);

2306 
m
 = 
rmd
->
mbuf
;

2307 
m
->
m_Ën
 = m->
m_pkthdr
.
Ën
 = - (
h_hd
);

2308 
eh
 = 
	`mtod
(
m
, 
h_hd
 *);

2309 
m
->
m_d©a
 +ð(
h_hd
);

2311 
	`h_put
(
iå
, 
eh
, 
m
);

2314 
	`MGETHDR
 (
m
, 
M_WAIT
, 
MT_DATA
);

2315 
	`MCLGET
 (
m
, 
M_WAIT
);

2316 
m
->
m_pkthdr
.
rcvif
 = 
iå
;

2317 
rmd
->
mbuf
 = 
m
;

2318 
	`¡_Ë32
Ð&
rmd
->
¡©us
, 0 );

2319 
	`¡_Ë32
Ð&
rmd
->
addr
, (
ut32_t
)
	`phys_to_bus
(
	`mtod
(
m
, *)) );

2324 
	`´tk
("hlk : unÊk%d badeûiv¡©u --ack drÝ³d\n", 
sc
->
xl_un
);

2325 
iå
->
if_¼Üs
++;

2328 
rmd
->
¡©us
 = 0;

2330 
rmd
 =md->
Ãxt_md
;

2333 
sc
->
cu¼_rx_md
 = 
rmd
;

2341 ifÐ
	`¹ems_evt_sy¡em_»ûive
Ð
RTEMS_ALL_EVENTS
,

2342 
RTEMS_NO_WAIT
 | 
RTEMS_EVENT_ANY
,

2344 &
evts
 ) =ð
RTEMS_UNSATISFIED
 ) ;

2347 
	}
}

2360 
	$nk_txD«mÚ
 (*
¬g
)

2362 
nk_soác
 *
sc
;

2363 
iâ
 *
iå
;

2364 
mbuf
 *
m
;

2365 
TXMD
 *
Ï¡md
, *
Ãxtmd
, *
f¡md
;

2366 
chaCouÁ
,
i
;

2367 
¹ems_evt_£t
 
evts
;

2374 
	`¹ems_bsdÃt_evt_»ûive
Ð
RTEMS_ALL_EVENTS
,

2375 
RTEMS_EVENT_ANY
 | 
RTEMS_WAIT
,

2376 
RTEMS_NO_TIMEOUT
, &
evts
);

2378 
i
=0; i< 
NUM_UNITS
; i++ )

2380 
sc
 = &
nk_soác
[
i
];

2381 ifÐ
sc
->
ißddr
 )

2383 ifÐ
evts
 & 
sc
->
iÛvt
 )

2385 
iå
 = &
sc
->
¬pcom
.
ac_if
;

2391 
chaCouÁ
 = 0;

2392 
f¡md
 = 
NULL
;

2394 
Ï¡md
 = 
sc
->
Ï¡_tx_md
;

2406 
TXMD
 *
chahd
, *
cha
;

2407 
size_t
 
esize
;

2409 ifÐ
	`¹ems_mes§ge_queue_»ûive
Ð
chaRecovyQueue
, &
chahd
, &
esize
,

2410 
RTEMS_NO_WAIT
, 0è=ð
RTEMS_SUCCESSFUL
 )

2413 
cha
 = 
chahd
->
cha±r
;

2417 ifÐ
cha
 && ()chaintail != -1 )

2421 
	`m_äm
Ð
chahd
->
mbuf
 );

2422 
	`¡_Ë32
Ð&
chahd
->
¡©us
, 
XL_TXSTAT_DL_COMPLETE
 );

2423 
chahd
->
mbuf
 = 
NULL
;

2425 ifÐ
chahd
 =ð
cha
 ) ;

2426 
chahd
 = chahd->
Ãxt_md
;

2432 
	`m_äm
Ð
chahd
->
mbuf
 );

2433 
	`¡_Ë32
Ð&
chahd
->
¡©us
, 
XL_TXSTAT_DL_COMPLETE
 );

2434 
chahd
->
mbuf
 = 
NULL
;

2439 
Ãxtmd
 = 
Ï¡md
->
Ãxt_md
;

2442 ifÐ! (
	`ld_Ë32
(&
Ãxtmd
->
¡©us
è& 
XL_TXSTAT_DL_COMPLETE
) )

2444 
	`´tk
("hlk : unÊk%dxg fuÎ!\n", 
sc
->
xl_un
);

2448 ifÐ
Ãxtmd
->
mbuf
 )

2450 
	`´tk
("hlk : unÊk%dxg cÜru±!\n", 
sc
->
xl_un
);

2456 
	`IF_DEQUEUE
(&
iå
->
if_¢d
, 
m
);

2457 ifÐ!
m
 ) ;

2460 
i
;

2462 
Ãxtmd
->
mbuf
 = 
m
;

2464 
i
=0; i< 
NUM_FRAGS
; i++)

2466 
	`¡_Ë32
Ð&
Ãxtmd
->
txäags
[
i
].
Ëngth
, ((
m
->
m_Ãxt
)?0:
XL_LAST_FRAG
è| ( m->
m_Ën
 & 
XL_TXSTAT_LENMASK
) );

2467 
	`¡_Ë32
Ð&
Ãxtmd
->
txäags
[
i
].
addr
, (
ut32_t
)
	`phys_to_bus
Ð
m
->
m_d©a
 ) );

2468 ià((
m
 = m->
m_Ãxt
è=ð
NULL
)

2471 ifÐ
m
 )

2473 
	`´tk
("hlk : unÊk%dx f¿gmt exhau¡ed,runÿtgack!\n", 
sc
->
xl_un
);

2474 
	`¡_Ë32
Ð&
Ãxtmd
->
txäags
[
NUM_FRAGS
-1].
Ëngth
, 
XL_LAST_FRAG
 |

2475 
	`ld_Ë32
Ð&
Ãxtmd
->
txäags
[
NUM_FRAGS
-1].
Ëngth
) );

2481 *
pkt
 = 
	`bus_to_phys
Ð
	`ld_Ë32
Ð&
Ãxtmd
->
txäags
[
i
].
addr
 )), *
dim
;

2482 
i
;

2483 
	`´tk
("un %d queuedk(%08xè", 
sc
->
xl_un
, (
ut32_t
)
pkt
 );

2484 
dim
="", 
i
=0; i < (
h_hd
); i++, delim=":")

2485 
	`´tk
("%s%02x", 
dim
, (è
pkt
[
i
] );

2486 
	`´tk
("\n");

2492 
	`¡_Ë32
Ð&
Ãxtmd
->
Ãxt
, 0);

2493 
	`¡_Ë32
Ð&
Ãxtmd
->
¡©us
, 0);

2495 ifÐ!
f¡md
 )

2498 
f¡md
 = 
Ãxtmd
;

2509 
Ï¡md
->
cha±r
 = (
TXMD
 *)-1;

2514 
	`¡_Ë32
Ð&
Ï¡md
->
Ãxt
, (
ut32_t
)
	`phys_to_bus
Ð
Ãxtmd
 ));

2517 ++
chaCouÁ
;

2518 
Ï¡md
 = 
Ãxtmd
;

2525 ifÐ
f¡md
 )

2530 
sc
->
Ï¡_tx_md
 = 
Ï¡md
;

2537 
	`¡_Ë32
Ð&
Ï¡md
->
¡©us
, 
XL_TXSTAT_DL_INTR
 );

2546 ifÐ
chaCouÁ
 > 1 )

2548 
f¡md
->
cha±r
 = 
Ï¡md
;

2550 
sc
->
cha_Ëngths
[sc->
chËnIndex
]ð()
chaCouÁ
;

2551 ifÐ++
sc
->
chËnIndex
 =ð
NUM_CHAIN_LENGTHS
 ) sc->chlenIndex = 0;

2560 
Ï¡md
->
cha±r
 = 
NULL
;

2563 
	`´tk
("unit %d queued %dkts,astpkt status %08X\n",

2564 
sc
->
xl_un
,

2565 
chaCouÁ
,

2566 (
ut32_t
)
	`ld_Ë32
Ð&
Ï¡md
->
¡©us
) );

2569 ifÐ
sc
->
tx_idË
 =ð0 && 
	`CSR_READ_4
(sc, 
XL_DOWNLIST_PTR
) == 0 )

2571 
	`´tk
("hlk : unÊk%dx fÜûd!\n", 
sc
->
xl_un
);

2572 
sc
->
tx_idË
 = -1;

2580 ifÐ
sc
->
tx_idË
 )

2583 
	`´tk
("hlk : unÊk%dx s¹ed %dacks\n", 
sc
->
xl_un
, 
chaCouÁ
 );

2585 
	`nk_¡¬t_txcha
(
sc
, 
f¡md
);

2590 
iå
->
if_æags
 &ð~
IFF_OACTIVE
;

2595 
	}
}

2608 
	$nk_¡¬t
 (
iâ
 *
iå
)

2610 
nk_soác
 *
sc
 = 
iå
->
if_soác
;

2612 
	`´tk
("un %tx sigÇËd\n", 
sc
->
xl_un
 );

2614 
iå
->
if_æags
 |ð
IFF_OACTIVE
;

2615 
	`¹ems_bsdÃt_evt_£nd
Ð
txD«mÚTid
, 
sc
->
iÛvt
 );

2616 
	}
}

2636 
	$nk_
 (*
¬g
)

2638 
i
;

2639 
nk_soác
 *
sc
 = 
¬g
;

2640 
iâ
 *
iå
 = &
sc
->
¬pcom
.
ac_if
;

2642 ifÐ!(
iå
->
if_æags
 & 
IFF_RUNNING
) )

2644 
	`xl_¡Ý
(
sc
);

2645 
	`xl_»£t
(
sc
);

2646 
sc
->
tx_idË
 = -1;

2649 
ut32_t
 
ü
,
¤
;

2651 
	`xl_miibus_wreg
(
sc
, 0x18, 
MII_BMCR
, 
BMCR_RESET
 );

2653  (
ü
 = 
	`xl_miibus_»ad»g
(
sc
, 0x18, 
MII_BMCR
 )è& 
BMCR_RESET
 )

2655 
	`DELAY
(100000);

2658 
	`xl_miibus_wreg
(
sc
, 0x18, 
MII_ANAR
, 
ANAR_10
 | 
ANAR_TX
 | 
ANAR_10_FD
 | 
ANAR_TX_FD
 );

2659 
	`xl_miibus_wreg
(
sc
, 0x18, 
MII_BMCR
, 
BMCR_STARTNEG
 | 
BMCR_AUTOEN
 );

2661 
i
=0; ((
¤
 = 
	`xl_miibus_»ad»g
(
sc
, 0x18, 
MII_BMSR
)è& 
BMSR_ACOMP
) == 0 && i < 20; i++)

2662 
	`DELAY
(10000);

2669 ifÐ!
sc
->
qInfo
.
hdl
 )

2671 
	`nk_lize_h¬dw¬e
(
sc
);

2678 
u_t8_t
 
rxft
;

2681 
	`XL_SEL_WIN
(2);

2682 
i
 = 0; i < 
ETHER_ADDR_LEN
; i++)

2684 
	`CSR_WRITE_1
(
sc
, 
XL_W2_STATION_ADDR_LO
 + 
i
, sc->
¬pcom
.
ac_addr
[i]);

2688 
med
 = 
IFM_ETHER
|
IFM_100_TX
|
IFM_FDX
;

2690 
	`xl_medcheck
(
sc
);

2693 
sc
->
xl_xcvr
) {

2694 
XL_XCVR_10BT
:

2695 
med
 = 
IFM_ETHER
|
IFM_10_T
;

2696 
	`xl_£tmode
(
sc
, 
med
);

2698 
XL_XCVR_AUI
:

2699 ià(
sc
->
xl_ty³
 =ð
XL_TYPE_905B
 &&

2700 
sc
->
xl_med
 =ð
XL_MEDIAOPT_10FL
) {

2701 
med
 = 
IFM_ETHER
|
IFM_10_FL
;

2702 
	`xl_£tmode
(
sc
, 
med
);

2704 
med
 = 
IFM_ETHER
|
IFM_10_5
;

2705 
	`xl_£tmode
(
sc
, 
med
);

2708 
XL_XCVR_COAX
:

2709 
med
 = 
IFM_ETHER
|
IFM_10_2
;

2710 
	`xl_£tmode
(
sc
, 
med
);

2712 
XL_XCVR_AUTO
:

2713 
XL_XCVR_100BTX
:

2714 
	`xl_£tcfg
(
sc
);

2716 
XL_XCVR_MII
:

2717 
	`´tk
("hlk : unÊk%d MII medÙ suµÜd!\n", 
sc
->
xl_un
);

2719 
XL_XCVR_100BFX
:

2720 
med
 = 
IFM_ETHER
|
IFM_100_FX
;

2723 
	`´tk
("hlk : unÊk%d unknowÀXCVRy³: %d\n", 
sc
->
xl_un
, sc->
xl_xcvr
);

2728 
med
 = 
IFM_ETHER
|
IFM_10_T
;

2733 ià(
sc
->
xl_æags
 & 
XL_FLAG_NO_XCVR_PWR
) {

2734 
	`XL_SEL_WIN
(0);

2735 
	`CSR_WRITE_2
(
sc
, 
XL_W0_MFG_ID
, 
XL_NO_XCVR_PWR_MAGICBITS
);

2741 
	`XL_SEL_WIN
(2);

2743 
i
 = 0; i < 3; i++)

2744 
	`CSR_WRITE_2
(
sc
, 
XL_W2_STATION_MASK_LO
 + (
i
 * 2), 0);

2752 
	`CSR_WRITE_1
(
sc
, 
XL_TX_FREETHRESH
, 
XL_PACKET_SIZE
 >> 8);

2755 
sc
->
xl_tx_th»sh
 = 
XL_MIN_FRAMELEN
;

2756 
	`CSR_WRITE_2
(
sc
, 
XL_COMMAND
, 
XL_CMD_TX_SET_START
|sc->
xl_tx_th»sh
);

2767 ià(
sc
->
xl_ty³
 =ð
XL_TYPE_905B
) {

2768 
	`CSR_WRITE_2
(
sc
, 
XL_COMMAND
,

2769 
XL_CMD_SET_TX_RECLAIM
|(
XL_PACKET_SIZE
 >> 4));

2773 
	`XL_SEL_WIN
(5);

2774 
rxft
 = 
	`CSR_READ_1
(
sc
, 
XL_W5_RX_FILTER
);

2777 
rxft
 |ð
XL_RXFILTER_INDIVIDUAL
;

2780 ià(
iå
->
if_æags
 & 
IFF_PROMISC
) {

2781 
rxft
 |ð
XL_RXFILTER_ALLFRAMES
;

2782 
	`CSR_WRITE_2
(
sc
, 
XL_COMMAND
, 
XL_CMD_RX_SET_FILT
|
rxft
);

2784 
rxft
 &ð~
XL_RXFILTER_ALLFRAMES
;

2785 
	`CSR_WRITE_2
(
sc
, 
XL_COMMAND
, 
XL_CMD_RX_SET_FILT
|
rxft
);

2791 ià(
iå
->
if_æags
 & 
IFF_BROADCAST
) {

2792 
rxft
 |ð
XL_RXFILTER_BROADCAST
;

2793 
	`CSR_WRITE_2
(
sc
, 
XL_COMMAND
, 
XL_CMD_RX_SET_FILT
|
rxft
);

2795 
rxft
 &ð~
XL_RXFILTER_BROADCAST
;

2796 
	`CSR_WRITE_2
(
sc
, 
XL_COMMAND
, 
XL_CMD_RX_SET_FILT
|
rxft
);

2803 ià(
sc
->
xl_ty³
 =ð
XL_TYPE_905B
)

2804 
	`xl_£tmuÉi_hash
(
sc
);

2806 
	`xl_£tmuÉi
(
sc
);

2818 
	`CSR_WRITE_2
(
sc
, 
XL_COMMAND
, 
XL_CMD_UP_STALL
);

2819 
	`xl_wa
(
sc
);

2820 
	`CSR_WRITE_4
(
sc
, 
XL_UPLIST_PTR
, 
	`phys_to_bus
Ðsc->
cu¼_rx_md
 ));

2821 
	`CSR_WRITE_2
(
sc
, 
XL_COMMAND
, 
XL_CMD_UP_UNSTALL
);

2822 
	`xl_wa
(
sc
);

2826 ià(
sc
->
xl_ty³
 =ð
XL_TYPE_905B
) {

2828 
	`CSR_WRITE_1
(
sc
, 
XL_DOWN_POLL
, 64);

2829 
	`xl_wa
(
sc
);

2830 
	`´tk
("hlk : unÊk%dxÞlgÇbËd\n", 
sc
->
xl_un
 );

2838 
	`XL_SEL_WIN
(3);

2839 ià(
sc
->
xl_xcvr
 =ð
XL_XCVR_COAX
)

2840 
	`CSR_WRITE_2
(
sc
, 
XL_COMMAND
, 
XL_CMD_COAX_START
);

2842 
	`CSR_WRITE_2
(
sc
, 
XL_COMMAND
, 
XL_CMD_COAX_STOP
);

2845 ià(
sc
->
xl_ty³
 =ð
XL_TYPE_905B
)

2846 
	`CSR_WRITE_2
(
sc
, 
XL_W3_MAXPKTSIZE
, 
XL_PACKET_SIZE
);

2849 
	`mem£t
Ð&
sc
->
xl_¡©s
, 0, (xl_stats));

2851 
	`CSR_WRITE_2
(
sc
, 
XL_COMMAND
, 
XL_CMD_STATS_DISABLE
);

2852 
sc
->
xl_¡©s_no_timeout
 = 1;

2853 
	`xl_¡©s_upd©e
(
sc
->
¡©_tim_id
,sc);

2854 
sc
->
xl_¡©s_no_timeout
 = 0;

2855 
	`XL_SEL_WIN
(4);

2856 
	`CSR_WRITE_2
(
sc
, 
XL_W4_NET_DIAG
, 
XL_NETDIAG_UPPER_BYTES_ENABLE
);

2857 
	`CSR_WRITE_2
(
sc
, 
XL_COMMAND
, 
XL_CMD_STATS_ENABLE
);

2863 
	`CSR_WRITE_2
(
sc
, 
XL_COMMAND
, 
XL_CMD_INTR_ACK
|0xFF);

2864 
	`CSR_WRITE_2
(
sc
, 
XL_COMMAND
, 
XL_CMD_STAT_ENB
|
XL_INTRS
);

2865 
	`CSR_WRITE_2
(
sc
, 
XL_COMMAND
, 
XL_CMD_INTR_ENB
|
XL_INTRS
);

2868 
	`CSR_WRITE_2
(
sc
, 
XL_COMMAND
, 
XL_CMD_RX_SET_THRESH
|(
XL_PACKET_SIZE
 >>2));

2869 
	`CSR_WRITE_4
(
sc
, 
XL_DMACTL
, 
XL_DMACTL_UP_RX_EARLY
 );

2872 
	`CSR_WRITE_2
(
sc
, 
XL_COMMAND
, 
XL_CMD_TX_ENABLE
);

2873 
	`xl_wa
(
sc
);

2874 
	`CSR_WRITE_2
(
sc
, 
XL_COMMAND
, 
XL_CMD_RX_ENABLE
);

2875 
	`xl_wa
(
sc
);

2878 
	`XL_SEL_WIN
(7);

2881 
	`¹ems_tim_fe_aá
Ð
sc
->
¡©_tim_id
, sc->
¡©s_upd©e_ticks
, 
xl_¡©s_upd©e
, (*)sc );

2887 
iå
->
if_æags
 |ð
IFF_RUNNING
;

2889 
	}
}

2901 
	$nk_¡Ý
 (
nk_soác
 *
sc
)

2903 
iâ
 *
iå
 = &
sc
->
¬pcom
.
ac_if
;

2904 
i
;

2909 
	`xl_¡Ý
(
sc
);

2910 
	`xl_»£t
(
sc
);

2911 
sc
->
tx_idË
 = -1;

2913 
iå
->
if_æags
 &ð~
IFF_RUNNING
;

2919 
TXMD
 *
chahd
;

2920 
size_t
 
esize
;

2922  
	`¹ems_mes§ge_queue_»ûive
Ð
chaRecovyQueue
, &
chahd
, &
esize
,

2923 
RTEMS_NO_WAIT
, 0è=ð
RTEMS_SUCCESSFUL
 );

2926 
i
=0 ; i<
sc
->
numRxbufãrs
; i++)

2928 
	`¡_Ë32
Ð&
sc
->
rx_rg
[
i
].
¡©us
, 0);

2929 
	`¡_Ë32
Ð&
sc
->
rx_rg
[
i
].
Ëngth
, 
XL_LAST_FRAG
 | 
XL_PACKET_SIZE
 );

2932 
i
=0 ; i<
sc
->
numTxbufãrs
; i++)

2934 
	`¡_Ë32
Ð&
sc
->
tx_rg
[
i
].
¡©us
, 
XL_TXSTAT_DL_COMPLETE
 );

2935 
	`¡_Ë32
Ð&
sc
->
tx_rg
[
i
].
Ãxt
, 0);

2936 ifÐ
sc
->
tx_rg
[
i
].
mbuf
 )

2938 
	`m_ä
Ð
sc
->
tx_rg
[
i
].
mbuf
 );

2939 
sc
->
tx_rg
[
i
].
mbuf
 = 
NULL
;

2942 
	}
}

2951 
	$nk_¡©s
 (
nk_soác
 *
sc
)

2953 
	`´tf
(" MII PHY data {nr:%04xpar:%04x stat:%04x ctl:%04x }\n",

2954 
sc
->
xl_¡©s
.
miÄ
,

2955 
sc
->
xl_¡©s
.
mi¬
,

2956 
sc
->
xl_¡©s
.
mii¡©us
,

2957 
sc
->
xl_¡©s
.
miicmd
);

2959 
	`´tf
(" iÁÇlcfg:%08" 
PRIx32
 " macctl:%04x dmactl:%08" PRIx32 "\n",

2960 
sc
->
xl_¡©s
.
º®cÚfig
,

2961 
sc
->
xl_¡©s
.
mac_cÚÞ
,

2962 
sc
->
xl_¡©s
.
dmaùl
);

2964 
	`´tf
("xstatus:%04xxstatus:%02x smbstat:%04x\n",

2965 
sc
->
xl_¡©s
.
rx¡©us
,

2966 
sc
->
xl_¡©s
.
tx¡©us
,

2967 
sc
->
xl_¡©s
.
smb¡©us
);

2969 
	`´tf
("xfree:%04X intstatus:%04x mediastat:%04x\n",

2970 
sc
->
xl_¡©s
.
txä
,

2971 
sc
->
xl_¡©s
.
t¡©us
,

2972 
sc
->
xl_¡©s
.
med¡©us
);

2976 
i
, 
tÙ®Lgths
ð0, 
numLgths
= 0;

2978 
i
=0; i< 
NUM_CHAIN_LENGTHS
; i++)

2980 ifÐ
sc
->
cha_Ëngths
[
i
] > -1 )

2982 
tÙ®Lgths
 +ð
sc
->
cha_Ëngths
[
i
];

2983 ++
numLgths
;

2987 
	`´tf
(" iÁru±s:%-9" 
PRIu32
 "xcmp_ints:%-5" PRIu32 "vg_chain_len:%-4d\n",

2988 
sc
->
xl_¡©s
.
deviû_¼u±s
,

2989 
sc
->
xl_¡©s
.
txcom¶e_ts
,

2990 
numLgths
 ? (
tÙ®Lgths
 /umLengths) : -1 );

2993 
	`´tf
(" carrier_lost:%-5d sqe_errs:%-5d\n",

2994 
sc
->
xl_¡©s
.
xl_ÿ¼r_lo¡
,

2995 
sc
->
xl_¡©s
.
xl_sqe_rs
);

2997 
	`´tf
("x_multi_collision:%-5dx_single_collision:%-5d\n",

2998 
sc
->
xl_¡©s
.
xl_tx_muÉi_cÞlisiÚ
,

2999 
sc
->
xl_¡©s
.
xl_tx_sgË_cÞlisiÚ
);

3001 
	`´tf
("x_late_collision:%-5dx_overrun:%-5d\n",

3002 
sc
->
xl_¡©s
.
xl_tx_Ï_cÞlisiÚ
,

3003 
sc
->
xl_¡©s
.
xl_rx_ovrun
);

3005 
	`´tf
("x_deferred:%-5d badssd:%-5d\n",

3006 
sc
->
xl_¡©s
.
xl_tx_deã¼ed
,

3007 
sc
->
xl_¡©s
.
xl_badssd
);

3009 
	`´tf
("x_äames_ok:%-9" 
PRIu32
 "x_frames_ok:%-9" PRIu32 "\n",

3010 
sc
->
xl_¡©s
.
xl_rx_äames_ok
,

3011 
sc
->
xl_¡©s
.
xl_tx_äames_ok
);

3013 
	`´tf
("x_bys_ok:%-9" 
PRIu32
 "x_bytes_ok:%-9" PRIu32 "\n",

3014 
sc
->
xl_¡©s
.
xl_rx_bys_ok
,

3015 
sc
->
xl_¡©s
.
xl_tx_bys_ok
 );

3016 
	}
}

3028 
	$nk_ioùl
 (
iâ
 *
iå
, 
ioùl_commªd_t
 
commªd
, 
ÿddr_t
 
d©a
)

3030 
nk_soác
 *
sc
 = 
iå
->
if_soác
;

3031 
rÜ
 = 0;

3033 
commªd
) {

3034 
SIOCGIFADDR
:

3035 
SIOCSIFADDR
:

3036 
	`h_ioùl
 (
iå
, 
commªd
, 
d©a
);

3039 
SIOCSIFFLAGS
:

3040 
iå
->
if_æags
 & (
IFF_UP
 | 
IFF_RUNNING
)) {

3041 
IFF_RUNNING
:

3042 
	`nk_¡Ý
 (
sc
);

3045 
IFF_UP
:

3046 
	`nk_
 (
sc
);

3049 
IFF_UP
 | 
IFF_RUNNING
:

3050 
	`nk_¡Ý
 (
sc
);

3051 
	`nk_
 (
sc
);

3059 
SIO_RTEMS_SHOW_STATS
:

3060 
	`nk_¡©s
 (
sc
);

3067 
rÜ
 = 
EINVAL
;

3071  
rÜ
;

3072 
	}
}

3082 
	$iá­
(
iâ
 *
iå
, 
h_hd
 *
eh
, 
mbuf
 *
m
 )

3084 
i
;

3085 *
dim
, *
pkt
;

3087 
	`´tk
("un %i, srø", 
iå
->
if_un
 );

3088 
dim
ð"", 
i
=0; i< 
ETHER_ADDR_LEN
; i++, delim=":")

3089 
	`´tk
("%s%02x", 
dim
, (è
eh
->
h_sho¡
[
i
] );

3091 
	`´tk
(" dest ");

3093 
dim
ð"", 
i
=0; i< 
ETHER_ADDR_LEN
; i++, delim=":")

3094 
	`´tk
("%s%02x", 
dim
, (è
eh
->
h_dho¡
[
i
] );

3095 
	`´tk
("kt ");

3097 
pkt
 = (*)
eh
;

3098 
dim
="", 
i
=0; i < (
h_hd
); i++, delim=":")

3099 
	`´tk
("%s%02x", 
dim
, (è
pkt
[
i
] );

3101 
	`´tk
("\n");

3103 
	}
}

3108 
	s_bßrds


3110 
	mpbus
,
	mpdev
,
	mpfun
, 
	mvid
, 
	mdid
, 
	mtdex
;

3117 
	$¹ems_nk_driv_©ch
 (
¹ems_bsdÃt_ifcÚfig
 *
cÚfig
, 
©ch
)

3119 
nk_soác
 *
sc
;

3120 
iâ
 *
iå
;

3121 *
unName
;

3122 
unNumb
;

3123 
mtu
, 
i
;

3124 
cv®ue
;

3125 
_bßrds
 
sysbßrds
[
NUM_UNITS
];

3126 
numFound
 = 0;

3127 
pbus
, 
pdev
, 
pfun
;

3128 #ià
	`defed
(
__i386__
)

3129 
ut32_t
 
v®ue
;

3130 
ut8_t
 
¼u±
;

3132 #ià
	`defed
(
__PPC__
)

3133 
ut32_t
 
lv®ue
;

3141 ifÐ(
unNumb
 = 
	`¹ems_bsdÃt_·r£_driv_Çme
Ð
cÚfig
, &
unName
)) == -1 )

3146 ifÐ
	`¡rcmp
(
unName
, 
DRIVER_PREFIX
) )

3148 
	`´tk
("hlk : inv®id unam'%s'\n", 
unName
 );

3152 ià((
unNumb
 < 1è|| (unNumb > 
NUM_UNITS
))

3154 
	`´tk
("hlk : un %i v®id, mu¡ b(1 <ðÀ<ð%d)\n", 
unNumb
, 
NUM_UNITS
);

3160 
dÚe
ð0, 
unum
;

3167  
i
=0; !
dÚe
 && 
xl_devs
[i].
xl_vid
; i++)

3169 
unum
ð1; !
dÚe
 &&

3170 
	`pci_fd_deviû
Ð
xl_devs
[
i
].
xl_vid
, xl_devs[i].
xl_did
, 
unum
-1,

3171 &
sysbßrds
[
numFound
].
pbus
,

3172 &
sysbßrds
[
numFound
].
pdev
,

3173 &
sysbßrds
[
numFound
].
pfun
)==0; 
unum
++)

3175 ifÐ
numFound
 =ð
NUM_UNITS
 )

3177 
	`´tk
("hlk : Maximum oà%d un found,x¨deviû ignÜed.\n", 
NUM_UNITS
 );

3178 
dÚe
=-1;

3182 
sysbßrds
[
numFound
].
vid
 = 
xl_devs
[
i
].
xl_vid
;

3183 
sysbßrds
[
numFound
].
did
 = 
xl_devs
[
i
].
xl_did
;

3184 
sysbßrds
[
numFound
].
tdex
 = 
i
;

3185 ++
numFound
;

3190 ifÐ! 
numFound
 )

3192 
	`´tk
("etherlink : No Etherlink devices found\n");

3196 ifÐ
unNumb
-1 >ð
numFound
 )

3198 
	`´tk
("hlk : deviû '%s'Ù found\n", 
cÚfig
->
Çme
 );

3207 ifÐ
numFound
 > 1 )

3209 
_bßrds
 
tbßrd
;

3210 
didsÜt
;

3214 
didsÜt
 = 0;

3216 
i
=1; i<
numFound
; i++)

3218 ifÐ
sysbßrds
[
i
-1].
pbus
 > sysboards[i].pbus ||

3219 (
sysbßrds
[
i
-1].
pbus
 =ðsysbßrds[i].pbu && sysbßrds[i-1].
pdev
 > sysboards[i].pdev) )

3221 
	`memýy
(&
tbßrd
, &
sysbßrds
[
i
-1], (
_bßrds
));

3222 
	`memýy
(&
sysbßrds
[
i
-1], &sysbßrds[i], (
_bßrds
));

3223 
	`memýy
(&
sysbßrds
[
i
], &
tbßrd
, (
_bßrds
));

3224 
didsÜt
++;

3228  
didsÜt
 );

3235 
pbus
 = 
sysbßrds
[
unNumb
-1].pbus;

3236 
pdev
 = 
sysbßrds
[
unNumb
-1].pdev;

3237 
pfun
 = 
sysbßrds
[
unNumb
-1].pfun;

3240 
sc
 = &
nk_soác
[
unNumb
 - 1];

3241 
iå
 = &
sc
->
¬pcom
.
ac_if
;

3242 ià(
iå
->
if_soác
 !ð
NULL
)

3244 
	`´tk
("hlk : un %®»ady iÀu£.\n", 
unNumb
 );

3251 
sc
->
xl_un
 = 
unNumb
;

3252 
sc
->
xl_ty³
 = 
sysbßrds
[ 
unNumb
-1 ].
tdex
;

3254 
sc
->
vdÜID
 = 
sysbßrds
[
numFound
].
vid
;

3255 
sc
->
deviûID
 = 
sysbßrds
[
numFound
].
did
;

3257 
sc
->
numRxbufãrs
 = (
cÚfig
->
rbuf_couÁ
è? cÚfig->rbuf_couÁ : 
RX_RING_SIZE
;

3258 
sc
->
numTxbufãrs
 = (
cÚfig
->
xbuf_couÁ
è? cÚfig->xbuf_couÁ : 
TX_RING_SIZE
;

3261 
i
=0; i< 
NUM_CHAIN_LENGTHS
; i++è
sc
->
cha_Ëngths
[i]= -1;

3262 
sc
->
chËnIndex
 = 0;

3265 ià(
cÚfig
->
mtu
)

3266 
mtu
 = 
cÚfig
->mtu;

3268 
mtu
 = 
ETHERMTU
;

3270 
sc
->
acû±Brßdÿ¡
 = !
cÚfig
->
ignÜe_brßdÿ¡
;

3274 #ifdeà
ELNK_DEBUG


3275 
	`´tk
("etherlink : device '%s',ame 'elnk%d',ci %02x:%02x.%02x, %dx/%dx buffers\n",

3276 
xl_devs
[
sc
->
xl_ty³
].
xl_Çme
, sc->
xl_un
,

3277 
pbus
, 
pdev
, 
pfun
,

3278 
sc
->
numRxbufãrs
, sc->
numTxbufãrs
);

3285 ifÐ
	`¹ems_tim_ü
Ð
	`¹ems_bud_Çme
Ð'X', 'L', 't', ()(
sc
->
xl_un
 & 255)),

3286 &
sc
->
¡©_tim_id
 ) !ð
RTEMS_SUCCESSFUL
 )

3288 
	`´tk
("hlk : unÊk%d uÇbËØü st tim\n", 
sc
->
xl_un
 );

3295 
sc
->
¡©s_upd©e_ticks
 = 
	`¹ems_þock_g_ticks_³r_£cÚd
();

3300 
sc
->
iÛvt
 = 
un_sigÇls
[
unNumb
-1];

3303 #ià
	`defed
(
__i386__
)

3304 
	`pci_»ad_cÚfig_dwÜd
(
pbus
, 
pdev
, 
pfun
, 16, &
v®ue
);

3305 
sc
->
ißddr
 = 
v®ue
 & ~
IO_MASK
;

3307 
	`pci_»ad_cÚfig_by
(
pbus
, 
pdev
, 
pfun
, 60, &
¼u±
);

3308 
cv®ue
 = 
¼u±
;

3310 #ià
	`defed
(
__PPC__
)

3314 
	`pci_wre_cÚfig_wÜd
(
pbus
, 
pdev
, 
pfun
,

3315 
PCI_COMMAND
,

3316 (
ut16_t
)Ð
PCI_COMMAND_IO
 |

3317 
PCI_COMMAND_MASTER
 |

3318 
PCI_COMMAND_INVALIDATE
 |

3319 
PCI_COMMAND_WAIT
 ) );

3323 
	`pci_»ad_cÚfig_dwÜd
(
pbus
, 
pdev
, 
pfun
,

3324 
PCI_BASE_ADDRESS_0
,

3325 &
lv®ue
);

3327 
sc
->
ißddr
 = (
ut32_t
)
lv®ue
 & 
PCI_BASE_ADDRESS_IO_MASK
;

3332 
	`pci_»ad_cÚfig_by
(
pbus
, 
pdev
, 
pfun
,

3333 
PCI_INTERRUPT_LINE
,

3334 &
cv®ue
);

3337 
	`mem£t
(&
sc
->
qInfo
,0,(
¹ems_q_cÚÃù_d©a
));

3338 
sc
->
qInfo
.
Çme
 = 
cv®ue
;

3347 
ut8_t
 
pci_Ïncy
;

3348 
ut8_t
 
Ãw_Ïncy
 = 248;

3354 #ià
	`defed
(
__i386__
)

3355 
	`pci_»ad_cÚfig_by
(
pbus
, 
pdev
, 
pfun
, 0x0d, &
pci_Ïncy
);

3357 #ià
	`defed
(
__PPC__
)

3358 
	`pci_»ad_cÚfig_by
(
pbus
,
pdev
,
pfun
, 
PCI_LATENCY_TIMER
, &
pci_Ïncy
);

3360 ià(
pci_Ïncy
 < 
Ãw_Ïncy
)

3362 
	`´tk
("hlk : unÊk%d Ovridg PCI©cy,im (CFLTè£g oà%d,ew v®ui %d.\n", 
sc
->
xl_un
, 
pci_Ïncy
, 
Ãw_Ïncy
 );

3363 #ià
	`defed
(
__i386__
)

3364 
	`pci_wre_cÚfig_by
(
pbus
, 
pdev
, 
pfun
, 0x0d, 
Ãw_Ïncy
);

3366 #ià
	`defed
(
__PPC__
)

3367 
	`pci_wre_cÚfig_by
(
pbus
,
pdev
,
pfun
, 
PCI_LATENCY_TIMER
, 
Ãw_Ïncy
);

3373 
	`xl_»£t
(
sc
);

3377 
u_t16_t
 
xcvr
[2];

3378 
u_ch¬
 
ddr
[
ETHER_ADDR_LEN
];

3380 
sc
->
xl_æags
 = 0;

3381 ià(
sc
->
deviûID
 =ð
TC_DEVICEID_HURRICANE_555
)

3382 
sc
->
xl_æags
 |ð
XL_FLAG_EEPROM_OFFSET_30
 | 
XL_FLAG_PHYOK
;

3383 ià(
sc
->
deviûID
 =ð
TC_DEVICEID_HURRICANE_556
 ||

3384 
sc
->
deviûID
 =ð
TC_DEVICEID_HURRICANE_556B
)

3385 
sc
->
xl_æags
 |ð
XL_FLAG_FUNCREG
 | 
XL_FLAG_PHYOK
 |

3386 
XL_FLAG_EEPROM_OFFSET_30
 | 
XL_FLAG_WEIRDRESET
 |

3387 
XL_FLAG_INVERT_LED_PWR
 | 
XL_FLAG_INVERT_MII_PWR
;

3388 ià(
sc
->
deviûID
 =ð
TC_DEVICEID_HURRICANE_555
 ||

3389 
sc
->
deviûID
 =ð
TC_DEVICEID_HURRICANE_556
)

3390 
sc
->
xl_æags
 |ð
XL_FLAG_8BITROM
;

3391 ià(
sc
->
deviûID
 =ð
TC_DEVICEID_HURRICANE_556B
)

3392 
sc
->
xl_æags
 |ð
XL_FLAG_NO_XCVR_PWR
;

3394 ià(
sc
->
deviûID
 =ð
TC_DEVICEID_HURRICANE_575A
 ||

3395 
sc
->
deviûID
 =ð
TC_DEVICEID_HURRICANE_575B
 ||

3396 
sc
->
deviûID
 =ð
TC_DEVICEID_HURRICANE_575C
 ||

3397 
sc
->
deviûID
 =ð
TC_DEVICEID_HURRICANE_656B
 ||

3398 
sc
->
deviûID
 =ð
TC_DEVICEID_TORNADO_656C
)

3399 
sc
->
xl_æags
 |ð
XL_FLAG_FUNCREG
 | 
XL_FLAG_PHYOK
 |

3400 
XL_FLAG_EEPROM_OFFSET_30
 | 
XL_FLAG_8BITROM
;

3401 ià(
sc
->
deviûID
 =ð
TC_DEVICEID_HURRICANE_656
)

3402 
sc
->
xl_æags
 |ð
XL_FLAG_FUNCREG
 | 
XL_FLAG_PHYOK
;

3403 ià(
sc
->
deviûID
 =ð
TC_DEVICEID_HURRICANE_575B
)

3404 
sc
->
xl_æags
 |ð
XL_FLAG_INVERT_LED_PWR
;

3405 ià(
sc
->
deviûID
 =ð
TC_DEVICEID_HURRICANE_575C
)

3406 
sc
->
xl_æags
 |ð
XL_FLAG_INVERT_MII_PWR
;

3407 ià(
sc
->
deviûID
 =ð
TC_DEVICEID_TORNADO_656C
)

3408 
sc
->
xl_æags
 |ð
XL_FLAG_INVERT_MII_PWR
;

3409 ià(
sc
->
deviûID
 =ð
TC_DEVICEID_HURRICANE_656
 ||

3410 
sc
->
deviûID
 =ð
TC_DEVICEID_HURRICANE_656B
)

3411 
sc
->
xl_æags
 |ð
XL_FLAG_INVERT_MII_PWR
 |

3412 
XL_FLAG_INVERT_LED_PWR
;

3413 ià(
sc
->
deviûID
 =ð
TC_DEVICEID_TORNADO_10_100BT_920B
)

3414 
sc
->
xl_æags
 |ð
XL_FLAG_PHYOK
;

3417 ià(
cÚfig
->
h¬dw¬e_add»ss
)

3419 
	`memýy
(
sc
->
¬pcom
.
ac_addr
, 
cÚfig
->
h¬dw¬e_add»ss
, 
ETHER_ADDR_LEN
);

3423 ià(
	`xl_»ad_´om
(
sc
, (
ÿddr_t
)&
ddr
, 
XL_EE_OEM_ADR0
, 3, 1))

3425 
	`´tk
("hlk : unÊk%d FaedØ»ad stiÚdd»ss\n", 
sc
->
xl_un
 );

3428 
	`memýy
((*)&
sc
->
¬pcom
.
ac_addr
, 
ddr
, 
ETHER_ADDR_LEN
);

3436 
	`xl_»ad_´om
(
sc
, (
ÿddr_t
)&sc->
xl_ÿps
, 
XL_EE_CAPS
, 1, 0);

3437 ià(
sc
->
xl_ÿps
 & 
XL_CAPS_NO_TXLENGTH
)

3438 
sc
->
xl_ty³
 = 
XL_TYPE_905B
;

3440 
sc
->
xl_ty³
 = 
XL_TYPE_90X
;

3448 
	`XL_SEL_WIN
(3);

3449 
sc
->
xl_med
 = 
	`CSR_READ_2
(sc, 
XL_W3_MEDIA_OPT
);

3451 
	`xl_»ad_´om
(
sc
, (*)&
xcvr
, 
XL_EE_ICFG_0
, 2, 0);

3452 
sc
->
xl_xcvr
 = 
xcvr
[0] | xcvr[1] << 16;

3453 
sc
->
xl_xcvr
 &ð
XL_ICFG_CONNECTOR_MASK
;

3454 
sc
->
xl_xcvr
 >>ð
XL_ICFG_CONNECTOR_BITS
;

3457 
	`´tk
("hlk : unÊk%d EEPROM s xcv¸tØ0x%x\n", 
sc
->
xl_un
, sc->
xl_xcvr
);

3461 
msg
[255];

3462 
i
;

3464 
	s_avamed


3466 
b
;

3467 *
Çme
;

3468 } 
_am
[]ð{{ 
XL_MEDIAOPT_BT4
, "100BaseT4" },

3469 { 
XL_MEDIAOPT_BTX
, "100BaseTX" },

3470 { 
XL_MEDIAOPT_BFX
, "100BaseFX" },

3471 { 
XL_MEDIAOPT_BT
, "10BaseT" },

3472 { 
XL_MEDIAOPT_BNC
, "10Base2" },

3473 { 
XL_MEDIAOPT_AUI
, "10mbps AUI"},

3474 { 
XL_MEDIAOPT_MII
, "MII"},

3475 { 0, 
NULL
 }};

3477 
msg
[0]= 0;

3478  
i
=0; 
_am
[i].
b
; i++)

3480 ifÐ
sc
->
xl_med
 & 
_am
[
i
].
b
 )

3481 
	`¥rtf
Ð&
msg
[
	`¡¾
(msg)], ",%s", 
_am
[
i
].
Çme
 );

3483 ifÐ!
	`¡¾
(
msg
èè
	`¡rýy
( &msg[1], "<no media bits>");

3485 
	`´tk
("hlk : unÊk%dvaabË med : %s\n", 
sc
->
xl_un
, &
msg
[1]);

3488 
	`XL_SEL_WIN
(7);

3496 
iå
->
if_soác
 = 
sc
;

3497 
iå
->
if_Çme
 = 
unName
;

3498 
iå
->
if_un
 = 
sc
->
xl_un
;

3499 
iå
->
if_mtu
 = 
mtu
;

3500 
iå
->
if_æags
 = 
IFF_BROADCAST
 | 
IFF_SIMPLEX
;

3501 ià(
iå
->
if_¢d
.
ifq_maxËn
 == 0)

3502 
iå
->
if_¢d
.
ifq_maxËn
 = 
ifqmaxËn
;

3503 
iå
->
if_
 = 
nk_
;

3504 
iå
->
if_¡¬t
 = 
nk_¡¬t
;

3505 
iå
->
if_ioùl
 = 
nk_ioùl
;

3506 
iå
->
if_ouut
 = 
h_ouut
;

3509 
iå
->
if_p
 = 
iá­
;

3515 
	`if_©ch
 (
iå
);

3516 
	`h_içach
 (
iå
);

3518 #ifdeà
ELNK_DEBUG


3519 
	`´tk
Ð"hlk : unÊk%d drivached\n", 
sc
->
xl_un
 );

3525 ià(
txD«mÚTid
 == 0)

3527 ifÐ
	`¹ems_mes§ge_queue_ü
Ð
	`¹ems_bud_Çme
('X','L','c','r'),

3528 
sc
->
numTxbufãrs
+1,

3529 (
TXMD
 *),

3530 
RTEMS_FIFO
 | 
RTEMS_LOCAL
,

3531 &
chaRecovyQueue
 ) !ð
RTEMS_SUCCESSFUL
 )

3533 
	`¹ems_·nic
( "etherlink : Unableo create TX bufferecovery queue\n" );

3537 
rxD«mÚTid
 = 
	`¹ems_bsdÃt_Ãw´oc
( "XLrx", 4096,

3538 
nk_rxD«mÚ
, 
NULL
);

3540 
txD«mÚTid
 = 
	`¹ems_bsdÃt_Ãw´oc
( "XLtx", 4096,

3541 
nk_txD«mÚ
, 
NULL
);

3542 #ifdeà
ELNK_DEBUG


3543 
	`´tk
( "etherlink : driverasks created\n" );

3548 
	}
};

	@src/libchip/network/greth.c

12 
	~<¹ems.h
>

13 
	~<b¥.h
>

15 #ifdeà
GRETH_SUPPORTED


17 
	~<y³s.h
>

18 
	~<ºo.h
>

19 
	~<¹ems/b¥Io.h
>

20 
	~<¡dlib.h
>

21 
	~<¡dio.h
>

22 
	~<¡d¬g.h
>

23 
	~<¹ems/rÜ.h
>

24 
	~<¹ems/¹ems_bsdÃt.h
>

25 
	~"g»th.h
"

27 
	~<sys/·¿m.h
>

28 
	~<sys/mbuf.h
>

30 
	~<sys/sock.h
>

31 
	~<sys/sockio.h
>

32 
	~<Ãt/if.h
>

33 
	~<Ãt/.h
>

34 
	~<Ãt/if_h.h
>

36 #ifdeà
m®loc


37 #undeà
m®loc


39 #ifdeà
ä


40 #undeà
ä


45 #ifdeà
CPU_U32_FIX


46 
®ign
(
mbuf
 *
m
);

50 #iâdeà
GRETH_MEM_LOAD


51 
	#GRETH_MEM_LOAD
(
addr
è(*(vÞ©*)×ddr))

	)

57 
	#NOCDRIVER
 1

	)

62 
	#RBUF_SIZE
 1518

	)

64 
	#ET_MINLEN
 64

	)

70 
	#INTERRUPT_EVENT
 
RTEMS_EVENT_1


	)

76 
	#START_TRANSMIT_EVENT
 
RTEMS_EVENT_2


	)

79 
	#GRETH_TX_WAIT_EVENT
 
RTEMS_EVENT_3


	)

81 #ià(
MCLBYTES
 < 
RBUF_SIZE
)

86 #iâdeà
GRETH_AUTONEGO_TIMEOUT_MS


87 
	#GRETH_AUTONEGO_TIMEOUT_MS
 4000

	)

89 cÚ¡ 
time¥ec
 
	gg»th_n
 = {

90 
GRETH_AUTONEGO_TIMEOUT_MS
/1000,

91 (
GRETH_AUTONEGO_TIMEOUT_MS
 % 1000) *1000000

95 
	#GRETH_AUTONEGO_PRINT_TIME


	)

99 
	s_g»th_rxtxdesc
 {

100 vÞ©
ut32_t
 
	mù¾
;

101 
ut32_t
 *
	maddr
;

102 } 
	tg»th_rxtxdesc
;

108 
	sg»th_soác


111 
¬pcom
 
	m¬pcom
;

113 
g»th_»gs
 *
	m»gs
;

115 
	macû±Brßdÿ¡
;

116 
¹ems_id
 
	md«mÚTid
;

118 
	mtx_±r
;

119 
	mtx_d±r
;

120 
	mtx_út
;

121 
	mrx_±r
;

122 
	mtxbufs
;

123 
	mrxbufs
;

124 
g»th_rxtxdesc
 *
	mtxdesc
;

125 
g»th_rxtxdesc
 *
	mrxdesc
;

126 
mbuf
 **
	mrxmbuf
;

127 
mbuf
 **
	mtxmbuf
;

128 
¹ems_veùÜ_numb
 
	mveùÜ
;

131 
	mtx_t_g
;

132 
	mtx_t_g_cur
;

133 
mbuf
 *
	mÃxt_tx_mbuf
;

134 
	mmax_äagsize
;

137 
phy_deviû_fo
 
	mphydev
;

138 
	mfd
;

139 
	m¥
;

140 
	mgb
;

141 
	mgb_mac
;

142 
	mauto_Ãg
;

143 
time¥ec
 
	mauto_Ãg_time
;

148 
	mrxIÁru±s
;

150 
	mrxPacks
;

151 
	mrxLgthE¼Ü
;

152 
	mrxNÚOù
;

153 
	mrxBadCRC
;

154 
	mrxOvrun
;

156 
	mtxIÁru±s
;

158 
	mtxDeã¼ed
;

159 
	mtxH¹bt
;

160 
	mtxL©eCÞlisiÚ
;

161 
	mtxRryLim
;

162 
	mtxUndrun
;

166 
g»th_soác
 
	gg»th
;

168 
g»th_´oûss_tx_gb
(
g»th_soác
 *
sc
);

169 
g»th_´oûss_tx
(
g»th_soác
 *
sc
);

171 *
	$®m®loc
(
sz
)

173 *
tmp
;

174 
tmp
 = 
	`ÿÎoc
(1,2*
sz
);

175 
tmp
 = (*è(((
u_t
émp+
sz
) & ~(sz -1));

176 (
tmp
);

177 
	}
}

181 
	$g»th_¼u±_hªdËr
 (*
¬g
)

183 
ut32_t
 
¡©us
;

184 
ut32_t
 
ù¾
;

185 
¹ems_evt_£t
 
evts
 = 0;

186 
g»th_soác
 *
g»th
 = 
¬g
;

189 
¡©us
 = 
g»th
->
»gs
->status;

190 
g»th
->
»gs
->
¡©us
 = status;

191 
ù¾
 = 
g»th
->
»gs
->ctrl;

194 ià((
ù¾
 & 
GRETH_CTRL_RXIRQ
è&& (
¡©us
 & (
GRETH_STATUS_RXERR
 | 
GRETH_STATUS_RXIRQ
)))

196 
g»th
->
rxIÁru±s
++;

198 
ù¾
 &ð~
GRETH_CTRL_RXIRQ
;

199 
evts
 |ð
INTERRUPT_EVENT
;

202 iàÐ(
ù¾
 & 
GRETH_CTRL_TXIRQ
è&& (
¡©us
 & (
GRETH_STATUS_TXERR
 | 
GRETH_STATUS_TXIRQ
)) )

204 
g»th
->
txIÁru±s
++;

205 
ù¾
 &ð~
GRETH_CTRL_TXIRQ
;

206 
evts
 |ð
GRETH_TX_WAIT_EVENT
;

210 
g»th
->
»gs
->
ù¾
 = ctrl;

213 iàÐ
evts
 )

214 
	`¹ems_bsdÃt_evt_£nd
 (
g»th
->
d«mÚTid
, 
evts
);

215 
	}
}

217 
ut32_t
 
	$»ad_mii
(
ut32_t
 
phy_addr
, ut32_
»g_addr
)

219 
g»th
.
»gs
->
mdio_ù¾
 & 
GRETH_MDIO_BUSY
) {}

220 
g»th
.
»gs
->
mdio_ù¾
 = (
phy_addr
 << 11è| (
»g_addr
 << 6è| 
GRETH_MDIO_READ
;

221 
g»th
.
»gs
->
mdio_ù¾
 & 
GRETH_MDIO_BUSY
) {}

222 ià(!(
g»th
.
»gs
->
mdio_ù¾
 & 
GRETH_MDIO_LINKFAIL
))

223 ((
g»th
.
»gs
->
mdio_ù¾
 >> 16) & 0xFFFF);

225 
	`´tf
("greth: failedoead mii\n");

228 
	}
}

230 
	$wre_mii
(
ut32_t
 
phy_addr
, ut32_
»g_addr
, ut32_
d©a
)

232 
g»th
.
»gs
->
mdio_ù¾
 & 
GRETH_MDIO_BUSY
) {}

233 
g»th
.
»gs
->
mdio_ù¾
 =

234 ((
d©a
 & 0xFFFFè<< 16è| (
phy_addr
 << 11è| (
»g_addr
 << 6è| 
GRETH_MDIO_WRITE
;

235 
g»th
.
»gs
->
mdio_ù¾
 & 
GRETH_MDIO_BUSY
) {}

236 
	}
}

238 
	$´t__fo
(
g»th_soác
 *
sc
)

240 
	`´tf
("greth: driverttached\n");

241 iàÐ
sc
->
auto_Ãg
 == -1 ){

242 
	`´tf
("Autoegotiationimed out. Selecting default config\n");

244 
	`´tf
("**** PHY ****\n");

245 
	`´tf
("VdÜ: %x Deviû: %x RevisiÚ: %d\n",
sc
->
phydev
.
vdÜ
, sc->phydev.
deviû
, sc->phydev.
»v
);

246 
	`´tf
("Current Operating Mode: ");

247 ià(
sc
->
gb
) {

248 
	`´tf
("1000 Mbit ");

249 } ià(
sc
->
¥
) {

250 
	`´tf
("100 Mbit ");

252 
	`´tf
("10 Mbit ");

254 ià(
sc
->
fd
) {

255 
	`´tf
("Full Duplex\n");

257 
	`´tf
("Half Duplex\n");

259 #ifdeà
GRETH_AUTONEGO_PRINT_TIME


260 iàÐ
sc
->
auto_Ãg
 ) {

261 
	`´tf
("AutÚegÙtiÚ Time: %ldms\n", 
sc
->
auto_Ãg_time
.
tv_£c
*1000 +

262 
sc
->
auto_Ãg_time
.
tv_n£c
/1000000);

265 
	}
}

272 
	$g»th_lize_h¬dw¬e
 (
g»th_soác
 *
sc
)

274 
mbuf
 *
m
;

275 
i
;

276 
phyaddr
;

277 
phyù¾
;

278 
phy¡©us
;

279 
tmp1
;

280 
tmp2
;

281 
time¥ec
 
t¡¬t
, 
ow
;

283 
g»th_»gs
 *
»gs
;

285 
»gs
 = 
sc
->regs;

288 
g»th
.
rxIÁru±s
 = 0;

289 
g»th
.
rxPacks
 = 0;

291 
»gs
->
ù¾
 = 0;

292 
»gs
->
ù¾
 = 
GRETH_CTRL_RST
;

293 
»gs
->
ù¾
 = 0;

296 
sc
->
gb_mac
 = (
»gs
->
ù¾
 >> 27) & 1;

300 
phyaddr
 = (
»gs
->
mdio_ù¾
 >> 11) & 0x1F;

303 (
phyù¾
 = 
	`»ad_mii
(
phyaddr
, 0)) & 0x8000) {}

306 
	`wre_mii
(
phyaddr
, 0, 0x8000 | 
phyù¾
);

308 (
	`»ad_mii
(
phyaddr
, 0)) & 0x8000) {}

309 
phy¡©us
 = 
	`»ad_mii
(
phyaddr
, 1);

313 ià((!
sc
->
gb_mac
è&& (
phy¡©us
 & 0x100)è
	`wre_mii
(
phyaddr
, 9, 0);

316 ià(
phy¡©us
 & 0x08) {

317 
	`wre_mii
(
phyaddr
, 0, 
phyù¾
 | 0x1200);

318 
phyù¾
 = 
	`»ad_mii
(
phyaddr
, 0);

323 
sc
->
gb
 = 0;

324 
sc
->
fd
 = 0;

325 
sc
->
¥
 = 0;

326 
sc
->
auto_Ãg
 = 0;

327 
	`_Time¥ec_S_to_zo
(&
sc
->
auto_Ãg_time
);

328 ià((
phyù¾
 >> 12) & 1) {

330 
sc
->
auto_Ãg
 = 1;

331 ià(
	`¹ems_þock_g_u±ime
(&
t¡¬t
è!ð
RTEMS_SUCCESSFUL
)

332 
	`´tk
("rtems_clock_get_uptime failed\n");

333 !(((
phy¡©us
 = 
	`»ad_mii
(
phyaddr
, 1)) >> 5) & 1)) {

334 ià(
	`¹ems_þock_g_u±ime
(&
ow
è!ð
RTEMS_SUCCESSFUL
)

335 
	`´tk
("rtems_clock_get_uptime failed\n");

336 
	`_Time¥ec_Subaù
(&
t¡¬t
, &
ow
, &
sc
->
auto_Ãg_time
);

337 ià(
	`_Time¥ec_G»©_thª
(&
sc
->
auto_Ãg_time
, &
g»th_n
)) {

338 
sc
->
auto_Ãg
 = -1;

339 
tmp1
 = 
	`»ad_mii
(
phyaddr
, 0);

340 
sc
->
gb
 = ((
phyù¾
 >> 6) & 1) && !((phyctrl >> 13) & 1);

341 
sc
->
¥
 = !((
phyù¾
 >> 6) & 1) && ((phyctrl >> 13) & 1);

342 
sc
->
fd
 = (
phyù¾
 >> 8) & 1;

343 
auto_Ãg_dÚe
;

346 
	`¹ems_sk_wake_aá
(
	`¹ems_þock_g_ticks_³r_£cÚd
()/32);

348 
sc
->
phydev
.
adv
 = 
	`»ad_mii
(
phyaddr
, 4);

349 
sc
->
phydev
.
·¹
 = 
	`»ad_mii
(
phyaddr
, 5);

350 ià((
phy¡©us
 >> 8) & 1) {

351 
sc
->
phydev
.
exdv
 = 
	`»ad_mii
(
phyaddr
, 9);

352 
sc
->
phydev
.
ex¬t
 = 
	`»ad_mii
(
phyaddr
, 10);

353 iàÐ(
sc
->
phydev
.
exdv
 & 
GRETH_MII_EXTADV_1000FD
) &&

354 (
sc
->
phydev
.
ex¬t
 & 
GRETH_MII_EXTPRT_1000FD
)) {

355 
sc
->
gb
 = 1;

356 
sc
->
fd
 = 1;

358 iàÐ(
sc
->
phydev
.
exdv
 & 
GRETH_MII_EXTADV_1000HD
) &&

359 (
sc
->
phydev
.
ex¬t
 & 
GRETH_MII_EXTPRT_1000HD
)) {

360 
sc
->
gb
 = 1;

361 
sc
->
fd
 = 0;

364 ià((
sc
->
gb
 =ð0è|| ((sc->gb =ð1è&& (sc->
gb_mac
 == 0))) {

365 iàÐ(
sc
->
phydev
.
adv
 & 
GRETH_MII_100TXFD
) &&

366 (
sc
->
phydev
.
·¹
 & 
GRETH_MII_100TXFD
)) {

367 
sc
->
¥
 = 1;

368 
sc
->
fd
 = 1;

370 iàÐ(
sc
->
phydev
.
adv
 & 
GRETH_MII_100TXHD
) &&

371 (
sc
->
phydev
.
·¹
 & 
GRETH_MII_100TXHD
)) {

372 
sc
->
¥
 = 1;

373 
sc
->
fd
 = 0;

375 iàÐ(
sc
->
phydev
.
adv
 & 
GRETH_MII_10FD
) &&

376 (
sc
->
phydev
.
·¹
 & 
GRETH_MII_10FD
)) {

377 
sc
->
fd
 = 1;

381 
auto_Ãg_dÚe
:

382 
sc
->
phydev
.
vdÜ
 = 0;

383 
sc
->
phydev
.
deviû
 = 0;

384 
sc
->
phydev
.
»v
 = 0;

385 
phy¡©us
 = 
	`»ad_mii
(
phyaddr
, 1);

388 ià(
phy¡©us
 & 1) {

389 
tmp1
 = 
	`»ad_mii
(
phyaddr
, 2);

390 
tmp2
 = 
	`»ad_mii
(
phyaddr
, 3);

392 
sc
->
phydev
.
vdÜ
 = (
tmp1
 << 6è| ((
tmp2
 >> 10) & 0x3F);

393 
sc
->
phydev
.
»v
 = 
tmp2
 & 0xF;

394 
sc
->
phydev
.
deviû
 = (
tmp2
 >> 4) & 0x3F;

399 ià((
phy¡©us
 & 1è&& (
sc
->
phydev
.
vdÜ
 =ð0x005043è&& (sc->phydev.
deviû
 == 0x0C)) {

400 ià(((
sc
->
gb
è&& !(sc->
gb_mac
)è|| !((
phyù¾
 >> 12) & 1)) {

401 
	`wre_mii
(
phyaddr
, 0, 
sc
->
¥
 << 13);

402 
	`wre_mii
(
phyaddr
, 0, 0x8000);

403 
sc
->
gb
 = 0;

404 
sc
->
¥
 = 0;

405 
sc
->
fd
 = 0;

408 ià(((
sc
->
gb
è&& !(sc->
gb_mac
)è|| !((
phyù¾
 >> 12) & 1)) {

409 
	`wre_mii
(
phyaddr
, 0, 
sc
->
¥
 << 13);

410 
sc
->
gb
 = 0;

411 
sc
->
¥
 = 0;

412 
sc
->
fd
 = 0;

415 (
	`»ad_mii
(
phyaddr
, 0)) & 0x8000) {}

417 
»gs
->
ù¾
 = 0;

418 
»gs
->
ù¾
 = 
GRETH_CTRL_RST
;

419 
»gs
->
ù¾
 = 0;

422 
sc
->
txdesc
 = (
g»th_rxtxdesc
 *è
	`®m®loc
(1024);

423 
sc
->
rxdesc
 = (
g»th_rxtxdesc
 *è
	`®m®loc
(1024);

424 
sc
->
tx_±r
 = 0;

425 
sc
->
tx_d±r
 = 0;

426 
sc
->
tx_út
 = 0;

427 
sc
->
rx_±r
 = 0;

428 
»gs
->
txdesc
 = (
u_t
è
sc
->txdesc;

429 
»gs
->
rxdesc
 = (
u_t
è
sc
->rxdesc;

431 
sc
->
rxmbuf
 = 
	`ÿÎoc
(sc->
rxbufs
, (*sc->rxmbuf));

432 
sc
->
txmbuf
 = 
	`ÿÎoc
(sc->
txbufs
, (*sc->txmbuf));

434 
i
 = 0; i < 
sc
->
txbufs
; i++)

436 
sc
->
txdesc
[
i
].
ù¾
 = 0;

437 ià(!(
sc
->
gb_mac
)) {

438 
sc
->
txdesc
[
i
].
addr
 = 
	`m®loc
(
GRETH_MAXBUF_LEN
);

440 #ifdeà
GRETH_DEBUG


444 
i
 = 0; i < 
sc
->
rxbufs
; i++)

447 
	`MGETHDR
 (
m
, 
M_WAIT
, 
MT_DATA
);

448 
	`MCLGET
 (
m
, 
M_WAIT
);

449 ià(
sc
->
gb_mac
)

450 
m
->
m_d©a
 += 2;

451 
m
->
m_pkthdr
.
rcvif
 = &
sc
->
¬pcom
.
ac_if
;

452 
sc
->
rxmbuf
[
i
] = 
m
;

453 
sc
->
rxdesc
[
i
].
addr
 = (
ut32_t
 *è
	`mtod
(
m
, uint32_t *);

454 
sc
->
rxdesc
[
i
].
ù¾
 = 
GRETH_RXD_ENABLE
 | 
GRETH_RXD_IRQ
;

455 #ifdeà
GRETH_DEBUG


459 
sc
->
rxdesc
[sc->
rxbufs
 - 1].
ù¾
 |ð
GRETH_RXD_WRAP
;

462 
»gs
->
mac_addr_msb
 =

463 
sc
->
¬pcom
.
ac_addr
[0] << 8 | sc->arpcom.ac_enaddr[1];

465 
ut32_t
 
mac_addr_lsb
;

466 
mac_addr_lsb
 = 
sc
->
¬pcom
.
ac_addr
[2];

467 
mac_addr_lsb
 <<= 8;

468 
mac_addr_lsb
 |ð
sc
->
¬pcom
.
ac_addr
[3];

469 
mac_addr_lsb
 <<= 8;

470 
mac_addr_lsb
 |ð
sc
->
¬pcom
.
ac_addr
[4];

471 
mac_addr_lsb
 <<= 8;

472 
mac_addr_lsb
 |ð
sc
->
¬pcom
.
ac_addr
[5];

473 
»gs
->
mac_addr_lsb
 = mac_addr_lsb;

475 iàÐ
sc
->
rxbufs
 < 10 ) {

476 
sc
->
tx_t_g
 = sc->
tx_t_g_cur
 = 1;

478 
sc
->
tx_t_g
 = sc->
tx_t_g_cur
 = sc->
txbufs
/2;

480 
sc
->
Ãxt_tx_mbuf
 = 
NULL
;

482 iàÐ!
sc
->
gb_mac
 )

483 
sc
->
max_äagsize
 = 1;

486 
»gs
->
¡©us
 = 0xffffffff;

489 
	`¹ems_¼u±_hªdËr_¡®l
(
sc
->
veùÜ
, "g»th", 
RTEMS_INTERRUPT_SHARED
,

490 
g»th_¼u±_hªdËr
, 
sc
);

492 
»gs
->
ù¾
 |ð
GRETH_CTRL_RXEN
 | (
sc
->
fd
 << 4è| 
GRETH_CTRL_RXIRQ
 | (sc->
¥
 << 7è| (sc->
gb
 << 8);

494 
	`´t__fo
(
sc
);

495 
	}
}

497 #ifdeà
CPU_U32_FIX


509 
	$®ign
(
mbuf
 *
m
)

511 *
f¡
, *
Ï¡
, 
d©a
;

512 
tmp
;

514 ià((((è
m
->
m_d©a
è& 2è&& (m->
m_Ën
)) {

515 
Ï¡
 = (*è((((è
m
->
m_d©a
è+ m->
m_Ën
 + 8) & ~3);

516 
f¡
 = (*è(((è
m
->
m_d©a
) & ~3);

517 
tmp
 = 
	`GRETH_MEM_LOAD
(
f¡
);

518 
tmp
 =mp << 16;

519 
f¡
++;

525 
d©a
 = 
	`GRETH_MEM_LOAD
(
f¡
);

526 *
f¡
 = 
tmp
 | (
d©a
 >> 16);

527 
tmp
 = 
d©a
 << 16;

528 
f¡
++;

529 } 
f¡
 <ð
Ï¡
);

531 
m
->
m_d©a
 = (
ÿddr_t
)((() m->m_data) + 2);

533 
	}
}

537 
	$g»th_D«mÚ
 (*
¬g
)

539 
h_hd
 *
eh
;

540 
g»th_soác
 *
dp
 = (g»th_soáø*è&
g»th
;

541 
iâ
 *
iå
 = &
dp
->
¬pcom
.
ac_if
;

542 
mbuf
 *
m
;

543 
Ën
, 
Ën_¡©us
, 
bad
;

544 
¹ems_evt_£t
 
evts
;

545 
¹ems_¼u±_Ëv
 
Ëv
;

546 
f¡
;

547 #ifdeà
CPU_U32_FIX


548 
tmp
;

553 
	`¹ems_bsdÃt_evt_»ûive
 (
INTERRUPT_EVENT
 | 
GRETH_TX_WAIT_EVENT
,

554 
RTEMS_WAIT
 | 
RTEMS_EVENT_ANY
,

555 
RTEMS_NO_TIMEOUT
, &
evts
);

557 iàÐ
evts
 & 
GRETH_TX_WAIT_EVENT
 ){

562 iàÐ
dp
->
gb_mac
 )

563 
	`g»th_´oûss_tx_gb
(
dp
);

565 
	`g»th_´oûss_tx
(
dp
);

568 iàÐ(
evts
 & 
INTERRUPT_EVENT
) == 0 )

572 #ifdeà
GRETH_ETH_DEBUG


573 
	`´tf
 ("r\n");

575 
f¡
=1;

577 
aga
:

578 !((
Ën_¡©us
 =

579 
	`GRETH_MEM_LOAD
(&
dp
->
rxdesc
[dp->
rx_±r
].
ù¾
)è& 
GRETH_RXD_ENABLE
))

581 
bad
 = 0;

582 ià(
Ën_¡©us
 & 
GRETH_RXD_TOOLONG
)

584 
dp
->
rxLgthE¼Ü
++;

585 
bad
 = 1;

587 ià(
Ën_¡©us
 & 
GRETH_RXD_DRIBBLE
)

589 
dp
->
rxNÚOù
++;

590 
bad
 = 1;

592 ià(
Ën_¡©us
 & 
GRETH_RXD_CRCERR
)

594 
dp
->
rxBadCRC
++;

595 
bad
 = 1;

597 ià(
Ën_¡©us
 & 
GRETH_RXD_OVERRUN
)

599 
dp
->
rxOvrun
++;

600 
bad
 = 1;

602 ià(
Ën_¡©us
 & 
GRETH_RXD_LENERR
)

604 
dp
->
rxLgthE¼Ü
++;

605 
bad
 = 1;

607 ià(!
bad
)

610 
Ën
 = 
Ën_¡©us
 & 0x7FF;

611 
m
 = 
dp
->
rxmbuf
[dp->
rx_±r
];

612 #ifdeà
GRETH_DEBUG


613 
i
;

614 
	`´tf
("RX: 0x%08x, L: %d : ", (è
m
->
m_d©a
, 
Ën
);

615 
i
=0; i<
Ën
; i++)

616 
	`´tf
("%x%x", (
m
->
m_d©a
[
i
] >> 4) & 0x0ff, m->m_data[i] & 0x0ff);

617 
	`´tf
("\n");

619 
m
->
m_Ën
 = m->
m_pkthdr
.
Ën
 =

620 
Ën
 -  (
h_hd
);

622 
eh
 = 
	`mtod
 (
m
, 
h_hd
 *);

624 
m
->
m_d©a
 +ð (
h_hd
);

625 #ifdeà
CPU_U32_FIX


626 if(!
dp
->
gb_mac
) {

628 
tmp
 = 
	`GRETH_MEM_LOAD
((
u_t
)
eh
);

629 
tmp
 = 
	`GRETH_MEM_LOAD
(4+(
u_t
)
eh
);

630 
tmp
 = 
	`GRETH_MEM_LOAD
(8+(
u_t
)
eh
);

631 
tmp
 = 
	`GRETH_MEM_LOAD
(12+(
u_t
)
eh
);

632 ()
tmp
;

633 
	`®ign
(
m
);

637 
	`h_put
 (
iå
, 
eh
, 
m
);

638 
	`MGETHDR
 (
m
, 
M_WAIT
, 
MT_DATA
);

639 
	`MCLGET
 (
m
, 
M_WAIT
);

640 ià(
dp
->
gb_mac
)

641 
m
->
m_d©a
 += 2;

642 
dp
->
rxmbuf
[dp->
rx_±r
] = 
m
;

643 
m
->
m_pkthdr
.
rcvif
 = 
iå
;

644 
dp
->
rxdesc
[dp->
rx_±r
].
addr
 =

645 (
ut32_t
 *è
	`mtod
 (
m
, uint32_t *);

646 
dp
->
rxPacks
++;

648 ià(
dp
->
rx_±r
 =ðdp->
rxbufs
 - 1) {

649 
dp
->
rxdesc
[dp->
rx_±r
].
ù¾
 = 
GRETH_RXD_ENABLE
 | 
GRETH_RXD_IRQ
 | 
GRETH_RXD_WRAP
;

651 
dp
->
rxdesc
[dp->
rx_±r
].
ù¾
 = 
GRETH_RXD_ENABLE
 | 
GRETH_RXD_IRQ
;

653 
	`¹ems_¼u±_di§bË
(
Ëv
);

654 
dp
->
»gs
->
ù¾
 |ð
GRETH_CTRL_RXEN
;

655 
	`¹ems_¼u±_abË
(
Ëv
);

656 
dp
->
rx_±r
 = (dp->rx_±¸+ 1è% dp->
rxbufs
;

660 iàÐ
f¡
 ){

661 
f¡
=0;

662 
	`¹ems_¼u±_di§bË
(
Ëv
);

663 
dp
->
»gs
->
ù¾
 |ð
GRETH_CTRL_RXIRQ
;

664 
	`¹ems_¼u±_abË
(
Ëv
);

665 
aga
;

670 
	}
}

672 
	gside
 = 0;

674 
	$£nd·ck
 (
iâ
 *
iå
, 
mbuf
 *
m
)

676 
g»th_soác
 *
dp
 = 
iå
->
if_soác
;

677 *
mp
;

678 
mbuf
 *
n
;

679 
Ën
;

680 
¹ems_¼u±_Ëv
 
Ëv
;

683 ià(
side
è
	`´tf
 ("error: sendpackete-entered!!\n");

684 
side
 = 1;

689 ià(
	`GRETH_MEM_LOAD
(&
dp
->
txdesc
[dp->
tx_±r
].
ù¾
è& 
GRETH_TXD_ENABLE
){

691 
side
 = 0;

696 
n
 = 
m
;

698 
Ën
 = 0;

699 
mp
 = (*è
	`GRETH_MEM_LOAD
(&
dp
->
txdesc
[dp->
tx_±r
].
addr
);

700 #ifdeà
GRETH_DEBUG


701 
	`´tf
("TXD: 0x%08x : BUF: 0x%08x\n", (è
m
->
m_d©a
, (è
mp
);

705 #ifdeà
GRETH_DEBUG


706 
i
;

707 
	`´tf
("MBUF: 0x%08x : ", (è
m
->
m_d©a
);

708 
i
=0;i<
m
->
m_Ën
;i++)

709 
	`´tf
("%x%x", (
m
->
m_d©a
[
i
] >> 4) & 0x0ff, m->m_data[i] & 0x0ff);

710 
	`´tf
("\n");

712 
Ën
 +ð
m
->
m_Ën
;

713 ià(
Ën
 <ð
RBUF_SIZE
)

714 
	`memýy
 ((*è
mp
, (*è
m
->
m_d©a
, m->
m_Ën
);

715 
mp
 +ð
m
->
m_Ën
;

716 ià((
m
 = m->
m_Ãxt
è=ð
NULL
)

720 
	`m_äm
 (
n
);

724 ià(
Ën
 <ð
GRETH_MAXBUF_LEN
) {

725 ià(
dp
->
tx_±r
 < dp->
txbufs
-1) {

726 
dp
->
txdesc
[dp->
tx_±r
].
ù¾
 = 
GRETH_TXD_ENABLE
 | 
Ën
;

728 
dp
->
txdesc
[dp->
tx_±r
].
ù¾
 =

729 
GRETH_TXD_WRAP
 | 
GRETH_TXD_ENABLE
 | 
Ën
;

731 
dp
->
tx_±r
 = (dp->tx_±¸+ 1è% dp->
txbufs
;

732 
	`¹ems_¼u±_di§bË
(
Ëv
);

733 
dp
->
»gs
->
ù¾
 = dp->»gs->ù¾ | 
GRETH_CTRL_TXEN
;

734 
	`¹ems_¼u±_abË
(
Ëv
);

737 
side
 = 0;

740 
	}
}

744 
	$£nd·ck_gb
 (
iâ
 *
iå
, 
mbuf
 *
m
)

746 
g»th_soác
 *
dp
 = 
iå
->
if_soác
;

747 
Ën
;

749 
ù¾
;

750 
äags
;

751 
mbuf
 *
mtmp
;

752 
t_
;

753 
¹ems_¼u±_Ëv
 
Ëv
;

755 ià(
side
è
	`´tf
 ("error: sendpackete-entered!!\n");

756 
side
 = 1;

758 
Ën
 = 0;

759 #ifdeà
GRETH_DEBUG


760 
	`´tf
("TXD: 0x%08x\n", (è
m
->
m_d©a
);

765 
äags
=1;

766 
mtmp
=
m
;

767 
mtmp
->
m_Ãxt
){

768 
äags
++;

769 
mtmp
 = mtmp->
m_Ãxt
;

772 iàÐ
äags
 > 
dp
->
max_äagsize
 )

773 
dp
->
max_äagsize
 = 
äags
;

775 iàÐ
äags
 > 
dp
->
txbufs
 ){

776 
side
 = 0;

777 
	`´tf
("GRETH: MBUF-chain cannot be sent. Increase descriptor count.\n");

781 iàÐ
äags
 > (
dp
->
txbufs
-dp->
tx_út
) ){

782 
side
 = 0;

784  
äags
;

793 
dp
->
tx_t_g_cur
-=
äags
;

794 iàÐ
dp
->
tx_t_g_cur
 <= 0 ){

795 
dp
->
tx_t_g_cur
 = dp->
tx_t_g
;

796 
t_
 = 
GRETH_TXD_IRQ
;

798 
t_
 = 0;

805 #ifdeà
GRETH_DEBUG


806 
i
;

807 
	`´tf
("MBUF: 0x%08x, L: %d : ", (è
m
->
m_d©a
, m->
m_Ën
);

808 
i
=0; i<
m
->
m_Ën
; i++)

809 
	`´tf
("%x%x", (
m
->
m_d©a
[
i
] >> 4) & 0x0ff, m->m_data[i] & 0x0ff);

810 
	`´tf
("\n");

812 
Ën
 +ð
m
->
m_Ën
;

813 
dp
->
txdesc
[dp->
tx_±r
].
addr
 = (
ut32_t
 *)
m
->
m_d©a
;

816 ià(
dp
->
tx_±r
 < dp->
txbufs
-1) {

817 
ù¾
 = 
GRETH_TXD_ENABLE
;

819 
ù¾
 = 
GRETH_TXD_ENABLE
 | 
GRETH_TXD_WRAP
;

823 ià((
m
->
m_Ãxt
è=ð
NULL
) {

824 
dp
->
txdesc
[dp->
tx_±r
].
ù¾
 = cÈ| 
t_
 | 
m
->
m_Ën
;

827 
dp
->
txdesc
[dp->
tx_±r
].
ù¾
 = 
GRETH_TXD_MORE
 | cÈ| 
t_
 | 
m
->
m_Ën
;

831 
dp
->
txmbuf
[dp->
tx_±r
] = 
m
;

832 
dp
->
tx_±r
 = (dp->tx_±¸+ 1è% dp->
txbufs
;

833 
dp
->
tx_út
++;

834 
m
 = m->
m_Ãxt
;

836 
dp
->
txmbuf
[dp->
tx_±r
] = 
m
;

837 
dp
->
tx_±r
 = (dp->tx_±¸+ 1è% dp->
txbufs
;

838 
dp
->
tx_út
++;

841 
	`¹ems_¼u±_di§bË
(
Ëv
);

842 
dp
->
»gs
->
ù¾
 = dp->»gs->ù¾ | 
GRETH_CTRL_TXEN
;

843 
	`¹ems_¼u±_abË
(
Ëv
);

845 
side
 = 0;

848 
	}
}

850 
	$g»th_´oûss_tx_gb
(
g»th_soác
 *
sc
)

852 
iâ
 *
iå
 = &
sc
->
¬pcom
.
ac_if
;

853 
mbuf
 *
m
;

854 
¹ems_¼u±_Ëv
 
Ëv
;

855 
f¡
=1;

862 (
sc
->
tx_út
 > 0è&& !(
	`GRETH_MEM_LOAD
(&sc->
txdesc
[sc->
tx_d±r
].
ù¾
è& 
GRETH_TXD_ENABLE
)) {

863 
	`m_ä
(
sc
->
txmbuf
[sc->
tx_d±r
]);

864 
sc
->
tx_d±r
 = (sc->tx_d±¸+ 1è% sc->
txbufs
;

865 
sc
->
tx_út
--;

868 iàÐ
sc
->
Ãxt_tx_mbuf
 ){

870 
m
 = 
sc
->
Ãxt_tx_mbuf
;

871 
sc
->
Ãxt_tx_mbuf
 = 
NULL
;

876 
	`IF_DEQUEUE
 (&
iå
->
if_¢d
, 
m
);

877 ià(!
m
){

882 
iå
->
if_æags
 &ð~
IFF_OACTIVE
;

889 iàÐ(
sc
->
tx_út
 >ðsc->
txbufs
è|| 
	`£nd·ck_gb
(
iå
, 
m
) ){

896 
sc
->
Ãxt_tx_mbuf
 = 
m
;

902 iàÐ
f¡
 ){

903 
f¡
 = 0;

904 
	`¹ems_¼u±_di§bË
(
Ëv
);

905 
iå
->
if_æags
 |ð
IFF_OACTIVE
;

906 
sc
->
»gs
->
ù¾
 |ð
GRETH_CTRL_TXIRQ
;

907 
	`¹ems_¼u±_abË
(
Ëv
);

922 
	}
}

924 
	$g»th_´oûss_tx
(
g»th_soác
 *
sc
)

926 
iâ
 *
iå
 = &
sc
->
¬pcom
.
ac_if
;

927 
mbuf
 *
m
;

928 
¹ems_¼u±_Ëv
 
Ëv
;

929 
f¡
=1;

935 iàÐ
sc
->
Ãxt_tx_mbuf
 ){

937 
m
 = 
sc
->
Ãxt_tx_mbuf
;

938 
sc
->
Ãxt_tx_mbuf
 = 
NULL
;

943 
	`IF_DEQUEUE
 (&
iå
->
if_¢d
, 
m
);

944 ià(!
m
){

949 
iå
->
if_æags
 &ð~
IFF_OACTIVE
;

955 iàÐ
	`£nd·ck
(
iå
, 
m
) ){

962 
sc
->
Ãxt_tx_mbuf
 = 
m
;

968 iàÐ
f¡
 ){

969 
f¡
 = 0;

970 
	`¹ems_¼u±_di§bË
(
Ëv
);

971 
iå
->
if_æags
 |ð
IFF_OACTIVE
;

972 
sc
->
»gs
->
ù¾
 |ð
GRETH_CTRL_TXIRQ
;

973 
	`¹ems_¼u±_abË
(
Ëv
);

988 
	}
}

991 
	$g»th_¡¬t
 (
iâ
 *
iå
)

993 
g»th_soác
 *
sc
 = 
iå
->
if_soác
;

995 iàÐ
iå
->
if_æags
 & 
IFF_OACTIVE
 )

998 iàÐ
sc
->
gb_mac
 ){

1003 
	`g»th_´oûss_tx_gb
(
sc
);

1005 
	`g»th_´oûss_tx
(
sc
);

1007 
	}
}

1013 
	$g»th_
 (*
¬g
)

1015 
g»th_soác
 *
sc
 = 
¬g
;

1016 
iâ
 *
iå
 = &
sc
->
¬pcom
.
ac_if
;

1018 ià(
sc
->
d«mÚTid
 == 0) {

1023 
sc
->
d«mÚTid
 = 
	`¹ems_bsdÃt_Ãw´oc
 ("DCrxtx", 4096,

1024 
g»th_D«mÚ
, 
sc
);

1029 
	`g»th_lize_h¬dw¬e
 (
sc
);

1036 
iå
->
if_æags
 |ð
IFF_RUNNING
;

1037 
	}
}

1043 
	$g»th_¡Ý
 (
g»th_soác
 *
sc
)

1045 
iâ
 *
iå
 = &
sc
->
¬pcom
.
ac_if
;

1047 
iå
->
if_æags
 &ð~
IFF_RUNNING
;

1049 
sc
->
»gs
->
ù¾
 = 0;

1050 
sc
->
»gs
->
ù¾
 = 
GRETH_CTRL_RST
;

1051 
sc
->
»gs
->
ù¾
 = 0;

1053 
sc
->
Ãxt_tx_mbuf
 = 
NULL
;

1054 
	}
}

1061 
	$g»th_¡©s
 (
g»th_soác
 *
sc
)

1063 
	`´tf
 (" Rx IÁru±s:%-8lu", 
sc
->
rxIÁru±s
);

1064 
	`´tf
 (" Rx Packs:%-8lu", 
sc
->
rxPacks
);

1065 
	`´tf
 (" Lgth:%-8lu", 
sc
->
rxLgthE¼Ü
);

1066 
	`´tf
 (" NÚ-où:%-8lu\n", 
sc
->
rxNÚOù
);

1067 
	`´tf
 (" Bad CRC:%-8lu", 
sc
->
rxBadCRC
);

1068 
	`´tf
 (" Ovrun:%-8lu", 
sc
->
rxOvrun
);

1069 
	`´tf
 (" Tx IÁru±s:%-8lu", 
sc
->
txIÁru±s
);

1070 
	`´tf
 (" Maxim® F¿gs:%-8d", 
sc
->
max_äagsize
);

1071 
	`´tf
 (" GBIT MAC:%-8d", 
sc
->
gb_mac
);

1072 
	}
}

1078 
	$g»th_ioùl
 (
iâ
 *
iå
, 
ioùl_commªd_t
 
commªd
, 
ÿddr_t
 
d©a
)

1080 
g»th_soác
 *
sc
 = 
iå
->
if_soác
;

1081 
rÜ
 = 0;

1083 
commªd
)

1085 
SIOCGIFADDR
:

1086 
SIOCSIFADDR
:

1087 
	`h_ioùl
 (
iå
, 
commªd
, 
d©a
);

1090 
SIOCSIFFLAGS
:

1091 
iå
->
if_æags
 & (
IFF_UP
 | 
IFF_RUNNING
))

1093 
IFF_RUNNING
:

1094 
	`g»th_¡Ý
 (
sc
);

1097 
IFF_UP
:

1098 
	`g»th_
 (
sc
);

1101 
IFF_UP
 | 
IFF_RUNNING
:

1102 
	`g»th_¡Ý
 (
sc
);

1103 
	`g»th_
 (
sc
);

1110 
SIO_RTEMS_SHOW_STATS
:

1111 
	`g»th_¡©s
 (
sc
);

1118 
rÜ
 = 
EINVAL
;

1122  
rÜ
;

1123 
	}
}

1129 
	$¹ems_g»th_driv_©ch
 (
¹ems_bsdÃt_ifcÚfig
 *
cÚfig
,

1130 
g»th_cÚfigu¿tiÚ_t
 *
ch
)

1132 
g»th_soác
 *
sc
;

1133 
iâ
 *
iå
;

1134 
mtu
;

1135 
unNumb
;

1136 *
unName
;

1139 ià((
unNumb
 = 
	`¹ems_bsdÃt_·r£_driv_Çme
 (
cÚfig
, &
unName
)) < 0)

1142 
sc
 = &
g»th
;

1143 
iå
 = &
sc
->
¬pcom
.
ac_if
;

1144 
	`mem£t
 (
sc
, 0,  (*sc));

1146 ià(
cÚfig
->
h¬dw¬e_add»ss
)

1148 
	`memýy
 (
sc
->
¬pcom
.
ac_addr
, 
cÚfig
->
h¬dw¬e_add»ss
,

1149 
ETHER_ADDR_LEN
);

1153 
	`mem£t
 (
sc
->
¬pcom
.
ac_addr
, 0x08, 
ETHER_ADDR_LEN
);

1156 ià(
cÚfig
->
mtu
)

1157 
mtu
 = 
cÚfig
->mtu;

1159 
mtu
 = 
ETHERMTU
;

1161 
sc
->
acû±Brßdÿ¡
 = !
cÚfig
->
ignÜe_brßdÿ¡
;

1162 
sc
->
»gs
 = 
ch
->
ba£_add»ss
;

1163 
sc
->
veùÜ
 = 
ch
->vector;

1164 
sc
->
txbufs
 = 
ch
->
txd_couÁ
;

1165 
sc
->
rxbufs
 = 
ch
->
rxd_couÁ
;

1170 
iå
->
if_soác
 = 
sc
;

1171 
iå
->
if_un
 = 
unNumb
;

1172 
iå
->
if_Çme
 = 
unName
;

1173 
iå
->
if_mtu
 = 
mtu
;

1174 
iå
->
if_
 = 
g»th_
;

1175 
iå
->
if_ioùl
 = 
g»th_ioùl
;

1176 
iå
->
if_¡¬t
 = 
g»th_¡¬t
;

1177 
iå
->
if_ouut
 = 
h_ouut
;

1178 
iå
->
if_æags
 = 
IFF_BROADCAST
 | 
IFF_SIMPLEX
;

1179 ià(
iå
->
if_¢d
.
ifq_maxËn
 == 0)

1180 
iå
->
if_¢d
.
ifq_maxËn
 = 
ifqmaxËn
;

1185 
	`if_©ch
 (
iå
);

1186 
	`h_içach
 (
iå
);

1188 #ifdeà
GRETH_DEBUG


1189 
	`´tf
 ("GRETH : driver has beenttached\n");

1192 
	}
};

	@src/libchip/network/greth.h

11 #iâdeà
_GR_ETH_


12 
	#_GR_ETH_


	)

18 *
	mba£_add»ss
;

19 
¹ems_veùÜ_numb
 
	mveùÜ
;

20 
ut32_t
 
	mtxd_couÁ
;

21 
ut32_t
 
	mrxd_couÁ
;

22 } 
	tg»th_cÚfigu¿tiÚ_t
;

26 
	s_g»th_»gs
 {

27 vÞ©
ut32_t
 
	mù¾
;

28 vÞ©
ut32_t
 
	m¡©us
;

29 vÞ©
ut32_t
 
	mmac_addr_msb
;

30 vÞ©
ut32_t
 
	mmac_addr_lsb
;

31 vÞ©
ut32_t
 
	mmdio_ù¾
;

32 vÞ©
ut32_t
 
	mtxdesc
;

33 vÞ©
ut32_t
 
	mrxdesc
;

34 } 
	tg»th_»gs
;

36 
	#GRETH_TOTAL_BD
 128

	)

37 
	#GRETH_MAXBUF_LEN
 1520

	)

40 
	#GRETH_TXD_ENABLE
 0x0800

	)

41 
	#GRETH_TXD_WRAP
 0x1000

	)

42 
	#GRETH_TXD_IRQ
 0x2000

	)

43 
	#GRETH_TXD_MORE
 0x20000

	)

44 
	#GRETH_TXD_IPCS
 0x40000

	)

45 
	#GRETH_TXD_TCPCS
 0x80000

	)

46 
	#GRETH_TXD_UDPCS
 0x100000

	)

48 
	#GRETH_TXD_UNDERRUN
 0x4000

	)

49 
	#GRETH_TXD_RETLIM
 0x8000

	)

50 
	#GRETH_TXD_LATECOL
 0x10000

	)

52 
	#GRETH_TXD_STATS
 (
GRETH_TXD_UNDERRUN
 | \

53 
GRETH_TXD_RETLIM
 | \

54 
GRETH_TXD_LATECOL
)

	)

56 
	#GRETH_TXD_CS
 (
GRETH_TXD_IPCS
 | \

57 
GRETH_TXD_TCPCS
 | \

58 
GRETH_TXD_UDPCS
)

	)

61 
	#GRETH_RXD_ENABLE
 0x0800

	)

62 
	#GRETH_RXD_WRAP
 0x1000

	)

63 
	#GRETH_RXD_IRQ
 0x2000

	)

65 
	#GRETH_RXD_DRIBBLE
 0x4000

	)

66 
	#GRETH_RXD_TOOLONG
 0x8000

	)

67 
	#GRETH_RXD_CRCERR
 0x10000

	)

68 
	#GRETH_RXD_OVERRUN
 0x20000

	)

69 
	#GRETH_RXD_LENERR
 0x40000

	)

70 
	#GRETH_RXD_ID
 0x40000

	)

71 
	#GRETH_RXD_IR
 0x40000

	)

72 
	#GRETH_RXD_UD
 0x40000

	)

73 
	#GRETH_RXD_UR
 0x40000

	)

74 
	#GRETH_RXD_TD
 0x40000

	)

75 
	#GRETH_RXD_TR
 0x40000

	)

78 
	#GRETH_RXD_STATS
 (
GRETH_RXD_OVERRUN
 | \

79 
GRETH_RXD_DRIBBLE
 | \

80 
GRETH_RXD_TOOLONG
 | \

81 
GRETH_RXD_CRCERR
)

	)

84 
	#GRETH_CTRL_TXEN
 0x00000001

	)

85 
	#GRETH_CTRL_RXEN
 0x00000002

	)

86 
	#GRETH_CTRL_TXIRQ
 0x00000004

	)

87 
	#GRETH_CTRL_RXIRQ
 0x00000008

	)

88 
	#GRETH_CTRL_FULLD
 0x00000010

	)

89 
	#GRETH_CTRL_PRO
 0x00000020

	)

90 
	#GRETH_CTRL_RST
 0x00000040

	)

93 
	#GRETH_STATUS_RXERR
 0x00000001

	)

94 
	#GRETH_STATUS_TXERR
 0x00000002

	)

95 
	#GRETH_STATUS_RXIRQ
 0x00000004

	)

96 
	#GRETH_STATUS_TXIRQ
 0x00000008

	)

97 
	#GRETH_STATUS_RXAHBERR
 0x00000010

	)

98 
	#GRETH_STATUS_TXAHBERR
 0x00000020

	)

101 
	#GRETH_MDIO_WRITE
 0x00000001

	)

102 
	#GRETH_MDIO_READ
 0x00000002

	)

103 
	#GRETH_MDIO_LINKFAIL
 0x00000004

	)

104 
	#GRETH_MDIO_BUSY
 0x00000008

	)

105 
	#GRETH_MDIO_REGADR
 0x000007C0

	)

106 
	#GRETH_MDIO_PHYADR
 0x0000F800

	)

107 
	#GRETH_MDIO_DATA
 0xFFFF0000

	)

111 
	#GRETH_MII_EXTADV_1000FD
 0x00000200

	)

112 
	#GRETH_MII_EXTADV_1000HD
 0x00000100

	)

113 
	#GRETH_MII_EXTPRT_1000FD
 0x00000800

	)

114 
	#GRETH_MII_EXTPRT_1000HD
 0x00000400

	)

116 
	#GRETH_MII_100T4
 0x00000200

	)

117 
	#GRETH_MII_100TXFD
 0x00000100

	)

118 
	#GRETH_MII_100TXHD
 0x00000080

	)

119 
	#GRETH_MII_10FD
 0x00000040

	)

120 
	#GRETH_MII_10HD
 0x00000020

	)

126 
¹ems_g»th_driv_©ch
 (

127 
¹ems_bsdÃt_ifcÚfig
 *
cÚfig
,

128 
g»th_cÚfigu¿tiÚ_t
 *
ch


132 
	sphy_deviû_fo


134 
	mvdÜ
;

135 
	mdeviû
;

136 
	m»v
;

138 
	madv
;

139 
	m·¹
;

141 
	mexdv
;

142 
	mex¬t
;

	@src/libchip/network/i82586.c

150 
	~<¹ems.h
>

151 
	~<¹ems/rÜ.h
>

152 
	~<¹ems/¹ems_bsdÃt.h
>

154 
	~<ùy³.h
>

155 
	~<¡dio.h
>

156 
	~<¡rg.h
>

157 
	~<ºo.h
>

159 
	~<sys/·¿m.h
>

160 
	~<sys/mbuf.h
>

161 
	~<sys/sock.h
>

162 
	~<sys/sockio.h
>

163 
	~<sys/ioùl.h
>

165 
	~<Ãt/hÃt.h
>

166 
	~<Ãt/if.h
>

167 
	~<Ãt/if_ty³s.h
>

168 
	~<Ãt/if_dl.h
>

170 
	~<Ãt/.h
>

171 
	~<Ãt/if_h.h
>

173 
	~"i82586»g.h
"

174 
	~"i82586v¬.h
"

176 #ià
defed
(
ALIGNBYTES
è&& defed(
ALIGN
)

179 #undeà
ALIGN


180 
	#ALIGN
(
p
è(((
u_t
)Õè+ 
ALIGNBYTES
è& ~ALIGNBYTES)

	)

182 
	#ALIGN
(
p
èÕ)

	)

189 
	#ASYNC_OPTION
 (1)

	)

191 
i82586_»£t
 (
_soác
 *, );

192 
i82586_w©chdog
 (
iâ
 *);

193 
i82586_
 (*);

194 
i82586_ioùl
 (
iâ
 *, 
ioùl_commªd_t
 
cmd
, 
ÿddr_t
 
d©a
);

195 
i82586_¡¬t
 (
iâ
 *);

197 
i82586_¡Ý
 (
iâ
 *, );

198 
i82586_rt
 (
_soác
 *, );

199 
i82586_tt
 (
_soác
 *, );

201 
i82586_medchªge
 (
iâ
 *);

202 
i82586_med¡©us
 (
iâ
 *, 
ifmed»q
 *);

204 
i82586_tx_sk
(*
¬g
);

205 
i82586_¡¬t_tx
(
_soác
 *
sc
);

207 
_»adäame
 (
_soác
 *, );

208 
mbuf
 *
g
 (
_soác
 *, , );

209 
i82586_g_rbd_li¡
 (
_soác
 *, 
u_t16_t
*,

210 
u_t16_t
*, *);

211 
i82586_»Ëa£_rbd_li¡
 (
_soác
 *,

212 
u_t16_t
, u_int16_t);

213 
i82586_drÝ_äames
 (
_soác
 *);

214 
i82586_chk_rx_rg
 (
_soác
 *);

216 
__le__
 
_ack
 (
_soác
 *, 
u_t
);

217 
__le__
 
xm
 (
_soác
 *);

218 
i82586_¡¬t_ªsûiv
 (
_soác
 *);

220 
i82586_couÁ_rÜs
 (
_soác
 *);

221 
i82586_rx_rÜs
 (
_soác
 *, , );

222 
i82586_£tup_bufs
 (
_soác
 *);

223 
£tup_sim¶e_commªd
 (
_soác
 *, , );

224 
_cfg_£tup
 (
_soác
 *, , , );

225 
__£tup
 (
_soác
 *, );

226 
_run_tdr
 (
_soác
 *, );

227 
_mc_£tup
 (
_soác
 *, );

228 
_mc_»£t
 (
_soác
 *);

229 
i82586_¡¬t_cmd
 (
_soác
 *, , , , );

230 
i82586_cmd_wa
 (
_soác
 *);

232 #ià
I82586_DEBUG


233 
´t_soá
(
_soác
 *
sc
);

234 
´t_rbd
 (
_soác
 *, );

237 
	#m
(
l
,
r
è(Öè< (rè? (lè: (r))

	)

238 
	#max
(
l
,
r
è(Öè> (rè? (lè: (r))

	)

240 
	#day
(
p
è
	`¹ems_sk_wake_aá
 (
	`RTEMS_MICROSECONDS_TO_TICKS
 (p))

	)

242 
	#i82586_WAKE_EVENT
 
RTEMS_EVENT_1


	)

243 
	#i82586_TX_EVENT
 
RTEMS_EVENT_2


	)

246 
	$bmask_¢´tf
(
v®ue
, cÚ¡ *
fÜm©
, *
buf
, 
bËn
)

248 *
b
 = 
buf
;

249 
b
 = 31;

251 
b
-- > *
fÜm©
)

252 
v®ue
 <<= 1;

254 
fÜm©
++;

256 *
fÜm©
)

258 ià(
v®ue
 & 0x80000000)

259 
	`i§Êum
(()*
fÜm©
))

260 *
b
++ = *
fÜm©
;

262 *
b
++ = '0';

264 *
b
++ = ',';

266 
b
-- > *
fÜm©
)

267 
v®ue
 <<= 1;

269 
fÜm©
++;

272 *
b
 = '\0';

273  
buf
;

274 
	}
}

299 
	$i82586_©ch
(
¹ems_bsdÃt_ifcÚfig
 *
cÚfig
, 
©chg
)

301 
_soác
 *
sc
;

302 
iâ
 *
iå
;

303 *
Çme
;

304 
un
;

305 
mtu
;

311 ià((
un
 = 
	`¹ems_bsdÃt_·r£_driv_Çme
 (
cÚfig
, &
Çme
)) < 0)

314 
sc
 = 
cÚfig
->
drv_ù¾
;

315 
iå
 = &
sc
->
¬pcom
.
ac_if
;

317 #ià
I82586_DEBUG


318 
sc
->
sc_debug
 = 0;

321 ià(
©chg
)

323 ià(
iå
->
if_soác
)

325 
	`´tf
 ("Driv `%s'Ìdy iÀu£.\n", 
cÚfig
->
Çme
);

333 
	`memýy
 (
sc
->
¬pcom
.
ac_addr
, 
cÚfig
->
h¬dw¬e_add»ss
, 
ETHER_ADDR_LEN
);

335 ià(
cÚfig
->
mtu
)

336 
mtu
 = 
cÚfig
->mtu;

338 
mtu
 = 
ETHERMTU
;

340 
iå
->
if_soác
 = 
sc
;

341 
iå
->
if_un
 = 
un
;

342 
iå
->
if_Çme
 = 
Çme
;

343 
iå
->
if_mtu
 = 
mtu
;

344 
iå
->
if_
 = 
i82586_
;

345 
iå
->
if_ioùl
 = 
i82586_ioùl
;

346 
iå
->
if_¡¬t
 = 
i82586_¡¬t
;

347 
iå
->
if_ouut
 = 
h_ouut
;

348 
iå
->
if_æags
 = 
IFF_BROADCAST
 | 
IFF_SIMPLEX
 | 
IFF_MULTICAST
;

350 ià(
iå
->
if_¢d
.
ifq_maxËn
 == 0)

351 
iå
->
if_¢d
.
ifq_maxËn
 = 
ifqmaxËn
;

354 
	`if_©ch
(
iå
);

355 
	`h_içach
(
iå
);

359 
	}
}

365 
__le__
 

366 
	$_ack
(
_soác
 *
sc
, 
u_t
 
mask
)

368 
u_t
 
¡©us
;

370 
	`IE_BUS_BARRIER
(
sc
, 0, 0, 
BUS_SPACE_BARRIER_READ
);

371 
¡©us
 = 
sc
->
	`_bus_»ad16
(sc, 
	`IE_SCB_STATUS
(sc->
scb
));

372 
	`i82586_¡¬t_cmd
(
sc
, 
¡©us
 & 
mask
, 0, 0, 0);

373 ià(
sc
->
hook
)

374 
sc
->
	`hook
(sc, 
INTR_ACK
);

375 
	}
}

388 
__le
 
mbuf
 *

389 
	$g
(
_soác
 *
sc
, 
hd
, 
tÙËn
)

391 
mbuf
 *
m
, *
m0
, *
Ãwm
;

392 
Ën
, 
»sid
;

393 
thi¤boff
, 
thismboff
;

394 
h_hd
 
eh
;

399 (
sc
->
memcÝy
)(sc, &
eh
, 
	`IE_RBUF_ADDR
(sc, 
hd
),

400 (
h_hd
));

402 
»sid
 = 
tÙËn
;

404 
	`MGETHDR
(
m0
, 
M_DONTWAIT
, 
MT_DATA
);

405 ià(
m0
 == 0)

407 
m0
->
m_pkthdr
.
rcvif
 = &
sc
->
¬pcom
.
ac_if
;

408 
m0
->
m_pkthdr
.
Ën
 = 
tÙËn
;

409 
Ën
 = 
MHLEN
;

410 
m
 = 
m0
;

416 
tÙËn
 > 0) {

417 ià(
tÙËn
 >ð
MINCLSIZE
) {

418 
	`MCLGET
(
m
, 
M_DONTWAIT
);

419 ià((
m
->
m_æags
 & 
M_EXT
) == 0)

420 
bad
;

421 
Ën
 = 
MCLBYTES
;

424 ià(
m
 =ð
m0
) {

425 
ÿddr_t
 
Ãwd©a
 = (caddr_t)

426 
	`ALIGN
(
m
->
m_d©a
 + (
h_hd
)) -

427 (
h_hd
);

428 
Ën
 -ð
Ãwd©a
 - 
m
->
m_d©a
;

429 
m
->
m_d©a
 = 
Ãwd©a
;

432 
m
->
m_Ën
 = 
Ën
 = 
	`m
(
tÙËn
,en);

434 
tÙËn
 -ð
Ën
;

435 ià(
tÙËn
 > 0) {

436 
	`MGET
(
Ãwm
, 
M_DONTWAIT
, 
MT_DATA
);

437 ià(
Ãwm
 == 0)

438 
bad
;

439 
Ën
 = 
MLEN
;

440 
m
 = m->
m_Ãxt
 = 
Ãwm
;

444 
m
 = 
m0
;

445 
thismboff
 = 0;

450 
	`memýy
(
	`mtod
(
m
, 
ÿddr_t
), &
eh
, (
h_hd
));

451 
thismboff
 = (
h_hd
);

452 
thi¤boff
 = (
h_hd
);

453 
»sid
 -ð(
h_hd
);

460 
»sid
 > 0) {

461 
thi¤bËn
 = 
IE_RBUF_SIZE
 - 
thi¤boff
,

462 
thismbËn
 = 
m
->
m_Ën
 - 
thismboff
;

463 
Ën
 = 
	`m
(
thi¤bËn
, 
thismbËn
);

465 (
sc
->
memcÝy
)(sc, 
	`mtod
(
m
, 
ÿddr_t
è+ 
thismboff
,

466 
	`IE_RBUF_ADDR
(
sc
,
hd
è+ 
thi¤boff
,

467 (
u_t
)
Ën
);

468 
»sid
 -ð
Ën
;

470 ià(
Ën
 =ð
thismbËn
) {

471 
m
 = m->
m_Ãxt
;

472 
thismboff
 = 0;

474 
thismboff
 +ð
Ën
;

476 ià(
Ën
 =ð
thi¤bËn
) {

477 ià(++
hd
 =ð
sc
->
Äxbuf
)

478 
hd
 = 0;

479 
thi¤boff
 = 0;

481 
thi¤boff
 +ð
Ën
;

489  (
m0
);

491 
bad
:

492 
	`m_äm
(
m0
);

494 
	}
}

500 
__le__
 

501 
	$xm
(
_soác
 *
sc
)

503 
off
;

504 
cur
, 
´ev
;

506 
cur
 = 
sc
->
xùa
;

508 #ià
I82586_DEBUG


509 
	`I82586_TRACE
(
sc
, 
I82586_TX_EMIT
, 
cur
);

512 #ià
I82586_DEBUG


513 ià(
sc
->
sc_debug
 & 
IED_XMIT
)

514 
	`´tf
("%s: xm bufã¸%d\n", 
sc
->
¬pcom
.
ac_if
.
if_Çme
, 
cur
);

520 
sc
->
	`_bus_wre16
(sc, 
	`IE_CMD_XMIT_DESC
(sc->
xm_cmds
, 
cur
),

521 
	`IE_XBD_ADDR
(
sc
->
xbds
, 
cur
));

523 
sc
->
	`_bus_wre16
(sc, 
	`IE_CMD_XMIT_STATUS
(sc->
xm_cmds
, 
cur
), 0);

525 ià(
sc
->
do_xmnÝcha
) {

529 
sc
->
	`_bus_wre16
(sc, 
	`IE_CMD_XMIT_LINK
(sc->
xm_cmds
, 
cur
),

530 
	`IE_CMD_NOP_ADDR
(
sc
->
nÝ_cmds
, 
cur
));

531 
sc
->
	`_bus_wre16
(sc, 
	`IE_CMD_XMIT_CMD
(sc->
xm_cmds
, 
cur
),

532 
IE_CMD_XMIT
 | 
IE_CMD_INTR
);

537 
sc
->
	`_bus_wre16
(sc, 
	`IE_CMD_NOP_STATUS
(sc->
nÝ_cmds
, 
cur
), 0);

538 
sc
->
	`_bus_wre16
(sc, 
	`IE_CMD_NOP_LINK
(sc->
nÝ_cmds
, 
cur
),

539 
	`IE_CMD_NOP_ADDR
(
sc
->
nÝ_cmds
, 
cur
));

544 
´ev
 = (
cur
 + 
NTXBUF
 - 1) % NTXBUF;

545 
sc
->
	`_bus_wre16
(sc, 
	`IE_CMD_NOP_STATUS
(sc->
nÝ_cmds
, 
´ev
), 0);

546 
sc
->
	`_bus_wre16
(sc, 
	`IE_CMD_NOP_LINK
(sc->
nÝ_cmds
, 
´ev
),

547 
	`IE_CMD_XMIT_ADDR
(
sc
->
xm_cmds
, 
cur
));

549 
off
 = 
	`IE_SCB_STATUS
(
sc
->
scb
);

550 
	`IE_BUS_BARRIER
(
sc
, 
off
, 2, 
BUS_SPACE_BARRIER_READ
);

551 ià((
sc
->
	`_bus_»ad16
(sc, 
off
è& 
IE_CUS_ACTIVE
) == 0) {

552 
	`´tf
("iexmit: CUotctive\n");

553 
	`i82586_¡¬t_ªsûiv
(
sc
);

556 
sc
->
	`_bus_wre16
(sc, 
	`IE_CMD_XMIT_LINK
(sc->
xm_cmds
,
cur
),

559 
sc
->
	`_bus_wre16
(sc, 
	`IE_CMD_XMIT_CMD
(sc->
xm_cmds
, 
cur
),

560 
IE_CMD_XMIT
 | 
IE_CMD_INTR
 | 
IE_CMD_LAST
);

562 
off
 = 
	`IE_SCB_CMDLST
(
sc
->
scb
);

563 
sc
->
	`_bus_wre16
(sc, 
off
, 
	`IE_CMD_XMIT_ADDR
(sc->
xm_cmds
, 
cur
));

564 
	`IE_BUS_BARRIER
(
sc
, 
off
, 2, 
BUS_SPACE_BARRIER_READ
);

566 ià(
	`i82586_¡¬t_cmd
(
sc
, 
IE_CUC_START
, 0, 0, 
ASYNC_OPTION
))

567 
	`´tf
("%s: iexmit: start xmit commandimed out\n",

568 
sc
->
¬pcom
.
ac_if
.
if_Çme
);

571 
sc
->
¬pcom
.
ac_if
.
if_tim
 = 5;

572 
	}
}

581 
	$i82586_w©chdog
(
iâ
 *
iå
)

583 
_soác
 *
sc
 = 
iå
->
if_soác
;

584 
	`´tf
("%s: deviûimeout\n", 
iå
->
if_Çme
);

585 ++
iå
->
if_Û¼Üs
;

586 
	`i82586_»£t
(
sc
, 1);

587 
	}
}

590 
	$i82586_cmd_wa
(
_soác
 *
sc
)

593 
i
, 
off
;

594 
u_t16_t
 
cmd
;

596 
i
 = 0; i < 900000; i++) {

598 
off
 = 
	`IE_SCB_CMD
(
sc
->
scb
);

600 
	`IE_BUS_BARRIER
(
sc
, 
off
, 2, 
BUS_SPACE_BARRIER_READ
);

601 ià((
cmd
 = 
sc
->
	`_bus_»ad16
(sc, 
off
)) == 0)

603 
	`day
(1);

606 
off
 = 
	`IE_SCB_STATUS
(
sc
->
scb
);

607 
	`´tf
("i82586_cmd_wait:imo(%ssync): scb status: 0x%x, cmd: 0x%x\n",

608 
sc
->
async_cmd_´og»ss
?"a":"",

609 
sc
->
	`_bus_»ad16
(sc, 
off
), 
cmd
);

612 
	}
}

625 
	$i82586_¡¬t_cmd
(
_soác
 *
sc
, 
cmd
, 
cmdbuf
, 
mask
, 
async
)

627 
i
;

628 
off
;

630 ià(
sc
->
async_cmd_´og»ss
 != 0) {

635 ià(
	`i82586_cmd_wa
(
sc
) != 0)

637 
sc
->
async_cmd_´og»ss
 = 0;

640 
off
 = 
	`IE_SCB_CMD
(
sc
->
scb
);

641 
sc
->
	`_bus_wre16
(sc, 
off
, 
cmd
);

642 
	`IE_BUS_BARRIER
(
sc
, 
off
, 2, 
BUS_SPACE_BARRIER_WRITE
);

643 (
sc
->
chª_©
)(sc, 
CARD_RESET
);

645 ià(
async
 != 0) {

646 
sc
->
async_cmd_´og»ss
 = 1;

650 ià(
	`IE_ACTION_COMMAND
(
cmd
è&& 
cmdbuf
) {

651 
¡©us
;

658 
i
 = 0; i < 369000; i++) {

660 
off
 = 
	`IE_CMD_COMMON_STATUS
(
cmdbuf
);

661 
	`IE_BUS_BARRIER
(
sc
, 
off
, 2, 
BUS_SPACE_BARRIER_READ
);

662 
¡©us
 = 
sc
->
	`_bus_»ad16
(sc, 
off
);

663 ià(
¡©us
 & 
mask
)

665 
	`day
(1);

672  (
	`i82586_cmd_wa
(
sc
));

677 
	}
}

683 
__le
 

684 
	$i82586_couÁ_rÜs
(
_soác
 *
sc
)

686 
scb
 = 
sc
->scb;

688 
sc
->
¬pcom
.
ac_if
.
if_¼Üs
 +=

689 
sc
->
	`_bus_»ad16
(sc, 
	`IE_SCB_ERRCRC
(
scb
)) +

690 
sc
->
	`_bus_»ad16
(sc, 
	`IE_SCB_ERRALN
(
scb
)) +

691 
sc
->
	`_bus_»ad16
(sc, 
	`IE_SCB_ERRRES
(
scb
)) +

692 
sc
->
	`_bus_»ad16
(sc, 
	`IE_SCB_ERROVR
(
scb
));

695 
sc
->
	`_bus_wre16
(sc, 
	`IE_SCB_ERRCRC
(
scb
), 0);

696 
sc
->
	`_bus_wre16
(sc, 
	`IE_SCB_ERRALN
(
scb
), 0);

697 
sc
->
	`_bus_wre16
(sc, 
	`IE_SCB_ERRRES
(
scb
), 0);

698 
sc
->
	`_bus_wre16
(sc, 
	`IE_SCB_ERROVR
(
scb
), 0);

699 
	}
}

703 
	$i82586_rx_rÜs
(
_soác
 *
sc
, 
â
, 
¡©us
)

705 
bs
[128];

707 
	`´tf
("%s:x¼Ü (äame# %d): %s\n", 
sc
->
¬pcom
.
ac_if
.
if_Çme
, 
â
,

708 
	`bmask_¢´tf
(
¡©us
, 
IE_FD_STATUSBITS
, 
bs
, (bits)));

709 
	}
}

714 
¹ems_i¤


715 
	$i82586_
(
¹ems_veùÜ_numb
 
vec
, *
¬g
)

717 
_soác
 *
sc
 = 
¬g
;

719 #ià
I82586_DEBUG


720 
iút
 = 0;

721 
	`I82586_TRACE
(
sc
, 
I82586_INTS_REQ
, 
iút
++);

729 ià(
sc
->
hook
)

730 (
sc
->
hook
)(sc, 
INTR_ENTER
);

736 
	`¹ems_bsdÃt_evt_£nd
 (
sc
->
_sk
, 
i82586_WAKE_EVENT
);

737 
	}
}

746 
	$i82586__sk
(*
¬g
)

748 
_soác
 *
sc
 = 
¬g
;

749 
¹ems_evt_£t
 
evts
;

750 
u_t
 
¡©us
;

751 
off
;

752 
»£t
;

759 
	`¹ems_bsdÃt_evt_»ûive
 (
i82586_WAKE_EVENT
,

760 
RTEMS_WAIT
 | 
RTEMS_EVENT_ANY
,

761 0, &
evts
);

763 
off
 = 
	`IE_SCB_STATUS
(
sc
->
scb
);

764 
	`IE_BUS_BARRIER
(
sc
, 
off
, 2, 
BUS_SPACE_BARRIER_READ
);

765 
¡©us
 = 
sc
->
	`_bus_»ad16
(sc, 
off
è& 
IE_ST_WHENCE
;

767 #ià
I82586_DEBUG


768 
	`I82586_TRACE
(
sc
, 
I82586_INTS_IN
, 
¡©us
);

771 
»£t
 = 0;

773 (
¡©us
 & 
IE_ST_WHENCE
) != 0) {

774 #ià
I82586_DEBUG


775 ià(
sc
->
sc_debug
)

776 
	`´tf
 ("%s: -------\n%s: scbstatus=0x%x\n",

777 
sc
->
¬pcom
.
ac_if
.
if_Çme
, sc->¬pcom.ac_if.if_Çme, 
¡©us
);

782 
	`_ack
(
sc
, 
¡©us
 & 
IE_ST_WHENCE
);

785 
	`i82586_¡¬t_cmd
(
sc
, 
¡©us
 & 
IE_ST_WHENCE
, 0, 0, 
ASYNC_OPTION
);

787 ià(
¡©us
 & (
IE_ST_FR
 | 
IE_ST_RNR
))

788 ià(
	`i82586_rt
(
sc
, 
¡©us
) != 0) {

789 
»£t
 = 1;

793 ià(
¡©us
 & 
IE_ST_CX
)

794 ià(
	`i82586_tt
(
sc
, 
¡©us
) != 0) {

795 
»£t
 = 1;

799 #ià
I82586_DEBUG


800 ià((
¡©us
 & 
IE_ST_CNA
è&& (
sc
->
sc_debug
 & 
IED_CNA
))

801 
	`´tf
("%s: cÇ; stus=0x%x\n", 
sc
->
¬pcom
.
ac_if
.
if_Çme
, 
¡©us
);

805 ià(
sc
->
hook
)

806 (
sc
->
hook
)(sc, 
INTR_LOOP
);

817 ià(
	`i82586_cmd_wa
(
sc
) != 0) {

818 
»£t
 = 1;

823 
	`IE_BUS_BARRIER
(
sc
, 
off
, 2, 
BUS_SPACE_BARRIER_READ
);

824 
¡©us
 = 
sc
->
	`_bus_»ad16
(sc, 
off
);

825 #ià
I82586_DEBUG


826 
	`I82586_TRACE
(
sc
, 
I82586_INTS_LOOPS
, 
¡©us
);

830 ià(
»£t
) {

831 #ià
I82586_DEBUG


832 
	`´tf
("%s: iÁ¸»£t; stus=0x%x\n", 
sc
->
¬pcom
.
ac_if
.
if_Çme
, 
¡©us
);

834 
	`i82586_cmd_wa
(
sc
);

835 
	`i82586_»£t
(
sc
, 1);

838 #ià
I82586_DEBUG


839 
	`I82586_TRACE
(
sc
, 
I82586_INTS_OUT
, 
¡©us
);

842 ià(
sc
->
hook
)

843 (
sc
->
hook
)(sc, 
INTR_EXIT
);

845 
	}
}

851 
	$i82586_rt
(
_soác
 *
sc
, 
scb¡©us
)

853 
time¡hru
 = 1024;

854 
i
, 
¡©us
, 
off
;

856 #ià
I82586_DEBUG


857 
	`I82586_TRACE
(
sc
, 
I82586_RX_INT
, 
scb¡©us
);

859 ià(
sc
->
sc_debug
 & 
IED_RINT
)

860 
	`´tf
("%s:int: status 0x%x\n",

861 
sc
->
¬pcom
.
ac_if
.
if_Çme
, 
scb¡©us
);

865 
drÝ
 = 0;

867 
i
 = 
sc
->
rfhd
;

868 
off
 = 
	`IE_RFRAME_STATUS
(
sc
->
räames
, 
i
);

869 
	`IE_BUS_BARRIER
(
sc
, 
off
, 2, 
BUS_SPACE_BARRIER_READ
);

870 
¡©us
 = 
sc
->
	`_bus_»ad16
(sc, 
off
);

872 #ià
I82586_DEBUG


873 ià(
sc
->
sc_debug
 & 
IED_RINT
)

874 
	`´tf
("%s:int: frame(%d) status 0x%x\n",

875 
sc
->
¬pcom
.
ac_if
.
if_Çme
, 
i
, 
¡©us
);

877 ià((
¡©us
 & 
IE_FD_COMPLETE
) == 0) {

878 ià((
¡©us
 & 
IE_FD_OK
) != 0) {

879 
	`´tf
("%s:int: weird: ",

880 
sc
->
¬pcom
.
ac_if
.
if_Çme
);

881 
	`i82586_rx_rÜs
(
sc
, 
i
, 
¡©us
);

882 #ià
I82586_DEBUG


883 
	`I82586_TRACE
(
sc
, 
I82586_RX_ERR
, 
¡©us
);

887 ià(--
time¡hru
 == 0) {

889 
	`i82586_couÁ_rÜs
(
sc
);

890 
time¡hru
 = 1024;

893 } ià((
¡©us
 & 
IE_FD_OK
) == 0) {

899 
	`i82586_rx_rÜs
(
sc
, 
i
, 
¡©us
);

900 
drÝ
 = 1;

902 #ià
I82586_DEBUG


903 
	`I82586_TRACE
(
sc
, 
I82586_RX_DROP
, 
¡©us
);

907 #ià
I82586_DEBUG


908 ià((
¡©us
 & 
IE_FD_BUSY
) != 0)

909 
	`´tf
("%s:int: frame(%d) busy; status=0x%x\n",

910 
sc
->
¬pcom
.
ac_if
.
if_Çme
, 
i
, 
¡©us
);

919 
sc
->
	`_bus_wre16
(sc, 
off
, 0);

922 
off
 = 
	`IE_RFRAME_LAST
(
sc
->
räames
, 
i
);

923 
sc
->
	`_bus_wre16
(sc, 
off
, 
IE_FD_EOL
|
IE_FD_SUSP
);

926 
off
 = 
	`IE_RFRAME_BUFDESC
(
sc
->
räames
, 
i
);

927 
sc
->
	`_bus_wre16
(sc, 
off
, 0xffff);

930 
off
 = 
	`IE_RFRAME_LAST
(
sc
->
räames
, sc->
ráa
);

931 
sc
->
	`_bus_wre16
(sc, 
off
, 0);

933 ià(++
sc
->
ráa
 =ðsc->
näames
)

934 
sc
->
ráa
 = 0;

935 ià(++
sc
->
rfhd
 =ðsc->
näames
)

936 
sc
->
rfhd
 = 0;

939 ià(
drÝ
) {

940 
	`i82586_drÝ_äames
(
sc
);

941 ià((
¡©us
 & 
IE_FD_RNR
) != 0)

942 
sc
->
ºr_ex³ù
 = 1;

943 
sc
->
¬pcom
.
ac_if
.
if_¼Üs
++;

944 } ià(
	`_»adäame
(
sc
, 
i
) != 0)

948 ià((
scb¡©us
 & 
IE_ST_RNR
) != 0) {

956 ià((
scb¡©us
 & 
IE_RUS_SUSPEND
) != 0) {

963 
	`´tf
("RINT: SUSPENDED; scbstatus=0x%x\n",

964 
scb¡©us
);

965 ià(
	`i82586_¡¬t_cmd
(
sc
, 
IE_RUC_RESUME
, 0, 0, 0) == 0)

967 
	`´tf
("%s: RU RESUME commandimed out\n",

968 
sc
->
¬pcom
.
ac_if
.
if_Çme
);

972 ià(
sc
->
ºr_ex³ù
 != 0) {

978 
	`i82586_¡¬t_ªsûiv
(
sc
);

979 
sc
->
ºr_ex³ù
 = 0;

982 } ià((
scb¡©us
 & 
IE_RUS_NOSPACE
) != 0) {

989 ià(
	`i82586_chk_rx_rg
(
sc
) != 0)

992 
	`i82586_¡¬t_ªsûiv
(
sc
);

993 
sc
->
¬pcom
.
ac_if
.
if_¼Üs
++;

996 
	`´tf
("%s:eceiveroteady; scbstatus=0x%x\n",

997 
sc
->
¬pcom
.
ac_if
.
if_Çme
, 
scb¡©us
);

999 
sc
->
¬pcom
.
ac_if
.
if_¼Üs
++;

1004 
	}
}

1012 
	$i82586_tt
(
_soác
 *
sc
, 
scb¡©us
)

1014 
iâ
 *
iå
 = &
sc
->
¬pcom
.
ac_if
;

1015 
¡©us
;

1017 #ià
I82586_DEBUG


1018 
	`I82586_TRACE
(
sc
, 
I82586_TX_INT
, sc->
xm_busy
);

1021 #ià
I82586_DEBUG


1022 ià(
sc
->
xm_busy
 <= 0) {

1023 
	`´tf
("i82586_tint: (%d), WEIRD: xmit_busy=%d, xctail=%d, xchead=%d\n",

1024 
sc
->
aû_æow_
 / 2, sc->
xm_busy
, sc->
xùa
, sc->
xchd
);

1025 
	`I82586_TRACE
(
sc
, 
I82586_TX_BAD
, sc->
xùa
);

1030 
iå
->
if_tim
 = 0;

1031 
iå
->
if_æags
 &ð~
IFF_OACTIVE
;

1033 
¡©us
 = 
sc
->
	`_bus_»ad16
(sc, 
	`IE_CMD_XMIT_STATUS
(sc->
xm_cmds
,

1034 
sc
->
xùa
));

1036 #ià
I82586_DEBUG


1037 ià(
sc
->
sc_debug
 & 
IED_TINT
)

1038 
	`´tf
("%s:int: SCB status 0x%x; xmit status 0x%x\n",

1039 
sc
->
¬pcom
.
ac_if
.
if_Çme
, 
scb¡©us
, 
¡©us
);

1042 ià((
¡©us
 & 
IE_STAT_COMPL
è=ð0 || (¡©u & 
IE_STAT_BUSY
)) {

1043 
	`´tf
("i82586_tint: (%d) command still busy; status=0x%x;ail=%d\n",

1044 
sc
->
aû_æow_
 / 2, 
¡©us
, sc->
xùa
);

1045 
	`´tf
("¡©u ð0x%x\n", 
scb¡©us
);

1049 ià(
¡©us
 & 
IE_STAT_OK
) {

1050 
iå
->
if_Ýacks
++;

1051 
iå
->
if_cÞlisiÚs
 +ð(
¡©us
 & 
IE_XS_MAXCOLL
);

1053 
iå
->
if_Û¼Üs
++;

1058 ià(
¡©us
 & 
IE_STAT_ABORT
)

1059 
	`´tf
("%s: sdbÜd\n", 
sc
->
¬pcom
.
ac_if
.
if_Çme
);

1060 ià(
¡©us
 & 
IE_XS_NOCARRIER
)

1061 
	`´tf
("%s:Øÿ¼r\n", 
sc
->
¬pcom
.
ac_if
.
if_Çme
);

1062 ià(
¡©us
 & 
IE_XS_LOSTCTS
)

1063 
	`´tf
("%s:o¡ CTS\n", 
sc
->
¬pcom
.
ac_if
.
if_Çme
);

1064 ià(
¡©us
 & 
IE_XS_UNDERRUN
)

1065 
	`´tf
("%s: DMA undrun\n", 
sc
->
¬pcom
.
ac_if
.
if_Çme
);

1066 ià(
¡©us
 & 
IE_XS_EXCMAX
) {

1067 
	`´tf
("%s:oo many collisions\n",

1068 
sc
->
¬pcom
.
ac_if
.
if_Çme
);

1069 
sc
->
¬pcom
.
ac_if
.
if_cÞlisiÚs
 += 16;

1078 ià(
sc
->
wªt_mc£tup
) {

1079 
	`_mc_£tup
(
sc
, 
	`IE_XBUF_ADDR
(sc, sc->
xùa
));

1080 
sc
->
wªt_mc£tup
 = 0;

1084 
sc
->
xm_busy
--;

1085 
sc
->
xùa
 = (sc->xùa + 1è% 
NTXBUF
;

1088 ià(
sc
->
xm_busy
 > 0)

1089 
	`xm
(
sc
);

1091 
	`i82586_¡¬t_tx
(
sc
);

1093 
	}
}

1099 
	$i82586_g_rbd_li¡
(
_soác
 *
sc
, 
u_t16_t
 *
¡¬t
, u_t16_*
d
, *
pk
)

1101 
off
, 
rbba£
 = 
sc
->
rbds
;

1102 
rbdex
, 
couÁ
 = 0;

1103 
¶
 = 0;

1104 
rbd¡©us
;

1106 *
¡¬t
 = 
rbdex
 = 
sc
->
rbhd
;

1109 
off
 = 
	`IE_RBD_STATUS
(
rbba£
, 
rbdex
);

1110 
	`IE_BUS_BARRIER
(
sc
, 
off
, 2, 
BUS_SPACE_BARRIER_READ
);

1111 
rbd¡©us
 = 
sc
->
	`_bus_»ad16
(sc, 
off
);

1112 ià((
rbd¡©us
 & 
IE_RBD_USED
) == 0) {

1117 #ià
I82586_DEBUG


1118 
	`´t_rbd
(
sc
, 
rbdex
);

1120 
	`´tf
("%s:eceive descriptors out of synct %d\n",

1121 
sc
->
¬pcom
.
ac_if
.
if_Çme
, 
rbdex
);

1124 
¶
 +ð(
rbd¡©us
 & 
IE_RBD_CNTMASK
);

1126 ià(++
rbdex
 =ð
sc
->
Äxbuf
)

1127 
rbdex
 = 0;

1129 ++
couÁ
;

1130 } (
rbd¡©us
 & 
IE_RBD_LAST
) == 0);

1131 *
d
 = 
rbdex
;

1132 *
pk
 = 
¶
;

1133  (
couÁ
);

1134 
	}
}

1141 
	$i82586_»Ëa£_rbd_li¡
(
_soác
 *
sc
, 
u_t16_t
 
¡¬t
, u_t16_
d
)

1143 
off
, 
rbba£
 = 
sc
->
rbds
;

1144 
rbdex
 = 
¡¬t
;

1148 
off
 = 
	`IE_RBD_STATUS
(
rbba£
, 
rbdex
);

1149 
sc
->
	`_bus_wre16
(sc, 
off
, 0);

1150 ià(++
rbdex
 =ð
sc
->
Äxbuf
)

1151 
rbdex
 = 0;

1152 } 
rbdex
 !ð
d
);

1155 
rbdex
 = (Ôbdex =ð0è? 
sc
->
Äxbuf
 :bindex) - 1;

1156 
off
 = 
	`IE_RBD_BUFLEN
(
rbba£
, 
rbdex
);

1157 
sc
->
	`_bus_wre16
(sc, 
off
, 
IE_RBUF_SIZE
|
IE_RBD_EOL
);

1160 
off
 = 
	`IE_RBD_BUFLEN
(
rbba£
, 
sc
->
rb
);

1161 
sc
->
	`_bus_wre16
(sc, 
off
, 
IE_RBUF_SIZE
);

1165 
sc
->
rbhd
 = 
d
;

1166 
sc
->
rb
 = 
rbdex
;

1167 
	}
}

1176 
	$i82586_drÝ_äames
(
_soác
 *
sc
)

1178 
u_t16_t
 
b¡¬t
, 
bd
;

1179 
pk
;

1181 ià(
	`i82586_g_rbd_li¡
(
sc
, &
b¡¬t
, &
bd
, &
pk
) == 0)

1183 
	`i82586_»Ëa£_rbd_li¡
(
sc
, 
b¡¬t
, 
bd
);

1185 
	}
}

1197 
	$i82586_chk_rx_rg
(
_soác
 *
sc
)

1199 
n
, 
off
, 
v®
;

1201 
n
 = 0; < 
sc
->
Äxbuf
;++) {

1202 
off
 = 
	`IE_RBD_BUFLEN
(
sc
->
rbds
, 
n
);

1203 
v®
 = 
sc
->
	`_bus_»ad16
(sc, 
off
);

1204 ià((
n
 =ð
sc
->
rb
è^ ((
v®
 & 
IE_RBD_EOL
) != 0)) {

1206 
	`´tf
("%s:x buffer descriptors out of synct %d\n",

1207 
sc
->
¬pcom
.
ac_if
.
if_Çme
, 
n
);

1214 
n
 = 0; < 
sc
->
näames
;++) {

1215 
off
 = 
	`IE_RFRAME_LAST
(
sc
->
räames
, 
n
);

1216 
v®
 = 
sc
->
	`_bus_»ad16
(sc, 
off
);

1217 ià((
n
 =ð
sc
->
ráa
è^ ((
v®
 & (
IE_FD_EOL
|
IE_FD_SUSP
)) != 0)) {

1219 
	`´tf
("%s:x frameist out of synct %d\n",

1220 
sc
->
¬pcom
.
ac_if
.
if_Çme
, 
n
);

1226 
	}
}

1239 
	$_»adäame
(
_soác
 *
sc
, 
num
)

1241 
h_hd
 *
eh
;

1242 
mbuf
 *
m
;

1243 
u_t16_t
 
b¡¬t
, 
bd
;

1244 
pk
;

1246 ià(
	`i82586_g_rbd_li¡
(
sc
, &
b¡¬t
, &
bd
, &
pk
) == 0) {

1247 
sc
->
¬pcom
.
ac_if
.
if_¼Üs
++;

1251 
m
 = 
	`g
(
sc
, 
b¡¬t
, 
pk
);

1252 
	`i82586_»Ëa£_rbd_li¡
(
sc
, 
b¡¬t
, 
bd
);

1254 ià(
m
 == 0) {

1255 
sc
->
¬pcom
.
ac_if
.
if_¼Üs
++;

1263 
eh
 = 
	`mtod
(
m
, 
h_hd
 *);

1264 
m
->
m_d©a
 +ð (
h_hd
);

1265 
m
->
m_Ën
 -ð (
h_hd
);

1266 
m
->
m_pkthdr
.
Ën
 -ð (
h_hd
);

1268 #ià
I82586_DEBUG


1269 ià(
sc
->
sc_debug
 & 
IED_READFRAME
) {

1271 
	`´tf
("%s: frame fromther %sype 0x%xen %d\n",

1272 
sc
->
¬pcom
.
ac_if
.
if_Çme
,

1273 
	`h_¥rtf
(
eh
->
h_sho¡
),

1274 (
u_t
)
	`Áohs
(
eh
->
h_ty³
),

1275 
pk
);

1279 #ià
NBPFILTER
 > 0

1281 ià(
sc
->
¬pcom
.
ac_if
.
if_bpf
 != 0)

1283 
	`bpf_mp
(
sc
->
¬pcom
.
ac_if
.
if_bpf
, 
m
);

1289 
	`h_put
 (&
sc
->
¬pcom
.
ac_if
, 
eh
, 
m
);

1290 
sc
->
¬pcom
.
ac_if
.
if_acks
++;

1292 #ià
I82586_DEBUG


1293 
	`I82586_TRACE
(
sc
, 
I82586_RX_OK
, sc->
¬pcom
.
ac_if
.
if_acks
);

1297 
	}
}

1303 
	$i82586_¡¬t
(
iâ
 *
iå
)

1305 
_soác
 *
sc
 = 
iå
->
if_soác
;

1307 ià((
iå
->
if_æags
 & (
IFF_RUNNING
 | 
IFF_OACTIVE
)) != IFF_RUNNING)

1310 #ià
I82586_DEBUG


1311 
	`I82586_TRACE
(
sc
, 
I82586_TX_REQ
, sc->
xm_busy
);

1314 
	`¹ems_bsdÃt_evt_£nd
 (
sc
->
tx_sk
, 
i82586_TX_EVENT
);

1315 
	}
}

1318 
	$i82586_tx_sk
(*
¬g
)

1320 
_soác
 *
sc
 = 
¬g
;

1321 
¹ems_evt_£t
 
evts
;

1324 
	`¹ems_bsdÃt_evt_»ûive
 (
i82586_TX_EVENT
,

1325 
RTEMS_WAIT
 | 
RTEMS_EVENT_ANY
,

1326 0, &
evts
);

1328 #ià
I82586_DEBUG


1329 
	`I82586_TRACE
(
sc
, 
I82586_TX_EVT
, sc->
xm_busy
);

1331 ià(
sc
->
sc_debug
)

1332 
	`´tf
 ("%s: =======\n", 
sc
->
¬pcom
.
ac_if
.
if_Çme
);

1335 
	`i82586_¡¬t_tx
(
sc
);

1337 
	}
}

1340 
	$i82586_¡¬t_tx
(
_soác
 *
sc
)

1342 
iâ
 *
iå
 = &
sc
->
¬pcom
.
ac_if
;

1343 
mbuf
 *
m0
, *
m
;

1344 
bufãr
, 
hd
, 
xba£
;

1345 
u_shÜt
 
Ën
;

1346 
s
;

1348 #ià
I82586_DEBUG


1349 
	`I82586_TRACE
(
sc
, 
I82586_START_TX
, sc->
xm_busy
);

1352 ià((
iå
->
if_æags
 & (
IFF_RUNNING
 | 
IFF_OACTIVE
)) != IFF_RUNNING)

1354 #ià
I82586_DEBUG


1355 
	`I82586_TRACE
(
sc
, 
I82586_TX_ACTIVE
, 
iå
->
if_¢d
.
ifq_Ën
);

1361 ià(
sc
->
xm_busy
 =ð
NTXBUF
) {

1362 
iå
->
if_æags
 |ð
IFF_OACTIVE
;

1366 
hd
 = 
sc
->
xchd
;

1367 
xba£
 = 
sc
->
xbds
;

1369 
	`IF_DEQUEUE
(&
iå
->
if_¢d
, 
m0
);

1370 ià(
m0
 == 0)

1374 ià((
m0
->
m_æags
 & 
M_PKTHDR
) == 0)

1375 
	`·nic
("i82586_start:o header mbuf");

1377 #ià
NBPFILTER
 > 0

1379 ià(
iå
->
if_bpf
)

1380 
	`bpf_mp
(
iå
->
if_bpf
, 
m0
);

1383 #ià
I82586_DEBUG


1384 ià(
sc
->
sc_debug
 & 
IED_ENQ
)

1385 
	`´tf
("%s: fÈbufã¸%d\n", 
sc
->
¬pcom
.
ac_if
.
if_Çme
,

1386 
sc
->
xchd
);

1389 ià(
m0
->
m_pkthdr
.
Ën
 > 
IE_TBUF_SIZE
)

1390 
	`´tf
("%s:buàovæow\n", 
sc
->
¬pcom
.
ac_if
.
if_Çme
);

1392 
bufãr
 = 
	`IE_XBUF_ADDR
(
sc
, 
hd
);

1393 
m
 = 
m0
; m !ð0; m = m->
m_Ãxt
) {

1394 (
sc
->
memcÝyout
)(sc, 
	`mtod
(
m
,
ÿddr_t
), 
bufãr
, m->
m_Ën
);

1395 
bufãr
 +ð
m
->
m_Ën
;

1398 
Ën
 = 
	`max
(
m0
->
m_pkthdr
.Ën, 
ETHER_MIN_LEN
);

1399 
	`m_äm
(
m0
);

1405 
sc
->
	`_bus_wre16
(sc, 
	`IE_XBD_FLAGS
(
xba£
, 
hd
),

1406 
Ën
 | 
IE_TBD_EOL
);

1407 
sc
->
	`_bus_wre16
(sc, 
	`IE_XBD_NEXT
(
xba£
, 
hd
), 0xffff);

1408 
sc
->
	`_bus_wre24
(sc, 
	`IE_XBD_BUF
(
xba£
, 
hd
),

1409 
	`IE_XBUF_ADDR
(
sc
, 
hd
));

1411 ià(++
hd
 =ð
NTXBUF
)

1412 
hd
 = 0;

1413 
sc
->
xchd
 = 
hd
;

1415 #ià
I82586_DEBUG


1416 
	`I82586_TRACE
(
sc
, 
I82586_TX_START
, sc->
xm_busy
);

1419 
s
 = 
	`¥Ê
();

1421 ià(
sc
->
xm_busy
 == 0)

1422 
	`xm
(
sc
);

1424 
sc
->
xm_busy
++;

1426 
	`¥lx
(
s
);

1428 
	}
}

1435 
	$i82586_´obam
(
_soác
 *
sc
)

1437 
»suÉ
, 
off
;

1440 
off
 = 
	`IE_SCP_BUS_USE
(
sc
->
sý
);

1441 
sc
->
	`_bus_wre16
(sc, 
off
, 0);

1442 
	`IE_BUS_BARRIER
(
sc
, 
off
, 2, 
BUS_SPACE_BARRIER_WRITE
);

1445 
off
 = 
	`IE_ISCP_BUSY
(
sc
->
isý
);

1446 
sc
->
	`_bus_wre16
(sc, 
off
, 1);

1447 
	`IE_BUS_BARRIER
(
sc
, 
off
, 2, 
BUS_SPACE_BARRIER_WRITE
);

1449 ià(
sc
->
hw»£t
)

1450 (
sc
->
hw»£t
)(sc, 
CHIP_PROBE
);

1452 (
sc
->
chª_©
è(sc, 
CHIP_PROBE
);

1454 
	`day
(100);

1457 
off
 = 
	`IE_ISCP_BUSY
(
sc
->
isý
);

1458 
	`IE_BUS_BARRIER
(
sc
, 
off
, 2, 
BUS_SPACE_BARRIER_READ
);

1459 
»suÉ
 = 
sc
->
	`_bus_»ad16
(sc, 
off
) == 0;

1462 
	`_ack
(
sc
, 
IE_ST_WHENCE
);

1464  (
»suÉ
);

1465 
	}
}

1468 
	$i82586_»£t
(
_soác
 *
sc
, 
h¬d
)

1470 
s
 = 
	`¥Ê
();

1472 ià(
h¬d
)

1473 
	`´tf
("%s:e£t\n", 
sc
->
¬pcom
.
ac_if
.
if_Çme
);

1476 
sc
->
¬pcom
.
ac_if
.
if_tim
 = 0;

1477 
sc
->
¬pcom
.
ac_if
.
if_æags
 &ð~
IFF_OACTIVE
;

1482 ià(
	`i82586_¡¬t_cmd
(
sc
, 
IE_RUC_ABORT
 | 
IE_CUC_ABORT
, 0, 0, 0))

1483 
	`´tf
("%s:bÜcommªd timed out\n", 
sc
->
¬pcom
.
ac_if
.
if_Çme
);

1490 ià(
h¬d
 && 
sc
->
hw»£t
)

1491 (
sc
->
hw»£t
)(sc, 
CARD_RESET
);

1493 
	`day
(100);

1494 
	`_ack
(
sc
, 
IE_ST_WHENCE
);

1496 ià((
sc
->
¬pcom
.
ac_if
.
if_æags
 & 
IFF_UP
) != 0) {

1497 
	`i82586_
(&
sc
->
¬pcom
.
ac_if
);

1500 
	`¥lx
(
s
);

1501 
	}
}

1504 
	$£tup_sim¶e_commªd
(
_soác
 *
sc
, 
cmd
, 
cmdbuf
)

1507 
sc
->
	`_bus_wre16
(sc, 
	`IE_CMD_COMMON_STATUS
(
cmdbuf
), 0);

1508 
sc
->
	`_bus_wre16
(sc, 
	`IE_CMD_COMMON_CMD
(
cmdbuf
), 
cmd
 | 
IE_CMD_LAST
);

1509 
sc
->
	`_bus_wre16
(sc, 
	`IE_CMD_COMMON_LINK
(
cmdbuf
), 0xffff);

1512 
sc
->
	`_bus_wre16
(sc, 
	`IE_SCB_CMDLST
(sc->
scb
), 
cmdbuf
);

1513 
	}
}

1519 
	$_run_tdr
(
_soác
 *
sc
, 
cmd
)

1521 
ut32_t
 
»suÉ
;

1523 
	`£tup_sim¶e_commªd
(
sc
, 
IE_CMD_TDR
, 
cmd
);

1524 
sc
->
	`_bus_wre16
(sc, 
	`IE_CMD_TDR_TIME
(
cmd
), 0);

1526 ià(
	`i82586_¡¬t_cmd
(
sc
, 
IE_CUC_START
, 
cmd
, 
IE_STAT_COMPL
, 0) ||

1527 (
sc
->
	`_bus_»ad16
(sc, 
	`IE_CMD_COMMON_STATUS
(
cmd
)è& 
IE_STAT_OK
) == 0)

1528 
»suÉ
 = 0x10000;

1530 
»suÉ
 = 
sc
->
	`_bus_»ad16
(sc, 
	`IE_CMD_TDR_TIME
(
cmd
));

1533 
	`_ack
(
sc
, 
IE_ST_WHENCE
);

1535 ià(
»suÉ
 & 
IE_TDR_SUCCESS
)

1538 ià(
»suÉ
 & 0x10000)

1539 
	`´tf
("%s: TDR commªd faed\n", 
sc
->
¬pcom
.
ac_if
.
if_Çme
);

1540 ià(
»suÉ
 & 
IE_TDR_XCVR
)

1541 
	`´tf
("%s:¿nsûivrobËm\n", 
sc
->
¬pcom
.
ac_if
.
if_Çme
);

1542 ià(
»suÉ
 & 
IE_TDR_OPEN
)

1543 
	`´tf
("%s: TDR deùed incÜ»ùm©iÚ %" 
PRId32
 " clocksway\n",

1544 
sc
->
¬pcom
.
ac_if
.
if_Çme
, 
»suÉ
 & 
IE_TDR_TIME
);

1545 ià(
»suÉ
 & 
IE_TDR_SHORT
)

1546 
	`´tf
("%s: TDR deùed shÜccu %" 
PRId32
 " clocksway\n",

1547 
sc
->
¬pcom
.
ac_if
.
if_Çme
, 
»suÉ
 & 
IE_TDR_TIME
);

1549 
	`´tf
("%s: TDRuºed unknowÀ¡©u 0x%" 
PRIx32
 "\n",

1550 
sc
->
¬pcom
.
ac_if
.
if_Çme
, 
»suÉ
);

1551 
	}
}

1566 
	$i82586_£tup_bufs
(
_soác
 *
sc
)

1568 
±r
 = 
sc
->
buf_¬
;

1569 
n
, 
r
;

1575 
±r
 = (ptr + 3) & ~3;

1583 
sc
->
nÝ_cmds
 = 
±r
;

1584 
±r
 +ð
NTXBUF
 * 
IE_CMD_NOP_SZ
;

1587 
sc
->
xm_cmds
 = 
±r
;

1588 
±r
 +ð
NTXBUF
 * 
IE_CMD_XMIT_SZ
;

1591 
sc
->
xbds
 = 
±r
;

1592 
±r
 +ð
NTXBUF
 * 
IE_XBD_SZ
;

1595 
sc
->
xbufs
 = 
±r
;

1596 
±r
 +ð
NTXBUF
 * 
IE_TBUF_SIZE
;

1598 
±r
 = (ptr + 3) & ~3;

1601 
n
 = 
sc
->
buf_¬_sz
 - (
±r
 - sc->
buf_¬
);

1604 
r
 = 
IE_RFRAME_SZ
 + ((
IE_RBD_SZ
 + 
IE_RBUF_SIZE
è* 
B_PER_F
);

1606 
sc
->
näames
 = 
n
 / 
r
;

1608 ià(
sc
->
näames
 <= 0)

1609 
	`·nic
("ie: bogus buffer calc\n");

1611 
sc
->
Äxbuf
 = sc->
näames
 * 
B_PER_F
;

1614 
sc
->
räames
 = 
±r
;

1615 
±r
 +ð
sc
->
näames
 * 
IE_RFRAME_SZ
;

1618 
sc
->
rbds
 = 
±r
;

1619 
±r
 +ð
sc
->
Äxbuf
 * 
IE_RBD_SZ
;

1622 
sc
->
rbufs
 = 
±r
;

1623 
±r
 +ð
sc
->
Äxbuf
 * 
IE_RBUF_SIZE
;

1625 #ià
I82586_DEBUG


1626 
	`´tf
("%s: %d f¿me %d bufs\n", 
sc
->
¬pcom
.
ac_if
.
if_Çme
, sc->
näames
,

1627 
sc
->
Äxbuf
);

1633 
n
 = 0; < 
sc
->
näames
;++) {

1634 
m
 = (
n
 =ð
sc
->
näames
 - 1) ? 0 : + 1;

1637 
sc
->
	`_bus_wre16
(sc, 
	`IE_RFRAME_STATUS
(sc->
räames
,
n
), 0);

1640 
sc
->
	`_bus_wre16
(sc, 
	`IE_RFRAME_BUFDESC
(sc->
räames
,
n
),

1644 
sc
->
	`_bus_wre16
(sc, 
	`IE_RFRAME_NEXT
(sc->
räames
,
n
),

1645 
	`IE_RFRAME_ADDR
(
sc
->
räames
,
m
));

1648 
sc
->
	`_bus_wre16
(sc, 
	`IE_RFRAME_LAST
(sc->
räames
,
n
),

1649 ((
m
==0)? (
IE_FD_EOL
|
IE_FD_SUSP
) : 0));

1655 
n
 = 0; < 
sc
->
Äxbuf
;++) {

1656 
m
 = (
n
 =ð
sc
->
Äxbuf
 - 1) ? 0 : + 1;

1659 
sc
->
	`_bus_wre16
(sc, 
	`IE_RBD_STATUS
(sc->
rbds
,
n
), 0);

1662 
sc
->
	`_bus_wre16
(sc, 
	`IE_RBD_NEXT
(sc->
rbds
,
n
),

1663 
	`IE_RBD_ADDR
(
sc
->
rbds
,
m
));

1666 
sc
->
	`_bus_wre24
(sc, 
	`IE_RBD_BUFADDR
(sc->
rbds
, 
n
),

1667 
	`IE_RBUF_ADDR
(
sc
, 
n
));

1668 
sc
->
	`_bus_wre16
(sc, 
	`IE_RBD_BUFLEN
(sc->
rbds
,
n
),

1669 
IE_RBUF_SIZE
 | ((
m
==0)?
IE_RBD_EOL
:0));

1675 
n
 = 0; < 
NTXBUF
;++) {

1676 
sc
->
	`_bus_wre16
(sc, 
	`IE_CMD_NOP_STATUS
(sc->
nÝ_cmds
, 
n
), 0);

1678 
sc
->
	`_bus_wre16
(sc, 
	`IE_CMD_NOP_CMD
(sc->
nÝ_cmds
, 
n
),

1679 
IE_CMD_NOP
);

1681 
sc
->
	`_bus_wre16
(sc, 
	`IE_CMD_NOP_LINK
(sc->
nÝ_cmds
, 
n
),

1682 
	`IE_CMD_NOP_ADDR
(
sc
->
nÝ_cmds
, 
n
));

1692 
sc
->
xchd
 = sc->
xùa
 = 0;

1695 
sc
->
xm_busy
 = 0;

1701 
sc
->
rfhd
 = 0;

1702 
sc
->
ráa
 = sc->
näames
 - 1;

1708 
sc
->
rbhd
 = 0;

1709 
sc
->
rb
 = sc->
Äxbuf
 - 1;

1712 #ià
I82586_DEBUG


1713 
	`´tf
("%s:eserved %d bytes\n",

1714 
sc
->
¬pcom
.
ac_if
.
if_Çme
, 
±r
 - sc->
buf_¬
);

1716 
	}
}

1719 
	$_cfg_£tup
(
_soác
 *
sc
, 
cmd
, 
´omiscuous
, 
mªche¡
)

1721 
cmd»suÉ
, 
¡©us
;

1722 
u_t8_t
 
buf
[
IE_CMD_CFG_SZ
];

1724 *
	`IE_CMD_CFG_CNT
(
buf
) = 0x0c;

1725 *
	`IE_CMD_CFG_FIFO
(
buf
) = 8;

1726 *
	`IE_CMD_CFG_SAVEBAD
(
buf
) = 0x40;

1727 *
	`IE_CMD_CFG_ADDRLEN
(
buf
) = 0x2e;

1728 *
	`IE_CMD_CFG_PRIORITY
(
buf
) = 0;

1729 *
	`IE_CMD_CFG_IFS
(
buf
) = 0x60;

1730 *
	`IE_CMD_CFG_SLOT_LOW
(
buf
) = 0;

1731 *
	`IE_CMD_CFG_SLOT_HIGH
(
buf
) = 0xf2;

1732 *
	`IE_CMD_CFG_PROMISC
(
buf
èð(!!
´omiscuous
è| (
mªche¡
 << 2);

1733 *
	`IE_CMD_CFG_CRSCDT
(
buf
) = 0;

1734 *
	`IE_CMD_CFG_MINLEN
(
buf
) = 64;

1735 *
	`IE_CMD_CFG_JUNK
(
buf
) = 0xff;

1736 
sc
->
	`memcÝyout
(sc, 
buf
, 
cmd
, 
IE_CMD_CFG_SZ
);

1737 
	`£tup_sim¶e_commªd
(
sc
, 
IE_CMD_CONFIG
, 
cmd
);

1738 
	`IE_BUS_BARRIER
(
sc
, 
cmd
, 
IE_CMD_CFG_SZ
, 
BUS_SPACE_BARRIER_WRITE
);

1740 
cmd»suÉ
 = 
	`i82586_¡¬t_cmd
(
sc
, 
IE_CUC_START
, 
cmd
, 
IE_STAT_COMPL
, 0);

1741 
¡©us
 = 
sc
->
	`_bus_»ad16
(sc, 
	`IE_CMD_COMMON_STATUS
(
cmd
));

1742 ià(
cmd»suÉ
 != 0) {

1743 
	`´tf
("%s: configure commandimed out; status %x\n",

1744 
sc
->
¬pcom
.
ac_if
.
if_Çme
, 
¡©us
);

1747 ià((
¡©us
 & 
IE_STAT_OK
) == 0) {

1748 
	`´tf
("%s: configure command failed; status %x\n",

1749 
sc
->
¬pcom
.
ac_if
.
if_Çme
, 
¡©us
);

1754 
	`_ack
(
sc
, 
IE_ST_WHENCE
);

1756 
	}
}

1759 
	$__£tup
(
_soác
 *
sc
, 
cmdbuf
)

1761 
cmd»suÉ
, 
¡©us
;

1763 
	`£tup_sim¶e_commªd
(
sc
, 
IE_CMD_IASETUP
, 
cmdbuf
);

1765 (
sc
->
memcÝyout
)(sc, sc->
¬pcom
.
ac_addr
,

1766 
	`IE_CMD_IAS_EADDR
(
cmdbuf
), 
ETHER_ADDR_LEN
);

1768 
cmd»suÉ
 = 
	`i82586_¡¬t_cmd
(
sc
, 
IE_CUC_START
, 
cmdbuf
, 
IE_STAT_COMPL
, 0);

1769 
¡©us
 = 
sc
->
	`_bus_»ad16
(sc, 
	`IE_CMD_COMMON_STATUS
(
cmdbuf
));

1770 ià(
cmd»suÉ
 != 0) {

1771 
	`´tf
("%s: individualddress commandimed out; status %x\n",

1772 
sc
->
¬pcom
.
ac_if
.
if_Çme
, 
¡©us
);

1775 ià((
¡©us
 & 
IE_STAT_OK
) == 0) {

1776 
	`´tf
("%s: individualddress command failed; status %x\n",

1777 
sc
->
¬pcom
.
ac_if
.
if_Çme
, 
¡©us
);

1782 
	`_ack
(
sc
, 
IE_ST_WHENCE
);

1784 
	}
}

1791 
	$_mc_£tup
(
_soác
 *
sc
, 
cmdbuf
)

1793 
cmd»suÉ
, 
¡©us
;

1795 ià(
sc
->
mÿ¡_couÁ
 == 0)

1798 
	`£tup_sim¶e_commªd
(
sc
, 
IE_CMD_MCAST
, 
cmdbuf
);

1800 (
sc
->
memcÝyout
)(sc, (
ÿddr_t
)sc->
mÿ¡_addrs
,

1801 
	`IE_CMD_MCAST_MADDR
(
cmdbuf
),

1802 
sc
->
mÿ¡_couÁ
 * 
ETHER_ADDR_LEN
);

1804 
sc
->
	`_bus_wre16
(sc, 
	`IE_CMD_MCAST_BYTES
(
cmdbuf
),

1805 
sc
->
mÿ¡_couÁ
 * 
ETHER_ADDR_LEN
);

1808 
cmd»suÉ
 = 
	`i82586_¡¬t_cmd
(
sc
, 
IE_CUC_START
, 
cmdbuf
, 
IE_STAT_COMPL
, 0);

1809 
¡©us
 = 
sc
->
	`_bus_»ad16
(sc, 
	`IE_CMD_COMMON_STATUS
(
cmdbuf
));

1810 ià(
cmd»suÉ
 != 0) {

1811 
	`´tf
("%s: multicast setup commandimed out; status %x\n",

1812 
sc
->
¬pcom
.
ac_if
.
if_Çme
, 
¡©us
);

1815 ià((
¡©us
 & 
IE_STAT_OK
) == 0) {

1816 
	`´tf
("%s: multicast setup command failed; status %x\n",

1817 
sc
->
¬pcom
.
ac_if
.
if_Çme
, 
¡©us
);

1822 
	`_ack
(
sc
, 
IE_ST_WHENCE
);

1824 
	}
}

1835 
	$i82586_
(*
¬g
)

1837 
_soác
 *
sc
 = 
¬g
;

1838 
iâ
 *
iå
 = &
sc
->
¬pcom
.
ac_if
;

1839 
cmd
;

1841 
sc
->
async_cmd_´og»ss
 = 0;

1842 
sc
->
xm_busy
 = 0;

1844 #ià
I82586_DEBUG


1845 
	`mem£t
(
sc
->
aû_æow
, 0, (sc->trace_flow));

1846 
sc
->
aû_æow_w¿p
 = 0;

1848 
sc
->
aû_æow_
 = 0;

1850 
cmd
 = 
sc
->
buf_¬
;

1852 #ià
I82586_DEBUG


1853 
	`´tf
 ("%s: sc_debug0x%08x\n", 
sc
->
¬pcom
.
ac_if
.
if_Çme
, (è&sc->
sc_debug
);

1859 ià(
	`_cfg_£tup
(
sc
, 
cmd
, sc->
´omisc
, 0) == 0)

1865 ià(
	`__£tup
(
sc
, 
cmd
) == 0)

1871 
	`_run_tdr
(
sc
, 
cmd
);

1876 ià(
	`_mc_£tup
(
sc
, 
cmd
) == 0)

1883 ià(
sc
->
_sk
 == 0)

1884 
sc
->
_sk
 = 
	`¹ems_bsdÃt_Ãw´oc
 ("IEi0", 2048, 
i82586__sk
, sc);

1885 ià(
sc
->
tx_sk
 == 0)

1886 
sc
->
tx_sk
 = 
	`¹ems_bsdÃt_Ãw´oc
 ("IEt0", 2048, 
i82586_tx_sk
, sc);

1892 
	`_ack
(
sc
, 
IE_ST_WHENCE
);

1897 
	`i82586_£tup_bufs
(
sc
);

1899 ià(
sc
->
hw
)

1900 (
sc
->
hw
)(sc);

1902 
iå
->
if_æags
 |ð
IFF_RUNNING
;

1903 
iå
->
if_æags
 &ð~
IFF_OACTIVE
;

1905 ià(
NTXBUF
 < 2)

1906 
sc
->
do_xmnÝcha
 = 0;

1908 
	`i82586_¡¬t_ªsûiv
(
sc
);

1909 
	}
}

1915 
	$i82586_¡¬t_ªsûiv
(
_soác
 *
sc
)

1917 #ià
I82586_DEBUG


1918 
	`I82586_TRACE
(
sc
, 
I82586_RX_START
, 0);

1924 
sc
->
	`_bus_wre16
(sc, 
	`IE_RFRAME_BUFDESC
(sc->
räames
,sc->
rfhd
),

1925 
	`IE_RBD_ADDR
(
sc
->
rbds
, sc->
rbhd
));

1927 
sc
->
	`_bus_wre16
(sc, 
	`IE_SCB_RCVLST
(sc->
scb
),

1928 
	`IE_RFRAME_ADDR
(
sc
->
räames
,sc->
rfhd
));

1930 ià(
sc
->
do_xmnÝcha
) {

1932 ià(
	`i82586_¡¬t_cmd
(
sc
, 
IE_CUC_SUSPEND
|
IE_RUC_SUSPEND
, 0, 0, 0))

1933 
	`´tf
("%s: CU/RU stop commandimed out\n",

1934 
sc
->
¬pcom
.
ac_if
.
if_Çme
);

1939 
sc
->
	`_bus_wre16
(sc, 
	`IE_SCB_CMDLST
(sc->
scb
),

1940 
	`IE_CMD_NOP_ADDR
(

1941 
sc
->
nÝ_cmds
,

1942 (
sc
->
xùa
 + 
NTXBUF
 - 1) % NTXBUF));

1944 ià(
	`i82586_¡¬t_cmd
(
sc
, 
IE_CUC_START
|
IE_RUC_START
, 0, 0, 0))

1945 
	`´tf
("%s: CU/RU commandimed out\n",

1946 
sc
->
¬pcom
.
ac_if
.
if_Çme
);

1948 ià(
	`i82586_¡¬t_cmd
(
sc
, 
IE_RUC_START
, 0, 0, 0))

1949 
	`´tf
("%s: RU commandimed out\n",

1950 
sc
->
¬pcom
.
ac_if
.
if_Çme
);

1952 
	}
}

1955 
	$i82586_¡Ý
(
iâ
 *
iå
, 
di§bË
)

1957 
_soác
 *
sc
 = 
iå
->
if_soác
;

1959 ià(
	`i82586_¡¬t_cmd
(
sc
, 
IE_RUC_SUSPEND
 | 
IE_CUC_SUSPEND
, 0, 0, 0))

1960 
	`´tf
("%s: iestop: disable commandsimed out\n",

1961 
sc
->
¬pcom
.
ac_if
.
if_Çme
);

1962 
	}
}

1965 
	$i82586_ioùl
(
iâ
 *
iå
, 
ioùl_commªd_t
 
cmd
, 
ÿddr_t
 
d©a
)

1967 
_soác
 *
sc
 = 
iå
->
if_soác
;

1969 
s
;

1970 
rÜ
 = 0;

1972 
s
 = 
	`¥Ê
();

1973 
cmd
) {

1974 
SIOCGIFMEDIA
:

1975 
SIOCSIFMEDIA
:

1977 
SIO_RTEMS_SHOW_STATS
:

1978 #ià
I82586_DEBUG


1979 
	`´t_soá
(
sc
);

1983 
rÜ
 = 
	`h_ioùl
(
iå
, 
cmd
, 
d©a
);

1984 ià(
rÜ
 =ð
ENETRESET
) {

1989 
	`_mc_»£t
(
sc
);

1990 
rÜ
 = 0;

1994 #ià
I82586_DEBUG


1995 ià(
cmd
 =ð
SIOCSIFFLAGS
)

1996 
sc
->
sc_debug
 = (
iå
->
if_æags
 & 
IFF_DEBUG
è? 
IED_ALL
 : 0;

1998 
	`¥lx
(
s
);

1999  (
rÜ
);

2000 
	}
}

2003 
	$_mc_»£t
(
_soác
 *
sc
)

2005 
h_muÉi
 *
m
;

2006 
h_muÉi¡
 
¡
;

2007 
size
;

2012 
aga
:

2013 
size
 = 0;

2014 
sc
->
mÿ¡_couÁ
 = 0;

2015 
	`ETHER_FIRST_MULTI
(
¡
, &
sc
->
¬pcom
, 
m
);

2016 
m
) {

2017 
size
 += 6;

2018 ià(
sc
->
mÿ¡_couÁ
 >ð
IE_MAXMCAST
 ||

2019 
	`memcmp
(
m
->
m_add¾o
,nm->
m_addrhi
, 6) != 0) {

2020 
sc
->
¬pcom
.
ac_if
.
if_æags
 |ð
IFF_ALLMULTI
;

2021 
	`i82586_ioùl
(&
sc
->
¬pcom
.
ac_if
,

2022 
SIOCSIFFLAGS
, (*)0);

2025 
	`ETHER_NEXT_MULTI
(
¡
, 
m
);

2028 ià(
size
 > 
sc
->
mÿ¡_addrs_size
) {

2030 ià(
sc
->
mÿ¡_addrs_size
)

2031 
	`ä
(
sc
->
mÿ¡_addrs
, 
M_IPMADDR
);

2032 
sc
->
mÿ¡_addrs
 = (*)

2033 
	`m®loc
(
size
, 
M_IPMADDR
, 
M_WAITOK
);

2034 
sc
->
mÿ¡_addrs_size
 = 
size
;

2040 
	`ETHER_FIRST_MULTI
(
¡
, &
sc
->
¬pcom
, 
m
);

2041 
m
) {

2042 ià(
sc
->
mÿ¡_couÁ
 >ð
IE_MAXMCAST
)

2043 
aga
;

2045 
	`memýy
(&
sc
->
mÿ¡_addrs
[sc->
mÿ¡_couÁ
], 
m
->
m_add¾o
, 6);

2046 
sc
->
mÿ¡_couÁ
++;

2047 
	`ETHER_NEXT_MULTI
(
¡
, 
m
);

2049 
sc
->
wªt_mc£tup
 = 1;

2050 
	}
}

2056 
	$i82586_medchªge
(
iâ
 *
iå
)

2058 
_soác
 *
sc
 = 
iå
->
if_soác
;

2060 ià(
sc
->
sc_medchªge
)

2061  ((*
sc
->
sc_medchªge
)(sc));

2063 
	}
}

2069 
	$i82586_med¡©us
(
iâ
 *
iå
, 
ifmed»q
 *
ifmr
)

2071 
_soác
 *
sc
 = 
iå
->
if_soác
;

2073 ià(
sc
->
sc_med¡©us
)

2074 (*
sc
->
sc_med¡©us
)(sc, 
ifmr
);

2075 
	}
}

2077 #ià
I82586_DEBUG


2079 
	$´t_soá
(
_soác
 *
sc
)

2081 *
aû_Ïbs
[] = {

2102 
i
;

2104 
	`´tf
("i82586 %s:\n", 
sc
->
¬pcom
.
ac_if
.
if_Çme
);

2106 
	`´tf
(" ioba£=%p\n", 
sc
->
sc_ioba£
);

2108 
	`´tf
(" scp=0x%08x\t\tiscp=0x%08x\t\tscb=0x%08x\n",

2109 
sc
->
sý
, sc->
isý
, sc->
scb
);

2110 
	`´tf
(" buf_area=0x%08x\tbuf_area_sz=0x%08x\n",

2111 
sc
->
buf_¬
, sc->
buf_¬_sz
);

2112 
	`´tf
("frames=0x%08x\trbds=0x%08x\t\trbufs=0x%08x\n",

2113 
sc
->
räames
, sc->
rbds
, sc->
rbufs
);

2114 
	`´tf
("op_cmds=0x%08x\txmit_cmds=0x%08x\n",

2115 
sc
->
nÝ_cmds
, sc->
xm_cmds
);

2116 
	`´tf
(" xbds=0x%08x\txbufs=0x%08x\n\n",

2117 
sc
->
xbds
, sc->
xbufs
);

2118 
	`´tf
("fhead=%d\trftail=%d\n",

2119 
sc
->
rfhd
, sc->
ráa
);

2120 
	`´tf
("bhead=%d\trbtail=%d\n",

2121 
sc
->
rbhd
, sc->
rb
);

2122 
	`´tf
("frames=%d\tnrxbuf=%d\trnr_expect=%d\n",

2123 
sc
->
näames
, sc->
Äxbuf
, sc->
ºr_ex³ù
);

2124 
	`´tf
(" xchead=%d\txctail=%d\n",

2125 
sc
->
xchd
, sc->
xùa
);

2126 
	`´tf
(" xmit_busy=%d\txmit_req=%d\tdo_xmitnopchain=%d\n",

2127 
sc
->
xm_busy
, sc->
xm_»q
, sc->
do_xmnÝcha
);

2128 
	`´tf
("romisc=%d\tasync_cmd_inprogress=%d\n\n",

2129 
sc
->
´omisc
, sc->
async_cmd_´og»ss
);

2132 
út
;

2133 

;

2134 
lfdÚe
 = 0;

2135 *
bs
;

2137 ià(!
sc
->
aû_æow_w¿p
) {

2138 
út
 = 
sc
->
aû_æow_
;

2139 

 = 0;

2142 
út
 = 
I82586_TRACE_FLOW
;

2143 

 = 
sc
->
aû_æow_
;

2146 
sc
->
aû_æow_
 = sc->
aû_æow_w¿p
 = 0;

2148 
út
 /= 2;

2150 
i
 = 0; i < 
út
; i++) {

2151 ià(!
lfdÚe
) {

2152 
sc
->
aû_æow
[

]) {

2153 
I82586_INTS_REQ
:

2154 
I82586_INTS_IN
:

2155 
	`´tf
("\n");

2159 
lfdÚe
 = 0;

2161 ià(
	`¡¾
(
aû_Ïbs
[
sc
->
aû_æow
[

]]) < 8)

2162 
bs
 = "\t\t";

2164 
bs
 = "\t";

2166 
	`´tf
(" %d\t%s%s0x%08x (%d)\n",

2167 
i
, 
aû_Ïbs
[
sc
->
aû_æow
[

]], 
bs
,

2168 
sc
->
aû_æow
[

 + 1], sc->trace_flow[in + 1]);

2170 
sc
->
aû_æow
[

]) {

2171 
I82586_INTS_REQ
:

2172 
I82586_INTS_OUT
:

2173 
lfdÚe
 = 1;

2174 
	`´tf
("\n");

2177 

 += 2;

2179 ià(

 >ð
I82586_TRACE_FLOW
)

2180 

 = 0;

2183 
	}
}

2186 
	$´t_rbd
(
_soác
 *
sc
, 
n
)

2188 
	`´tf
("RBDt %08x:\n status %04x,ext %04x, buffer %lx\n"

2189 "Ëngth/EOL %04x\n", 
	`IE_RBD_ADDR
(
sc
->
rbds
,
n
),

2190 
sc
->
	`_bus_»ad16
(sc, 
	`IE_RBD_STATUS
(sc->
rbds
,
n
)),

2191 
sc
->
	`_bus_»ad16
(sc, 
	`IE_RBD_NEXT
(sc->
rbds
,
n
)),

2192 (
u_lÚg
)0,

2193 
sc
->
	`_bus_»ad16
(sc, 
	`IE_RBD_BUFLEN
(sc->
rbds
,
n
)));

2194 
	}
}

	@src/libchip/network/i82586reg.h

92 
	s___sys_cÚf_±r
 {

93 
u_t16_t
 
	mmbz
;

94 
u_t8_t
 
	m_bus_u£
;

95 
u_t8_t
 
	mmbz2
[5];

96 
u_t32_t
 
	m_isý_±r
;

99 
	#IE_SCP_SZ
 12

	)

100 
	#IE_SCP_BUS_USE
(
ba£
è((ba£è+ 2)

	)

101 
	#IE_SCP_ISCP
(
ba£
è((ba£è+ 8)

	)

107 
	#IE_SCP_ADDR
 0xfffff4

	)

115 
	s___t_sys_cÚf_±r
 {

116 
u_t8_t
 
	m_busy
;

117 
u_t8_t
 
	mmbz
;

118 
u_t16_t
 
	m_scb_off£t
;

119 
ÿddr_t
 
	m_ba£
;

122 
	#IE_ISCP_SZ
 8

	)

123 
	#IE_ISCP_BUSY
(
ba£
è((ba£è+ 0)

	)

124 
	#IE_ISCP_SCB
(
ba£
è((ba£è+ 2)

	)

125 
	#IE_ISCP_BASE
(
ba£
è((ba£è+ 4)

	)

131 
	s___sys_ùl_block
 {

132 
u_t16_t
 
	m_¡©us
;

133 
u_t16_t
 
	m_commªd
;

134 
u_t16_t
 
	m_commªd_li¡
;

135 
u_t16_t
 
	m_»cv_li¡
;

136 
u_t16_t
 
	m_r_üc
;

137 
u_t16_t
 
	m_r_®ign
;

138 
u_t16_t
 
	m_r_»sourû
;

139 
u_t16_t
 
	m_r_ovrun
;

142 
	#IE_SCB_SZ
 16

	)

143 
	#IE_SCB_STATUS
(
ba£
è((ba£è+ 0)

	)

144 
	#IE_SCB_CMD
(
ba£
è((ba£è+ 2)

	)

145 
	#IE_SCB_CMDLST
(
ba£
è((ba£è+ 4)

	)

146 
	#IE_SCB_RCVLST
(
ba£
è((ba£è+ 6)

	)

147 
	#IE_SCB_ERRCRC
(
ba£
è((ba£è+ 8)

	)

148 
	#IE_SCB_ERRALN
(
ba£
è((ba£è+ 10)

	)

149 
	#IE_SCB_ERRRES
(
ba£
è((ba£è+ 12)

	)

150 
	#IE_SCB_ERROVR
(
ba£
è((ba£è+ 14)

	)

153 
	#IE_RUC_MASK
 0x0070

	)

154 
	#IE_RUC_NOP
 0

	)

155 
	#IE_RUC_START
 0x0010

	)

156 
	#IE_RUC_RESUME
 0x0020

	)

157 
	#IE_RUC_SUSPEND
 0x0030

	)

158 
	#IE_RUC_ABORT
 0x0040

	)

160 
	#IE_CUC_MASK
 0x0700

	)

161 
	#IE_CUC_NOP
 0

	)

162 
	#IE_CUC_START
 0x0100

	)

163 
	#IE_CUC_RESUME
 0x0200

	)

164 
	#IE_CUC_SUSPEND
 0x0300

	)

165 
	#IE_CUC_ABORT
 0x0400

	)

167 
	#IE_ACK_COMMAND
 0xf000

	)

168 
	#IE_ACK_CX
 0x8000

	)

169 
	#IE_ACK_FR
 0x4000

	)

170 
	#IE_ACK_CNA
 0x2000

	)

171 
	#IE_ACK_RNR
 0x1000

	)

173 
	#IE_ACTION_COMMAND
(
x
è(((xè& 
IE_CUC_MASK
è=ð
IE_CUC_START
)

	)

177 
	#IE_ST_WHENCE
 0xf000

	)

178 
	#IE_ST_CX
 0x8000

	)

179 
	#IE_ST_FR
 0x4000

	)

180 
	#IE_ST_CNA
 0x2000

	)

181 
	#IE_ST_RNR
 0x1000

	)

183 
	#IE_CUS_MASK
 0x0700

	)

184 
	#IE_CUS_ACTIVE
 0x0200

	)

185 
	#IE_CUS_SUSPEND
 0x0100

	)

187 
	#IE_RUS_MASK
 0x0070

	)

188 
	#IE_RUS_SUSPEND
 0x0010

	)

189 
	#IE_RUS_NOSPACE
 0x0020

	)

190 
	#IE_RUS_READY
 0x0040

	)

196 
	s___»cv_äame_desc
 {

197 
u_t16_t
 
	m_fd_¡©us
;

198 
u_t16_t
 
	m_fd_Ï¡
;

199 
u_t16_t
 
	m_fd_Ãxt
;

200 
u_t16_t
 
	m_fd_buf_desc
;

201 
____addr
 
	mde¡
;

202 
____addr
 
	m¤c
;

203 
u_t16_t
 
	m_Ëngth
;

204 
u_shÜt
 
	mmbz
;

207 
	#IE_RFRAME_SZ
 24

	)

208 
	#IE_RFRAME_ADDR
(
ba£
,
i
è((ba£è+ (iè* 
IE_RFRAME_SZ
)

	)

209 
	#IE_RFRAME_STATUS
(
b
,
i
è(
	`IE_RFRAME_ADDR
(b,iè+ 0)

	)

210 
	#IE_RFRAME_LAST
(
b
,
i
è(
	`IE_RFRAME_ADDR
(b,iè+ 2)

	)

211 
	#IE_RFRAME_NEXT
(
b
,
i
è(
	`IE_RFRAME_ADDR
(b,iè+ 4)

	)

212 
	#IE_RFRAME_BUFDESC
(
b
,
i
è(
	`IE_RFRAME_ADDR
(b,iè+ 6)

	)

213 
	#IE_RFRAME_EDST
(
b
,
i
è(
	`IE_RFRAME_ADDR
(b,iè+ 8)

	)

214 
	#IE_RFRAME_ESRC
(
b
,
i
è(
	`IE_RFRAME_ADDR
(b,iè+ 14)

	)

215 
	#IE_RFRAME_ELEN
(
b
,
i
è(
	`IE_RFRAME_ADDR
(b,iè+ 20)

	)

218 
	#IE_FD_EOL
 0x8000

	)

219 
	#IE_FD_SUSP
 0x4000

	)

222 
	#IE_FD_COMPLETE
 0x8000

	)

223 
	#IE_FD_BUSY
 0x4000

	)

224 
	#IE_FD_OK
 0x2000

	)

225 
	#IE_FD_CRC
 0x0800

	)

226 
	#IE_FD_ALGN
 0x0400

	)

227 
	#IE_FD_RNR
 0x0200

	)

228 
	#IE_FD_OVR
 0x0100

	)

229 
	#IE_FD_SHORT
 0x0080

	)

230 
	#IE_FD_NOEOF
 0x0040

	)

231 
	#IE_FD_ERRMASK
 \

232 (
IE_FD_CRC
|
IE_FD_ALGN
|
IE_FD_RNR
|
IE_FD_OVR
|
IE_FD_SHORT
|
IE_FD_NOEOF
)

	)

233 
	#IE_FD_STATUSBITS
 \

234 "\20\20COMPLT\17BUSY\16OK\14CRC\13ALGN\12RNR\11OVR\10SHORT\7NOEOF"

	)

240 
	s___»cv_buf_desc
 {

241 
u_t16_t
 
	m_rbd_¡©us
;

242 
u_t16_t
 
	m_rbd_Ãxt
;

243 
ÿddr_t
 
	m_rbd_bufãr
;

244 
u_t16_t
 
	m_rbd_Ëngth
;

245 
u_t16_t
 
	mmbz
;

248 
	#IE_RBD_SZ
 12

	)

249 
	#IE_RBD_ADDR
(
ba£
,
i
è((ba£è+ (iè* 
IE_RBD_SZ
)

	)

250 
	#IE_RBD_STATUS
(
b
,
i
è(
	`IE_RBD_ADDR
(b,iè+ 0)

	)

251 
	#IE_RBD_NEXT
(
b
,
i
è(
	`IE_RBD_ADDR
(b,iè+ 2)

	)

252 
	#IE_RBD_BUFADDR
(
b
,
i
è(
	`IE_RBD_ADDR
(b,iè+ 4)

	)

253 
	#IE_RBD_BUFLEN
(
b
,
i
è(
	`IE_RBD_ADDR
(b,iè+ 8)

	)

256 
	#IE_RBD_LAST
 0x8000

	)

257 
	#IE_RBD_USED
 0x4000

	)

258 
	#IE_RBD_CNTMASK
 0x3ffà

	)

261 
	#IE_RBD_EOL
 0x8000

	)

268 
	s___cmd_commÚ
 {

269 
u_t16_t
 
	m_cmd_¡©us
;

270 
u_t16_t
 
	m_cmd_cmd
;

271 
u_t16_t
 
	m_cmd_lk
;

274 
	#IE_CMD_COMMON_SZ
 6

	)

275 
	#IE_CMD_COMMON_STATUS
(
ba£
è((ba£è+ 0)

	)

276 
	#IE_CMD_COMMON_CMD
(
ba£
è((ba£è+ 2)

	)

277 
	#IE_CMD_COMMON_LINK
(
ba£
è((ba£è+ 4)

	)

279 
	#IE_STAT_COMPL
 0x8000

	)

280 
	#IE_STAT_BUSY
 0x4000

	)

281 
	#IE_STAT_OK
 0x2000

	)

282 
	#IE_STAT_ABORT
 0x1000

	)

284 
	#IE_CMD_NOP
 0x0000

	)

285 
	#IE_CMD_IASETUP
 0x0001

	)

286 
	#IE_CMD_CONFIG
 0x0002

	)

287 
	#IE_CMD_MCAST
 0x0003

	)

288 
	#IE_CMD_XMIT
 0x0004

	)

289 
	#IE_CMD_TDR
 0x0005

	)

290 
	#IE_CMD_DUMP
 0x0006

	)

291 
	#IE_CMD_DIAGNOSE
 0x0007

	)

293 
	#IE_CMD_LAST
 0x8000

	)

294 
	#IE_CMD_SUSPEND
 0x4000

	)

295 
	#IE_CMD_INTR
 0x2000

	)

300 
	#IE_CMD_NOP_SZ
 
IE_CMD_COMMON_SZ


	)

301 
	#IE_CMD_NOP_ADDR
(
ba£
,
i
è((ba£è+ (iè* 
IE_CMD_NOP_SZ
)

	)

302 
	#IE_CMD_NOP_STATUS
(
b
,
i
è(
	`IE_CMD_NOP_ADDR
(b,iè+ 0)

	)

303 
	#IE_CMD_NOP_CMD
(
b
,
i
è(
	`IE_CMD_NOP_ADDR
(b,iè+ 2)

	)

304 
	#IE_CMD_NOP_LINK
(
b
,
i
è(
	`IE_CMD_NOP_ADDR
(b,iè+ 4)

	)

311 
	s___xm_cmd
 {

312 
___cmd_commÚ
 
	mcom
;

313 
	#___xm_¡©us
 
com
.
_cmd_¡©us


	)

315 
u_t16_t
 
	m_xm_desc
;

316 
____addr
 
	m_xm_addr
;

317 
u_t16_t
 
	m_xm_Ëngth
;

320 
	#IE_CMD_XMIT_SZ
 (
IE_CMD_COMMON_SZ
 + 10)

	)

321 
	#IE_CMD_XMIT_ADDR
(
ba£
,
i
è((ba£è+ (iè* 
IE_CMD_XMIT_SZ
)

	)

322 
	#IE_CMD_XMIT_STATUS
(
b
,
i
) \

323 (
	`IE_CMD_XMIT_ADDR
(
b
,
i
è+ 0è

	)

324 
	#IE_CMD_XMIT_CMD
(
b
,
i
) \

325 (
	`IE_CMD_XMIT_ADDR
(
b
,
i
è+ 2è

	)

326 
	#IE_CMD_XMIT_LINK
(
b
,
i
) \

327 (
	`IE_CMD_XMIT_ADDR
(
b
,
i
è+ 4è

	)

328 
	#IE_CMD_XMIT_DESC
(
b
,
i
) \

329 (
	`IE_CMD_XMIT_ADDR
(
b
,
i
è+ 
IE_CMD_COMMON_SZ
 + 0)

	)

330 
	#IE_CMD_XMIT_EADDR
(
b
,
i
) \

331 (
	`IE_CMD_XMIT_ADDR
(
b
,
i
è+ 
IE_CMD_COMMON_SZ
 + 2)

	)

332 
	#IE_CMD_XMIT_LEN
(
b
,
i
) \

333 (
	`IE_CMD_XMIT_ADDR
(
b
,
i
è+ 
IE_CMD_COMMON_SZ
 + 8)

	)

335 
	#IE_XS_MAXCOLL
 0x000à

	)

336 
	#IE_XS_EXCMAX
 0x0020

	)

337 
	#IE_XS_SQE
 0x0040

	)

338 
	#IE_XS_DEFERRED
 0x0080

	)

339 
	#IE_XS_UNDERRUN
 0x0100

	)

340 
	#IE_XS_LOSTCTS
 0x0200

	)

341 
	#IE_XS_NOCARRIER
 0x0400

	)

342 
	#IE_XS_LATECOLL
 0x0800

	)

348 
	s___xm_buf
 {

349 
u_t16_t
 
	m_xm_æags
;

350 
u_t16_t
 
	m_xm_Ãxt
;

351 
ÿddr_t
 
	m_xm_buf
;

354 
	#IE_XBD_SZ
 8

	)

355 
	#IE_XBD_ADDR
(
ba£
,
i
è((ba£è+ (iè* 
IE_XBD_SZ
)

	)

356 
	#IE_XBD_FLAGS
(
b
,
i
è(
	`IE_XBD_ADDR
(b,iè+ 0)

	)

357 
	#IE_XBD_NEXT
(
b
,
i
è(
	`IE_XBD_ADDR
(b,iè+ 2)

	)

358 
	#IE_XBD_BUF
(
b
,
i
è(
	`IE_XBD_ADDR
(b,iè+ 4)

	)

360 
	#IE_TBD_EOL
 0x8000

	)

361 
	#IE_TBD_CNTMASK
 0x3ffà

	)

369 
	s___mÿ¡_cmd
 {

370 
___cmd_commÚ
 
	mcom
;

371 
	#_mÿ¡_¡©us
 
com
.
_cmd_¡©us


	)

374 
u_shÜt
 
	m_mÿ¡_bys
;

375 
____addr
 
	m_mÿ¡_addrs
[
IE_MAXMCAST
 + 1];

378 
	#IE_CMD_MCAST_SZ
 (
IE_CMD_COMMON_SZ
 + 2 )

	)

379 
	#IE_CMD_MCAST_BYTES
(
ba£
è((ba£è+ 
IE_CMD_COMMON_SZ
 + 0)

	)

380 
	#IE_CMD_MCAST_MADDR
(
ba£
è((ba£è+ 
IE_CMD_COMMON_SZ
 + 2)

	)

386 
	s___tdr_cmd
 {

387 
___cmd_commÚ
 
	mcom
;

388 
	#_tdr_¡©us
 
com
.
_cmd_¡©us


	)

389 
u_shÜt
 
	m_tdr_time
;

392 
	#IE_CMD_TDR_SZ
 (
IE_CMD_COMMON_SZ
 + 2)

	)

393 
	#IE_CMD_TDR_TIME
(
ba£
è((ba£è+ 
IE_CMD_COMMON_SZ
 + 0)

	)

395 
	#IE_TDR_SUCCESS
 0x8000

	)

396 
	#IE_TDR_XCVR
 0x4000

	)

397 
	#IE_TDR_OPEN
 0x2000

	)

398 
	#IE_TDR_SHORT
 0x1000

	)

399 
	#IE_TDR_TIME
 0x07fà

	)

405 
	s___£tup_cmd
 {

406 
___cmd_commÚ
 
	mcom
;

407 
	#_£tup_¡©us
 
com
.
_cmd_¡©us


	)

408 
____addr
 
	m_add»ss
;

411 
	#IE_CMD_IAS_SZ
 (
IE_CMD_COMMON_SZ
 + 6)

	)

412 
	#IE_CMD_IAS_EADDR
(
ba£
è((ba£è+ 
IE_CMD_COMMON_SZ
 + 0)

	)

418 
	s___cÚfig_cmd
 {

419 
___cmd_commÚ
 
	mcom
;

420 
	#_cÚfig_¡©us
 
com
.
_cmd_¡©us


	)

422 
u_t8_t
 
	m_cÚfig_couÁ
;

423 
u_t8_t
 
	m_fifo
;

424 
u_t8_t
 
	m_§ve_bad
;

425 
u_t8_t
 
	m_addr_Ën
;

426 
u_t8_t
 
	m_´iÜy
;

427 
u_t8_t
 
	m_ifs
;

428 
u_t8_t
 
	m_¦Ù_low
;

429 
u_t8_t
 
	m_¦Ù_high
;

430 
u_t8_t
 
	m_´omisc
;

431 
u_t8_t
 
	m_üs_cdt
;

432 
u_t8_t
 
	m_m_Ën
;

433 
u_t8_t
 
	m_junk
;

436 
	#IE_CMD_CFG_SZ
 (
IE_CMD_COMMON_SZ
 + 12)

	)

437 
	#IE_CMD_CFG_CNT
(
ba£
è((ba£è+ 
IE_CMD_COMMON_SZ
 + 0)

	)

438 
	#IE_CMD_CFG_FIFO
(
ba£
è((ba£è+ 
IE_CMD_COMMON_SZ
 + 1)

	)

439 
	#IE_CMD_CFG_SAVEBAD
(
ba£
è((ba£è+ 
IE_CMD_COMMON_SZ
 + 2)

	)

440 
	#IE_CMD_CFG_ADDRLEN
(
ba£
è((ba£è+ 
IE_CMD_COMMON_SZ
 + 3)

	)

441 
	#IE_CMD_CFG_PRIORITY
(
ba£
è((ba£è+ 
IE_CMD_COMMON_SZ
 + 4)

	)

442 
	#IE_CMD_CFG_IFS
(
ba£
è((ba£è+ 
IE_CMD_COMMON_SZ
 + 5)

	)

443 
	#IE_CMD_CFG_SLOT_LOW
(
ba£
è((ba£è+ 
IE_CMD_COMMON_SZ
 + 6)

	)

444 
	#IE_CMD_CFG_SLOT_HIGH
(
ba£
è((ba£è+ 
IE_CMD_COMMON_SZ
 + 7)

	)

445 
	#IE_CMD_CFG_PROMISC
(
ba£
è((ba£è+ 
IE_CMD_COMMON_SZ
 + 8)

	)

446 
	#IE_CMD_CFG_CRSCDT
(
ba£
è((ba£è+ 
IE_CMD_COMMON_SZ
 + 9)

	)

447 
	#IE_CMD_CFG_MINLEN
(
ba£
è((ba£è+ 
IE_CMD_COMMON_SZ
 + 10)

	)

448 
	#IE_CMD_CFG_JUNK
(
ba£
è((ba£è+ 
IE_CMD_COMMON_SZ
 + 11)

	)

	@src/libchip/network/i82586var.h

100 #iâdeà
I82586_DEBUG


101 
	#I82586_DEBUG
 0

	)

105 
	#IED_RINT
 0x01

	)

106 
	#IED_TINT
 0x02

	)

107 
	#IED_RNR
 0x04

	)

108 
	#IED_CNA
 0x08

	)

109 
	#IED_READFRAME
 0x10

	)

110 
	#IED_ENQ
 0x20

	)

111 
	#IED_XMIT
 0x40

	)

112 
	#IED_ALL
 0x7f

	)

114 
	#B_PER_F
 3

	)

115 
	#IE_RBUF_SIZE
 256

	)

117 
	#NTXBUF
 2

	)

118 
	#IE_TBUF_SIZE
 
ETHER_MAX_LEN


	)

120 
	#IE_MAXMCAST
 (
IE_TBUF_SIZE
/6)

	)

123 
	#INTR_ENTER
 0

	)

124 
	#INTR_EXIT
 1

	)

125 
	#INTR_LOOP
 2

	)

126 
	#INTR_ACK
 3

	)

128 
	#CHIP_PROBE
 0

	)

129 
	#CARD_RESET
 1

	)

131 #ià
I82586_DEBUG


132 
	#I82586_INTS_REQ
 0

	)

133 
	#I82586_INTS_IN
 1

	)

134 
	#I82586_INTS_LOOPS
 2

	)

135 
	#I82586_INTS_OUT
 3

	)

136 
	#I82586_RX_INT
 4

	)

137 
	#I82586_RX_DROP
 5

	)

138 
	#I82586_RX_ERR
 6

	)

139 
	#I82586_RX_OK
 7

	)

140 
	#I82586_RX_START
 8

	)

141 
	#I82586_START_TX
 9

	)

142 
	#I82586_TX_START
 10

	)

143 
	#I82586_TX_INT
 11

	)

144 
	#I82586_TX_REQ
 12

	)

145 
	#I82586_TX_EVT
 13

	)

146 
	#I82586_TX_EMIT
 14

	)

147 
	#I82586_TX_BAD
 15

	)

148 
	#I82586_TX_ACTIVE
 16

	)

149 
	#I82586_TRACE_CNT
 17

	)

151 
	#I82586_TRACE_FLOW
 (10000)

	)

198 
	s_soác
 {

199 
¬pcom
 
	m¬pcom
;

206 
¹ems_id
 
	m_sk
;

207 
¹ems_id
 
	mtx_sk
;

209 *
	msc_ioba£
;

210 *
	msc_maddr
;

212 
u_t
 
	msc_msize
;

215 (*
	mhw»£t
è(
	m_soác
 *, );

216 (*
	mhw
è(
	m_soác
 *);

217 (*
	mchª_©
è(
	m_soác
 *, );

218 (*
	mhook
è(
	m_soác
 *, 
	mwhe
);

220 (*
	mmemcÝy
è(
	m_soác
 *, *, , 
	msize_t
);

221 (*
	mmemcÝyout
è(
	m_soác
 *, const *,

222 , 
	msize_t
);

223 
u_t16_t
 (*
_bus_»ad16
è(
	m_soác
 *, 
	moff£t
);

224 (*
	m_bus_wre16
è(
	m_soác
 *, 
	moff£t
,

225 
u_t16_t
 
	mv®ue
);

226 (*
	m_bus_wre24
è(
	m_soác
 *, 
	moff£t
,

227 
	maddr
);

228 (*
	m_bus_b¬rr
è(
	m_soác
 *, 
	moff£t
,

229 
	mËngth
, 
	mæags
);

232 (*
	msc_medchªge
è(
	m_soác
 *);

234 (*
	msc_med¡©us
è(
	m_soác
 *, 
	mifmed»q
 *);

240 
	msý
;

241 
	misý
;

242 
	mscb
;

248 
	mbuf_¬
;

249 
	mbuf_¬_sz
;

254 
	mräames
;

255 
	mrbds
;

256 
	mrbufs
;

257 
	#IE_RBUF_ADDR
(
sc
, 
i
è(sc->
rbufs
 + ((iè* 
IE_RBUF_SIZE
))

	)

258 
	mrfhd
, 
	mráa
;

259 
	mrbhd
, 
	mrb
;

260 
	mnäames
;

261 
	mÄxbuf
;

262 
	mºr_ex³ù
;

264 
	mnÝ_cmds
;

265 
	mxm_cmds
;

266 
	mxbds
;

267 
	mxbufs
;

268 
	#IE_XBUF_ADDR
(
sc
, 
i
è(sc->
xbufs
 + ((iè* 
IE_TBUF_SIZE
))

	)

270 
	mxchd
, 
	mxùa
;

271 
	mxm_busy
;

272 
	mdo_xmnÝcha
;

273 
	mxm_»q
;

276 *
	mmÿ¡_addrs
;

277 
	mmÿ¡_addrs_size
;

278 
	mmÿ¡_couÁ
;

279 
	mwªt_mc£tup
;

281 
	m´omisc
;

282 
	masync_cmd_´og»ss
;

285 #ià
I82586_DEBUG


286 
	#I82586_TRACE
(
s
, 
e
, 
d
) \

287 dØ{ 
¹ems_¼u±_Ëv
 
Ëv
; 
	`¹ems_¼u±_di§bË
 (level); \

288 (
s
)->
aû_æow
[(s)->
aû_æow_
++] = (
e
); \

289 (
s
)->
aû_æow
[(s)->
aû_æow_
++] = ()(
d
); \

290 ià((
s
)->
aû_æow_
 >ð
I82586_TRACE_FLOW
) { \

291 (
s
)->
aû_æow_
 = 0; \

292 (
s
)->
aû_æow_w¿p
 = 1; \

294 
	`¹ems_¼u±_abË
 (
Ëv
); \

295 } 0)

	)

297 
	msc_debug
;

298 
	maû_æow
[
I82586_TRACE_FLOW
 * 2];

299 
	maû_æow_w¿p
;

301 
	maû_æow_
;

305 
¹ems_i¤
 
i82586_
 (
¹ems_veùÜ_numb
 , *);

306 
i82586_´obam
 (
_soác
 *);

307 
i82586_©ch
 (
¹ems_bsdÃt_ifcÚfig
 *
cÚfig
, 
©chg
);

310 
	#xIE_BUS_BARRIER
(
sc
, 
off£t
, 
Ëngth
, 
æags
) \

312 ià((
sc
)->
_bus_b¬rr
) \

313 ((
sc
)->
_bus_b¬rr
)((sc), (
off£t
), (
Ëngth
), (
æags
));\

315 
	`bus_¥aû_b¬rr
((
sc
)->
bt
, (sc)->
bh
, (
off£t
), (
Ëngth
), \

316 (
æags
)); \

317 } 0)

	)

319 
	#IE_BUS_BARRIER
(
sc
, 
off£t
, 
Ëngth
, 
æags
)

	)

	@src/libchip/network/if_dc.c

102 #ià
defed
(
DRIVER_SUPPORTED
)

103 #undeà
DRIVER_SUPPORTED


106 #ià
defed
(
__i386__
)

107 
	#DRIVER_SUPPORTED


	)

110 #ià
defed
(
__PPC__
)

111 
	#DRIVER_SUPPORTED


	)

114 
	~<b¥.h
>

116 #ià!
defed
(
PCI_DRAM_OFFSET
)

117 #undeà
DRIVER_SUPPORTED


120 #ià
defed
(
DRIVER_SUPPORTED
)

121 
	~<¹ems/pci.h
>

123 
	~<¹ems/rÜ.h
>

124 
	~<ºo.h
>

125 
	~<¹ems/¹ems_bsdÃt.h
>

127 
	~<Ãt/if_ty³s.h
>

129 
	~<sys/·¿m.h
>

130 
	~<sys/sockio.h
>

131 
	~<sys/sock.h
>

132 
	~<sys/mbuf.h
>

133 
	~<Ãt/if.h
>

134 
	~<Ãt/.h
>

135 
	~<Ãt/if_h.h
>

136 
	~<sys/m®loc.h
>

137 
	~<sys/sy¡m.h
>

138 
	~<b¥.h
>

143 
	~<Ãt/if_med.h
>

144 
	~<¹ems/pci.h
>

150 
	~<vm/vm.h
>

153 
	#vtÝhys
(
p
è(
u_t
)Õ)

	)

162 
	~<vm/pm­.h
>

163 
	~<mache/þock.h
>

164 
	~<mache/bus_pio.h
>

165 
	~<mache/bus_memio.h
>

166 
	~<mache/bus.h
>

167 
	~<mache/»sourû.h
>

168 
	~<sys/bus.h
>

169 
	~<sys/rmª.h
>

171 
	~<dev/mii/mii.h
>

173 
	~<dev/mii/miiv¬.h
>

175 
	~<pci/pceg.h
>

176 
	~<pci/pciv¬.h
>

183 #ifdeà
__®pha__


184 
	#SRM_MEDIA


	)

187 
	~<b¥/q.h
>

190 
	~"if_düeg.h
"

193 
	#DRIVER_PREFIX
 ""

	)

194 
	#NDRIVER
 1

	)

195 
	#IRQ_EVENT
 
RTEMS_EVENT_13


	)

196 
dc_soác
 
	gdc_soác_devs
[
NDRIVER
];

198 
	#UNUSED


	)

202 
	~"miibus_if.h
"

206 #iâdeà
lt


207 cÚ¡ 
	grcsid
[] =

220 
dc_ty³
 
	gdc_devs
[] = {

221 { 
DC_VENDORID_DEC
, 
DC_DEVICEID_21143
,

223 { 
DC_VENDORID_DAVICOM
, 
DC_DEVICEID_DM9009
,

225 { 
DC_VENDORID_DAVICOM
, 
DC_DEVICEID_DM9100
,

227 { 
DC_VENDORID_DAVICOM
, 
DC_DEVICEID_DM9102
,

229 { 
DC_VENDORID_DAVICOM
, 
DC_DEVICEID_DM9102
,

231 { 
DC_VENDORID_ADMTEK
, 
DC_DEVICEID_AL981
,

233 { 
DC_VENDORID_ADMTEK
, 
DC_DEVICEID_AN985
,

235 { 
DC_VENDORID_ASIX
, 
DC_DEVICEID_AX88140A
,

237 { 
DC_VENDORID_ASIX
, 
DC_DEVICEID_AX88140A
,

239 { 
DC_VENDORID_MX
, 
DC_DEVICEID_98713
,

241 { 
DC_VENDORID_MX
, 
DC_DEVICEID_98713
,

243 { 
DC_VENDORID_CP
, 
DC_DEVICEID_98713_CP
,

245 { 
DC_VENDORID_CP
, 
DC_DEVICEID_98713_CP
,

247 { 
DC_VENDORID_MX
, 
DC_DEVICEID_987x5
,

249 { 
DC_VENDORID_MX
, 
DC_DEVICEID_987x5
,

251 { 
DC_VENDORID_MX
, 
DC_DEVICEID_987x5
,

253 { 
DC_VENDORID_MX
, 
DC_DEVICEID_98727
,

255 { 
DC_VENDORID_LO
, 
DC_DEVICEID_82C115
,

257 { 
DC_VENDORID_LO
, 
DC_DEVICEID_82C168
,

259 { 
DC_VENDORID_LO
, 
DC_DEVICEID_82C168
,

261 { 
DC_VENDORID_ACCTON
, 
DC_DEVICEID_EN1217
,

263 { 
DC_VENDORID_ACCTON
, 
DC_DEVICEID_EN2242
,

265 { 
DC_VENDORID_CONEXANT
, 
DC_DEVICEID_RS7112
,

267 { 0, 0, 
NULL
, 0 }

271 
dc_´obe
 
__P
((
deviû_t
));

272 
dc_©ch
 
__P
((
deviû_t
));

273 
dc_dach
 
__P
((
deviû_t
));

274 
dc_su¥d
 
__P
((
deviû_t
));

275 
dc_»sume
 
__P
((
deviû_t
));

276 
dc_shutdown
 
__P
((
deviû_t
));

277 
dc_aýi
 
__P
((
deviû_t
));

280 
dc_ty³
 *
dc_devty³
();

281 
dc_Ãwbuf
(
dc_soác
 *, , 
mbuf
 *);

282 
dc_ÿp
(
dc_soác
 *, 
mbuf
 *,

283 
u_t32_t
 *);

284 
dc_cßl
(
dc_soác
 *, 
mbuf
 **);

285 
dc_²ic_rx_bug_w¬
(
dc_soác
 *, );

286 
dc_rx_»sync
(
dc_soác
 *);

287 
dc_rxeof
(
dc_soác
 *);

288 
dc_txeof
(
dc_soác
 *);

290 
dc_tx_undrun
(
dc_soác
 *);

291 
dc_
(*);

292 
dc_d«mÚ
(*);

293 
dc_¡¬t
(
iâ
 *);

294 
dc_ioùl
(
iâ
 *, 
ioùl_commªd_t
, 
ÿddr_t
);

295 
dc_
(*);

296 
dc_¡Ý
(
dc_soác
 *);

297 
dc_w©chdog
(
iâ
 *);

299 
dc_ifmed_upd
 
__P
((
iâ
 *));

300 
dc_ifmed_¡s
 
__P
((
iâ
 *, 
ifmed»q
 *));

303 
dc_day
(
dc_soác
 *);

304 
dc_´om_idË
(
dc_soác
 *);

305 
dc_´om_putby
(
dc_soác
 *, );

306 
dc_´om_gwÜd
(
dc_soác
 *, , 
u_t16_t
 *);

307 
dc_´om_gwÜd_²ic
(
dc_soác
 *, , 
u_t16_t
 *);

308 
dc_´om_width
(
dc_soác
 *);

309 
dc_»ad_´om
(
dc_soác
 *, 
ÿddr_t
, ,, );

312 
dc_mii_wreb
 
__P
((
dc_soác
 *, ));

313 
dc_mii_»adb
 
__P
((
dc_soác
 *));

314 
dc_mii_sync
 
__P
((
dc_soác
 *));

315 
dc_mii_£nd
 
__P
((
dc_soác
 *, 
u_t32_t
, ));

316 
dc_mii_»ad»g
 
__P
((
dc_soác
 *, 
dc_mii_äame
 *));

317 
dc_mii_wreg
 
__P
((
dc_soác
 *, 
dc_mii_äame
 *));

318 
dc_miibus_»ad»g
 
__P
((
deviû_t
, , ));

319 
dc_miibus_wreg
 
__P
((
deviû_t
, , , ));

320 
dc_miibus_¡©chg
 
__P
((
deviû_t
));

321 
dc_miibus_med
 
__P
((
deviû_t
));

324 
dc_£tcfg
(
dc_soác
 *, );

325 
u_t32_t
 
dc_üc_Ë
(
dc_soác
 *, 
ÿddr_t
);

326 #iâdeà
UNUSED


327 
u_t32_t
 
dc_üc_be
(
ÿddr_t
);

329 
dc_£tft_21143
(
dc_soác
 *);

330 
dc_£tft_asix
(
dc_soác
 *);

331 
dc_£tft_admk
(
dc_soác
 *);

332 
dc_£tft
(
dc_soác
 *);

333 
dc_»£t
(
dc_soác
 *);

334 
dc_li¡_rx_
(
dc_soác
 *);

335 
dc_li¡_tx_
(
dc_soác
 *);

336 
dc_»ad_¤om
(
dc_soác
 *, );

337 
dc_·r£_21143_¤om
(
dc_soác
 *);

338 
dc_­¶y_fixup
(
dc_soác
 *, );

341 
dc_decode_Ëaf_s
 
__P
((
dc_soác
 *,

342 
dc_eblock_s
 *));

343 
dc_decode_Ëaf_mii
 
__P
((
dc_soác
 *,

344 
dc_eblock_mii
 *));

345 
dc_decode_Ëaf_sym
 
__P
((
dc_soác
 *,

346 
dc_eblock_sym
 *));

350 #ifdeà
DC_USEIOSPACE


351 
	#DC_RES
 
SYS_RES_IOPORT


	)

352 
	#DC_RID
 
DC_PCI_CFBIO


	)

354 
	#DC_RES
 
SYS_RES_MEMORY


	)

355 
	#DC_RID
 
DC_PCI_CFBMA


	)

359 
deviû_mhod_t
 
	gdc_mhods
[] = {

361 
DEVMETHOD
(
deviû_´obe
, 
dc_´obe
),

362 
DEVMETHOD
(
deviû_©ch
, 
dc_©ch
),

363 
DEVMETHOD
(
deviû_dach
, 
dc_dach
),

364 
DEVMETHOD
(
deviû_su¥d
, 
dc_su¥d
),

365 
DEVMETHOD
(
deviû_»sume
, 
dc_»sume
),

366 
DEVMETHOD
(
deviû_shutdown
, 
dc_shutdown
),

369 
DEVMETHOD
(
bus_´t_chd
, 
bus_gic_´t_chd
),

370 
DEVMETHOD
(
bus_driv_added
, 
bus_gic_driv_added
),

373 
DEVMETHOD
(
miibus_»ad»g
, 
dc_miibus_»ad»g
),

374 
DEVMETHOD
(
miibus_wreg
, 
dc_miibus_wreg
),

375 
DEVMETHOD
(
miibus_¡©chg
, 
dc_miibus_¡©chg
),

376 
DEVMETHOD
(
miibus_med
, 
dc_miibus_med
),

381 
driv_t
 
	gdc_driv
 = {

383 
dc_mhods
,

384 (
dc_soác
)

387 
devþass_t
 
	gdc_devþass
;

391 #ifdeà
__i386__


392 
	gdc_quick
=1;

394 
SYSCTL_INT
(
_hw
, 
OID_AUTO
, 
dc_quick
, 
CTLFLAG_RW
,

395 &
dc_quick
,0,"doot mdevget in dc driver");

400 
DRIVER_MODULE
(
if_dc
, 
pci
, 
dc_driv
, 
dc_devþass
, 0, 0);

401 
DRIVER_MODULE
(
miibus
, 
dc
, 
miibus_driv
, 
miibus_devþass
, 0, 0);

405 
	#DC_SETBIT
(
sc
, 
»g
, 
x
) \

406 
	`CSR_WRITE_4
(
sc
, 
»g
, 
	`CSR_READ_4
(sc,egè| (
x
))

	)

408 
	#DC_CLRBIT
(
sc
, 
»g
, 
x
) \

409 
	`CSR_WRITE_4
(
sc
, 
»g
, 
	`CSR_READ_4
(sc,egè& ~(
x
))

	)

411 
	#SIO_SET
(
x
è
	`DC_SETBIT
(
sc
, 
DC_SIO
, (x))

	)

412 
	#SIO_CLR
(
x
è
	`DC_CLRBIT
(
sc
, 
DC_SIO
, (x))

	)

420 #ifdeà
__i386__


421 
Wa_X_ms
( );

422 
	#DELAY
(
n
è
	`Wa_X_ms
Ð()(Ò)/100è)

	)

424 
	#DELAY
(
n
è
	`¹ems_b¥_day
Ò)

	)

428 
	$dc_day
(
sc
)

429 
dc_soác
 *
sc
;

431 
idx
;

433 
idx
 = (300 / 33) + 1; idx > 0; idx--)

434 
	`CSR_READ_4
(
sc
, 
DC_BUSCTL
);

435 
	}
}

437 
	$dc_´om_width
(
sc
)

438 
dc_soác
 *
sc
;

440 
i
;

443 
	`dc_´om_idË
(
sc
);

446 
	`CSR_WRITE_4
(
sc
, 
DC_SIO
, 
DC_SIO_EESEL
);

447 
	`dc_day
(
sc
);

448 
	`DC_SETBIT
(
sc
, 
DC_SIO
, 
DC_SIO_ROMCTL_READ
);

449 
	`dc_day
(
sc
);

450 
	`DC_CLRBIT
(
sc
, 
DC_SIO
, 
DC_SIO_EE_CLK
);

451 
	`dc_day
(
sc
);

452 
	`DC_SETBIT
(
sc
, 
DC_SIO
, 
DC_SIO_EE_CS
);

453 
	`dc_day
(
sc
);

455 
i
 = 3; i--;) {

456 ià(6 & (1 << 
i
))

457 
	`DC_SETBIT
(
sc
, 
DC_SIO
, 
DC_SIO_EE_DATAIN
);

459 
	`DC_CLRBIT
(
sc
, 
DC_SIO
, 
DC_SIO_EE_DATAIN
);

460 
	`dc_day
(
sc
);

461 
	`DC_SETBIT
(
sc
, 
DC_SIO
, 
DC_SIO_EE_CLK
);

462 
	`dc_day
(
sc
);

463 
	`DC_CLRBIT
(
sc
, 
DC_SIO
, 
DC_SIO_EE_CLK
);

464 
	`dc_day
(
sc
);

467 
i
 = 1; i <= 12; i++) {

468 
	`DC_SETBIT
(
sc
, 
DC_SIO
, 
DC_SIO_EE_CLK
);

469 
	`dc_day
(
sc
);

470 ià(!(
	`CSR_READ_4
(
sc
, 
DC_SIO
è& 
DC_SIO_EE_DATAOUT
)) {

471 
	`DC_CLRBIT
(
sc
, 
DC_SIO
, 
DC_SIO_EE_CLK
);

472 
	`dc_day
(
sc
);

475 
	`DC_CLRBIT
(
sc
, 
DC_SIO
, 
DC_SIO_EE_CLK
);

476 
	`dc_day
(
sc
);

480 
	`dc_´om_idË
(
sc
);

482 ià(
i
 < 4 || i > 12)

483 
sc
->
dc_romwidth
 = 6;

485 
sc
->
dc_romwidth
 = 
i
;

488 
	`CSR_WRITE_4
(
sc
, 
DC_SIO
, 
DC_SIO_EESEL
);

489 
	`dc_day
(
sc
);

490 
	`DC_SETBIT
(
sc
, 
DC_SIO
, 
DC_SIO_ROMCTL_READ
);

491 
	`dc_day
(
sc
);

492 
	`DC_CLRBIT
(
sc
, 
DC_SIO
, 
DC_SIO_EE_CLK
);

493 
	`dc_day
(
sc
);

494 
	`DC_SETBIT
(
sc
, 
DC_SIO
, 
DC_SIO_EE_CS
);

495 
	`dc_day
(
sc
);

498 
	`dc_´om_idË
(
sc
);

499 
	}
}

501 
	$dc_´om_idË
(
sc
)

502 
dc_soác
 *
sc
;

504 
i
;

506 
	`CSR_WRITE_4
(
sc
, 
DC_SIO
, 
DC_SIO_EESEL
);

507 
	`dc_day
(
sc
);

508 
	`DC_SETBIT
(
sc
, 
DC_SIO
, 
DC_SIO_ROMCTL_READ
);

509 
	`dc_day
(
sc
);

510 
	`DC_CLRBIT
(
sc
, 
DC_SIO
, 
DC_SIO_EE_CLK
);

511 
	`dc_day
(
sc
);

512 
	`DC_SETBIT
(
sc
, 
DC_SIO
, 
DC_SIO_EE_CS
);

513 
	`dc_day
(
sc
);

515 
i
 = 0; i < 25; i++) {

516 
	`DC_CLRBIT
(
sc
, 
DC_SIO
, 
DC_SIO_EE_CLK
);

517 
	`dc_day
(
sc
);

518 
	`DC_SETBIT
(
sc
, 
DC_SIO
, 
DC_SIO_EE_CLK
);

519 
	`dc_day
(
sc
);

522 
	`DC_CLRBIT
(
sc
, 
DC_SIO
, 
DC_SIO_EE_CLK
);

523 
	`dc_day
(
sc
);

524 
	`DC_CLRBIT
(
sc
, 
DC_SIO
, 
DC_SIO_EE_CS
);

525 
	`dc_day
(
sc
);

526 
	`CSR_WRITE_4
(
sc
, 
DC_SIO
, 0x00000000);

529 
	}
}

534 
	$dc_´om_putby
(
sc
, 
addr
)

535 
dc_soác
 *
sc
;

536 
addr
;

538 
d
, 
i
;

540 
d
 = 
DC_EECMD_READ
 >> 6;

541 
i
 = 3; i--; ) {

542 ià(
d
 & (1 << 
i
))

543 
	`DC_SETBIT
(
sc
, 
DC_SIO
, 
DC_SIO_EE_DATAIN
);

545 
	`DC_CLRBIT
(
sc
, 
DC_SIO
, 
DC_SIO_EE_DATAIN
);

546 
	`dc_day
(
sc
);

547 
	`DC_SETBIT
(
sc
, 
DC_SIO
, 
DC_SIO_EE_CLK
);

548 
	`dc_day
(
sc
);

549 
	`DC_CLRBIT
(
sc
, 
DC_SIO
, 
DC_SIO_EE_CLK
);

550 
	`dc_day
(
sc
);

556 
i
 = 
sc
->
dc_romwidth
; i--;) {

557 ià(
addr
 & (1 << 
i
)) {

558 
	`SIO_SET
(
DC_SIO_EE_DATAIN
);

560 
	`SIO_CLR
(
DC_SIO_EE_DATAIN
);

562 
	`dc_day
(
sc
);

563 
	`SIO_SET
(
DC_SIO_EE_CLK
);

564 
	`dc_day
(
sc
);

565 
	`SIO_CLR
(
DC_SIO_EE_CLK
);

566 
	`dc_day
(
sc
);

570 
	}
}

577 
	$dc_´om_gwÜd_²ic
(
sc
, 
addr
, 
de¡
)

578 
dc_soác
 *
sc
;

579 
addr
;

580 
u_t16_t
 *
de¡
;

582 
i
;

583 
u_t32_t
 
r
;

585 
	`CSR_WRITE_4
(
sc
, 
DC_PN_SIOCTL
, 
DC_PN_EEOPCODE_READ
|
addr
);

587 
i
 = 0; i < 
DC_TIMEOUT
; i++) {

588 
	`DELAY
(1);

589 
r
 = 
	`CSR_READ_4
(
sc
, 
DC_SIO
);

590 ià(!(
r
 & 
DC_PN_SIOCTL_BUSY
)) {

591 *
de¡
 = (
u_t16_t
)(
r
 & 0xFFFF);

597 
	}
}

602 
	$dc_´om_gwÜd
(
sc
, 
addr
, 
de¡
)

603 
dc_soác
 *
sc
;

604 
addr
;

605 
u_t16_t
 *
de¡
;

607 
i
;

608 
u_t16_t
 
wÜd
 = 0;

611 
	`dc_´om_idË
(
sc
);

614 
	`CSR_WRITE_4
(
sc
, 
DC_SIO
, 
DC_SIO_EESEL
);

615 
	`dc_day
(
sc
);

616 
	`DC_SETBIT
(
sc
, 
DC_SIO
, 
DC_SIO_ROMCTL_READ
);

617 
	`dc_day
(
sc
);

618 
	`DC_CLRBIT
(
sc
, 
DC_SIO
, 
DC_SIO_EE_CLK
);

619 
	`dc_day
(
sc
);

620 
	`DC_SETBIT
(
sc
, 
DC_SIO
, 
DC_SIO_EE_CS
);

621 
	`dc_day
(
sc
);

626 
	`dc_´om_putby
(
sc
, 
addr
);

631 
i
 = 0x8000; i; i >>= 1) {

632 
	`SIO_SET
(
DC_SIO_EE_CLK
);

633 
	`dc_day
(
sc
);

634 ià(
	`CSR_READ_4
(
sc
, 
DC_SIO
è& 
DC_SIO_EE_DATAOUT
)

635 
wÜd
 |ð
i
;

636 
	`dc_day
(
sc
);

637 
	`SIO_CLR
(
DC_SIO_EE_CLK
);

638 
	`dc_day
(
sc
);

642 
	`dc_´om_idË
(
sc
);

644 *
de¡
 = 
wÜd
;

647 
	}
}

652 
	$dc_»ad_´om
(
sc
, 
de¡
, 
off
, 
út
, 
sw­
)

653 
dc_soác
 *
sc
;

654 
ÿddr_t
 
de¡
;

655 
off
;

656 
út
;

657 
sw­
;

659 
i
;

660 
u_t16_t
 
wÜd
 = 0, *
±r
;

662 
i
 = 0; i < 
út
; i++) {

663 ià(
	`DC_IS_PNIC
(
sc
))

664 
	`dc_´om_gwÜd_²ic
(
sc
, 
off
 + 
i
, &
wÜd
);

666 
	`dc_´om_gwÜd
(
sc
, 
off
 + 
i
, &
wÜd
);

667 
±r
 = (
u_t16_t
 *)(
de¡
 + (
i
 * 2));

668 ià(
sw­
)

669 *
±r
 = 
	`Áohs
(
wÜd
);

671 *
±r
 = 
wÜd
;

675 
	}
}

686 
	$dc_mii_wreb
(
sc
, 
b
)

687 
dc_soác
 *
sc
;

688 
b
;

690 ià(
b
)

691 
	`CSR_WRITE_4
(
sc
, 
DC_SIO
,

692 
DC_SIO_ROMCTL_WRITE
|
DC_SIO_MII_DATAOUT
);

694 
	`CSR_WRITE_4
(
sc
, 
DC_SIO
, 
DC_SIO_ROMCTL_WRITE
);

696 
	`DC_SETBIT
(
sc
, 
DC_SIO
, 
DC_SIO_MII_CLK
);

697 
	`DC_CLRBIT
(
sc
, 
DC_SIO
, 
DC_SIO_MII_CLK
);

700 
	}
}

705 
	$dc_mii_»adb
(
sc
)

706 
dc_soác
 *
sc
;

708 
	`CSR_WRITE_4
(
sc
, 
DC_SIO
, 
DC_SIO_ROMCTL_READ
|
DC_SIO_MII_DIR
);

709 
	`CSR_READ_4
(
sc
, 
DC_SIO
);

710 
	`DC_SETBIT
(
sc
, 
DC_SIO
, 
DC_SIO_MII_CLK
);

711 
	`DC_CLRBIT
(
sc
, 
DC_SIO
, 
DC_SIO_MII_CLK
);

712 ià(
	`CSR_READ_4
(
sc
, 
DC_SIO
è& 
DC_SIO_MII_DATAIN
)

716 
	}
}

721 
	$dc_mii_sync
(
sc
)

722 
dc_soác
 *
sc
;

724 
i
;

726 
	`CSR_WRITE_4
(
sc
, 
DC_SIO
, 
DC_SIO_ROMCTL_WRITE
);

728 
i
 = 0; i < 32; i++)

729 
	`dc_mii_wreb
(
sc
, 1);

732 
	}
}

737 
	$dc_mii_£nd
(
sc
, 
bs
, 
út
)

738 
dc_soác
 *
sc
;

739 
u_t32_t
 
bs
;

740 
út
;

742 
i
;

744 
i
 = (0x1 << (
út
 - 1)); i; i >>= 1)

745 
	`dc_mii_wreb
(
sc
, 
bs
 & 
i
);

746 
	}
}

751 
	$dc_mii_»ad»g
(
sc
, 
äame
)

752 
dc_soác
 *
sc
;

753 
dc_mii_äame
 *
äame
;

756 
i
, 
ack
, 
s
;

762 
äame
->
mii_¡dim
 = 
DC_MII_STARTDELIM
;

763 
äame
->
mii_Ýcode
 = 
DC_MII_READOP
;

764 
äame
->
mii_tuº¬ound
 = 0;

765 
äame
->
mii_d©a
 = 0;

770 
	`dc_mii_sync
(
sc
);

775 
	`dc_mii_£nd
(
sc
, 
äame
->
mii_¡dim
, 2);

776 
	`dc_mii_£nd
(
sc
, 
äame
->
mii_Ýcode
, 2);

777 
	`dc_mii_£nd
(
sc
, 
äame
->
mii_phyaddr
, 5);

778 
	`dc_mii_£nd
(
sc
, 
äame
->
mii_»gaddr
, 5);

780 #ifdeà
nÙdef


782 
	`dc_mii_wreb
(
sc
, 1);

783 
	`dc_mii_wreb
(
sc
, 0);

787 
ack
 = 
	`dc_mii_»adb
(
sc
);

793 ià(
ack
) {

794 
i
 = 0; i < 16; i++) {

795 
	`dc_mii_»adb
(
sc
);

797 
ç
;

800 
i
 = 0x8000; i; i >>= 1) {

801 ià(!
ack
) {

802 ià(
	`dc_mii_»adb
(
sc
))

803 
äame
->
mii_d©a
 |ð
i
;

807 
ç
:

809 
	`dc_mii_wreb
(
sc
, 0);

810 
	`dc_mii_wreb
(
sc
, 0);

813 ià(
ack
)

816 
	}
}

821 
	$dc_mii_wreg
(
sc
, 
äame
)

822 
dc_soác
 *
sc
;

823 
dc_mii_äame
 *
äame
;

826 
s
;

832 
äame
->
mii_¡dim
 = 
DC_MII_STARTDELIM
;

833 
äame
->
mii_Ýcode
 = 
DC_MII_WRITEOP
;

834 
äame
->
mii_tuº¬ound
 = 
DC_MII_TURNAROUND
;

839 
	`dc_mii_sync
(
sc
);

841 
	`dc_mii_£nd
(
sc
, 
äame
->
mii_¡dim
, 2);

842 
	`dc_mii_£nd
(
sc
, 
äame
->
mii_Ýcode
, 2);

843 
	`dc_mii_£nd
(
sc
, 
äame
->
mii_phyaddr
, 5);

844 
	`dc_mii_£nd
(
sc
, 
äame
->
mii_»gaddr
, 5);

845 
	`dc_mii_£nd
(
sc
, 
äame
->
mii_tuº¬ound
, 2);

846 
	`dc_mii_£nd
(
sc
, 
äame
->
mii_d©a
, 16);

849 
	`dc_mii_wreb
(
sc
, 0);

850 
	`dc_mii_wreb
(
sc
, 0);

854 
	}
}

856 
	$dc_miibus_»ad»g
(
dev
, 
phy
, 
»g
)

857 
deviû_t
 
dev
;

858 
phy
, 
»g
;

860 
dc_mii_äame
 
äame
;

861 
dc_soác
 *
sc
;

862 
i
, 
rv®
, 
phy_»g
 = 0;

864 
sc
 = 
	`deviû_g_soác
(
dev
);

865 
	`bzo
((*)&
äame
, (frame));

876 ià(
	`DC_IS_ADMTEK
(
sc
è&& 
phy
 !ð
DC_ADMTEK_PHYADDR
)

884 ià(
	`DC_IS_CONEXANT
(
sc
è&& 
phy
 !ð
DC_CONEXANT_PHYADDR
)

887 ià(
sc
->
dc_pmode
 !ð
DC_PMODE_MII
) {

888 ià(
phy
 =ð(
MII_NPHY
 - 1)) {

889 
»g
) {

890 
MII_BMSR
:

895 (
BMSR_MEDIAMASK
);

897 
MII_PHYIDR1
:

898 ià(
	`DC_IS_PNIC
(
sc
))

899 (
DC_VENDORID_LO
);

900 (
DC_VENDORID_DEC
);

902 
MII_PHYIDR2
:

903 ià(
	`DC_IS_PNIC
(
sc
))

904 (
DC_DEVICEID_82C168
);

905 (
DC_DEVICEID_21143
);

915 ià(
	`DC_IS_PNIC
(
sc
)) {

916 
	`CSR_WRITE_4
(
sc
, 
DC_PN_MII
, 
DC_PN_MIIOPCODE_READ
 |

917 (
phy
 << 23è| (
»g
 << 18));

918 
i
 = 0; i < 
DC_TIMEOUT
; i++) {

919 
	`DELAY
(1);

920 
rv®
 = 
	`CSR_READ_4
(
sc
, 
DC_PN_MII
);

921 ià(!(
rv®
 & 
DC_PN_MII_BUSY
)) {

922 
rv®
 &= 0xFFFF;

923 (
rv®
 == 0xFFFF ? 0 :val);

929 ià(
	`DC_IS_COMET
(
sc
)) {

930 
»g
) {

931 
MII_BMCR
:

932 
phy_»g
 = 
DC_AL_BMCR
;

934 
MII_BMSR
:

935 
phy_»g
 = 
DC_AL_BMSR
;

937 
MII_PHYIDR1
:

938 
phy_»g
 = 
DC_AL_VENID
;

940 
MII_PHYIDR2
:

941 
phy_»g
 = 
DC_AL_DEVID
;

943 
MII_ANAR
:

944 
phy_»g
 = 
DC_AL_ANAR
;

946 
MII_ANLPAR
:

947 
phy_»g
 = 
DC_AL_LPAR
;

949 
MII_ANER
:

950 
phy_»g
 = 
DC_AL_ANER
;

953 
	`´tk
("dc%d:hy_read: badhyegister %x\n",

954 
sc
->
dc_un
, 
»g
);

959 
rv®
 = 
	`CSR_READ_4
(
sc
, 
phy_»g
) & 0x0000FFFF;

961 ià(
rv®
 == 0xFFFF)

963 (
rv®
);

966 
äame
.
mii_phyaddr
 = 
phy
;

967 
äame
.
mii_»gaddr
 = 
»g
;

968 ià(
sc
->
dc_ty³
 =ð
DC_TYPE_98713
) {

969 
phy_»g
 = 
	`CSR_READ_4
(
sc
, 
DC_NETCFG
);

970 
	`CSR_WRITE_4
(
sc
, 
DC_NETCFG
, 
phy_»g
 & ~
DC_NETCFG_PORTSEL
);

972 
	`dc_mii_»ad»g
(
sc
, &
äame
);

973 ià(
sc
->
dc_ty³
 =ð
DC_TYPE_98713
)

974 
	`CSR_WRITE_4
(
sc
, 
DC_NETCFG
, 
phy_»g
);

976 (
äame
.
mii_d©a
);

977 
	}
}

979 
	$dc_miibus_wreg
(
dev
, 
phy
, 
»g
, 
d©a
)

980 
deviû_t
 
dev
;

981 
phy
, 
»g
, 
d©a
;

983 
dc_soác
 *
sc
;

984 
dc_mii_äame
 
äame
;

985 
i
, 
phy_»g
 = 0;

987 
sc
 = 
	`deviû_g_soác
(
dev
);

988 
	`bzo
((*)&
äame
, (frame));

990 ià(
	`DC_IS_ADMTEK
(
sc
è&& 
phy
 !ð
DC_ADMTEK_PHYADDR
)

993 ià(
	`DC_IS_CONEXANT
(
sc
è&& 
phy
 !ð
DC_CONEXANT_PHYADDR
)

996 ià(
	`DC_IS_PNIC
(
sc
)) {

997 
	`CSR_WRITE_4
(
sc
, 
DC_PN_MII
, 
DC_PN_MIIOPCODE_WRITE
 |

998 (
phy
 << 23è| (
»g
 << 10è| 
d©a
);

999 
i
 = 0; i < 
DC_TIMEOUT
; i++) {

1000 ià(!(
	`CSR_READ_4
(
sc
, 
DC_PN_MII
è& 
DC_PN_MII_BUSY
))

1006 ià(
	`DC_IS_COMET
(
sc
)) {

1007 
»g
) {

1008 
MII_BMCR
:

1009 
phy_»g
 = 
DC_AL_BMCR
;

1011 
MII_BMSR
:

1012 
phy_»g
 = 
DC_AL_BMSR
;

1014 
MII_PHYIDR1
:

1015 
phy_»g
 = 
DC_AL_VENID
;

1017 
MII_PHYIDR2
:

1018 
phy_»g
 = 
DC_AL_DEVID
;

1020 
MII_ANAR
:

1021 
phy_»g
 = 
DC_AL_ANAR
;

1023 
MII_ANLPAR
:

1024 
phy_»g
 = 
DC_AL_LPAR
;

1026 
MII_ANER
:

1027 
phy_»g
 = 
DC_AL_ANER
;

1030 
	`´tk
("dc%d:hy_write: badhyegister %x\n",

1031 
sc
->
dc_un
, 
»g
);

1036 
	`CSR_WRITE_4
(
sc
, 
phy_»g
, 
d©a
);

1040 
äame
.
mii_phyaddr
 = 
phy
;

1041 
äame
.
mii_»gaddr
 = 
»g
;

1042 
äame
.
mii_d©a
 = 
d©a
;

1044 ià(
sc
->
dc_ty³
 =ð
DC_TYPE_98713
) {

1045 
phy_»g
 = 
	`CSR_READ_4
(
sc
, 
DC_NETCFG
);

1046 
	`CSR_WRITE_4
(
sc
, 
DC_NETCFG
, 
phy_»g
 & ~
DC_NETCFG_PORTSEL
);

1048 
	`dc_mii_wreg
(
sc
, &
äame
);

1049 ià(
sc
->
dc_ty³
 =ð
DC_TYPE_98713
)

1050 
	`CSR_WRITE_4
(
sc
, 
DC_NETCFG
, 
phy_»g
);

1053 
	}
}

1055 
	$dc_miibus_¡©chg
(
dev
)

1056 
deviû_t
 
dev
;

1058 
dc_soác
 *
sc
;

1059 
mii_d©a
 *
mii
;

1060 
ifmed
 *
ifm
;

1062 
sc
 = 
	`deviû_g_soác
(
dev
);

1063 ià(
	`DC_IS_ADMTEK
(
sc
))

1066 
mii
 = 
	`deviû_g_soác
(
sc
->
dc_miibus
);

1067 
ifm
 = &
mii
->
mii_med
;

1068 ià(
	`DC_IS_DAVICOM
(
sc
) &&

1069 
	`IFM_SUBTYPE
(
ifm
->
ifm_med
è=ð
IFM_homePNA
) {

1070 
	`dc_£tcfg
(
sc
, 
ifm
->
ifm_med
);

1071 
sc
->
dc_if_med
 = 
ifm
->
ifm_med
;

1073 
	`dc_£tcfg
(
sc
, 
mii
->
mii_med_aùive
);

1074 
sc
->
dc_if_med
 = 
mii
->
mii_med_aùive
;

1078 
	}
}

1088 
	$dc_miibus_med
(
dev
)

1089 
deviû_t
 
dev
;

1091 
dc_soác
 *
sc
;

1092 
mii_d©a
 *
mii
;

1093 
ifmed
 *
ifm
;

1094 
»v
;

1096 
»v
 = 
	`pci_»ad_cÚfig
(
dev
, 
DC_PCI_CFRV
, 4) & 0xFF;

1098 
sc
 = 
	`deviû_g_soác
(
dev
);

1099 
mii
 = 
	`deviû_g_soác
(
sc
->
dc_miibus
);

1100 
ifm
 = &
mii
->
mii_med
;

1102 ià(
	`DC_IS_DAVICOM
(
sc
è&& 
»v
 >ð
DC_REVISION_DM9102A
)

1103 
	`ifmed_add
(
ifm
, 
IFM_ETHER
|
IFM_homePNA
, 0, 
NULL
);

1106 
	}
}

1109 
	#DC_POLY
 0xEDB88320

	)

1110 
	#DC_BITS_512
 9

	)

1111 
	#DC_BITS_128
 7

	)

1112 
	#DC_BITS_64
 6

	)

1114 
u_t32_t
 
	$dc_üc_Ë
(
sc
, 
addr
)

1115 
dc_soác
 *
sc
;

1116 
ÿddr_t
 
addr
;

1118 
u_t32_t
 
idx
, 
b
, 
d©a
, 
üc
;

1121 
üc
 = 0xFFFFFFFF;

1123 
idx
 = 0; idx < 6; idx++) {

1124 
d©a
 = *
addr
++, 
b
 = 0; bit < 8; bit++, data >>= 1)

1125 
üc
 = (üø>> 1è^ (((üø^ 
d©a
è& 1è? 
DC_POLY
 : 0);

1132 ià(
sc
->
dc_æags
 & 
DC_128BIT_HASH
)

1133  (
üc
 & ((1 << 
DC_BITS_128
) - 1));

1136 ià(
sc
->
dc_æags
 & 
DC_64BIT_HASH
)

1137  (
üc
 & ((1 << 
DC_BITS_64
) - 1));

1139  (
üc
 & ((1 << 
DC_BITS_512
) - 1));

1140 
	}
}

1142 #iâdeà
UNUSED


1146 
u_t32_t
 
	$dc_üc_be
(
addr
)

1147 
ÿddr_t
 
addr
;

1149 
u_t32_t
 
üc
, 
ÿ¼y
;

1150 
i
, 
j
;

1151 
u_t8_t
 
c
;

1154 
üc
 = 0xFFFFFFFF;

1156 
i
 = 0; i < 6; i++) {

1157 
c
 = *(
addr
 + 
i
);

1158 
j
 = 0; j < 8; j++) {

1159 
ÿ¼y
 = ((
üc
 & 0x80000000è? 1 : 0è^ (
c
 & 0x01);

1160 
üc
 <<= 1;

1161 
c
 >>= 1;

1162 ià(
ÿ¼y
)

1163 
üc
 = (üø^ 0x04c11db6è| 
ÿ¼y
;

1168 ((
üc
 >> 26) & 0x0000003F);

1169 
	}
}

1182 
	$dc_£tft_21143
(
sc
)

1183 
dc_soác
 *
sc
;

1185 
dc_desc
 *
säame
;

1186 
u_t32_t
 
h
, *
¥
;

1188 
iâ
 *
iå
;

1189 
i
;

1190 
u_t16_t
 *
ac_addr
;

1192 
iå
 = &
sc
->
¬pcom
.
ac_if
;

1194 
i
 = 
sc
->
dc_cd©a
.
dc_tx_´od
;

1195 
	`DC_INC
(
sc
->
dc_cd©a
.
dc_tx_´od
, 
DC_TX_LIST_CNT
);

1196 
sc
->
dc_cd©a
.
dc_tx_út
++;

1197 
säame
 = &
sc
->
dc_ld©a
->
dc_tx_li¡
[
i
];

1198 
¥
 = (
u_t32_t
 *)&
sc
->
dc_cd©a
.
dc_sbuf
;

1199 
	`bzo
((*)
¥
, 
DC_SFRAME_LEN
);

1201 
säame
->
dc_d©a
 = 
	`vtÝhys
(&
sc
->
dc_cd©a
.
dc_sbuf
);

1202 
säame
->
dc_ùl
 = 
DC_SFRAME_LEN
 | 
DC_TXCTL_SETUP
 | 
DC_TXCTL_TLINK
 |

1203 
DC_FILTER_HASHPERF
 | 
DC_TXCTL_FINT
;

1205 
sc
->
dc_cd©a
.
dc_tx_cha
[
i
] = (
mbuf
 *)&sc->dc_cd©a.
dc_sbuf
;

1208 ià(
iå
->
if_æags
 & 
IFF_PROMISC
)

1209 
	`DC_SETBIT
(
sc
, 
DC_NETCFG
, 
DC_NETCFG_RX_PROMISC
);

1211 
	`DC_CLRBIT
(
sc
, 
DC_NETCFG
, 
DC_NETCFG_RX_PROMISC
);

1213 ià(
iå
->
if_æags
 & 
IFF_ALLMULTI
)

1214 
	`DC_SETBIT
(
sc
, 
DC_NETCFG
, 
DC_NETCFG_RX_ALLMULTI
);

1216 
	`DC_CLRBIT
(
sc
, 
DC_NETCFG
, 
DC_NETCFG_RX_ALLMULTI
);

1218 
ifma
 = 
iå
->
if_muÉddrs
.
lh_f¡
; ifm¨!ð
NULL
;

1219 
ifma
 = ifma->
ifma_lk
.
Ë_Ãxt
) {

1220 ià(
ifma
->
ifma_addr
->
§_çmy
 !ð
AF_LINK
)

1222 
h
 = 
	`dc_üc_Ë
(
sc
,

1223 
	`LLADDR
((
sockaddr_dl
 *)
ifma
->
ifma_addr
));

1224 
¥
[
h
 >> 4] |= 1 << (h & 0xF);

1228 ià(
iå
->
if_æags
 & 
IFF_BROADCAST
) {

1229 
h
 = 
	`dc_üc_Ë
(
sc
, (
ÿddr_t
)&
hbrßdÿ¡addr
);

1230 
¥
[
h
 >> 4] |= 1 << (h & 0xF);

1234 
ac_addr
 = (
u_t16_t
 *)
sc
->
¬pcom
.ac_enaddr;

1235 
¥
[39] = 
ac_addr
[0];

1236 
¥
[40] = 
ac_addr
[1];

1237 
¥
[41] = 
ac_addr
[2];

1239 
säame
->
dc_¡©us
 = 
DC_TXSTAT_OWN
;

1240 
	`CSR_WRITE_4
(
sc
, 
DC_TXSTART
, 0xFFFFFFFF);

1248 
	`DELAY
(10000);

1250 
iå
->
if_tim
 = 5;

1253 
	}
}

1255 
	$dc_£tft_admk
(
sc
)

1256 
dc_soác
 *
sc
;

1258 
iâ
 *
iå
;

1260 
h
 = 0;

1261 
u_t32_t
 
hashes
[2] = { 0, 0 };

1262 
ifmuÉddr
 *
ifma
;

1264 
u_t32_t
 *
ac_addr
;

1266 
iå
 = &
sc
->
¬pcom
.
ac_if
;

1269 
ac_addr
 = (
u_t32_t
 *)&
sc
->
¬pcom
.ac_enaddr[0];

1270 
	`CSR_WRITE_4
(
sc
, 
DC_AL_PAR0
, *
ac_addr
);

1271 
ac_addr
 = (
u_t32_t
 *)&
sc
->
¬pcom
.ac_enaddr[4];

1272 
	`CSR_WRITE_4
(
sc
, 
DC_AL_PAR1
, *
ac_addr
);

1275 ià(
iå
->
if_æags
 & 
IFF_PROMISC
)

1276 
	`DC_SETBIT
(
sc
, 
DC_NETCFG
, 
DC_NETCFG_RX_PROMISC
);

1278 
	`DC_CLRBIT
(
sc
, 
DC_NETCFG
, 
DC_NETCFG_RX_PROMISC
);

1280 ià(
iå
->
if_æags
 & 
IFF_ALLMULTI
)

1281 
	`DC_SETBIT
(
sc
, 
DC_NETCFG
, 
DC_NETCFG_RX_ALLMULTI
);

1283 
	`DC_CLRBIT
(
sc
, 
DC_NETCFG
, 
DC_NETCFG_RX_ALLMULTI
);

1286 
	`CSR_WRITE_4
(
sc
, 
DC_AL_MAR0
, 0);

1287 
	`CSR_WRITE_4
(
sc
, 
DC_AL_MAR1
, 0);

1294 ià(
iå
->
if_æags
 & (
IFF_PROMISC
|
IFF_ALLMULTI
))

1298 
ifma
 = 
iå
->
if_muÉddrs
.
lh_f¡
; ifm¨!ð
NULL
;

1299 
ifma
 = ifma->
ifma_lk
.
Ë_Ãxt
) {

1300 ià(
ifma
->
ifma_addr
->
§_çmy
 !ð
AF_LINK
)

1302 
h
 = 
	`dc_üc_be
(
	`LLADDR
((
sockaddr_dl
 *)
ifma
->
ifma_addr
));

1303 ià(
h
 < 32)

1304 
hashes
[0] |ð(1 << 
h
);

1306 
hashes
[1] |ð(1 << (
h
 - 32));

1309 
	`CSR_WRITE_4
(
sc
, 
DC_AL_MAR0
, 
hashes
[0]);

1310 
	`CSR_WRITE_4
(
sc
, 
DC_AL_MAR1
, 
hashes
[1]);

1313 
	}
}

1315 
	$dc_£tft_asix
(
sc
)

1316 
dc_soác
 *
sc
;

1318 
iâ
 *
iå
;

1320 
h
 = 0;

1321 
u_t32_t
 
hashes
[2] = { 0, 0 };

1322 
ifmuÉddr
 *
ifma
;

1324 
u_t32_t
 *
ac_addr
;

1326 
iå
 = &
sc
->
¬pcom
.
ac_if
;

1329 
	`CSR_WRITE_4
(
sc
, 
DC_AX_FILTIDX
, 
DC_AX_FILTIDX_PAR0
);

1330 
ac_addr
 = (
u_t32_t
 *)&
sc
->
¬pcom
.ac_enaddr[0];

1331 
	`CSR_WRITE_4
(
sc
, 
DC_AX_FILTDATA
, *
ac_addr
);

1333 
	`CSR_WRITE_4
(
sc
, 
DC_AX_FILTIDX
, 
DC_AX_FILTIDX_PAR1
);

1335 
ac_addr
 = (
u_t32_t
 *)&
sc
->
¬pcom
.ac_enaddr[4];

1336 
	`CSR_WRITE_4
(
sc
, 
DC_AX_FILTDATA
, *
ac_addr
);

1339 ià(
iå
->
if_æags
 & 
IFF_PROMISC
)

1340 
	`DC_SETBIT
(
sc
, 
DC_NETCFG
, 
DC_NETCFG_RX_PROMISC
);

1342 
	`DC_CLRBIT
(
sc
, 
DC_NETCFG
, 
DC_NETCFG_RX_PROMISC
);

1344 ià(
iå
->
if_æags
 & 
IFF_ALLMULTI
)

1345 
	`DC_SETBIT
(
sc
, 
DC_NETCFG
, 
DC_NETCFG_RX_ALLMULTI
);

1347 
	`DC_CLRBIT
(
sc
, 
DC_NETCFG
, 
DC_NETCFG_RX_ALLMULTI
);

1353 ià(
iå
->
if_æags
 & 
IFF_BROADCAST
)

1354 
	`DC_SETBIT
(
sc
, 
DC_NETCFG
, 
DC_AX_NETCFG_RX_BROAD
);

1356 
	`DC_CLRBIT
(
sc
, 
DC_NETCFG
, 
DC_AX_NETCFG_RX_BROAD
);

1359 
	`CSR_WRITE_4
(
sc
, 
DC_AX_FILTIDX
, 
DC_AX_FILTIDX_MAR0
);

1360 
	`CSR_WRITE_4
(
sc
, 
DC_AX_FILTDATA
, 0);

1361 
	`CSR_WRITE_4
(
sc
, 
DC_AX_FILTIDX
, 
DC_AX_FILTIDX_MAR1
);

1362 
	`CSR_WRITE_4
(
sc
, 
DC_AX_FILTDATA
, 0);

1369 ià(
iå
->
if_æags
 & (
IFF_PROMISC
|
IFF_ALLMULTI
))

1373 
ifma
 = 
iå
->
if_muÉddrs
.
lh_f¡
; ifm¨!ð
NULL
;

1374 
ifma
 = ifma->
ifma_lk
.
Ë_Ãxt
) {

1375 ià(
ifma
->
ifma_addr
->
§_çmy
 !ð
AF_LINK
)

1377 
h
 = 
	`dc_üc_be
(
	`LLADDR
((
sockaddr_dl
 *)
ifma
->
ifma_addr
));

1378 ià(
h
 < 32)

1379 
hashes
[0] |ð(1 << 
h
);

1381 
hashes
[1] |ð(1 << (
h
 - 32));

1384 
	`CSR_WRITE_4
(
sc
, 
DC_AX_FILTIDX
, 
DC_AX_FILTIDX_MAR0
);

1385 
	`CSR_WRITE_4
(
sc
, 
DC_AX_FILTDATA
, 
hashes
[0]);

1386 
	`CSR_WRITE_4
(
sc
, 
DC_AX_FILTIDX
, 
DC_AX_FILTIDX_MAR1
);

1387 
	`CSR_WRITE_4
(
sc
, 
DC_AX_FILTDATA
, 
hashes
[1]);

1390 
	}
}

1392 
	$dc_£tft
(
sc
)

1393 
dc_soác
 *
sc
;

1395 ià(
	`DC_IS_INTEL
(
sc
è|| 
	`DC_IS_MACRONIX
(scè|| 
	`DC_IS_PNIC
(sc) ||

1396 
	`DC_IS_PNICII
(
sc
è|| 
	`DC_IS_DAVICOM
(scè|| 
	`DC_IS_CONEXANT
(sc))

1397 
	`dc_£tft_21143
(
sc
);

1399 ià(
	`DC_IS_ASIX
(
sc
))

1400 
	`dc_£tft_asix
(
sc
);

1402 ià(
	`DC_IS_ADMTEK
(
sc
))

1403 
	`dc_£tft_admk
(
sc
);

1406 
	}
}

1413 
	$dc_£tcfg
(
sc
, 
med
)

1414 
dc_soác
 *
sc
;

1415 
med
;

1417 
i
, 
»¡¬t
 = 0;

1418 
u_t32_t
 
i¤
;

1420 ià(
	`IFM_SUBTYPE
(
med
è=ð
IFM_NONE
)

1423 ià(
	`CSR_READ_4
(
sc
, 
DC_NETCFG
è& (
DC_NETCFG_TX_ON
|
DC_NETCFG_RX_ON
)) {

1424 
»¡¬t
 = 1;

1425 
	`DC_CLRBIT
(
sc
, 
DC_NETCFG
, (
DC_NETCFG_TX_ON
|
DC_NETCFG_RX_ON
));

1427 
i
 = 0; i < 
DC_TIMEOUT
; i++) {

1428 
i¤
 = 
	`CSR_READ_4
(
sc
, 
DC_ISR
);

1429 ià(
i¤
 & 
DC_ISR_TX_IDLE
 ||

1430 (
i¤
 & 
DC_ISR_RX_STATE
è=ð
DC_RXSTATE_STOPPED
)

1432 
	`DELAY
(10);

1435 ià(
i
 =ð
DC_TIMEOUT
)

1436 
	`´tk
("dc%d: failedo forcexnd "

1437 "rxØidË s\n", 
sc
->
dc_un
);

1440 ià(
	`IFM_SUBTYPE
(
med
è=ð
IFM_100_TX
) {

1441 
	`DC_CLRBIT
(
sc
, 
DC_NETCFG
, 
DC_NETCFG_SPEEDSEL
);

1442 
	`DC_SETBIT
(
sc
, 
DC_NETCFG
, 
DC_NETCFG_HEARTBEAT
);

1443 ià(
sc
->
dc_pmode
 =ð
DC_PMODE_MII
) {

1444 
w©chdog»g
;

1446 ià(
	`DC_IS_INTEL
(
sc
)) {

1448 
w©chdog»g
 = 
	`CSR_READ_4
(
sc
, 
DC_WATCHDOG
);

1449 
w©chdog»g
 &ð~
DC_WDOG_CTLWREN
;

1450 
w©chdog»g
 |ð
DC_WDOG_JABBERDIS
;

1451 
	`CSR_WRITE_4
(
sc
, 
DC_WATCHDOG
, 
w©chdog»g
);

1453 
	`DC_SETBIT
(
sc
, 
DC_WATCHDOG
, 
DC_WDOG_JABBERDIS
);

1455 
	`DC_CLRBIT
(
sc
, 
DC_NETCFG
, (
DC_NETCFG_PCS
|

1456 
DC_NETCFG_PORTSEL
|
DC_NETCFG_SCRAMBLER
));

1457 ià(
sc
->
dc_ty³
 =ð
DC_TYPE_98713
)

1458 
	`DC_SETBIT
(
sc
, 
DC_NETCFG
, (
DC_NETCFG_PCS
|

1459 
DC_NETCFG_SCRAMBLER
));

1460 ià(!
	`DC_IS_DAVICOM
(
sc
))

1461 
	`DC_SETBIT
(
sc
, 
DC_NETCFG
, 
DC_NETCFG_PORTSEL
);

1462 
	`DC_CLRBIT
(
sc
, 
DC_10BTCTRL
, 0xFFFF);

1463 ià(
	`DC_IS_INTEL
(
sc
))

1464 
	`dc_­¶y_fixup
(
sc
, 
IFM_AUTO
);

1466 ià(
	`DC_IS_PNIC
(
sc
)) {

1467 
	`DC_PN_GPIO_SETBIT
(
sc
, 
DC_PN_GPIO_SPEEDSEL
);

1468 
	`DC_PN_GPIO_SETBIT
(
sc
, 
DC_PN_GPIO_100TX_LOOP
);

1469 
	`DC_SETBIT
(
sc
, 
DC_PN_NWAY
, 
DC_PN_NWAY_SPEEDSEL
);

1471 
	`DC_SETBIT
(
sc
, 
DC_NETCFG
, 
DC_NETCFG_PORTSEL
);

1472 
	`DC_SETBIT
(
sc
, 
DC_NETCFG
, 
DC_NETCFG_PCS
);

1473 
	`DC_SETBIT
(
sc
, 
DC_NETCFG
, 
DC_NETCFG_SCRAMBLER
);

1474 ià(
	`DC_IS_INTEL
(
sc
))

1475 
	`dc_­¶y_fixup
(
sc
,

1476 (
med
 & 
IFM_GMASK
è=ð
IFM_FDX
 ?

1477 
IFM_100_TX
|
IFM_FDX
 : IFM_100_TX);

1481 ià(
	`IFM_SUBTYPE
(
med
è=ð
IFM_10_T
) {

1482 
	`DC_SETBIT
(
sc
, 
DC_NETCFG
, 
DC_NETCFG_SPEEDSEL
);

1483 
	`DC_CLRBIT
(
sc
, 
DC_NETCFG
, 
DC_NETCFG_HEARTBEAT
);

1484 ià(
sc
->
dc_pmode
 =ð
DC_PMODE_MII
) {

1485 
w©chdog»g
;

1488 ià(
	`DC_IS_INTEL
(
sc
)) {

1489 
w©chdog»g
 = 
	`CSR_READ_4
(
sc
, 
DC_WATCHDOG
);

1490 
w©chdog»g
 &ð~
DC_WDOG_CTLWREN
;

1491 
w©chdog»g
 |ð
DC_WDOG_JABBERDIS
;

1492 
	`CSR_WRITE_4
(
sc
, 
DC_WATCHDOG
, 
w©chdog»g
);

1494 
	`DC_SETBIT
(
sc
, 
DC_WATCHDOG
, 
DC_WDOG_JABBERDIS
);

1496 
	`DC_CLRBIT
(
sc
, 
DC_NETCFG
, (
DC_NETCFG_PCS
|

1497 
DC_NETCFG_PORTSEL
|
DC_NETCFG_SCRAMBLER
));

1498 ià(
sc
->
dc_ty³
 =ð
DC_TYPE_98713
)

1499 
	`DC_SETBIT
(
sc
, 
DC_NETCFG
, 
DC_NETCFG_PCS
);

1500 ià(!
	`DC_IS_DAVICOM
(
sc
))

1501 
	`DC_SETBIT
(
sc
, 
DC_NETCFG
, 
DC_NETCFG_PORTSEL
);

1502 
	`DC_CLRBIT
(
sc
, 
DC_10BTCTRL
, 0xFFFF);

1503 ià(
	`DC_IS_INTEL
(
sc
))

1504 
	`dc_­¶y_fixup
(
sc
, 
IFM_AUTO
);

1506 ià(
	`DC_IS_PNIC
(
sc
)) {

1507 
	`DC_PN_GPIO_CLRBIT
(
sc
, 
DC_PN_GPIO_SPEEDSEL
);

1508 
	`DC_PN_GPIO_SETBIT
(
sc
, 
DC_PN_GPIO_100TX_LOOP
);

1509 
	`DC_CLRBIT
(
sc
, 
DC_PN_NWAY
, 
DC_PN_NWAY_SPEEDSEL
);

1511 
	`DC_CLRBIT
(
sc
, 
DC_NETCFG
, 
DC_NETCFG_PORTSEL
);

1512 
	`DC_CLRBIT
(
sc
, 
DC_NETCFG
, 
DC_NETCFG_PCS
);

1513 
	`DC_CLRBIT
(
sc
, 
DC_NETCFG
, 
DC_NETCFG_SCRAMBLER
);

1514 ià(
	`DC_IS_INTEL
(
sc
)) {

1515 
	`DC_CLRBIT
(
sc
, 
DC_SIARESET
, 
DC_SIA_RESET
);

1516 
	`DC_CLRBIT
(
sc
, 
DC_10BTCTRL
, 0xFFFF);

1517 ià((
med
 & 
IFM_GMASK
è=ð
IFM_FDX
)

1518 
	`DC_SETBIT
(
sc
, 
DC_10BTCTRL
, 0x7F3D);

1520 
	`DC_SETBIT
(
sc
, 
DC_10BTCTRL
, 0x7F3F);

1521 
	`DC_SETBIT
(
sc
, 
DC_SIARESET
, 
DC_SIA_RESET
);

1522 
	`DC_CLRBIT
(
sc
, 
DC_10BTCTRL
,

1523 
DC_TCTL_AUTONEGENBL
);

1524 
	`dc_­¶y_fixup
(
sc
,

1525 (
med
 & 
IFM_GMASK
è=ð
IFM_FDX
 ?

1526 
IFM_10_T
|
IFM_FDX
 : IFM_10_T);

1527 
	`DELAY
(20000);

1538 ià(
	`DC_IS_DAVICOM
(
sc
)) {

1539 ià(
	`IFM_SUBTYPE
(
med
è=ð
IFM_homePNA
) {

1540 
	`DC_SETBIT
(
sc
, 
DC_NETCFG
, 
DC_NETCFG_PORTSEL
);

1541 
sc
->
dc_lk
 = 1;

1543 
	`DC_CLRBIT
(
sc
, 
DC_NETCFG
, 
DC_NETCFG_PORTSEL
);

1548 ià((
med
 & 
IFM_GMASK
è=ð
IFM_FDX
) {

1549 
	`DC_SETBIT
(
sc
, 
DC_NETCFG
, 
DC_NETCFG_FULLDUPLEX
);

1550 ià(
sc
->
dc_pmode
 =ð
DC_PMODE_SYM
 && 
	`DC_IS_PNIC
(sc))

1551 
	`DC_SETBIT
(
sc
, 
DC_PN_NWAY
, 
DC_PN_NWAY_DUPLEX
);

1553 
	`DC_CLRBIT
(
sc
, 
DC_NETCFG
, 
DC_NETCFG_FULLDUPLEX
);

1554 ià(
sc
->
dc_pmode
 =ð
DC_PMODE_SYM
 && 
	`DC_IS_PNIC
(sc))

1555 
	`DC_CLRBIT
(
sc
, 
DC_PN_NWAY
, 
DC_PN_NWAY_DUPLEX
);

1558 ià(
»¡¬t
)

1559 
	`DC_SETBIT
(
sc
, 
DC_NETCFG
, 
DC_NETCFG_TX_ON
|
DC_NETCFG_RX_ON
);

1562 
	}
}

1564 
	$dc_»£t
(
sc
)

1565 
dc_soác
 *
sc
;

1567 
i
;

1569 
	`DC_SETBIT
(
sc
, 
DC_BUSCTL
, 
DC_BUSCTL_RESET
);

1571 
i
 = 0; i < 
DC_TIMEOUT
; i++) {

1572 
	`DELAY
(10);

1573 ià(!(
	`CSR_READ_4
(
sc
, 
DC_BUSCTL
è& 
DC_BUSCTL_RESET
))

1577 ià(
	`DC_IS_ASIX
(
sc
è|| 
	`DC_IS_ADMTEK
(scè|| 
	`DC_IS_CONEXANT
(sc)) {

1578 
	`DELAY
(10000);

1579 
	`DC_CLRBIT
(
sc
, 
DC_BUSCTL
, 
DC_BUSCTL_RESET
);

1580 
i
 = 0;

1583 ià(
i
 =ð
DC_TIMEOUT
)

1584 
	`´tk
("dc%d:e£Ãv com¶ed!\n", 
sc
->
dc_un
);

1587 
	`DELAY
(1000);

1589 
	`CSR_WRITE_4
(
sc
, 
DC_IMR
, 0x00000000);

1590 
	`CSR_WRITE_4
(
sc
, 
DC_BUSCTL
, 0x00000000);

1591 
	`CSR_WRITE_4
(
sc
, 
DC_NETCFG
, 0x00000000);

1599 ià(
	`DC_IS_INTEL
(
sc
)) {

1600 
	`DC_SETBIT
(
sc
, 
DC_SIARESET
, 
DC_SIA_RESET
);

1601 
	`CSR_WRITE_4
(
sc
, 
DC_10BTCTRL
, 0);

1602 
	`CSR_WRITE_4
(
sc
, 
DC_WATCHDOG
, 0);

1606 
	}
}

1609 
dc_ty³
 *
	$dc_devty³
Ð
unnum
 )

1611 
dc_ty³
 *
t
;

1612 
ut32_t
 
»v
;

1613 
rc
;

1616 
t
 = 
dc_devs
;

1618 
t
->
dc_Çme
 !ð
NULL
) {

1619 
rc
 = 
	`pci_fd_deviû
(
t
->
dc_vid
,->
dc_did
, \

1620 (
unnum
 - 1), &
t
->
dc_bus
, &t->
dc_dev
, &t->
dc_fun
);

1621 ià(
rc
 =ð
PCIB_ERR_SUCCESS
) {

1624 
	`pci_»ad_cÚfig_dwÜd
(
t
->
dc_bus
,t->
dc_dev
,t->
dc_fun
,\

1625 
DC_PCI_CFRV
, &
»v
);

1626 
»v
 &= 0xFF;

1628 ià(
t
->
dc_did
 =ð
DC_DEVICEID_98713
 &&

1629 
»v
 >ð
DC_REVISION_98713A
)

1630 
t
++;

1631 ià(
t
->
dc_did
 =ð
DC_DEVICEID_98713_CP
 &&

1632 
»v
 >ð
DC_REVISION_98713A
)

1633 
t
++;

1634 ià(
t
->
dc_did
 =ð
DC_DEVICEID_987x5
 &&

1635 
»v
 >ð
DC_REVISION_98715AEC_C
)

1636 
t
++;

1637 ià(
t
->
dc_did
 =ð
DC_DEVICEID_987x5
 &&

1638 
»v
 >ð
DC_REVISION_98725
)

1639 
t
++;

1640 ià(
t
->
dc_did
 =ð
DC_DEVICEID_AX88140A
 &&

1641 
»v
 >ð
DC_REVISION_88141
)

1642 
t
++;

1643 ià(
t
->
dc_did
 =ð
DC_DEVICEID_82C168
 &&

1644 
»v
 >ð
DC_REVISION_82C169
)

1645 
t
++;

1646 ià(
t
->
dc_did
 =ð
DC_DEVICEID_DM9102
 &&

1647 
»v
 >ð
DC_REVISION_DM9102A
)

1648 
t
++;

1649 (
t
);

1651 
t
++;

1654 (
NULL
);

1655 
	}
}

1667 
	$dc_´obe
(
dev
)

1668 
deviû_t
 
dev
;

1670 
dc_ty³
 *
t
;

1672 
t
 = 
	`dc_devty³
(
dev
);

1674 ià(
t
 !ð
NULL
) {

1675 
	`deviû_£t_desc
(
dev
, 
t
->
dc_Çme
);

1679 (
ENXIO
);

1680 
	}
}

1683 
	$dc_aýi
(
dev
)

1684 
deviû_t
 
dev
;

1686 
u_t32_t
 
r
, 
ý
;

1687 
un
;

1689 
un
 = 
	`deviû_g_un
(
dev
);

1692 
ý
 = 
	`pci_»ad_cÚfig
(
dev
, 
DC_PCI_CCAP
, 4) & 0xFF;

1694 
r
 = 
	`pci_»ad_cÚfig
(
dev
, 
ý
, 4) & 0xFF;

1695 ià(
r
 == 0x01) {

1697 
r
 = 
	`pci_»ad_cÚfig
(
dev
, 
ý
 + 4, 4);

1698 ià(
r
 & 
DC_PSTATE_D3
) {

1699 
u_t32_t
 
ioba£
, 
memba£
, 
q
;

1702 
ioba£
 = 
	`pci_»ad_cÚfig
(
dev
, 
DC_PCI_CFBIO
, 4);

1703 
memba£
 = 
	`pci_»ad_cÚfig
(
dev
, 
DC_PCI_CFBMA
, 4);

1704 
q
 = 
	`pci_»ad_cÚfig
(
dev
, 
DC_PCI_CFIT
, 4);

1707 
	`´tk
("dc%d: chip is in D%dower mode "

1708 "-- stgØD0\n", 
un
, 
r
 & 
DC_PSTATE_D3
);

1709 
r
 &= 0xFFFFFFFC;

1710 
	`pci_wre_cÚfig
(
dev
, 
ý
 + 4, 
r
, 4);

1713 
	`pci_wre_cÚfig
(
dev
, 
DC_PCI_CFBIO
, 
ioba£
, 4);

1714 
	`pci_wre_cÚfig
(
dev
, 
DC_PCI_CFBMA
, 
memba£
, 4);

1715 
	`pci_wre_cÚfig
(
dev
, 
DC_PCI_CFIT
, 
q
, 4);

1719 
	}
}

1723 
	$dc_­¶y_fixup
(
sc
, 
med
)

1724 
dc_soác
 *
sc
;

1725 
med
;

1727 
dc_medfo
 *
m
;

1728 
u_t8_t
 *
p
;

1729 
i
;

1730 
u_t32_t
 
»g
;

1732 
m
 = 
sc
->
dc_mi
;

1734 
m
 !ð
NULL
) {

1735 ià(
m
->
dc_med
 =ð
med
)

1737 
m
 = m->
dc_Ãxt
;

1740 ià(
m
 =ð
NULL
)

1743 
i
 = 0, 
p
 = 
m
->
dc_»£t_±r
; i < m->
dc_»£t_Ën
; i++, += 2) {

1744 
»g
 = (
p
[0] | (p[1] << 8)) << 16;

1745 
	`CSR_WRITE_4
(
sc
, 
DC_WATCHDOG
, 
»g
);

1748 
i
 = 0, 
p
 = 
m
->
dc_gp_±r
; i < m->
dc_gp_Ën
; i++, += 2) {

1749 
»g
 = (
p
[0] | (p[1] << 8)) << 16;

1750 
	`CSR_WRITE_4
(
sc
, 
DC_WATCHDOG
, 
»g
);

1754 
	}
}

1757 
	$dc_decode_Ëaf_s
(
sc
, 
l
)

1758 
dc_soác
 *
sc
;

1759 
dc_eblock_s
 *
l
;

1761 
dc_medfo
 *
m
;

1763 
m
 = 
	`m®loc
((
dc_medfo
), 
M_DEVBUF
, 
M_NOWAIT
);

1764 
	`bzo
(
m
, (
dc_medfo
));

1765 ià(
l
->
dc_s_code
 =ð
DC_SIA_CODE_10BT
)

1766 
m
->
dc_med
 = 
IFM_10_T
;

1768 ià(
l
->
dc_s_code
 =ð
DC_SIA_CODE_10BT_FDX
)

1769 
m
->
dc_med
 = 
IFM_10_T
|
IFM_FDX
;

1771 ià(
l
->
dc_s_code
 =ð
DC_SIA_CODE_10B2
)

1772 
m
->
dc_med
 = 
IFM_10_2
;

1774 ià(
l
->
dc_s_code
 =ð
DC_SIA_CODE_10B5
)

1775 
m
->
dc_med
 = 
IFM_10_5
;

1777 
m
->
dc_gp_Ën
 = 2;

1778 
m
->
dc_gp_±r
 = (
u_t8_t
 *)&
l
->
dc_s_gpio_ùl
;

1780 
m
->
dc_Ãxt
 = 
sc
->
dc_mi
;

1781 
sc
->
dc_mi
 = 
m
;

1783 
sc
->
dc_pmode
 = 
DC_PMODE_SIA
;

1786 
	}
}

1788 
	$dc_decode_Ëaf_sym
(
sc
, 
l
)

1789 
dc_soác
 *
sc
;

1790 
dc_eblock_sym
 *
l
;

1792 
dc_medfo
 *
m
;

1794 
m
 = 
	`m®loc
((
dc_medfo
), 
M_DEVBUF
, 
M_NOWAIT
);

1795 
	`bzo
(
m
, (
dc_medfo
));

1796 ià(
l
->
dc_sym_code
 =ð
DC_SYM_CODE_100BT
)

1797 
m
->
dc_med
 = 
IFM_100_TX
;

1799 ià(
l
->
dc_sym_code
 =ð
DC_SYM_CODE_100BT_FDX
)

1800 
m
->
dc_med
 = 
IFM_100_TX
|
IFM_FDX
;

1802 
m
->
dc_gp_Ën
 = 2;

1803 
m
->
dc_gp_±r
 = (
u_t8_t
 *)&
l
->
dc_sym_gpio_ùl
;

1805 
m
->
dc_Ãxt
 = 
sc
->
dc_mi
;

1806 
sc
->
dc_mi
 = 
m
;

1808 
sc
->
dc_pmode
 = 
DC_PMODE_SYM
;

1811 
	}
}

1813 
	$dc_decode_Ëaf_mii
(
sc
, 
l
)

1814 
dc_soác
 *
sc
;

1815 
dc_eblock_mii
 *
l
;

1817 
u_t8_t
 *
p
;

1818 
dc_medfo
 *
m
;

1820 
m
 = 
	`m®loc
((
dc_medfo
), 
M_DEVBUF
, 
M_NOWAIT
);

1821 
	`bzo
(
m
, (
dc_medfo
));

1823 
m
->
dc_med
 = 
IFM_AUTO
;

1824 
m
->
dc_gp_Ën
 = 
l
->
dc_g´_Ën
;

1826 
p
 = (
u_t8_t
 *)
l
;

1827 
p
 +ð(
dc_eblock_mii
);

1828 
m
->
dc_gp_±r
 = 
p
;

1829 
p
 +ð2 * 
l
->
dc_g´_Ën
;

1830 
m
->
dc_»£t_Ën
 = *
p
;

1831 
p
++;

1832 
m
->
dc_»£t_±r
 = 
p
;

1834 
m
->
dc_Ãxt
 = 
sc
->
dc_mi
;

1835 
sc
->
dc_mi
 = 
m
;

1838 
	}
}

1841 
	$dc_»ad_¤om
(
sc
, 
bs
)

1842 
dc_soác
 *
sc
;

1843 
bs
;

1845 
size
;

1847 
size
 = 2 << 
bs
;

1848 
sc
->
dc_¤om
 = 
	`m®loc
(
size
, 
M_DEVBUF
, 
M_NOWAIT
);

1849 
	`dc_»ad_´om
(
sc
, (
ÿddr_t
)sc->
dc_¤om
, 0, (
size
 / 2), 0);

1850 
	}
}

1852 
	$dc_·r£_21143_¤om
(
sc
)

1853 
dc_soác
 *
sc
;

1855 
dc_Ëaf_hdr
 *
lhdr
;

1856 
dc_eblock_hdr
 *
hdr
;

1857 
i
, 
loff
;

1858 *
±r
;

1860 
loff
 = 
sc
->
dc_¤om
[27];

1861 
lhdr
 = (
dc_Ëaf_hdr
 *)&(
sc
->
dc_¤om
[
loff
]);

1863 
±r
 = (*)
lhdr
;

1864 
±r
 +ð(
dc_Ëaf_hdr
) - 1;

1865 
i
 = 0; i < 
lhdr
->
dc_mút
; i++) {

1866 
hdr
 = (
dc_eblock_hdr
 *)
±r
;

1867 
hdr
->
dc_ty³
) {

1869 
DC_EBLOCK_MII
:

1870 
	`dc_decode_Ëaf_mii
(
sc
, (
dc_eblock_mii
 *)
hdr
);

1872 
DC_EBLOCK_SIA
:

1873 
	`dc_decode_Ëaf_s
(
sc
, (
dc_eblock_s
 *)
hdr
);

1875 
DC_EBLOCK_SYM
:

1876 
	`dc_decode_Ëaf_sym
(
sc
, (
dc_eblock_sym
 *)
hdr
);

1883 
±r
 +ð(
hdr
->
dc_Ën
 & 0x7F);

1884 
±r
++;

1888 
	}
}

1892 
	$nÝ
(cÚ¡ 
¹ems_q_cÚÃù_d©a
* 
unu£d
)

1894 
	}
}

1897 
	$decISON
(cÚ¡ 
¹ems_q_cÚÃù_d©a
* 
q
)

1899  (
	`BSP_q_abËd_©_i8259s
(
q
->
Çme
));

1900 
	}
}

1908 
	$¹ems_dc_driv_©ch
(
¹ems_bsdÃt_ifcÚfig
 *
cÚfig
, 
©chg
)

1910 
rc
;

1911 
u_ch¬
 
ddr
[
ETHER_ADDR_LEN
];

1913 *
unName
;

1914 
unNumb
;

1916 
ut32_t
 
commªd
;

1917 
dc_soác
 *
sc
;

1918 
iâ
 *
iå
;

1919 
dc_ty³
 *
t
;

1920 
ut32_t
 
»visiÚ
;

1921 
rÜ
 = 0, 
mac_off£t
;

1922 
ut32_t
 
v®ue
;

1928 
unNumb
 = 
	`¹ems_bsdÃt_·r£_driv_Çme
(
cÚfig
, &
unName
);

1929 ifÐ
unNumb
 < 0) {

1932 ifÐ
	`¡rcmp
(
unName
, 
DRIVER_PREFIX
) ) {

1933 
	`´tk
("dec2114x : unitame '%s'ot %s\n", \

1934 
unName
, 
DRIVER_PREFIX
 );

1938 
sc
 = &
dc_soác_devs
[
unNumb
 - 1];

1939 
iå
 = &
sc
->
¬pcom
.
ac_if
;

1941 if(
iå
->
if_soác
 !ð
NULL
) {

1942 
	`´tk
("dec2114x[%d]: unitumberlready in use.\n", \

1943 
unNumb
);

1946 
	`mem£t
(
sc
, 0, (
dc_soác
));

1949 
sc
->
dc_un
 = 
unNumb
;

1950 
sc
->
dc_Çme
 = 
unName
;

1959 ifÐ(
sc
->
dc_fo
 = 
	`dc_devty³
(
unNumb
)è=ð
NULL
) {

1960 
	`´tk
("Can't findny dec2114x NICs in PCI space.\n");

1963 
t
 = 
sc
->
dc_fo
;

1970 
	`pci_»ad_cÚfig_dwÜd
(
t
->
dc_bus
,t->
dc_dev
,t->
dc_fun
,\

1971 
PCI_COMMAND
, &
commªd
);

1973 
commªd
 |ð(
PCI_COMMAND_IO
 | 
PCI_COMMAND_MEMORY
 | 
PCI_COMMAND_MASTER
);

1974 
	`pci_wre_cÚfig_dwÜd
(
t
->
dc_bus
,t->
dc_dev
,t->
dc_fun
,\

1975 
PCI_COMMAND
, 
commªd
);

1977 
	`pci_»ad_cÚfig_dwÜd
(
t
->
dc_bus
,t->
dc_dev
,t->
dc_fun
,\

1978 
PCI_COMMAND
, &
commªd
);

1981 #ifdeà
DC_USEIOSPACE


1982 ià(!(
commªd
 & 
PCI_COMMAND_IO
)) {

1983 
	`´tk
("dc%d: faedØabË I/OÜts!\n", 
sc
->
dc_un
);

1984 
rÜ
 = 
ENXIO
;

1985 
ç
;

1988 ià(!(
commªd
 & 
PCI_COMMAND_MEMORY
)) {

1989 
	`´tk
("dc%d: faedØabË memÜy m­pg!\n", 
sc
->
dc_un
);

1990 
rÜ
 = 
ENXIO
;

1991 
ç
;

1996 
rid
 = 
DC_RID
;

1997 
sc
->
dc_»s
 = 
	`bus_®loc_»sourû
(
dev
, 
DC_RES
, &
rid
,

1998 0, ~0, 1, 
RF_ACTIVE
);

2000 ià(
sc
->
dc_»s
 =ð
NULL
) {

2001 
	`´tk
("dc%d: couldn'm­Üts/memÜy\n", 
un
);

2002 
rÜ
 = 
ENXIO
;

2003 
ç
;

2005 
sc
->
dc_bg
 = 
	`rmª_g_bu¡ag
(sc->
dc_»s
);

2006 
sc
->
dc_bhªdË
 = 
	`rmª_g_bushªdË
(sc->
dc_»s
);

2011 
	`pci_»ad_cÚfig_dwÜd
(
t
->
dc_bus
,t->
dc_dev
,t->
dc_fun
,\

2012 
DC_PCI_CFBMA
, &
v®ue
);

2013 
sc
->
memba£
 = 
v®ue
;

2016 
	`mem£t
(&
sc
->
qInfo
, 0, (
¹ems_q_cÚÃù_d©a
));

2018 
	`pci_»ad_cÚfig_dwÜd
(
t
->
dc_bus
,t->
dc_dev
,t->
dc_fun
,\

2019 
DC_PCI_CFIT
, &
v®ue
);

2021 
sc
->
qInfo
.
Çme
 = 
v®ue
 & 0xFF;

2022 
sc
->
qInfo
.
hdl
 = (
¹ems_q_hdl
)
dc_
;

2023 
sc
->
qInfo
.
hªdË
 = (*)sc;

2024 
sc
->
qInfo
.
Ú
 = 
nÝ
;

2025 
sc
->
qInfo
.
off
 = 
nÝ
;

2026 
sc
->
qInfo
.
isOn
 = 
decISON
;

2028 #ifdeà
BSP_SHARED_HANDLER_SUPPORT


2029 
rc
 = 
	`BSP_¡®l_¹ems_sh¬ed_q_hªdËr
Ð&
sc
->
qInfo
 );

2031 
rc
 = 
	`BSP_¡®l_¹ems_q_hªdËr
Ð&
sc
->
qInfo
 );

2033 if(!
rc
) {

2034 
	`¹ems_·nic
("Can't install dec2114x irq handler.\n");

2039 
rid
 = 0;

2040 
sc
->
dc_q
 = 
	`bus_®loc_»sourû
(
dev
, 
SYS_RES_IRQ
, &
rid
, 0, ~0, 1,

2041 
RF_SHAREABLE
 | 
RF_ACTIVE
);

2043 ià(
sc
->
dc_q
 =ð
NULL
) {

2044 
	`´tk
("dc%d: couldn'm­ iÁru±\n", 
un
);

2045 
	`bus_»Ëa£_»sourû
(
dev
, 
DC_RES
, 
DC_RID
, 
sc
->
dc_»s
);

2046 
rÜ
 = 
ENXIO
;

2047 
ç
;

2050 
rÜ
 = 
	`bus_£tup_
(
dev
, 
sc
->
dc_q
, 
INTR_TYPE_NET
,

2051 
dc_
, 
sc
, &sc->
dc_hªd
);

2053 ià(
rÜ
) {

2054 
	`bus_»Ëa£_»sourû
(
dev
, 
SYS_RES_IRQ
, 0, 
sc
->
dc_q
);

2055 
	`bus_»Ëa£_»sourû
(
dev
, 
DC_RES
, 
DC_RID
, 
sc
->
dc_»s
);

2056 
	`´tk
("dc%d: couldn'£u°q\n", 
un
);

2057 
ç
;

2066 
	`pci_»ad_cÚfig_dwÜd
(
t
->
dc_bus
,t->
dc_dev
,t->
dc_fun
,\

2067 
DC_PCI_CFRV
, &
»visiÚ
);

2068 
»visiÚ
 &= 0x000000FF;

2071 ià(
sc
->
dc_fo
->
dc_did
 !ð
DC_DEVICEID_82C168
)

2072 
	`dc_´om_width
(
sc
);

2074 
sc
->
dc_fo
->
dc_did
) {

2075 
DC_DEVICEID_21143
:

2076 
sc
->
dc_ty³
 = 
DC_TYPE_21143
;

2077 
sc
->
dc_æags
 |ð
DC_TX_POLL
|
DC_TX_USE_TX_INTR
;

2078 
sc
->
dc_æags
 |ð
DC_REDUCED_MII_POLL
;

2080 
	`dc_»ad_¤om
(
sc
, sc->
dc_romwidth
);

2082 
DC_DEVICEID_DM9009
:

2083 
DC_DEVICEID_DM9100
:

2084 
DC_DEVICEID_DM9102
:

2085 
sc
->
dc_ty³
 = 
DC_TYPE_DM9102
;

2086 
sc
->
dc_æags
 |ð
DC_TX_COALESCE
|
DC_TX_INTR_ALWAYS
;

2087 
sc
->
dc_æags
 |ð
DC_REDUCED_MII_POLL
|
DC_TX_STORENFWD
;

2088 
sc
->
dc_pmode
 = 
DC_PMODE_MII
;

2091 
	`pci_»ad_cÚfig_dwÜd
(
t
->
dc_bus
,t->
dc_dev
,t->
dc_fun
,\

2092 
DC_PCI_CFLT
, &
commªd
);

2093 
commªd
 &= 0xFFFF00FF;

2094 
commªd
 |= 0x00008000;

2096 
	`pci_wre_cÚfig_dwÜd
(
t
->
dc_bus
,t->
dc_dev
,t->
dc_fun
,\

2097 
DC_PCI_CFLT
, 
commªd
);

2099 
DC_DEVICEID_AL981
:

2100 
sc
->
dc_ty³
 = 
DC_TYPE_AL981
;

2101 
sc
->
dc_æags
 |ð
DC_TX_USE_TX_INTR
;

2102 
sc
->
dc_æags
 |ð
DC_TX_ADMTEK_WAR
;

2103 
sc
->
dc_pmode
 = 
DC_PMODE_MII
;

2104 
	`dc_»ad_¤om
(
sc
, sc->
dc_romwidth
);

2106 
DC_DEVICEID_AN985
:

2107 
DC_DEVICEID_EN2242
:

2108 
sc
->
dc_ty³
 = 
DC_TYPE_AN985
;

2109 
sc
->
dc_æags
 |ð
DC_TX_USE_TX_INTR
;

2110 
sc
->
dc_æags
 |ð
DC_TX_ADMTEK_WAR
;

2111 
sc
->
dc_pmode
 = 
DC_PMODE_MII
;

2112 
	`dc_»ad_¤om
(
sc
, sc->
dc_romwidth
);

2114 
DC_DEVICEID_98713
:

2115 
DC_DEVICEID_98713_CP
:

2116 ià(
»visiÚ
 < 
DC_REVISION_98713A
) {

2117 
sc
->
dc_ty³
 = 
DC_TYPE_98713
;

2119 ià(
»visiÚ
 >ð
DC_REVISION_98713A
) {

2120 
sc
->
dc_ty³
 = 
DC_TYPE_98713A
;

2121 
sc
->
dc_æags
 |ð
DC_21143_NWAY
;

2123 
sc
->
dc_æags
 |ð
DC_REDUCED_MII_POLL
;

2124 
sc
->
dc_æags
 |ð
DC_TX_POLL
|
DC_TX_USE_TX_INTR
;

2126 
DC_DEVICEID_987x5
:

2127 
DC_DEVICEID_EN1217
:

2135 ià(
»visiÚ
 >ð
DC_REVISION_98715AEC_C
 &&

2136 
»visiÚ
 < 
DC_REVISION_98725
)

2137 
sc
->
dc_æags
 |ð
DC_128BIT_HASH
;

2138 
sc
->
dc_ty³
 = 
DC_TYPE_987x5
;

2139 
sc
->
dc_æags
 |ð
DC_TX_POLL
|
DC_TX_USE_TX_INTR
;

2140 
sc
->
dc_æags
 |ð
DC_REDUCED_MII_POLL
|
DC_21143_NWAY
;

2142 
DC_DEVICEID_98727
:

2143 
sc
->
dc_ty³
 = 
DC_TYPE_987x5
;

2144 
sc
->
dc_æags
 |ð
DC_TX_POLL
|
DC_TX_USE_TX_INTR
;

2145 
sc
->
dc_æags
 |ð
DC_REDUCED_MII_POLL
|
DC_21143_NWAY
;

2147 
DC_DEVICEID_82C115
:

2148 
sc
->
dc_ty³
 = 
DC_TYPE_PNICII
;

2149 
sc
->
dc_æags
 |ð
DC_TX_POLL
|
DC_TX_USE_TX_INTR
|
DC_128BIT_HASH
;

2150 
sc
->
dc_æags
 |ð
DC_REDUCED_MII_POLL
|
DC_21143_NWAY
;

2152 
DC_DEVICEID_82C168
:

2153 
sc
->
dc_ty³
 = 
DC_TYPE_PNIC
;

2154 
sc
->
dc_æags
 |ð
DC_TX_STORENFWD
|
DC_TX_INTR_ALWAYS
;

2155 
sc
->
dc_æags
 |ð
DC_PNIC_RX_BUG_WAR
;

2156 
sc
->
dc_²ic_rx_buf
 = 
	`m®loc
(
DC_RXLEN
 * 5, 
M_DEVBUF
, 
M_NOWAIT
);

2157 ià(
»visiÚ
 < 
DC_REVISION_82C169
)

2158 
sc
->
dc_pmode
 = 
DC_PMODE_SYM
;

2160 
DC_DEVICEID_AX88140A
:

2161 
sc
->
dc_ty³
 = 
DC_TYPE_ASIX
;

2162 
sc
->
dc_æags
 |ð
DC_TX_USE_TX_INTR
|
DC_TX_INTR_FIRSTFRAG
;

2163 
sc
->
dc_æags
 |ð
DC_REDUCED_MII_POLL
;

2164 
sc
->
dc_pmode
 = 
DC_PMODE_MII
;

2166 
DC_DEVICEID_RS7112
:

2167 
sc
->
dc_ty³
 = 
DC_TYPE_CONEXANT
;

2168 
sc
->
dc_æags
 |ð
DC_TX_INTR_ALWAYS
;

2169 
sc
->
dc_æags
 |ð
DC_REDUCED_MII_POLL
;

2170 
sc
->
dc_pmode
 = 
DC_PMODE_MII
;

2171 
	`dc_»ad_¤om
(
sc
, sc->
dc_romwidth
);

2174 
	`´tk
("dc%d: unknowÀdeviû: %x\n", 
sc
->
dc_un
,

2175 
sc
->
dc_fo
->
dc_did
);

2180 ià(
	`DC_IS_DAVICOM
(
sc
)) {

2181 
sc
->
dc_ÿchesize
 = 0;

2185 
	`pci_»ad_cÚfig_dwÜd
(
t
->
dc_bus
,t->
dc_dev
,t->
dc_fun
,\

2186 
DC_PCI_CFLT
, &
v®ue
);

2187 
sc
->
dc_ÿchesize
 = (
u_t8_t
)(
v®ue
 & 0xFF);

2191 
	`dc_»£t
(
sc
);

2194 ià(
	`DC_IS_INTEL
(
sc
)) {

2196 
	`pci_»ad_cÚfig_dwÜd
(
t
->
dc_bus
,t->
dc_dev
,t->
dc_fun
,\

2197 
DC_PCI_CFDD
, &
commªd
);

2198 
commªd
 &ð~(
DC_CFDD_SNOOZE_MODE
|
DC_CFDD_SLEEP_MODE
);

2200 
	`pci_wre_cÚfig_dwÜd
(
t
->
dc_bus
,t->
dc_dev
,t->
dc_fun
,\

2201 
DC_PCI_CFDD
, 
commªd
);

2212 ià(
	`DC_IS_INTEL
(
sc
))

2213 
	`dc_·r£_21143_¤om
(
sc
);

2214 ià(
	`DC_IS_MACRONIX
(
sc
è|| 
	`DC_IS_PNICII
(sc)) {

2215 ià(
sc
->
dc_ty³
 =ð
DC_TYPE_98713
)

2216 
sc
->
dc_pmode
 = 
DC_PMODE_MII
;

2218 
sc
->
dc_pmode
 = 
DC_PMODE_SYM
;

2219 } ià(!
sc
->
dc_pmode
)

2220 
sc
->
dc_pmode
 = 
DC_PMODE_MII
;

2225 
sc
->
dc_ty³
) {

2226 
DC_TYPE_98713
:

2227 
DC_TYPE_98713A
:

2228 
DC_TYPE_987x5
:

2229 
DC_TYPE_PNICII
:

2230 
	`dc_»ad_´om
(
sc
, (
ÿddr_t
)&
mac_off£t
,

2231 (
DC_EE_NODEADDR_OFFSET
 / 2), 1, 0);

2232 
	`dc_»ad_´om
(
sc
, (
ÿddr_t
)&
ddr
, (
mac_off£t
 / 2), 3, 0);

2234 
DC_TYPE_PNIC
:

2235 
	`dc_»ad_´om
(
sc
, (
ÿddr_t
)&
ddr
, 0, 3, 1);

2237 
DC_TYPE_DM9102
:

2238 
DC_TYPE_21143
:

2239 
DC_TYPE_ASIX
:

2240 
	`dc_»ad_´om
(
sc
, (
ÿddr_t
)&
ddr
, 
DC_EE_NODEADDR
, 3, 0);

2242 
DC_TYPE_AL981
:

2243 
DC_TYPE_AN985
:

2244 
	`bcÝy
(&
sc
->
dc_¤om
[
DC_AL_EE_NODEADDR
], (
ÿddr_t
)&
ddr
,

2245 
ETHER_ADDR_LEN
);

2246 
	`dc_»ad_´om
(
sc
, (
ÿddr_t
)&
ddr
, 
DC_AL_EE_NODEADDR
, 3, 0);

2248 
DC_TYPE_CONEXANT
:

2249 
	`bcÝy
(
sc
->
dc_¤om
 + 
DC_CONEXANT_EE_NODEADDR
, &
ddr
, 6);

2252 
	`dc_»ad_´om
(
sc
, (
ÿddr_t
)&
ddr
, 
DC_EE_NODEADDR
, 3, 0);

2259 
	`bcÝy
(
ddr
, (*)&
sc
->
¬pcom
.
ac_addr
, 
ETHER_ADDR_LEN
);

2260 
	`´tk
("dc%d: MACddress -- %02x:%02x:%02x:%02x:%02x:%02x\n", \

2261 
sc
->
dc_un
,sc->
¬pcom
.
ac_addr
[0], \

2262 
sc
->
¬pcom
.
ac_addr
[1], sc->arpcom.ac_enaddr[2], \

2263 
sc
->
¬pcom
.
ac_addr
[3], sc->arpcom.ac_enaddr[4], \

2264 
sc
->
¬pcom
.
ac_addr
[5]);

2267 
sc
->
dc_ld©a
 = 
	`m®loc
((
dc_li¡_d©a
), 
M_DEVBUF
, 
M_NOWAIT
);

2269 ià(
sc
->
dc_ld©a
 =ð
NULL
) {

2270 
	`´tk
("dc%d:ØmemÜy fÜi¡ bufãrs!\n", 
sc
->
dc_un
);

2271 ià(
sc
->
dc_²ic_rx_buf
 !ð
NULL
)

2272 
	`ä
(
sc
->
dc_²ic_rx_buf
, 
M_DEVBUF
);

2274 
	`bus_¬down_
(
dev
, 
sc
->
dc_q
, sc->
dc_hªd
);

2275 
	`bus_»Ëa£_»sourû
(
dev
, 
SYS_RES_IRQ
, 0, 
sc
->
dc_q
);

2276 
	`bus_»Ëa£_»sourû
(
dev
, 
DC_RES
, 
DC_RID
, 
sc
->
dc_»s
);

2278 
rÜ
 = 
ENXIO
;

2279 
ç
;

2282 
	`bzo
(
sc
->
dc_ld©a
, (
dc_li¡_d©a
));

2284 
iå
 = &
sc
->
¬pcom
.
ac_if
;

2285 
iå
->
if_soác
 = 
sc
;

2286 
iå
->
if_un
 = 
unNumb
;

2287 
iå
->
if_Çme
 = 
unName
;

2288 
iå
->
if_mtu
 = 
ETHERMTU
;

2289 
iå
->
if_æags
 = 
IFF_BROADCAST
 | 
IFF_SIMPLEX
;

2290 
iå
->
if_ioùl
 = 
dc_ioùl
;

2291 
iå
->
if_ouut
 = 
h_ouut
;

2292 
iå
->
if_¡¬t
 = 
dc_¡¬t
;

2293 
iå
->
if_w©chdog
 = 
dc_w©chdog
;

2294 
iå
->
if_
 = 
dc_
;

2295 
iå
->
if_baud¿
 = 100000000;

2296 
iå
->
if_¢d
.
ifq_maxËn
 = 
DC_TX_LIST_CNT
 - 1;

2306 ià(
	`DC_IS_INTEL
(
sc
)) {

2307 
	`dc_­¶y_fixup
(
sc
, 
IFM_AUTO
);

2308 
tmp
 = 
sc
->
dc_pmode
;

2309 
sc
->
dc_pmode
 = 
DC_PMODE_MII
;

2312 
rÜ
 = 
	`mii_phy_´obe
(
dev
, &
sc
->
dc_miibus
,

2313 
dc_ifmed_upd
, 
dc_ifmed_¡s
);

2315 ià(
rÜ
 && 
	`DC_IS_INTEL
(
sc
)) {

2316 
sc
->
dc_pmode
 = 
tmp
;

2317 ià(
sc
->
dc_pmode
 !ð
DC_PMODE_SIA
)

2318 
sc
->
dc_pmode
 = 
DC_PMODE_SYM
;

2319 
sc
->
dc_æags
 |ð
DC_21143_NWAY
;

2320 
	`mii_phy_´obe
(
dev
, &
sc
->
dc_miibus
,

2321 
dc_ifmed_upd
, 
dc_ifmed_¡s
);

2329 ià(
	`pci_»ad_cÚfig
(
dev
, 
DC_PCI_CSID
, 4) != 0x80281033)

2330 
sc
->
dc_æags
 |ð
DC_TULIP_LEDS
;

2331 
rÜ
 = 0;

2334 ià(
rÜ
) {

2335 
	`´tk
("dc%d: MII whouªy PHY!\n", 
sc
->
dc_un
);

2336 
	`cÚtigä
(
sc
->
dc_ld©a
, (
dc_li¡_d©a
),

2337 
M_DEVBUF
);

2338 ià(
sc
->
dc_²ic_rx_buf
 !ð
NULL
)

2339 
	`ä
(
sc
->
dc_²ic_rx_buf
, 
M_DEVBUF
);

2340 
	`bus_¬down_
(
dev
, 
sc
->
dc_q
, sc->
dc_hªd
);

2341 
	`bus_»Ëa£_»sourû
(
dev
, 
SYS_RES_IRQ
, 0, 
sc
->
dc_q
);

2342 
	`bus_»Ëa£_»sourû
(
dev
, 
DC_RES
, 
DC_RID
, 
sc
->
dc_»s
);

2343 
rÜ
 = 
ENXIO
;

2344 
ç
;

2351 
	`if_©ch
(
iå
);

2352 
	`h_içach
(
iå
);

2355 ià(
	`DC_IS_ADMTEK
(
sc
)) {

2359 
	`DC_SETBIT
(
sc
, 
DC_AL_CR
, 
DC_AL_CR_ATUR
);

2362 if(
sc
->
d«mÚtid
 == 0) {

2363 
sc
->
d«mÚtid
 = 
	`¹ems_bsdÃt_Ãw´oc
("decD",4096, \

2364 
dc_d«mÚ
,(*)
sc
);

2365 
	`´tk
("dec[%d]: d«mÚroûs ¡¬d\n", 
sc
->
dc_un
);

2374 #ifdeà
SRM_MEDIA


2375 
sc
->
dc_¤m_med
 = 0;

2378 ià(
	`DC_IS_INTEL
(
sc
)) {

2379 
commªd
 = 
	`pci_»ad_cÚfig
(
dev
, 
DC_PCI_CFDD
, 4);

2380 
commªd
 &ð~(
DC_CFDD_SNOOZE_MODE
|
DC_CFDD_SLEEP_MODE
);

2381 (
commªd
 >> 8) & 0xff) {

2383 
sc
->
dc_¤m_med
 = 
IFM_10_T
;

2386 
sc
->
dc_¤m_med
 = 
IFM_10_T
 | 
IFM_FDX
;

2389 
sc
->
dc_¤m_med
 = 
IFM_100_TX
;

2392 
sc
->
dc_¤m_med
 = 
IFM_100_TX
 | 
IFM_FDX
;

2395 ià(
sc
->
dc_¤m_med
)

2396 
sc
->
dc_¤m_med
 |ð
IFM_ACTIVE
 | 
IFM_ETHER
;

2401 
ç
:

2404 
	}
}

2407 
	$dc_dach
(
dev
)

2408 
deviû_t
 
dev
;

2410 
dc_soác
 *
sc
;

2411 
iâ
 *
iå
;

2412 
s
;

2413 
dc_medfo
 *
m
;

2416 
sc
 = 
	`deviû_g_soác
(
dev
);

2417 
iå
 = &
sc
->
¬pcom
.
ac_if
;

2419 
	`dc_¡Ý
(
sc
);

2420 
	`h_ifdach
(
iå
, 
ETHER_BPF_SUPPORTED
);

2422 
	`bus_gic_dach
(
dev
);

2423 
	`deviû_de_chd
(
dev
, 
sc
->
dc_miibus
);

2425 
	`bus_¬down_
(
dev
, 
sc
->
dc_q
, sc->
dc_hªd
);

2426 
	`bus_»Ëa£_»sourû
(
dev
, 
SYS_RES_IRQ
, 0, 
sc
->
dc_q
);

2427 
	`bus_»Ëa£_»sourû
(
dev
, 
DC_RES
, 
DC_RID
, 
sc
->
dc_»s
);

2429 
	`cÚtigä
(
sc
->
dc_ld©a
, (
dc_li¡_d©a
), 
M_DEVBUF
);

2430 ià(
sc
->
dc_²ic_rx_buf
 !ð
NULL
)

2431 
	`ä
(
sc
->
dc_²ic_rx_buf
, 
M_DEVBUF
);

2433 
sc
->
dc_mi
 !ð
NULL
) {

2434 
m
 = 
sc
->
dc_mi
->
dc_Ãxt
;

2435 
	`ä
(
sc
->
dc_mi
, 
M_DEVBUF
);

2436 
sc
->
dc_mi
 = 
m
;

2438 
	`ä
(
sc
->
dc_¤om
, 
M_DEVBUF
);

2442 
	}
}

2449 
	$dc_li¡_tx_
(
sc
)

2450 
dc_soác
 *
sc
;

2452 
dc_cha_d©a
 *
cd
;

2453 
dc_li¡_d©a
 *
ld
;

2454 
i
;

2456 
cd
 = &
sc
->
dc_cd©a
;

2457 
ld
 = 
sc
->
dc_ld©a
;

2458 
i
 = 0; i < 
DC_TX_LIST_CNT
; i++) {

2459 ià(
i
 =ð(
DC_TX_LIST_CNT
 - 1)) {

2460 
ld
->
dc_tx_li¡
[
i
].
dc_Ãxt
 =

2461 
	`vtÝhys
(&
ld
->
dc_tx_li¡
[0]);

2463 
ld
->
dc_tx_li¡
[
i
].
dc_Ãxt
 =

2464 
	`vtÝhys
(&
ld
->
dc_tx_li¡
[
i
 + 1]);

2466 
cd
->
dc_tx_cha
[
i
] = 
NULL
;

2467 
ld
->
dc_tx_li¡
[
i
].
dc_d©a
 = 0;

2468 
ld
->
dc_tx_li¡
[
i
].
dc_ùl
 = 0;

2471 
cd
->
dc_tx_´od
 = cd->
dc_tx_cÚs
 = cd->
dc_tx_út
 = 0;

2474 
	}
}

2482 
	$dc_li¡_rx_
(
sc
)

2483 
dc_soác
 *
sc
;

2485 
dc_cha_d©a
 *
cd
;

2486 
dc_li¡_d©a
 *
ld
;

2487 
i
;

2489 
cd
 = &
sc
->
dc_cd©a
;

2490 
ld
 = 
sc
->
dc_ld©a
;

2492 
i
 = 0; i < 
DC_RX_LIST_CNT
; i++) {

2493 ià(
	`dc_Ãwbuf
(
sc
, 
i
, 
NULL
è=ð
ENOBUFS
)

2494 (
ENOBUFS
);

2495 ià(
i
 =ð(
DC_RX_LIST_CNT
 - 1)) {

2496 
ld
->
dc_rx_li¡
[
i
].
dc_Ãxt
 =

2497 
	`vtÝhys
(&
ld
->
dc_rx_li¡
[0]);

2499 
ld
->
dc_rx_li¡
[
i
].
dc_Ãxt
 =

2500 
	`vtÝhys
(&
ld
->
dc_rx_li¡
[
i
 + 1]);

2504 
cd
->
dc_rx_´od
 = 0;

2507 
	}
}

2512 
	$dc_Ãwbuf
(
sc
, 
i
, 
m
)

2513 
dc_soác
 *
sc
;

2514 
i
;

2515 
mbuf
 *
m
;

2517 
mbuf
 *
m_Ãw
 = 
NULL
;

2518 
dc_desc
 *
c
;

2520 
c
 = &
sc
->
dc_ld©a
->
dc_rx_li¡
[
i
];

2522 ià(
m
 =ð
NULL
) {

2523 
	`MGETHDR
(
m_Ãw
, 
M_DONTWAIT
, 
MT_DATA
);

2524 ià(
m_Ãw
 =ð
NULL
)

2525 (
ENOBUFS
);

2527 
	`MCLGET
(
m_Ãw
, 
M_DONTWAIT
);

2528 ià(!(
m_Ãw
->
m_æags
 & 
M_EXT
)) {

2529 
	`m_äm
(
m_Ãw
);

2530 (
ENOBUFS
);

2532 
m_Ãw
->
m_Ën
 = m_Ãw->
m_pkthdr
.
Ën
 = 
MCLBYTES
;

2534 
m_Ãw
 = 
m
;

2535 
m_Ãw
->
m_Ën
 = m_Ãw->
m_pkthdr
.
Ën
 = 
MCLBYTES
;

2536 
m_Ãw
->
m_d©a
 = m_Ãw->
m_ext
.
ext_buf
;

2539 
	`m_adj
(
m_Ãw
, (
u_t64_t
));

2546 ià(
sc
->
dc_æags
 & 
DC_PNIC_RX_BUG_WAR
)

2547 
	`bzo
((*)
	`mtod
(
m_Ãw
, *), m_Ãw->
m_Ën
);

2549 
sc
->
dc_cd©a
.
dc_rx_cha
[
i
] = 
m_Ãw
;

2550 
c
->
dc_d©a
 = 
	`vtÝhys
(
	`mtod
(
m_Ãw
, 
ÿddr_t
));

2551 
c
->
dc_ùl
 = 
DC_RXCTL_RLINK
 | 
DC_RXLEN
;

2552 
c
->
dc_¡©us
 = 
DC_RXSTAT_OWN
;

2555 
	}
}

2609 
	#DC_WHOLEFRAME
 (
DC_RXSTAT_FIRSTFRAG
|
DC_RXSTAT_LASTFRAG
)

	)

2610 
	$dc_²ic_rx_bug_w¬
(
sc
, 
idx
)

2611 
dc_soác
 *
sc
;

2612 
idx
;

2614 
dc_desc
 *
cur_rx
;

2615 
dc_desc
 *
c
 = 
NULL
;

2616 
mbuf
 *
m
 = 
NULL
;

2617 *
±r
;

2618 
i
, 
tÙ®_Ën
;

2619 
u_t32_t
 
rx¡©
 = 0;

2621 
i
 = 
sc
->
dc_²ic_rx_bug_§ve
;

2622 
cur_rx
 = &
sc
->
dc_ld©a
->
dc_rx_li¡
[
idx
];

2623 
±r
 = 
sc
->
dc_²ic_rx_buf
;

2624 
	`bzo
(
±r
, (
DC_RXLEN
 * 5));

2628 
c
 = &
sc
->
dc_ld©a
->
dc_rx_li¡
[
i
];

2629 
rx¡©
 = 
c
->
dc_¡©us
;

2630 
m
 = 
sc
->
dc_cd©a
.
dc_rx_cha
[
i
];

2631 
	`bcÝy
(
	`mtod
(
m
, *), 
±r
, 
DC_RXLEN
);

2632 
±r
 +ð
DC_RXLEN
;

2634 ià(
i
 =ð
idx
 || 
rx¡©
 & 
DC_RXSTAT_LASTFRAG
)

2636 
	`dc_Ãwbuf
(
sc
, 
i
, 
m
);

2637 
	`DC_INC
(
i
, 
DC_RX_LIST_CNT
);

2641 
tÙ®_Ën
 = 
	`DC_RXBYTES
(
rx¡©
);

2644 *
±r
 == 0x00)

2645 
±r
--;

2648 ià((
u_t
)(
±r
) & 0x3)

2649 
±r
 -= 1;

2653 
±r
 -ð
tÙ®_Ën
;

2654 ià(
±r
 < 
sc
->
dc_²ic_rx_buf
)

2655 
±r
 = 
sc
->
dc_²ic_rx_buf
;

2662 
	`dc_Ãwbuf
(
sc
, 
i
, 
m
);

2663 
	`bcÝy
(
±r
, 
	`mtod
(
m
, *), 
tÙ®_Ën
);

2664 
cur_rx
->
dc_¡©us
 = 
rx¡©
 | 
DC_RXSTAT_FIRSTFRAG
;

2667 
	}
}

2680 
	$dc_rx_»sync
(
sc
)

2681 
dc_soác
 *
sc
;

2683 
i
, 
pos
;

2684 
dc_desc
 *
cur_rx
;

2686 
pos
 = 
sc
->
dc_cd©a
.
dc_rx_´od
;

2688 
i
 = 0; i < 
DC_RX_LIST_CNT
; i++) {

2689 
cur_rx
 = &
sc
->
dc_ld©a
->
dc_rx_li¡
[
pos
];

2690 ià(!(
cur_rx
->
dc_¡©us
 & 
DC_RXSTAT_OWN
))

2692 
	`DC_INC
(
pos
, 
DC_RX_LIST_CNT
);

2696 ià(
i
 =ð
DC_RX_LIST_CNT
)

2700 
sc
->
dc_cd©a
.
dc_rx_´od
 = 
pos
;

2702 (
EAGAIN
);

2703 
	}
}

2709 
	$dc_rxeof
(
sc
)

2710 
dc_soác
 *
sc
;

2712 
h_hd
 *
eh
;

2713 
mbuf
 *
m
;

2714 
iâ
 *
iå
;

2715 
dc_desc
 *
cur_rx
;

2716 
i
, 
tÙ®_Ën
 = 0;

2717 
u_t32_t
 
rx¡©
;

2719 
iå
 = &
sc
->
¬pcom
.
ac_if
;

2720 
i
 = 
sc
->
dc_cd©a
.
dc_rx_´od
;

2722 !(
sc
->
dc_ld©a
->
dc_rx_li¡
[
i
].
dc_¡©us
 & 
DC_RXSTAT_OWN
)) {

2724 #ifdeà
DEVICE_POLLING


2725 ià(
iå
->
if_dg
 & 
IFF_POLLING
) {

2726 ià(
sc
->
rxcyþes
 <= 0)

2728 
sc
->
rxcyþes
--;

2731 
cur_rx
 = &
sc
->
dc_ld©a
->
dc_rx_li¡
[
i
];

2732 
rx¡©
 = 
cur_rx
->
dc_¡©us
;

2733 
m
 = 
sc
->
dc_cd©a
.
dc_rx_cha
[
i
];

2734 
tÙ®_Ën
 = 
	`DC_RXBYTES
(
rx¡©
);

2736 ià(
sc
->
dc_æags
 & 
DC_PNIC_RX_BUG_WAR
) {

2737 ià((
rx¡©
 & 
DC_WHOLEFRAME
) != DC_WHOLEFRAME) {

2738 ià(
rx¡©
 & 
DC_RXSTAT_FIRSTFRAG
)

2739 
sc
->
dc_²ic_rx_bug_§ve
 = 
i
;

2740 ià((
rx¡©
 & 
DC_RXSTAT_LASTFRAG
) == 0) {

2741 
	`DC_INC
(
i
, 
DC_RX_LIST_CNT
);

2744 
	`dc_²ic_rx_bug_w¬
(
sc
, 
i
);

2745 
rx¡©
 = 
cur_rx
->
dc_¡©us
;

2746 
tÙ®_Ën
 = 
	`DC_RXBYTES
(
rx¡©
);

2750 
sc
->
dc_cd©a
.
dc_rx_cha
[
i
] = 
NULL
;

2759 ià((
rx¡©
 & 
DC_RXSTAT_RXERR
)){

2760 ià(!(
rx¡©
 & 
DC_RXSTAT_GIANT
) ||

2761 (
rx¡©
 & (
DC_RXSTAT_CRCERR
 | 
DC_RXSTAT_DRIBBLE
 |

2762 
DC_RXSTAT_MIIERE
 | 
DC_RXSTAT_COLLSEEN
 |

2763 
DC_RXSTAT_RUNT
 | 
DC_RXSTAT_DE
))) {

2764 
iå
->
if_¼Üs
++;

2765 ià(
rx¡©
 & 
DC_RXSTAT_COLLSEEN
)

2766 
iå
->
if_cÞlisiÚs
++;

2767 
	`dc_Ãwbuf
(
sc
, 
i
, 
m
);

2768 ià(
rx¡©
 & 
DC_RXSTAT_CRCERR
) {

2769 
	`DC_INC
(
i
, 
DC_RX_LIST_CNT
);

2772 
	`dc_
(
sc
);

2779 
tÙ®_Ën
 -ð
ETHER_CRC_LEN
;

2781 #ifdeà
__i386__


2791 ià(
dc_quick
 && 
	`dc_Ãwbuf
(
sc
, 
i
, 
NULL
) == 0) {

2792 
m
->
m_pkthdr
.
rcvif
 = 
iå
;

2793 
m
->
m_pkthdr
.
Ën
 = m->
m_Ën
 = 
tÙ®_Ën
;

2794 
	`DC_INC
(
i
, 
DC_RX_LIST_CNT
);

2798 
mbuf
 *
m0
;

2800 
m0
 = 
	`m_devg
(
	`mtod
(
m
, *è- 
ETHER_ALIGN
,

2801 
tÙ®_Ën
 + 
ETHER_ALIGN
, 0, 
iå
, 
NULL
);

2802 
	`dc_Ãwbuf
(
sc
, 
i
, 
m
);

2803 
	`DC_INC
(
i
, 
DC_RX_LIST_CNT
);

2804 ià(
m0
 =ð
NULL
) {

2805 
iå
->
if_¼Üs
++;

2808 
	`m_adj
(
m0
, 
ETHER_ALIGN
);

2809 
m
 = 
m0
;

2812 
iå
->
if_acks
++;

2813 
eh
 = 
	`mtod
(
m
, 
h_hd
 *);

2816 
	`m_adj
(
m
, (
h_hd
));

2817 
	`h_put
(
iå
, 
eh
, 
m
);

2820 
sc
->
dc_cd©a
.
dc_rx_´od
 = 
i
;

2821 
	}
}

2829 
	$dc_txeof
(
sc
)

2830 
dc_soác
 *
sc
;

2832 
dc_desc
 *
cur_tx
 = 
NULL
;

2833 
iâ
 *
iå
;

2834 
idx
;

2836 
iå
 = &
sc
->
¬pcom
.
ac_if
;

2842 
idx
 = 
sc
->
dc_cd©a
.
dc_tx_cÚs
;

2843 
idx
 !ð
sc
->
dc_cd©a
.
dc_tx_´od
) {

2844 
u_t32_t
 
tx¡©
;

2846 
cur_tx
 = &
sc
->
dc_ld©a
->
dc_tx_li¡
[
idx
];

2847 
tx¡©
 = 
cur_tx
->
dc_¡©us
;

2849 ià(
tx¡©
 & 
DC_TXSTAT_OWN
)

2852 ià(!(
cur_tx
->
dc_ùl
 & 
DC_TXCTL_LASTFRAG
) ||

2853 
cur_tx
->
dc_ùl
 & 
DC_TXCTL_SETUP
) {

2854 ià(
cur_tx
->
dc_ùl
 & 
DC_TXCTL_SETUP
) {

2864 ià(
	`DC_IS_PNIC
(
sc
)) {

2865 ià(
tx¡©
 & 
DC_TXSTAT_ERRSUM
)

2866 
	`dc_£tft
(
sc
);

2868 
sc
->
dc_cd©a
.
dc_tx_cha
[
idx
] = 
NULL
;

2870 
sc
->
dc_cd©a
.
dc_tx_út
--;

2871 
	`DC_INC
(
idx
, 
DC_TX_LIST_CNT
);

2875 ià(
	`DC_IS_CONEXANT
(
sc
)) {

2884 
sc
->
dc_pmode
 =ð
DC_PMODE_MII
 &&

2885 ((
tx¡©
 & 0xFFFFè& ~(
DC_TXSTAT_ERRSUM
|

2886 
DC_TXSTAT_NOCARRIER
)))

2887 
tx¡©
 &ð~
DC_TXSTAT_ERRSUM
;

2890 
sc
->
dc_pmode
 =ð
DC_PMODE_MII
 &&

2891 ((
tx¡©
 & 0xFFFFè& ~(
DC_TXSTAT_ERRSUM
|

2892 
DC_TXSTAT_NOCARRIER
|
DC_TXSTAT_CARRLOST
)))

2893 
tx¡©
 &ð~
DC_TXSTAT_ERRSUM
;

2896 ià(
tx¡©
 & 
DC_TXSTAT_ERRSUM
) {

2897 
iå
->
if_Û¼Üs
++;

2898 ià(
tx¡©
 & 
DC_TXSTAT_EXCESSCOLL
)

2899 
iå
->
if_cÞlisiÚs
++;

2900 ià(
tx¡©
 & 
DC_TXSTAT_LATECOLL
)

2901 
iå
->
if_cÞlisiÚs
++;

2902 ià(!(
tx¡©
 & 
DC_TXSTAT_UNDERRUN
)) {

2903 
	`dc_
(
sc
);

2908 
iå
->
if_cÞlisiÚs
 +ð(
tx¡©
 & 
DC_TXSTAT_COLLCNT
) >> 3;

2910 
iå
->
if_Ýacks
++;

2911 ià(
sc
->
dc_cd©a
.
dc_tx_cha
[
idx
] !ð
NULL
) {

2912 
	`m_äm
(
sc
->
dc_cd©a
.
dc_tx_cha
[
idx
]);

2913 
sc
->
dc_cd©a
.
dc_tx_cha
[
idx
] = 
NULL
;

2916 
sc
->
dc_cd©a
.
dc_tx_út
--;

2917 
	`DC_INC
(
idx
, 
DC_TX_LIST_CNT
);

2920 ià(
idx
 !ð
sc
->
dc_cd©a
.
dc_tx_cÚs
) {

2922 
sc
->
dc_cd©a
.
dc_tx_cÚs
 = 
idx
;

2923 
iå
->
if_æags
 &ð~
IFF_OACTIVE
;

2925 
iå
->
if_tim
 = (
sc
->
dc_cd©a
.
dc_tx_út
 == 0) ? 0 : 5;

2928 
	}
}

2932 
	$dc_tick
(
xsc
)

2933 *
xsc
;

2935 
dc_soác
 *
sc
;

2937 
iâ
 *
iå
;

2938 
s
;

2939 
u_t32_t
 
r
;

2942 
sc
 = 
xsc
;

2943 
iå
 = &
sc
->
¬pcom
.
ac_if
;

2944 
mii
 = 
	`deviû_g_soác
(
sc
->
dc_miibus
);

2946 ià(
sc
->
dc_æags
 & 
DC_REDUCED_MII_POLL
) {

2947 ià(
sc
->
dc_æags
 & 
DC_21143_NWAY
) {

2948 
r
 = 
	`CSR_READ_4
(
sc
, 
DC_10BTSTAT
);

2949 ià(
	`IFM_SUBTYPE
(
mii
->
mii_med_aùive
) ==

2950 
IFM_100_TX
 && (
r
 & 
DC_TSTAT_LS100
)) {

2951 
sc
->
dc_lk
 = 0;

2952 
	`mii_medchg
(
mii
);

2954 ià(
	`IFM_SUBTYPE
(
mii
->
mii_med_aùive
) ==

2955 
IFM_10_T
 && (
r
 & 
DC_TSTAT_LS10
)) {

2956 
sc
->
dc_lk
 = 0;

2957 
	`mii_medchg
(
mii
);

2959 ià(
sc
->
dc_lk
 == 0)

2960 
	`mii_tick
(
mii
);

2962 
r
 = 
	`CSR_READ_4
(
sc
, 
DC_ISR
);

2963 ià((
r
 & 
DC_ISR_RX_STATE
è=ð
DC_RXSTATE_WAIT
 &&

2964 
sc
->
dc_cd©a
.
dc_tx_út
 == 0)

2965 
	`mii_tick
(
mii
);

2966 ià(!(
mii
->
mii_med_¡©us
 & 
IFM_ACTIVE
))

2967 
sc
->
dc_lk
 = 0;

2970 
	`mii_tick
(
mii
);

2991 ià(!
sc
->
dc_lk
) {

2992 
	`mii_pÞl¡©
(
mii
);

2993 ià(
mii
->
mii_med_¡©us
 & 
IFM_ACTIVE
 &&

2994 
	`IFM_SUBTYPE
(
mii
->
mii_med_aùive
è!ð
IFM_NONE
) {

2995 
sc
->
dc_lk
++;

2996 ià(
iå
->
if_¢d
.
ifq_hd
 !ð
NULL
)

2997 
	`dc_¡¬t
(
iå
);

3001 ià(
sc
->
dc_æags
 & 
DC_21143_NWAY
 && !sc->
dc_lk
)

3002 
sc
->
dc_¡©_ch
 = 
	`timeout
(
dc_tick
, sc, 
hz
/10);

3004 
sc
->
dc_¡©_ch
 = 
	`timeout
(
dc_tick
, sc, 
hz
);

3007 
	}
}

3014 
	$dc_tx_undrun
(
sc
)

3015 
dc_soác
 *
sc
;

3017 
u_t32_t
 
i¤
;

3018 
i
;

3020 ià(
	`DC_IS_DAVICOM
(
sc
))

3021 
	`dc_
(
sc
);

3023 ià(
	`DC_IS_INTEL
(
sc
)) {

3029 
	`DC_CLRBIT
(
sc
, 
DC_NETCFG
, 
DC_NETCFG_TX_ON
);

3031 
i
 = 0; i < 
DC_TIMEOUT
; i++) {

3032 
i¤
 = 
	`CSR_READ_4
(
sc
, 
DC_ISR
);

3033 ià(
i¤
 & 
DC_ISR_TX_IDLE
)

3035 
	`DELAY
(10);

3037 ià(
i
 =ð
DC_TIMEOUT
) {

3038 
	`´tk
("dc%d: failedo forcexo idle state\n",

3039 
sc
->
dc_un
);

3040 
	`dc_
(
sc
);

3044 
	`´tk
("dc%d: TX undruÀ-- ", 
sc
->
dc_un
);

3045 
sc
->
dc_txth»sh
 +ð
DC_TXTHRESH_INC
;

3046 ià(
sc
->
dc_txth»sh
 > 
DC_TXTHRESH_MAX
) {

3047 
	`´tk
("using storend forward mode\n");

3048 
	`DC_SETBIT
(
sc
, 
DC_NETCFG
, 
DC_NETCFG_STORENFWD
);

3050 
	`´tk
("increasing TXhreshold\n");

3051 
	`DC_CLRBIT
(
sc
, 
DC_NETCFG
, 
DC_NETCFG_TX_THRESH
);

3052 
	`DC_SETBIT
(
sc
, 
DC_NETCFG
, sc->
dc_txth»sh
);

3055 ià(
	`DC_IS_INTEL
(
sc
))

3056 
	`DC_SETBIT
(
sc
, 
DC_NETCFG
, 
DC_NETCFG_TX_ON
);

3059 
	}
}

3061 #ifdeà
DEVICE_POLLING


3062 
pÞl_hªdËr_t
 
	gdc_pÞl
;

3065 
	$dc_pÞl
(
iâ
 *
iå
, 
pÞl_cmd
 
cmd
, 
couÁ
)

3067 
dc_soác
 *
sc
 = 
iå
->
if_soác
;

3069 ià(
cmd
 =ð
POLL_DEREGISTER
) {

3071 
	`CSR_WRITE_4
(
sc
, 
DC_IMR
, 
DC_INTRS
);

3074 
sc
->
rxcyþes
 = 
couÁ
;

3075 
	`dc_rxeof
(
sc
);

3076 
	`dc_txeof
(
sc
);

3077 ià(
iå
->
if_¢d
.
ifq_hd
 !ð
NULL
 && !(iå->
if_æags
 & 
IFF_OACTIVE
))

3078 
	`dc_¡¬t
(
iå
);

3080 ià(
cmd
 =ð
POLL_AND_CHECK_STATUS
) {

3081 
u_t32_t
 
¡©us
;

3083 
¡©us
 = 
	`CSR_READ_4
(
sc
, 
DC_ISR
);

3084 
¡©us
 &ð(
DC_ISR_RX_WATDOGTIMEO
|
DC_ISR_RX_NOBUF
|

3085 
DC_ISR_TX_NOBUF
|
DC_ISR_TX_IDLE
|
DC_ISR_TX_UNDERRUN
|

3086 
DC_ISR_BUS_ERR
);

3087 ià(!
¡©us
)

3090 
	`CSR_WRITE_4
(
sc
, 
DC_ISR
, 
¡©us
);

3092 ià(
¡©us
 & (
DC_ISR_RX_WATDOGTIMEO
|
DC_ISR_RX_NOBUF
) ) {

3093 
u_t32_t
 
r
 = 
	`CSR_READ_4
(
sc
, 
DC_FRAMESDISCARDED
);

3094 
iå
->
if_¼Üs
 +ð(
r
 & 0xffff) + ((r >> 17) & 0x7ff);

3096 ià(
	`dc_rx_»sync
(
sc
))

3097 
	`dc_rxeof
(
sc
);

3100 ià(
¡©us
 & 
DC_ISR_TX_IDLE
 && 
sc
->
dc_cd©a
.
dc_tx_út
)

3101 
	`CSR_WRITE_4
(
sc
, 
DC_TXSTART
, 0xFFFFFFFF);

3103 ià(
¡©us
 & 
DC_ISR_TX_UNDERRUN
)

3104 
	`dc_tx_undrun
(
sc
);

3106 ià(
¡©us
 & 
DC_ISR_BUS_ERR
) {

3107 
	`´tk
("dc_pÞl: dc%d bu rÜ\n", 
sc
->
dc_un
);

3108 
	`dc_»£t
(
sc
);

3109 
	`dc_
(
sc
);

3112 
	}
}

3116 
	$dc_
(* 
¬g
)

3119 
dc_soác
 *
sc
 = (dc_soáø*)
¬g
;

3123 
	`CSR_WRITE_4
(
sc
, 
DC_IMR
, 0x00000000);

3125 
	`¹ems_bsdÃt_evt_£nd
(
sc
->
d«mÚtid
, 
IRQ_EVENT
);

3127 ià(
sc
->
su¥ded
) {

3131 
iå
 = &
sc
->
¬pcom
.
ac_if
;

3133 #ifdeà
DEVICE_POLLING


3134 ià(
iå
->
if_dg
 & 
IFF_POLLING
)

3136 ià(
	`h_pÞl_»gi¡
(
dc_pÞl
, 
iå
)) {

3137 
	`CSR_WRITE_4
(
sc
, 
DC_IMR
, 0x00000000);

3141 iàÐ(
	`CSR_READ_4
(
sc
, 
DC_ISR
è& 
DC_INTRS
) == 0)

3145 ià(!(
iå
->
if_æags
 & 
IFF_UP
)) {

3146 ià(
	`CSR_READ_4
(
sc
, 
DC_ISR
è& 
DC_INTRS
)

3147 
	`dc_¡Ý
(
sc
);

3151 
	}
}

3155 
	$dc_d«mÚ
(* 
¬g
)

3157 
dc_soác
 *
sc
 = (dc_soáø*)
¬g
;

3158 
iâ
 *
iå
;

3159 
u_t32_t
 
¡©us
;

3160 
¹ems_evt_£t
 
evts
;

3164 
	`¹ems_bsdÃt_evt_»ûive
(
RTEMS_ALL_EVENTS
, \

3165 
RTEMS_WAIT
 | 
RTEMS_EVENT_ANY
, \

3166 
RTEMS_NO_TIMEOUT
,

3167 &
evts
);

3170 
iå
 = &
sc
->
¬pcom
.
ac_if
;

3172 (
¡©us
 = 
	`CSR_READ_4
(
sc
, 
DC_ISR
)è& 
DC_INTRS
) {

3174 
	`CSR_WRITE_4
(
sc
, 
DC_ISR
, 
¡©us
);

3176 ià(
¡©us
 & 
DC_ISR_RX_OK
) {

3177 
cu½kts
;

3178 
cu½kts
 = 
iå
->
if_acks
;

3179 
	`dc_rxeof
(
sc
);

3180 ià(
cu½kts
 =ð
iå
->
if_acks
) {

3181 
	`dc_rx_»sync
(
sc
))

3182 
	`dc_rxeof
(
sc
);

3186 ià(
¡©us
 & (
DC_ISR_TX_OK
|
DC_ISR_TX_NOBUF
))

3187 
	`dc_txeof
(
sc
);

3189 ià(
¡©us
 & 
DC_ISR_TX_IDLE
) {

3190 
	`dc_txeof
(
sc
);

3191 ià(
sc
->
dc_cd©a
.
dc_tx_út
) {

3192 
	`DC_SETBIT
(
sc
, 
DC_NETCFG
, 
DC_NETCFG_TX_ON
);

3193 
	`CSR_WRITE_4
(
sc
, 
DC_TXSTART
, 0xFFFFFFFF);

3197 ià(
¡©us
 & 
DC_ISR_TX_UNDERRUN
)

3198 
	`dc_tx_undrun
(
sc
);

3200 ià((
¡©us
 & 
DC_ISR_RX_WATDOGTIMEO
)

3201 || (
¡©us
 & 
DC_ISR_RX_NOBUF
)) {

3202 
cu½kts
;

3203 
cu½kts
 = 
iå
->
if_acks
;

3204 
	`dc_rxeof
(
sc
);

3205 ià(
cu½kts
 =ð
iå
->
if_acks
) {

3206 
	`dc_rx_»sync
(
sc
))

3207 
	`dc_rxeof
(
sc
);

3211 ià(
¡©us
 & 
DC_ISR_BUS_ERR
) {

3212 
	`dc_»£t
(
sc
);

3213 
	`dc_
(
sc
);

3219 
	`CSR_WRITE_4
(
sc
, 
DC_IMR
, 
DC_INTRS
);

3221 ià(
iå
->
if_¢d
.
ifq_hd
 !ð
NULL
)

3222 
	`dc_¡¬t
(
iå
);

3225 
	}
}

3232 
	$dc_ÿp
(
sc
, 
m_hd
, 
txidx
)

3233 
dc_soác
 *
sc
;

3234 
mbuf
 *
m_hd
;

3235 
u_t32_t
 *
txidx
;

3237 
dc_desc
 *
f
 = 
NULL
;

3238 
mbuf
 *
m
;

3239 
äag
, 
cur
, 
út
 = 0;

3246 
m
 = 
m_hd
;

3247 
cur
 = 
äag
 = *
txidx
;

3249 
m
 = 
m_hd
; m !ð
NULL
; m = m->
m_Ãxt
) {

3250 ià(
m
->
m_Ën
 != 0) {

3251 ià(
sc
->
dc_æags
 & 
DC_TX_ADMTEK_WAR
) {

3252 ià(*
txidx
 !ð
sc
->
dc_cd©a
.
dc_tx_´od
 &&

3253 
äag
 =ð(
DC_TX_LIST_CNT
 - 1))

3254 (
ENOBUFS
);

3256 ià((
DC_TX_LIST_CNT
 -

3257 (
sc
->
dc_cd©a
.
dc_tx_út
 + 
út
)) < 5)

3258 (
ENOBUFS
);

3260 
f
 = &
sc
->
dc_ld©a
->
dc_tx_li¡
[
äag
];

3261 
f
->
dc_ùl
 = 
DC_TXCTL_TLINK
 | 
m
->
m_Ën
;

3262 ià(
út
 == 0) {

3263 
f
->
dc_¡©us
 = 0;

3264 
f
->
dc_ùl
 |ð
DC_TXCTL_FIRSTFRAG
;

3266 
f
->
dc_¡©us
 = 
DC_TXSTAT_OWN
;

3267 
f
->
dc_d©a
 = 
	`vtÝhys
(
	`mtod
(
m
, 
vm_off£t_t
));

3268 
cur
 = 
äag
;

3269 
	`DC_INC
(
äag
, 
DC_TX_LIST_CNT
);

3270 
út
++;

3274 ià(
m
 !ð
NULL
)

3275 (
ENOBUFS
);

3277 
sc
->
dc_cd©a
.
dc_tx_út
 +ð
út
;

3278 
sc
->
dc_cd©a
.
dc_tx_cha
[
cur
] = 
m_hd
;

3279 
sc
->
dc_ld©a
->
dc_tx_li¡
[
cur
].
dc_ùl
 |ð
DC_TXCTL_LASTFRAG
;

3280 ià(
sc
->
dc_æags
 & 
DC_TX_INTR_FIRSTFRAG
)

3281 
sc
->
dc_ld©a
->
dc_tx_li¡
[*
txidx
].
dc_ùl
 |ð
DC_TXCTL_FINT
;

3282 ià(
sc
->
dc_æags
 & 
DC_TX_INTR_ALWAYS
)

3283 
sc
->
dc_ld©a
->
dc_tx_li¡
[
cur
].
dc_ùl
 |ð
DC_TXCTL_FINT
;

3284 ià(
sc
->
dc_æags
 & 
DC_TX_USE_TX_INTR
 && sc->
dc_cd©a
.
dc_tx_út
 > 64)

3285 
sc
->
dc_ld©a
->
dc_tx_li¡
[
cur
].
dc_ùl
 |ð
DC_TXCTL_FINT
;

3286 
sc
->
dc_ld©a
->
dc_tx_li¡
[*
txidx
].
dc_¡©us
 = 
DC_TXSTAT_OWN
;

3287 *
txidx
 = 
äag
;

3290 
	}
}

3297 
	$dc_cßl
(
sc
, 
m_hd
)

3298 
dc_soác
 *
sc
;

3299 
mbuf
 **
m_hd
;

3301 
mbuf
 *
m_Ãw
, *
m
;

3303 
m
 = *
m_hd
;

3304 
	`MGETHDR
(
m_Ãw
, 
M_DONTWAIT
, 
MT_DATA
);

3305 ià(
m_Ãw
 =ð
NULL
)

3306 (
ENOBUFS
);

3307 ià(
m
->
m_pkthdr
.
Ën
 > 
MHLEN
) {

3308 
	`MCLGET
(
m_Ãw
, 
M_DONTWAIT
);

3309 ià(!(
m_Ãw
->
m_æags
 & 
M_EXT
)) {

3310 
	`m_äm
(
m_Ãw
);

3311 (
ENOBUFS
);

3314 
	`m_cÝyd©a
(
m
, 0, m->
m_pkthdr
.
Ën
, 
	`mtod
(
m_Ãw
, 
ÿddr_t
));

3315 
m_Ãw
->
m_pkthdr
.
Ën
 = m_Ãw->
m_Ën
 = 
m
->m_pkthdr.len;

3316 
	`m_äm
(
m
);

3317 *
m_hd
 = 
m_Ãw
;

3320 
	}
}

3329 
	$dc_¡¬t
(
iå
)

3330 
iâ
 *
iå
;

3332 
dc_soác
 *
sc
;

3333 
mbuf
 *
m_hd
 = 
NULL
;

3334 
u_t32_t
 
idx
;

3336 
sc
 = 
iå
->
if_soác
;

3338 ià(!
sc
->
dc_lk
 && 
iå
->
if_¢d
.
ifq_Ën
 < 10)

3341 ià(
iå
->
if_æags
 & 
IFF_OACTIVE
)

3344 
idx
 = 
sc
->
dc_cd©a
.
dc_tx_´od
;

3346 
sc
->
dc_cd©a
.
dc_tx_cha
[
idx
] =ð
NULL
) {

3347 
	`IF_DEQUEUE
(&
iå
->
if_¢d
, 
m_hd
);

3348 ià(
m_hd
 =ð
NULL
)

3351 ià(
sc
->
dc_æags
 & 
DC_TX_COALESCE
 &&

3352 
m_hd
->
m_Ãxt
 !ð
NULL
) {

3354 ià(
	`dc_cßl
(
sc
, &
m_hd
)) {

3355 
	`IF_PREPEND
(&
iå
->
if_¢d
, 
m_hd
);

3356 
iå
->
if_æags
 |ð
IFF_OACTIVE
;

3361 ià(
	`dc_ÿp
(
sc
, 
m_hd
, &
idx
)) {

3362 
	`IF_PREPEND
(&
iå
->
if_¢d
, 
m_hd
);

3363 
iå
->
if_æags
 |ð
IFF_OACTIVE
;

3371 ià(
iå
->
if_bpf
)

3372 
	`bpf_mp
(
iå
, 
m_hd
);

3374 ià(
sc
->
dc_æags
 & 
DC_TX_ONE
) {

3375 
iå
->
if_æags
 |ð
IFF_OACTIVE
;

3381 
sc
->
dc_cd©a
.
dc_tx_´od
 = 
idx
;

3382 ià(!(
sc
->
dc_æags
 & 
DC_TX_POLL
))

3383 
	`CSR_WRITE_4
(
sc
, 
DC_TXSTART
, 0xFFFFFFFF);

3388 
iå
->
if_tim
 = 5;

3391 
	}
}

3393 
	$dc_
(
xsc
)

3394 *
xsc
;

3396 
dc_soác
 *
sc
 = 
xsc
;

3397 
iâ
 *
iå
 = &
sc
->
¬pcom
.
ac_if
;

3406 
	`dc_¡Ý
(
sc
);

3407 
	`dc_»£t
(
sc
);

3412 ià(
	`DC_IS_ASIX
(
sc
è|| 
	`DC_IS_DAVICOM
(sc))

3413 
	`CSR_WRITE_4
(
sc
, 
DC_BUSCTL
, 0);

3415 
	`CSR_WRITE_4
(
sc
, 
DC_BUSCTL
, 
DC_BUSCTL_MRME
|
DC_BUSCTL_MRLE
);

3419 ià(
	`DC_IS_INTEL
(
sc
))

3420 
	`DC_SETBIT
(
sc
, 
DC_BUSCTL
, 
DC_BUSCTL_ARBITRATION
);

3421 ià(
	`DC_IS_DAVICOM
(
sc
è|| 
	`DC_IS_INTEL
(sc)) {

3422 
	`DC_SETBIT
(
sc
, 
DC_BUSCTL
, 
DC_BURSTLEN_USECA
);

3424 
	`DC_SETBIT
(
sc
, 
DC_BUSCTL
, 
DC_BURSTLEN_16LONG
);

3426 ià(
sc
->
dc_æags
 & 
DC_TX_POLL
)

3427 
	`DC_SETBIT
(
sc
, 
DC_BUSCTL
, 
DC_TXPOLL_1
);

3428 
sc
->
dc_ÿchesize
) {

3430 
	`DC_SETBIT
(
sc
, 
DC_BUSCTL
, 
DC_CACHEALIGN_32LONG
);

3433 
	`DC_SETBIT
(
sc
, 
DC_BUSCTL
, 
DC_CACHEALIGN_16LONG
);

3436 
	`DC_SETBIT
(
sc
, 
DC_BUSCTL
, 
DC_CACHEALIGN_8LONG
);

3440 
	`DC_SETBIT
(
sc
, 
DC_BUSCTL
, 
DC_CACHEALIGN_NONE
);

3444 ià(
sc
->
dc_æags
 & 
DC_TX_STORENFWD
)

3445 
	`DC_SETBIT
(
sc
, 
DC_NETCFG
, 
DC_NETCFG_STORENFWD
);

3447 ià(
sc
->
dc_txth»sh
 > 
DC_TXTHRESH_MAX
) {

3448 
	`DC_SETBIT
(
sc
, 
DC_NETCFG
, 
DC_NETCFG_STORENFWD
);

3450 
	`DC_CLRBIT
(
sc
, 
DC_NETCFG
, 
DC_NETCFG_STORENFWD
);

3451 
	`DC_SETBIT
(
sc
, 
DC_NETCFG
, sc->
dc_txth»sh
);

3455 
	`DC_SETBIT
(
sc
, 
DC_NETCFG
, 
DC_NETCFG_NO_RXCRC
);

3456 
	`DC_CLRBIT
(
sc
, 
DC_NETCFG
, 
DC_NETCFG_TX_BACKOFF
);

3458 ià(
	`DC_IS_MACRONIX
(
sc
è|| 
	`DC_IS_PNICII
(sc)) {

3467 
	`DC_CLRBIT
(
sc
, 
DC_MX_MAGICPACKET
, 0xFFFF0000);

3468 ià(
sc
->
dc_ty³
 =ð
DC_TYPE_98713
)

3469 
	`DC_SETBIT
(
sc
, 
DC_MX_MAGICPACKET
, 
DC_MX_MAGIC_98713
);

3471 
	`DC_SETBIT
(
sc
, 
DC_MX_MAGICPACKET
, 
DC_MX_MAGIC_98715
);

3474 
	`DC_CLRBIT
(
sc
, 
DC_NETCFG
, 
DC_NETCFG_TX_THRESH
);

3475 
	`DC_SETBIT
(
sc
, 
DC_NETCFG
, 
DC_TXTHRESH_MIN
);

3478 ià(
	`dc_li¡_rx_
(
sc
è=ð
ENOBUFS
) {

3479 
	`´tk
("dc%d: initialization failed:o "

3480 "memÜy fÜx bufãrs\n", 
sc
->
dc_un
);

3481 
	`dc_¡Ý
(
sc
);

3488 
	`dc_li¡_tx_
(
sc
);

3493 
	`CSR_WRITE_4
(
sc
, 
DC_RXADDR
, 
	`vtÝhys
(&sc->
dc_ld©a
->
dc_rx_li¡
[0]));

3494 
	`CSR_WRITE_4
(
sc
, 
DC_TXADDR
, 
	`vtÝhys
(&sc->
dc_ld©a
->
dc_tx_li¡
[0]));

3499 #ifdeà
DEVICE_POLLING


3505 ià(
iå
->
if_dg
 & 
IFF_POLLING
)

3506 
	`CSR_WRITE_4
(
sc
, 
DC_IMR
, 0x00000000);

3510 
	`CSR_WRITE_4
(
sc
, 
DC_IMR
, 
DC_INTRS
);

3511 
	`CSR_WRITE_4
(
sc
, 
DC_ISR
, 0xFFFFFFFF);

3514 
	`DC_SETBIT
(
sc
, 
DC_NETCFG
, 
DC_NETCFG_TX_ON
);

3521 ià(
sc
->
dc_æags
 & 
DC_TULIP_LEDS
) {

3522 
	`CSR_WRITE_4
(
sc
, 
DC_WATCHDOG
,

3523 
DC_WDOG_CTLWREN
|
DC_WDOG_LINK
|
DC_WDOG_ACTIVITY
);

3524 
	`CSR_WRITE_4
(
sc
, 
DC_WATCHDOG
, 0);

3533 
	`dc_£tft
(
sc
);

3536 
	`DC_SETBIT
(
sc
, 
DC_NETCFG
, 
DC_NETCFG_RX_ON
);

3537 
	`CSR_WRITE_4
(
sc
, 
DC_RXSTART
, 0xFFFFFFFF);

3540 
	`dc_£tcfg
(
sc
, sc->
dc_if_med
);

3542 
iå
->
if_æags
 |ð
IFF_RUNNING
;

3543 
iå
->
if_æags
 &ð~
IFF_OACTIVE
;

3549 ià(
	`IFM_SUBTYPE
(
mii
->
mii_med
.
ifm_med
è=ð
IFM_homePNA
)

3550 
sc
->
dc_lk
 = 1;

3552 ià(
sc
->
dc_æags
 & 
DC_21143_NWAY
)

3553 
sc
->
dc_¡©_ch
 = 
	`timeout
(
dc_tick
, sc, 
hz
/10);

3555 
sc
->
dc_¡©_ch
 = 
	`timeout
(
dc_tick
, sc, 
hz
);

3558 #ifdeà
SRM_MEDIA


3559 if(
sc
->
dc_¤m_med
) {

3560 
iäeq
 
iä
;

3562 
iä
.
iä_med
 = 
sc
->
dc_¤m_med
;

3563 
	`ifmed_ioùl
(
iå
, &
iä
, &
mii
->
mii_med
, 
SIOCSIFMEDIA
);

3564 
sc
->
dc_¤m_med
 = 0;

3569 
	}
}

3576 
	$dc_ifmed_upd
(
iå
)

3577 
iâ
 *
iå
;

3579 
dc_soác
 *
sc
;

3580 
mii_d©a
 *
mii
;

3581 
ifmed
 *
ifm
;

3583 
sc
 = 
iå
->
if_soác
;

3584 
mii
 = 
	`deviû_g_soác
(
sc
->
dc_miibus
);

3585 
	`mii_medchg
(
mii
);

3586 
ifm
 = &
mii
->
mii_med
;

3588 ià(
	`DC_IS_DAVICOM
(
sc
) &&

3589 
	`IFM_SUBTYPE
(
ifm
->
ifm_med
è=ð
IFM_homePNA
)

3590 
	`dc_£tcfg
(
sc
, 
ifm
->
ifm_med
);

3592 
sc
->
dc_lk
 = 0;

3595 
	}
}

3600 
	$dc_ifmed_¡s
(
iå
, 
ifmr
)

3601 
iâ
 *
iå
;

3602 
ifmed»q
 *
ifmr
;

3604 
dc_soác
 *
sc
;

3605 
mii_d©a
 *
mii
;

3606 
ifmed
 *
ifm
;

3608 
sc
 = 
iå
->
if_soác
;

3609 
mii
 = 
	`deviû_g_soác
(
sc
->
dc_miibus
);

3610 
	`mii_pÞl¡©
(
mii
);

3611 
ifm
 = &
mii
->
mii_med
;

3612 ià(
	`DC_IS_DAVICOM
(
sc
)) {

3613 ià(
	`IFM_SUBTYPE
(
ifm
->
ifm_med
è=ð
IFM_homePNA
) {

3614 
ifmr
->
ifm_aùive
 = 
ifm
->
ifm_med
;

3615 
ifmr
->
ifm_¡©us
 = 0;

3619 
ifmr
->
ifm_aùive
 = 
mii
->
mii_med_aùive
;

3620 
ifmr
->
ifm_¡©us
 = 
mii
->
mii_med_¡©us
;

3623 
	}
}

3627 
	$dc_ioùl
(
iå
, 
commªd
, 
d©a
)

3628 
iâ
 *
iå
;

3629 
ioùl_commªd_t
 
commªd
;

3630 
ÿddr_t
 
d©a
;

3632 
dc_soác
 *
sc
 = 
iå
->
if_soác
;

3635 
rÜ
 = 0;

3638 
commªd
) {

3639 
SIOCSIFADDR
:

3640 
SIOCGIFADDR
:

3641 
SIOCSIFMTU
:

3642 
rÜ
 = 
	`h_ioùl
(
iå
, 
commªd
, 
d©a
);

3644 
SIOCSIFFLAGS
:

3645 ià(
iå
->
if_æags
 & 
IFF_UP
) {

3646 
Ãed_£tft
 = (
iå
->
if_æags
 ^ 
sc
->
dc_if_æags
) &

3647 (
IFF_PROMISC
 | 
IFF_ALLMULTI
);

3648 ià(
iå
->
if_æags
 & 
IFF_RUNNING
) {

3649 ià(
Ãed_£tft
)

3650 
	`dc_£tft
(
sc
);

3652 
sc
->
dc_txth»sh
 = 0;

3653 
	`dc_
(
sc
);

3656 ià(
iå
->
if_æags
 & 
IFF_RUNNING
)

3657 
	`dc_¡Ý
(
sc
);

3659 
sc
->
dc_if_æags
 = 
iå
->
if_æags
;

3660 
rÜ
 = 0;

3662 
SIOCADDMULTI
:

3663 
SIOCDELMULTI
:

3664 
	`dc_£tft
(
sc
);

3665 
rÜ
 = 0;

3668 
SIOCGIFMEDIA
:

3669 
SIOCSIFMEDIA
:

3670 
mii
 = 
	`deviû_g_soác
(
sc
->
dc_miibus
);

3671 
rÜ
 = 
	`ifmed_ioùl
(
iå
, 
iä
, &
mii
->
mii_med
, 
commªd
);

3672 #ifdeà
SRM_MEDIA


3673 ià(
sc
->
dc_¤m_med
)

3674 
sc
->
dc_¤m_med
 = 0;

3679 
rÜ
 = 
EINVAL
;

3684 (
rÜ
);

3685 
	}
}

3687 
	$dc_w©chdog
(
iå
)

3688 
iâ
 *
iå
;

3690 
dc_soác
 *
sc
;

3692 
sc
 = 
iå
->
if_soác
;

3694 
iå
->
if_Û¼Üs
++;

3695 
	`´tk
("dc%d: w©chdogimeout\n", 
sc
->
dc_un
);

3697 
	`dc_¡Ý
(
sc
);

3698 
	`dc_»£t
(
sc
);

3699 
	`dc_
(
sc
);

3701 ià(
iå
->
if_¢d
.
ifq_hd
 !ð
NULL
)

3702 
	`dc_¡¬t
(
iå
);

3705 
	}
}

3711 
	$dc_¡Ý
(
sc
)

3712 
dc_soác
 *
sc
;

3714 
i
;

3715 
iâ
 *
iå
;

3717 
iå
 = &
sc
->
¬pcom
.
ac_if
;

3718 
iå
->
if_tim
 = 0;

3722 
iå
->
if_æags
 &ð~(
IFF_RUNNING
 | 
IFF_OACTIVE
);

3723 #ifdeà
DEVICE_POLLING


3724 
	`h_pÞl_degi¡
(
iå
);

3727 
	`DC_CLRBIT
(
sc
, 
DC_NETCFG
, (
DC_NETCFG_RX_ON
|
DC_NETCFG_TX_ON
));

3728 
	`CSR_WRITE_4
(
sc
, 
DC_IMR
, 0x00000000);

3729 
	`CSR_WRITE_4
(
sc
, 
DC_TXADDR
, 0x00000000);

3730 
	`CSR_WRITE_4
(
sc
, 
DC_RXADDR
, 0x00000000);

3731 
sc
->
dc_lk
 = 0;

3736 
i
 = 0; i < 
DC_RX_LIST_CNT
; i++) {

3737 ià(
sc
->
dc_cd©a
.
dc_rx_cha
[
i
] !ð
NULL
) {

3738 
	`m_äm
(
sc
->
dc_cd©a
.
dc_rx_cha
[
i
]);

3739 
sc
->
dc_cd©a
.
dc_rx_cha
[
i
] = 
NULL
;

3742 
	`bzo
((*)&
sc
->
dc_ld©a
->
dc_rx_li¡
,

3743 (
sc
->
dc_ld©a
->
dc_rx_li¡
));

3748 
i
 = 0; i < 
DC_TX_LIST_CNT
; i++) {

3749 ià(
sc
->
dc_cd©a
.
dc_tx_cha
[
i
] !ð
NULL
) {

3750 ià(
sc
->
dc_ld©a
->
dc_tx_li¡
[
i
].
dc_ùl
 &

3751 
DC_TXCTL_SETUP
) {

3752 
sc
->
dc_cd©a
.
dc_tx_cha
[
i
] = 
NULL
;

3755 
	`m_äm
(
sc
->
dc_cd©a
.
dc_tx_cha
[
i
]);

3756 
sc
->
dc_cd©a
.
dc_tx_cha
[
i
] = 
NULL
;

3760 
	`bzo
((*)&
sc
->
dc_ld©a
->
dc_tx_li¡
,

3761 (
sc
->
dc_ld©a
->
dc_tx_li¡
));

3764 
	}
}

3772 
	$dc_shutdown
(
dev
)

3773 
deviû_t
 
dev
;

3775 
dc_soác
 *
sc
;

3777 
sc
 = 
	`deviû_g_soác
(
dev
);

3779 
	`dc_¡Ý
(
sc
);

3782 
	}
}

3789 
	$dc_su¥d
(
dev
)

3790 
deviû_t
 
dev
;

3792 
i
;

3793 
s
;

3794 
dc_soác
 *
sc
;

3797 
sc
 = 
	`deviû_g_soác
(
dev
);

3799 
	`dc_¡Ý
(
sc
);

3801 
i
 = 0; i < 5; i++)

3802 
sc
->
§ved_m­s
[
i
] = 
	`pci_»ad_cÚfig
(
dev
, 
PCIR_MAPS
 + i * 4, 4);

3803 
sc
->
§ved_bio§ddr
 = 
	`pci_»ad_cÚfig
(
dev
, 
PCIR_BIOS
, 4);

3804 
sc
->
§ved_e
 = 
	`pci_»ad_cÚfig
(
dev
, 
PCIR_INTLINE
, 1);

3805 
sc
->
§ved_ÿchnsz
 = 
	`pci_»ad_cÚfig
(
dev
, 
PCIR_CACHELNSZ
, 1);

3806 
sc
->
§ved_Ïim
 = 
	`pci_»ad_cÚfig
(
dev
, 
PCIR_LATTIMER
, 1);

3808 
sc
->
su¥ded
 = 1;

3811 
	}
}

3818 
	$dc_»sume
(
dev
)

3819 
deviû_t
 
dev
;

3821 
i
;

3822 
s
;

3823 
dc_soác
 *
sc
;

3824 
iâ
 *
iå
;

3827 
sc
 = 
	`deviû_g_soác
(
dev
);

3828 
iå
 = &
sc
->
¬pcom
.
ac_if
;

3830 
	`dc_aýi
(
dev
);

3833 
i
 = 0; i < 5; i++)

3834 
	`pci_wre_cÚfig
(
dev
, 
PCIR_MAPS
 + 
i
 * 4, 
sc
->
§ved_m­s
[i], 4);

3835 
	`pci_wre_cÚfig
(
dev
, 
PCIR_BIOS
, 
sc
->
§ved_bio§ddr
, 4);

3836 
	`pci_wre_cÚfig
(
dev
, 
PCIR_INTLINE
, 
sc
->
§ved_e
, 1);

3837 
	`pci_wre_cÚfig
(
dev
, 
PCIR_CACHELNSZ
, 
sc
->
§ved_ÿchnsz
, 1);

3838 
	`pci_wre_cÚfig
(
dev
, 
PCIR_LATTIMER
, 
sc
->
§ved_Ïim
, 1);

3841 
	`pci_abË_busma¡
(
dev
);

3842 
	`pci_abË_io
(
dev
, 
DC_RES
);

3845 ià(
iå
->
if_æags
 & 
IFF_UP
)

3846 
	`dc_
(
sc
);

3848 
sc
->
su¥ded
 = 0;

3851 
	}
}

	@src/libchip/network/if_dcreg.h

39 
	#DC_BUSCTL
 0x00

	)

40 
	#DC_TXSTART
 0x08

	)

41 
	#DC_RXSTART
 0x10

	)

42 
	#DC_RXADDR
 0x18

	)

43 
	#DC_TXADDR
 0x20

	)

44 
	#DC_ISR
 0x28

	)

45 
	#DC_NETCFG
 0x30

	)

46 
	#DC_IMR
 0x38

	)

47 
	#DC_FRAMESDISCARDED
 0x40

	)

48 
	#DC_SIO
 0x48

	)

49 
	#DC_ROM
 0x50

	)

50 
	#DC_TIMER
 0x58

	)

51 
	#DC_10BTSTAT
 0x60

	)

52 
	#DC_SIARESET
 0x68

	)

53 
	#DC_10BTCTRL
 0x70

	)

54 
	#DC_WATCHDOG
 0x78

	)

66 
	#DC_TYPE_98713
 0x1

	)

67 
	#DC_TYPE_98713A
 0x2

	)

68 
	#DC_TYPE_987x5
 0x3

	)

71 
	#DC_TYPE_21143
 0x4

	)

72 
	#DC_TYPE_ASIX
 0x5

	)

73 
	#DC_TYPE_AL981
 0x6

	)

74 
	#DC_TYPE_AN985
 0x7

	)

75 
	#DC_TYPE_DM9102
 0x8

	)

76 
	#DC_TYPE_PNICII
 0x9

	)

77 
	#DC_TYPE_PNIC
 0xA

	)

78 
	#DC_TYPE_CONEXANT
 0xC

	)

80 
	#DC_IS_MACRONIX
(
x
) \

81 (
x
->
dc_ty³
 =ð
DC_TYPE_98713
 || \

82 
x
->
dc_ty³
 =ð
DC_TYPE_98713A
 || \

83 
x
->
dc_ty³
 =ð
DC_TYPE_987x5
)

	)

85 
	#DC_IS_ADMTEK
(
x
) \

86 (
x
->
dc_ty³
 =ð
DC_TYPE_AL981
 || \

87 
x
->
dc_ty³
 =ð
DC_TYPE_AN985
)

	)

89 
	#DC_IS_INTEL
(
x
è(x->
dc_ty³
 =ð
DC_TYPE_21143
)

	)

90 
	#DC_IS_ASIX
(
x
è(x->
dc_ty³
 =ð
DC_TYPE_ASIX
)

	)

91 
	#DC_IS_COMET
(
x
è(x->
dc_ty³
 =ð
DC_TYPE_AL981
)

	)

92 
	#DC_IS_CENTAUR
(
x
è(x->
dc_ty³
 =ð
DC_TYPE_AN985
)

	)

93 
	#DC_IS_DAVICOM
(
x
è(x->
dc_ty³
 =ð
DC_TYPE_DM9102
)

	)

94 
	#DC_IS_PNICII
(
x
è(x->
dc_ty³
 =ð
DC_TYPE_PNICII
)

	)

95 
	#DC_IS_PNIC
(
x
è(x->
dc_ty³
 =ð
DC_TYPE_PNIC
)

	)

96 
	#DC_IS_CONEXANT
(
x
è(x->
dc_ty³
 =ð
DC_TYPE_CONEXANT
)

	)

99 
	#DC_PMODE_MII
 0x1

	)

100 
	#DC_PMODE_SYM
 0x2

	)

101 
	#DC_PMODE_SIA
 0x3

	)

106 
	#DC_BUSCTL_RESET
 0x00000001

	)

107 
	#DC_BUSCTL_ARBITRATION
 0x00000002

	)

108 
	#DC_BUSCTL_SKIPLEN
 0x0000007C

	)

109 
	#DC_BUSCTL_BUF_BIGENDIAN
 0x00000080

	)

110 
	#DC_BUSCTL_BURSTLEN
 0x00003F00

	)

111 
	#DC_BUSCTL_CACHEALIGN
 0x0000C000

	)

112 
	#DC_BUSCTL_TXPOLL
 0x000E0000

	)

113 
	#DC_BUSCTL_DBO
 0x00100000

	)

114 
	#DC_BUSCTL_MRME
 0x00200000

	)

115 
	#DC_BUSCTL_MRLE
 0x00800000

	)

116 
	#DC_BUSCTL_MWIE
 0x01000000

	)

117 
	#DC_BUSCTL_ONNOW_ENB
 0x04000000

	)

119 
	#DC_SKIPLEN_1LONG
 0x00000004

	)

120 
	#DC_SKIPLEN_2LONG
 0x00000008

	)

121 
	#DC_SKIPLEN_3LONG
 0x00000010

	)

122 
	#DC_SKIPLEN_4LONG
 0x00000020

	)

123 
	#DC_SKIPLEN_5LONG
 0x00000040

	)

125 
	#DC_CACHEALIGN_NONE
 0x00000000

	)

126 
	#DC_CACHEALIGN_8LONG
 0x00004000

	)

127 
	#DC_CACHEALIGN_16LONG
 0x00008000

	)

128 
	#DC_CACHEALIGN_32LONG
 0x0000C000

	)

130 
	#DC_BURSTLEN_USECA
 0x00000000

	)

131 
	#DC_BURSTLEN_1LONG
 0x00000100

	)

132 
	#DC_BURSTLEN_2LONG
 0x00000200

	)

133 
	#DC_BURSTLEN_4LONG
 0x00000400

	)

134 
	#DC_BURSTLEN_8LONG
 0x00000800

	)

135 
	#DC_BURSTLEN_16LONG
 0x00001000

	)

136 
	#DC_BURSTLEN_32LONG
 0x00002000

	)

138 
	#DC_TXPOLL_OFF
 0x00000000

	)

139 
	#DC_TXPOLL_1
 0x00020000

	)

140 
	#DC_TXPOLL_2
 0x00040000

	)

141 
	#DC_TXPOLL_3
 0x00060000

	)

142 
	#DC_TXPOLL_4
 0x00080000

	)

143 
	#DC_TXPOLL_5
 0x000A0000

	)

144 
	#DC_TXPOLL_6
 0x000C0000

	)

145 
	#DC_TXPOLL_7
 0x000E0000

	)

150 
	#DC_ISR_TX_OK
 0x00000001

	)

151 
	#DC_ISR_TX_IDLE
 0x00000002

	)

152 
	#DC_ISR_TX_NOBUF
 0x00000004

	)

153 
	#DC_ISR_TX_JABBERTIMEO
 0x00000008

	)

154 
	#DC_ISR_LINKGOOD
 0x00000010

	)

155 
	#DC_ISR_TX_UNDERRUN
 0x00000020

	)

156 
	#DC_ISR_RX_OK
 0x00000040

	)

157 
	#DC_ISR_RX_NOBUF
 0x00000080

	)

158 
	#DC_ISR_RX_READ
 0x00000100

	)

159 
	#DC_ISR_RX_WATDOGTIMEO
 0x00000200

	)

160 
	#DC_ISR_TX_EARLY
 0x00000400

	)

161 
	#DC_ISR_TIMER_EXPIRED
 0x00000800

	)

162 
	#DC_ISR_LINKFAIL
 0x00001000

	)

163 
	#DC_ISR_BUS_ERR
 0x00002000

	)

164 
	#DC_ISR_RX_EARLY
 0x00004000

	)

165 
	#DC_ISR_ABNORMAL
 0x00008000

	)

166 
	#DC_ISR_NORMAL
 0x00010000

	)

167 
	#DC_ISR_RX_STATE
 0x000E0000

	)

168 
	#DC_ISR_TX_STATE
 0x00700000

	)

169 
	#DC_ISR_BUSERRTYPE
 0x03800000

	)

170 
	#DC_ISR_100MBPSLINK
 0x08000000

	)

171 
	#DC_ISR_MAGICKPACK
 0x10000000

	)

173 
	#DC_RXSTATE_STOPPED
 0x00000000

	)

174 
	#DC_RXSTATE_FETCH
 0x00020000

	)

175 
	#DC_RXSTATE_ENDCHECK
 0x00040000

	)

176 
	#DC_RXSTATE_WAIT
 0x00060000

	)

177 
	#DC_RXSTATE_SUSPEND
 0x00080000

	)

178 
	#DC_RXSTATE_CLOSE
 0x000A0000

	)

179 
	#DC_RXSTATE_FLUSH
 0x000C0000

	)

180 
	#DC_RXSTATE_DEQUEUE
 0x000E0000

	)

182 
	#DC_TXSTATE_RESET
 0x00000000

	)

183 
	#DC_TXSTATE_FETCH
 0x00100000

	)

184 
	#DC_TXSTATE_WAITEND
 0x00200000

	)

185 
	#DC_TXSTATE_READING
 0x00300000

	)

186 
	#DC_TXSTATE_RSVD
 0x00400000

	)

187 
	#DC_TXSTATE_SETUP
 0x00500000

	)

188 
	#DC_TXSTATE_SUSPEND
 0x00600000

	)

189 
	#DC_TXSTATE_CLOSE
 0x00700000

	)

194 
	#DC_NETCFG_RX_HASHPERF
 0x00000001

	)

195 
	#DC_NETCFG_RX_ON
 0x00000002

	)

196 
	#DC_NETCFG_RX_HASHONLY
 0x00000004

	)

197 
	#DC_NETCFG_RX_BADFRAMES
 0x00000008

	)

198 
	#DC_NETCFG_RX_INVFILT
 0x00000010

	)

199 
	#DC_NETCFG_BACKOFFCNT
 0x00000020

	)

200 
	#DC_NETCFG_RX_PROMISC
 0x00000040

	)

201 
	#DC_NETCFG_RX_ALLMULTI
 0x00000080

	)

202 
	#DC_NETCFG_FULLDUPLEX
 0x00000200

	)

203 
	#DC_NETCFG_LOOPBACK
 0x00000C00

	)

204 
	#DC_NETCFG_FORCECOLL
 0x00001000

	)

205 
	#DC_NETCFG_TX_ON
 0x00002000

	)

206 
	#DC_NETCFG_TX_THRESH
 0x0000C000

	)

207 
	#DC_NETCFG_TX_BACKOFF
 0x00020000

	)

208 
	#DC_NETCFG_PORTSEL
 0x00040000

	)

209 
	#DC_NETCFG_HEARTBEAT
 0x00080000

	)

210 
	#DC_NETCFG_STORENFWD
 0x00200000

	)

211 
	#DC_NETCFG_SPEEDSEL
 0x00400000

	)

212 
	#DC_NETCFG_PCS
 0x00800000

	)

213 
	#DC_NETCFG_SCRAMBLER
 0x01000000

	)

214 
	#DC_NETCFG_NO_RXCRC
 0x02000000

	)

215 
	#DC_NETCFG_RX_ALL
 0x40000000

	)

216 
	#DC_NETCFG_CAPEFFECT
 0x80000000

	)

218 
	#DC_OPMODE_NORM
 0x00000000

	)

219 
	#DC_OPMODE_INTLOOP
 0x00000400

	)

220 
	#DC_OPMODE_EXTLOOP
 0x00000800

	)

223 
	#DC_TXTHRESH_72BYTES
 0x00000000

	)

224 
	#DC_TXTHRESH_96BYTES
 0x00004000

	)

225 
	#DC_TXTHRESH_128BYTES
 0x00008000

	)

226 
	#DC_TXTHRESH_160BYTES
 0x0000C000

	)

229 
	#DC_TXTHRESH_MIN
 0x00000000

	)

230 
	#DC_TXTHRESH_INC
 0x00004000

	)

231 
	#DC_TXTHRESH_MAX
 0x0000C000

	)

237 
	#DC_IMR_TX_OK
 0x00000001

	)

238 
	#DC_IMR_TX_IDLE
 0x00000002

	)

239 
	#DC_IMR_TX_NOBUF
 0x00000004

	)

240 
	#DC_IMR_TX_JABBERTIMEO
 0x00000008

	)

241 
	#DC_IMR_LINKGOOD
 0x00000010

	)

242 
	#DC_IMR_TX_UNDERRUN
 0x00000020

	)

243 
	#DC_IMR_RX_OK
 0x00000040

	)

244 
	#DC_IMR_RX_NOBUF
 0x00000080

	)

245 
	#DC_IMR_RX_READ
 0x00000100

	)

246 
	#DC_IMR_RX_WATDOGTIMEO
 0x00000200

	)

247 
	#DC_IMR_TX_EARLY
 0x00000400

	)

248 
	#DC_IMR_TIMER_EXPIRED
 0x00000800

	)

249 
	#DC_IMR_LINKFAIL
 0x00001000

	)

250 
	#DC_IMR_BUS_ERR
 0x00002000

	)

251 
	#DC_IMR_RX_EARLY
 0x00004000

	)

252 
	#DC_IMR_ABNORMAL
 0x00008000

	)

253 
	#DC_IMR_NORMAL
 0x00010000

	)

254 
	#DC_IMR_100MBPSLINK
 0x08000000

	)

255 
	#DC_IMR_MAGICKPACK
 0x10000000

	)

257 
	#DC_INTRS
 \

258 (
DC_IMR_RX_OK
|
DC_IMR_TX_OK
|
DC_IMR_RX_NOBUF
|
DC_IMR_RX_WATDOGTIMEO
|\

259 
DC_IMR_TX_NOBUF
|
DC_IMR_TX_UNDERRUN
|
DC_IMR_BUS_ERR
| \

260 
DC_IMR_ABNORMAL
|
DC_IMR_NORMAL
 )

	)

264 
	#DC_SIO_EE_CS
 0x00000001

	)

265 
	#DC_SIO_EE_CLK
 0x00000002

	)

266 
	#DC_SIO_EE_DATAIN
 0x00000004

	)

267 
	#DC_SIO_EE_DATAOUT
 0x00000008

	)

268 
	#DC_SIO_ROMDATA4
 0x00000010

	)

269 
	#DC_SIO_ROMDATA5
 0x00000020

	)

270 
	#DC_SIO_ROMDATA6
 0x00000040

	)

271 
	#DC_SIO_ROMDATA7
 0x00000080

	)

272 
	#DC_SIO_EESEL
 0x00000800

	)

273 
	#DC_SIO_ROMSEL
 0x00001000

	)

274 
	#DC_SIO_ROMCTL_WRITE
 0x00002000

	)

275 
	#DC_SIO_ROMCTL_READ
 0x00004000

	)

276 
	#DC_SIO_MII_CLK
 0x00010000

	)

277 
	#DC_SIO_MII_DATAOUT
 0x00020000

	)

278 
	#DC_SIO_MII_DIR
 0x00040000

	)

279 
	#DC_SIO_MII_DATAIN
 0x00080000

	)

281 
	#DC_EECMD_WRITE
 0x140

	)

282 
	#DC_EECMD_READ
 0x180

	)

283 
	#DC_EECMD_ERASE
 0x1c0

	)

285 
	#DC_EE_NODEADDR_OFFSET
 0x70

	)

286 
	#DC_EE_NODEADDR
 10

	)

291 
	#DC_TIMER_VALUE
 0x0000FFFF

	)

292 
	#DC_TIMER_CONTINUOUS
 0x00010000

	)

297 
	#DC_TSTAT_MIIACT
 0x00000001

	)

298 
	#DC_TSTAT_LS100
 0x00000002

	)

299 
	#DC_TSTAT_LS10
 0x00000004

	)

300 
	#DC_TSTAT_AUTOPOLARITY
 0x00000008

	)

301 
	#DC_TSTAT_AUIACT
 0x00000100

	)

302 
	#DC_TSTAT_10BTACT
 0x00000200

	)

303 
	#DC_TSTAT_NSN
 0x00000400

	)

304 
	#DC_TSTAT_REMFAULT
 0x00000800

	)

305 
	#DC_TSTAT_ANEGSTAT
 0x00007000

	)

306 
	#DC_TSTAT_LP_CAN_NWAY
 0x00008000

	)

307 
	#DC_TSTAT_LPCODEWORD
 0xFFFF0000

	)

309 
	#DC_ASTAT_DISABLE
 0x00000000

	)

310 
	#DC_ASTAT_TXDISABLE
 0x00001000

	)

311 
	#DC_ASTAT_ABDETECT
 0x00002000

	)

312 
	#DC_ASTAT_ACKDETECT
 0x00003000

	)

313 
	#DC_ASTAT_CMPACKDETECT
 0x00004000

	)

314 
	#DC_ASTAT_AUTONEGCMP
 0x00005000

	)

315 
	#DC_ASTAT_LINKCHECK
 0x00006000

	)

320 
	#DC_SIA_RESET
 0x00000001

	)

321 
	#DC_SIA_AUI
 0x00000008

	)

326 
	#DC_TCTL_ENCODER_ENB
 0x00000001

	)

327 
	#DC_TCTL_LOOPBACK
 0x00000002

	)

328 
	#DC_TCTL_DRIVER_ENB
 0x00000004

	)

329 
	#DC_TCTL_LNKPULSE_ENB
 0x00000008

	)

330 
	#DC_TCTL_HALFDUPLEX
 0x00000040

	)

331 
	#DC_TCTL_AUTONEGENBL
 0x00000080

	)

332 
	#DC_TCTL_RX_SQUELCH
 0x00000100

	)

333 
	#DC_TCTL_COLL_SQUELCH
 0x00000200

	)

334 
	#DC_TCTL_COLL_DETECT
 0x00000400

	)

335 
	#DC_TCTL_SQE_ENB
 0x00000800

	)

336 
	#DC_TCTL_LINKTEST
 0x00001000

	)

337 
	#DC_TCTL_AUTOPOLARITY
 0x00002000

	)

338 
	#DC_TCTL_SET_POL_PLUS
 0x00004000

	)

339 
	#DC_TCTL_AUTOSENSE
 0x00008000

	)

340 
	#DC_TCTL_100BTXHALF
 0x00010000

	)

341 
	#DC_TCTL_100BTXFULL
 0x00020000

	)

342 
	#DC_TCTL_100BT4
 0x00040000

	)

347 
	#DC_WDOG_JABBERDIS
 0x00000001

	)

348 
	#DC_WDOG_HOSTUNJAB
 0x00000002

	)

349 
	#DC_WDOG_JABBERCLK
 0x00000004

	)

350 
	#DC_WDOG_RXWDOGDIS
 0x00000010

	)

351 
	#DC_WDOG_RXWDOGCLK
 0x00000020

	)

352 
	#DC_WDOG_MUSTBEZERO
 0x00000100

	)

353 
	#DC_WDOG_AUIBNC
 0x00100000

	)

354 
	#DC_WDOG_ACTIVITY
 0x00200000

	)

355 
	#DC_WDOG_RX_MATCH
 0x00400000

	)

356 
	#DC_WDOG_LINK
 0x00800000

	)

357 
	#DC_WDOG_CTLWREN
 0x08000000

	)

362 
	#DC_SFRAME_LEN
 192

	)

368 
	sdc_desc
 {

369 
u_t32_t
 
	mdc_¡©us
;

370 
u_t32_t
 
	mdc_ùl
;

371 
u_t32_t
 
	mdc_±r1
;

372 
u_t32_t
 
	mdc_±r2
;

375 
	#dc_d©a
 
dc_±r1


	)

376 
	#dc_Ãxt
 
dc_±r2


	)

378 
	#DC_RXSTAT_FIFOOFLOW
 0x00000001

	)

379 
	#DC_RXSTAT_CRCERR
 0x00000002

	)

380 
	#DC_RXSTAT_DRIBBLE
 0x00000004

	)

381 
	#DC_RXSTAT_MIIERE
 0x00000008

	)

382 
	#DC_RXSTAT_WATCHDOG
 0x00000010

	)

383 
	#DC_RXSTAT_FRAMETYPE
 0x00000020

	)

384 
	#DC_RXSTAT_COLLSEEN
 0x00000040

	)

385 
	#DC_RXSTAT_GIANT
 0x00000080

	)

386 
	#DC_RXSTAT_LASTFRAG
 0x00000100

	)

387 
	#DC_RXSTAT_FIRSTFRAG
 0x00000200

	)

388 
	#DC_RXSTAT_MULTICAST
 0x00000400

	)

389 
	#DC_RXSTAT_RUNT
 0x00000800

	)

390 
	#DC_RXSTAT_RXTYPE
 0x00003000

	)

391 
	#DC_RXSTAT_DE
 0x00004000

	)

392 
	#DC_RXSTAT_RXERR
 0x00008000

	)

393 
	#DC_RXSTAT_RXLEN
 0x3FFF0000

	)

394 
	#DC_RXSTAT_OWN
 0x80000000

	)

396 
	#DC_RXBYTES
(
x
è((x & 
DC_RXSTAT_RXLEN
è>> 16)

	)

397 
	#DC_RXSTAT
 (
DC_RXSTAT_FIRSTFRAG
|
DC_RXSTAT_LASTFRAG
|
DC_RXSTAT_OWN
)

	)

399 
	#DC_RXCTL_BUFLEN1
 0x00000FFF

	)

400 
	#DC_RXCTL_BUFLEN2
 0x00FFF000

	)

401 
	#DC_RXCTL_RLINK
 0x01000000

	)

402 
	#DC_RXCTL_RLAST
 0x02000000

	)

404 
	#DC_TXSTAT_DEFER
 0x00000001

	)

405 
	#DC_TXSTAT_UNDERRUN
 0x00000002

	)

406 
	#DC_TXSTAT_LINKFAIL
 0x00000003

	)

407 
	#DC_TXSTAT_COLLCNT
 0x00000078

	)

408 
	#DC_TXSTAT_SQE
 0x00000080

	)

409 
	#DC_TXSTAT_EXCESSCOLL
 0x00000100

	)

410 
	#DC_TXSTAT_LATECOLL
 0x00000200

	)

411 
	#DC_TXSTAT_NOCARRIER
 0x00000400

	)

412 
	#DC_TXSTAT_CARRLOST
 0x00000800

	)

413 
	#DC_TXSTAT_JABTIMEO
 0x00004000

	)

414 
	#DC_TXSTAT_ERRSUM
 0x00008000

	)

415 
	#DC_TXSTAT_OWN
 0x80000000

	)

417 
	#DC_TXCTL_BUFLEN1
 0x000007FF

	)

418 
	#DC_TXCTL_BUFLEN2
 0x003FF800

	)

419 
	#DC_TXCTL_FILTTYPE0
 0x00400000

	)

420 
	#DC_TXCTL_PAD
 0x00800000

	)

421 
	#DC_TXCTL_TLINK
 0x01000000

	)

422 
	#DC_TXCTL_TLAST
 0x02000000

	)

423 
	#DC_TXCTL_NOCRC
 0x04000000

	)

424 
	#DC_TXCTL_SETUP
 0x08000000

	)

425 
	#DC_TXCTL_FILTTYPE1
 0x10000000

	)

426 
	#DC_TXCTL_FIRSTFRAG
 0x20000000

	)

427 
	#DC_TXCTL_LASTFRAG
 0x40000000

	)

428 
	#DC_TXCTL_FINT
 0x80000000

	)

430 
	#DC_FILTER_PERFECT
 0x00000000

	)

431 
	#DC_FILTER_HASHPERF
 0x00400000

	)

432 
	#DC_FILTER_INVERSE
 0x10000000

	)

433 
	#DC_FILTER_HASHONLY
 0x10400000

	)

435 
	#DC_MAXFRAGS
 16

	)

436 #ifdeà
DEVICE_POLLING


437 
	#DC_RX_LIST_CNT
 192

	)

439 
	#DC_RX_LIST_CNT
 64

	)

441 
	#DC_TX_LIST_CNT
 256

	)

442 
	#DC_MIN_FRAMELEN
 60

	)

443 
	#DC_RXLEN
 1536

	)

445 
	#DC_INC
(
x
, 
y
è(xèð(x + 1è% 
	)
y

447 
	sdc_li¡_d©a
 {

448 
dc_desc
 
	mdc_rx_li¡
[
DC_RX_LIST_CNT
];

449 
dc_desc
 
	mdc_tx_li¡
[
DC_TX_LIST_CNT
];

452 
	sdc_cha_d©a
 {

453 
mbuf
 *
	mdc_rx_cha
[
DC_RX_LIST_CNT
];

454 
mbuf
 *
	mdc_tx_cha
[
DC_TX_LIST_CNT
];

455 
u_t32_t
 
	mdc_sbuf
[
DC_SFRAME_LEN
/(u_int32_t)];

456 
u_t8_t
 
	mdc_·d
[
DC_MIN_FRAMELEN
];

457 
	mdc_tx_´od
;

458 
	mdc_tx_cÚs
;

459 
	mdc_tx_út
;

460 
	mdc_rx_´od
;

463 
	sdc_medfo
 {

464 
	mdc_med
;

465 
u_t8_t
 *
	mdc_gp_±r
;

466 
u_t8_t
 
	mdc_gp_Ën
;

467 
u_t8_t
 *
	mdc_»£t_±r
;

468 
u_t8_t
 
	mdc_»£t_Ën
;

469 
dc_medfo
 *
	mdc_Ãxt
;

473 
	sdc_ty³
 {

474 
u_t16_t
 
	mdc_vid
;

475 
u_t16_t
 
	mdc_did
;

476 *
	mdc_Çme
;

477 
	mdc_devsig
;

478 
	mdc_bus
;

479 
	mdc_dev
;

480 
	mdc_fun
;

483 
	sdc_mii_äame
 {

484 
u_t8_t
 
	mmii_¡dim
;

485 
u_t8_t
 
	mmii_Ýcode
;

486 
u_t8_t
 
	mmii_phyaddr
;

487 
u_t8_t
 
	mmii_»gaddr
;

488 
u_t8_t
 
	mmii_tuº¬ound
;

489 
u_t16_t
 
	mmii_d©a
;

495 
	#DC_MII_STARTDELIM
 0x01

	)

496 
	#DC_MII_READOP
 0x02

	)

497 
	#DC_MII_WRITEOP
 0x01

	)

498 
	#DC_MII_TURNAROUND
 0x02

	)

511 
	#DC_AL_CR
 0x88

	)

512 
	#DC_AL_PAR0
 0xA4

	)

513 
	#DC_AL_PAR1
 0xA8

	)

514 
	#DC_AL_MAR0
 0xAC

	)

515 
	#DC_AL_MAR1
 0xB0

	)

516 
	#DC_AL_BMCR
 0xB4

	)

517 
	#DC_AL_BMSR
 0xB8

	)

518 
	#DC_AL_VENID
 0xBC

	)

519 
	#DC_AL_DEVID
 0xC0

	)

520 
	#DC_AL_ANAR
 0xC4

	)

521 
	#DC_AL_LPAR
 0xC8

	)

522 
	#DC_AL_ANER
 0xCC

	)

524 
	#DC_AL_CR_ATUR
 0x00000001

	)

525 
	#DC_ADMTEK_PHYADDR
 0x1

	)

526 
	#DC_AL_EE_NODEADDR
 4

	)

532 
	#DC_AX_FILTIDX
 0x68

	)

533 
	#DC_AX_FILTDATA
 0x70

	)

538 
	#DC_AX_NETCFG_RX_BROAD
 0x00000100

	)

543 
	#DC_AX_FILTIDX_PAR0
 0x00000000

	)

544 
	#DC_AX_FILTIDX_PAR1
 0x00000001

	)

545 
	#DC_AX_FILTIDX_MAR0
 0x00000002

	)

546 
	#DC_AX_FILTIDX_MAR1
 0x00000003

	)

555 
	#DC_MX_MAGICPACKET
 0x80

	)

556 
	#DC_MX_NWAYSTAT
 0xA0

	)

561 
	#DC_MX_MPACK_DISABLE
 0x00400000

	)

566 
	#DC_MX_NWAY_10BTHALF
 0x08000000

	)

567 
	#DC_MX_NWAY_10BTFULL
 0x10000000

	)

568 
	#DC_MX_NWAY_100BTHALF
 0x20000000

	)

569 
	#DC_MX_NWAY_100BTFULL
 0x40000000

	)

570 
	#DC_MX_NWAY_100BT4
 0x80000000

	)

578 
	#DC_MX_MAGIC_98713
 0x0F370000

	)

579 
	#DC_MX_MAGIC_98713A
 0x0B3C0000

	)

580 
	#DC_MX_MAGIC_98715
 0x0B3C0000

	)

581 
	#DC_MX_MAGIC_98725
 0x0B3C0000

	)

589 
	#DC_PN_GPIO
 0x60

	)

590 
	#DC_PN_PWRUP_CFG
 0x90

	)

591 
	#DC_PN_SIOCTL
 0x98

	)

592 
	#DC_PN_MII
 0xA0

	)

593 
	#DC_PN_NWAY
 0xB8

	)

596 
	#DC_PN_SIOCTL_DATA
 0x0000003F

	)

597 
	#DC_PN_SIOCTL_OPCODE
 0x00000300

	)

598 
	#DC_PN_SIOCTL_BUSY
 0x80000000

	)

600 
	#DC_PN_EEOPCODE_ERASE
 0x00000300

	)

601 
	#DC_PN_EEOPCODE_READ
 0x00000600

	)

602 
	#DC_PN_EEOPCODE_WRITE
 0x00000100

	)

611 
	#DC_PN_GPIO_DATA0
 0x000000001

	)

612 
	#DC_PN_GPIO_DATA1
 0x000000002

	)

613 
	#DC_PN_GPIO_DATA2
 0x000000004

	)

614 
	#DC_PN_GPIO_DATA3
 0x000000008

	)

615 
	#DC_PN_GPIO_CTL0
 0x000000010

	)

616 
	#DC_PN_GPIO_CTL1
 0x000000020

	)

617 
	#DC_PN_GPIO_CTL2
 0x000000040

	)

618 
	#DC_PN_GPIO_CTL3
 0x000000080

	)

619 
	#DC_PN_GPIO_SPEEDSEL
 
DC_PN_GPIO_DATA0


	)

620 
	#DC_PN_GPIO_100TX_LOOP
 
DC_PN_GPIO_DATA1


	)

621 
	#DC_PN_GPIO_BNC_ENB
 
DC_PN_GPIO_DATA2


	)

622 
	#DC_PN_GPIO_100TX_LNK
 
DC_PN_GPIO_DATA3


	)

623 
	#DC_PN_GPIO_SETBIT
(
sc
, 
r
) \

624 
	`DC_SETBIT
(
sc
, 
DC_PN_GPIO
, ((
r
è| (¸<< 4)))

	)

625 
	#DC_PN_GPIO_CLRBIT
(
sc
, 
r
) \

627 
	`DC_SETBIT
(
sc
, 
DC_PN_GPIO
, ((
r
) << 4)); \

628 
	`DC_CLRBIT
(
sc
, 
DC_PN_GPIO
, (
r
)); \

629 }

	)

632 
	#DC_PN_MII_DATA
 0x0000FFFF

	)

633 
	#DC_PN_MII_RESERVER
 0x00020000

	)

634 
	#DC_PN_MII_REGADDR
 0x007C0000

	)

635 
	#DC_PN_MII_PHYADDR
 0x0F800000

	)

636 
	#DC_PN_MII_OPCODE
 0x30000000

	)

637 
	#DC_PN_MII_BUSY
 0x80000000

	)

639 
	#DC_PN_MIIOPCODE_READ
 0x60020000

	)

640 
	#DC_PN_MIIOPCODE_WRITE
 0x50020000

	)

643 
	#DC_PN_NWAY_RESET
 0x00000001

	)

644 
	#DC_PN_NWAY_PDOWN
 0x00000002

	)

645 
	#DC_PN_NWAY_BYPASS
 0x00000004

	)

646 
	#DC_PN_NWAY_AUILOWCUR
 0x00000008

	)

647 
	#DC_PN_NWAY_TPEXTEND
 0x00000010

	)

648 
	#DC_PN_NWAY_POLARITY
 0x00000020

	)

649 
	#DC_PN_NWAY_TP
 0x00000040

	)

650 
	#DC_PN_NWAY_AUIVOLT
 0x00000080

	)

651 
	#DC_PN_NWAY_DUPLEX
 0x00000100

	)

652 
	#DC_PN_NWAY_LINKTEST
 0x00000200

	)

653 
	#DC_PN_NWAY_AUTODETECT
 0x00000400

	)

654 
	#DC_PN_NWAY_SPEEDSEL
 0x00000800

	)

655 
	#DC_PN_NWAY_NWAY_ENB
 0x00001000

	)

656 
	#DC_PN_NWAY_CAP10HDX
 0x00002000

	)

657 
	#DC_PN_NWAY_CAP10FDX
 0x00004000

	)

658 
	#DC_PN_NWAY_CAP100FDX
 0x00008000

	)

659 
	#DC_PN_NWAY_CAP100HDX
 0x00010000

	)

660 
	#DC_PN_NWAY_CAP100T4
 0x00020000

	)

661 
	#DC_PN_NWAY_ANEGRESTART
 0x02000000

	)

662 
	#DC_PN_NWAY_REMFAULT
 0x04000000

	)

663 
	#DC_PN_NWAY_LPAR10HDX
 0x08000000

	)

664 
	#DC_PN_NWAY_LPAR10FDX
 0x10000000

	)

665 
	#DC_PN_NWAY_LPAR100FDX
 0x20000000

	)

666 
	#DC_PN_NWAY_LPAR100HDX
 0x40000000

	)

667 
	#DC_PN_NWAY_LPAR100T4
 0x80000000

	)

675 
	#DC_CONEXANT_PHYADDR
 0x1

	)

676 
	#DC_CONEXANT_EE_NODEADDR
 0x19A

	)

681 
	sdc_soác
 {

682 
¬pcom
 
	m¬pcom
;

683 
¹ems_q_cÚÃù_d©a
 
	mqInfo
;

684 vÞ©
u_t32_t
 
	mmemba£
;

685 
¹ems_id
 
	md«mÚtid
;

687 
bus_¥aû_hªdË_t
 
	mdc_bhªdË
;

688 
bus_¥aû_g_t
 
	mdc_bg
;

689 *
	mdc_hªd
;

690 
»sourû
 *
	mdc_q
;

691 
»sourû
 *
	mdc_»s
;

693 
dc_ty³
 *
	mdc_fo
;

695 
u_t8_t
 
	mdc_un
;

696 *
	mdc_Çme
;

697 
u_t8_t
 
	mdc_ty³
;

698 
u_t8_t
 
	mdc_pmode
;

699 
u_t8_t
 
	mdc_lk
;

700 
u_t8_t
 
	mdc_ÿchesize
;

701 
	mdc_romwidth
;

702 
	mdc_²ic_rx_bug_§ve
;

703 *
	mdc_²ic_rx_buf
;

704 
	mdc_if_æags
;

705 
	mdc_if_med
;

706 
u_t32_t
 
	mdc_æags
;

707 
u_t32_t
 
	mdc_txth»sh
;

708 
u_t8_t
 *
	mdc_¤om
;

709 
dc_medfo
 *
	mdc_mi
;

713 
dc_li¡_d©a
 *
	mdc_ld©a
;

714 
dc_cha_d©a
 
	mdc_cd©a
;

715 #ifdeà
__®pha__


716 
	mdc_¤m_med
;

718 #ifdef 
DEVICE_POLLING


719 
	mrxcyþes
;

721 
	msu¥ded
;

723 
u_t32_t
 
	m§ved_m­s
[5];

724 
u_t32_t
 
	m§ved_bio§ddr
;

725 
u_t8_t
 
	m§ved_e
;

726 
u_t8_t
 
	m§ved_ÿchnsz
;

727 
u_t8_t
 
	m§ved_Ïim
;

730 
	#DC_TX_POLL
 0x00000001

	)

731 
	#DC_TX_COALESCE
 0x00000002

	)

732 
	#DC_TX_ADMTEK_WAR
 0x00000004

	)

733 
	#DC_TX_USE_TX_INTR
 0x00000008

	)

734 
	#DC_RX_FILTER_TULIP
 0x00000010

	)

735 
	#DC_TX_INTR_FIRSTFRAG
 0x00000020

	)

736 
	#DC_PNIC_RX_BUG_WAR
 0x00000040

	)

737 
	#DC_TX_FIXED_RING
 0x00000080

	)

738 
	#DC_TX_STORENFWD
 0x00000100

	)

739 
	#DC_REDUCED_MII_POLL
 0x00000200

	)

740 
	#DC_TX_INTR_ALWAYS
 0x00000400

	)

741 
	#DC_21143_NWAY
 0x00000800

	)

742 
	#DC_128BIT_HASH
 0x00001000

	)

743 
	#DC_64BIT_HASH
 0x00002000

	)

744 
	#DC_TULIP_LEDS
 0x00004000

	)

745 
	#DC_TX_ONE
 0x00008000

	)

750 
	#_»adl_
(
addr
è(*(vÞ©*)((*)×ddr)))

	)

751 
	#_wr_
(
b
, 
addr
è(*(vÞ©*)((*)×ddr)èð(b))

	)

753 
	#CSR_READ_4
(
sc
, 
»g
è
	`_»adl_
(((sc->
memba£
)+Ôeg)))

	)

754 
	#CSR_WRITE_4
(
sc
, 
»g
, 
v®
è
	`_wr_
(v®, ((sc->
memba£
)+Ôeg)))

	)

761 
	#DC_TIMEOUT
 1000

	)

762 
	#ETHER_ALIGN
 2

	)

771 
	#DC_VENDORID_DEC
 0x1011

	)

776 
	#DC_DEVICEID_21143
 0x0019

	)

781 
	#DC_VENDORID_MX
 0x10D9

	)

786 
	#DC_DEVICEID_98713
 0x0512

	)

787 
	#DC_DEVICEID_987x5
 0x0531

	)

788 
	#DC_DEVICEID_98727
 0x0532

	)

789 
	#DC_DEVICEID_98732
 0x0532

	)

792 
	#DC_REVISION_98713
 0x00

	)

793 
	#DC_REVISION_98713A
 0x10

	)

794 
	#DC_REVISION_98715
 0x20

	)

795 
	#DC_REVISION_98715AEC_C
 0x25

	)

796 
	#DC_REVISION_98725
 0x30

	)

801 
	#DC_VENDORID_CP
 0x11F6

	)

806 
	#DC_DEVICEID_98713_CP
 0x9881

	)

811 
	#DC_VENDORID_LO
 0x11AD

	)

818 
	#DC_DEVICEID_82C168
 0x0002

	)

820 
	#DC_REVISION_82C168
 0x10

	)

821 
	#DC_REVISION_82C169
 0x20

	)

827 
	#DC_DEVICEID_82C115
 0xc115

	)

832 
	#DC_VENDORID_DAVICOM
 0x1282

	)

837 
	#DC_DEVICEID_DM9009
 0x9009

	)

838 
	#DC_DEVICEID_DM9100
 0x9100

	)

839 
	#DC_DEVICEID_DM9102
 0x9102

	)

845 
	#DC_REVISION_DM9102
 0x10

	)

846 
	#DC_REVISION_DM9102A
 0x30

	)

851 
	#DC_VENDORID_ADMTEK
 0x1317

	)

856 
	#DC_DEVICEID_AL981
 0x0981

	)

857 
	#DC_DEVICEID_AN985
 0x0985

	)

862 
	#DC_VENDORID_ASIX
 0x125B

	)

867 
	#DC_DEVICEID_AX88140A
 0x1400

	)

873 
	#DC_REVISION_88140
 0x00

	)

874 
	#DC_REVISION_88141
 0x10

	)

879 
	#DC_VENDORID_ACCTON
 0x1113

	)

884 
	#DC_DEVICEID_EN1217
 0x1217

	)

885 
	#DC_DEVICEID_EN2242
 0x1216

	)

890 
	#DC_VENDORID_CONEXANT
 0x14f1

	)

895 
	#DC_DEVICEID_RS7112
 0x1803

	)

902 
	#DC_PCI_CFID
 0x00

	)

903 
	#DC_PCI_CFCS
 0x04

	)

904 
	#DC_PCI_CFRV
 0x08

	)

905 
	#DC_PCI_CFLT
 0x0C

	)

906 
	#DC_PCI_CFBIO
 0x10

	)

907 
	#DC_PCI_CFBMA
 0x14

	)

908 
	#DC_PCI_CCIS
 0x28

	)

909 
	#DC_PCI_CSID
 0x2C

	)

910 
	#DC_PCI_CBER
 0x30

	)

911 
	#DC_PCI_CCAP
 0x34

	)

912 
	#DC_PCI_CFIT
 0x3C

	)

913 
	#DC_PCI_CFDD
 0x40

	)

914 
	#DC_PCI_CWUA0
 0x44

	)

915 
	#DC_PCI_CWUA1
 0x48

	)

916 
	#DC_PCI_SOP0
 0x4C

	)

917 
	#DC_PCI_SOP1
 0x50

	)

918 
	#DC_PCI_CWUC
 0x54

	)

919 
	#DC_PCI_CCID
 0xDC

	)

920 
	#DC_PCI_CPMC
 0xE0

	)

923 
	#DC_CFID_VENDOR
 0x0000FFFF

	)

924 
	#DC_CFID_DEVICE
 0xFFFF0000

	)

927 
	#DC_CFCS_IOSPACE
 0x00000001

	)

928 
	#DC_CFCS_MEMSPACE
 0x00000002

	)

929 
	#DC_CFCS_BUSMASTER
 0x00000004

	)

930 
	#DC_CFCS_MWI_ENB
 0x00000010

	)

931 
	#DC_CFCS_PARITYERR_ENB
 0x00000040

	)

932 
	#DC_CFCS_SYSERR_ENB
 0x00000100

	)

933 
	#DC_CFCS_NEWCAPS
 0x00100000

	)

934 
	#DC_CFCS_FAST_B2B
 0x00800000

	)

935 
	#DC_CFCS_DATAPARITY
 0x01000000

	)

936 
	#DC_CFCS_DEVSELTIM
 0x06000000

	)

937 
	#DC_CFCS_TGTABRT
 0x10000000

	)

938 
	#DC_CFCS_MASTERABRT
 0x20000000

	)

939 
	#DC_CFCS_SYSERR
 0x40000000

	)

940 
	#DC_CFCS_PARITYERR
 0x80000000

	)

943 
	#DC_CFRV_STEPPING
 0x0000000F

	)

944 
	#DC_CFRV_REVISION
 0x000000F0

	)

945 
	#DC_CFRV_SUBCLASS
 0x00FF0000

	)

946 
	#DC_CFRV_BASECLASS
 0xFF000000

	)

948 
	#DC_21143_PB_REV
 0x00000030

	)

949 
	#DC_21143_TB_REV
 0x00000030

	)

950 
	#DC_21143_PC_REV
 0x00000030

	)

951 
	#DC_21143_TC_REV
 0x00000030

	)

952 
	#DC_21143_PD_REV
 0x00000041

	)

953 
	#DC_21143_TD_REV
 0x00000041

	)

956 
	#DC_CFLT_CACHELINESIZE
 0x000000FF

	)

957 
	#DC_CFLT_LATENCYTIMER
 0x0000FF00

	)

960 
	#DC_CSID_VENDOR
 0x0000FFFF

	)

961 
	#DC_CSID_DEVICE
 0xFFFF0000

	)

964 
	#DC_CCAP_OFFSET
 0x000000FF

	)

967 
	#DC_CFIT_INTLINE
 0x000000FF

	)

968 
	#DC_CFIT_INTPIN
 0x0000FF00

	)

969 
	#DC_CFIT_MIN_GNT
 0x00FF0000

	)

970 
	#DC_CFIT_MAX_LAT
 0xFF000000

	)

973 
	#DC_CCID_CAPID
 0x000000FF

	)

974 
	#DC_CCID_NEXTPTR
 0x0000FF00

	)

975 
	#DC_CCID_PM_VERS
 0x00070000

	)

976 
	#DC_CCID_PME_CLK
 0x00080000

	)

977 
	#DC_CCID_DVSPEC_INT
 0x00200000

	)

978 
	#DC_CCID_STATE_D1
 0x02000000

	)

979 
	#DC_CCID_STATE_D2
 0x04000000

	)

980 
	#DC_CCID_PME_D0
 0x08000000

	)

981 
	#DC_CCID_PME_D1
 0x10000000

	)

982 
	#DC_CCID_PME_D2
 0x20000000

	)

983 
	#DC_CCID_PME_D3HOT
 0x40000000

	)

984 
	#DC_CCID_PME_D3COLD
 0x80000000

	)

987 
	#DC_CPMC_STATE
 0x00000003

	)

988 
	#DC_CPMC_PME_ENB
 0x00000100

	)

989 
	#DC_CPMC_PME_STS
 0x00008000

	)

991 
	#DC_PSTATE_D0
 0x0

	)

992 
	#DC_PSTATE_D1
 0x1

	)

993 
	#DC_PSTATE_D2
 0x2

	)

994 
	#DC_PSTATE_D3
 0x3

	)

998 
	#DC_CFDD_DRVUSE
 0x0000FFFF

	)

999 
	#DC_CFDD_SNOOZE_MODE
 0x40000000

	)

1000 
	#DC_CFDD_SLEEP_MODE
 0x80000000

	)

1003 
	#DC_CWUC_MUST_BE_ZERO
 0x00000001

	)

1004 
	#DC_CWUC_SECUREON_ENB
 0x00000002

	)

1005 
	#DC_CWUC_FORCE_WUL
 0x00000004

	)

1006 
	#DC_CWUC_BNC_ABILITY
 0x00000008

	)

1007 
	#DC_CWUC_AUI_ABILITY
 0x00000010

	)

1008 
	#DC_CWUC_TP10_ABILITY
 0x00000020

	)

1009 
	#DC_CWUC_MII_ABILITY
 0x00000040

	)

1010 
	#DC_CWUC_SYM_ABILITY
 0x00000080

	)

1011 
	#DC_CWUC_LOCK
 0x00000100

	)

1017 
	#DC_IB_CTLRCNT
 0x13

	)

1018 
	#DC_IB_LEAF0_CNUM
 0x1A

	)

1019 
	#DC_IB_LEAF0_OFFSET
 0x1B

	)

1021 
	sdc_fo_Ëaf
 {

1022 
u_t16_t
 
	mdc_cÚÁy³
;

1023 
u_t8_t
 
	mdc_blkút
;

1024 
u_t8_t
 
	mdc_rsvd
;

1025 
u_t16_t
 
	mdc_foblk
;

1028 
	#DC_CTYPE_10BT
 0x0000

	)

1029 
	#DC_CTYPE_10BT_NWAY
 0x0100

	)

1030 
	#DC_CTYPE_10BT_FDX
 0x0204

	)

1031 
	#DC_CTYPE_10B2
 0x0001

	)

1032 
	#DC_CTYPE_10B5
 0x0002

	)

1033 
	#DC_CTYPE_100BT
 0x0003

	)

1034 
	#DC_CTYPE_100BT_FDX
 0x0205

	)

1035 
	#DC_CTYPE_100T4
 0x0006

	)

1036 
	#DC_CTYPE_100FX
 0x0007

	)

1037 
	#DC_CTYPE_100FX_FDX
 0x0208

	)

1038 
	#DC_CTYPE_MII_10BT
 0x0009

	)

1039 
	#DC_CTYPE_MII_10BT_FDX
 0x020A

	)

1040 
	#DC_CTYPE_MII_100BT
 0x000D

	)

1041 
	#DC_CTYPE_MII_100BT_FDX
 0x020E

	)

1042 
	#DC_CTYPE_MII_100T4
 0x000F

	)

1043 
	#DC_CTYPE_MII_100FX
 0x0010

	)

1044 
	#DC_CTYPE_MII_100FX_FDX
 0x0211

	)

1045 
	#DC_CTYPE_DYN_PUP_AUTOSENSE
 0x0800

	)

1046 
	#DC_CTYPE_PUP_AUTOSENSE
 0x8800

	)

1047 
	#DC_CTYPE_NOMEDIA
 0xFFFF

	)

1049 
	#DC_EBLOCK_SIA
 0x0002

	)

1050 
	#DC_EBLOCK_MII
 0x0003

	)

1051 
	#DC_EBLOCK_SYM
 0x0004

	)

1052 
	#DC_EBLOCK_RESET
 0x0005

	)

1053 
	#DC_EBLOCK_PHY_SHUTDOWN
 0x0006

	)

1055 
	sdc_Ëaf_hdr
 {

1056 
u_t16_t
 
	mdc_mty³
;

1057 
u_t8_t
 
	mdc_mút
;

1058 
u_t8_t
 
	mdc_rsvd
;

1061 
	sdc_eblock_hdr
 {

1062 
u_t8_t
 
	mdc_Ën
;

1063 
u_t8_t
 
	mdc_ty³
;

1066 
	sdc_eblock_s
 {

1067 
dc_eblock_hdr
 
	mdc_s_hdr
;

1068 
u_t8_t
 
	mdc_s_code
;

1069 
u_t8_t
 
	mdc_s_med¥ec
[6];

1070 
u_t8_t
 
	mdc_s_gpio_ùl
[2];

1071 
u_t8_t
 
	mdc_s_gpio_d©
[2];

1074 
	#DC_SIA_CODE_10BT
 0x00

	)

1075 
	#DC_SIA_CODE_10B2
 0x01

	)

1076 
	#DC_SIA_CODE_10B5
 0x02

	)

1077 
	#DC_SIA_CODE_10BT_FDX
 0x04

	)

1078 
	#DC_SIA_CODE_EXT
 0x40

	)

1084 
	sdc_eblock_mii
 {

1085 
dc_eblock_hdr
 
	mdc_mii_hdr
;

1086 
u_t8_t
 
	mdc_mii_phynum
;

1087 
u_t8_t
 
	mdc_g´_Ën
;

1097 
	sdc_eblock_sym
 {

1098 
dc_eblock_hdr
 
	mdc_sym_hdr
;

1099 
u_t8_t
 
	mdc_sym_code
;

1100 
u_t8_t
 
	mdc_sym_gpio_ùl
[2];

1101 
u_t8_t
 
	mdc_sym_gpio_d©
[2];

1102 
u_t8_t
 
	mdc_sym_cmd
[2];

1105 
	#DC_SYM_CODE_100BT
 0x03

	)

1106 
	#DC_SYM_CODE_100BT_FDX
 0x05

	)

1107 
	#DC_SYM_CODE_100T4
 0x06

	)

1108 
	#DC_SYM_CODE_100FX
 0x07

	)

1109 
	#DC_SYM_CODE_100FX_FDX
 0x08

	)

1111 
	sdc_eblock_»£t
 {

1112 
dc_eblock_hdr
 
	mdc_»£t_hdr
;

1113 
u_t8_t
 
	mdc_»£t_Ën
;

1117 #ifdeà
__®pha__


1118 #undeà
vtÝhys


1119 
	#vtÝhys
(
va
è
	`®pha_XXX_dmam­
((
vm_off£t_t
)va)

	)

	@src/libchip/network/if_fxp.c

58 #ià
defed
(
__i386__
)

62 
	~<¹ems.h
>

63 
	~<¹ems/rÜ.h
>

64 
	~<¹ems/¹ems_bsdÃt.h
>

65 
	~<b¥.h
>

67 
	~<ºo.h
>

68 
	~<sys/·¿m.h
>

69 
	~<sys/mbuf.h
>

70 
	~<sys/sock.h
>

71 
	~<sys/sockio.h
>

72 
	~<Ãt/if.h
>

73 
	~<Ãt/.h
>

74 
	~<Ãt/if_h.h
>

75 
	~<sys/m®loc.h
>

76 
	~<sys/sy¡m.h
>

77 
	~<b¥.h
>

78 
	~<pcibios.h
>

79 
	~<b¥/q.h
>

80 
	~<¹ems/pci.h
>

82 #ifdeà
NS


83 
	~<Ãs/ns.h
>

84 
	~<Ãs/ns_if.h
>

87 
	~<Ãt/bpf.h
>

89 
	~<vm/vm.h
>

91 
	~<Ãt/if_ty³s.h
>

93 
	~"if_fx´eg.h
"

94 
	~"if_fxpv¬.h
"

99 
¹ems_rv®
 
	gfxp_ticksPSecÚd
;

100 
	#deviû_´tf
(
deviû
,
fÜm©
,
¬gs
...è
	`´tk
(fÜm©,##rgs)

	)

101 
	#DELAY
(
n
è
	`¹ems_sk_wake_aá
((Ò)*
fxp_ticksPSecÚd
/1000000)+1)

	)

102 #ifdeà
DEBUG_OUT


103 
	#DBGLVL_PRINTK
(
LVL
,
fÜm©
, 
¬gs
...) \

104 ià(
DEBUG_OUT
 >ð(
LVL
)) { \

105 
	`´tk
(
fÜm©
, ## 
¬gs
); \

106 }

	)

108 
	#DBGLVL_PRINTK
(
LVL
,
fÜm©
, 
¬gs
...)

	)

115 
	#INTERRUPT_EVENT
 
RTEMS_EVENT_1


	)

120 #ià
defed
(
__i386
)

121 
	#vtÝhys
(
p
è(
u_t32_t
)Õ)

	)

123 
	#vtÝhys
(
p
è
	`vtÝhys
Õ)

	)

126 
	#NFXPDRIVER
 1

	)

127 
fxp_soác
 
	gfxp_soác
[
NFXPDRIVER
];

128 
boÞ
 
	gfxp_is_vbo£
 = 
ue
;

138 
	#RFA_ALIGNMENT_FUDGE
 2

	)

145 
	gtx_th»shÞd
 = 64;

155 
u_ch¬
 
	gfxp_cb_cÚfig_m¶©e
[] = {

183 
	sfxp_idt
 {

184 
u_t16_t
 
	mdevid
;

185 *
	mÇme
;

186 
	mw¬n
;

189 
	#UNTESTED
 1

	)

197 
fxp_idt
 
	gfxp_idt_bË
[] = {

199 { 0x2449, "IÁ Pro/100 EthÃt", 
UNTESTED
 },

201 { 0x1029, "IÁ Pro/100 EthÃt", 
UNTESTED
 },

203 { 0x1031, "IÁ Pro/100 EthÃt", 
UNTESTED
 },

204 { 0x1032, "IÁ Pro/100 EthÃt", 
UNTESTED
 },

205 { 0x1033, "IÁ Pro/100 EthÃt", 
UNTESTED
 },

206 { 0x1034, "IÁ Pro/100 EthÃt", 
UNTESTED
 },

207 { 0x1035, "IÁ Pro/100 EthÃt", 
UNTESTED
 },

208 { 0x1036, "IÁ Pro/100 EthÃt", 
UNTESTED
 },

209 { 0x1037, "IÁ Pro/100 EthÃt", 
UNTESTED
 },

210 { 0x1038, "IÁ Pro/100 EthÃt", 
UNTESTED
 },

212 { 0, 
NULL
, 0 }

216 
fxp_´obe
(
deviû_t
 
dev
);

217 
fxp_©ch
(
deviû_t
 
dev
);

218 
fxp_dach
(
deviû_t
 
dev
);

219 
fxp_shutdown
(
deviû_t
 
dev
);

221 
fxp_ouut
 (
iâ
 *,

222 
mbuf
 *, 
sockaddr
 *, 
¹y
 *);

225 
¹ems_i¤
 
fxp_
(
¹ems_veùÜ_numb
 
v
);

226 
fxp_
(*
xsc
);

227 
fxp_tick
(*
xsc
);

228 
fxp_¡¬t
(
iâ
 *
iå
);

229 
fxp_¡Ý
(
fxp_soác
 *
sc
);

230 
fxp_»Ëa£
(
fxp_soác
 *
sc
);

231 
fxp_ioùl
(
iâ
 *
iå
, 
ioùl_commªd_t
 
commªd
,

232 
ÿddr_t
 
d©a
);

233 
fxp_w©chdog
(
iâ
 *
iå
);

234 
fxp_add_rçbuf
(
fxp_soác
 *
sc
, 
mbuf
 *
Þdm
);

235 
fxp_mc_£tup
(
fxp_soác
 *
sc
);

236 
u_t16_t
 
fxp_´om_gwÜd
(
fxp_soác
 *
sc
, 
off£t
,

237 
autosize
);

238 
fxp_´om_putwÜd
(
fxp_soác
 *
sc
, 
off£t
,

239 
u_t16_t
 
d©a
);

240 
fxp_autosize_´om
(
fxp_soác
 *
sc
);

241 
fxp_»ad_´om
(
fxp_soác
 *
sc
, 
u_shÜt
 *
d©a
,

242 
off£t
, 
wÜds
);

243 
fxp_wre_´om
(
fxp_soác
 *
sc
, 
u_shÜt
 *
d©a
,

244 
off£t
, 
wÜds
);

245 #ifdeà
NOTUSED


246 
fxp_ifmed_upd
(
iâ
 *
iå
);

247 
fxp_ifmed_¡s
(
iâ
 *
iå
,

248 
ifmed»q
 *
ifmr
);

249 
fxp_£rl_ifmed_upd
(
iâ
 *
iå
);

250 
fxp_£rl_ifmed_¡s
(
iâ
 *
iå
,

251 
ifmed»q
 *
ifmr
);

252 vÞ©
fxp_miibus_»ad»g
(
deviû_t
 
dev
, 
phy
, 
»g
);

253 
fxp_miibus_wreg
(
deviû_t
 
dev
, 
phy
, 
»g
,

254 
v®ue
);

256 
__le
 
fxp_lwcÝy
(vÞ©
u_t32_t
 *
¤c
,

257 vÞ©
u_t32_t
 *
d¡
);

258 
__le
 
fxp_scb_wa
(
fxp_soác
 *
sc
);

259 
__le
 
fxp_scb_cmd
(
fxp_soác
 *
sc
, 
cmd
);

260 
__le
 
fxp_dma_wa
(vÞ©
u_t16_t
 *
¡©us
,

261 
fxp_soác
 *
sc
);

266 
__le
 

267 
	$fxp_lwcÝy
(vÞ©
u_t32_t
 *
¤c
, vÞ©u_t32_*
d¡
)

269 #ifdeà
__i386__


270 *
d¡
 = *
¤c
;

272 vÞ©
u_t16_t
 *
a
 = (vÞ©u_t16_t*)
¤c
;

273 vÞ©
u_t16_t
 *
b
 = (vÞ©u_t16_t*)
d¡
;

275 
b
[0] = 
a
[0];

276 
b
[1] = 
a
[1];

278 
	}
}

283 
__le
 
u_t8_t
 
	$fxp_c¤_»ad_1
(
fxp_soác
 *
sc
,
»g
) {

284 
u_t8_t
 
v®
;

285 ià(
sc
->
pci_»gs_¬e_io
) {

286 
	`pÜt_by
(
sc
->
pci_»gs_ba£
 + 
»g
,
v®
);

289 
v®
 = *(
u_t8_t
*)(
sc
->
pci_»gs_ba£
+
»g
);

291  
v®
;

292 
	}
}

293 
__le
 
u_t32_t
 
	$fxp_c¤_»ad_2
(
fxp_soác
 *
sc
,
»g
) {

294 
u_t16_t
 
v®
;

295 ià(
sc
->
pci_»gs_¬e_io
) {

296 
	`pÜt_wÜd
(
sc
->
pci_»gs_ba£
 + 
»g
,
v®
);

299 
v®
 = *(
u_t16_t
*)(
sc
->
pci_»gs_ba£
+
»g
);

301  
v®
;

302 
	}
}

303 
__le
 
u_t32_t
 
	$fxp_c¤_»ad_4
(
fxp_soác
 *
sc
,
»g
) {

304 
u_t32_t
 
v®
;

305 ià(
sc
->
pci_»gs_¬e_io
) {

306 
	`pÜt_lÚg
(
sc
->
pci_»gs_ba£
 + 
»g
,
v®
);

309 
v®
 = *(
u_t32_t
*)(
sc
->
pci_»gs_ba£
+
»g
);

311  
v®
;

312 
	}
}

318 
__le
 

319 
	$fxp_scb_wa
(
fxp_soác
 *
sc
)

321 
i
 = 10000;

323 
	`CSR_READ_1
(
sc
, 
FXP_CSR_SCB_COMMAND
è&& --
i
)

324 
	`DELAY
(2);

325 ià(
i
 == 0)

326 
	`deviû_´tf
(
sc
->
dev
, "SCBimeout: 0x%x 0x%x 0x%x 0x%x\n",

327 
	`CSR_READ_1
(
sc
, 
FXP_CSR_SCB_COMMAND
),

328 
	`CSR_READ_1
(
sc
, 
FXP_CSR_SCB_STATACK
),

329 
	`CSR_READ_1
(
sc
, 
FXP_CSR_SCB_RUSCUS
),

330 
	`CSR_READ_2
(
sc
, 
FXP_CSR_FLOWCONTROL
));

331 
	}
}

333 
__le
 

334 
	$fxp_scb_cmd
(
fxp_soác
 *
sc
, 
cmd
)

337 ià(
cmd
 =ð
FXP_SCB_COMMAND_CU_RESUME
 && 
sc
->
cu_»sume_bug
) {

338 
	`CSR_WRITE_1
(
sc
, 
FXP_CSR_SCB_COMMAND
, 
FXP_CB_COMMAND_NOP
);

339 
	`fxp_scb_wa
(
sc
);

341 
	`CSR_WRITE_1
(
sc
, 
FXP_CSR_SCB_COMMAND
, 
cmd
);

342 
	}
}

344 
__le
 

345 
	$fxp_dma_wa
(vÞ©
u_t16_t
 *
¡©us
, 
fxp_soác
 *
sc
)

347 
i
 = 10000;

349 !(*
¡©us
 & 
FXP_CB_STATUS_C
è&& --
i
)

350 
	`DELAY
(2);

351 ià(
i
 == 0)

352 
	`deviû_´tf
(
sc
->
dev
, "DMAimeout\n");

353 
	}
}

355 
__le
 
	$pci_g_vdÜ
(
fxp_soác
 *
sc
) {

356 
u_t16_t
 
vdÜ
;

357 
	`pcib_cÚf_»ad16
(
sc
->
pci_sigÇtu»
,0,&
vdÜ
);

358  
vdÜ
;

359 
	}
}

361 
__le
 
	$pci_g_deviû
(
fxp_soác
 *
sc
) {

362 
u_t16_t
 
deviû
;

363 
	`pcib_cÚf_»ad16
(
sc
->
pci_sigÇtu»
,2,&
deviû
);

364  
deviû
;

365 
	}
}

367 
__le
 
	$pci_g_subvdÜ
(
fxp_soác
 *
sc
) {

368 
u_t16_t
 
subvdÜ
;

369 
	`pcib_cÚf_»ad16
(
sc
->
pci_sigÇtu»
,0x2c,&
subvdÜ
);

370  
subvdÜ
;

371 
	}
}

373 
__le
 
	$pci_g_subdeviû
(
fxp_soác
 *
sc
) {

374 
u_t16_t
 
subdeviû
;

375 
	`pcib_cÚf_»ad16
(
sc
->
pci_sigÇtu»
,0x2e,&
subdeviû
);

376  
subdeviû
;

377 
	}
}

379 
__le
 
	$pci_g_»vid
(
fxp_soác
 *
sc
) {

380 
u_t8_t
 
»vid
;

381 
	`pcib_cÚf_»ad8
(
sc
->
pci_sigÇtu»
,0x08,&
»vid
);

382  
»vid
;

383 
	}
}

385 
	$nÝOn
(cÚ¡ 
¹ems_q_cÚÃù_d©a
* 
nÙU£d
)

391 
	}
}

393 
	$fxpIsOn
(cÚ¡ 
¹ems_q_cÚÃù_d©a
* 
q
)

395  
	`BSP_q_abËd_©_i8259s
 (
q
->
Çme
);

396 
	}
}

399 
	$¹ems_fxp_©ch
(
¹ems_bsdÃt_ifcÚfig
 *
cÚfig
, 
©chg
)

401 
rÜ
 = 0;

402 
fxp_soác
 *
sc
;

403 
iâ
 *
iå
;

404 
ut16_t
 
v®16
;

405 
ut32_t
 
v®32
;

406 
ut16_t
 
d©a
;

407 
i
;

408 
s
;

409 
unNumb
;

410 *
unName
;

411 
u_t16_t
 
dev_id
;

412 
u_t8_t
 
¼u±
;

413 
mtu
;

418 
fxp_ticksPSecÚd
 = 
	`¹ems_þock_g_ticks_³r_£cÚd
();

419 
	`DBGLVL_PRINTK
(1,"fxp_attach called\n");

424 ià((
unNumb
 = 
	`¹ems_bsdÃt_·r£_driv_Çme
 (
cÚfig
, &
unName
)) < 0)

430 ià((
unNumb
 <ð0è|| (unNumb > 
NFXPDRIVER
)) {

431 
	`deviû_´tf
(
dev
,"Bad FXP unitumber.\n");

434 
sc
 = &
fxp_soác
[
unNumb
 - 1];

435 
iå
 = &
sc
->
¬pcom
.
ac_if
;

436 ià(
iå
->
if_soác
 !ð
NULL
) {

437 
	`deviû_´tf
(
dev
,"FXP Driverlready in use.\n");

441 
	`mem£t
(
sc
, 0, (*sc));

442 #ifdeà
NOTUSED


443 
sc
->
dev
 = dev;

444 
	`ÿÎout_hªdË_
(&
sc
->
¡©_ch
);

445 
	`mtx_
(&
sc
->
sc_mtx
, 
	`deviû_g_Çmeun
(
dev
), 
MTX_DEF
 | 
MTX_RECURSE
);

447 
s
 = 
	`¥limp
();

452 { 
j
; 
pbus
, 
pdev
, 
pfun
;

454 
j
=0; 
fxp_idt_bË
[j].
devid
; j++ ) {

455 
i
 = 
	`pci_fd_deviû
Ð0x8086, 
fxp_idt_bË
[
j
].
devid
,

456 
unNumb
-1, &
pbus
, &
pdev
, &
pfun
 );

457 
sc
->
pci_sigÇtu»
 = 
	`PCIB_DEVSIG_MAKE
Ð
pbus
, 
pdev
, 
pfun
 );

458 
	`DBGLVL_PRINTK
(2,"fxp_attach: find_devideturned %d "

460 
i
,
sc
->
pci_sigÇtu»
);

461 ià(
PCIB_ERR_SUCCESS
 =ð
i
) {

462 iàÐ
UNTESTED
 =ð
fxp_idt_bË
[
j
].
w¬n
 ) {

463 
	`deviû_´tf
(
dev
,

465 
	`deviû_´tf
(
dev
,

476 ià(
i
 !ð
PCIB_ERR_SUCCESS
) {

477 
	`deviû_´tf
(
dev
, "couldot find 82559ER device\n");

486 
	`pcib_cÚf_»ad16
(
sc
->
pci_sigÇtu»
, 
PCI_COMMAND
,&
v®16
);

487 
v®16
 |ð(
PCI_COMMAND_MEMORY
|
PCI_COMMAND_MASTER
);

488 
	`pcib_cÚf_wre16
(
sc
->
pci_sigÇtu»
, 
PCI_COMMAND
, 
v®16
);

489 
	`DBGLVL_PRINTK
(3,"fxp_©ch: PCI_COMMAND_wrð0x%x\n",
v®16
);

490 
	`pcib_cÚf_»ad16
(
sc
->
pci_sigÇtu»
, 
PCI_COMMAND
,&
v®16
);

491 
	`DBGLVL_PRINTK
(4,"fxp_©ch: PCI_COMMAND_»ad = 0x%x\n",
v®16
);

498 #ifdeà
NOTUSED


499 
m1
 = 
PCI_COMMAND_MEMORY
;

500 
m2
 = 
PCI_COMMAND_IO
;

501 
´eãr_iom­
 = 0;

502 ià(
	`»sourû_t_v®ue
(
	`deviû_g_Çme
(
dev
), 
	`deviû_g_un
(dev),

503 "´eãr_iom­", &
´eãr_iom­
) == 0 &&refer_iomap != 0) {

504 
m1
 = 
PCI_COMMAND_IO
;

505 
m2
 = 
PCI_COMMAND_MEMORY
;

508 ià(
v®
 & 
m1
) {

509 
sc
->
¹p
 = ((
m1
 =ð
PCI_COMMAND_MEMORY
)

510 ? 
SYS_RES_MEMORY
 : 
SYS_RES_IOPORT
);

511 
sc
->
rgd
 = ((
m1
 =ð
PCI_COMMAND_MEMORY
)

512 ? 
FXP_PCI_MMBA
 : 
FXP_PCI_IOBA
);

513 
sc
->
mem
 = 
	`bus_®loc_»sourû
(
dev
, sc->
¹p
, &sc->
rgd
,

514 0, ~0, 1, 
RF_ACTIVE
);

516 ià(
sc
->
mem
 =ð
NULL
 && (
v®
 & 
m2
)) {

517 
sc
->
¹p
 = ((
m2
 =ð
PCI_COMMAND_MEMORY
)

518 ? 
SYS_RES_MEMORY
 : 
SYS_RES_IOPORT
);

519 
sc
->
rgd
 = ((
m2
 =ð
PCI_COMMAND_MEMORY
)

520 ? 
FXP_PCI_MMBA
 : 
FXP_PCI_IOBA
);

521 
sc
->
mem
 = 
	`bus_®loc_»sourû
(
dev
, sc->
¹p
, &sc->
rgd
,

522 0, ~0, 1, 
RF_ACTIVE
);

525 ià(!
sc
->
mem
) {

526 
	`deviû_´tf
(
dev
, "couldot map deviceegisters\n");

527 
rÜ
 = 
ENXIO
;

528 
ç
;

530 ià(
fxp_is_vbo£
) {

531 
	`deviû_´tf
(
dev
, "using %s spaceegister mapping\n",

532 
sc
->
¹p
 =ð
SYS_RES_MEMORY
? "memory" : "I/O");

535 
sc
->
sc_¡
 = 
	`rmª_g_bu¡ag
(sc->
mem
);

536 
sc
->
sc_sh
 = 
	`rmª_g_bushªdË
(sc->
mem
);

541 
rid
 = 0;

542 
sc
->
q
 = 
	`bus_®loc_»sourû
(
dev
, 
SYS_RES_IRQ
, &
rid
, 0, ~0, 1,

543 
RF_SHAREABLE
 | 
RF_ACTIVE
);

544 ià(
sc
->
q
 =ð
NULL
) {

545 
	`deviû_´tf
(
dev
, "couldot map interrupt\n");

546 
rÜ
 = 
ENXIO
;

547 
ç
;

550 
rÜ
 = 
	`bus_£tup_
(
dev
, 
sc
->
q
, 
INTR_TYPE_NET
,

551 
fxp_
, 
sc
, &sc->
ih
);

552 ià(
rÜ
) {

553 
	`deviû_´tf
(
dev
, "couldot setup irq\n");

554 
ç
;

561 
	`pcib_cÚf_»ad16
(
sc
->
pci_sigÇtu»
, 
PCI_COMMAND
,&
v®16
);

562 
	`DBGLVL_PRINTK
(4,"fxp_©ch: PCI_COMMAND_»ad = 0x%x\n",
v®16
);

563 if((
v®16
 & 
PCI_COMMAND_IO
) != 0) {

564 
sc
->
pci_»gs_¬e_io
 = 
ue
;

565 
	`pcib_cÚf_»ad32
(
sc
->
pci_sigÇtu»
,

566 
PCI_BASE_ADDRESS_1
,

567 &
v®32
);

568 
sc
->
pci_»gs_ba£
 = 
v®32
 & 
PCI_BASE_ADDRESS_IO_MASK
;

571 
sc
->
pci_»gs_¬e_io
 = 
çl£
;

572 
	`pcib_cÚf_»ad32
(
sc
->
pci_sigÇtu»
,

573 
PCI_BASE_ADDRESS_0
,

574 &
v®32
);

575 
sc
->
pci_»gs_ba£
 = 
v®32
 & 
PCI_BASE_ADDRESS_MEM_MASK
;

577 
	`DBGLVL_PRINTK
(3,"fxp_attach: CSRegistersre mapped in %s space"

579 
sc
->
pci_»gs_¬e_io
 ? "I/O" : "MEM",

580 
sc
->
pci_»gs_ba£
);

585 
	`pcib_cÚf_»ad8
(
sc
->
pci_sigÇtu»
, 60, &
¼u±
);

586 
	`DBGLVL_PRINTK
(3,"fxp_©ch: iÁru± = 0x%x\n",
¼u±
);

587 
sc
->
qInfo
.
Çme
 = (
¹ems_q_numb
)
¼u±
;

592 
	`CSR_WRITE_4
(
sc
, 
FXP_CSR_PORT
, 
FXP_PORT_SOFTWARE_RESET
);

593 
	`DELAY
(10);

595 
sc
->
cbl_ba£
 = 
	`m®loc
((
fxp_cb_tx
è* 
FXP_NTXCB
,

596 
M_DEVBUF
, 
M_NOWAIT
);

597 
	`DBGLVL_PRINTK
(3,"fxp_©ch: sc->cbl_ba£ = 0x%x\n",
sc
->
cbl_ba£
);

598 ià(
sc
->
cbl_ba£
 =ð
NULL
)

599 
çmem
;

601 
	`mem£t
(
sc
->
cbl_ba£
, 0, (
fxp_cb_tx
è* 
FXP_NTXCB
);

603 
sc
->
fxp_¡©s
 = 
	`m®loc
((fxp_¡©s), 
M_DEVBUF
,

604 
M_NOWAIT
);

605 
	`DBGLVL_PRINTK
(3,"fxp_©ch: sc->fxp_¡© ð0x%x\n",
sc
->
fxp_¡©s
);

606 ià(
sc
->
fxp_¡©s
 =ð
NULL
)

607 
çmem
;

609 
	`mem£t
(
sc
->
fxp_¡©s
, 0, (fxp_stats));

611 
sc
->
mc¥
 = 
	`m®loc
((
fxp_cb_mcs
), 
M_DEVBUF
, 
M_NOWAIT
);

612 
	`DBGLVL_PRINTK
(3,"fxp_©ch: sc->mc¥ = 0x%x\n",
sc
->
mc¥
);

613 ià(
sc
->
mc¥
 =ð
NULL
)

614 
çmem
;

619 
i
 = 0; i < 
FXP_NRFABUFS
; i++) {

620 ià(
	`fxp_add_rçbuf
(
sc
, 
NULL
) != 0) {

621 
çmem
;

628 
	`DBGLVL_PRINTK
(3,"fxp_attach: calling fxp_autosize_eeprom\n");

629 
	`fxp_autosize_´om
(
sc
);

634 
	`fxp_»ad_´om
(
sc
, &
d©a
, 6, 1);

635 ià((
d©a
 & 
FXP_PHY_DEVICE_MASK
) != 0 &&

636 (
d©a
 & 
FXP_PHY_SERIAL_ONLY
))

637 
sc
->
æags
 |ð
FXP_FLAG_SERIAL_MEDIA
;

643 
	`fxp_»ad_´om
(
sc
, &
d©a
, 5, 1);

644 ià((
d©a
 >> 8) == 1)

645 
sc
->
ch
 = 
FXP_CHIP_82557
;

646 
	`DBGLVL_PRINTK
(3,"fxp_©ch: sc->ch = %d\n",
sc
->
ch
);

659 #ifdeà
NOTUSED


660 
i
 = 
	`pci_g_deviû
(
dev
);

662 
	`pcib_cÚf_»ad16
(
sc
->
pci_sigÇtu»
,2,&
dev_id
);

663 
	`DBGLVL_PRINTK
(3,"fxp_©ch: deviû id = 0x%x\n",
dev_id
);

665 ià(
dev_id
 == 0x2449 || (dev_id > 0x1030 && dev_id < 0x1039)) {

666 
	`deviû_´tf
(
dev
, "*** See Intel 82801BA/82801BAM Specification Update, Errata #30. ***\n");

667 
	`fxp_»ad_´om
(
sc
, &
d©a
, 10, 1);

668 ià(
d©a
 & 0x02) {

669 
u_t16_t
 
cksum
;

670 
i
;

672 
	`deviû_´tf
(
dev
,

674 
d©a
 &= ~0x02;

675 
	`fxp_wre_´om
(
sc
, &
d©a
, 10, 1);

676 
	`deviû_´tf
(
dev
, "New EEPROM ID: 0x%x\n", 
d©a
);

677 
cksum
 = 0;

678 
i
 = 0; i < (1 << 
sc
->
´om_size
) - 1; i++) {

679 
	`fxp_»ad_´om
(
sc
, &
d©a
, 
i
, 1);

680 
cksum
 +ð
d©a
;

682 
i
 = (1 << 
sc
->
´om_size
) - 1;

683 
cksum
 = 0xBABA - cksum;

684 
	`fxp_»ad_´om
(
sc
, &
d©a
, 
i
, 1);

685 
	`fxp_wre_´om
(
sc
, &
cksum
, 
i
, 1);

686 
	`deviû_´tf
(
dev
,

688 
i
, 
d©a
, 
cksum
);

694 
	`CSR_WRITE_4
(
sc
, 
FXP_CSR_PORT
, 
FXP_PORT_SOFTWARE_RESET
);

695 
	`DELAY
(50);

696 
	`deviû_´tf
(
dev
,

703 
sc
->
æags
 |ð
FXP_FLAG_CU_RESUME_BUG
;

711 ià(
sc
->
ch
 !ð
FXP_CHIP_82557
) {

712 
u_t8_t
 
tmp_v®
;

718 
	`pcib_cÚf_»ad8
(
sc
->
pci_sigÇtu»
,

719 
PCI_CACHE_LINE_SIZE
,&
tmp_v®
);

720 
	`DBGLVL_PRINTK
(3,"fxp_©ch: CACHE_LINE_SIZE = %d\n",
tmp_v®
);

721 ià(
v®16
 & 
PCI_COMMAND_MEMORY
 &&

722 
tmp_v®
 != 0)

723 
sc
->
æags
 |ð
FXP_FLAG_MWI_ENABLE
;

726 
sc
->
æags
 |ð
FXP_FLAG_EXT_TXCB
;

729 
sc
->
æags
 |ð
FXP_FLAG_LONG_PKT_EN
;

730 
	`DBGLVL_PRINTK
(3,"fxp_attach: sc->flags = 0x%x\n",

731 
sc
->
æags
);

737 
	`fxp_»ad_´om
(
sc
, (
u_t16_t
*)sc->
¬pcom
.
ac_addr
, 0, 3);

738 ià(
fxp_is_vbo£
) {

739 
	`deviû_´tf
(
dev
, "Ethernetddress %x:%x:%x:%x:%x:%x %s \n",

740 ((
u_t8_t
*)
sc
->
¬pcom
.
ac_addr
)[0],

741 ((
u_t8_t
*)
sc
->
¬pcom
.
ac_addr
)[1],

742 ((
u_t8_t
*)
sc
->
¬pcom
.
ac_addr
)[2],

743 ((
u_t8_t
*)
sc
->
¬pcom
.
ac_addr
)[3],

744 ((
u_t8_t
*)
sc
->
¬pcom
.
ac_addr
)[4],

745 ((
u_t8_t
*)
sc
->
¬pcom
.
ac_addr
)[5],

746 
sc
->
æags
 & 
FXP_FLAG_SERIAL_MEDIA
 ? ", 10Mbps" : "");

747 
	`deviû_´tf
(
dev
, "PCI IDs: 0x%x 0x%x 0x%x 0x%x 0x%x\n",

748 
	`pci_g_vdÜ
(
sc
), 
	`pci_g_deviû
(sc),

749 
	`pci_g_subvdÜ
(
sc
), 
	`pci_g_subdeviû
(sc),

750 
	`pci_g_»vid
(
sc
));

751 
	`deviû_´tf
(
dev
, "Ch Ty³: %d\n", 
sc
->
ch
);

754 #ifdeà
NOTUSED


764 ià(
sc
->
æags
 & 
FXP_FLAG_SERIAL_MEDIA
) {

765 
	`ifmed_
(&
sc
->
sc_med
, 0, 
fxp_£rl_ifmed_upd
,

766 
fxp_£rl_ifmed_¡s
);

767 
	`ifmed_add
(&
sc
->
sc_med
, 
IFM_ETHER
|
IFM_MANUAL
, 0, 
NULL
);

768 
	`ifmed_£t
(&
sc
->
sc_med
, 
IFM_ETHER
|
IFM_MANUAL
);

770 ià(
	`mii_phy_´obe
(
dev
, &
sc
->
miibus
, 
fxp_ifmed_upd
,

771 
fxp_ifmed_¡s
)) {

772 
	`deviû_´tf
(
dev
, "MII withoutny PHY!\n");

773 
rÜ
 = 
ENXIO
;

774 
ç
;

778 ià(
cÚfig
->
mtu
)

779 
mtu
 = 
cÚfig
->mtu;

781 
mtu
 = 
ETHERMTU
;

783 
iå
->
if_soác
 = 
sc
;

784 
iå
->
if_un
 = 
unNumb
;

785 
iå
->
if_Çme
 = 
unName
;

786 
iå
->
if_mtu
 = 
mtu
;

787 
iå
->
if_baud¿
 = 100000000;

788 
iå
->
if_
 = 
fxp_
;

789 
iå
->
if_ioùl
 = 
fxp_ioùl
;

790 
iå
->
if_¡¬t
 = 
fxp_¡¬t
;

791 
iå
->
if_ouut
 = 
h_ouut
;

792 
iå
->
if_w©chdog
 = 
fxp_w©chdog
;

793 
iå
->
if_æags
 = 
IFF_BROADCAST
 | 
IFF_SIMPLEX
 ;

794 ià(
iå
->
if_¢d
.
ifq_maxËn
 == 0)

795 
iå
->
if_¢d
.
ifq_maxËn
 = 
ifqmaxËn
;

800 
	`DBGLVL_PRINTK
(3,"fxp_attach: calling if_attach\n");

801 
	`if_©ch
 (
iå
);

802 
	`DBGLVL_PRINTK
(3,"fxp_attach: callingther_if_attach\n");

803 
	`h_içach
(
iå
);

804 
	`DBGLVL_PRINTK
(3,"fxp_attach:eturn fromther_if_attach\n");

806 #ifdeà
NOTUSED


810 
iå
->
if_d©a
.
ifi_hd¾
 = (
h_vÏn_hd
);

816 
iå
->
if_¢d
.
ifq_maxËn
 = 
FXP_NTXCB
 - 1;

818 
	`¥lx
(
s
);

821 
çmem
:

822 
	`deviû_´tf
(
dev
, "Failedo malloc memory\n");

823 
rÜ
 = 
ENOMEM
;

824 #ifdeà
NOTUSED


825 
ç
:

827 
	`¥lx
(
s
);

828 
	`fxp_»Ëa£
(
sc
);

829  (
rÜ
);

830 
	}
}

836 
	$fxp_»Ëa£
(
fxp_soác
 *
sc
)

839 #ifdeà
NOTUSED


840 
	`bus_gic_dach
(
sc
->
dev
);

841 ià(
sc
->
miibus
)

842 
	`deviû_de_chd
(
sc
->
dev
, sc->
miibus
);

844 ià(
sc
->
cbl_ba£
)

845 
	`ä
(
sc
->
cbl_ba£
, 
M_DEVBUF
);

846 ià(
sc
->
fxp_¡©s
)

847 
	`ä
(
sc
->
fxp_¡©s
, 
M_DEVBUF
);

848 ià(
sc
->
mc¥
)

849 
	`ä
(
sc
->
mc¥
, 
M_DEVBUF
);

850 ià(
sc
->
rç_hdm
)

851 
	`m_äm
(
sc
->
rç_hdm
);

853 #ifdeà
NOTUSED


854 ià(
sc
->
ih
)

855 
	`bus_¬down_
(
sc
->
dev
, sc->
q
, sc->
ih
);

856 ià(
sc
->
q
)

857 
	`bus_»Ëa£_»sourû
(
sc
->
dev
, 
SYS_RES_IRQ
, 0, sc->
q
);

858 ià(
sc
->
mem
)

859 
	`bus_»Ëa£_»sourû
(
sc
->
dev
, sc->
¹p
, sc->
rgd
, sc->
mem
);

860 
	`mtx_de¡roy
(&
sc
->
sc_mtx
);

862 
	}
}

864 #ià
NOTUSED


869 
	$fxp_dach
(
deviû_t
 
dev
)

871 
fxp_soác
 *
sc
 = 
	`deviû_g_soác
(
dev
);

872 
s
;

875 
	`CSR_WRITE_1
(
sc
, 
FXP_CSR_SCB_INTRCNTL
, 
FXP_SCB_INTR_DISABLE
);

877 
s
 = 
	`¥limp
();

882 
	`fxp_¡Ý
(
sc
);

887 
	`h_ifdach
(&
sc
->
¬pcom
.
ac_if
, 
ETHER_BPF_SUPPORTED
);

892 
	`ifmed_»movÎ
(&
sc
->
sc_med
);

894 
	`¥lx
(
s
);

897 
	`fxp_»Ëa£
(
sc
);

900 
	}
}

908 
	$fxp_shutdown
(
deviû_t
 
dev
)

915 
	`fxp_¡Ý
((
fxp_soác
 *è
	`deviû_g_soác
(
dev
));

917 
	}
}

924 
	$fxp_¡©s
(
fxp_soác
 *
sc
)

926 
iâ
 *
iå
 = &
sc
->
sc_if
;

928 
	`´tf
 (" Ouu·cks:%-8lu", 
iå
->
if_Ýacks
);

929 
	`´tf
 (" CÞlisiÚs:%-8lu", 
iå
->
if_cÞlisiÚs
);

930 
	`´tf
 (" OuurÜs:%-8lu\n", 
iå
->
if_Û¼Üs
);

931 
	`´tf
 (" IÅu·cks:%-8lu", 
iå
->
if_acks
);

932 
	`´tf
 (" IÅurÜs:%-8lu\n", 
iå
->
if_¼Üs
);

933 
	}
}

936 
	$fxp_´om_shiá
(
fxp_soác
 *
sc
, 
d©a
, 
Ëngth
)

938 
u_t16_t
 
»g
;

939 
x
;

944 
x
 = 1 << (
Ëngth
 - 1); x; x >>= 1) {

945 ià(
d©a
 & 
x
)

946 
»g
 = 
FXP_EEPROM_EECS
 | 
FXP_EEPROM_EEDI
;

948 
»g
 = 
FXP_EEPROM_EECS
;

949 
	`CSR_WRITE_2
(
sc
, 
FXP_CSR_EEPROMCONTROL
, 
»g
);

950 
	`DELAY
(1);

951 
	`CSR_WRITE_2
(
sc
, 
FXP_CSR_EEPROMCONTROL
, 
»g
 | 
FXP_EEPROM_EESK
);

952 
	`DELAY
(1);

953 
	`CSR_WRITE_2
(
sc
, 
FXP_CSR_EEPROMCONTROL
, 
»g
);

954 
	`DELAY
(1);

956 
	}
}

965 
u_t16_t


966 
	$fxp_´om_gwÜd
(
fxp_soác
 *
sc
, 
off£t
, 
autosize
)

968 
u_t16_t
 
»g
, 
d©a
;

969 
x
;

971 
	`CSR_WRITE_2
(
sc
, 
FXP_CSR_EEPROMCONTROL
, 
FXP_EEPROM_EECS
);

975 
	`fxp_´om_shiá
(
sc
, 
FXP_EEPROM_OPC_READ
, 3);

979 
d©a
 = 0;

980 
x
 = 1 << (
sc
->
´om_size
 - 1); x; x >>= 1) {

981 ià(
off£t
 & 
x
)

982 
»g
 = 
FXP_EEPROM_EECS
 | 
FXP_EEPROM_EEDI
;

984 
»g
 = 
FXP_EEPROM_EECS
;

985 
	`CSR_WRITE_2
(
sc
, 
FXP_CSR_EEPROMCONTROL
, 
»g
);

986 
	`DELAY
(1);

987 
	`CSR_WRITE_2
(
sc
, 
FXP_CSR_EEPROMCONTROL
, 
»g
 | 
FXP_EEPROM_EESK
);

988 
	`DELAY
(1);

989 
	`CSR_WRITE_2
(
sc
, 
FXP_CSR_EEPROMCONTROL
, 
»g
);

990 
	`DELAY
(1);

991 
»g
 = 
	`CSR_READ_2
(
sc
, 
FXP_CSR_EEPROMCONTROL
è& 
FXP_EEPROM_EEDO
;

992 
d©a
++;

993 ià(
autosize
 && 
»g
 == 0) {

994 
sc
->
´om_size
 = 
d©a
;

1001 
d©a
 = 0;

1002 
»g
 = 
FXP_EEPROM_EECS
;

1003 
x
 = 1 << 15; x; x >>= 1) {

1004 
	`CSR_WRITE_2
(
sc
, 
FXP_CSR_EEPROMCONTROL
, 
»g
 | 
FXP_EEPROM_EESK
);

1005 
	`DELAY
(1);

1006 ià(
	`CSR_READ_2
(
sc
, 
FXP_CSR_EEPROMCONTROL
è& 
FXP_EEPROM_EEDO
)

1007 
d©a
 |ð
x
;

1008 
	`CSR_WRITE_2
(
sc
, 
FXP_CSR_EEPROMCONTROL
, 
»g
);

1009 
	`DELAY
(1);

1011 
	`CSR_WRITE_2
(
sc
, 
FXP_CSR_EEPROMCONTROL
, 0);

1012 
	`DELAY
(1);

1014  (
d©a
);

1015 
	}
}

1018 
	$fxp_´om_putwÜd
(
fxp_soác
 *
sc
, 
off£t
, 
u_t16_t
 
d©a
)

1020 
i
;

1025 
	`CSR_WRITE_2
(
sc
, 
FXP_CSR_EEPROMCONTROL
, 
FXP_EEPROM_EECS
);

1026 
	`fxp_´om_shiá
(
sc
, 0x4, 3);

1027 
	`fxp_´om_shiá
(
sc
, 0x03 << (sc->
´om_size
 - 2), sc->eeprom_size);

1028 
	`CSR_WRITE_2
(
sc
, 
FXP_CSR_EEPROMCONTROL
, 0);

1029 
	`DELAY
(1);

1033 
	`CSR_WRITE_2
(
sc
, 
FXP_CSR_EEPROMCONTROL
, 
FXP_EEPROM_EECS
);

1034 
	`fxp_´om_shiá
(
sc
, 
FXP_EEPROM_OPC_WRITE
, 3);

1035 
	`fxp_´om_shiá
(
sc
, 
off£t
, sc->
´om_size
);

1036 
	`fxp_´om_shiá
(
sc
, 
d©a
, 16);

1037 
	`CSR_WRITE_2
(
sc
, 
FXP_CSR_EEPROMCONTROL
, 0);

1038 
	`DELAY
(1);

1042 
	`CSR_WRITE_2
(
sc
, 
FXP_CSR_EEPROMCONTROL
, 
FXP_EEPROM_EECS
);

1043 
	`DELAY
(1);

1044 
i
 = 0; i < 1000; i++) {

1045 ià(
	`CSR_READ_2
(
sc
, 
FXP_CSR_EEPROMCONTROL
è& 
FXP_EEPROM_EEDO
)

1047 
	`DELAY
(50);

1049 
	`CSR_WRITE_2
(
sc
, 
FXP_CSR_EEPROMCONTROL
, 0);

1050 
	`DELAY
(1);

1054 
	`CSR_WRITE_2
(
sc
, 
FXP_CSR_EEPROMCONTROL
, 
FXP_EEPROM_EECS
);

1055 
	`fxp_´om_shiá
(
sc
, 0x4, 3);

1056 
	`fxp_´om_shiá
(
sc
, 0, sc->
´om_size
);

1057 
	`CSR_WRITE_2
(
sc
, 
FXP_CSR_EEPROMCONTROL
, 0);

1058 
	`DELAY
(1);

1059 
	}
}

1082 
	$fxp_autosize_´om
(
fxp_soác
 *
sc
)

1086 
sc
->
´om_size
 = 8;

1089 (è
	`fxp_´om_gwÜd
(
sc
, 0, 1);

1090 
	}
}

1093 
	$fxp_»ad_´om
(
fxp_soác
 *
sc
, 
u_shÜt
 *
d©a
, 
off£t
, 
wÜds
)

1095 
i
;

1097 
i
 = 0; i < 
wÜds
; i++) {

1098 
d©a
[
i
] = 
	`fxp_´om_gwÜd
(
sc
, 
off£t
 + i, 0);

1099 
	`DBGLVL_PRINTK
(4,"fxp_eeprom_read(off=0x%x)=0x%x\n",

1100 
off£t
+
i
,
d©a
[i]);

1102 
	}
}

1105 
	$fxp_wre_´om
(
fxp_soác
 *
sc
, 
u_shÜt
 *
d©a
, 
off£t
, 
wÜds
)

1107 
i
;

1109 
i
 = 0; i < 
wÜds
; i++)

1110 
	`fxp_´om_putwÜd
(
sc
, 
off£t
 + 
i
, 
d©a
[i]);

1111 
	`DBGLVL_PRINTK
(4,"fxp_eeprom_write(off=0x%x,0x%x)\n",

1112 
off£t
+
i
,
d©a
[i]);

1113 
	}
}

1119 
	$fxp_¡¬t
(
iâ
 *
iå
)

1121 
fxp_soác
 *
sc
 = 
iå
->
if_soác
;

1122 
fxp_cb_tx
 *
txp
;

1124 
	`DBGLVL_PRINTK
(3,"fxp_start called\n");

1131 ià(
sc
->
Ãed_mc£tup
) {

1135 
txp
 = 
NULL
;

1143 
iå
->
if_¢d
.
ifq_hd
 !ð
NULL
 && 
sc
->
tx_queued
 < 
FXP_NTXCB
 - 1) {

1144 
mbuf
 *
m
, *
mb_hd
;

1145 
£gmt
;

1150 
	`IF_DEQUEUE
(&
iå
->
if_¢d
, 
mb_hd
);

1155 
txp
 = 
sc
->
cbl_Ï¡
->
Ãxt
;

1162 
tbd
:

1163 
m
 = 
mb_hd
, 
£gmt
 = 0; m !ð
NULL
; m = m->
m_Ãxt
) {

1164 ià(
m
->
m_Ën
 != 0) {

1165 ià(
£gmt
 =ð
FXP_NTXSEG
)

1167 
txp
->
tbd
[
£gmt
].
tb_addr
 =

1168 
	`vtÝhys
(
	`mtod
(
m
, 
vm_off£t_t
));

1169 
txp
->
tbd
[
£gmt
].
tb_size
 = 
m
->
m_Ën
;

1170 
£gmt
++;

1173 ià(
m
 !ð
NULL
) {

1174 
mbuf
 *
mn
;

1181 
	`MGETHDR
(
mn
, 
M_DONTWAIT
, 
MT_DATA
);

1182 ià(
mn
 =ð
NULL
) {

1183 
	`m_äm
(
mb_hd
);

1186 ià(
mb_hd
->
m_pkthdr
.
Ën
 > 
MHLEN
) {

1187 
	`MCLGET
(
mn
, 
M_DONTWAIT
);

1188 ià((
mn
->
m_æags
 & 
M_EXT
) == 0) {

1189 
	`m_äm
(
mn
);

1190 
	`m_äm
(
mb_hd
);

1194 
	`m_cÝyd©a
(
mb_hd
, 0, mb_hd->
m_pkthdr
.
Ën
,

1195 
	`mtod
(
mn
, 
ÿddr_t
));

1196 
mn
->
m_pkthdr
.
Ën
 = mn->
m_Ën
 = 
mb_hd
->m_pkthdr.len;

1197 
	`m_äm
(
mb_hd
);

1198 
mb_hd
 = 
mn
;

1199 
tbd
;

1202 
txp
->
tbd_numb
 = 
£gmt
;

1203 
txp
->
mb_hd
 = mb_head;

1204 
txp
->
cb_¡©us
 = 0;

1205 ià(
sc
->
tx_queued
 !ð
FXP_CXINT_THRESH
 - 1) {

1206 
txp
->
cb_commªd
 =

1207 
FXP_CB_COMMAND_XMIT
 | 
FXP_CB_COMMAND_SF
 |

1208 
FXP_CB_COMMAND_S
;

1210 
txp
->
cb_commªd
 =

1211 
FXP_CB_COMMAND_XMIT
 | 
FXP_CB_COMMAND_SF
 |

1212 
FXP_CB_COMMAND_S
 | 
FXP_CB_COMMAND_I
;

1217 
iå
->
if_tim
 = 5;

1219 
txp
->
tx_th»shÞd
 =x_threshold;

1225 #ifdeà
__®pha__


1232 
	`©omic_þr_shÜt
(&
sc
->
cbl_Ï¡
->
cb_commªd
,

1233 
FXP_CB_COMMAND_S
);

1235 
sc
->
cbl_Ï¡
->
cb_commªd
 &ð~
FXP_CB_COMMAND_S
;

1237 
sc
->
cbl_Ï¡
 = 
txp
;

1244 ià(
sc
->
tx_queued
 == 0)

1245 
sc
->
cbl_f¡
 = 
txp
;

1247 
sc
->
tx_queued
++;

1249 #ifdeà
NOTUSED


1253 ià(
iå
->
if_bpf
)

1254 
	`bpf_mp
(
iå
, 
mb_hd
);

1262 ià(
txp
 !ð
NULL
) {

1263 
	`fxp_scb_wa
(
sc
);

1264 
	`fxp_scb_cmd
(
sc
, 
FXP_SCB_COMMAND_CU_RESUME
);

1266 
	}
}

1271 
¹ems_i¤
 
	$fxp_
(
¹ems_veùÜ_numb
 
v
)

1276 
fxp_soác
 *
sc
 = &(fxp_softc[0]);

1281 
	`CSR_WRITE_1
(
sc
, 
FXP_CSR_SCB_INTRCNTL
, 
FXP_SCB_INTR_DISABLE
);

1285 
	`¹ems_bsdÃt_evt_£nd
 (
sc
->
d«mÚTid
, 
INTERRUPT_EVENT
);

1286 
	}
}

1288 
	$fxp_d«mÚ
(*
xsc
)

1290 
fxp_soác
 *
sc
 = 
xsc
;

1291 
iâ
 *
iå
 = &
sc
->
sc_if
;

1292 
u_t8_t
 
¡©ack
;

1293 
¹ems_evt_£t
 
evts
;

1294 
¹ems_¼u±_Ëv
 
Ëv
;

1296 #ifdeà
NOTUSED


1297 ià(
sc
->
su¥ded
) {

1303 
	`DBGLVL_PRINTK
(4,"fxp_daemon waiting forvent\n");

1307 
	`¹ems_bsdÃt_evt_»ûive
 (
INTERRUPT_EVENT
,

1308 
RTEMS_WAIT
|
RTEMS_EVENT_ANY
,

1309 
RTEMS_NO_TIMEOUT
,

1310 &
evts
);

1311 (
¡©ack
 = 
	`CSR_READ_1
(
sc
, 
FXP_CSR_SCB_STATACK
)) != 0) {

1312 
	`DBGLVL_PRINTK
(4,"fxp_daemon:rocessingvent, statack = 0x%x\n",

1313 
¡©ack
);

1314 #ifdeà
NOTUSED


1321 ià(
¡©ack
 == 0xff)

1328 
	`CSR_WRITE_1
(
sc
, 
FXP_CSR_SCB_STATACK
, 
¡©ack
);

1343 ià(
¡©ack
 & (
FXP_SCB_STATACK_CXTNO
 | 
FXP_SCB_STATACK_CNA
)) {

1344 
fxp_cb_tx
 *
txp
;

1346 
txp
 = 
sc
->
cbl_f¡
; sc->
tx_queued
 &&

1347 (
txp
->
cb_¡©us
 & 
FXP_CB_STATUS_C
) != 0;

1348 
txp
 =xp->
Ãxt
) {

1349 ià(
txp
->
mb_hd
 !ð
NULL
) {

1350 
	`m_äm
(
txp
->
mb_hd
);

1351 
txp
->
mb_hd
 = 
NULL
;

1353 
sc
->
tx_queued
--;

1355 
sc
->
cbl_f¡
 = 
txp
;

1356 
iå
->
if_tim
 = 0;

1357 ià(
sc
->
tx_queued
 == 0) {

1358 ià(
sc
->
Ãed_mc£tup
)

1359 
	`fxp_mc_£tup
(
sc
);

1364 ià(
iå
->
if_¢d
.
ifq_hd
 !ð
NULL
)

1365 
	`fxp_¡¬t
(
iå
);

1372 ià(
¡©ack
 & (
FXP_SCB_STATACK_FR
 | 
FXP_SCB_STATACK_RNR
)) {

1373 
mbuf
 *
m
;

1374 
fxp_rç
 *
rç
;

1375 
rcvloÝ
:

1376 
m
 = 
sc
->
rç_hdm
;

1377 
rç
 = (
fxp_rç
 *)(
m
->
m_ext
.
ext_buf
 +

1378 
RFA_ALIGNMENT_FUDGE
);

1380 ià(
rç
->
rç_¡©us
 & 
FXP_RFA_STATUS_C
) {

1384 
sc
->
rç_hdm
 = 
m
->
m_Ãxt
;

1385 
m
->
m_Ãxt
 = 
NULL
;

1392 ià(
	`fxp_add_rçbuf
(
sc
, 
m
) == 0) {

1393 
h_hd
 *
eh
;

1394 
tÙ®_Ën
;

1396 
tÙ®_Ën
 = 
rç
->
aùu®_size
 &

1397 (
MCLBYTES
 - 1);

1398 ià(
tÙ®_Ën
 <

1399 (
h_hd
)) {

1400 
	`m_äm
(
m
);

1401 
rcvloÝ
;

1410 ià(
rç
->
rç_¡©us
 &

1411 
FXP_RFA_STATUS_CRC
) {

1412 
	`m_äm
(
m
);

1413 
rcvloÝ
;

1416 
m
->
m_pkthdr
.
rcvif
 = 
iå
;

1417 
m
->
m_pkthdr
.
Ën
 = m->
m_Ën
 = 
tÙ®_Ën
;

1418 
eh
 = 
	`mtod
(
m
, 
h_hd
 *);

1419 
m
->
m_d©a
 +=

1420 (
h_hd
);

1421 
m
->
m_Ën
 -=

1422 (
h_hd
);

1423 
m
->
m_pkthdr
.
Ën
 = m->
m_Ën
;

1424 
	`h_put
(
iå
, 
eh
, 
m
);

1426 
rcvloÝ
;

1428 ià(
¡©ack
 & 
FXP_SCB_STATACK_RNR
) {

1429 
	`fxp_scb_wa
(
sc
);

1430 
	`CSR_WRITE_4
(
sc
, 
FXP_CSR_SCB_GENERAL
,

1431 
	`vtÝhys
(
sc
->
rç_hdm
->
m_ext
.
ext_buf
) +

1432 
RFA_ALIGNMENT_FUDGE
);

1433 
	`fxp_scb_cmd
(
sc
, 
FXP_SCB_COMMAND_RU_START
);

1440 
	`¹ems_¼u±_di§bË
 (
Ëv
);

1441 
	`CSR_WRITE_1
(
sc
, 
FXP_CSR_SCB_INTRCNTL
,0);

1442 
	`¹ems_¼u±_abË
 (
Ëv
);

1444 
	}
}

1458 
	$fxp_tick
(*
xsc
)

1460 
fxp_soác
 *
sc
 = 
xsc
;

1461 
iâ
 *
iå
 = &
sc
->
sc_if
;

1462 
fxp_¡©s
 *
¥
 = 
sc
->fxp_stats;

1463 
fxp_cb_tx
 *
txp
;

1464 
s
;

1466 
	`DBGLVL_PRINTK
(4,"fxp_tick called\n");

1468 
iå
->
if_Ýacks
 +ð
¥
->
tx_good
;

1469 
iå
->
if_cÞlisiÚs
 +ð
¥
->
tx_tÙ®_cÞlisiÚs
;

1470 ià(
¥
->
rx_good
) {

1471 
iå
->
if_acks
 +ð
¥
->
rx_good
;

1472 
sc
->
rx_idË_£cs
 = 0;

1477 
sc
->
rx_idË_£cs
++;

1479 
iå
->
if_¼Üs
 +=

1480 
¥
->
rx_üc_rÜs
 +

1481 
¥
->
rx_®ignmt_rÜs
 +

1482 
¥
->
rx_ºr_rÜs
 +

1483 
¥
->
rx_ovrun_rÜs
;

1488 ià(
¥
->
tx_undruns
) {

1489 
iå
->
if_Û¼Üs
 +ð
¥
->
tx_undruns
;

1490 ià(
tx_th»shÞd
 < 192)

1491 
tx_th»shÞd
 += 64;

1493 
s
 = 
	`¥limp
();

1501 
txp
 = 
sc
->
cbl_f¡
; sc->
tx_queued
 &&

1502 (
txp
->
cb_¡©us
 & 
FXP_CB_STATUS_C
) != 0;

1503 
txp
 =xp->
Ãxt
) {

1504 ià(
txp
->
mb_hd
 !ð
NULL
) {

1505 
	`m_äm
(
txp
->
mb_hd
);

1506 
txp
->
mb_hd
 = 
NULL
;

1508 
sc
->
tx_queued
--;

1510 
sc
->
cbl_f¡
 = 
txp
;

1521 ià(
sc
->
rx_idË_£cs
 > 
FXP_MAX_RX_IDLE
) {

1522 
sc
->
rx_idË_£cs
 = 0;

1523 
	`fxp_mc_£tup
(
sc
);

1529 ià(
	`CSR_READ_1
(
sc
, 
FXP_CSR_SCB_COMMAND
) == 0) {

1533 
	`fxp_scb_cmd
(
sc
, 
FXP_SCB_COMMAND_CU_DUMPRESET
);

1540 
¥
->
tx_good
 = 0;

1541 
¥
->
tx_undruns
 = 0;

1542 
¥
->
tx_tÙ®_cÞlisiÚs
 = 0;

1544 
¥
->
rx_good
 = 0;

1545 
¥
->
rx_üc_rÜs
 = 0;

1546 
¥
->
rx_®ignmt_rÜs
 = 0;

1547 
¥
->
rx_ºr_rÜs
 = 0;

1548 
¥
->
rx_ovrun_rÜs
 = 0;

1550 #ifdeà
NOTUSED


1551 ià(
sc
->
miibus
 !ð
NULL
)

1552 
	`mii_tick
(
	`deviû_g_soác
(
sc
->
miibus
));

1554 
	`¥lx
(
s
);

1558 ià(
sc
->
¡©_ch
 =ð
fxp_timeout_ruÂg
) {

1559 
	`timeout
(
fxp_tick
, 
sc
, 
hz
);

1561 ià(
sc
->
¡©_ch
 =ð
fxp_timeout_¡Ý_rq
) {

1562 
sc
->
¡©_ch
 = 
fxp_timeout_¡Ý³d
;

1564 
	}
}

1571 
	$fxp_¡Ý
(
fxp_soác
 *
sc
)

1573 
iâ
 *
iå
 = &
sc
->
sc_if
;

1574 
fxp_cb_tx
 *
txp
;

1575 
i
;

1577 
	`DBGLVL_PRINTK
(2,"fxp_stop called\n");

1579 
iå
->
if_æags
 &ð~(
IFF_RUNNING
 | 
IFF_OACTIVE
);

1580 
iå
->
if_tim
 = 0;

1585 ià(
sc
->
¡©_ch
 =ð
fxp_timeout_ruÂg
) {

1586 
	`DBGLVL_PRINTK
(3,"fxp_stop:ryingo stop stat updateick\n");

1587 
sc
->
¡©_ch
 = 
fxp_timeout_¡Ý_rq
;

1588 
sc
->
¡©_ch
 !ð
fxp_timeout_¡Ý³d
) {

1589 
	`¹ems_bsdÃt_£m­hÜe_»Ëa£
();

1590 
	`¹ems_sk_wake_aá
(
fxp_ticksPSecÚd
);

1591 
	`¹ems_bsdÃt_£m­hÜe_ob
();

1593 
	`DBGLVL_PRINTK
(3,"fxp_stop: stat updateick stopped\n");

1598 
	`DBGLVL_PRINTK
(3,"fxp_stop: issue softwareeset\n");

1599 
	`CSR_WRITE_4
(
sc
, 
FXP_CSR_PORT
, 
FXP_PORT_SELECTIVE_RESET
);

1600 
	`DELAY
(10);

1605 
	`DBGLVL_PRINTK
(3,"fxp_stop:eleasing xmit buffers\n");

1606 
txp
 = 
sc
->
cbl_ba£
;

1607 ià(
txp
 !ð
NULL
) {

1608 
i
 = 0; i < 
FXP_NTXCB
; i++) {

1609 ià(
txp
[
i
].
mb_hd
 !ð
NULL
) {

1610 
	`m_äm
(
txp
[
i
].
mb_hd
);

1611 
txp
[
i
].
mb_hd
 = 
NULL
;

1615 
sc
->
tx_queued
 = 0;

1620 
	`DBGLVL_PRINTK
(3,"fxp_stop: freendeinitlleceive buffers\n");

1621 ià(
sc
->
rç_hdm
 !ð
NULL
)

1622 
	`m_äm
(
sc
->
rç_hdm
);

1623 
sc
->
rç_hdm
 = 
NULL
;

1624 
sc
->
rç_m
 = 
NULL
;

1625 
i
 = 0; i < 
FXP_NRFABUFS
; i++) {

1626 ià(
	`fxp_add_rçbuf
(
sc
, 
NULL
) != 0) {

1632 
	`·nic
("fxp_stop:o buffers!");

1635 
	`DBGLVL_PRINTK
(2,"fxp_stop: finished\n");

1636 
	}
}

1645 
	$fxp_w©chdog
(
iâ
 *
iå
)

1647 
fxp_soác
 *
sc
 = 
iå
->
if_soác
;

1649 
	`deviû_´tf
(
sc
->
dev
, "deviceimeout\n");

1650 
iå
->
if_Û¼Üs
++;

1652 
	`fxp_
(
sc
);

1653 
	}
}

1656 
	$fxp_
(*
xsc
)

1658 
fxp_soác
 *
sc
 = 
xsc
;

1659 
iâ
 *
iå
 = &
sc
->
sc_if
;

1660 
fxp_cb_cÚfig
 *
cbp
;

1661 
fxp_cb_s
 *
cb_s
;

1662 
fxp_cb_tx
 *
txp
;

1663 
i
, 
´m
, 
s
, 
rv
;

1665 
	`¹ems_sk_wake_aá
(100);

1666 
	`DBGLVL_PRINTK
(2,"fxp_init called\n");

1668 
s
 = 
	`¥limp
();

1677 
sc
->
¡©_ch
 = 
fxp_timeout_¡Ý³d
;

1678 
	`fxp_¡Ý
(
sc
);

1680 
´m
 = (
iå
->
if_æags
 & 
IFF_PROMISC
) ? 1 : 0;

1682 
	`DBGLVL_PRINTK
(5,"fxp_init: Initializing base of CBLnd RFA memory\n");

1687 
	`CSR_WRITE_4
(
sc
, 
FXP_CSR_SCB_GENERAL
, 0);

1688 
	`fxp_scb_cmd
(
sc
, 
FXP_SCB_COMMAND_CU_BASE
);

1690 
	`fxp_scb_wa
(
sc
);

1691 
	`fxp_scb_cmd
(
sc
, 
FXP_SCB_COMMAND_RU_BASE
);

1696 
	`DBGLVL_PRINTK
(5,"fxp_init: Initializing base of dump-stats buffer\n");

1697 
	`fxp_scb_wa
(
sc
);

1698 
	`CSR_WRITE_4
(
sc
, 
FXP_CSR_SCB_GENERAL
, 
	`vtÝhys
(sc->
fxp_¡©s
));

1699 
	`fxp_scb_cmd
(
sc
, 
FXP_SCB_COMMAND_CU_DUMP_ADR
);

1706 
cbp
 = (
fxp_cb_cÚfig
 *è
sc
->
cbl_ba£
;

1707 
	`DBGLVL_PRINTK
(5,"fxp_: cb°ð0x%x\n",
cbp
);

1714 
	`memýy
Ð(*)(
u_t32_t
*)(vÞ©*)&
cbp
->
cb_¡©us
,

1715 
fxp_cb_cÚfig_m¶©e
,

1716 (
fxp_cb_cÚfig_m¶©e
));

1718 
cbp
->
cb_¡©us
 = 0;

1719 
cbp
->
cb_commªd
 = 
FXP_CB_COMMAND_CONFIG
 | 
FXP_CB_COMMAND_EL
;

1720 
cbp
->
lk_addr
 = -1;

1721 
cbp
->
by_couÁ
 = 22;

1722 
cbp
->
rx_fifo_lim
 = 8;

1723 
cbp
->
tx_fifo_lim
 = 0;

1724 
cbp
->
ad­tive_ifs
 = 0;

1725 
cbp
->
mwi_abË
 = 
sc
->
æags
 & 
FXP_FLAG_MWI_ENABLE
 ? 1 : 0;

1726 
cbp
->
ty³_abË
 = 0;

1727 
cbp
->
»ad_®ign_
 = 
sc
->
æags
 & 
FXP_FLAG_READ_ALIGN
 ? 1 : 0;

1728 
cbp
->
d_wr_Ú_þ
 = 
sc
->
æags
 & 
FXP_FLAG_WRITE_ALIGN
 ? 1 : 0;

1729 
cbp
->
rx_dma_bycouÁ
 = 0;

1730 
cbp
->
tx_dma_bycouÁ
 = 0;

1731 
cbp
->
dma_mbû
 = 0;

1732 
cbp
->
Ï_scb
 = 0;

1733 
cbp
->
deù_dma_dis
 = 1;

1734 
cbp
->
o_t_Ü_tco_
 =0;

1735 
cbp
->
ci_t
 = 1;

1736 
cbp
->
ext_txcb_dis
 = 
sc
->
æags
 & 
FXP_FLAG_EXT_TXCB
 ? 0 : 1;

1737 
cbp
->
ext_¡©s_dis
 = 1;

1738 
cbp
->
kp_ovrun_rx
 = 0;

1739 
cbp
->
§ve_bf
 = 
sc
->
ch
 =ð
FXP_CHIP_82557
 ? 1 : 
´m
;

1740 
cbp
->
disc_shÜt_rx
 = !
´m
;

1741 
cbp
->
undrun_»y
 = 1;

1742 
cbp
->
two_äames
 = 0;

1743 
cbp
->
dyn_tbd
 = 0;

1744 
cbp
->
medty³
 = 
sc
->
æags
 & 
FXP_FLAG_SERIAL_MEDIA
 ? 0 : 1;

1745 
cbp
->
csma_dis
 = 0;

1746 
cbp
->
tý_udp_cksum
 = 0;

1747 
cbp
->
vÏn_tco
 = 0;

1748 
cbp
->
lk_wake_
 = 0;

1749 
cbp
->
¬p_wake_
 = 0;

1750 
cbp
->
mc_wake_
 = 0;

1751 
cbp
->
n§i
 = 1;

1752 
cbp
->
´mbË_Ëngth
 = 2;

1753 
cbp
->
loÝback
 = 0;

1754 
cbp
->
lr_´iÜy
 = 0;

1755 
cbp
->
lr_´i_mode
 = 0;

1756 
cbp
->
räm_¥acg
 = 6;

1757 
cbp
->
´omiscuous
 = 
´m
;

1758 
cbp
->
bÿ¡_di§bË
 = 0;

1759 
cbp
->
wa_aá_w
 = 0;

1760 
cbp
->
ignÜe_ul
 = 0;

1761 
cbp
->
üc16_
 = 0;

1762 
cbp
->
üscdt
 = 
sc
->
æags
 & 
FXP_FLAG_SERIAL_MEDIA
 ? 1 : 0;

1764 
cbp
->
¡rpg
 = !
´m
;

1765 
cbp
->
·ddg
 = 1;

1766 
cbp
->
rcv_üc_xãr
 = 0;

1767 
cbp
->
lÚg_rx_
 = 
sc
->
æags
 & 
FXP_FLAG_LONG_PKT_EN
 ? 1 : 0;

1768 
cbp
->
_wake_
 = 0;

1769 
cbp
->
magic_pkt_dis
 = 0;

1771 
cbp
->
fÜû_fdx
 = 0;

1772 
cbp
->
fdx_p_
 = 1;

1773 
cbp
->
muÉi_
 = 0;

1774 
cbp
->
mc_®l
 = 
sc
->
æags
 & 
FXP_FLAG_ALL_MCAST
 ? 1 : 0;

1776 
	`DBGLVL_PRINTK
(5,"fxp_init: cbp initialized\n");

1777 ià(
sc
->
ch
 =ð
FXP_CHIP_82557
) {

1782 
cbp
->
fc_day_lsb
 = 0;

1783 
cbp
->
fc_day_msb
 = 0x40;

1784 
cbp
->
´i_fc_th»sh
 = 3;

1785 
cbp
->
tx_fc_dis
 = 0;

1786 
cbp
->
rx_fc_»¡Ý
 = 0;

1787 
cbp
->
rx_fc_»¡¬t
 = 0;

1788 
cbp
->
fc_fr
 = 0;

1789 
cbp
->
´i_fc_loc
 = 1;

1791 
cbp
->
fc_day_lsb
 = 0x1f;

1792 
cbp
->
fc_day_msb
 = 0x01;

1793 
cbp
->
´i_fc_th»sh
 = 3;

1794 
cbp
->
tx_fc_dis
 = 0;

1795 
cbp
->
rx_fc_»¡Ý
 = 1;

1796 
cbp
->
rx_fc_»¡¬t
 = 1;

1797 
cbp
->
fc_fr
 = !
´m
;

1798 
cbp
->
´i_fc_loc
 = 1;

1804 
	`DBGLVL_PRINTK
(5,"fxp_init: starting config command/DMA\n");

1805 
	`fxp_scb_wa
(
sc
);

1806 
	`CSR_WRITE_4
(
sc
, 
FXP_CSR_SCB_GENERAL
, 
	`vtÝhys
(&
cbp
->
cb_¡©us
));

1807 
	`fxp_scb_cmd
(
sc
, 
FXP_SCB_COMMAND_CU_START
);

1809 
	`fxp_dma_wa
(&
cbp
->
cb_¡©us
, 
sc
);

1815 
	`DBGLVL_PRINTK
(5,"fxp_init: initialize stationddress\n");

1816 
cb_s
 = (
fxp_cb_s
 *è
sc
->
cbl_ba£
;

1817 
cb_s
->
cb_¡©us
 = 0;

1818 
cb_s
->
cb_commªd
 = 
FXP_CB_COMMAND_IAS
 | 
FXP_CB_COMMAND_EL
;

1819 
cb_s
->
lk_addr
 = -1;

1820 
	`memýy
((*)(
u_t32_t
*)(vÞ©*)
cb_s
->
maÿddr
,

1821 
sc
->
¬pcom
.
ac_addr
,

1822 (
sc
->
¬pcom
.
ac_addr
));

1827 
	`DBGLVL_PRINTK
(5,"fxp_init: start IAS command/DMA\n");

1828 
	`fxp_scb_wa
(
sc
);

1829 
	`fxp_scb_cmd
(
sc
, 
FXP_SCB_COMMAND_CU_START
);

1831 
	`fxp_dma_wa
(&
cb_s
->
cb_¡©us
, 
sc
);

1837 
	`DBGLVL_PRINTK
(5,"fxp_init: initialize TxCBist\n");

1838 
txp
 = 
sc
->
cbl_ba£
;

1839 
	`mem£t
(
txp
, 0, (
fxp_cb_tx
è* 
FXP_NTXCB
);

1840 
i
 = 0; i < 
FXP_NTXCB
; i++) {

1841 
txp
[
i
].
cb_¡©us
 = 
FXP_CB_STATUS_C
 | 
FXP_CB_STATUS_OK
;

1842 
txp
[
i
].
cb_commªd
 = 
FXP_CB_COMMAND_NOP
;

1843 
txp
[
i
].
lk_addr
 =

1844 
	`vtÝhys
(&
txp
[(
i
 + 1è& 
FXP_TXCB_MASK
].
cb_¡©us
);

1845 ià(
sc
->
æags
 & 
FXP_FLAG_EXT_TXCB
)

1846 
txp
[
i
].
tbd_¬¿y_addr
 = 
	`vtÝhys
(&txp[i].
tbd
[2]);

1848 
txp
[
i
].
tbd_¬¿y_addr
 = 
	`vtÝhys
(&txp[i].
tbd
[0]);

1849 
txp
[
i
].
Ãxt
 = &txp[(+ 1è& 
FXP_TXCB_MASK
];

1855 
	`DBGLVL_PRINTK
(5,"fxp_init: setup suspend flag\n");

1856 
txp
->
cb_commªd
 = 
FXP_CB_COMMAND_NOP
 | 
FXP_CB_COMMAND_S
;

1857 
sc
->
cbl_f¡
 = sc->
cbl_Ï¡
 = 
txp
;

1858 
sc
->
tx_queued
 = 1;

1860 
	`fxp_scb_wa
(
sc
);

1861 
	`fxp_scb_cmd
(
sc
, 
FXP_SCB_COMMAND_CU_START
);

1866 
	`DBGLVL_PRINTK
(5,"fxp_init: initialize RFA\n");

1867 
	`fxp_scb_wa
(
sc
);

1868 
	`CSR_WRITE_4
(
sc
, 
FXP_CSR_SCB_GENERAL
,

1869 
	`vtÝhys
(
sc
->
rç_hdm
->
m_ext
.
ext_buf
è+ 
RFA_ALIGNMENT_FUDGE
);

1870 
	`fxp_scb_cmd
(
sc
, 
FXP_SCB_COMMAND_RU_START
);

1872 #ifdeà
NOTUSED


1876 ià(
sc
->
miibus
 !ð
NULL
)

1877 
	`mii_medchg
(
	`deviû_g_soác
(
sc
->
miibus
));

1880 
iå
->
if_æags
 |ð
IFF_RUNNING
;

1881 
iå
->
if_æags
 &ð~
IFF_OACTIVE
;

1883 ià(
sc
->
d«mÚTid
 == 0) {

1887 
sc
->
d«mÚTid
 = 
	`¹ems_bsdÃt_Ãw´oc
 ("FXPd", 4096, 
fxp_d«mÚ
, sc);

1892 
sc
->
qInfo
.
hdl
 = (
¹ems_q_hdl
)
fxp_
;

1893 
sc
->
qInfo
.
Ú
 = 
nÝOn
;

1894 
sc
->
qInfo
.
off
 = 
nÝOn
;

1895 
sc
->
qInfo
.
isOn
 = 
fxpIsOn
;

1896 
rv
 = 
	`BSP_¡®l_¹ems_q_hªdËr
 (&
sc
->
qInfo
);

1897 ià(
rv
 != 1) {

1898 
	`¹ems_·nic
 ("Can'tttach fxp interrupt handler for irq %d\n",

1899 
sc
->
qInfo
.
Çme
);

1906 
	`CSR_WRITE_1
(
sc
, 
FXP_CSR_SCB_INTRCNTL
, 0);

1907 
	`¥lx
(
s
);

1912 
sc
->
¡©_ch
 = 
fxp_timeout_ruÂg
;

1913 
	`DBGLVL_PRINTK
(2,"fxp_: st upd©imeouÿÎed wh hz=%d\n", 
hz
);

1914 
	`timeout
(
fxp_tick
, 
sc
, 
hz
);

1915 
	`DBGLVL_PRINTK
(2,"fxp_init finished\n");

1916 
	}
}

1918 #ifdeà
NOTUSED


1920 
	$fxp_£rl_ifmed_upd
(
iâ
 *
iå
)

1924 
	}
}

1927 
	$fxp_£rl_ifmed_¡s
(
iâ
 *
iå
, 
ifmed»q
 *
ifmr
)

1930 
ifmr
->
ifm_aùive
 = 
IFM_ETHER
|
IFM_MANUAL
;

1931 
	}
}

1937 
	$fxp_ifmed_upd
(
iâ
 *
iå
)

1939 
fxp_soác
 *
sc
 = 
iå
->
if_soác
;

1940 
mii_d©a
 *
mii
;

1942 
mii
 = 
	`deviû_g_soác
(
sc
->
miibus
);

1943 
	`mii_medchg
(
mii
);

1945 
	}
}

1951 
	$fxp_ifmed_¡s
(
iâ
 *
iå
, 
ifmed»q
 *
ifmr
)

1953 
fxp_soác
 *
sc
 = 
iå
->
if_soác
;

1954 
mii_d©a
 *
mii
;

1956 
mii
 = 
	`deviû_g_soác
(
sc
->
miibus
);

1957 
	`mii_pÞl¡©
(
mii
);

1958 
ifmr
->
ifm_aùive
 = 
mii
->
mii_med_aùive
;

1959 
ifmr
->
ifm_¡©us
 = 
mii
->
mii_med_¡©us
;

1961 ià(
ifmr
->
ifm_¡©us
 & 
IFM_10_T
 && 
sc
->
æags
 & 
FXP_FLAG_CU_RESUME_BUG
)

1962 
sc
->
cu_»sume_bug
 = 1;

1964 
sc
->
cu_»sume_bug
 = 0;

1965 
	}
}

1977 
	$fxp_add_rçbuf
(
fxp_soác
 *
sc
, 
mbuf
 *
Þdm
)

1979 
u_t32_t
 
v
;

1980 
mbuf
 *
m
;

1981 
fxp_rç
 *
rç
, *
p_rç
;

1983 
	`DBGLVL_PRINTK
(4,"fxp_add_rfabuf called\n");

1985 
	`MGETHDR
(
m
, 
M_DONTWAIT
, 
MT_DATA
);

1986 ià(
m
 !ð
NULL
) {

1987 
	`MCLGET
(
m
, 
M_DONTWAIT
);

1988 ià((
m
->
m_æags
 & 
M_EXT
) == 0) {

1989 
	`m_äm
(
m
);

1990 ià(
Þdm
 =ð
NULL
)

1992 
m
 = 
Þdm
;

1993 
m
->
m_d©a
 = m->
m_ext
.
ext_buf
;

1996 ià(
Þdm
 =ð
NULL
)

1998 
m
 = 
Þdm
;

1999 
m
->
m_d©a
 = m->
m_ext
.
ext_buf
;

2006 
m
->
m_d©a
 +ð
RFA_ALIGNMENT_FUDGE
;

2012 
rç
 = 
	`mtod
(
m
, 
fxp_rç
 *);

2013 
m
->
m_d©a
 +ð(
fxp_rç
);

2014 
rç
->
size
 = (
u_t16_t
)(
MCLBYTES
 - (
fxp_rç
è- 
RFA_ALIGNMENT_FUDGE
);

2022 
rç
->
rç_¡©us
 = 0;

2023 
rç
->
rç_cÚÞ
 = 
FXP_RFA_CONTROL_EL
;

2024 
rç
->
aùu®_size
 = 0;

2026 
v
 = -1;

2027 
	`fxp_lwcÝy
(&
v
, (vÞ©
u_t32_t
*è
rç
->
lk_addr
);

2028 
	`fxp_lwcÝy
(&
v
, (vÞ©
u_t32_t
*è
rç
->
rbd_addr
);

2034 ià(
sc
->
rç_hdm
 !ð
NULL
) {

2035 
p_rç
 = (
fxp_rç
 *è(
sc
->
rç_m
->
m_ext
.
ext_buf
 +

2036 
RFA_ALIGNMENT_FUDGE
);

2037 
sc
->
rç_m
->
m_Ãxt
 = 
m
;

2038 
v
 = 
	`vtÝhys
(
rç
);

2039 
	`fxp_lwcÝy
(&
v
, (vÞ©
u_t32_t
*è
p_rç
->
lk_addr
);

2040 
p_rç
->
rç_cÚÞ
 = 0;

2042 
sc
->
rç_hdm
 = 
m
;

2044 
sc
->
rç_m
 = 
m
;

2046  (
m
 =ð
Þdm
);

2047 
	}
}

2049 #ifdeà
NOTUSED


2051 
	$fxp_miibus_»ad»g
(
deviû_t
 
dev
, 
phy
, 
»g
)

2053 
fxp_soác
 *
sc
 = 
	`deviû_g_soác
(
dev
);

2054 
couÁ
 = 10000;

2055 
v®ue
;

2057 
	`CSR_WRITE_4
(
sc
, 
FXP_CSR_MDICONTROL
,

2058 (
FXP_MDI_READ
 << 26è| (
»g
 << 16è| (
phy
 << 21));

2060 ((
v®ue
 = 
	`CSR_READ_4
(
sc
, 
FXP_CSR_MDICONTROL
)) & 0x10000000) == 0

2061 && 
couÁ
--)

2062 
	`DELAY
(10);

2064 ià(
couÁ
 <= 0)

2065 
	`deviû_´tf
(
dev
, "fxp_miibus_readreg:imed out\n");

2067  (
v®ue
 & 0xffff);

2068 
	}
}

2071 
	$fxp_miibus_wreg
(
deviû_t
 
dev
, 
phy
, 
»g
, 
v®ue
)

2073 
fxp_soác
 *
sc
 = 
	`deviû_g_soác
(
dev
);

2074 
couÁ
 = 10000;

2076 
	`CSR_WRITE_4
(
sc
, 
FXP_CSR_MDICONTROL
,

2077 (
FXP_MDI_WRITE
 << 26è| (
»g
 << 16è| (
phy
 << 21) |

2078 (
v®ue
 & 0xffff));

2080 (
	`CSR_READ_4
(
sc
, 
FXP_CSR_MDICONTROL
) & 0x10000000) == 0 &&

2081 
couÁ
--)

2082 
	`DELAY
(10);

2084 ià(
couÁ
 <= 0)

2085 
	`deviû_´tf
(
dev
, "fxp_miibus_writereg:imed out\n");

2086 
	}
}

2090 
	$fxp_ioùl
(
iâ
 *
iå
, 
ioùl_commªd_t
 
commªd
, 
ÿddr_t
 
d©a
)

2092 
fxp_soác
 *
sc
 = 
iå
->
if_soác
;

2093 #ifdeà
NOTUSED


2094 
iäeq
 *
iä
 = (iäeq *)
d©a
;

2095 
mii_d©a
 *
mii
;

2097 
s
, 
rÜ
 = 0;

2099 
	`DBGLVL_PRINTK
(2,"fxp_ioctl called\n");

2101 
s
 = 
	`¥limp
();

2103 
commªd
) {

2104 
SIOCSIFADDR
:

2105 
SIOCGIFADDR
:

2106 
SIOCSIFMTU
:

2107 
rÜ
 = 
	`h_ioùl
(
iå
, 
commªd
, 
d©a
);

2110 
SIOCSIFFLAGS
:

2111 ià(
iå
->
if_æags
 & 
IFF_ALLMULTI
)

2112 
sc
->
æags
 |ð
FXP_FLAG_ALL_MCAST
;

2114 
sc
->
æags
 &ð~
FXP_FLAG_ALL_MCAST
;

2122 ià(
iå
->
if_æags
 & 
IFF_UP
) {

2123 
	`fxp_
(
sc
);

2125 ià(
iå
->
if_æags
 & 
IFF_RUNNING
)

2126 
	`fxp_¡Ý
(
sc
);

2130 
SIOCADDMULTI
:

2131 
SIOCDELMULTI
:

2132 ià(
iå
->
if_æags
 & 
IFF_ALLMULTI
)

2133 
sc
->
æags
 |ð
FXP_FLAG_ALL_MCAST
;

2135 
sc
->
æags
 &ð~
FXP_FLAG_ALL_MCAST
;

2140 ià((
sc
->
æags
 & 
FXP_FLAG_ALL_MCAST
) == 0)

2141 
	`fxp_mc_£tup
(
sc
);

2146 ià(
sc
->
æags
 & 
FXP_FLAG_ALL_MCAST
)

2147 
	`fxp_
(
sc
);

2148 
rÜ
 = 0;

2151 #ifdeà
NOTUSED


2152 
SIOCSIFMEDIA
:

2153 
SIOCGIFMEDIA
:

2154 ià(
sc
->
miibus
 !ð
NULL
) {

2155 
mii
 = 
	`deviû_g_soác
(
sc
->
miibus
);

2156 
rÜ
 = 
	`ifmed_ioùl
(
iå
, 
iä
,

2157 &
mii
->
mii_med
, 
commªd
);

2159 
rÜ
 = 
	`ifmed_ioùl
(
iå
, 
iä
, &
sc
->
sc_med
, 
commªd
);

2164 
SIO_RTEMS_SHOW_STATS
:

2165 
	`fxp_¡©s
(
sc
);

2169 
rÜ
 = 
EINVAL
;

2171 
	`¥lx
(
s
);

2172  (
rÜ
);

2173 
	}
}

2190 
	$fxp_mc_£tup
(
fxp_soác
 *
sc
)

2192 
fxp_cb_mcs
 *
mc¥
 = 
sc
->mcsp;

2193 
iâ
 *
iå
 = &
sc
->
sc_if
;

2194 #ifdeà
NOTUSED


2195 
ifmuÉddr
 *
ifma
;

2197 
nmÿ¡s
;

2198 
couÁ
;

2200 
	`DBGLVL_PRINTK
(2,"fxp_mc_setup called\n");

2209 ià(
sc
->
tx_queued
) {

2210 
fxp_cb_tx
 *
txp
;

2216 ià(
sc
->
Ãed_mc£tup
)

2218 
sc
->
Ãed_mc£tup
 = 1;

2224 
txp
 = 
sc
->
cbl_Ï¡
->
Ãxt
;

2225 
txp
->
mb_hd
 = 
NULL
;

2226 
txp
->
cb_¡©us
 = 0;

2227 
txp
->
cb_commªd
 = 
FXP_CB_COMMAND_NOP
 |

2228 
FXP_CB_COMMAND_S
 | 
FXP_CB_COMMAND_I
;

2232 
sc
->
cbl_Ï¡
->
cb_commªd
 &ð~
FXP_CB_COMMAND_S
;

2233 
sc
->
cbl_Ï¡
 = 
txp
;

2234 
sc
->
tx_queued
++;

2238 
	`fxp_scb_wa
(
sc
);

2239 
	`fxp_scb_cmd
(
sc
, 
FXP_SCB_COMMAND_CU_RESUME
);

2244 
iå
->
if_tim
 = 5;

2248 
sc
->
Ãed_mc£tup
 = 0;

2253 
mc¥
->
Ãxt
 = 
sc
->
cbl_ba£
;

2254 
mc¥
->
mb_hd
 = 
NULL
;

2255 
mc¥
->
cb_¡©us
 = 0;

2256 
mc¥
->
cb_commªd
 = 
FXP_CB_COMMAND_MCAS
 |

2257 
FXP_CB_COMMAND_S
 | 
FXP_CB_COMMAND_I
;

2258 
mc¥
->
lk_addr
 = 
	`vtÝhys
(&
sc
->
cbl_ba£
->
cb_¡©us
);

2260 
nmÿ¡s
 = 0;

2261 #ifdeà
NOTUSED


2262 ià((
sc
->
æags
 & 
FXP_FLAG_ALL_MCAST
) == 0) {

2263 #ià
__F»eBSD_vsiÚ
 < 500000

2264 
	`LIST_FOREACH
(
ifma
, &
iå
->
if_muÉddrs
, 
ifma_lk
) {

2266 
	`TAILQ_FOREACH
(
ifma
, &
iå
->
if_muÉddrs
, 
ifma_lk
) {

2268 ià(
ifma
->
ifma_addr
->
§_çmy
 !ð
AF_LINK
)

2270 ià(
nmÿ¡s
 >ð
MAXMCADDR
) {

2271 
sc
->
æags
 |ð
FXP_FLAG_ALL_MCAST
;

2272 
nmÿ¡s
 = 0;

2275 
	`memýy
((*)(
u_t
)(volatile *)

2276 &
sc
->
mc¥
->
mc_addr
[
nmÿ¡s
][0],

2277 
	`LLADDR
((
sockaddr_dl
 *)
ifma
->
ifma_addr
), 6);

2278 
nmÿ¡s
++;

2282 
mc¥
->
mc_út
 = 
nmÿ¡s
 * 6;

2283 
sc
->
cbl_f¡
 = sc->
cbl_Ï¡
 = (
fxp_cb_tx
 *è
mc¥
;

2284 
sc
->
tx_queued
 = 1;

2290 
couÁ
 = 100;

2291 (
	`CSR_READ_1
(
sc
, 
FXP_CSR_SCB_RUSCUS
) >> 6) ==

2292 
FXP_SCB_CUS_ACTIVE
 && --
couÁ
)

2293 
	`DELAY
(10);

2294 ià(
couÁ
 == 0) {

2295 
	`deviû_´tf
(
sc
->
dev
, "command queueimeout\n");

2302 
	`fxp_scb_wa
(
sc
);

2303 
	`CSR_WRITE_4
(
sc
, 
FXP_CSR_SCB_GENERAL
, 
	`vtÝhys
(&
mc¥
->
cb_¡©us
));

2304 
	`fxp_scb_cmd
(
sc
, 
FXP_SCB_COMMAND_CU_START
);

2306 
iå
->
if_tim
 = 2;

2308 
	}
}

	@src/libchip/network/if_fxpreg.h

31 
	#FXP_VENDORID_INTEL
 0x8086

	)

33 
	#FXP_PCI_MMBA
 0x10

	)

34 
	#FXP_PCI_IOBA
 0x14

	)

39 
	#FXP_CSR_SCB_RUSCUS
 0

	)

40 
	#FXP_CSR_SCB_STATACK
 1

	)

41 
	#FXP_CSR_SCB_COMMAND
 2

	)

42 
	#FXP_CSR_SCB_INTRCNTL
 3

	)

43 
	#FXP_CSR_SCB_GENERAL
 4

	)

44 
	#FXP_CSR_PORT
 8

	)

45 
	#FXP_CSR_FLASHCONTROL
 12

	)

46 
	#FXP_CSR_EEPROMCONTROL
 14

	)

47 
	#FXP_CSR_MDICONTROL
 16

	)

48 
	#FXP_CSR_FLOWCONTROL
 0x19

	)

49 
	#FXP_CSR_GENCONTROL
 0x1C

	)

59 
	#FXP_PORT_SOFTWARE_RESET
 0

	)

60 
	#FXP_PORT_SELFTEST
 1

	)

61 
	#FXP_PORT_SELECTIVE_RESET
 2

	)

62 
	#FXP_PORT_DUMP
 3

	)

64 
	#FXP_SCB_RUS_IDLE
 0

	)

65 
	#FXP_SCB_RUS_SUSPENDED
 1

	)

66 
	#FXP_SCB_RUS_NORESOURCES
 2

	)

67 
	#FXP_SCB_RUS_READY
 4

	)

68 
	#FXP_SCB_RUS_SUSP_NORBDS
 9

	)

69 
	#FXP_SCB_RUS_NORES_NORBDS
 10

	)

70 
	#FXP_SCB_RUS_READY_NORBDS
 12

	)

72 
	#FXP_SCB_CUS_IDLE
 0

	)

73 
	#FXP_SCB_CUS_SUSPENDED
 1

	)

74 
	#FXP_SCB_CUS_ACTIVE
 2

	)

76 
	#FXP_SCB_INTR_DISABLE
 0x01

	)

77 
	#FXP_SCB_INTR_SWI
 0x02

	)

78 
	#FXP_SCB_INTMASK_FCP
 0x04

	)

79 
	#FXP_SCB_INTMASK_ER
 0x08

	)

80 
	#FXP_SCB_INTMASK_RNR
 0x10

	)

81 
	#FXP_SCB_INTMASK_CNA
 0x20

	)

82 
	#FXP_SCB_INTMASK_FR
 0x40

	)

83 
	#FXP_SCB_INTMASK_CXTNO
 0x80

	)

85 
	#FXP_SCB_STATACK_FCP
 0x01

	)

86 
	#FXP_SCB_STATACK_ER
 0x02

	)

87 
	#FXP_SCB_STATACK_SWI
 0x04

	)

88 
	#FXP_SCB_STATACK_MDI
 0x08

	)

89 
	#FXP_SCB_STATACK_RNR
 0x10

	)

90 
	#FXP_SCB_STATACK_CNA
 0x20

	)

91 
	#FXP_SCB_STATACK_FR
 0x40

	)

92 
	#FXP_SCB_STATACK_CXTNO
 0x80

	)

94 
	#FXP_SCB_COMMAND_CU_NOP
 0x00

	)

95 
	#FXP_SCB_COMMAND_CU_START
 0x10

	)

96 
	#FXP_SCB_COMMAND_CU_RESUME
 0x20

	)

97 
	#FXP_SCB_COMMAND_CU_DUMP_ADR
 0x40

	)

98 
	#FXP_SCB_COMMAND_CU_DUMP
 0x50

	)

99 
	#FXP_SCB_COMMAND_CU_BASE
 0x60

	)

100 
	#FXP_SCB_COMMAND_CU_DUMPRESET
 0x70

	)

102 
	#FXP_SCB_COMMAND_RU_NOP
 0

	)

103 
	#FXP_SCB_COMMAND_RU_START
 1

	)

104 
	#FXP_SCB_COMMAND_RU_RESUME
 2

	)

105 
	#FXP_SCB_COMMAND_RU_ABORT
 4

	)

106 
	#FXP_SCB_COMMAND_RU_LOADHDS
 5

	)

107 
	#FXP_SCB_COMMAND_RU_BASE
 6

	)

108 
	#FXP_SCB_COMMAND_RU_RBDRESUME
 7

	)

113 
	sfxp_cb_nÝ
 {

114 *
	mfl
[2];

115 vÞ©
u_t16_t
 
	mcb_¡©us
;

116 vÞ©
u_t16_t
 
	mcb_commªd
;

117 vÞ©
u_t32_t
 
	mlk_addr
;

119 
	sfxp_cb_s
 {

120 *
	mfl
[2];

121 vÞ©
u_t16_t
 
	mcb_¡©us
;

122 vÞ©
u_t16_t
 
	mcb_commªd
;

123 vÞ©
u_t32_t
 
	mlk_addr
;

124 vÞ©
u_t8_t
 
	mmaÿddr
[6];

127 
	sfxp_cb_cÚfig
 {

128 *
	mfl
[2];

129 vÞ©
u_t16_t
 
	mcb_¡©us
;

130 vÞ©
u_t16_t
 
	mcb_commªd
;

131 vÞ©
u_t32_t
 
	mlk_addr
;

132 vÞ©
u_t
 
	mby_couÁ
:6,

134 vÞ©
u_t
 
	mrx_fifo_lim
:4,

135 
	mtx_fifo_lim
:3,

137 vÞ©
u_t8_t
 
	mad­tive_ifs
;

138 vÞ©
u_t
 
	mmwi_abË
:1,

139 
	mty³_abË
:1,

140 
	m»ad_®ign_
:1,

141 
	md_wr_Ú_þ
:1,

143 vÞ©
u_t
 
	mrx_dma_bycouÁ
:7,

145 vÞ©
u_t
 
	mtx_dma_bycouÁ
:7,

146 
	mdma_mbû
:1;

147 vÞ©
u_t
 
	mÏ_scb
:1,

148 
	mdeù_dma_dis
:1,

149 
	mo_t_Ü_tco_
:1,

150 
	mci_t
:1,

151 
	mext_txcb_dis
:1,

152 
	mext_¡©s_dis
:1,

153 
	mkp_ovrun_rx
:1,

154 
	m§ve_bf
:1;

155 vÞ©
u_t
 
	mdisc_shÜt_rx
:1,

156 
	mundrun_»y
:2,

158 
	mtwo_äames
:1,

159 
	mdyn_tbd
:1;

160 vÞ©
u_t
 
	mmedty³
:1,

162 
	mcsma_dis
:1;

163 vÞ©
u_t
 
	mtý_udp_cksum
:1,

165 
	mvÏn_tco
:1,

166 
	mlk_wake_
:1,

167 
	m¬p_wake_
:1,

168 
	mmc_wake_
:1;

169 vÞ©
	mu_t
 :3,

170 
	mn§i
:1,

171 
	m´mbË_Ëngth
:2,

172 
	mloÝback
:2;

173 vÞ©
u_t
 
	mlr_´iÜy
:3,

175 vÞ©
u_t
 
	mlr_´i_mode
:1,

177 
	mräm_¥acg
:4;

178 vÞ©
	mu_t
 :8;

179 vÞ©
	mu_t
 :8;

180 vÞ©
u_t
 
	m´omiscuous
:1,

181 
	mbÿ¡_di§bË
:1,

182 
	mwa_aá_w
:1,

184 
	mignÜe_ul
:1,

185 
	müc16_
:1,

187 
	müscdt
:1;

188 vÞ©
u_t
 
	mfc_day_lsb
:8;

189 vÞ©
u_t
 
	mfc_day_msb
:8;

190 vÞ©
u_t
 
	m¡rpg
:1,

191 
	m·ddg
:1,

192 
	mrcv_üc_xãr
:1,

193 
	mlÚg_rx_
:1,

194 
	m´i_fc_th»sh
:3,

196 vÞ©
u_t
 
	m_wake_
:1,

197 
	mmagic_pkt_dis
:1,

198 
	mtx_fc_dis
:1,

199 
	mrx_fc_»¡Ý
:1,

200 
	mrx_fc_»¡¬t
:1,

201 
	mfc_fr
:1,

202 
	mfÜû_fdx
:1,

203 
	mfdx_p_
:1;

204 vÞ©
	mu_t
 :5,

205 
	m´i_fc_loc
:1,

206 
	mmuÉi_
:1,

208 vÞ©
	mu_t
 :3,

209 
	mmc_®l
:1,

213 
	#MAXMCADDR
 80

	)

214 
	sfxp_cb_mcs
 {

215 
fxp_cb_tx
 *
	mÃxt
;

216 
mbuf
 *
	mmb_hd
;

217 vÞ©
u_t16_t
 
	mcb_¡©us
;

218 vÞ©
u_t16_t
 
	mcb_commªd
;

219 vÞ©
u_t32_t
 
	mlk_addr
;

220 vÞ©
u_t16_t
 
	mmc_út
;

221 vÞ©
u_t8_t
 
	mmc_addr
[
MAXMCADDR
][6];

231 #ifdeà
__®pha__


232 
	#FXP_NTXSEG
 28

	)

234 
	#FXP_NTXSEG
 29

	)

237 
	sfxp_tbd
 {

238 vÞ©
u_t32_t
 
	mtb_addr
;

239 vÞ©
u_t32_t
 
	mtb_size
;

241 
	sfxp_cb_tx
 {

242 
fxp_cb_tx
 *
	mÃxt
;

243 
mbuf
 *
	mmb_hd
;

244 vÞ©
u_t16_t
 
	mcb_¡©us
;

245 vÞ©
u_t16_t
 
	mcb_commªd
;

246 vÞ©
u_t32_t
 
	mlk_addr
;

247 vÞ©
u_t32_t
 
	mtbd_¬¿y_addr
;

248 vÞ©
u_t16_t
 
	mby_couÁ
;

249 vÞ©
u_t8_t
 
	mtx_th»shÞd
;

250 vÞ©
u_t8_t
 
	mtbd_numb
;

257 vÞ©
fxp_tbd
 
	mtbd
[
FXP_NTXSEG
];

265 
	#FXP_CB_STATUS_OK
 0x2000

	)

266 
	#FXP_CB_STATUS_C
 0x8000

	)

268 
	#FXP_CB_COMMAND_NOP
 0x0

	)

269 
	#FXP_CB_COMMAND_IAS
 0x1

	)

270 
	#FXP_CB_COMMAND_CONFIG
 0x2

	)

271 
	#FXP_CB_COMMAND_MCAS
 0x3

	)

272 
	#FXP_CB_COMMAND_XMIT
 0x4

	)

273 
	#FXP_CB_COMMAND_RESRV
 0x5

	)

274 
	#FXP_CB_COMMAND_DUMP
 0x6

	)

275 
	#FXP_CB_COMMAND_DIAG
 0x7

	)

277 
	#FXP_CB_COMMAND_SF
 0x0008

	)

278 
	#FXP_CB_COMMAND_I
 0x2000

	)

279 
	#FXP_CB_COMMAND_S
 0x4000

	)

280 
	#FXP_CB_COMMAND_EL
 0x8000

	)

286 
	sfxp_rç
 {

287 vÞ©
u_t16_t
 
	mrç_¡©us
;

288 vÞ©
u_t16_t
 
	mrç_cÚÞ
;

289 vÞ©
u_t8_t
 
	mlk_addr
[4];

290 vÞ©
u_t8_t
 
	mrbd_addr
[4];

291 vÞ©
u_t16_t
 
	maùu®_size
;

292 vÞ©
u_t16_t
 
	msize
;

294 
	#FXP_RFA_STATUS_RCOL
 0x0001

	)

295 
	#FXP_RFA_STATUS_IAMATCH
 0x0002

	)

296 
	#FXP_RFA_STATUS_S4
 0x0010

	)

297 
	#FXP_RFA_STATUS_TL
 0x0020

	)

298 
	#FXP_RFA_STATUS_FTS
 0x0080

	)

299 
	#FXP_RFA_STATUS_OVERRUN
 0x0100

	)

300 
	#FXP_RFA_STATUS_RNR
 0x0200

	)

301 
	#FXP_RFA_STATUS_ALIGN
 0x0400

	)

302 
	#FXP_RFA_STATUS_CRC
 0x0800

	)

303 
	#FXP_RFA_STATUS_OK
 0x2000

	)

304 
	#FXP_RFA_STATUS_C
 0x8000

	)

305 
	#FXP_RFA_CONTROL_SF
 0x08

	)

306 
	#FXP_RFA_CONTROL_H
 0x10

	)

307 
	#FXP_RFA_CONTROL_S
 0x4000

	)

308 
	#FXP_RFA_CONTROL_EL
 0x8000

	)

313 
	sfxp_¡©s
 {

314 vÞ©
u_t32_t
 
	mtx_good
;

315 vÞ©
u_t32_t
 
	mtx_maxcÞs
;

316 vÞ©
u_t32_t
 
	mtx_ÏcÞs
;

317 vÞ©
u_t32_t
 
	mtx_undruns
;

318 vÞ©
u_t32_t
 
	mtx_lo¡üs
;

319 vÞ©
u_t32_t
 
	mtx_defã»d
;

320 vÞ©
u_t32_t
 
	mtx_sgË_cÞlisiÚs
;

321 vÞ©
u_t32_t
 
	mtx_muÉË_cÞlisiÚs
;

322 vÞ©
u_t32_t
 
	mtx_tÙ®_cÞlisiÚs
;

323 vÞ©
u_t32_t
 
	mrx_good
;

324 vÞ©
u_t32_t
 
	mrx_üc_rÜs
;

325 vÞ©
u_t32_t
 
	mrx_®ignmt_rÜs
;

326 vÞ©
u_t32_t
 
	mrx_ºr_rÜs
;

327 vÞ©
u_t32_t
 
	mrx_ovrun_rÜs
;

328 vÞ©
u_t32_t
 
	mrx_cdt_rÜs
;

329 vÞ©
u_t32_t
 
	mrx_shÜtäames
;

330 vÞ©
u_t32_t
 
	mcom¶iÚ_¡©us
;

332 
	#FXP_STATS_DUMP_COMPLETE
 0xa005

	)

333 
	#FXP_STATS_DR_COMPLETE
 0xa007

	)

338 
	#FXP_EEPROM_EESK
 0x01

	)

339 
	#FXP_EEPROM_EECS
 0x02

	)

340 
	#FXP_EEPROM_EEDI
 0x04

	)

341 
	#FXP_EEPROM_EEDO
 0x08

	)

346 
	#FXP_EEPROM_OPC_ERASE
 0x4

	)

347 
	#FXP_EEPROM_OPC_WRITE
 0x5

	)

348 
	#FXP_EEPROM_OPC_READ
 0x6

	)

353 
	#FXP_MDI_WRITE
 0x1

	)

354 
	#FXP_MDI_READ
 0x2

	)

359 
	#FXP_PHY_DEVICE_MASK
 0x3f00

	)

360 
	#FXP_PHY_SERIAL_ONLY
 0x8000

	)

361 
	#FXP_PHY_NONE
 0

	)

362 
	#FXP_PHY_82553A
 1

	)

363 
	#FXP_PHY_82553C
 2

	)

364 
	#FXP_PHY_82503
 3

	)

365 
	#FXP_PHY_DP83840
 4

	)

366 
	#FXP_PHY_80C240
 5

	)

367 
	#FXP_PHY_80C24
 6

	)

368 
	#FXP_PHY_82555
 7

	)

369 
	#FXP_PHY_DP83840A
 10

	)

370 
	#FXP_PHY_82555B
 11

	)

	@src/libchip/network/if_fxpvar.h

40 
	#FXP_NTXCB
 128

	)

49 
	#FXP_CXINT_THRESH
 120

	)

54 
	#FXP_TXCB_MASK
 (
FXP_NTXCB
 - 1)

	)

61 
	#FXP_NRFABUFS
 64

	)

63 
	#FXP_NRFABUFS
 16

	)

71 
	#FXP_MAX_RX_IDLE
 15

	)

73 #ià
__F»eBSD_vsiÚ
 < 500000

74 
	#FXP_LOCK
(
_sc
)

	)

75 
	#FXP_UNLOCK
(
_sc
)

	)

76 
	#mtx_
(
a
, 
b
, 
c
)

	)

77 
	#mtx_de¡roy
(
a
)

	)

78 
	smtx
 { 
	mdummy
; };

80 
	#FXP_LOCK
(
_sc
è
	`mtx_lock
(&(_sc)->
sc_mtx
)

	)

81 
	#FXP_UNLOCK
(
_sc
è
	`mtx_uÆock
(&(_sc)->
sc_mtx
)

	)

84 #ifdeà
__®pha__


85 #undeà
vtÝhys


86 
	#vtÝhys
(
va
è
	`®pha_XXX_dmam­
((
vm_off£t_t
)(va))

	)

93 
	sfxp_soác
 {

94 
¬pcom
 
	m¬pcom
;

95 #ifdeà
NOTUSED


96 
»sourû
 *
	mmem
;

97 
	m¹p
;

98 
	mrgd
;

99 
»sourû
 *
	mq
;

101 *
	mih
;

102 
mtx
 
	msc_mtx
;

103 #ifdeà
NOTUSED


104 
bus_¥aû_g_t
 
	msc_¡
;

105 
bus_¥aû_hªdË_t
 
	msc_sh
;

107 
	mpci_sigÇtu»
;

108 
boÞ
 
	mpci_»gs_¬e_io
;

109 
u_t32_t
 
	mpci_»gs_ba£
;

110 
¹ems_id
 
	md«mÚTid
;

111 
¹ems_q_cÚÃù_d©a
 
	mqInfo
;

114 
mbuf
 *
	mrç_hdm
;

115 
mbuf
 *
	mrç_m
;

116 
fxp_cb_tx
 *
	mcbl_f¡
;

117 
	mtx_queued
;

118 
	mÃed_mc£tup
;

119 
fxp_cb_tx
 *
	mcbl_Ï¡
;

120 
fxp_¡©s
 *
	mfxp_¡©s
;

121 
	mrx_idË_£cs
;

122 um {
	mfxp_timeout_¡Ý³d
,
	mfxp_timeout_ruÂg
,
	mfxp_timeout_¡Ý_rq
}

123 
	m¡©_ch
;

124 
fxp_cb_tx
 *
	mcbl_ba£
;

125 
fxp_cb_mcs
 *
	mmc¥
;

126 #ifdeà
NOTUSED


127 
ifmed
 
	msc_med
;

128 
deviû_t
 
	mmiibus
;

129 
deviû_t
 
	mdev
;

131 
	m´om_size
;

132 
	msu¥ded
;

133 
	mcu_»sume_bug
;

134 
	mch
;

135 
	mæags
;

136 
u_t32_t
 
	m§ved_m­s
[5];

137 
u_t32_t
 
	m§ved_bio§ddr
;

138 
u_t8_t
 
	m§ved_e
;

139 
u_t8_t
 
	m§ved_ÿchnsz
;

140 
u_t8_t
 
	m§ved_Ïim
;

143 
	#FXP_CHIP_82557
 1

	)

145 
	#FXP_FLAG_MWI_ENABLE
 0x0001

	)

146 
	#FXP_FLAG_READ_ALIGN
 0x0002

	)

147 
	#FXP_FLAG_WRITE_ALIGN
 0x0004

	)

148 
	#FXP_FLAG_EXT_TXCB
 0x0008

	)

149 
	#FXP_FLAG_SERIAL_MEDIA
 0x0010

	)

150 
	#FXP_FLAG_LONG_PKT_EN
 0x0020

	)

151 
	#FXP_FLAG_ALL_MCAST
 0x0040

	)

152 
	#FXP_FLAG_CU_RESUME_BUG
 0x0080

	)

156 
	#CSR_READ_1
(
sc
, 
»g
) \

157 
	`bus_¥aû_»ad_1
((
sc
)->
sc_¡
, (sc)->
sc_sh
, (
»g
))

	)

158 
	#CSR_READ_2
(
sc
, 
»g
) \

159 
	`bus_¥aû_»ad_2
((
sc
)->
sc_¡
, (sc)->
sc_sh
, (
»g
))

	)

160 
	#CSR_READ_4
(
sc
, 
»g
) \

161 
	`bus_¥aû_»ad_4
((
sc
)->
sc_¡
, (sc)->
sc_sh
, (
»g
))

	)

162 
	#CSR_WRITE_1
(
sc
, 
»g
, 
v®
) \

163 
	`bus_¥aû_wre_1
((
sc
)->
sc_¡
, (sc)->
sc_sh
, (
»g
), (
v®
))

	)

164 
	#CSR_WRITE_2
(
sc
, 
»g
, 
v®
) \

165 
	`bus_¥aû_wre_2
((
sc
)->
sc_¡
, (sc)->
sc_sh
, (
»g
), (
v®
))

	)

166 
	#CSR_WRITE_4
(
sc
, 
»g
, 
v®
) \

167 
	`bus_¥aû_wre_4
((
sc
)->
sc_¡
, (sc)->
sc_sh
, (
»g
), (
v®
))

	)

169 
	#CSR_READ_1
(
sc
, 
»g
è
	`fxp_c¤_»ad_1
(sc,»g)

	)

170 
	#CSR_READ_2
(
sc
, 
»g
è
	`fxp_c¤_»ad_2
(sc,»g)

	)

171 
	#CSR_READ_4
(
sc
, 
»g
è
	`fxp_c¤_»ad_4
(sc,»g)

	)

173 
	#CSR_WRITE_1
(
sc
, 
»g
, 
v®
) \

175 ià((
sc
)->
pci_»gs_¬e_io
) \

176 
	`ouÜt_by
((
sc
)->
pci_»gs_ba£
+(
»g
),
v®
); \

178 *((
u_t8_t
*)((
sc
)->
pci_»gs_ba£
)+(
»g
)èð
v®
; \

179 }0)

	)

181 
	#CSR_WRITE_2
(
sc
, 
»g
, 
v®
) \

183 ià((
sc
)->
pci_»gs_¬e_io
) \

184 
	`ouÜt_wÜd
((
sc
)->
pci_»gs_ba£
+(
»g
),
v®
); \

186 *((
u_t16_t
*)((
u_t8_t
*)((
sc
)->
pci_»gs_ba£
)+(
»g
))èð
v®
; \

187 }0)

	)

189 
	#CSR_WRITE_4
(
sc
, 
»g
, 
v®
) \

191 ià((
sc
)->
pci_»gs_¬e_io
) \

192 
	`ouÜt_lÚg
((
sc
)->
pci_»gs_ba£
+(
»g
),
v®
); \

194 *((
u_t32_t
*)((
u_t8_t
*)((
sc
)->
pci_»gs_ba£
)+(
»g
))èð
v®
; \

195 }0)

	)

199 
	#sc_if
 
¬pcom
.
ac_if


	)

201 
	#FXP_UNIT
(
_sc
è(_sc)->
¬pcom
.
ac_if
.
if_un


	)

	@src/libchip/network/open_eth.c

22 #ià
defed
(
__i386__
è|| defed(
__¬m__
è|| defed(
__PPC__
)

23 
	#OPENETH_NOT_SUPPORTED


	)

26 #ià!
defed
(
OPENETH_NOT_SUPPORTED
)

27 
	~<b¥.h
>

28 
	~<¹ems.h
>

30 
	~<b¥.h
>

32 
	~<y³s.h
>

33 
	~<¡dlib.h
>

34 
	~<¡dio.h
>

35 
	~<¡d¬g.h
>

36 
	~<ºo.h
>

38 
	~<¹ems/rÜ.h
>

39 
	~<¹ems/¹ems_bsdÃt.h
>

40 
	~<libch/Ý_h.h
>

42 
	~<sys/·¿m.h
>

43 
	~<sys/mbuf.h
>

45 
	~<sys/sock.h
>

46 
	~<sys/sockio.h
>

47 
	~<Ãt/if.h
>

48 
	~<Ãt/.h
>

49 
	~<Ãt/if_h.h
>

51 #ifdeà
m®loc


52 #undeà
m®loc


54 #ifdeà
ä


55 #undeà
ä


58 
¹ems_i¤_y
 
£t_veùÜ
Ð¹ems_i¤_y, 
¹ems_veùÜ_numb
, );

64 #ifdeà
CPU_U32_FIX


65 
®ign
(
mbuf
 *
m
);

69 
	sMDTX


71 *
	mbuf
;

74 
	sMDRX


76 
mbuf
 *
	mm
;

82 
	#NOCDRIVER
 1

	)

87 
	#RBUF_SIZE
 1536

	)

89 
	#ET_MINLEN
 64

	)

95 
	#INTERRUPT_EVENT
 
RTEMS_EVENT_1


	)

101 
	#START_TRANSMIT_EVENT
 
RTEMS_EVENT_2


	)

104 
	#OPEN_ETH_TX_WAIT_EVENT
 
RTEMS_EVENT_3


	)

111 #ià(
MCLBYTES
 < 
RBUF_SIZE
)

118 
	sÝ_h_soác


121 
¬pcom
 
	m¬pcom
;

123 
Ûth_»gs
 *
	m»gs
;

125 
	macû±Brßdÿ¡
;

126 
¹ems_id
 
	mrxD«mÚTid
;

127 
¹ems_id
 
	mtxD«mÚTid
;

129 
	mtx_±r
;

130 
	mrx_±r
;

131 
	mtxbufs
;

132 
	mrxbufs
;

133 
MDTX
 *
	mtxdesc
;

134 
MDRX
 *
	mrxdesc
;

135 
¹ems_veùÜ_numb
 
	mveùÜ
;

136 
	m100MHz
;

141 
	mrxIÁru±s
;

142 
	mrxPacks
;

143 
	mrxLgthE¼Ü
;

144 
	mrxNÚOù
;

145 
	mrxBadCRC
;

146 
	mrxOvrun
;

147 
	mrxMiss
;

148 
	mrxCÞlisiÚ
;

150 
	mtxIÁru±s
;

151 
	mtxDeã¼ed
;

152 
	mtxH¹bt
;

153 
	mtxL©eCÞlisiÚ
;

154 
	mtxRryLim
;

155 
	mtxUndrun
;

156 
	mtxLo¡C¬rr
;

157 
	mtxRawWa
;

160 
Ý_h_soác
 
	goc
;

164 
¹ems_i¤


165 
	$Ý_h_¼u±_hªdËr
 (
¹ems_veùÜ_numb
 
v
)

167 
ut32_t
 
¡©us
;

171 
¡©us
 = 
oc
.
»gs
->
t_¤c
;

172 
oc
.
»gs
->
t_¤c
 = 
¡©us
;

176 ià(
¡©us
 & (
OETH_INT_RXF
 | 
OETH_INT_RXE
))

178 
oc
.
rxIÁru±s
++;

179 
	`¹ems_bsdÃt_evt_£nd
 (
oc
.
rxD«mÚTid
, 
INTERRUPT_EVENT
);

181 #ifdeà
OETH_SUSPEND_NOTXBUF


182 ià(
¡©us
 & (
OETH_INT_MASK_TXB
 | 
OETH_INT_MASK_TXC
 | 
OETH_INT_MASK_TXE
))

184 
oc
.
txIÁru±s
++;

185 
	`¹ems_bsdÃt_evt_£nd
 (
oc
.
txD«mÚTid
, 
OPEN_ETH_TX_WAIT_EVENT
);

193 
	}
}

195 
ut32_t
 
	$»ad_mii
(
ut32_t
 
addr
)

197 
oc
.
»gs
->
mii¡©us
 & 
OETH_MIISTATUS_BUSY
) {}

198 
oc
.
»gs
->
midd»ss
 = 
addr
 << 8;

199 
oc
.
»gs
->
miicommªd
 = 
OETH_MIICOMMAND_RSTAT
;

200 
oc
.
»gs
->
mii¡©us
 & 
OETH_MIISTATUS_BUSY
) {}

201 ià(!(
oc
.
»gs
->
mii¡©us
 & 
OETH_MIISTATUS_NVALID
))

202 (
oc
.
»gs
->
mix_d©a
);

204 
	`´tf
("open_eth: failedoead mii\n");

207 
	}
}

209 
	$wre_mii
(
ut32_t
 
addr
, ut32_
d©a
)

211 
oc
.
»gs
->
mii¡©us
 & 
OETH_MIISTATUS_BUSY
) {}

212 
oc
.
»gs
->
midd»ss
 = 
addr
 << 8;

213 
oc
.
»gs
->
mix_d©a
 = 
d©a
;

214 
oc
.
»gs
->
miicommªd
 = 
OETH_MIICOMMAND_WCTRLDATA
;

215 
oc
.
»gs
->
mii¡©us
 & 
OETH_MIISTATUS_BUSY
) {}

216 
	}
}

221 
	$Ý_h_lize_h¬dw¬e
 (
Ý_h_soác
 *
sc
)

223 
mbuf
 *
m
;

224 
i
;

225 
mii_ü
 = 0;

227 
Ûth_»gs
 *
»gs
;

229 
»gs
 = 
sc
->regs;

233 
»gs
->
ù¾mod
 = 0;

234 
»gs
->
mod
 = 
OETH_MODER_RST
;

235 
»gs
->
mod
 = 0;

238 
mii_ü
 = 0x3300;

239 ià(!
sc
->
100MHz
è
mii_ü
 = 0;

240 
	`wre_mii
(0, 
mii_ü
 | 0x8000);

241 
	`»ad_mii
(0) & 0x8000) {}

242 ià(!
sc
->
100MHz
è
	`wre_mii
(0, 0);

243 
mii_ü
 = 
	`»ad_mii
(0);

244 
	`´tf
("Ý_h: drivached, PHY cÚfig : 0x%04" 
PRIx32
 "\n", 
	`»ad_mii
(0));

246 #ifdeà
OPEN_ETH_DEBUG


247 
	`´tf
("mii_ü: %04x\n", 
mii_ü
);

248 
i
=0;i<21;i++)

249 
	`´tf
("mii_»g %2d : 0x%04x\n", 
i
, 
	`»ad_mii
(i));

254 
»gs
->
tx_bd_num
 = 
sc
->
txbufs
;

258 
sc
->
rx_±r
 = 0;

259 
sc
->
tx_±r
 = 0;

262 
»gs
->
·ck_Ën
 = 0x00400600;

265 
»gs
->
gt
 = 0x00000015;

268 
»gs
->
gr1
 = 0x0000000c;

271 
»gs
->
gr2
 = 0x00000012;

274 
»gs
->
cÞlcÚf
 = 0x000f003f;

278 
sc
->
txdesc
 = 
	`ÿÎoc
(sc->
txbufs
, (*sc->txdesc));

279 
i
 = 0; i < 
sc
->
txbufs
; i++)

281 
sc
->
»gs
->
xd
[
i
].
Ën_¡©us
 = 
OETH_TX_BD_PAD
 | 
OETH_TX_BD_CRC
;

282 
sc
->
txdesc
[
i
].
buf
 = 
	`ÿÎoc
(1, 
OETH_MAXBUF_LEN
);

283 #ifdeà
OPEN_ETH_DEBUG


284 
	`´tf
("TXBUF: %08x\n", (è
sc
->
txdesc
[
i
].
buf
);

287 
sc
->
»gs
->
xd
[sc->
txbufs
 - 1].
Ën_¡©us
 |ð
OETH_TX_BD_WRAP
;

291 
sc
->
rxdesc
 = 
	`ÿÎoc
(sc->
rxbufs
, (*sc->rxdesc));

292 
i
 = 0; i < 
sc
->
rxbufs
; i++)

295 
	`MGETHDR
 (
m
, 
M_WAIT
, 
MT_DATA
);

296 
	`MCLGET
 (
m
, 
M_WAIT
);

297 
m
->
m_pkthdr
.
rcvif
 = &
sc
->
¬pcom
.
ac_if
;

298 
sc
->
rxdesc
[
i
].
m
 = m;

299 
sc
->
»gs
->
xd
[
i
 + sc->
txbufs
].
addr
 = 
	`mtod
 (
m
, 
ut32_t
*);

300 
sc
->
»gs
->
xd
[
i
 + sc->
txbufs
].
Ën_¡©us
 =

301 
OETH_RX_BD_EMPTY
 | 
OETH_RX_BD_IRQ
;

302 #ifdeà
OPEN_ETH_DEBUG


303 
	`´tf
("RXBUF: %08x\n", (è
sc
->
rxdesc
[
i
].
m
);

306 
sc
->
»gs
->
xd
[sc->
rxbufs
 + sc->
txbufs
 - 1].
Ën_¡©us
 |ð
OETH_RX_BD_WRAP
;

311 
»gs
->
mac_addr1
 = 
sc
->
¬pcom
.
ac_addr
[0] << 8 | sc->arpcom.ac_enaddr[1];

313 
ut32_t
 
mac_addr0
;

314 
mac_addr0
 = 
sc
->
¬pcom
.
ac_addr
[2];

315 
mac_addr0
 <<= 8;

316 
mac_addr0
 |ð
sc
->
¬pcom
.
ac_addr
[3];

317 
mac_addr0
 <<= 8;

318 
mac_addr0
 |ð
sc
->
¬pcom
.
ac_addr
[4];

319 
mac_addr0
 <<= 8;

320 
mac_addr0
 |ð
sc
->
¬pcom
.
ac_addr
[5];

322 
»gs
->
mac_addr0
 = mac_addr0;

325 
	`£t_veùÜ
 (
Ý_h_¼u±_hªdËr
, 
sc
->
veùÜ
, 1);

329 
»gs
->
t_¤c
 = 0xffffffff;

333 
»gs
->
mod
 = 
OETH_MODER_PAD
 | 
OETH_MODER_CRCEN
 | ((
mii_ü
 & 0x100) << 2);

337 
»gs
->
t_mask
 = 
OETH_INT_MASK_RXF
 | 
OETH_INT_MASK_RXE
 | 
OETH_INT_MASK_RXC
;

339 #ifdeà
OETH_SUSPEND_NOTXBUF


340 
»gs
->
t_mask
 |ð
OETH_INT_MASK_TXB
 | 
OETH_INT_MASK_TXC
 | 
OETH_INT_MASK_TXE
 | 
OETH_INT_BUSY
;*/

341 
sc
->
»gs
->
xd
[(sc->
txbufs
 - 1)/2].
Ën_¡©us
 |ð
OETH_TX_BD_IRQ
;

342 
sc
->
»gs
->
xd
[sc->
txbufs
 - 1].
Ën_¡©us
 |ð
OETH_TX_BD_IRQ
;

345 
»gs
->
mod
 |ð
OETH_MODER_RXEN
 | 
OETH_MODER_TXEN
;

346 
	}
}

349 
	$Ý_h_rxD«mÚ
 (*
¬g
)

351 
h_hd
 *
eh
;

352 
Ý_h_soác
 *
dp
 = (Ý_h_soáø*è&
oc
;

353 
iâ
 *
iå
 = &
dp
->
¬pcom
.
ac_if
;

354 
mbuf
 *
m
;

355 
Ën
;

356 
ut32_t
 
Ën_¡©us
;

357 
bad
;

358 
¹ems_evt_£t
 
evts
;

364 
	`¹ems_bsdÃt_evt_»ûive
 (
INTERRUPT_EVENT
,

365 
RTEMS_WAIT
 | 
RTEMS_EVENT_ANY
,

366 
RTEMS_NO_TIMEOUT
, &
evts
);

367 #ifdeà
OPEN_ETH_DEBUG


368 
	`´tf
 ("r\n");

372 ((
Ën_¡©us
 =

373 
dp
->
»gs
->
xd
[dp->
rx_±r
+dp->
txbufs
].
Ën_¡©us
è& 
OETH_RX_BD_EMPTY
))

375 
bad
 = 0;

376 ià(
Ën_¡©us
 & (
OETH_RX_BD_TOOLONG
 | 
OETH_RX_BD_SHORT
))

378 
dp
->
rxLgthE¼Ü
++;

379 
bad
 = 1;

381 ià(
Ën_¡©us
 & 
OETH_RX_BD_DRIBBLE
)

383 
dp
->
rxNÚOù
++;

384 
bad
 = 1;

386 ià(
Ën_¡©us
 & 
OETH_RX_BD_CRCERR
)

388 
dp
->
rxBadCRC
++;

389 
bad
 = 1;

391 ià(
Ën_¡©us
 & 
OETH_RX_BD_OVERRUN
)

393 
dp
->
rxOvrun
++;

394 
bad
 = 1;

396 ià(
Ën_¡©us
 & 
OETH_RX_BD_MISS
)

398 
dp
->
rxMiss
++;

399 
bad
 = 1;

401 ià(
Ën_¡©us
 & 
OETH_RX_BD_LATECOL
)

403 
dp
->
rxCÞlisiÚ
++;

404 
bad
 = 1;

407 ià(!
bad
)

410 
Ën
 = 
Ën_¡©us
 >> 16;

411 
m
 = (
mbuf
 *è(
dp
->
rxdesc
[dp->
rx_±r
].m);

412 
m
->
m_Ën
 = m->
m_pkthdr
.
Ën
 =

413 
Ën
 -  (
h_hd
);

414 
eh
 = 
	`mtod
 (
m
, 
h_hd
 *);

415 
m
->
m_d©a
 +ð (
h_hd
);

416 #ifdeà
CPU_U32_FIX


417 
	`®ign
(
m
);

420 
	`h_put
 (
iå
, 
eh
, 
m
);

423 
	`MGETHDR
 (
m
, 
M_WAIT
, 
MT_DATA
);

424 
	`MCLGET
 (
m
, 
M_WAIT
);

425 
m
->
m_pkthdr
.
rcvif
 = 
iå
;

426 
dp
->
rxdesc
[dp->
rx_±r
].
m
 = m;

427 
dp
->
»gs
->
xd
[dp->
rx_±r
 + dp->
txbufs
].
addr
 =

428 (
ut32_t
*è
	`mtod
 (
m
, *);

429 
dp
->
rxPacks
++;

432 
dp
->
»gs
->
xd
[dp->
rx_±r
+dp->
txbufs
].
Ën_¡©us
 =

433 (
dp
->
»gs
->
xd
[dp->
rx_±r
+dp->
txbufs
].
Ën_¡©us
 &

434 ~
OETH_TX_BD_STATS
è| 
OETH_TX_BD_READY
;

435 
dp
->
rx_±r
 = (dp->rx_±¸+ 1è% dp->
rxbufs
;

438 
	}
}

440 
	gside
 = 0;

442 
	$£nd·ck
 (
iâ
 *
iå
, 
mbuf
 *
m
)

444 
Ý_h_soác
 *
dp
 = 
iå
->
if_soác
;

445 *
mp
;

446 
mbuf
 *
n
;

447 
ut32_t
 
Ën
, 
Ën_¡©us
;

449 ià(
side
è
	`´tf
 ("error: sendpackete-entered!!\n");

450 
side
 = 1;

454 
n
 = 
m
;

456 
dp
->
»gs
->
xd
[dp->
tx_±r
].
Ën_¡©us
 & 
OETH_TX_BD_READY
)

458 #ifdeà
OETH_SUSPEND_NOTXBUF


459 
¹ems_evt_£t
 
evts
;

460 
	`¹ems_bsdÃt_evt_»ûive
 (
OPEN_ETH_TX_WAIT_EVENT
,

461 
RTEMS_WAIT
 | 
RTEMS_EVENT_ANY
,

462 
	`RTEMS_MILLISECONDS_TO_TICKS
(500), &
evts
);

466 
Ën
 = 0;

467 
mp
 = (*è
dp
->
txdesc
[dp->
tx_±r
].
buf
;

468 
dp
->
»gs
->
xd
[dp->
tx_±r
].
addr
 = (
ut32_t
*è
mp
;

470 #ifdeà
OPEN_ETH_DEBUG


471 
	`´tf
("TXD: 0x%08x\n", (è
m
->
m_d©a
);

475 #ifdeà
OPEN_ETH_DEBUG


476 
i
;

477 
	`´tf
("MBUF: 0x%08x : ", (è
m
->
m_d©a
);

478 
i
=0;i<
m
->
m_Ën
;i++)

479 
	`´tf
("%x%x", (
m
->
m_d©a
[
i
] >> 4) & 0x0ff, m->m_data[i] & 0x0ff);

480 
	`´tf
("\n");

482 
Ën
 +ð
m
->
m_Ën
;

483 ià(
Ën
 <ð
RBUF_SIZE
)

484 
	`memýy
 ((*è
mp
, (*è
m
->
m_d©a
, m->
m_Ën
);

485 
mp
 +ð
m
->
m_Ën
;

486 ià((
m
 = m->
m_Ãxt
è=ð
NULL
)

490 
	`m_äm
 (
n
);

494 ià(
Ën
 <ð
RBUF_SIZE
) {

497 
Ën_¡©us
 = 
dp
->
»gs
->
xd
[dp->
tx_±r
].Ën_¡©u & ~
OETH_TX_BD_STATS
;

500 ià(
Ën
 < 
ET_MINLEN
) {

501 
Ën_¡©us
 |ð
OETH_TX_BD_PAD
;

502 
Ën
 = 
ET_MINLEN
;

505 
Ën_¡©us
 &ð~
OETH_TX_BD_PAD
;

508 
Ën_¡©us
 &= 0x0000ffff;

509 
Ën_¡©us
 |ð(
Ën
 << 16è| (
OETH_TX_BD_READY
 | 
OETH_TX_BD_CRC
);

510 
dp
->
»gs
->
xd
[dp->
tx_±r
].
Ën_¡©us
 =en_status;

511 
dp
->
tx_±r
 = (dp->tx_±¸+ 1è% dp->
txbufs
;

514 
side
 = 0;

515 
	}
}

521 
	$Ý_h_txD«mÚ
 (*
¬g
)

523 
Ý_h_soác
 *
sc
 = (Ý_h_soáø*è
¬g
;

524 
iâ
 *
iå
 = &
sc
->
¬pcom
.
ac_if
;

525 
mbuf
 *
m
;

526 
¹ems_evt_£t
 
evts
;

534 
	`¹ems_bsdÃt_evt_»ûive
 (
START_TRANSMIT_EVENT
,

535 
RTEMS_EVENT_ANY
 | 
RTEMS_WAIT
,

536 
RTEMS_NO_TIMEOUT
, &
evts
);

537 #ifdeà
OPEN_ETH_DEBUG


538 
	`´tf
 ("t\n");

549 
	`IF_DEQUEUE
 (&
iå
->
if_¢d
, 
m
);

550 ià(!
m
)

552 
	`£nd·ck
 (
iå
, 
m
);

554 
iå
->
if_æags
 &ð~
IFF_OACTIVE
;

556 
	}
}

560 
	$Ý_h_¡¬t
 (
iâ
 *
iå
)

562 
Ý_h_soác
 *
sc
 = 
iå
->
if_soác
;

564 
	`¹ems_bsdÃt_evt_£nd
 (
sc
->
txD«mÚTid
, 
START_TRANSMIT_EVENT
);

565 
iå
->
if_æags
 |ð
IFF_OACTIVE
;

566 
	}
}

572 
	$Ý_h_
 (*
¬g
)

574 
Ý_h_soác
 *
sc
 = 
¬g
;

575 
iâ
 *
iå
 = &
sc
->
¬pcom
.
ac_if
;

577 ià(
sc
->
txD«mÚTid
 == 0)

583 
	`Ý_h_lize_h¬dw¬e
 (
sc
);

588 
sc
->
rxD«mÚTid
 = 
	`¹ems_bsdÃt_Ãw´oc
 ("DCrx", 4096,

589 
Ý_h_rxD«mÚ
, 
sc
);

590 
sc
->
txD«mÚTid
 = 
	`¹ems_bsdÃt_Ãw´oc
 ("DCtx", 4096,

591 
Ý_h_txD«mÚ
, 
sc
);

597 
iå
->
if_æags
 |ð
IFF_RUNNING
;

599 
	}
}

605 
	$Ý_h_¡Ý
 (
Ý_h_soác
 *
sc
)

607 
iâ
 *
iå
 = &
sc
->
¬pcom
.
ac_if
;

609 
iå
->
if_æags
 &ð~
IFF_RUNNING
;

611 
sc
->
»gs
->
mod
 = 0;

612 
sc
->
»gs
->
mod
 = 
OETH_MODER_RST
;

613 
sc
->
»gs
->
mod
 = 0;

614 
	}
}

621 
	$Ý_h_¡©s
 (
Ý_h_soác
 *
sc
)

623 
	`´tf
 (" Rx Packs:%-8lu", 
sc
->
rxPacks
);

624 
	`´tf
 (" Rx IÁru±s:%-8lu", 
sc
->
rxIÁru±s
);

625 
	`´tf
 (" Lgth:%-8lu", 
sc
->
rxLgthE¼Ü
);

626 
	`´tf
 (" NÚ-où:%-8lu\n", 
sc
->
rxNÚOù
);

627 
	`´tf
 (" Bad CRC:%-8lu", 
sc
->
rxBadCRC
);

628 
	`´tf
 (" Ovrun:%-8lu", 
sc
->
rxOvrun
);

629 
	`´tf
 (" Miss:%-8lu", 
sc
->
rxMiss
);

630 
	`´tf
 (" CÞlisiÚ:%-8lu\n", 
sc
->
rxCÞlisiÚ
);

632 
	`´tf
 (" Tx IÁru±s:%-8lu", 
sc
->
txIÁru±s
);

633 
	`´tf
 (" Deã¼ed:%-8lu", 
sc
->
txDeã¼ed
);

634 
	`´tf
 (" Mis£d Hrbt:%-8lu\n", 
sc
->
txH¹bt
);

635 
	`´tf
 (" NØC¬rr:%-8lu", 
sc
->
txLo¡C¬rr
);

636 
	`´tf
 ("R¿nsm Lim:%-8lu", 
sc
->
txRryLim
);

637 
	`´tf
 (" L©CÞlisiÚ:%-8lu\n", 
sc
->
txL©eCÞlisiÚ
);

638 
	`´tf
 (" Undrun:%-8lu", 
sc
->
txUndrun
);

639 
	`´tf
 (" Raw ouuwa:%-8lu\n", 
sc
->
txRawWa
);

640 
	}
}

646 
	$Ý_h_ioùl
 (
iâ
 *
iå
, 
ioùl_commªd_t
 
commªd
, 
ÿddr_t
 
d©a
)

648 
Ý_h_soác
 *
sc
 = 
iå
->
if_soác
;

649 
rÜ
 = 0;

651 
commªd
)

653 
SIOCGIFADDR
:

654 
SIOCSIFADDR
:

655 
	`h_ioùl
 (
iå
, 
commªd
, 
d©a
);

658 
SIOCSIFFLAGS
:

659 
iå
->
if_æags
 & (
IFF_UP
 | 
IFF_RUNNING
))

661 
IFF_RUNNING
:

662 
	`Ý_h_¡Ý
 (
sc
);

665 
IFF_UP
:

666 
	`Ý_h_
 (
sc
);

669 
IFF_UP
 | 
IFF_RUNNING
:

670 
	`Ý_h_¡Ý
 (
sc
);

671 
	`Ý_h_
 (
sc
);

679 
SIO_RTEMS_SHOW_STATS
:

680 
	`Ý_h_¡©s
 (
sc
);

687 
rÜ
 = 
EINVAL
;

691  
rÜ
;

692 
	}
}

698 
	$¹ems_Ý_h_driv_©ch
 (
¹ems_bsdÃt_ifcÚfig
 *
cÚfig
,

699 
Ý_h_cÚfigu¿tiÚ_t
 * 
ch
)

701 
Ý_h_soác
 *
sc
;

702 
iâ
 *
iå
;

703 
mtu
;

704 
unNumb
;

705 *
unName
;

708 ià((
unNumb
 = 
	`¹ems_bsdÃt_·r£_driv_Çme
 (
cÚfig
, &
unName
)) < 0)

711 
sc
 = &
oc
;

712 
iå
 = &
sc
->
¬pcom
.
ac_if
;

713 
	`mem£t
 (
sc
, 0,  (*sc));

715 ià(
cÚfig
->
h¬dw¬e_add»ss
)

717 
	`memýy
 (
sc
->
¬pcom
.
ac_addr
, 
cÚfig
->
h¬dw¬e_add»ss
,

718 
ETHER_ADDR_LEN
);

722 
	`mem£t
 (
sc
->
¬pcom
.
ac_addr
, 0x08, 
ETHER_ADDR_LEN
);

725 ià(
cÚfig
->
mtu
)

726 
mtu
 = 
cÚfig
->mtu;

728 
mtu
 = 
ETHERMTU
;

730 
sc
->
acû±Brßdÿ¡
 = !
cÚfig
->
ignÜe_brßdÿ¡
;

731 
sc
->
»gs
 = 
ch
->
ba£_add»ss
;

732 
sc
->
veùÜ
 = 
ch
->vector;

733 
sc
->
txbufs
 = 
ch
->
txd_couÁ
;

734 
sc
->
rxbufs
 = 
ch
->
rxd_couÁ
;

735 
sc
->
100MHz
 = 
ch
->en100MHz;

741 
iå
->
if_soác
 = 
sc
;

742 
iå
->
if_un
 = 
unNumb
;

743 
iå
->
if_Çme
 = 
unName
;

744 
iå
->
if_mtu
 = 
mtu
;

745 
iå
->
if_
 = 
Ý_h_
;

746 
iå
->
if_ioùl
 = 
Ý_h_ioùl
;

747 
iå
->
if_¡¬t
 = 
Ý_h_¡¬t
;

748 
iå
->
if_ouut
 = 
h_ouut
;

749 
iå
->
if_æags
 = 
IFF_BROADCAST
 | 
IFF_SIMPLEX
;

750 ià(
iå
->
if_¢d
.
ifq_maxËn
 == 0)

751 
iå
->
if_¢d
.
ifq_maxËn
 = 
ifqmaxËn
;

756 
	`if_©ch
 (
iå
);

757 
	`h_içach
 (
iå
);

759 #ifdeà
OPEN_ETH_DEBUG


760 
	`´tf
 ("OPEN_ETH : driver has beenttached\n");

763 
	}
};

	@src/libchip/network/open_eth.h

4 #iâdeà
_OPEN_ETH_


5 
	#_OPEN_ETH_


	)

11 *
	mba£_add»ss
;

12 
ut32_t
 
	mveùÜ
;

13 
ut32_t
 
	mtxd_couÁ
;

14 
ut32_t
 
	mrxd_couÁ
;

15 
ut32_t
 
	m100MHz
;

16 } 
	tÝ_h_cÚfigu¿tiÚ_t
;

21 
	s_Ûth_rxtxdesc
 {

22 vÞ©
ut32_t
 
	mËn_¡©us
;

23 vÞ©
ut32_t
 *
	maddr
;

24 } 
	tÛth_rxtxdesc
;

28 
	s_Ûth_»gs
 {

29 vÞ©
ut32_t
 
	mmod
;

30 vÞ©
ut32_t
 
	mt_¤c
;

31 vÞ©
ut32_t
 
	mt_mask
;

32 vÞ©
ut32_t
 
	mgt
;

33 vÞ©
ut32_t
 
	mgr1
;

34 vÞ©
ut32_t
 
	mgr2
;

35 vÞ©
ut32_t
 
	m·ck_Ën
;

36 vÞ©
ut32_t
 
	mcÞlcÚf
;

37 vÞ©
ut32_t
 
	mtx_bd_num
;

38 vÞ©
ut32_t
 
	mù¾mod
;

39 vÞ©
ut32_t
 
	mmiimod
;

40 vÞ©
ut32_t
 
	mmiicommªd
;

41 vÞ©
ut32_t
 
	mmidd»ss
;

42 vÞ©
ut32_t
 
	mmix_d©a
;

43 vÞ©
ut32_t
 
	mmix_d©a
;

44 vÞ©
ut32_t
 
	mmii¡©us
;

45 vÞ©
ut32_t
 
	mmac_addr0
;

46 vÞ©
ut32_t
 
	mmac_addr1
;

47 vÞ©
ut32_t
 
	mhash_addr0
;

48 vÞ©
ut32_t
 
	mhash_addr1
;

49 vÞ©
ut32_t
 
	mtxù¾
;

50 
ut32_t
 
	mem±y
[235];

51 
Ûth_rxtxdesc
 
	mxd
[128];

52 } 
	tÛth_»gs
;

54 
	#OETH_TOTAL_BD
 128

	)

55 
	#OETH_MAXBUF_LEN
 0x610

	)

58 
	#OETH_TX_BD_READY
 0x8000

	)

59 
	#OETH_TX_BD_IRQ
 0x4000

	)

60 
	#OETH_TX_BD_WRAP
 0x2000

	)

61 
	#OETH_TX_BD_PAD
 0x1000

	)

62 
	#OETH_TX_BD_CRC
 0x0800

	)

64 
	#OETH_TX_BD_UNDERRUN
 0x0100

	)

65 
	#OETH_TX_BD_RETRY
 0x00F0

	)

66 
	#OETH_TX_BD_RETLIM
 0x0008

	)

67 
	#OETH_TX_BD_LATECOL
 0x0004

	)

68 
	#OETH_TX_BD_DEFER
 0x0002

	)

69 
	#OETH_TX_BD_CARRIER
 0x0001

	)

70 
	#OETH_TX_BD_STATS
 (
OETH_TX_BD_UNDERRUN
 | \

71 
OETH_TX_BD_RETRY
 | \

72 
OETH_TX_BD_RETLIM
 | \

73 
OETH_TX_BD_LATECOL
 | \

74 
OETH_TX_BD_DEFER
 | \

75 
OETH_TX_BD_CARRIER
)

	)

78 
	#OETH_RX_BD_EMPTY
 0x8000

	)

79 
	#OETH_RX_BD_IRQ
 0x4000

	)

80 
	#OETH_RX_BD_WRAP
 0x2000

	)

82 
	#OETH_RX_BD_MISS
 0x0080

	)

83 
	#OETH_RX_BD_OVERRUN
 0x0040

	)

84 
	#OETH_RX_BD_INVSIMB
 0x0020

	)

85 
	#OETH_RX_BD_DRIBBLE
 0x0010

	)

86 
	#OETH_RX_BD_TOOLONG
 0x0008

	)

87 
	#OETH_RX_BD_SHORT
 0x0004

	)

88 
	#OETH_RX_BD_CRCERR
 0x0002

	)

89 
	#OETH_RX_BD_LATECOL
 0x0001

	)

90 
	#OETH_RX_BD_STATS
 (
OETH_RX_BD_MISS
 | \

91 
OETH_RX_BD_OVERRUN
 | \

92 
OETH_RX_BD_INVSIMB
 | \

93 
OETH_RX_BD_DRIBBLE
 | \

94 
OETH_RX_BD_TOOLONG
 | \

95 
OETH_RX_BD_SHORT
 | \

96 
OETH_RX_BD_CRCERR
 | \

97 
OETH_RX_BD_LATECOL
)

	)

100 
	#OETH_MODER_RXEN
 0x00000001

	)

101 
	#OETH_MODER_TXEN
 0x00000002

	)

102 
	#OETH_MODER_NOPRE
 0x00000004

	)

103 
	#OETH_MODER_BRO
 0x00000008

	)

104 
	#OETH_MODER_IAM
 0x00000010

	)

105 
	#OETH_MODER_PRO
 0x00000020

	)

106 
	#OETH_MODER_IFG
 0x00000040

	)

107 
	#OETH_MODER_LOOPBCK
 0x00000080

	)

108 
	#OETH_MODER_NOBCKOF
 0x00000100

	)

109 
	#OETH_MODER_EXDFREN
 0x00000200

	)

110 
	#OETH_MODER_FULLD
 0x00000400

	)

111 
	#OETH_MODER_RST
 0x00000800

	)

112 
	#OETH_MODER_DLYCRCEN
 0x00001000

	)

113 
	#OETH_MODER_CRCEN
 0x00002000

	)

114 
	#OETH_MODER_HUGEN
 0x00004000

	)

115 
	#OETH_MODER_PAD
 0x00008000

	)

116 
	#OETH_MODER_RECSMALL
 0x00010000

	)

119 
	#OETH_INT_TXB
 0x00000001

	)

120 
	#OETH_INT_TXE
 0x00000002

	)

121 
	#OETH_INT_RXF
 0x00000004

	)

122 
	#OETH_INT_RXE
 0x00000008

	)

123 
	#OETH_INT_BUSY
 0x00000010

	)

124 
	#OETH_INT_TXC
 0x00000020

	)

125 
	#OETH_INT_RXC
 0x00000040

	)

128 
	#OETH_INT_MASK_TXB
 0x00000001

	)

129 
	#OETH_INT_MASK_TXE
 0x00000002

	)

130 
	#OETH_INT_MASK_RXF
 0x00000004

	)

131 
	#OETH_INT_MASK_RXE
 0x00000008

	)

132 
	#OETH_INT_MASK_BUSY
 0x00000010

	)

133 
	#OETH_INT_MASK_TXC
 0x00000020

	)

134 
	#OETH_INT_MASK_RXC
 0x00000040

	)

137 
	#OETH_CTRLMODER_PASSALL
 0x00000001

	)

138 
	#OETH_CTRLMODER_RXFLOW
 0x00000002

	)

139 
	#OETH_CTRLMODER_TXFLOW
 0x00000004

	)

142 
	#OETH_MIIMODER_CLKDIV
 0x000000FF

	)

143 
	#OETH_MIIMODER_NOPRE
 0x00000100

	)

144 
	#OETH_MIIMODER_RST
 0x00000200

	)

147 
	#OETH_MIICOMMAND_SCANSTAT
 0x00000001

	)

148 
	#OETH_MIICOMMAND_RSTAT
 0x00000002

	)

149 
	#OETH_MIICOMMAND_WCTRLDATA
 0x00000004

	)

152 
	#OETH_MIIADDRESS_FIAD
 0x0000001F

	)

153 
	#OETH_MIIADDRESS_RGAD
 0x00001F00

	)

156 
	#OETH_MIISTATUS_LINKFAIL
 0x00000001

	)

157 
	#OETH_MIISTATUS_BUSY
 0x00000002

	)

158 
	#OETH_MIISTATUS_NVALID
 0x00000004

	)

162 
¹ems_Ý_h_driv_©ch
 (

163 
¹ems_bsdÃt_ifcÚfig
 *
cÚfig
,

164 
Ý_h_cÚfigu¿tiÚ_t
 *
ch


	@src/libchip/network/smc91111.c

1 
	~<¹ems.h
>

2 
	~<ºo.h
>

4 
	~<b¥.h
>

14 #ià
defed
(
HAS_SMC91111
)

15 
	#SMC91111_SUPPORTED


	)

18 #ià
defed
(
HAS_SMC91111
)

20 
	~<¡dlib.h
>

21 
	~<¡dio.h
>

22 
	~<¡d¬g.h
>

23 
	~<¹ems/rÜ.h
>

24 
	~<¹ems/¹ems_bsdÃt.h
>

25 
	~<¹ems/q-exnsiÚ.h
>

27 
	~<sys/·¿m.h
>

28 
	~<sys/mbuf.h
>

30 
	~<sys/sock.h
>

31 
	~<sys/sockio.h
>

32 
	~<Ãt/if.h
>

33 
	~<Ãt/.h
>

34 
	~<Ãt/if_h.h
>

36 
	#SMC91111_INTERRUPT_EVENT
 
RTEMS_EVENT_1


	)

37 
	#SMC91111_START_TRANSMIT_EVENT
 
RTEMS_EVENT_2


	)

38 
	#SMC91111_TX_WAIT_EVENT
 
RTEMS_EVENT_3


	)

52 
	#DEBUG
 (0)

	)

55 
	~"smc91111cÚfig.h
"

56 
	~<libch/smc91111.h
>

58 #ifdeà
BSP_FEATURE_IRQ_EXTENSION


59 
	~<¹ems/q-exnsiÚ.h
>

62 
Ïn91cxx_´iv_d©a
 
	gsmc91111
;

64 
Ïn91cxx_h¬dw¬e_
(
Ïn91cxx_´iv_d©a
 *
ýd
);

65 
ut16_t
 
Ïn91cxx_»ad_phy
(
Ïn91cxx_´iv_d©a
 *
ýd
,

66 
ut8_t
 
phyaddr
, ut8_
phy»g
);

67 
Ïn91cxx_wre_phy
(
Ïn91cxx_´iv_d©a
 *
ýd
,

68 
ut8_t
 
phyaddr
, ut8_
phy»g
,

69 
ut16_t
 
v®ue
);

70 
Ïn91cxx_¡¬t
(
iâ
 *
iå
);

71 
smc91111_¡¬t
(
iâ
 *
iå
);

72 
smc_´obe
(
Ïn91cxx_´iv_d©a
 *
ýd
);

73 
smc91111_¡Ý
(
Ïn91cxx_´iv_d©a
 *
ýd
);

74 
smc91111_
(*
¬g
);

75 
Ïn91cxx_fish_£Á
(
Ïn91cxx_´iv_d©a
 *
ýd
);

77 
Ïn91cxx_phy_fixed
(
Ïn91cxx_´iv_d©a
 *
ýd
);

78 
Ïn91cxx_phy_cÚfigu»
(
Ïn91cxx_´iv_d©a
 *
ýd
);

81 
	#m
(
l
,
r
è(Öè< (rè? (lè: (r))

	)

82 
	#max
(
l
,
r
è(Öè> (rè? (lè: (r))

	)

85 
	$Ïn91cxx_¼u±_hªdËr
(*
¬g
)

87 
Ïn91cxx_´iv_d©a
 *
ýd
 = 
¬g
;

88 
q
, 
evt
;

89 
Þdba£
;

90 
Þdpor
;

91 
	`INCR_STAT
(
ýd
, 
¼u±s
);

92 
	`DEBUG_FUNCTION
();

94 
	`HAL_READ_UINT16
(
ýd
->
ba£
 + (
LAN91CXX_BS
), 
Þdba£
);

95 
Þdpor
 = 
	`g_»g
(
ýd
, 
LAN91CXX_POINTER
);

98 
q
 = 
	`g_»g
(
ýd
, 
LAN91CXX_INTERRUPT
);

99 
evt
 = 
q
 & (irq >> 8) & 0xff;

100 ià(0 =ð
evt
)

105 ià(
evt
 & 
LAN91CXX_INTERRUPT_ERCV_INT
) {

106 
	`db_´tf
("Earlyeceive interrupt");

107 } ià(
evt
 & 
LAN91CXX_INTERRUPT_EPH_INT
) {

108 
	`db_´tf
("ethernetrotocol handler failures");

109 } ià(
evt
 & 
LAN91CXX_INTERRUPT_RX_OVRN_INT
) {

110 
	`db_´tf
("receive overrun");

111 } ià(
evt
 & 
LAN91CXX_INTERRUPT_ALLOC_INT
) {

112 
	`db_´tf
("allocation interrupt");

115 ià(
evt
 & 
LAN91CXX_INTERRUPT_TX_SET
) {

116 
	`db_´tf
("#*tx irq\n");

117 
	`Ïn91cxx_fish_£Á
(
ýd
);

118 
	`put_»g
(
ýd
, 
LAN91CXX_INTERRUPT
,

119 (
q
 & 0xff00è| 
LAN91CXX_INTERRUPT_TX_INT
);

125 ià(
evt
 & 
LAN91CXX_INTERRUPT_RCV_INT
) {

126 
	`db_´tf
("#*rx irq\n");

127 
	`¹ems_bsdÃt_evt_£nd
(
ýd
->
rxD«mÚTid
,

128 
SMC91111_INTERRUPT_EVENT
);

130 ià(
evt
 &

131 ~(
LAN91CXX_INTERRUPT_TX_SET
 | 
LAN91CXX_INTERRUPT_RCV_INT
))

132 
	`db_´tf
("Unknown interrupt\n");

134 
	`db_´tf
("ou%s\n", 
__FUNCTION__
);

136 
	`put_»g
(
ýd
, 
LAN91CXX_POINTER
, 
Þdpor
);

137 
	`HAL_WRITE_UINT16
(
ýd
->
ba£
 + (
LAN91CXX_BS
), 
Þdba£
);

138 
	}
}

147 
	$Ïn91cxx_»cv
(
Ïn91cxx_´iv_d©a
 *
ýd
, 
mbuf
 *
m
)

149 
iâ
 *
iå
 = &
ýd
->
¬pcom
.
ac_if
;

150 
h_hd
 *
eh
;

151 
mËn
 = 0, 
¶
;

152 *
¡¬t
;

153 
rxd_t
 *
d©a
 = 
NULL
, 
v®
;

154 #ià
DEBUG
 & 64

155 
rxd_t
 
Í
 = 0;

158 ()
¡¬t
;

160 
mbuf
 *
n
;

161 
dbg_´efix
 = "<";

163 
	`DEBUG_FUNCTION
();

164 
	`INCR_STAT
(
ýd
, 
rx_div
);

168 
	`put_»g
(
ýd
, 
LAN91CXX_POINTER
,

169 (
LAN91CXX_POINTER_RCV
 | 
LAN91CXX_POINTER_READ
 |

170 
LAN91CXX_POINTER_AUTO_INCR
));

171 
v®
 = 
	`g_d©a
(
ýd
);

174 #ifdeà
LAN91CXX_32BIT_RX


175 
v®
 = 
	`CYG_LE32_TO_CPU
(val);

176 
¶
 = (
v®
 >> 16) - 6;

178 
v®
 = 
	`CYG_LE16_TO_CPU
(val);

179 
¶
 = 
	`g_d©a
(
ýd
);

180 
¶
 = 
	`CYG_LE16_TO_CPU
(plen) - 6;

183 iàÐ
ýd
->
c111_»va
 || 
	`LAN91CXX_RX_STATUS_IS_ODD
(ýd, 
v®
) )

184 
¶
++;

186 
n
 = 
m
;; =->
m_Ãxt
) {

187 #ifdeà
LAN91CXX_32BIT_RX


188 ià(
mËn
 == 2) {

189 #ià
DEBUG
 & 64

190 
	`db_´tf
("Appendingoastpacket\n");

193 
v®
 = 
	`g_d©a
(
ýd
);

194 *((*)
d©a
èð(
v®
 >> 16) & 0xffff;

195 
¶
 -= 2;

196 
d©a
 = (
rxd_t
 *è
n
->
m_d©a
;

197 
¡¬t
 = (*)
d©a
;

198 
mËn
 = 
n
->
m_Ën
;

199 ià((
d©a
è&& (
mËn
 > 1)) {

200 *(*)
d©a
 = (
v®
 & 0xffff);

201 
d©a
 = (
rxd_t
 *)((*)data + 1);

202 
¶
 -= 2;

203 
mËn
 -= 2;

206 
d©a
 = (
rxd_t
 *è
n
->
m_d©a
;

207 
¡¬t
 = (*)
d©a
;

208 
mËn
 = 
n
->
m_Ën
;

211 
d©a
 = (
rxd_t
 *è
n
->
m_d©a
;

212 
¡¬t
 = (*)
d©a
;

213 
mËn
 = 
n
->
m_Ën
;

216 
	`db1_´tf
("<[·ck : mËÀ0x%x,ËÀ0x%x]\n", 
mËn
, 
¶
);

218 ià(
d©a
) {

219 
mËn
 >ð(*
d©a
)) {

220 #ifdeà
LAN91CXX_32BIT_RX


221 
v®
 = 
	`g_d©a
(
ýd
);

222 *(*)
d©a
 = (
v®
 >> 16) & 0xffff;

223 
d©a
 = (
rxd_t
 *)((*)data + 1);

224 *(*)
d©a
 = (
v®
 & 0xffff);

225 
d©a
 = (
rxd_t
 *)((*)data + 1);

227 *
d©a
++ = 
	`g_d©a
(
ýd
);

229 
mËn
 -ð(*
d©a
);

230 
¶
 -ð(*
d©a
);

233 
mËn
 >ð(*
d©a
)) {

234 ()
	`g_d©a
(
ýd
);

235 
mËn
 -ð(*
d©a
);

236 
¶
 -ð(*
d©a
);

240 #ià
DEBUG
 & 64

241 
Í
 = 0;

242 (()
¡¬t
è< (()
d©a
)) {

243 
a
 = *(
¡¬t
++);

244 
b
 = *(
¡¬t
++);

245 
	`db64_´tf
("%02x %02x ", 
a
, 
b
);

246 
Í
 += 2;

247 ià(
Í
 >= 16) {

248 
	`db64_´tf
("\n");

249 
Í
 = 0;

252 
	`db64_´tf
(" \n");

255 
v®
 = 
	`g_d©a
(
ýd
);

256 #ifdeà
LAN91CXX_32BIT_RX


257 ià(
¶
 & 2) {

258 ià(
d©a
 && (
mËn
>1) ) {

259 *(*)
d©a
 = (
v®
 >> 16) & 0xffff;

260 
d©a
 = (
rxd_t
 *)((*)data + 1);

261 
v®
 <<= 16;

262 
mËn
-=2;

265 iàÐ(
¶
 & 1è&& 
d©a
 && (
mËn
>0) )

266 *(*)
d©a
 = 
v®
 >> 24;

268 
v®
 = 
	`CYG_LE16_TO_CPU
(val);

269 
ý
 = (*)
d©a
;

271 
	`CYG_ASSERT
(
v®
 & 
LAN91CXX_CONTROLBYTE_RX
, "Controlbyte isot for Rx");

272 
	`CYG_ASSERT
((1 =ð
mËn
è=ð(0 !ð
	`LAN91CXX_CONTROLBYTE_IS_ODD
(
ýd
, 
v®
)),

274 ià(
d©a
 && (1 =ð
mËn
è&& 
	`LAN91CXX_CONTROLBYTE_IS_ODD
(
ýd
, 
v®
)) {

275 
cv®
 = 
v®
 & 0x00ff;

276 *
ý
 = 
cv®
;

280 
v®
 = 
	`g_»g
(
ýd
, 
LAN91CXX_FIFO_PORTS
);

281 ià(0x8000 & 
v®
) {

282 
db4_´tf


284 
v®
, 
ýd
->
rx·ck
);

286 
	`db4_´tf
("<+Rxacket freed %x (expected %x)\n",

287 0xfà& (
v®
 >> 8), 
ýd
->
rx·ck
);

290 
	`CYG_ASSERT
((0xfà& (
v®
 >> 8)è=ð
ýd
->
rx·ck
,

295 
	`put_»g
(
ýd
, 
LAN91CXX_MMU_COMMAND
, 
LAN91CXX_MMU_»m»l_rx_äame
);

297 
dbg_´efix
 = "";

300 
eh
 = 
	`mtod
(
m
, 
h_hd
 *);

301 
m
->
m_d©a
 +ð(
h_hd
);

302 
m
->
m_Ën
 -ð(
h_hd
);

303 
m
->
m_pkthdr
.
Ën
 -ð(
h_hd
);

305 
	`h_put
(
iå
, 
eh
, 
m
);

307 
	}
}

310 
mbuf
 *
	$smc91111_®locmbufcha
(
tÙËn
, 
iâ
 *
iå
)

313 
mbuf
 *
m
, *
m0
, *
Ãwm
;

314 
Ën
;

316 
	`MGETHDR
(
m0
, 
M_DONTWAIT
, 
MT_DATA
);

317 ià(
m0
 == 0)

319 
m0
->
m_pkthdr
.
rcvif
 = 
iå
;

320 
m0
->
m_pkthdr
.
Ën
 = 
tÙËn
;

321 
Ën
 = 
MHLEN
;

322 
m
 = 
m0
;

325 
tÙËn
 > 0) {

326 ià(
tÙËn
 >ð
MINCLSIZE
) {

327 
	`MCLGET
(
m
, 
M_DONTWAIT
);

328 ià((
m
->
m_æags
 & 
M_EXT
) == 0)

329 
bad
;

330 
Ën
 = 
MCLBYTES
;

333 ià(
m
 =ð
m0
) {

334 
ÿddr_t
 
Ãwd©a
 = (caddr_t)

335 
	`ALIGN
(
m
->
m_d©a
 +

336 (
h_hd
)) -

337 (
h_hd
);

338 
Ën
 -ð
Ãwd©a
 - 
m
->
m_d©a
;

339 
m
->
m_d©a
 = 
Ãwd©a
;

342 
m
->
m_Ën
 = 
Ën
 = 
	`m
(
tÙËn
,en);

344 
tÙËn
 -ð
Ën
;

345 ià(
tÙËn
 > 0) {

346 
	`MGET
(
Ãwm
, 
M_DONTWAIT
, 
MT_DATA
);

347 ià(
Ãwm
 == 0)

348 
bad
;

349 
Ën
 = 
MLEN
;

350 
m
 = m->
m_Ãxt
 = 
Ãwm
;

353  (
m0
);

355 
bad
:

356 
	`m_äm
(
m0
);

358 
	}
}

360 
	$»ad·ck
(
Ïn91cxx_´iv_d©a
 *
ýd
)

362 
mbuf
 *
m
;

363 
¡©
, 
com¶
;

364 
iâ
 *
iå
 = &
ýd
->
¬pcom
.
ac_if
;

365 #ifdeà
LAN91CXX_32BIT_RX


366 
ut32_t
 
v®
;

369 
	`DEBUG_FUNCTION
();

372 
¡©
 = 
	`g_»g
(
ýd
, 
LAN91CXX_FIFO_PORTS
);

373 
	`db1_´tf
("+LAN91CXX_FIFO_PORTS: 0x%04x\n", 
¡©
);

375 ià(0x8000 & 
¡©
) {

377 
	`db4_´tf
("!RxEvent withmpty fifo\n");

381 
	`INCR_STAT
(
ýd
, 
rx_couÁ
);

383 
	`db4_´tf
("+Rxacketllocated %x (previous %x)\n",

384 0xfà& (
¡©
 >> 8), 
ýd
->
rx·ck
);

387 
ýd
->
rx·ck
 = 0xfà& (
¡©
 >> 8);

391 
	`put_»g
(
ýd
, 
LAN91CXX_POINTER
,

392 (
LAN91CXX_POINTER_RCV
 | 
LAN91CXX_POINTER_READ
 |

393 
LAN91CXX_POINTER_AUTO_INCR
 | 0x0000));

394 #ifdeà
LAN91CXX_32BIT_RX


395 
v®
 = 
	`g_d©a
(
ýd
);

396 
v®
 = 
	`CYG_LE32_TO_CPU
(val);

397 
¡©
 = 
v®
 & 0xffff;

398 
com¶
 = ((
v®
 >> 16) & 0xffff) - 6;

400 
¡©
 = 
	`g_d©a
(
ýd
);

401 
¡©
 = 
	`CYG_LE16_TO_CPU
(stat);

402 
com¶
 = 
	`g_d©a
(
ýd
);

403 
com¶
 = 
	`CYG_LE16_TO_CPU
(
Ën
) - 6;

406 #ifdeà
KEEP_STATISTICS


407 ià(
¡©
 & 
LAN91CXX_RX_STATUS_ALIGNERR
)

408 
	`INCR_STAT
(
ýd
, 
rx_®ign_rÜs
);

410 ià(
¡©
 & 
LAN91CXX_RX_STATUS_BADCRC
)

411 
	`INCR_STAT
(
ýd
, 
rx_üc_rÜs
);

412 ià(
¡©
 & 
LAN91CXX_RX_STATUS_TOOLONG
)

413 
	`INCR_STAT
(
ýd
, 
rx_too_lÚg_äames
);

414 ià(
¡©
 & 
LAN91CXX_RX_STATUS_TOOSHORT
)

415 
	`INCR_STAT
(
ýd
, 
rx_shÜt_äames
);

419 ià((
¡©
 & 
LAN91CXX_RX_STATUS_BAD
) == 0) {

420 
	`INCR_STAT
(
ýd
, 
rx_good
);

423 ià(
ýd
->
c111_»va
 || 
	`LAN91CXX_RX_STATUS_IS_ODD
(ýd, 
¡©
))

424 
com¶
++;

426 #ià
DEBUG
 & 1

427 
	`db_´tf
("goodx - st: 0x%04x,: 0x%04x\n", 
¡©
,

428 
com¶
);

432 ià(
com¶
 > (
h_hd
)) {

435 
com¶
 = ((complen + 3) & ~3);

437 
m
 = 
	`smc91111_®locmbufcha
(
com¶
, 
iå
);

439 
mbuf
 *
n
 = 
m
;

440 
	`db_´tf
("mbuf-chain:");

441 
n
) {

442 
	`db_´tf
("[%" 
PRIxPTR
 ":%x]",

443 
n
->
m_d©a
,

444 ()(
n
->
m_Ën
));

445 
n
 =->
m_Ãxt
;

447 
	`db_´tf
("\n");

450 ià(
m
) {

452 
	`Ïn91cxx_»cv
(
ýd
, 
m
);

460 
	`db1_´tf
("!badx: st: 0x%04x,: 0x%04x\n", 
¡©
, 
com¶
);

464 
	`put_»g
(
ýd
, 
LAN91CXX_MMU_COMMAND
, 
LAN91CXX_MMU_»m»l_rx_äame
);

467 
	}
}

469 
	$smc91111_rxD«mÚ
(*
¬g
)

471 
Ïn91cxx_´iv_d©a
 *
ýd
 = 
¬g
;

472 
¹ems_evt_£t
 
evts
;

473 
	`DEBUG_FUNCTION
();

476 
	`¹ems_bsdÃt_evt_»ûive
(
INTERRUPT_EVENT
,

477 
RTEMS_WAIT
 | 
RTEMS_EVENT_ANY
,

478 
RTEMS_NO_TIMEOUT
, &
evts
);

481 !(
	`g_»g
(
ýd
, 
LAN91CXX_FIFO_PORTS
) & 0x8000)) {

482 
	`»ad·ck
(
ýd
);

485 
	}
}

489 
	$£nd·ck
(
iâ
 *
iå
, 
mbuf
 *
m
)

491 
Ïn91cxx_´iv_d©a
 *
ýd
 = 
iå
->
if_soác
;

492 
i
, 
Ën
, 
¶
, 
tü
, 
odd
;

493 
mbuf
 *
n
 = 
m
;

494 *
sd©a
 = 
NULL
;

495 
ts
, 
cÚÞ
;

496 
ut16_t
 
·ck
, 
¡©us
;

497 
dbg_´efix
 = ">";

498 
	`DEBUG_FUNCTION
();

500 
ýd
->
txbusy
 = 1;

503 
tü
 = 
	`g_»g
(
ýd
, 
LAN91CXX_TCR
);

504 ià(0 =ð(
LAN91CXX_TCR_TXENA
 & 
tü
)) {

505 
	`db1_´tf
("> ENGINE RESTART:ü %x\n", 
tü
);

506 
tü
 |ð
LAN91CXX_TCR_TXENA
;

507 
	`put_»g
(
ýd
, 
LAN91CXX_TCR
, 
tü
);

513 
¶
 = 0;

514 
n
) {

515 
¶
 +ð
n
->
m_Ën
;

516 
n
 =->
m_Ãxt
;

521 
	`put_»g
(
ýd
, 
LAN91CXX_MMU_COMMAND
,

522 
LAN91CXX_MMU_®loc_fÜ_tx
 | ((
¶
 >> 8) & 0x07));

524 
i
 = 1024 * 1024;

526 
¡©us
 = 
	`g_»g
(
ýd
, 
LAN91CXX_INTERRUPT
);

527 } 0 =ð(
¡©us
 & 
LAN91CXX_INTERRUPT_ALLOC_INT
)

528 && (--
i
 > 0));

529 ià(
i
)

530 
·ck
 = 
	`g_»g
(
ýd
, 
LAN91CXX_PNR
);

532 
·ck
 = 0xffff;

533 
	`db1_´tf
(">+®loÿdack %04x\n", 
·ck
);

535 
·ck
 =acket >> 8;

536 ià(
·ck
 & 0x80) {

538 
	`db1_´tf
("Allocation failed! Retrying...\n");

543 
	`db4_´tf
(">+Txacketllocated %x (previous %x)\n",

544 
·ck
, 
ýd
->
tx·ck
);

546 
ýd
->
tx·ck
 = 
·ck
;

551 
	`put_»g
(
ýd
, 
LAN91CXX_PNR
, 
·ck
);

553 
	`put_»g
(
ýd
, 
LAN91CXX_POINTER
, 
LAN91CXX_POINTER_AUTO_INCR
 | 0x0000);

558 
	`put_d©a
(
ýd
, 
	`CYG_CPU_TO_LE16
(0));

560 
	`put_d©a
(
ýd
, 
	`CYG_CPU_TO_LE16
(0x7FE & (
¶
 + 6)));

563 
odd
 = 0;

564 
n
 = 
m
;

565 
n
) {

566 
sd©a
 = (*)
n
->
m_d©a
;

567 
Ën
 = 
n
->
m_Ën
;

569 
	`CYG_ASSERT
(
sd©a
, "!No sg dataointer here");

575 iàÐ(()
sd©a
 & 1è&& (
Ën
>1) ){

576 
	`put_d©a8
(
ýd
,*(*)
sd©a
);

577 
sd©a
 = (*)(()sdata + 1);

578 
odd
 = ~odd;

579 
Ën
--;

583 
Ën
 >= 17){

584 
	`put_d©a
(
ýd
, *(
sd©a
));

585 
	`put_d©a
(
ýd
, *(
sd©a
+1));

586 
	`put_d©a
(
ýd
, *(
sd©a
+2));

587 
	`put_d©a
(
ýd
, *(
sd©a
+3));

588 
	`put_d©a
(
ýd
, *(
sd©a
+4));

589 
	`put_d©a
(
ýd
, *(
sd©a
+5));

590 
	`put_d©a
(
ýd
, *(
sd©a
+6));

591 
	`put_d©a
(
ýd
, *(
sd©a
+7));

592 
sd©a
 += 8;

593 
Ën
 -= 16;

597 
Ën
 >= 3) {

598 
	`put_d©a
(
ýd
, *
sd©a
++);

599 
Ën
 -ð(*
sd©a
);

603 iàÐ
Ën
 > 1 ){

605 iàÐ!
odd
 || 
n
->
m_Ãxt
 ){

606 
	`put_d©a
(
ýd
, *
sd©a
++);

607 
Ën
 -ð(*
sd©a
);

612 
	`put_d©a8
(
ýd
,*(*)
sd©a
);

613 
sd©a
 = (*)(()sdata + 1);

614 
odd
 = 0;

615 
Ën
--;

618 }iàÐ(
Ën
>0è&& (
n
->
m_Ãxt
) ){

620 
	`put_d©a8
(
ýd
,*(*)
sd©a
);

621 
odd
 = ~odd;

624 
n
 =->
m_Ãxt
;

629 
cÚÞ
 = 0;

630 iàÐ
Ën
 > 0 ){

631 iàÐ!
odd
 ) {

633 
Úeby
 = *(*)
sd©a
;

634 
cÚÞ
 = 
Úeby
;

635 
cÚÞ
 |ð
LAN91CXX_CONTROLBYTE_ODD
;

637 
	`put_d©a8
(
ýd
,*(*)
sd©a
);

640 
cÚÞ
 |ð
LAN91CXX_CONTROLBYTE_CRC
;

641 
	`put_d©a
(
ýd
, 
	`CYG_CPU_TO_LE16
(
cÚÞ
));

643 
	`m_äm
(
m
);

644 
	`CYG_ASSERT
(
sd©a
, "!No sg dataointer outside");

649 
ts
 = 
	`g_»g
(
ýd
, 
LAN91CXX_INTERRUPT
) & 0xff00;

650 
	`put_»g
(
ýd
, 
LAN91CXX_INTERRUPT
,

651 
ts
 | 
LAN91CXX_INTERRUPT_TX_EMPTY_INT
);

652 
	`put_»g
(
ýd
, 
LAN91CXX_INTERRUPT
, 
ts
 | 
LAN91CXX_INTERRUPT_TX_INT_M
);

655 
	`put_»g
(
ýd
, 
LAN91CXX_MMU_COMMAND
, 
LAN91CXX_MMU_q_·ck
);

657 
ts
 = 
	`g_»g
(
ýd
, 
LAN91CXX_INTERRUPT
);

658 
	`db1_´tf
(">END: iÁ © TX: %04x\n", 
ts
);

659 
dbg_´efix
 = "";

660 
	}
}

662 
	$smc91111_txD«mÚ
(*
¬g
)

664 
Ïn91cxx_´iv_d©a
 *
ýd
 = 
¬g
;

665 
iâ
 *
iå
 = &
ýd
->
¬pcom
.
ac_if
;

666 
mbuf
 *
m
;

667 
¹ems_evt_£t
 
evts
;

668 
	`DEBUG_FUNCTION
();

675 
¹ems_bsdÃt_evt_»ûive


676 (
SMC91111_START_TRANSMIT_EVENT
,

677 
RTEMS_EVENT_ANY
 | 
RTEMS_WAIT
, 
RTEMS_NO_TIMEOUT
, &
evts
);

685 
	`IF_DEQUEUE
(&
iå
->
if_¢d
, 
m
);

686 ià(!
m
)

688 
	`£nd·ck
(
iå
, 
m
);

690 
iå
->
if_æags
 &ð~
IFF_OACTIVE
;

694 
	}
}

697 
	$smc91111_¡¬t
(
iâ
 *
iå
)

699 
Ïn91cxx_´iv_d©a
 *
ýd
 = 
iå
->
if_soác
;

701 ià((
iå
->
if_æags
 & (
IFF_RUNNING
 | 
IFF_OACTIVE
)) != IFF_RUNNING)

704 
	`¹ems_bsdÃt_evt_£nd
(
ýd
->
txD«mÚTid
, 
START_TRANSMIT_EVENT
);

705 
iå
->
if_æags
 |ð
IFF_OACTIVE
;

707 
	}
}

710 
	$Ïn91cxx_fish_£Á
(
Ïn91cxx_´iv_d©a
 *
ýd
)

712 
·ck
, 
tü
;

713 
§ved_·ck
;

715 
	`DEBUG_FUNCTION
();

717 
	`INCR_STAT
(
ýd
, 
tx_com¶e
);

719 
§ved_·ck
 = 
	`g_»g
(
ýd
, 
LAN91CXX_PNR
);

728 
·ck
 = 
	`g_»g
(
ýd
, 
LAN91CXX_FIFO_PORTS
);

729 
	`db1_´tf
("%s:START: fifØ%04x \n", 
__FUNCTION__
, 
·ck
);

732 
»g
;

734 
»g
 = 
	`g_»g
(
ýd
, 
LAN91CXX_EPH_STATUS
);

737 ià(
»g
 & 
LAN91CXX_STATUS_TX_UNRN
)

738 
	`INCR_STAT
(
ýd
, 
tx_undrun
);

739 ià(
»g
 & 
LAN91CXX_STATUS_LOST_CARR
)

740 
	`INCR_STAT
(
ýd
, 
tx_ÿ¼r_loss
);

741 ià(
»g
 & 
LAN91CXX_STATUS_LATCOL
)

742 
	`INCR_STAT
(
ýd
, 
tx_Ï_cÞlisiÚs
);

743 ià(
»g
 & 
LAN91CXX_STATUS_TX_DEFR
)

744 
	`INCR_STAT
(
ýd
, 
tx_deã¼ed
);

745 ià(
»g
 & 
LAN91CXX_STATUS_SQET
)

746 
	`INCR_STAT
(
ýd
, 
tx_sqe¡rÜs
);

747 ià(
»g
 & 
LAN91CXX_STATUS_16COL
)

748 
	`INCR_STAT
(
ýd
, 
tx_max_cÞlisiÚs
);

749 ià(
»g
 & 
LAN91CXX_STATUS_MUL_COL
)

750 
	`INCR_STAT
(
ýd
, 
tx_muÉ_cÞlisiÚs
);

751 ià(
»g
 & 
LAN91CXX_STATUS_SNGL_COL
)

752 
	`INCR_STAT
(
ýd
, 
tx_sgË_cÞlisiÚs
);

753 ià(
»g
 & 
LAN91CXX_STATUS_TX_SUC
)

754 
	`INCR_STAT
(
ýd
, 
tx_good
);

756 
ýd
->
¡©s
.
tx_tÙ®_cÞlisiÚs
 =

757 
ýd
->
¡©s
.
tx_Ï_cÞlisiÚs
 +

758 
ýd
->
¡©s
.
tx_max_cÞlisiÚs
 +

759 
ýd
->
¡©s
.
tx_muÉ_cÞlisiÚs
 +

760 
ýd
->
¡©s
.
tx_sgË_cÞlisiÚs
;

768 
tü
 = 
	`g_»g
(
ýd
, 
LAN91CXX_TCR
);

769 ià(0 =ð(
LAN91CXX_TCR_TXENA
 & 
tü
)) {

770 
	`db1_´tf
("%s: ENGINE RESTART:ü %x \n", 
__FUNCTION__
, 
tü
);

771 
tü
 |ð
LAN91CXX_TCR_TXENA
;

772 
	`put_»g
(
ýd
, 
LAN91CXX_TCR
, 
tü
);

775 
·ck
 &= 0xff;

778 
	`put_»g
(
ýd
, 
LAN91CXX_PNR
, cpd->
tx·ck
);

779 
	`put_»g
(
ýd
, 
LAN91CXX_MMU_COMMAND
, 
LAN91CXX_MMU_»l_·ck
);

781 
	`g_»g
(
ýd
, 
LAN91CXX_MMU_COMMAND
è& 
LAN91CXX_MMU_COMMAND_BUSY
) ;

784 
	`put_»g
(
ýd
, 
LAN91CXX_PNR
, 
§ved_·ck
);

786 
	}
}

793 
	$smc91111_¡©s
(
Ïn91cxx_´iv_d©a
 *
´iv
)

795 
	`´tf
("tx_good :%-8d\n", 
´iv
->
¡©s
.
tx_good
);

796 
	`´tf
("tx_max_cÞlisiÚ  :%-8d\n", 
´iv
->
¡©s
.
tx_max_cÞlisiÚs
);

797 
	`´tf
("tx_Ï_cÞlisiÚ  :%-8d\n", 
´iv
->
¡©s
.
tx_Ï_cÞlisiÚs
);

798 
	`´tf
("tx_undruÀ :%-8d\n", 
´iv
->
¡©s
.
tx_undrun
);

799 
	`´tf
("tx_ÿ¼r_los  :%-8d\n", 
´iv
->
¡©s
.
tx_ÿ¼r_loss
);

800 
	`´tf
("tx_deã¼ed :%-8d\n", 
´iv
->
¡©s
.
tx_deã¼ed
);

801 
	`´tf
("tx_sqe¡rÜ  :%-8d\n", 
´iv
->
¡©s
.
tx_sqe¡rÜs
);

802 
	`´tf
("tx_sgË_cÞlisiÚs:%-8d\n", 
´iv
->
¡©s
.
tx_sgË_cÞlisiÚs
);

803 
	`´tf
("tx_muÉ_cÞlisiÚ  :%-8d\n", 
´iv
->
¡©s
.
tx_muÉ_cÞlisiÚs
);

804 
	`´tf
("tx_tÙ®_cÞlisiÚ :%-8d\n", 
´iv
->
¡©s
.
tx_tÙ®_cÞlisiÚs
);

805 
	`´tf
("rx_good :%-8d\n", 
´iv
->
¡©s
.
rx_good
);

806 
	`´tf
("rx_üc_rÜ  :%-8d\n", 
´iv
->
¡©s
.
rx_üc_rÜs
);

807 
	`´tf
("rx_®ign_rÜ  :%-8d\n", 
´iv
->
¡©s
.
rx_®ign_rÜs
);

808 
	`´tf
("rx_»sourû_rÜ  :%-8d\n", 
´iv
->
¡©s
.
rx_»sourû_rÜs
);

809 
	`´tf
("rx_ovrun_rÜ  :%-8d\n", 
´iv
->
¡©s
.
rx_ovrun_rÜs
);

810 
	`´tf
("rx_cÞlisiÚ  :%-8d\n", 
´iv
->
¡©s
.
rx_cÞlisiÚs
);

811 
	`´tf
("rx_shÜt_äame  :%-8d\n", 
´iv
->
¡©s
.
rx_shÜt_äames
);

812 
	`´tf
("rx_too_lÚg_äame  :%-8d\n", 
´iv
->
¡©s
.
rx_too_lÚg_äames
);

813 
	`´tf
("rx_symbÞ_rÜ  :%-8d\n", 
´iv
->
¡©s
.
rx_symbÞ_rÜs
);

814 
	`´tf
("¼u±  :%-8d\n", 
´iv
->
¡©s
.
¼u±s
);

815 
	`´tf
("rx_couÁ :%-8d\n", 
´iv
->
¡©s
.
rx_couÁ
);

816 
	`´tf
("rx_div :%-8d\n", 
´iv
->
¡©s
.
rx_div
);

817 
	`´tf
("rx_»sourû :%-8d\n", 
´iv
->
¡©s
.
rx_»sourû
);

818 
	`´tf
("rx_»¡¬ :%-8d\n", 
´iv
->
¡©s
.
rx_»¡¬t
);

819 
	`´tf
("tx_couÁ :%-8d\n", 
´iv
->
¡©s
.
tx_couÁ
);

820 
	`´tf
("tx_com¶ :%-8d\n", 
´iv
->
¡©s
.
tx_com¶e
);

821 
	`´tf
("tx_drÝ³d :%-8d\n", 
´iv
->
¡©s
.
tx_drÝ³d
);

822 
	}
}

827 
	$smc91111_ioùl
(
iâ
 *
iå
, 
ioùl_commªd_t
 
commªd
, 
ÿddr_t
 
d©a
)

829 
Ïn91cxx_´iv_d©a
 *
ýd
 = 
iå
->
if_soác
;

830 
rÜ
 = 0;

831 
	`DEBUG_FUNCTION
();

833 
commªd
) {

834 
SIOCGIFADDR
:

835 
SIOCSIFADDR
:

836 
	`db_´tf
("SIOCSIFADDR\n");

837 
	`h_ioùl
(
iå
, 
commªd
, 
d©a
);

840 
SIOCSIFFLAGS
:

841 
	`db_´tf
("SIOCSIFFLAGS\n");

842 
iå
->
if_æags
 & (
IFF_UP
 | 
IFF_RUNNING
)) {

843 
IFF_RUNNING
:

844 
	`smc91111_¡Ý
(
ýd
);

847 
IFF_UP
:

848 
	`smc91111_
(
ýd
);

851 
IFF_UP
 | 
IFF_RUNNING
:

852 
	`smc91111_¡Ý
(
ýd
);

853 
	`smc91111_
(
ýd
);

861 
SIO_RTEMS_SHOW_STATS
:

862 
	`db_´tf
("SIO_RTEMS_SHOW_STATS\n");

863 
	`smc91111_¡©s
(
ýd
);

870 
rÜ
 = 
EINVAL
;

874  
rÜ
;

875 
	}
}

880 
	$_¹ems_smc91111_driv_©ch
 (
¹ems_bsdÃt_ifcÚfig
 *
cÚfig
,

881 
scmv91111_cÚfigu¿tiÚ
 * 
ch
)

883 
iâ
 *
iå
;

884 
Ïn91cxx_´iv_d©a
 *
ýd
;

885 
unNumb
;

886 *
unName
;

887 
mtu
;

888 
	`DEBUG_FUNCTION
();

891 ià((
unNumb
 = 
	`¹ems_bsdÃt_·r£_driv_Çme
(
cÚfig
, &
unName
)) < 0) {

892 
	`db_´tf
("Unnumb < 0: %d\n", 
unNumb
);

896 
	`db_´tf
("Unnumb: %d, ba£addr: 0x%p\n", 
unNumb
, 
ch
->
ba£addr
);

898 
ýd
 = &
smc91111
;

899 
iå
 = &
ýd
->
¬pcom
.
ac_if
;

900 
	`mem£t
(
ýd
, 0, (*cpd));

902 
ýd
->
cÚfig
 = *
ch
;

903 
ýd
->
ba£
 = 
ch
->
ba£addr
;

905 ià(
	`smc_´obe
(
ýd
)) {

909 ià(
cÚfig
->
h¬dw¬e_add»ss
) {

910 
	`memýy
(
ýd
->
¬pcom
.
ac_addr
, 
cÚfig
->
h¬dw¬e_add»ss
, 
ETHER_ADDR_LEN
);

912 #ifdeà
SMC91111_ENADDR_IS_SETUP


914 
i
;

915 
i
 = 0; i < (
ýd
->
addr
); i += 2) {

916 
r
 = 
	`g_»g
(
ýd
, 
LAN91CXX_IA01
 + 
i
 / 2);

917 
ýd
->
¬pcom
.
ac_addr
[
i
] = 
r
;

918 
ýd
->
¬pcom
.
ac_addr
[
i
+1] = 
r
 >> 8;

922 
ýd
->
¬pcom
.
ac_addr
[0] = 0x12;

923 
ýd
->
¬pcom
.
ac_addr
[1] = 0x13;

924 
ýd
->
¬pcom
.
ac_addr
[2] = 0x14;

925 
ýd
->
¬pcom
.
ac_addr
[3] = 0x15;

926 
ýd
->
¬pcom
.
ac_addr
[4] = 0x16;

927 
ýd
->
¬pcom
.
ac_addr
[5] = 0x17;

931 
ýd
->
addr
[0] = cpd->
¬pcom
.
ac_addr
[0];

932 
ýd
->
addr
[1] = cpd->
¬pcom
.
ac_addr
[1];

933 
ýd
->
addr
[2] = cpd->
¬pcom
.
ac_addr
[2];

934 
ýd
->
addr
[3] = cpd->
¬pcom
.
ac_addr
[3];

935 
ýd
->
addr
[4] = cpd->
¬pcom
.
ac_addr
[4];

936 
ýd
->
addr
[5] = cpd->
¬pcom
.
ac_addr
[5];

937 
ýd
->
½c_cur_mode
 =

938 
LAN91CXX_RPCR_LEDA_RX
 | 
LAN91CXX_RPCR_LEDB_LINK
 |

939 
LAN91CXX_RPCR_ANEG
;

941 ià(
cÚfig
->
mtu
)

942 
mtu
 = 
cÚfig
->mtu;

944 
mtu
 = 
ETHERMTU
;

949 
iå
->
if_soác
 = 
ýd
;

950 
iå
->
if_un
 = 
unNumb
;

951 
iå
->
if_Çme
 = 
unName
;

952 
iå
->
if_mtu
 = 
mtu
;

953 
iå
->
if_
 = 
smc91111_
;

954 
iå
->
if_ioùl
 = 
smc91111_ioùl
;

955 
iå
->
if_¡¬t
 = 
smc91111_¡¬t
;

956 
iå
->
if_ouut
 = 
h_ouut
;

957 
iå
->
if_æags
 = 
IFF_BROADCAST
 | 
IFF_SIMPLEX
;

958 ià(
iå
->
if_¢d
.
ifq_maxËn
 == 0)

959 
iå
->
if_¢d
.
ifq_maxËn
 = 
ifqmaxËn
;

964 
	`if_©ch
(
iå
);

965 
	`h_içach
(
iå
);

967 #ià
DEBUG


968 
	`´tf
("SMC91111 : driver has beenttached\n");

972 
	}
};

979 
	$smc91111_
(*
¬g
)

981 
Ïn91cxx_´iv_d©a
 *
ýd
 = 
¬g
;

982 
iâ
 *
iå
 = &
ýd
->
¬pcom
.
ac_if
;

983 
	`DEBUG_FUNCTION
();

985 ià(
ýd
->
txD«mÚTid
 == 0) {

987 
	`Ïn91cxx_h¬dw¬e_
(
ýd
);

988 
	`Ïn91cxx_¡¬t
(
iå
);

990 
ýd
->
rxD«mÚTid
 = 
	`¹ems_bsdÃt_Ãw´oc
("DCrx", 4096,

991 
smc91111_rxD«mÚ
, 
ýd
);

992 
ýd
->
txD«mÚTid
 =

993 
	`¹ems_bsdÃt_Ãw´oc
("DCtx", 4096, 
smc91111_txD«mÚ
, 
ýd
);

995 
	`Ïn91cxx_¡¬t
(
iå
);

1001 
iå
->
if_æags
 |ð
IFF_RUNNING
;

1002 
	}
}

1007 
	$smc91111_¡Ý
(
Ïn91cxx_´iv_d©a
 *
ýd
)

1009 
iâ
 *
iå
 = &
ýd
->
¬pcom
.
ac_if
;

1010 
	`DEBUG_FUNCTION
();

1012 
iå
->
if_æags
 &ð~
IFF_RUNNING
;

1015 
	`put_»g
(
ýd
, 
LAN91CXX_RCR
, 
LAN91CXX_RCR_SOFT_RST
);

1016 
	`put_»g
(
ýd
, 
LAN91CXX_RCR
, 0);

1017 
ýd
->
txbusy
 = cpd->
wh_£nd
 = 0;

1019 
	}
}

1021 
	$Ïn91cxx_h¬dw¬e_
(
Ïn91cxx_´iv_d©a
 *
ýd
)

1023 
v®
;

1024 
i
, 
rc
;

1026 
	`DEBUG_FUNCTION
();

1028 
ýd
->
txbusy
 = cpd->
wh_£nd
 = 0;

1031 #ifdeà
BSP_FEATURE_IRQ_EXTENSION


1033 
¹ems_¡©us_code
 
sc
 = 
RTEMS_SUCCESSFUL
;

1035 
sc
 = 
	`¹ems_¼u±_hªdËr_¡®l
(

1036 
ýd
->
cÚfig
.
veùÜ
,

1037 
ýd
->
cÚfig
.
fo
,

1038 
ýd
->
cÚfig
.
ÝtiÚs
,

1039 
ýd
->
cÚfig
.
¼u±_w¿µ
,

1040 
ýd


1042 ià(
sc
 !ð
RTEMS_SUCCESSFUL
) {

1043 
	`´tf
("¹ems_¼u±_hªdËr_¡®È»tuºed %d.\n", 
sc
);

1048 
	`db_´tf
("In¡®ÈÏn91cxx i¤vec/q %d\n", 
ýd
->
cÚfig
.
veùÜ
);

1049 
rc
 = 
	`¹ems_¼u±_hªdËr_¡®l
(
ýd
->
cÚfig
.
veùÜ
, "smc91cxx",

1050 
RTEMS_INTERRUPT_SHARED
, 
Ïn91cxx_¼u±_hªdËr
, 
ýd
);

1051 ià(
rc
 !ð
RTEMS_SUCCESSFUL
)

1056 
	`put_»g
(
ýd
, 
LAN91CXX_RCR
, 
LAN91CXX_RCR_SOFT_RST
);

1057 
	`put_»g
(
ýd
, 
LAN91CXX_RCR
, 0);

1058 
	`HAL_DELAY_US
(100000);

1059 
	`put_»g
(
ýd
, 
LAN91CXX_CONFIG
, 0x9000);

1060 
	`put_»g
(
ýd
, 
LAN91CXX_RCR
, 0);

1061 
	`put_»g
(
ýd
, 
LAN91CXX_TCR
, 0);

1062 
	`put_»g
(
ýd
, 
LAN91CXX_MMU_COMMAND
, 
LAN91CXX_MMU_»£t_mmu
);

1064 
v®
 = 
	`g_»g
(
ýd
, 
LAN91CXX_EPH_STATUS
);

1066 
v®
 = 
	`g_bªk£l
(
ýd
);

1067 
	`db9_´tf
("LAN91CXX - supposed BankReg @ %x = %04x\n",

1068 ()(
ýd
->
ba£
 + 
LAN91CXX_BS
), 
v®
);

1070 ià((0xff00 & 
v®
) != 0x3300) {

1071 
	`´tf
("No 91Cxx signature");

1072 
	`´tf
("smsc_lan91cxx_init: No 91Cxx signature found\n");

1076 
v®
 = 
	`g_»g
(
ýd
, 
LAN91CXX_REVISION
);

1078 
	`db9_´tf
("LAN91CXX -ype: %01x,ev: %01x\n",

1079 (
v®
 >> 4) & 0xf, val & 0xf);

1082 
ýd
->
c111_»va
 = (
v®
 == 0x3390);

1085 ià(
ýd
->
cÚfig_addr
)

1086 (*
ýd
->
cÚfig_addr
) (cpd);

1088 
	`db9_´tf
("LAN91CXX - stus: %04x\n", 
v®
);

1090 
db9_´tf


1092 
ýd
->
addr
[0], cpd->enaddr[1], cpd->enaddr[2],

1093 
ýd
->
addr
[3], cpd->enaddr[4], cpd->enaddr[5]);

1095 
i
 = 0; i < (
ýd
->
addr
); i += 2)

1096 
	`put_»g
(
ýd
, 
LAN91CXX_IA01
 + 
i
 / 2,

1097 
ýd
->
addr
[
i
] | (cpd->enaddr[i + 1] << 8));

1100 
	}
}

1108 
	$Ïn91cxx_¡¬t
(
iâ
 *
iå
)

1110 
Ïn91cxx_´iv_d©a
 *
ýd
 = 
iå
->
if_soác
;

1112 
ut16_t
 

;

1113 
ut16_t
 
phy_ùl
;

1114 
day
;

1115 
	`DEBUG_FUNCTION
();

1117 
	`HAL_DELAY_US
(100000);

1120 
phy_ùl
 = 
	`Ïn91cxx_»ad_phy
(
ýd
, 0, 
LAN91CXX_PHY_CTRL
);

1121 
phy_ùl
 &ð~
LAN91CXX_PHY_CTRL_MII_DIS
;

1122 
	`Ïn91cxx_wre_phy
(
ýd
, 0, 
LAN91CXX_PHY_CTRL
, 
phy_ùl
);

1125 
	`put_»g
(
ýd
, 
LAN91CXX_RPCR
,

1126 
LAN91CXX_RPCR_LEDA_RX
 | 
LAN91CXX_RPCR_LEDB_LINK
 |

1127 
LAN91CXX_RPCR_ANEG
);

1128 
ýd
->
½c_cur_mode
 =

1129 
LAN91CXX_RPCR_LEDA_RX
 | 
LAN91CXX_RPCR_LEDB_LINK
 |

1130 
LAN91CXX_RPCR_ANEG
;

1134 
day
 = 50;

1135 !(
	`Ïn91cxx_»ad_phy
(
ýd
, 0, 
LAN91CXX_PHY_STAT
) & 0x20)) {

1136 ià(--
day
 <= 0) {

1137 
	`´tf
("Timeoututonegotiation\n");

1140 
	`HAL_DELAY_US
(100000);

1143 
	`put_»g
(
ýd
, 
LAN91CXX_MMU_COMMAND
, 
LAN91CXX_MMU_»£t_mmu
);

1145 
	`put_»g
(
ýd
, 
LAN91CXX_INTERRUPT
, 0);

1146 

 = 
	`g_»g
(
ýd
, 
LAN91CXX_INTERRUPT
);

1147 
	`put_»g
(
ýd
, 
LAN91CXX_INTERRUPT
, 

 &

1148 (
LAN91CXX_INTERRUPT_TX_INT
 |

1149 
LAN91CXX_INTERRUPT_TX_EMPTY_INT
 |

1150 
LAN91CXX_INTERRUPT_RX_OVRN_INT
 | 
LAN91CXX_INTERRUPT_ERCV_INT
));

1151 
	`put_»g
(
ýd
, 
LAN91CXX_RCR
,

1152 
LAN91CXX_RCR_STRIP_CRC
 | 
LAN91CXX_RCR_RXEN
 |

1153 
LAN91CXX_RCR_ALMUL
);

1154 
	`put_»g
(
ýd
, 
LAN91CXX_TCR
, 
LAN91CXX_TCR_TXENA
 | 
LAN91CXX_TCR_PAD_EN
);

1155 
	`put_»g
(
ýd
, 
LAN91CXX_CONTROL
, 
LAN91CXX_CONTROL_AUTO_RELEASE
);

1156 
	`put_»g
(
ýd
, 
LAN91CXX_INTERRUPT
,

1157 
LAN91CXX_INTERRUPT_RCV_INT_M
);

1160 #ifdeà
ETH_DRV_FLAGS_PROMISC_MODE


1161 !ð(
æags
 & 
ETH_DRV_FLAGS_PROMISC_MODE
)

1163 è|| (
iå
->
if_æags
 & 
IFF_PROMISC
)

1166 
rü
;

1167 
rü
 = 
	`g_»g
(
ýd
, 
LAN91CXX_RCR
);

1168 
rü
 |ð
LAN91CXX_RCR_PRMS
;

1169 
	`put_»g
(
ýd
, 
LAN91CXX_RCR
, 
rü
);

1171 
	}
}

1175 cÚ¡ *
	gch_ids
[15] = {

1176 
NULL
, NULL, NULL,

1184 
NULL
, NULL,

1185 
NULL
, NULL, NULL

1188 
	$smc_´obe
(
Ïn91cxx_´iv_d©a
 *
ýd
)

1190 
bªk
;

1191 
»visiÚ_»gi¡
;

1193 
	`DEBUG_FUNCTION
();

1196 
	`HAL_READ_UINT16
(
ýd
->
ba£
 + (
LAN91CXX_BS
), 
bªk
);

1197 
bªk
 = 
	`CYG_LE16_TO_CPU
(bank);

1198 ià((
bªk
 & 0xFF00) != 0x3300) {

1199 
	`db_´tf
("<1>Smcrobe bank check 1 failed.\n");

1200  -
ENODEV
;

1204 
	`HAL_WRITE_UINT16
(
ýd
->
ba£
 + (
LAN91CXX_BS
), 
	`CYG_CPU_TO_LE16
(0 >> 3));

1205 
	`HAL_READ_UINT16
(
ýd
->
ba£
 + (
LAN91CXX_BS
), 
bªk
);

1206 
bªk
 = 
	`CYG_LE16_TO_CPU
(bank);

1207 ià((
bªk
 & 0xFF00) != 0x3300) {

1208 
	`db_´tf
("<1>Smcrobe bank check 2 failed.\n");

1209  -
ENODEV
;

1211 #ià
SMC_DEBUG
 > 3

1213 
bªk16
, 
bªk16_0
, 
bªk16_1
;

1214 
	`HAL_READ_UINT16
(
ýd
->
ba£
 + (
LAN91CXX_BS
), 
bªk16
);

1215 
bªk
 = 
	`CYG_LE16_TO_CPU
(bank);

1216 
	`HAL_READ_UINT8
(
ýd
->
ba£
 + (
LAN91CXX_BS
), 
bªk16_0
);

1217 
	`HAL_READ_UINT8
(
ýd
->
ba£
 + (
LAN91CXX_BS
 + 1), 
bªk16_1
);

1219 
db_´tf


1220 ("smc_´obe:Bªkd ¨16 b v®ue:0x%04x\n", 
bªk16
);

1221 
db_´tf


1223 
bªk16_0
);

1224 
db_´tf


1226 
bªk16_1
);

1233 
»visiÚ_»gi¡
 = 
	`g_»g
(
ýd
, 
LAN91CXX_REVISION
);

1234 ià(!
ch_ids
[(
»visiÚ_»gi¡
 >> 4) & 0xF]) {

1236 
db_´tf


1237 ("smc_´obe: IO %" 
PRIxPTR
 ": Unrecognizedevisionegister:"

1238 " %x, CÚùuthÜ. \n", 
ýd
->
ba£
,

1239 
»visiÚ_»gi¡
);

1241  -
ENODEV
;

1243 
	`db_´tf
("LAN91CXX(0x%x) -ype: %s,ev: %01x\n",

1244 
»visiÚ_»gi¡
,

1245 
ch_ids
[(
»visiÚ_»gi¡
 >> 4) & 0xF],

1246 
»visiÚ_»gi¡
 & 0xf);

1249 ià(
»visiÚ_»gi¡
 == 0x3390) {

1250 
	`db_´tf
("!Revision A\n");

1254 
	}
}

1259 
	$Ïn91cxx_phy_fixed
(
Ïn91cxx_´iv_d©a
 *
ýd
)

1261 
my_fixed_ÿps
;

1262 
cfg1
;

1264 
	`DEBUG_FUNCTION
();

1265 
	`db4_´tf
("lan91cxx_phy_fixed: full duplex: %d, speed: %d\n",

1266 
ýd
->
cÚfig
.
ùl_rfdu¶x
, cpd->cÚfig.
ùl_r¥d
);

1269 
cfg1
 = 
	`Ïn91cxx_»ad_phy
(
ýd
, 0, 
LAN91CXX_PHY_CONFIG1
);

1270 
cfg1
 |ð
PHY_CFG1_LNKDIS
;

1271 
	`Ïn91cxx_wre_phy
(
ýd
, 0, 
LAN91CXX_PHY_CONFIG1
, 
cfg1
);

1274 
my_fixed_ÿps
 = 0;

1276 ià(
ýd
->
cÚfig
.
ùl_rfdu¶x
)

1277 
my_fixed_ÿps
 |ð
LAN91CXX_PHY_CTRL_DPLX
;

1279 ià(
ýd
->
cÚfig
.
ùl_r¥d
 == 100)

1280 
my_fixed_ÿps
 |ð
LAN91CXX_PHY_CTRL_SPEED
;

1283 
	`Ïn91cxx_wre_phy
(
ýd
, 0, 
LAN91CXX_PHY_CTRL
, 
my_fixed_ÿps
);

1286 
	`put_»g
(
ýd
, 
LAN91CXX_RPCR
, cpd->
½c_cur_mode
);

1289 
	}
}

1294 
	$Ïn91cxx_phy_cÚfigu»
(
Ïn91cxx_´iv_d©a
 *
ýd
)

1297 
phyaddr
;

1298 
my_phy_ÿps
;

1299 
my_ad_ÿps
;

1300 
¡©us
 = 0;

1301 
çed
 = 0, 
day
;

1303 
	`DEBUG_FUNCTION
();

1306 
ýd
->
autÚeg_aùive
 = 1;

1309 
phyaddr
 = 
ýd
->phyaddr;

1312 
	`Ïn91cxx_wre_phy
(
ýd
, 0, 
PHY_CNTL_REG
, 
PHY_CNTL_RST
);

1315 
day
 = 50;

1316 
day
--) {

1317 ià(!(
	`Ïn91cxx_»ad_phy
(
ýd
, 0, 
PHY_CNTL_REG
)

1318 & 
PHY_CNTL_RST
)) {

1321 
	`HAL_DELAY_US
(100000);

1324 ià(
day
 < 1) {

1325 
	`db_´tf
("smc91111:!PHYesetimed out\n");

1326 
smc_phy_cÚfigu»_ex
;

1330 
ýd
->
Ï¡Phy18
 = 
	`Ïn91cxx_»ad_phy
(ýd, 0, 
PHY_INT_REG
);

1334 
	`Ïn91cxx_wre_phy
(
ýd
, 0, 
PHY_MASK_REG
,

1335 
PHY_INT_LOSSSYNC
 | 
PHY_INT_CWRD
 | 
PHY_INT_SSD


1336 | 
PHY_INT_ESD
 | 
PHY_INT_RPOL
 | 
PHY_INT_JAB
 |

1337 
PHY_INT_SPDDET
 | 
PHY_INT_DPLXDET
);

1340 
	`put_»g
(
ýd
, 
LAN91CXX_RPCR
, cpd->
½c_cur_mode
);

1343 
my_phy_ÿps
 = 
	`Ïn91cxx_»ad_phy
(
ýd
, 
phyaddr
, 
PHY_STAT_REG
);

1344 
my_ad_ÿps
 = 
PHY_AD_CSMA
;

1346 ià(
my_phy_ÿps
 & 
PHY_STAT_CAP_T4
)

1347 
my_ad_ÿps
 |ð
PHY_AD_T4
;

1349 ià(
my_phy_ÿps
 & 
PHY_STAT_CAP_TXF
)

1350 
my_ad_ÿps
 |ð
PHY_AD_TX_FDX
;

1352 ià(
my_phy_ÿps
 & 
PHY_STAT_CAP_TXH
)

1353 
my_ad_ÿps
 |ð
PHY_AD_TX_HDX
;

1355 ià(
my_phy_ÿps
 & 
PHY_STAT_CAP_TF
)

1356 
my_ad_ÿps
 |ð
PHY_AD_10_FDX
;

1358 ià(
my_phy_ÿps
 & 
PHY_STAT_CAP_TH
)

1359 
my_ad_ÿps
 |ð
PHY_AD_10_HDX
;

1362 ià(
ýd
->
cÚfig
.
ùl_r¥d
 != 100) {

1363 
my_ad_ÿps
 &ð~(
PHY_AD_T4
 | 
PHY_AD_TX_FDX
 | 
PHY_AD_TX_HDX
);

1366 ià(!
ýd
->
cÚfig
.
ùl_rfdu¶x
) {

1367 
my_ad_ÿps
 &ð~(
PHY_AD_TX_FDX
 | 
PHY_AD_10_FDX
);

1371 
	`Ïn91cxx_wre_phy
(
ýd
, 0, 
PHY_AD_REG
, 
my_ad_ÿps
);

1373 
	`db4_´tf
("smc91111:phy c­s=%x\n", 
my_phy_ÿps
);

1374 
	`db4_´tf
("smc91111:phydvti£d c­s=%x\n", 
my_ad_ÿps
);

1377 ià(!(
ýd
->
cÚfig
.
ùl_autÚeg
)) {

1378 
	`Ïn91cxx_phy_fixed
(
ýd
);

1380 
smc_phy_cÚfigu»_ex
;

1384 
	`Ïn91cxx_wre_phy
(
ýd
, 0, 
PHY_CNTL_REG
,

1385 
PHY_CNTL_ANEG_EN
 | 
PHY_CNTL_ANEG_RST
);

1389 
day
 = 50;

1391 ((
¡©us
 =

1392 
	`Ïn91cxx_»ad_phy
(
ýd
, 0, 
LAN91CXX_PHY_STAT
)) & 0x20)) {

1393 ià(--
day
 <= 0) {

1394 
	`´tf
("Timeoututonegotiation\n");

1395 
çed
 = 1;

1400 ià(
¡©us
 & 
PHY_STAT_REM_FLT
) {

1401 
	`db_´tf
("smc91111:PHYemote fault detected\n");

1404 
	`db_´tf
("smc91111:PHYestartinguto-negotiation\n");

1405 
	`Ïn91cxx_wre_phy
(
ýd
, 0, 
PHY_CNTL_REG
,

1406 
PHY_CNTL_ANEG_EN
 |

1407 
PHY_CNTL_ANEG_RST
 |

1408 
PHY_CNTL_SPEED
 | 
PHY_CNTL_DPLX
);

1410 
	`HAL_DELAY_US
(100000);

1414 ià(
¡©us
 & 
PHY_STAT_REM_FLT
) {

1415 
	`db_´tf
("smc91111:PHYemote fault detected\n");

1416 
çed
 = 1;

1422 ià(
ýd
->
Ï¡Phy18
 & 
PHY_INT_SPDDET
) {

1423 
	`db_´tf
("smc91111:PHY 100BaseT\n");

1424 
ýd
->
½c_cur_mode
 |ð
LAN91CXX_RPCR_SPEED
;

1426 
	`db_´tf
("smc91111:PHY 10BaseT\n");

1427 
ýd
->
½c_cur_mode
 &ð~
LAN91CXX_RPCR_SPEED
;

1430 ià(
ýd
->
Ï¡Phy18
 & 
PHY_INT_DPLXDET
) {

1431 
	`db_´tf
("smc91111:PHY Full Duplex\n");

1432 
ýd
->
½c_cur_mode
 |ð
LAN91CXX_RPCR_DPLX
;

1434 
	`db_´tf
("smc91111:PHY Half Duplex\n");

1435 
ýd
->
½c_cur_mode
 &ð~
LAN91CXX_RPCR_DPLX
;

1439 
	`put_»g
(
ýd
, 
LAN91CXX_RPCR
, cpd->
½c_cur_mode
);

1441 
smc_phy_cÚfigu»_ex
:

1444 
ýd
->
autÚeg_aùive
 = 0;

1445 
	}
}

1448 
ut16_t


1449 
	$Ïn91cxx_»ad_phy
(
Ïn91cxx_´iv_d©a
 *
ýd
, 
ut8_t
 
phyaddr
,

1450 
ut8_t
 
phy»g
)

1452 
i
, 
mask
, 
put_idx
, 
þk_idx
 = 0;

1453 
ut16_t
 
mii_»g
, 
v®ue
;

1454 
ut8_t
 
bs
[64];

1457 
i
 = 0; i < 32; ++i)

1458 
bs
[
þk_idx
++] = 
LAN91CXX_MGMT_MDOE
 | 
LAN91CXX_MGMT_MDO
;

1461 
bs
[
þk_idx
++] = 
LAN91CXX_MGMT_MDOE
;

1462 
bs
[
þk_idx
++] = 
LAN91CXX_MGMT_MDOE
 | 
LAN91CXX_MGMT_MDO
;

1465 
bs
[
þk_idx
++] = 
LAN91CXX_MGMT_MDOE
 | 
LAN91CXX_MGMT_MDO
;

1466 
bs
[
þk_idx
++] = 
LAN91CXX_MGMT_MDOE
;

1469 
mask
 = 0x10; mask; mask >>= 1) {

1470 ià(
phyaddr
 & 
mask
)

1471 
bs
[
þk_idx
++] =

1472 
LAN91CXX_MGMT_MDOE
 | 
LAN91CXX_MGMT_MDO
;

1474 
bs
[
þk_idx
++] = 
LAN91CXX_MGMT_MDOE
;

1478 
mask
 = 0x10; mask; mask >>= 1) {

1479 ià(
phy»g
 & 
mask
)

1480 
bs
[
þk_idx
++] =

1481 
LAN91CXX_MGMT_MDOE
 | 
LAN91CXX_MGMT_MDO
;

1483 
bs
[
þk_idx
++] = 
LAN91CXX_MGMT_MDOE
;

1487 
bs
[
þk_idx
++] = 0;

1490 
put_idx
 = 
þk_idx
;

1493 
i
 = 0; i < 16; ++i)

1494 
bs
[
þk_idx
++] = 0;

1497 
bs
[
þk_idx
++] = 0;

1500 
mii_»g
 = 
	`g_»g
(
ýd
, 
LAN91CXX_MGMT
);

1503 
mii_»g
 &ð~(
LAN91CXX_MGMT_MDOE
 | 
LAN91CXX_MGMT_MCLK
 |

1504 
LAN91CXX_MGMT_MDI
 | 
LAN91CXX_MGMT_MDO
);

1505 
	`HAL_DELAY_US
(50);

1508 
i
 = 0; i < (
bs
); ++i) {

1510 
	`put_»g
(
ýd
, 
LAN91CXX_MGMT
, 
mii_»g
 | 
bs
[
i
]);

1511 
	`HAL_DELAY_US
(50);

1514 
	`put_»g
(
ýd
, 
LAN91CXX_MGMT
,

1515 
mii_»g
 | 
bs
[
i
] | 
LAN91CXX_MGMT_MCLK
);

1516 
	`HAL_DELAY_US
(50);

1518 
bs
[
i
] |ð
	`g_»g
(
ýd
, 
LAN91CXX_MGMT
è& 
LAN91CXX_MGMT_MDI
;

1522 
	`put_»g
(
ýd
, 
LAN91CXX_MGMT
, 
mii_»g
);

1523 
	`HAL_DELAY_US
(50);

1526 
v®ue
 = 0, 
i
 = 0; i < 16; ++i) {

1527 
v®ue
 <<= 1;

1528 ià(
bs
[
put_idx
++] & 
LAN91CXX_MGMT_MDI
)

1529 
v®ue
 |= 1;

1532 
	`db16_´tf
("phy_»ad : %d : %04x\n", 
phy»g
, 
v®ue
);

1533  
v®ue
;

1534 
	}
}

1537 
	$Ïn91cxx_wre_phy
(
Ïn91cxx_´iv_d©a
 *
ýd
, 
ut8_t
 
phyaddr
,

1538 
ut8_t
 
phy»g
, 
ut16_t
 
v®ue
)

1540 
i
, 
mask
, 
þk_idx
 = 0;

1541 
ut16_t
 
mii_»g
;

1542 
ut8_t
 
bs
[65];

1545 
i
 = 0; i < 32; ++i)

1546 
bs
[
þk_idx
++] = 
LAN91CXX_MGMT_MDOE
 | 
LAN91CXX_MGMT_MDO
;

1549 
bs
[
þk_idx
++] = 
LAN91CXX_MGMT_MDOE
;

1550 
bs
[
þk_idx
++] = 
LAN91CXX_MGMT_MDOE
 | 
LAN91CXX_MGMT_MDO
;

1553 
bs
[
þk_idx
++] = 
LAN91CXX_MGMT_MDOE
;

1554 
bs
[
þk_idx
++] = 
LAN91CXX_MGMT_MDOE
 | 
LAN91CXX_MGMT_MDO
;

1557 
mask
 = 0x10; mask; mask >>= 1) {

1558 ià(
phyaddr
 & 
mask
)

1559 
bs
[
þk_idx
++] =

1560 
LAN91CXX_MGMT_MDOE
 | 
LAN91CXX_MGMT_MDO
;

1562 
bs
[
þk_idx
++] = 
LAN91CXX_MGMT_MDOE
;

1566 
mask
 = 0x10; mask; mask >>= 1) {

1567 ià(
phy»g
 & 
mask
)

1568 
bs
[
þk_idx
++] =

1569 
LAN91CXX_MGMT_MDOE
 | 
LAN91CXX_MGMT_MDO
;

1571 
bs
[
þk_idx
++] = 
LAN91CXX_MGMT_MDOE
;

1575 
bs
[
þk_idx
++] = 0;

1576 
bs
[
þk_idx
++] = 0;

1579 
mask
 = 0x8000; mask; mask >>= 1) {

1580 ià(
v®ue
 & 
mask
)

1581 
bs
[
þk_idx
++] =

1582 
LAN91CXX_MGMT_MDOE
 | 
LAN91CXX_MGMT_MDO
;

1584 
bs
[
þk_idx
++] = 
LAN91CXX_MGMT_MDOE
;

1588 
bs
[
þk_idx
++] = 0;

1591 
mii_»g
 = 
	`g_»g
(
ýd
, 
LAN91CXX_MGMT
);

1594 
mii_»g
 &ð~(
LAN91CXX_MGMT_MDOE
 | 
LAN91CXX_MGMT_MCLK
 |

1595 
LAN91CXX_MGMT_MDI
 | 
LAN91CXX_MGMT_MDO
);

1596 
	`HAL_DELAY_US
(50);

1599 
i
 = 0; i < (
bs
); ++i) {

1601 
	`put_»g
(
ýd
, 
LAN91CXX_MGMT
, 
mii_»g
 | 
bs
[
i
]);

1602 
	`HAL_DELAY_US
(50);

1605 
	`put_»g
(
ýd
, 
LAN91CXX_MGMT
,

1606 
mii_»g
 | 
bs
[
i
] | 
LAN91CXX_MGMT_MCLK
);

1607 
	`HAL_DELAY_US
(50);

1613 
	`put_»g
(
ýd
, 
LAN91CXX_MGMT
, 
mii_»g
);

1614 
	`HAL_DELAY_US
(50);

1616 
	`db16_´tf
("phy_wre: %d : %04x\n", 
phy»g
, 
v®ue
);

1617 
	}
}

1620 
	$Ïn91cxx_´t_bªk
(
bªk
){

1621 
Ïn91cxx_´iv_d©a
 *
ýd
 = &
smc91111
;

1622 
»gno
;

1623 
»gv®
[8];

1624 
i
;

1626 iàÐ
bªk
 >= 4 )

1628 
i
=0; i<8; i++){

1629 
»gno
=
i
+
bªk
<<3;

1630 
»gv®
[
i
] = 
	`g_»g
(
ýd
, 
»gno
);

1632 
	`´tk
("---- BANK %d ----\n\r",
bªk
);

1633 
i
=0; i<8; i++){

1634 
	`´tk
("0x%x: 0x%x\n\r",
i
,
»gv®
[i]);

1637 
	}
}

	@src/libchip/network/smc91111.h

1 #iâdeà
_SMC91111_H_


2 
	#_SMC91111_H_


	)

4 
	~<libch/smc91111exp.h
>

5 
	~<¹ems/b¥Io.h
>

7 
	#LAN91CXX_TCR
 0x00

	)

8 
	#LAN91CXX_EPH_STATUS
 0x01

	)

9 
	#LAN91CXX_RCR
 0x02

	)

10 
	#LAN91CXX_COUNTER
 0x03

	)

11 
	#LAN91CXX_MIR
 0x04

	)

12 
	#LAN91CXX_MCR
 0x05

	)

13 
	#LAN91CXX_RPCR
 0x05

	)

14 
	#LAN91CXX_RESERVED_0
 0x06

	)

15 
	#LAN91CXX_BS
 0x07

	)

16 
	#LAN91CXX_CONFIG
 0x08

	)

17 
	#LAN91CXX_BASE_REG
 0x09

	)

18 
	#LAN91CXX_IA01
 0x0a

	)

19 
	#LAN91CXX_IA23
 0x0b

	)

20 
	#LAN91CXX_IA45
 0x0c

	)

21 
	#LAN91CXX_GENERAL
 0x0d

	)

22 
	#LAN91CXX_CONTROL
 0x0e

	)

23 
	#LAN91CXX_BS2
 0x0f

	)

24 
	#LAN91CXX_MMU_COMMAND
 0x10

	)

25 
	#LAN91CXX_PNR
 0x11

	)

26 
	#LAN91CXX_FIFO_PORTS
 0x12

	)

27 
	#LAN91CXX_POINTER
 0x13

	)

28 
	#LAN91CXX_DATA_HIGH
 0x14

	)

29 
	#LAN91CXX_DATA
 0x15

	)

30 
	#LAN91CXX_INTERRUPT
 0x16

	)

31 
	#LAN91CXX_BS3
 0x17

	)

32 
	#LAN91CXX_MT01
 0x18

	)

33 
	#LAN91CXX_MT23
 0x19

	)

34 
	#LAN91CXX_MT45
 0x1a

	)

35 
	#LAN91CXX_MT67
 0x1b

	)

36 
	#LAN91CXX_MGMT
 0x1c

	)

37 
	#LAN91CXX_REVISION
 0x1d

	)

38 
	#LAN91CXX_ERCV
 0x1e

	)

39 
	#LAN91CXX_BS4
 0x1f

	)

41 
	#LAN91CXX_RCR_SOFT_RST
 0x8000

	)

42 
	#LAN91CXX_RCR_FILT_CAR
 0x4000

	)

43 
	#LAN91CXX_RCR_ABORT_ENB
 0x2000

	)

44 
	#LAN91CXX_RCR_STRIP_CRC
 0x0200

	)

45 
	#LAN91CXX_RCR_RXEN
 0x0100

	)

46 
	#LAN91CXX_RCR_ALMUL
 0x0004

	)

47 
	#LAN91CXX_RCR_PRMS
 0x0002

	)

48 
	#LAN91CXX_RCR_RX_ABORT
 0x0001

	)

50 
	#LAN91CXX_TCR_SWFDUP
 0x8000

	)

51 
	#LAN91CXX_TCR_ETEN_TYPE
 0x4000

	)

52 
	#LAN91CXX_TCR_EPH_LOOP
 0x2000

	)

53 
	#LAN91CXX_TCR_STP_SQET
 0x1000

	)

54 
	#LAN91CXX_TCR_FDUPLX
 0x0800

	)

55 
	#LAN91CXX_TCR_MON_CSN
 0x0400

	)

56 
	#LAN91CXX_TCR_NOCRC
 0x0100

	)

57 
	#LAN91CXX_TCR_PAD_EN
 0x0080

	)

58 
	#LAN91CXX_TCR_FORCOL
 0x0004

	)

59 
	#LAN91CXX_TCR_LLOOP
 0x0002

	)

60 
	#LAN91CXX_TCR_TXENA
 0x0001

	)

62 
	#LAN91CXX_POINTER_RCV
 0x8000

	)

63 
	#LAN91CXX_POINTER_AUTO_INCR
 0x4000

	)

64 
	#LAN91CXX_POINTER_READ
 0x2000

	)

65 
	#LAN91CXX_POINTER_ETEN
 0x1000

	)

66 
	#LAN91CXX_POINTER_NOT_EMPTY
 0x0800

	)

69 
	#LAN91CXX_INTERRUPT_TX_IDLE_M
 0x8000

	)

70 
	#LAN91CXX_INTERRUPT_ERCV_INT_M
 0x4000

	)

71 
	#LAN91CXX_INTERRUPT_EPH_INT_M
 0x2000

	)

72 
	#LAN91CXX_INTERRUPT_RX_OVRN_INT_M
 0x1000

	)

73 
	#LAN91CXX_INTERRUPT_ALLOC_INT_M
 0x0800

	)

74 
	#LAN91CXX_INTERRUPT_TX_EMPTY_INT_M
 0x0400

	)

75 
	#LAN91CXX_INTERRUPT_TX_INT_M
 0x0200

	)

76 
	#LAN91CXX_INTERRUPT_RCV_INT_M
 0x0100

	)

77 
	#LAN91CXX_INTERRUPT_TX_IDLE
 0x0080

	)

78 
	#LAN91CXX_INTERRUPT_ERCV_INT
 0x0040

	)

79 
	#LAN91CXX_INTERRUPT_EPH_INT
 0x0020

	)

80 
	#LAN91CXX_INTERRUPT_RX_OVRN_INT
 0x0010

	)

81 
	#LAN91CXX_INTERRUPT_ALLOC_INT
 0x0008

	)

82 
	#LAN91CXX_INTERRUPT_TX_EMPTY_INT
 0x0004

	)

83 
	#LAN91CXX_INTERRUPT_TX_INT
 0x0002

	)

84 
	#LAN91CXX_INTERRUPT_RCV_INT
 0x0001

	)

86 
	#LAN91CXX_INTERRUPT_TX_SET
 0x0006

	)

87 
	#LAN91CXX_INTERRUPT_TX_SET_ACK
 0x0004

	)

88 
	#LAN91CXX_INTERRUPT_TX_FIFO_ACK
 0x0002

	)

89 
	#LAN91CXX_INTERRUPT_TX_SET_M
 0x0600

	)

91 
	#LAN91CXX_CONTROL_RCV_BAD
 0x4000

	)

92 
	#LAN91CXX_CONTROL_AUTO_RELEASE
 0x0800

	)

93 
	#LAN91CXX_CONTROL_LE_ENABLE
 0x0080

	)

94 
	#LAN91CXX_CONTROL_CR_ENABLE
 0x0040

	)

95 
	#LAN91CXX_CONTROL_TE_ENABLE
 0x0020

	)

98 
	#LAN91CXX_CONTROL_EEPROM_SELECT
 0x0004

	)

99 
	#LAN91CXX_CONTROL_RELOAD
 0x0002

	)

100 
	#LAN91CXX_CONTROL_STORE
 0x0001

	)

101 
	#LAN91CXX_CONTROL_EEPROM_BUSY
 0x0003

	)

102 
	#LAN91CXX_ESA_EEPROM_OFFSET
 0x0020

	)

104 
	#LAN91CXX_STATUS_TX_UNRN
 0x8000

	)

105 
	#LAN91CXX_STATUS_LINK_OK
 0x4000

	)

106 
	#LAN91CXX_STATUS_CTR_ROL
 0x1000

	)

107 
	#LAN91CXX_STATUS_EXC_DEF
 0x0800

	)

108 
	#LAN91CXX_STATUS_LOST_CARR
 0x0400

	)

109 
	#LAN91CXX_STATUS_LATCOL
 0x0200

	)

110 
	#LAN91CXX_STATUS_WAKEUP
 0x0100

	)

111 
	#LAN91CXX_STATUS_TX_DEFR
 0x0080

	)

112 
	#LAN91CXX_STATUS_LTX_BRD
 0x0040

	)

113 
	#LAN91CXX_STATUS_SQET
 0x0020

	)

114 
	#LAN91CXX_STATUS_16COL
 0x0010

	)

115 
	#LAN91CXX_STATUS_LTX_MULT
 0x0008

	)

116 
	#LAN91CXX_STATUS_MUL_COL
 0x0004

	)

117 
	#LAN91CXX_STATUS_SNGL_COL
 0x0002

	)

118 
	#LAN91CXX_STATUS_TX_SUC
 0x0001

	)

120 
	#LAN91CXX_MMU_COMMAND_BUSY
 0x0001

	)

122 
	#LAN91CXX_MMU_noÝ
 0x0000

	)

123 
	#LAN91CXX_MMU_®loc_fÜ_tx
 0x0020

	)

124 
	#LAN91CXX_MMU_»£t_mmu
 0x0040

	)

125 
	#LAN91CXX_MMU_»m_rx_äame
 0x0060

	)

126 
	#LAN91CXX_MMU_»m_tx_äame
 0x0070

	)

127 
	#LAN91CXX_MMU_»m»l_rx_äame
 0x0080

	)

128 
	#LAN91CXX_MMU_»l_·ck
 0x00a0

	)

129 
	#LAN91CXX_MMU_q_·ck
 0x00c0

	)

130 
	#LAN91CXX_MMU_»£t_tx_fifo
 0x00e0

	)

132 
	#LAN91CXX_CONTROLBYTE_CRC
 0x1000

	)

133 
	#LAN91CXX_CONTROLBYTE_ODD
 0x2000

	)

134 
	#LAN91CXX_CONTROLBYTE_RX
 0x4000

	)

136 
	#LAN91CXX_RX_STATUS_ALIGNERR
 0x8000

	)

137 
	#LAN91CXX_RX_STATUS_BCAST
 0x4000

	)

138 
	#LAN91CXX_RX_STATUS_BADCRC
 0x2000

	)

139 
	#LAN91CXX_RX_STATUS_ODDFRM
 0x1000

	)

140 
	#LAN91CXX_RX_STATUS_TOOLONG
 0x0800

	)

141 
	#LAN91CXX_RX_STATUS_TOOSHORT
 0x0400

	)

142 
	#LAN91CXX_RX_STATUS_HASHVALMASK
 0x007

	)

143 
	#LAN91CXX_RX_STATUS_MCAST
 0x0001

	)

144 
	#LAN91CXX_RX_STATUS_BAD
 \

145 (
LAN91CXX_RX_STATUS_ALIGNERR
 | \

146 
LAN91CXX_RX_STATUS_BADCRC
 | \

147 
LAN91CXX_RX_STATUS_TOOLONG
 | \

148 
LAN91CXX_RX_STATUS_TOOSHORT
)

	)

150 
	#LAN91CXX_RX_STATUS_IS_ODD
(
__ýd
,
__¡©
è((__¡©è& 
LAN91CXX_RX_STATUS_ODDFRM
)

	)

151 
	#LAN91CXX_CONTROLBYTE_IS_ODD
(
__ýd
,
__v®
è((__v®è& 
LAN91CXX_CONTROLBYTE_ODD
)

	)

154 
	#LAN91CXX_ECOR
 0x8000

	)

155 
	#LAN91CXX_ECOR_RESET
 (1<<7)

	)

156 
	#LAN91CXX_ECOR_LEVIRQ
 (1<<6)

	)

157 
	#LAN91CXX_ECOR_ATTWR
 (1<<2)

	)

158 
	#LAN91CXX_ECOR_ENABLE
 (1<<0)

	)

160 
	#LAN91CXX_ECSR
 0x8002

	)

161 
	#LAN91CXX_ECSR_IOIS8
 (1<<5)

	)

162 
	#LAN91CXX_ECSR_PWRDWN
 (1<<2)

	)

163 
	#LAN91CXX_ECSR_INTR
 (1<<1)

	)

166 
	#LAN91CXX_MGMT_MDO
 0x0001

	)

167 
	#LAN91CXX_MGMT_MDI
 0x0002

	)

168 
	#LAN91CXX_MGMT_MCLK
 0x0004

	)

169 
	#LAN91CXX_MGMT_MDOE
 0x0008

	)

172 
	#LAN91CXX_PHY_CTRL
 0

	)

173 
	#LAN91CXX_PHY_STAT
 1

	)

174 
	#LAN91CXX_PHY_ID1
 2

	)

175 
	#LAN91CXX_PHY_ID2
 3

	)

176 
	#LAN91CXX_PHY_AUTO_AD
 4

	)

177 
	#LAN91CXX_PHY_AUTO_CAP
 5

	)

178 
	#LAN91CXX_PHY_CONFIG1
 16

	)

179 
	#LAN91CXX_PHY_CONFIG2
 17

	)

180 
	#LAN91CXX_PHY_STATUS_OUT
 18

	)

181 
	#LAN91CXX_PHY_MASK
 19

	)

184 
	#LAN91CXX_PHY_CTRL_COLTST
 (1 << 7)

	)

185 
	#LAN91CXX_PHY_CTRL_DPLX
 (1 << 8)

	)

186 
	#LAN91CXX_PHY_CTRL_ANEG_RST
 (1 << 9)

	)

187 
	#LAN91CXX_PHY_CTRL_MII_DIS
 (1 << 10)

	)

188 
	#LAN91CXX_PHY_CTRL_PDN
 (1 << 11)

	)

189 
	#LAN91CXX_PHY_CTRL_ANEG_EN
 (1 << 12)

	)

190 
	#LAN91CXX_PHY_CTRL_SPEED
 (1 << 13)

	)

191 
	#LAN91CXX_PHY_CTRL_LPBK
 (1 << 14)

	)

192 
	#LAN91CXX_PHY_CTRL_RST
 (1 << 15)

	)

195 
	#PHY_CFG1_LNKDIS
 0x8000

	)

196 
	#PHY_CFG1_XMTDIS
 0x4000

	)

197 
	#PHY_CFG1_XMTPDN
 0x2000

	)

198 
	#PHY_CFG1_BYPSCR
 0x0400

	)

199 
	#PHY_CFG1_UNSCDS
 0x0200

	)

200 
	#PHY_CFG1_EQLZR
 0x0100

	)

201 
	#PHY_CFG1_CABLE
 0x0080

	)

202 
	#PHY_CFG1_RLVL0
 0x0040

	)

203 
	#PHY_CFG1_TLVL_SHIFT
 2

	)

204 
	#PHY_CFG1_TLVL_MASK
 0x003C

	)

205 
	#PHY_CFG1_TRF_MASK
 0x0003

	)

208 
	#PHY_CFG2_REG
 0x11

	)

209 
	#PHY_CFG2_APOLDIS
 0x0020

	)

210 
	#PHY_CFG2_JABDIS
 0x0010

	)

211 
	#PHY_CFG2_MREG
 0x0008

	)

212 
	#PHY_CFG2_INTMDIO
 0x0004

	)

215 
	#PHY_INT_REG
 0x12

	)

216 
	#PHY_INT_INT
 0x8000

	)

217 
	#PHY_INT_LNKFAIL
 0x4000

	)

218 
	#PHY_INT_LOSSSYNC
 0x2000

	)

219 
	#PHY_INT_CWRD
 0x1000

	)

220 
	#PHY_INT_SSD
 0x0800

	)

221 
	#PHY_INT_ESD
 0x0400

	)

222 
	#PHY_INT_RPOL
 0x0200

	)

223 
	#PHY_INT_JAB
 0x0100

	)

224 
	#PHY_INT_SPDDET
 0x0080

	)

225 
	#PHY_INT_DPLXDET
 0x0040

	)

228 
	#PHY_MASK_REG
 0x13

	)

230 
	#LAN91CXX_RPCR_LEDA_LINK
 (0 << 2)

	)

231 
	#LAN91CXX_RPCR_LEDA_TXRX
 (4 << 2)

	)

232 
	#LAN91CXX_RPCR_LEDA_RX
 (6 << 2)

	)

233 
	#LAN91CXX_RPCR_LEDA_TX
 (7 << 2)

	)

234 
	#LAN91CXX_RPCR_LEDB_LINK
 (0 << 5)

	)

235 
	#LAN91CXX_RPCR_LEDB_TXRX
 (4 << 5)

	)

236 
	#LAN91CXX_RPCR_LEDB_RX
 (6 << 5)

	)

237 
	#LAN91CXX_RPCR_LEDB_TX
 (7 << 5)

	)

238 
	#LAN91CXX_RPCR_ANEG
 (1 << 11)

	)

239 
	#LAN91CXX_RPCR_DPLX
 (1 << 12)

	)

240 
	#LAN91CXX_RPCR_SPEED
 (1 << 13)

	)

243 
	#PHY_CNTL_REG
 0x00

	)

244 
	#PHY_CNTL_RST
 0x8000

	)

245 
	#PHY_CNTL_LPBK
 0x4000

	)

246 
	#PHY_CNTL_SPEED
 0x2000

	)

247 
	#PHY_CNTL_ANEG_EN
 0x1000

	)

248 
	#PHY_CNTL_PDN
 0x0800

	)

249 
	#PHY_CNTL_MII_DIS
 0x0400

	)

250 
	#PHY_CNTL_ANEG_RST
 0x0200

	)

251 
	#PHY_CNTL_DPLX
 0x0100

	)

252 
	#PHY_CNTL_COLTST
 0x0080

	)

255 
	#PHY_STAT_REG
 0x01

	)

256 
	#PHY_STAT_CAP_T4
 0x8000

	)

257 
	#PHY_STAT_CAP_TXF
 0x4000

	)

258 
	#PHY_STAT_CAP_TXH
 0x2000

	)

259 
	#PHY_STAT_CAP_TF
 0x1000

	)

260 
	#PHY_STAT_CAP_TH
 0x0800

	)

261 
	#PHY_STAT_CAP_SUPR
 0x0040

	)

262 
	#PHY_STAT_ANEG_ACK
 0x0020

	)

263 
	#PHY_STAT_REM_FLT
 0x0010

	)

264 
	#PHY_STAT_CAP_ANEG
 0x0008

	)

265 
	#PHY_STAT_LINK
 0x0004

	)

266 
	#PHY_STAT_JAB
 0x0002

	)

267 
	#PHY_STAT_EXREG
 0x0001

	)

268 
	#PHY_STAT_RESERVED
 0x0780

	)

271 
	#PHY_ID1_REG
 0x02

	)

272 
	#PHY_ID2_REG
 0x03

	)

275 
	#PHY_AD_REG
 0x04

	)

276 
	#PHY_AD_NP
 0x8000

	)

277 
	#PHY_AD_ACK
 0x4000

	)

278 
	#PHY_AD_RF
 0x2000

	)

279 
	#PHY_AD_T4
 0x0200

	)

280 
	#PHY_AD_TX_FDX
 0x0100

	)

281 
	#PHY_AD_TX_HDX
 0x0080

	)

282 
	#PHY_AD_10_FDX
 0x0040

	)

283 
	#PHY_AD_10_HDX
 0x0020

	)

284 
	#PHY_AD_CSMA
 0x0001

	)

287 
	gdebugæag_out
 = 0;

289 
	#dbc_´tf
(
lvl
,
fÜm©
, 
¬gs
...) do { \

290 ià(!
debugæag_out
) { \

291 ià(
lvl
 & 
DEBUG
) { \

292 
	`´tk
(
fÜm©
,##
¬gs
); \

295 } 0)

	)

297 
	#db64_´tf
(
fÜm©
, 
¬gs
...è
	`dbc_´tf
(64,fÜm©,##¬gs);

	)

298 
	#db16_´tf
(
fÜm©
, 
¬gs
...è
	`dbc_´tf
(16,fÜm©,##¬gs);

	)

299 
	#db9_´tf
(
fÜm©
, 
¬gs
...è
	`dbc_´tf
(9,fÜm©,##¬gs);

	)

300 
	#db4_´tf
(
fÜm©
, 
¬gs
...è
	`dbc_´tf
(4,fÜm©,##¬gs);

	)

301 
	#db2_´tf
(
fÜm©
, 
¬gs
...è
	`dbc_´tf
(2,fÜm©,##¬gs);

	)

302 
	#db1_´tf
(
fÜm©
, 
¬gs
...è
	`dbc_´tf
(1,fÜm©,##¬gs);

	)

303 
	#db_´tf
(
fÜm©
, 
¬gs
...è
	`dbc_´tf
(0xffff,fÜm©,##¬gs);

	)

305 #ià
DEBUG
 & 1

306 
	#DEBUG_FUNCTION
(èdØ{ 
	`db_´tf
("# %s\n", 
__FUNCTION__
); } 0)

	)

308 
	#DEBUG_FUNCTION
(èdØ{} 0)

	)

314 
	ssmsc_Ïn91cxx_¡©s
 {

315 
	mtx_good
 ;

316 
	mtx_max_cÞlisiÚs
 ;

317 
	mtx_Ï_cÞlisiÚs
 ;

318 
	mtx_undrun
 ;

319 
	mtx_ÿ¼r_loss
 ;

320 
	mtx_deã¼ed
 ;

321 
	mtx_sqe¡rÜs
 ;

322 
	mtx_sgË_cÞlisiÚs
;

323 
	mtx_muÉ_cÞlisiÚs
 ;

324 
	mtx_tÙ®_cÞlisiÚs
 ;

325 
	mrx_good
 ;

326 
	mrx_üc_rÜs
 ;

327 
	mrx_®ign_rÜs
 ;

328 
	mrx_»sourû_rÜs
 ;

329 
	mrx_ovrun_rÜs
 ;

330 
	mrx_cÞlisiÚs
 ;

331 
	mrx_shÜt_äames
 ;

332 
	mrx_too_lÚg_äames
 ;

333 
	mrx_symbÞ_rÜs
 ;

334 
	m¼u±s
 ;

335 
	mrx_couÁ
 ;

336 
	mrx_div
 ;

337 
	mrx_»sourû
 ;

338 
	mrx_»¡¬t
 ;

339 
	mtx_couÁ
 ;

340 
	mtx_com¶e
 ;

341 
	mtx_drÝ³d
 ;

343 
	#INCR_STAT
(
c
,
n
è(((c)->
¡©s
.n)++)

	)

345 
	gÏn91cxx_´iv_d©a
;

347 
	sÏn91cxx_´iv_d©a
 {

350 
¬pcom
 
	m¬pcom
;

351 
¹ems_id
 
	mrxD«mÚTid
;

352 
¹ems_id
 
	mtxD«mÚTid
;

354 
scmv91111_cÚfigu¿tiÚ_t
 
	mcÚfig
;

357 
	m½c_cur_mode
;

358 
	mautÚeg_aùive
;

359 
	mphyaddr
;

360 
	mÏ¡Phy18
;

362 
	mtxbusy
;

363 
	mtxkey
;

364 * 
	mba£
;

366 
	m¼u±
;

367 
	maddr
[6];

372 (*
	mcÚfig_addr
)(
Ïn91cxx_´iv_d©a
* 
	mýd
);

373 
	mh¬dwed_e§
;

374 
	mtx·ck
;

375 
	mrx·ck
;

376 
	mwh_£nd
;

377 
	mc111_»va
;

378 
smsc_Ïn91cxx_¡©s
 
	m¡©s
;

379 } 
	tÏn91cxx_´iv_d©a
;

383 #ifdeà
LAN91CXX_32BIT_RX


384 
	trxd_t
;

386 
	trxd_t
;

389 
	s_debug_»gs_·
 {

390 
	m»g
; *
	mÇme
; 
_debug_»gs_·
 *
	mbs
;

391 } 
	tdebug_»gs_·
;

393 
debug_»gs_·
 
	gdebug_»gs
[] = {

394 {
LAN91CXX_TCR
 , "LAN91CXX_TCR" ,0},

395 {
LAN91CXX_EPH_STATUS
 , "LAN91CXX_EPH_STATUS",0},

396 {
LAN91CXX_RCR
 , "LAN91CXX_RCR" ,0},

397 {
LAN91CXX_COUNTER
 , "LAN91CXX_COUNTER" ,0},

398 {
LAN91CXX_MIR
 , "LAN91CXX_MIR" ,0},

399 {
LAN91CXX_MCR
 , "LAN91CXX_MCR" ,0},

400 {
LAN91CXX_RPCR
 , "LAN91CXX_RPCR" ,0},

401 {
LAN91CXX_RESERVED_0
 , "LAN91CXX_RESERVED_0",0},

402 {
LAN91CXX_BS
 , "LAN91CXX_BS" ,0},

403 {
LAN91CXX_CONFIG
 , "LAN91CXX_CONFIG" ,0},

404 {
LAN91CXX_BASE_REG
 , "LAN91CXX_BASE_REG" ,0},

405 {
LAN91CXX_IA01
 , "LAN91CXX_IA01" ,0},

406 {
LAN91CXX_IA23
 , "LAN91CXX_IA23" ,0},

407 {
LAN91CXX_IA45
 , "LAN91CXX_IA45" ,0},

408 {
LAN91CXX_GENERAL
 , "LAN91CXX_GENERAL" ,0},

409 {
LAN91CXX_CONTROL
 , "LAN91CXX_CONTROL" ,0},

410 {
LAN91CXX_BS2
 , "LAN91CXX_BS2" ,0},

411 {
LAN91CXX_MMU_COMMAND
, "LAN91CXX_MMU_COMMAND",0},

412 {
LAN91CXX_PNR
 , "LAN91CXX_PNR" ,0},

413 {
LAN91CXX_FIFO_PORTS
 , "LAN91CXX_FIFO_PORTS" ,0},

414 {
LAN91CXX_POINTER
 , "LAN91CXX_POINTER" ,0},

415 {
LAN91CXX_DATA_HIGH
 , "LAN91CXX_DATA_HIGH" ,0},

416 {
LAN91CXX_DATA
 , "LAN91CXX_DATA" ,0},

417 {
LAN91CXX_INTERRUPT
 , "LAN91CXX_INTERRUPT" ,0},

418 {
LAN91CXX_BS3
 , "LAN91CXX_BS3" ,0},

419 {
LAN91CXX_MT01
 , "LAN91CXX_MT01" ,0},

420 {
LAN91CXX_MT23
 , "LAN91CXX_MT23" ,0},

421 {
LAN91CXX_MT45
 , "LAN91CXX_MT45" ,0},

422 {
LAN91CXX_MT67
 , "LAN91CXX_MT67" ,0},

424 {
LAN91CXX_REVISION
 , "LAN91CXX_REVISION" ,0},

425 {
LAN91CXX_ERCV
 , "LAN91CXX_ERCV" ,0},

426 {
LAN91CXX_BS4
 , "LAN91CXX_BS4" ,0},

433 *
	gdbg_´efix
 = "";

435 #iâdeà
SMSC_PLATFORM_DEFINED_GET_REG


436 
__le__
 

437 
	$g_»g
(
Ïn91cxx_´iv_d©a
 *
ýd
, 
»gno
)

439 
v®
; 
debug_»gs_·
 *
dbg
 = 
debug_»gs
; 
c
;

440 
ut32_t
 
Irql
;

444 
	`HAL_WRITE_UINT16
(
ýd
->
ba£
+(
LAN91CXX_BS
), 
	`CYG_CPU_TO_LE16
(
»gno
>>3));

445 
	`HAL_READ_UINT16
(
ýd
->
ba£
+((
»gno
&0x7)), 
v®
);

446 
v®
 = 
	`CYG_LE16_TO_CPU
(val);

450 #ià
DEBUG
 & 32

451 (
c
 = 
dbg
->
»g
) != -1) {

452 ià(
c
 =ð
»gno
) {

453 
	`db_´tf
("%¤deg [%d:%x] -> 0x%04x (%-20s)\n", 
dbg_´efix
, 
»gno
>>3,Ôegno&0x7)*2, 
v®
, 
dbg
->
Çme
);

456 
dbg
++;

459 
	`db2_´tf
("%¤deg %d:%x -> 0x%04x\n", 
dbg_´efix
, 
»gno
>>3,Ôegno&0x7)*2, 
v®
);

462  
v®
;

463 
	}
}

466 #iâdeà
SMSC_PLATFORM_DEFINED_PUT_REG


467 
__le__
 

468 
	$put_»g
(
Ïn91cxx_´iv_d©a
 *
ýd
, 
»gno
, 
v®
)

470 
debug_»gs_·
 *
dbg
 = 
debug_»gs
; 
c
;

471 
ut32_t
 
Irql
;

473 #ià
DEBUG
 & 32

474 (
c
 = 
dbg
->
»g
) != -1) {

475 ià(
c
 =ð
»gno
) {

476 
	`db_´tf
("%swr»g [%d:%x] <- 0x%04x (%-20s)\n", 
dbg_´efix
, 
»gno
>>3, (»gno&0x07)*2, 
v®
, 
dbg
->
Çme
);

479 
dbg
++;

482 
	`db2_´tf
("%swr»g %d:%x <- 0x%04x\n", 
dbg_´efix
, 
»gno
>>3,Ôegno&0x7)*2, 
v®
);

487 
	`HAL_WRITE_UINT16
(
ýd
->
ba£
+(
LAN91CXX_BS
), 
	`CYG_CPU_TO_LE16
(
»gno
>>3));

488 
	`HAL_WRITE_UINT16
(
ýd
->
ba£
+((
»gno
&0x7)), 
	`CYG_CPU_TO_LE16
(
v®
));

492 
	}
}

495 #iâdeà
SMSC_PLATFORM_DEFINED_PUT_DATA


498 
__le__
 

499 
	$put_d©a
(
Ïn91cxx_´iv_d©a
 *
ýd
, 
v®
)

501 
	`db2_´tf
("%s[wd©a] <- 0x%04x\n", 
dbg_´efix
, 
v®
);

503 
	`HAL_WRITE_UINT16
(
ýd
->
ba£
+((
LAN91CXX_DATA
 & 0x7)), 
v®
);

505 
	}
}

508 
__le__
 

509 
	$put_d©a8
(
Ïn91cxx_´iv_d©a
 *
ýd
, 
v®
)

511 
	`db2_´tf
("%s[bd©a] <- 0x%02x\n", 
dbg_´efix
, 
v®
);

513 
	`HAL_WRITE_UINT8
(((*)(
ýd
->
ba£
+((
LAN91CXX_DATA
 & 0x7))))+1, 
v®
);

515 
	}
}

519 #iâdeà
SMSC_PLATFORM_DEFINED_GET_DATA


521 
__le__
 
rxd_t


522 
	$g_d©a
(
Ïn91cxx_´iv_d©a
 *
ýd
)

524 
rxd_t
 
v®
;

526 #ifdeà
LAN91CXX_32BIT_RX


527 
	`HAL_READ_UINT32
(
ýd
->
ba£
+((
LAN91CXX_DATA_HIGH
 & 0x7)), 
v®
);

529 
	`HAL_READ_UINT16
(
ýd
->
ba£
+((
LAN91CXX_DATA
 & 0x7)), 
v®
);

532 
	`db2_´tf
("%s[rd©a] -> 0x%08x\n", 
dbg_´efix
, 
v®
);

533  
v®
;

534 
	}
}

539 #iâdeà
SMSC_PLATFORM_DEFINED_GET_BANKSEL


540 
__le__
 

541 
	$g_bªk£l
(
Ïn91cxx_´iv_d©a
 *
ýd
)

543 
v®
;

545 
	`HAL_READ_UINT16
(
ýd
->
ba£
+(
LAN91CXX_BS
), 
v®
);

546 
v®
 = 
	`CYG_LE16_TO_CPU
(val);

547 
	`db2_´tf
("»ad bªk s v® 0x%04x\n", 
v®
);

548  
v®
;

549 
	}
}

	@src/libchip/network/smc91111config.h

1 #iâdeà
_SMC91111_CONFIG_H_


2 
	#_SMC91111_CONFIG_H_


	)

8 
	#INTERRUPT_EVENT
 
RTEMS_EVENT_1


	)

14 
	#START_TRANSMIT_EVENT
 
RTEMS_EVENT_2


	)

17 
	#SMC91111_TX_WAIT_EVENT
 
RTEMS_EVENT_3


	)

21 
	#NOCDRIVER
 1

	)

24 
	#RBUF_SIZE
 1536

	)

26 
	#ET_MINLEN
 64

	)

28 #ià(
MCLBYTES
 < 
RBUF_SIZE
)

34 
	#LAN91CXX_32BIT_RX


	)

35 
	#LAN91CXX_IS_LAN91C111


	)

39 
	~<¡dt.h
>

41 
ut32_t
 
	tCYG_WORD
;

42 
ut8_t
 
	tCYG_BYTE
;

43 
ut16_t
 
	tCYG_WORD16
;

44 
ut32_t
 
	tCYG_WORD32
;

46 #iâdeà
CYG_SWAP16


47 
	#CYG_SWAP16
(
_x_
) \

48 ({ 
ut16_t
 
_x
 = (
_x_
); ((_x << 8è| (_x >> 8)); })

	)

51 #iâdeà
CYG_SWAP32


52 
	#CYG_SWAP32
(
_x_
) \

53 ({ 
ut32_t
 
_x
 = (
_x_
); \

54 ((
_x
 << 24) | \

55 ((0x0000FF00UL & 
_x
) << 8) | \

56 ((0x00FF0000UL & 
_x
) >> 8) | \

57 (
_x
 >> 24)); })

	)

60 
	#CYG_CPU_TO_BE16
(
_x_
è(_x_)

	)

61 
	#CYG_CPU_TO_BE32
(
_x_
è(_x_)

	)

62 
	#CYG_BE16_TO_CPU
(
_x_
è(_x_)

	)

63 
	#CYG_BE32_TO_CPU
(
_x_
è(_x_)

	)

65 
	#CYG_CPU_TO_LE16
(
_x_
è
	`CYG_SWAP16
((_x_))

	)

66 
	#CYG_CPU_TO_LE32
(
_x_
è
	`CYG_SWAP32
((_x_))

	)

67 
	#CYG_LE16_TO_CPU
(
_x_
è
	`CYG_SWAP16
((_x_))

	)

68 
	#CYG_LE32_TO_CPU
(
_x_
è
	`CYG_SWAP32
((_x_))

	)

70 
	#CYG_MACRO_START
 dØ{

	)

71 
	#CYG_MACRO_END
 } 0)

	)

72 
	#HAL_IO_BARRIER
() \

73 
__asm__
 vÞ©Ð"" : : : "memÜy" )

	)

75 
	#HAL_READ_UINT8
Ð
_»gi¡_
, 
_v®ue_
 ) \

76 
CYG_MACRO_START
 \

77 ((
_v®ue_
èð*((vÞ©
CYG_BYTE
 *)(
_»gi¡_
))); \

78 
	`HAL_IO_BARRIER
 (); \

79 
CYG_MACRO_END


	)

81 
	#HAL_WRITE_UINT8
Ð
_»gi¡_
, 
_v®ue_
 ) \

82 
CYG_MACRO_START
 \

83 (*((vÞ©
CYG_BYTE
 *)(
_»gi¡_
)èð(
_v®ue_
)); \

84 
	`HAL_IO_BARRIER
 (); \

85 
CYG_MACRO_END


	)

87 
	#HAL_READ_UINT16
Ð
_»gi¡_
, 
_v®ue_
 ) \

88 
CYG_MACRO_START
 \

89 ((
_v®ue_
èð*((vÞ©
CYG_WORD16
 *)(
_»gi¡_
))); \

90 
	`HAL_IO_BARRIER
 (); \

91 
CYG_MACRO_END


	)

93 
	#HAL_WRITE_UINT16
Ð
_»gi¡_
, 
_v®ue_
 ) \

94 
CYG_MACRO_START
 \

95 (*((vÞ©
CYG_WORD16
 *)(
_»gi¡_
)èð(
_v®ue_
)); \

96 
	`HAL_IO_BARRIER
 (); \

97 
CYG_MACRO_END


	)

99 
	#HAL_READ_UINT32
Ð
_»gi¡_
, 
_v®ue_
 ) \

100 
CYG_MACRO_START
 \

101 ((
_v®ue_
èð*((vÞ©
CYG_WORD32
 *)(
_»gi¡_
))); \

102 
	`HAL_IO_BARRIER
 (); \

103 
CYG_MACRO_END


	)

105 
	#HAL_READ_UINT16
Ð
_»gi¡_
, 
_v®ue_
 ) \

106 
CYG_MACRO_START
 \

107 ((
_v®ue_
èð*((vÞ©
CYG_WORD16
 *)(
_»gi¡_
))); \

108 
	`HAL_IO_BARRIER
 (); \

109 
CYG_MACRO_END


	)

111 
	#CYG_ASSERT
(
c
,
p
èdØ{ ià(!(c)è{ 1è{ 
	`´tf
Õ);} }; } 0)

	)

113 
	#HAL_DELAY_US
(
p
è
	`¹ems_sk_wake_aá
 (
	`RTEMS_MICROSECONDS_TO_TICKS
 (p))

	)

	@src/libchip/network/smc91111exp.h

1 #iâdeà
_SMC91111_EXP_H_


2 
	#_SMC91111_EXP_H_


	)

4 
	~<b¥.h
>

6 
	sscmv91111_cÚfigu¿tiÚ
 {

7 *
	mba£addr
;

8 
¹ems_veùÜ_numb
 
	mveùÜ
;

9 
	mpio
;

10 
	mùl_r¥d
;

11 
	mùl_rfdu¶x
;

12 
	mùl_autÚeg
;

13 #ifdeà
BSP_FEATURE_IRQ_EXTENSION


14 cÚ¡ * 
	mfo
;

15 
¹ems_ÝtiÚ
 
	mÝtiÚs
;

16 
¹ems_¼u±_hªdËr
 
	m¼u±_w¿µ
;

17 * 
	m¬g
;

19 } 
	tscmv91111_cÚfigu¿tiÚ_t
;

21 
_¹ems_smc91111_driv_©ch
 (
¹ems_bsdÃt_ifcÚfig
 *
cÚfig
,

22 
scmv91111_cÚfigu¿tiÚ_t
 * 
scm_cÚfig
);

	@src/libchip/network/sonic.c

34 
	~<¹ems.h
>

35 
	~<¹ems/¹ems_bsdÃt.h
>

36 
	~<libch/sÚic.h
>

38 
	~<¡dio.h
>

39 
	~<¡rg.h
>

41 
	~<ºo.h
>

42 
	~<¹ems/rÜ.h
>

44 
	~<sys/·¿m.h
>

45 
	~<sys/mbuf.h
>

46 
	~<sys/sock.h
>

47 
	~<sys/sockio.h
>

48 
	~<sys/sockio.h
>

50 
	~<Ãt/if.h
>

52 
	~<Ãt/.h
>

53 
	~<Ãt/if_h.h
>

55 
¹ems_i¤_y
 
£t_veùÜ
Ð¹ems_i¤_y, 
¹ems_veùÜ_numb
, );

57 #ià(
SONIC_DEBUG
 & 
SONIC_DEBUG_DUMP_MBUFS
)

58 
	~<¹ems/dumpbuf.h
>

65 
	#SONIC_STATIC
 

	)

70 #iâdeà
NSONIC


71 
	#NSONIC
 1

	)

82 
	#RRA_EXTRA_COUNT
 0

	)

87 
	#INTERRUPT_EVENT
 
RTEMS_EVENT_1


	)

93 
	#START_TRANSMIT_EVENT
 
RTEMS_EVENT_2


	)

98 
	#MAXIMUM_FRAME_SIZE
 1518

	)

105 
	#RBUF_SIZE
 (( (*è+ (
MAXIMUM_FRAME_SIZE
è+ 3è& ~3)

	)

107 
	#RBUF_WC
 (
RBUF_SIZE
 / 2)

	)

112 
	#LSW
(
p
è((
ut16_t
)((
u_t
)Õ)))

	)

113 
	#MSW
(
p
è((
ut16_t
)((
u_t
)Õè>> 16))

	)

114 
	#PTR
(
m
,
l
è((*)(((
ut16_t
)(m)<<16)|(ut16_t)Ö)))

	)

119 
	ssÚic_soác
 {

124 
¬pcom
 
	m¬pcom
;

131 *
	msÚic
;

136 
sÚic_wre_»gi¡_t
 
	mwre_»gi¡
;

137 
sÚic_»ad_»gi¡_t
 
	m»ad_»gi¡
;

142 
¹ems_veùÜ_numb
 
	mveùÜ
;

147 
ut32_t
 
	mdü_v®ue
;

148 
ut32_t
 
	mdc2_v®ue
;

153 
	macû±Brßdÿ¡
;

158 
¹ems_id
 
	mrxD«mÚTid
;

159 
¹ems_id
 
	mtxD«mÚTid
;

164 
	mrdaCouÁ
;

165 
ReûiveResourûPor_t
 
	mr§
;

166 
ReûiveResourûPor_t
 
	m»a
;

167 
CamDesütÜPor_t
 
	mcdp
;

168 
ReûiveDesütÜPor_t
 
	mrda
;

169 
ReûiveDesütÜPor_t
 
	mrdp_Ï¡
;

174 
	mtdaCouÁ
;

175 
T¿nsmDesütÜPor_t
 
	mtdaHd
;

176 
T¿nsmDesütÜPor_t
 
	mtdaTa
;

181 
	mIÁru±s
;

182 
	mrxIÁru±s
;

183 
	mrxMis£d
;

184 
	mrxGÁ
;

185 
	mrxNÚOù
;

186 
	mrxBadCRC
;

187 
	mrxCÞlisiÚ
;

189 
	mtxIÁru±s
;

190 
	mtxSgËCÞlisiÚ
;

191 
	mtxMuÉËCÞlisiÚ
;

192 
	mtxCÞlisiÚ
;

193 
	mtxDeã¼ed
;

194 
	mtxUndrun
;

195 
	mtxL©eCÞlisiÚ
;

196 
	mtxExûssiveCÞlisiÚ
;

197 
	mtxExûssiveDeã¼®
;

198 
	mtxLo¡C¬rr
;

199 
	mtxRawWa
;

201 
SONIC_STATIC
 
sÚic_soác
 
	gsÚic_soác
[
NSONIC
];

212 #ià(
SONIC_DEBUG
 & 
SONIC_DEBUG_MEMORY_DESCRIPTORS
)

213 
	$sÚic_´t_tx_desütÜ
(

214 
T¿nsmDesütÜPor_t
 
tdp


217 
	`´tf
Ð"TXD ==> %p", 
tdp
 );

218 
	`´tf
Ð"kt_cÚfig = 0x%04x", 
tdp
->
pkt_cÚfig
 & 0xffff);

219 
	`´tf
Ð"kt_sizð0x%04x\n", 
tdp
->
pkt_size
 & 0xffff );

220 
	`´tf
Ð" f¿g_couÁ = %d", 
tdp
->
äag_couÁ
 & 0xffff );

222 
	`´tf
Ð"exð%p", 
tdp
->
Ãxt
 );

223 
	`´tf
Ð"k°ð%p\n", 
tdp
->
lkp
 );

224 
	`´tf
Ð" mbuå = %p", 
tdp
->
mbuå
 );

225 iàÐ
tdp
->
mbuå
 )

226 
	`´tf
Ð" mbuå->d©¨ð%p", 
	`mtod
 ( 
tdp
->
mbuå
, *) );

227 
	`puts
("");

228 
	}
}

230 
	$sÚic_´t_rx_desütÜ
(

231 
ReûiveDesütÜPor_t
 
rdp


234 
	`´tf
Ð"RXD ==> %p\n", 
rdp
 );

235 
	`´tf
Ð" stu ð0x%04x", 
rdp
->
¡©us
 & 0xffff );

236 
	`´tf
Ð" by_couÁ = 0x%04x\n", 
rdp
->
by_couÁ
 & 0xffff );

237 
	`´tf
Ð"kð0x%04x%04x", 
rdp
->
pkt_msw
,dp->
pkt_lsw
 );

238 
	`´tf
Ð" seq_nØð%d", 
rdp
->
£q_no
 );

239 
	`´tf
Ð"k = %d\n", 
rdp
->
lk
 );

240 
	`´tf
Ð" in_u£ = %d", 
rdp
->
_u£
 );

241 
	`´tf
Ð"exð%p", 
rdp
->
Ãxt
 );

242 
	`´tf
Ð" mbuå = %p", 
rdp
->
mbuå
 );

243 iàÐ
rdp
->
mbuå
 )

244 
	`´tf
Ð" mbuå->d©¨ð%p", 
	`mtod
 ( 
rdp
->
mbuå
, *) );

245 
	`puts
("");

246 
	}
}

257 
	$sÚic_abË_¼u±s
(

258 
sÚic_soác
 *
sc
,

259 
ut32_t
 
mask


262 *
½
 = 
sc
->
sÚic
;

263 
¹ems_¼u±_Ëv
 
Ëv
;

265 
	`¹ems_¼u±_di§bË
Ð
Ëv
 );

266 (*
sc
->
wre_»gi¡
)(

267 
½
,

268 
SONIC_REG_IMR
,

269 (*
sc
->
»ad_»gi¡
)(
½
, 
SONIC_REG_IMR
è| 
mask


271 
	`¹ems_¼u±_abË
Ð
Ëv
 );

272 
	}
}

274 
	$sÚic_di§bË_¼u±s
(

275 
sÚic_soác
 *
sc
,

276 
ut32_t
 
mask


279 *
½
 = 
sc
->
sÚic
;

280 
¹ems_¼u±_Ëv
 
Ëv
;

282 
	`¹ems_¼u±_di§bË
Ð
Ëv
 );

283 (*
sc
->
wre_»gi¡
)(

284 
½
,

285 
SONIC_REG_IMR
,

286 (*
sc
->
»ad_»gi¡
)(
½
, 
SONIC_REG_IMR
è& ~
mask


288 
	`¹ems_¼u±_abË
Ð
Ëv
 );

289 
	}
}

291 
	$sÚic_þr_¼u±s
(

292 
sÚic_soác
 *
sc
,

293 
ut32_t
 
mask


296 *
½
 = 
sc
->
sÚic
;

297 
¹ems_¼u±_Ëv
 
Ëv
;

299 
	`¹ems_¼u±_di§bË
Ð
Ëv
 );

300 (*
sc
->
wre_»gi¡
)Ð
½
, 
SONIC_REG_ISR
, 
mask
);

301 
	`¹ems_¼u±_abË
Ð
Ëv
 );

302 
	}
}

304 
	$sÚic_commªd
(

305 
sÚic_soác
 *
sc
,

306 
ut32_t
 
mask


309 *
½
 = 
sc
->
sÚic
;

310 
¹ems_¼u±_Ëv
 
Ëv
;

312 
	`¹ems_¼u±_di§bË
Ð
Ëv
 );

313 (*
sc
->
wre_»gi¡
)Ð
½
, 
SONIC_REG_CR
, 
mask
);

314 
	`¹ems_¼u±_abË
Ð
Ëv
 );

315 
	}
}

321 
SONIC_STATIC
 * 
	$sÚic_®loÿ
(
nbys
)

323 *
p
;

324 
a1
, 
a2
;

331 
p
 = 
	`m®loc
Ð
nbys
, 
M_MBUF
, 
M_NOWAIT
 );

332 ià(
p
 =ð
NULL
)

333 
	`¹ems_·nic
 ("No memory!");

334 
	`mem£t
 (
p
, '\0', 
nbys
);

335 
a1
 = ()
p
;

336 
a2
 = 
a1
 + 
nbys
 - 1;

337 ià((
a1
 >> 16è=ð(
a2
 >> 16))

340 #ià(
SONIC_DEBUG
 & 
SONIC_DEBUG_MEMORY_ALLOCATE
)

341 
	`´tf
Ð"sÚic_®loÿ %d by © %p\n", 
nbys
, 
p
 );

343  
p
;

344 
	}
}

350 
SONIC_STATIC
 
	$sÚic_¡Ý
 (
sÚic_soác
 *
sc
)

352 
iâ
 *
iå
 = &
sc
->
¬pcom
.
ac_if
;

354 
iå
->
if_æags
 &ð~
IFF_RUNNING
;

359 
	`sÚic_commªd
(
sc
, 
CR_HTX
 | 
CR_RXDIS
 );

360 
	}
}

365 
SONIC_STATIC
 
	$sÚic_¡©s
 (
sÚic_soác
 *
sc
)

367 
	`´tf
 (" TÙ® IÁru±s:%-8lu", 
sc
->
IÁru±s
);

368 
	`´tf
 (" Rx IÁru±s:%-8lu", 
sc
->
rxIÁru±s
);

369 
	`´tf
 (" GÁ:%-8lu", 
sc
->
rxGÁ
);

370 
	`´tf
 (" NÚ-où:%-8lu\n", 
sc
->
rxNÚOù
);

371 
	`´tf
 (" Bad CRC:%-8lu", 
sc
->
rxBadCRC
);

372 
	`´tf
 (" CÞlisiÚ:%-8lu", 
sc
->
rxCÞlisiÚ
);

373 
	`´tf
 (" Mis£d:%-8lu\n", 
sc
->
rxMis£d
);

375 
	`´tf
 ( " Tx IÁru±s:%-8lu", 
sc
->
txIÁru±s
);

376 
	`´tf
 ( " Deã¼ed:%-8lu", 
sc
->
txDeã¼ed
);

377 
	`´tf
 (" Lo¡ C¬rr:%-8lu\n", 
sc
->
txLo¡C¬rr
);

378 
	`´tf
 ( "SgË CÞlisiÚs:%-8lu", 
sc
->
txSgËCÞlisiÚ
);

379 
	`´tf
 ( "MuÉË CÞlisiÚs:%-8lu", 
sc
->
txMuÉËCÞlisiÚ
);

380 
	`´tf
 ("ExûssivCÞlisiÚs:%-8lu\n", 
sc
->
txExûssiveCÞlisiÚ
);

381 
	`´tf
 ( " TÙ® CÞlisiÚs:%-8lu", 
sc
->
txCÞlisiÚ
);

382 
	`´tf
 ( " L©CÞlisiÚ:%-8lu", 
sc
->
txL©eCÞlisiÚ
);

383 
	`´tf
 (" Undrun:%-8lu\n", 
sc
->
txUndrun
);

384 
	`´tf
 ( " Raw ouuwa:%-8lu\n", 
sc
->
txRawWa
);

385 
	}
}

395 
SONIC_STATIC
 
¹ems_i¤
 
	$sÚic_¼u±_hªdËr
 (
¹ems_veùÜ_numb
 
v
)

397 
sÚic_soác
 *
sc
 = sonic_softc;

398 
ut32_t
 
i¤
, 
imr
;

399 *
½
;

401 #ià(
NSONIC
 > 1)

406 ià(
sc
->
veùÜ
 =ð
v
)

408 ià(++
sc
 =ð&
sÚic
[
NSONIC
])

416 
½
 = 
sc
->
sÚic
;

418 
sc
->
IÁru±s
++;

420 
i¤
 = (*
sc
->
»ad_»gi¡
)Ð
½
, 
SONIC_REG_ISR
 );

421 
imr
 = (*
sc
->
»ad_»gi¡
)Ð
½
, 
SONIC_REG_IMR
 );

426 ià(
imr
 & 
i¤
 & (
IMR_PRXEN
 | 
IMR_RBAEEN
)) {

427 
imr
 &ð~(
IMR_PRXEN
 | 
IMR_RBAEEN
);

428 
sc
->
rxIÁru±s
++;

429 
	`¹ems_bsdÃt_evt_£nd
 (
sc
->
rxD«mÚTid
, 
INTERRUPT_EVENT
);

430 (*
sc
->
wre_»gi¡
)Ð
½
, 
SONIC_REG_IMR
, 
imr
 );

431 (*
sc
->
wre_»gi¡
)Ð
½
, 
SONIC_REG_ISR
, 
i¤
 & 
ISR_PKTRX
 );

439 ià(
imr
 & 
i¤
 & (
IMR_PINTEN
 | 
IMR_TXEREN
)) {

440 
sc
->
txIÁru±s
++;

441 
	`¹ems_bsdÃt_evt_£nd
 (
sc
->
txD«mÚTid
, 
INTERRUPT_EVENT
);

442 (*
sc
->
wre_»gi¡
)Ð
½
, 
SONIC_REG_ISR
, 
ISR_PINT
 | 
ISR_TXDN
 | 
ISR_TXER
 );

445 
	}
}

459 
SONIC_STATIC
 
	$sÚic_»te_tda
 (
sÚic_soác
 *
sc
)

461 
ut16_t
 
¡©us
;

462 
cÞlisiÚs
;

463 
mbuf
 *
m
, *
n
;

468 (
¡©us
 = 
sc
->
tdaTa
->status) != 0) {

470 #ià(
SONIC_DEBUG
 & 
SONIC_DEBUG_DESCRIPTORS
)

471 
	`´tf
Ð"»tTDA %°(0x%04x)\n", 
sc
->
tdaTa
, 
¡©us
 );

474 #ià(
SONIC_DEBUG
 & 
SONIC_DEBUG_ERRORS
)

480 iàÐ(
¡©us
 & ~(
TDA_STATUS_COLLISION_MASK
|
TDA_STATUS_DEF
)) != 0x0001 )

481 
	`´tf
( "ERROR:etire TDA %p (0x%08x)\n",

482 
sc
->
tdaTa
, sc->tdaTa->
¡©us
 );

488 ià(
¡©us
 & (
TDA_STATUS_EXD
 |

489 
TDA_STATUS_EXC
 |

490 
TDA_STATUS_FU
 |

491 
TDA_STATUS_BCM
)) {

496 
ut16_t
 
lk
;

497 #ià(
SONIC_DEBUG
 & 
SONIC_DEBUG_ERRORS
)

498 
	`´tf
("restarting sonicfterrror\n");

501 
lk
 = *(
sc
->
tdaTa
->
lkp
);

503 ià((
lk
 & 
TDA_LINK_EOL
) == 0) {

504 *
½
 = 
sc
->
sÚic
;

506 (*
sc
->
wre_»gi¡
)Ð
½
, 
SONIC_REG_CTDA
, 
lk
 );

507 
	`sÚic_commªd
(
sc
, 
CR_TXP
 );

514 
cÞlisiÚs
 = (
¡©us
 & 
TDA_STATUS_COLLISION_MASK
è>> 
TDA_STATUS_COLLISION_SHIFT
;

515 ià(
cÞlisiÚs
) {

516 ià(
cÞlisiÚs
 == 1)

517 
sc
->
txSgËCÞlisiÚ
++;

519 
sc
->
txMuÉËCÞlisiÚ
++;

520 
sc
->
txCÞlisiÚ
 +ð
cÞlisiÚs
;

522 ià(
¡©us
 & 
TDA_STATUS_EXC
)

523 
sc
->
txExûssiveCÞlisiÚ
++;

524 ià(
¡©us
 & 
TDA_STATUS_OWC
)

525 
sc
->
txL©eCÞlisiÚ
++;

526 ià(
¡©us
 & 
TDA_STATUS_EXD
)

527 
sc
->
txExûssiveDeã¼®
++;

528 ià(
¡©us
 & 
TDA_STATUS_DEF
)

529 
sc
->
txDeã¼ed
++;

530 ià(
¡©us
 & 
TDA_STATUS_FU
)

531 
sc
->
txUndrun
++;

532 ià(
¡©us
 & 
TDA_STATUS_CRSL
)

533 
sc
->
txLo¡C¬rr
++;

538 
m
 = 
sc
->
tdaTa
->
mbuå
;

539  
m
 ) {

540 
	`MFREE
(
m
, 
n
);

541 
m
 = 
n
;

548 
sc
->
tdaTa
->
¡©us
 = 0;

553 
sc
->
tdaTa
 = sc->tdaTa->
Ãxt
;

554 #ià(
SONIC_DEBUG
 & 
SONIC_DEBUG_DESCRIPTORS
)

555 
	`´tf
Ð"ÃxTDA %p\n", 
sc
->
tdaTa
 );

558 
	}
}

563 
SONIC_STATIC
 
	$sÚic_£nd·ck
 (
iâ
 *
iå
, 
mbuf
 *
m
)

565 
sÚic_soác
 *
sc
 = 
iå
->
if_soác
;

566 
mbuf
 *
l
 = 
NULL
;

567 
T¿nsmDesütÜPor_t
 
tdp
;

568 vÞ©
T¿nsmDesütÜF¿gLk
 *
å
;

569 
·ckSize
;

570 
i
;

571 
¹ems_evt_£t
 
evts
;

572 
·dBuf
[64];

583 
sc
->
tdaHd
->
Ãxt
->
¡©us
 != 0) {

588 
	`sÚic_»te_tda
 (
sc
);

590 ià(
sc
->
tdaHd
->
Ãxt
->
¡©us
 == 0)

593 #ià(
SONIC_DEBUG
 & 
SONIC_DEBUG_ERRORS
)

594 
	`´tf
("blocking until TDAsrevailable\n");

605 
	`¹ems_bsdÃt_evt_»ûive
 (
INTERRUPT_EVENT
,

606 
RTEMS_WAIT
|
RTEMS_EVENT_ANY
,

607 
RTEMS_NO_TIMEOUT
,

608 &
evts
);

609 
	`sÚic_di§bË_¼u±s
Ð
sc
, 
IMR_PINTEN
 );

610 
	`sÚic_»te_tda
 (
sc
);

619 
tdp
 = 
sc
->
tdaHd
->
Ãxt
;

620 
tdp
->
mbuå
 = 
m
;

621 
·ckSize
 = 0;

622 
å
 = 
tdp
->
äag
;

623 
i
 = 0 ; i < 
MAXIMUM_FRAGS_PER_DESCRIPTOR
 ; i++, 
å
++) {

627 ià(
m
->
m_Ën
) {

628 *
p
 = 
	`mtod
 (
m
, *);

629 
å
->
äag_lsw
 = 
	`LSW
(
p
);

630 
å
->
äag_msw
 = 
	`MSW
(
p
);

631 
å
->
äag_size
 = 
m
->
m_Ën
;

632 
·ckSize
 +ð
m
->
m_Ën
;

633 #ià(
SONIC_DEBUG
 & 
SONIC_DEBUG_FRAGMENTS
)

634 
	`´tf
( "fp %p 0x%04x%04x %d=%d .. %d\n",

635 
å
, fp->
äag_msw
, fp->
äag_lsw
, fp->
äag_size
, 
m
->
m_Ën
, 
·ckSize
 );

637 #ià(
SONIC_DEBUG
 & 
SONIC_DEBUG_DUMP_TX_MBUFS
)

638 
	`¹ems_´t_bufãr
(

639 
p
,

640 (
å
->
äag_size
 > 
MAXIMUM_FRAME_SIZE
) ? MAXIMUM_FRAME_SIZE : fp->frag_size

643 
l
 = 
m
;

644 
m
 = m->
m_Ãxt
;

647 
mbuf
 *
n
;

648 
	`MFREE
 (
m
, 
n
);

649 
m
 = 
n
;

650 ià(
l
 !ð
NULL
)

651 
l
->
m_Ãxt
 = 
m
;

656 ià(
m
 =ð
NULL
)

663 ià((
·ckSize
 < 64è&& (
i
 < 
MAXIMUM_FRAGS_PER_DESCRIPTOR
)) {

664 
·dSize
 = 64 - 
·ckSize
;

665 
å
++;

666 
å
->
äag_lsw
 = 
	`LSW
(
·dBuf
);

667 
å
->
äag_msw
 = 
	`MSW
(
·dBuf
);

668 
å
->
äag_size
 = 
·dSize
;

669 #ià(
SONIC_DEBUG
 & 
SONIC_DEBUG_FRAGMENTS
)

670 
	`´tf
( "PAD fp %p 0x%04x%04x %d\n",

671 
å
, fp->
äag_msw
, fp->
äag_lsw
, fp->
äag_size
 );

673 
·ckSize
 +ð
·dSize
;

674 
i
++;

680 
tdp
->
pkt_size
 = 
·ckSize
;

681 
tdp
->
äag_couÁ
 = 
i
 + 1;

682 
tdp
->
¡©us
 = 0;

688 
tdp
->
lkp
 = &(
å
+1)->
äag_lk
;

689 *
tdp
->
lkp
 = 
	`LSW
Ñdp->
Ãxt
è| 
TDA_LINK_EOL
;

690 iàÐ
sc
->
tdaHd
->
äag_couÁ
 )

691 *
sc
->
tdaHd
->
lkp
 &ð~
TDA_LINK_EOL
;

692 
sc
->
tdaHd
 = 
tdp
;

696 
	`sÚic_commªd
(
sc
, 
CR_TXP
 );

701 
	`sÚic_»te_tda
 (
sc
);

702 
	}
}

707 
SONIC_STATIC
 
	$sÚic_txD«mÚ
 (*
¬g
)

709 
sÚic_soác
 *
sc
 = (sÚic_soáø*)
¬g
;

710 
iâ
 *
iå
 = &
sc
->
¬pcom
.
ac_if
;

711 
mbuf
 *
m
;

712 
¹ems_evt_£t
 
evts
;

718 
	`¹ems_bsdÃt_evt_»ûive
 (

719 
START_TRANSMIT_EVENT
,

720 
RTEMS_EVENT_ANY
 | 
RTEMS_WAIT
,

721 
RTEMS_NO_TIMEOUT
,

722 &
evts


732 
	`IF_DEQUEUE
(&
iå
->
if_¢d
, 
m
);

733 ià(!
m
)

735 
	`sÚic_£nd·ck
 (
iå
, 
m
);

737 
iå
->
if_æags
 &ð~
IFF_OACTIVE
;

739 
	}
}

753 
SONIC_STATIC
 
	$sÚic_rda_wa
(

754 
sÚic_soác
 *
sc
,

755 
ReûiveDesütÜPor_t
 
rdp


758 
i
;

759 *
½
 = 
sc
->
sÚic
;

760 
¹ems_evt_£t
 
evts
;

790 ià((*
sc
->
»ad_»gi¡
)Ð
½
, 
SONIC_REG_ISR
 ) & 
ISR_RBAE
) {

792 #ià(
SONIC_DEBUG
 & 
SONIC_DEBUG_ERRORS
)

793 
	`´tf
( "ERROR:ooksike giantacket -- RBAE\n" );

800 ià(
rdp
->
_u£
 =ð
RDA_IN_USE
) {

801 #ià(
SONIC_DEBUG
 & 
SONIC_DEBUG_ERRORS
)

802 
	`´tf
( "ERROR:ope justn RBAE\n" );

810 ià((*
sc
->
»ad_»gi¡
)Ð
½
, 
SONIC_REG_CR
 ) & 
CR_RXEN
)

811 
	`¹ems_·nic
 ("SONIC RBAE/RXEN");

816 
sc
->
rxGÁ
++;

829 
i
 = 0 ; i < 2 ; i++) {

830 ià((*
sc
->
»ad_»gi¡
)Ð
½
, 
SONIC_REG_RRP
 ) ==

831 (*
sc
->
»ad_»gi¡
)Ð
½
, 
SONIC_REG_RSA
 ))

832 (*
sc
->
wre_»gi¡
)(

833 
½
,

834 
SONIC_REG_RRP
,

835 (*
sc
->
»ad_»gi¡
)Ð
½
, 
SONIC_REG_REA
 )

837 (*
sc
->
wre_»gi¡
)(

838 
½
,

839 
SONIC_REG_RRP
,

840 (*
sc
->
»ad_»gi¡
)(
½
, 
SONIC_REG_RRP
è- (
ReûiveResourû_t
)

847 
	`sÚic_þr_¼u±s
Ð
sc
, 
ISR_RBAE
 );

848 
	`sÚic_commªd
Ð
sc
, 
CR_RXEN
 );

854 ià(
rdp
->
_u£
 =ð
RDA_IN_USE
)

860 
	`sÚic_abË_¼u±s
Ð
sc
, (
IMR_PRXEN
 | 
IMR_RBAEEN
) );

865 
	`¹ems_bsdÃt_evt_»ûive
(

866 
INTERRUPT_EVENT
,

867 
RTEMS_WAIT
|
RTEMS_EVENT_ANY
,

868 
RTEMS_NO_TIMEOUT
,

869 &
evts


872 #ià(
SONIC_DEBUG
 & 
SONIC_DEBUG_DESCRIPTORS
)

873 
	`´tf
Ð"RDA %p\n", 
rdp
 );

876 #ià(
SONIC_DEBUG
 & 
SONIC_DEBUG_ERRORS
)

877 ià(
rdp
->
¡©us
 & 0x000E)

878 
	`´tf
Ð"ERROR: RDA %°(0x%04x)\n", 
rdp
,dp->
¡©us
 );

881 
	}
}

883 #ifdeà
CPU_U32_FIX


895 
	$®ign
(
mbuf
 *
m
)

897 *
f¡
, *
Ï¡
, 
d©a
;

898 
tmp
 = 0;

900 ià((((è
m
->
m_d©a
è& 2è&& (m->
m_Ën
)) {

901 
Ï¡
 = (*è((((è
m
->
m_d©a
è+ m->
m_Ën
 + 8) & ~3);

902 
f¡
 = (*è(((è
m
->
m_d©a
) & ~3);

903 
tmp
 = *
f¡
 << 16;

904 
f¡
++;

906 
d©a
 = *
f¡
;

907 *
f¡
 = 
tmp
 | (
d©a
 >> 16);

908 
tmp
 = 
d©a
 << 16;

909 
f¡
++;

910 } 
f¡
 <ð
Ï¡
);

912 
m
->
m_d©a
 = (
ÿddr_t
)((() m->m_data) + 2);

914 
	}
}

920 
SONIC_STATIC
 
	$sÚic_rxD«mÚ
 (*
¬g
)

922 
sÚic_soác
 *
sc
 = (sÚic_soáø*)
¬g
;

923 
iâ
 *
iå
 = &
sc
->
¬pcom
.
ac_if
;

924 *
½
 = 
sc
->
sÚic
;

925 
mbuf
 *
m
;

926 
ut16_t
 
¡©us
;

927 
ReûiveDesütÜPor_t
 
rdp
;

928 
ReûiveResourûPor_t
 
rwp
, 
»a
;

929 
ut16_t
 
ÃwMis£dT®ly
, 
ÞdMis£dT®ly
;

931 
rwp
 = 
sc
->
r§
;

932 
»a
 = 
sc
->rea;

933 
rdp
 = 
sc
->
rda
;

938 
ÞdMis£dT®ly
 = (*
sc
->
»ad_»gi¡
)Ð
½
, 
SONIC_REG_MPT
 );

947 ià(
rdp
->
_u£
 =ð
RDA_FREE
) {

948 
	`sÚic_rda_wa
 (
sc
, 
rdp
);

951 #ià(
SONIC_DEBUG
 & 
SONIC_DEBUG_DESCRIPTORS
)

952 
	`´tf
Ð"Incomgack %°¡©us=0x%04x\n", 
rdp
,dp->
¡©us
 );

958 
¡©us
 = 
rdp
->status;

959 ià(
¡©us
 & 
RDA_STATUS_PRX
) {

960 
h_hd
 *
eh
;

961 *
p
;

971 #ià(
SONIC_DEBUG
 & 
SONIC_DEBUG_MEMORY_DESCRIPTORS
)

972 
	`sÚic_´t_rx_desütÜ
Ð
rdp
 );

973 ià((
	`LSW
(
rdp
->
mbuå
->
m_d©a
è!ðrdp->
pkt_lsw
)

974 || (
	`MSW
(
rdp
->
mbuå
->
m_d©a
è!ðrdp->
pkt_msw
))

975 
	`´tf
 ("SONIC RDA/RRA %p, %08x\n",
rdp
->
mbuå
->
m_d©a
,Ôdp->
pkt_msw
 << 16) |

976 (
rdp
->
pkt_lsw
 & 0x0ffff));

978 
rdp
->
by_couÁ
 &= 0x0ffff;

979 
m
 = 
rdp
->
mbuå
;

980 
m
->
m_Ën
 = m->
m_pkthdr
.
Ën
 = 
rdp
->
by_couÁ
 -

981 (
ut32_t
) -

982 (
h_hd
);

983 
eh
 = 
	`mtod
 (
m
, 
h_hd
 *);

984 
m
->
m_d©a
 +ð(
h_hd
);

986 #ifdeà
CPU_U32_FIX


987 
	`®ign
(
m
);

990 #ià(
SONIC_DEBUG
 & 
SONIC_DEBUG_DUMP_RX_MBUFS
)

991 
	`¹ems_´t_bufãr
Ð(*è
eh
, (
h_hd
) );

992 
	`¹ems_´t_bufãr
Ð(*è
m
, 96 );

1000 
	`h_put
 (
iå
, 
eh
, 
m
);

1013 ià((
	`LSW
(
p
è!ð
rwp
->
buff_±r_lsw
)

1014 || (
	`MSW
(
p
è!ð
rwp
->
buff_±r_msw
))

1015 
	`¹ems_·nic
 ("SONIC RDA/RRA");

1022 
	`MGETHDR
 (
m
, 
M_WAIT
, 
MT_DATA
);

1023 
	`MCLGET
 (
m
, 
M_WAIT
);

1024 
m
->
m_pkthdr
.
rcvif
 = 
iå
;

1025 
rdp
->
mbuå
 = 
m
;

1026 
p
 = 
	`mtod
 (
m
, *);

1032 
rwp
->
buff_±r_lsw
 = 
	`LSW
(
p
);

1033 
rwp
->
buff_±r_msw
 = 
	`MSW
(
p
);

1034 
rwp
->
buff_wc_lsw
 = 
RBUF_WC
;

1035 
rwp
->
buff_wc_msw
 = 0;

1036 
rwp
++;

1038 ià(
rwp
 =ð
»a
) {

1039 #ià(
SONIC_DEBUG
 & 
SONIC_DEBUG_MEMORY
)

1040 
	`´tf
Ð"W¿µg RWP from %°tØ%p\n", 
rwp
, 
sc
->
r§
 );

1042 
rwp
 = 
sc
->
r§
;

1044 (*
sc
->
wre_»gi¡
)Ð
½
, 
SONIC_REG_RWP
 , 
	`LSW
(
rwp
) );

1049 ià((*
sc
->
»ad_»gi¡
)Ð
½
, 
SONIC_REG_ISR
 ) & 
ISR_RBE
)

1050 
	`sÚic_þr_¼u±s
Ð
sc
, 
ISR_RBE
 );

1053 ià(
¡©us
 & 
RDA_STATUS_COL
)

1054 
sc
->
rxCÞlisiÚ
++;

1055 ià(
¡©us
 & 
RDA_STATUS_FAER
)

1056 
sc
->
rxNÚOù
++;

1057 ià(
¡©us
 & 
RDA_STATUS_CRCR
)

1058 
sc
->
rxBadCRC
++;

1064 
ÃwMis£dT®ly
 = (*
sc
->
»ad_»gi¡
)Ð
½
, 
SONIC_REG_MPT
 );

1065 ià(
ÃwMis£dT®ly
 !ð
ÞdMis£dT®ly
) {

1066 
sc
->
rxMis£d
 +ð(
ÃwMis£dT®ly
 - 
ÞdMis£dT®ly
) & 0xFFFF;

1067 
ÃwMis£dT®ly
 = 
ÞdMis£dT®ly
;

1074 
rdp
->
lk
 |ð
RDA_LINK_EOL
;

1075 
rdp
->
_u£
 = 
RDA_FREE
;

1076 
sc
->
rdp_Ï¡
->
lk
 &ð~
RDA_LINK_EOL
;

1077 
sc
->
rdp_Ï¡
 = 
rdp
;

1078 
rdp
 =dp->
Ãxt
;

1081 
	}
}

1094 
SONIC_STATIC
 
	$sÚic_lize_h¬dw¬e
(
sÚic_soác
 *
sc
)

1096 *
½
 = 
sc
->
sÚic
;

1097 
i
;

1098 *
hwaddr
;

1099 
T¿nsmDesütÜPor_t
 
tdp
;

1100 
ReûiveDesütÜPor_t
 
Üdp
, 
rdp
;

1101 
ReûiveResourûPor_t
 
rwp
;

1102 
mbuf
 *
m
;

1103 *
p
;

1104 
CamDesütÜPor_t
 
cdp
;

1114 iàÐ(*
sc
->
»ad_»gi¡
)Ð
½
, 
SONIC_REG_SR
 ) <ð
SONIC_REVISION_B
 ) {

1115 
	`¹ems_çl_rÜ_occu¼ed
( 0x0BADF00D );

1126 
sc
->
tdaTa
 = 
	`sÚic_®loÿ
(sc->
tdaCouÁ
 *  *
tdp
);

1127 #ià(
SONIC_DEBUG
 & 
SONIC_DEBUG_MEMORY
)

1128 
	`´tf
Ð"tdaTa = %p\n", 
sc
->
tdaTa
 );

1130 
tdp
 = 
sc
->
tdaTa
;

1131 
i
 = 0 ; i < 
sc
->
tdaCouÁ
 ; i++) {

1144 ià(
i
 & 3)

1145 
tdp
->
pkt_cÚfig
 = 
TDA_CONFIG_PINT
;

1147 
tdp
->
¡©us
 = 0;

1148 
tdp
->
äag_couÁ
 = 0;

1149 
tdp
->
lk_·d
 = 
	`LSW
Ñd°+ 1è| 
TDA_LINK_EOL
;

1150 
tdp
->
lkp
 = &(Ñd°+ 1)->
äag
[0].
äag_lk
);

1151 
tdp
->
Ãxt
 = (
T¿nsmDesütÜ_t
 *)(tdp + 1);

1152 #ià(
SONIC_DEBUG
 & 
SONIC_DEBUG_MEMORY_DESCRIPTORS
)

1153 
	`sÚic_´t_tx_desütÜ
Ð
tdp
 );

1155 
tdp
++;

1157 
tdp
--;

1158 
sc
->
tdaHd
 = 
tdp
;

1159 
tdp
->
lk_·d
 = 
	`LSW
(
sc
->
tdaTa
è| 
TDA_LINK_EOL
;

1160 
tdp
->
Ãxt
 = (
T¿nsmDesütÜ_t
 *)
sc
->
tdaTa
;

1161 
tdp
->
lkp
 = &
sc
->
tdaTa
->
äag
[0].
äag_lk
;

1170 
sc
->
rda
 = 
	`sÚic_®loÿ
(

1171 (
sc
->
rdaCouÁ
 * (
ReûiveDesütÜ_t
)) +

1172 (
CamDesütÜ_t
) );

1173 
sc
->
cdp
 = (
CamDesütÜPor_t
è((*)sc->
rda
 +

1174 (
sc
->
rdaCouÁ
 * (
ReûiveDesütÜ_t
)));

1175 #ià(
SONIC_DEBUG
 & 
SONIC_DEBUG_MEMORY
)

1176 
	`´tf
Ð"rd¨¬ = %p\n", 
sc
->
rda
 );

1177 
	`´tf
Ð"cd°¬ = %p\n", 
sc
->
cdp
 );

1180 
Üdp
 = 
rdp
 = 
sc
->
rda
;

1181 
i
 = 0 ; i < 
sc
->
rdaCouÁ
 ; i++) {

1186 
rdp
->
lk
 = 
	`LSW
(rdp + 1);

1187 
rdp
->
_u£
 = 
RDA_FREE
;

1188 
rdp
->
Ãxt
 = (
ReûiveDesütÜ_t
 *)(rdp + 1);

1189 
Üdp
 = 
rdp
;

1190 
rdp
++;

1196 
Üdp
->
Ãxt
 = 
sc
->
rda
;

1197 
Üdp
->
lk
 = 
	`LSW
(
sc
->
rda
è| 
RDA_LINK_EOL
;

1198 
sc
->
rdp_Ï¡
 = 
Üdp
;

1208 
sc
->
r§
 = 
	`sÚic_®loÿ
((sc->
rdaCouÁ
 + 
RRA_EXTRA_COUNT
) *  *sc->rsa);

1209 #ià(
SONIC_DEBUG
 & 
SONIC_DEBUG_MEMORY
)

1210 
	`´tf
Ð"r§»¨ð%p\n", 
sc
->
r§
 );

1218 
rwp
 = 
sc
->
r§
;

1219 
i
 = 0 ; i < (
sc
->
rdaCouÁ
 + 
RRA_EXTRA_COUNT
è; i++, 
rwp
++) {

1228 
	`MGETHDR
 (
m
, 
M_WAIT
, 
MT_DATA
);

1229 
	`MCLGET
 (
m
, 
M_WAIT
);

1230 
m
->
m_pkthdr
.
rcvif
 = &
sc
->
¬pcom
.
ac_if
;

1231 
sc
->
rda
[
i
].
mbuå
 = 
m
;

1233 
p
 = 
	`mtod
 (
m
, *);

1238 
rwp
->
buff_±r_lsw
 = 
	`LSW
(
p
);

1239 
rwp
->
buff_±r_msw
 = 
	`MSW
(
p
);

1240 
rwp
->
buff_wc_lsw
 = 
RBUF_WC
;

1241 
rwp
->
buff_wc_msw
 = 0;

1242 #ià(
SONIC_DEBUG
 & 
SONIC_DEBUG_MEMORY_DESCRIPTORS
)

1243 
	`sÚic_´t_rx_desütÜ
Ð&
sc
->
rda
[
i
] );

1246 
sc
->
»a
 = 
rwp
;

1247 #ià(
SONIC_DEBUG
 & 
SONIC_DEBUG_MEMORY
)

1248 
	`´tf
Ð"»¨¬ = %p\n", 
sc
->
»a
 );

1255 (*
sc
->
wre_»gi¡
)Ð
½
, 
SONIC_REG_CR
, 
CR_RST
 | 
CR_STP
 | 
CR_RXDIS
 | 
CR_HTX
 );

1260 (*
sc
->
wre_»gi¡
)Ð
½
, 
SONIC_REG_DCR
, sc->
dü_v®ue
 );

1261 (*
sc
->
wre_»gi¡
)Ð
½
, 
SONIC_REG_DCR2
, sc->
dc2_v®ue
 );

1263 (*
sc
->
wre_»gi¡
)Ð
½
, 
SONIC_REG_CR
, 
CR_STP
 | 
CR_RXDIS
 | 
CR_HTX
 );

1268 (*
sc
->
wre_»gi¡
)Ð
½
, 
SONIC_REG_IMR
, 0x0 );

1273 (*
sc
->
wre_»gi¡
)Ð
½
, 
SONIC_REG_ISR
, 0x7FFF );

1279 (*
sc
->
wre_»gi¡
)Ð
½
, 
SONIC_REG_CRCT
, 0xFFFF );

1280 (*
sc
->
wre_»gi¡
)Ð
½
, 
SONIC_REG_FAET
, 0xFFFF );

1281 (*
sc
->
wre_»gi¡
)Ð
½
, 
SONIC_REG_MPT
, 0xFFFF );

1282 (*
sc
->
wre_»gi¡
)Ð
½
, 
SONIC_REG_RSC
, 0 );

1290 ià(
sc
->
acû±Brßdÿ¡
)

1291 (*
sc
->
wre_»gi¡
)Ð
½
, 
SONIC_REG_RCR
, 
RCR_BRD
 );

1293 (*
sc
->
wre_»gi¡
)Ð
½
, 
SONIC_REG_RCR
, 0 );

1299 (*
sc
->
wre_»gi¡
)Ð
½
, 
SONIC_REG_URRA
, 
	`MSW
(sc->
r§
) );

1300 (*
sc
->
wre_»gi¡
)Ð
½
, 
SONIC_REG_RSA
, 
	`LSW
(sc->
r§
) );

1302 (*
sc
->
wre_»gi¡
)Ð
½
, 
SONIC_REG_REA
, 
	`LSW
(sc->
»a
) );

1304 (*
sc
->
wre_»gi¡
)Ð
½
, 
SONIC_REG_RRP
, 
	`LSW
(sc->
r§
) );

1305 (*
sc
->
wre_»gi¡
)Ð
½
, 
SONIC_REG_RWP
, 
	`LSW
(sc->
r§
) );

1307 (*
sc
->
wre_»gi¡
)Ð
½
, 
SONIC_REG_URDA
, 
	`MSW
(sc->
rda
) );

1308 (*
sc
->
wre_»gi¡
)Ð
½
, 
SONIC_REG_CRDA
, 
	`LSW
(sc->
rda
) );

1310 (*
sc
->
wre_»gi¡
)Ð
½
, 
SONIC_REG_UTDA
, 
	`MSW
(sc->
tdaTa
) );

1311 (*
sc
->
wre_»gi¡
)Ð
½
, 
SONIC_REG_CTDA
, 
	`LSW
(sc->
tdaTa
) );

1318 (*
sc
->
wre_»gi¡
)Ð
½
, 
SONIC_REG_EOBC
, 
RBUF_WC
 - 2 );

1324 (*
sc
->
wre_»gi¡
)Ð
½
, 
SONIC_REG_CR
, 
CR_RRRA
 );

1325 (*
sc
->
»ad_»gi¡
)Ð
½
, 
SONIC_REG_CR
 ) & 
CR_RRRA
)

1332 (*
sc
->
wre_»gi¡
)Ð
½
, 
SONIC_REG_CR
, 0 );

1338 
hwaddr
 = 
sc
->
¬pcom
.
ac_addr
;

1339 
cdp
 = 
sc
->cdp;

1341 #ià(
SONIC_DEBUG
 & 
SONIC_DEBUG_CAM
)

1342 
	`´tf
( "hwaddr: %2x:%2x:%2x:%2x:%2x:%2x\n",

1343 
hwaddr
[0], hwaddr[1], hwaddr[2], hwaddr[3], hwaddr[4], hwaddr[5] );

1346 
cdp
->
ûp
 = 0;

1347 
cdp
->
ÿp0
 = 
hwaddr
[1] << 8 | hwaddr[0];

1348 
cdp
->
ÿp1
 = 
hwaddr
[3] << 8 | hwaddr[2];

1349 
cdp
->
ÿp2
 = 
hwaddr
[5] << 8 | hwaddr[4];

1350 
cdp
->
û
 = 0x0001;

1352 (*
sc
->
wre_»gi¡
)Ð
½
, 
SONIC_REG_CDC
, 1 );

1353 (*
sc
->
wre_»gi¡
)Ð
½
, 
SONIC_REG_CDP
, 
	`LSW
(
cdp
) );

1354 (*
sc
->
wre_»gi¡
)Ð
½
, 
SONIC_REG_CR
, 
CR_LCAM
 );

1356 (*
sc
->
»ad_»gi¡
)Ð
½
, 
SONIC_REG_CR
 ) & 
CR_LCAM
)

1363 (*
sc
->
wre_»gi¡
)Ð
½
, 
SONIC_REG_CR
, 
CR_RST
 | 
CR_STP
 | 
CR_RXDIS
 | 
CR_HTX
 );

1365 #ià(
SONIC_DEBUG
 & 
SONIC_DEBUG_CAM
)

1366 (*
sc
->
wre_»gi¡
)Ð
½
, 
SONIC_REG_CEP
, 0 );

1367 
	`´tf
 ("Loaded Ethernetddress into SONIC CAM.\n"

1370 
cdp
->
ÿp2
, cdp->
ÿp1
, cdp->
ÿp0
, cdp->
û
,

1371 (*
sc
->
»ad_»gi¡
)Ð
½
, 
SONIC_REG_CAP2
 ),

1372 (*
sc
->
»ad_»gi¡
)Ð
½
, 
SONIC_REG_CAP1
 ),

1373 (*
sc
->
»ad_»gi¡
)Ð
½
, 
SONIC_REG_CAP0
 ),

1374 (*
sc
->
»ad_»gi¡
)Ð
½
, 
SONIC_REG_CE
 ));

1376 (*
sc
->
wre_»gi¡
)Ð
½
, 
SONIC_REG_CEP
, 0 );

1377 ià(((*
sc
->
»ad_»gi¡
)Ð
½
, 
SONIC_REG_CAP2
 ) !ð
cdp
->
ÿp2
)

1378 || ((*
sc
->
»ad_»gi¡
)Ð
½
, 
SONIC_REG_CAP1
 ) !ð
cdp
->
ÿp1
)

1379 || ((*
sc
->
»ad_»gi¡
)Ð
½
, 
SONIC_REG_CAP0
 ) !ð
cdp
->
ÿp0
)

1380 || ((*
sc
->
»ad_»gi¡
)Ð
½
, 
SONIC_REG_CE
 ) !ð
cdp
->
û
)) {

1381 
	`´tf
 ("Failedooad Ethernetddress into SONIC CAM.\n"

1384 
cdp
->
ÿp2
, cdp->
ÿp1
, cdp->
ÿp0
, cdp->
û
,

1385 (*
sc
->
»ad_»gi¡
)Ð
½
, 
SONIC_REG_CAP2
 ),

1386 (*
sc
->
»ad_»gi¡
)Ð
½
, 
SONIC_REG_CAP1
 ),

1387 (*
sc
->
»ad_»gi¡
)Ð
½
, 
SONIC_REG_CAP0
 ),

1388 (*
sc
->
»ad_»gi¡
)Ð
½
, 
SONIC_REG_CE
 ));

1389 
	`¹ems_·nic
 ("SONIC LCAM");

1393 (*
sc
->
wre_»gi¡
)(
½
, 
SONIC_REG_CR
, 
CR_RXEN
 | 
CR_STP
);

1403 (è
	`£t_veùÜ
(
sÚic_¼u±_hªdËr
, 
sc
->
veùÜ
, 1);

1409 
	}
}

1415 
SONIC_STATIC
 
	$sÚic_¡¬t
(
iâ
 *
iå
)

1417 
sÚic_soác
 *
sc
 = 
iå
->
if_soác
;

1419 
	`¹ems_bsdÃt_evt_£nd
(
sc
->
txD«mÚTid
, 
START_TRANSMIT_EVENT
);

1420 
iå
->
if_æags
 |ð
IFF_OACTIVE
;

1421 
	}
}

1427 
SONIC_STATIC
 
	$sÚic_
 (*
¬g
)

1429 
sÚic_soác
 *
sc
 = 
¬g
;

1430 
iâ
 *
iå
 = &
sc
->
¬pcom
.
ac_if
;

1431 *
½
 = 
sc
->
sÚic
;

1432 
rü
;

1434 ià(
sc
->
txD«mÚTid
 == 0) {

1439 
	`sÚic_lize_h¬dw¬e
 (
sc
);

1444 
sc
->
rxD«mÚTid
 = 
	`¹ems_bsdÃt_Ãw´oc
 ("SNrx", 4096, 
sÚic_rxD«mÚ
, sc);

1445 
sc
->
txD«mÚTid
 = 
	`¹ems_bsdÃt_Ãw´oc
 ("SNtx", 4096, 
sÚic_txD«mÚ
, sc);

1451 
rü
 = (*
sc
->
»ad_»gi¡
)Ð
½
, 
SONIC_REG_RCR
 );

1452 ià(
iå
->
if_æags
 & 
IFF_PROMISC
)

1453 
rü
 |ð
RCR_PRO
;

1455 
rü
 &ð~
RCR_PRO
;

1456 (*
sc
->
wre_»gi¡
)Ð
½
, 
SONIC_REG_RCR
, 
rü
);

1461 
iå
->
if_æags
 |ð
IFF_RUNNING
;

1466 
	`sÚic_abË_¼u±s
Ð
sc
, 
IMR_TXEREN
 | (
IMR_PRXEN
 | 
IMR_RBAEEN
) );

1467 
	`sÚic_commªd
Ð
sc
, 
CR_RXEN
 );

1468 
	}
}

1474 
	$sÚic_ioùl
 (
iâ
 *
iå
, 
ioùl_commªd_t
 
commªd
, 
ÿddr_t
 
d©a
)

1476 
sÚic_soác
 *
sc
 = 
iå
->
if_soác
;

1477 
rÜ
 = 0;

1479 
commªd
) {

1480 
SIOCGIFADDR
:

1481 
SIOCSIFADDR
:

1482 
	`h_ioùl
 (
iå
, 
commªd
, 
d©a
);

1485 
SIOCSIFFLAGS
:

1486 
iå
->
if_æags
 & (
IFF_UP
 | 
IFF_RUNNING
)) {

1487 
IFF_RUNNING
:

1488 
	`sÚic_¡Ý
 (
sc
);

1491 
IFF_UP
:

1492 
	`sÚic_
 (
sc
);

1495 
IFF_UP
 | 
IFF_RUNNING
:

1496 
	`sÚic_¡Ý
 (
sc
);

1497 
	`sÚic_
 (
sc
);

1505 
SIO_RTEMS_SHOW_STATS
:

1506 
	`sÚic_¡©s
 (
sc
);

1513 
rÜ
 = 
EINVAL
;

1516  
rÜ
;

1517 
	}
}

1525 
	$¹ems_sÚic_driv_©ch
 (

1526 
¹ems_bsdÃt_ifcÚfig
 *
cÚfig
,

1527 
sÚic_cÚfigu¿tiÚ_t
 *
ch


1530 
sÚic_soác
 *
sc
;

1531 
iâ
 *
iå
;

1532 
mtu
;

1533 
unNumb
;

1534 *
unName
;

1539 ià((
unNumb
 = 
	`¹ems_bsdÃt_·r£_driv_Çme
 (
cÚfig
, &
unName
)) < 0)

1545 ià((
unNumb
 <ð0è|| (unNumb > 
NSONIC
)) {

1546 
	`´tf
 ("Bad SONIC unitumber.\n");

1549 
sc
 = &
sÚic_soác
[
unNumb
 - 1];

1550 
iå
 = &
sc
->
¬pcom
.
ac_if
;

1551 ià(
iå
->
if_soác
 !ð
NULL
) {

1552 
	`´tf
 ("Driverlready in use.\n");

1560 
	`mem£t
Ð
sc
, 0, (*sc) );

1566 ià(
cÚfig
->
h¬dw¬e_add»ss
) {

1567 
	`memýy
 (
sc
->
¬pcom
.
ac_addr
, 
cÚfig
->
h¬dw¬e_add»ss
, 
ETHER_ADDR_LEN
);

1570 
	`mem£t
 (
sc
->
¬pcom
.
ac_addr
, 0x08, 
ETHER_ADDR_LEN
);

1572 ià(
cÚfig
->
mtu
)

1573 
mtu
 = 
cÚfig
->mtu;

1575 
mtu
 = 
ETHERMTU
;

1576 ià(
cÚfig
->
rbuf_couÁ
)

1577 
sc
->
rdaCouÁ
 = 
cÚfig
->
rbuf_couÁ
;

1579 
sc
->
rdaCouÁ
 = 
ch
->
rda_couÁ
;

1580 ià(
cÚfig
->
xbuf_couÁ
)

1581 
sc
->
tdaCouÁ
 = 
cÚfig
->
xbuf_couÁ
;

1583 
sc
->
tdaCouÁ
 = 
ch
->
tda_couÁ
;

1584 
sc
->
acû±Brßdÿ¡
 = !
cÚfig
->
ignÜe_brßdÿ¡
;

1586 
sc
->
sÚic
 = 
ch
->
ba£_add»ss
;

1587 
sc
->
veùÜ
 = 
ch
->vector;

1588 
sc
->
dü_v®ue
 = 
ch
->dcr_value;

1589 
sc
->
dc2_v®ue
 = 
ch
->dc2_value;

1590 
sc
->
wre_»gi¡
 = 
ch
->write_register;

1591 
sc
->
»ad_»gi¡
 = 
ch
->read_register;

1596 
iå
->
if_soác
 = 
sc
;

1597 
iå
->
if_un
 = 
unNumb
;

1598 
iå
->
if_Çme
 = 
unName
;

1599 
iå
->
if_mtu
 = 
mtu
;

1600 
iå
->
if_
 = 
sÚic_
;

1601 
iå
->
if_ioùl
 = 
sÚic_ioùl
;

1602 
iå
->
if_¡¬t
 = 
sÚic_¡¬t
;

1603 
iå
->
if_ouut
 = 
h_ouut
;

1604 
iå
->
if_æags
 = 
IFF_BROADCAST
 | 
IFF_SIMPLEX
;

1605 ià(
iå
->
if_¢d
.
ifq_maxËn
 == 0)

1606 
iå
->
if_¢d
.
ifq_maxËn
 = 
ifqmaxËn
;

1611 
	`if_©ch
 (
iå
);

1612 
	`h_içach
 (
iå
);

1614 
	}
}

1616 #ià(
SONIC_DEBUG
 & 
SONIC_DEBUG_PRINT_REGISTERS
)

1617 
	~<¡dio.h
>

1619 
	gSONIC_Reg_Çme
[64][6]= {

	@src/libchip/network/sonic.h

25 #iâdeà
_SONIC_DP83932_


26 
	#_SONIC_DP83932_


	)

34 
	#SONIC_DEBUG_NONE
 0x0000

	)

35 
	#SONIC_DEBUG_ALL
 0xFFFF

	)

36 
	#SONIC_DEBUG_PRINT_REGISTERS
 0x0001

	)

37 
	#SONIC_DEBUG_MEMORY
 0x0002

	)

38 
	#SONIC_DEBUG_MEMORY_ALLOCATE
 0x0004

	)

39 
	#SONIC_DEBUG_MEMORY_DESCRIPTORS
 0x0008

	)

40 
	#SONIC_DEBUG_FRAGMENTS
 0x0008

	)

41 
	#SONIC_DEBUG_CAM
 0x0010

	)

42 
	#SONIC_DEBUG_DESCRIPTORS
 0x0020

	)

43 
	#SONIC_DEBUG_ERRORS
 0x0040

	)

44 
	#SONIC_DEBUG_DUMP_TX_MBUFS
 0x0080

	)

45 
	#SONIC_DEBUG_DUMP_RX_MBUFS
 0x0100

	)

47 
	#SONIC_DEBUG_DUMP_MBUFS
 \

48 (
SONIC_DEBUG_DUMP_TX_MBUFS
|
SONIC_DEBUG_DUMP_RX_MBUFS
)

	)

50 
	#SONIC_DEBUG
 (
SONIC_DEBUG_NONE
)

	)

61 #ià(
SONIC_DEBUG
 & 
SONIC_DEBUG_PRINT_REGISTERS
)

62 
SONIC_Reg_Çme
[64][6];

70 (*
	tsÚic_wre_»gi¡_t
)(

71 *
	tba£
,

72 
	tut32_t
 
	t»gno
,

73 
	tut32_t
 
	tv®ue


76 
	$ut32_t
 (*
	tsÚic_»ad_»gi¡_t
)(

77 *
	tba£
,

78 
	tut32_t
 
	t»gno


82 *
ba£_add»ss
;

83 
ut32_t
 
veùÜ
;

84 
ut32_t
 
dü_v®ue
;

85 
ut32_t
 
dc2_v®ue
;

86 
ut32_t
 
tda_couÁ
;

87 
ut32_t
 
rda_couÁ
;

88 
sÚic_wre_»gi¡_t
 
wre_»gi¡
;

89 
sÚic_»ad_»gi¡_t
 
»ad_»gi¡
;

90 } 
	tsÚic_cÚfigu¿tiÚ_t
;

99 
	#SONIC_REG_CR
 0x00

	)

100 
	#SONIC_REG_DCR
 0x01

	)

101 
	#SONIC_REG_RCR
 0x02

	)

102 
	#SONIC_REG_TCR
 0x03

	)

103 
	#SONIC_REG_IMR
 0x04

	)

104 
	#SONIC_REG_ISR
 0x05

	)

105 
	#SONIC_REG_UTDA
 0x06

	)

106 
	#SONIC_REG_CTDA
 0x07

	)

107 
	#SONIC_REG_URDA
 0x0D

	)

108 
	#SONIC_REG_CRDA
 0x0E

	)

109 
	#SONIC_REG_EOBC
 0x13

	)

110 
	#SONIC_REG_URRA
 0x14

	)

111 
	#SONIC_REG_RSA
 0x15

	)

112 
	#SONIC_REG_REA
 0x16

	)

113 
	#SONIC_REG_RRP
 0x17

	)

114 
	#SONIC_REG_RWP
 0x18

	)

115 
	#SONIC_REG_CEP
 0x21

	)

116 
	#SONIC_REG_CAP2
 0x22

	)

117 
	#SONIC_REG_CAP1
 0x23

	)

118 
	#SONIC_REG_CAP0
 0x24

	)

119 
	#SONIC_REG_CE
 0x25

	)

120 
	#SONIC_REG_CDP
 0x26

	)

121 
	#SONIC_REG_CDC
 0x27

	)

122 
	#SONIC_REG_SR
 0x28

	)

123 
	#SONIC_REG_WT0
 0x29

	)

124 
	#SONIC_REG_WT1
 0x2A

	)

125 
	#SONIC_REG_RSC
 0x2B

	)

126 
	#SONIC_REG_CRCT
 0x2C

	)

127 
	#SONIC_REG_FAET
 0x2D

	)

128 
	#SONIC_REG_MPT
 0x2E

	)

129 
	#SONIC_REG_MDT
 0x2F

	)

130 
	#SONIC_REG_DCR2
 0x3F

	)

135 
	#CR_LCAM
 0x0200

	)

136 
	#CR_RRRA
 0x0100

	)

137 
	#CR_RST
 0x0080

	)

138 
	#CR_ST
 0x0020

	)

139 
	#CR_STP
 0x0010

	)

140 
	#CR_RXEN
 0x0008

	)

141 
	#CR_RXDIS
 0x0004

	)

142 
	#CR_TXP
 0x0002

	)

143 
	#CR_HTX
 0x0001

	)

148 
	#DCR_EXBUS
 0x8000

	)

149 
	#DCR_LBR
 0x2000

	)

150 
	#DCR_PO1
 0x1000

	)

151 
	#DCR_PO0
 0x0800

	)

152 
	#DCR_SBUS
 0x0400

	)

153 
	#DCR_USR1
 0x0200

	)

154 
	#DCR_USR0
 0x0100

	)

155 
	#DCR_WC1
 0x0080

	)

156 
	#DCR_WC0
 0x0040

	)

157 
	#DCR_DW
 0x0020

	)

158 
	#DCR_BMS
 0x0010

	)

159 
	#DCR_RFT1
 0x0008

	)

160 
	#DCR_RFT0
 0x0004

	)

161 
	#DCR_TFT1
 0x0002

	)

162 
	#DCR_TFT0
 0x0001

	)

165 
	#DCR_SYNC
 
DCR_SBUS


	)

166 
	#DCR_ASYNC
 0

	)

168 
	#DCR_WAIT0
 0

	)

169 
	#DCR_WAIT1
 
DCR_WC0


	)

170 
	#DCR_WAIT2
 
DCR_WC1


	)

171 
	#DCR_WAIT3
 (
DCR_WC1
|
DCR_WC0
è

	)

173 
	#DCR_DW16
 0

	)

174 
	#DCR_DW32
 
DCR_DW


	)

176 
	#DCR_DMAEF
 0

	)

177 
	#DCR_DMABLOCK
 
DCR_BMS


	)

179 
	#DCR_RFT4
 0

	)

180 
	#DCR_RFT8
 
DCR_RFT0


	)

181 
	#DCR_RFT16
 
DCR_RFT1


	)

182 
	#DCR_RFT24
 (
DCR_RFT1
|
DCR_RFT0
è

	)

184 
	#DCR_TFT8
 0

	)

185 
	#DCR_TFT16
 
DCR_TFT0


	)

186 
	#DCR_TFT24
 
DCR_TFT1


	)

187 
	#DCR_TFT28
 (
DCR_TFT1
|
DCR_TFT0
è

	)

192 
	#RCR_ERR
 0x8000

	)

193 
	#RCR_RNT
 0x4000

	)

194 
	#RCR_BRD
 0x2000

	)

195 
	#RCR_PRO
 0x1000

	)

196 
	#RCR_AMC
 0x0800

	)

197 
	#RCR_LB1
 0x0400

	)

198 
	#RCR_LB0
 0x0200

	)

199 
	#RCR_MC
 0x0100

	)

200 
	#RCR_BC
 0x0080

	)

201 
	#RCR_LPKT
 0x0040

	)

202 
	#RCR_CRS
 0x0020

	)

203 
	#RCR_COL
 0x0010

	)

204 
	#RCR_CRCR
 0x0008

	)

205 
	#RCR_FAER
 0x0004

	)

206 
	#RCR_LBK
 0x0002

	)

207 
	#RCR_PRX
 0x0001

	)

212 
	#TCR_PINT
 0x8000

	)

213 
	#TCR_POWC
 0x4000

	)

214 
	#TCR_CRCI
 0x2000

	)

215 
	#TCR_EXDIS
 0x1000

	)

216 
	#TCR_EXD
 0x0400

	)

217 
	#TCR_DEF
 0x0200

	)

218 
	#TCR_NCRS
 0x0100

	)

219 
	#TCR_CRSL
 0x0080

	)

220 
	#TCR_EXC
 0x0040

	)

221 
	#TCR_OWC
 0x0020

	)

222 
	#TCR_PMB
 0x0008

	)

223 
	#TCR_FU
 0x0004

	)

224 
	#TCR_BCM
 0x0002

	)

225 
	#TCR_PTX
 0x0001

	)

230 
	#IMR_BREN
 0x4000

	)

231 
	#IMR_HBLEN
 0x2000

	)

232 
	#IMR_LCDEN
 0x1000

	)

233 
	#IMR_PINTEN
 0x0800

	)

234 
	#IMR_PRXEN
 0x0400

	)

235 
	#IMR_PTXEN
 0x0200

	)

236 
	#IMR_TXEREN
 0x0100

	)

237 
	#IMR_TCEN
 0x0080

	)

238 
	#IMR_RDEEN
 0x0040

	)

239 
	#IMR_RBEEN
 0x0020

	)

240 
	#IMR_RBAEEN
 0x0010

	)

241 
	#IMR_CRCEN
 0x0008

	)

242 
	#IMR_FAEEN
 0x0004

	)

243 
	#IMR_MPEN
 0x0002

	)

244 
	#IMR_RFOEN
 0x0001

	)

249 
	#ISR_BR
 0x4000

	)

250 
	#ISR_HBL
 0x2000

	)

251 
	#ISR_LCD
 0x1000

	)

252 
	#ISR_PINT
 0x0800

	)

253 
	#ISR_PKTRX
 0x0400

	)

254 
	#ISR_TXDN
 0x0200

	)

255 
	#ISR_TXER
 0x0100

	)

256 
	#ISR_TC
 0x0080

	)

257 
	#ISR_RDE
 0x0040

	)

258 
	#ISR_RBE
 0x0020

	)

259 
	#ISR_RBAE
 0x0010

	)

260 
	#ISR_CRC
 0x0008

	)

261 
	#ISR_FAE
 0x0004

	)

262 
	#ISR_MP
 0x0002

	)

263 
	#ISR_RFO
 0x0001

	)

268 
	#DCR2_EXPO3
 0x8000

	)

269 
	#DCR2_EXPO2
 0x4000

	)

270 
	#DCR2_EXPO1
 0x2000

	)

271 
	#DCR2_EXPO0
 0x1000

	)

272 
	#DCR2_HBDIS
 0x0800

	)

273 
	#DCR2_PH
 0x0010

	)

274 
	#DCR2_PCM
 0x0004

	)

275 
	#DCR2_PCNM
 0x0002

	)

276 
	#DCR2_RJCM
 0x0001

	)

283 
	#SONIC_REVISION_B
 4

	)

284 
	#SONIC_REVISION_DP83934
 5

	)

285 
	#SONIC_REVISION_C
 6

	)

301 
	#MAXIMUM_FRAGS_PER_DESCRIPTOR
 6

	)

302 
	sT¿nsmDesütÜ
 {

303 
ut32_t
 
¡©us
;

304 
ut32_t
 
pkt_cÚfig
;

305 
ut32_t
 
pkt_size
;

306 
ut32_t
 
äag_couÁ
;

311 
	sT¿nsmDesütÜF¿gLk
 {

312 
ut32_t
 
äag_lsw
;

313 
	#äag_lk
 
äag_lsw


	)

314 
ut32_t
 
äag_msw
;

315 
ut32_t
 
äag_size
;

316 } 
äag
[
MAXIMUM_FRAGS_PER_DESCRIPTOR
];

321 
ut32_t
 
lk_·d
;

326 
T¿nsmDesütÜ
 *
Ãxt
;

327 
mbuf
 *
mbuå
;

328 vÞ©
ut32_t
 *
lkp
;

330 
T¿nsmDesütÜ
 
	tT¿nsmDesütÜ_t
;

331 vÞ©
	tT¿nsmDesütÜ_t
 *
	tT¿nsmDesütÜPor_t
;

338 
	#TDA_CONFIG_PINT
 0x8000

	)

339 
	#TDA_CONFIG_POWC
 0x4000

	)

340 
	#TDA_CONFIG_CRCI
 0x2000

	)

341 
	#TDA_CONFIG_EXDIS
 0x1000

	)

346 
	#TDA_STATUS_COLLISION_MASK
 0xF800

	)

347 
	#TDA_STATUS_COLLISION_SHIFT
 11

	)

348 
	#TDA_STATUS_EXD
 0x0400

	)

349 
	#TDA_STATUS_DEF
 0x0200

	)

350 
	#TDA_STATUS_NCRS
 0x0100

	)

351 
	#TDA_STATUS_CRSL
 0x0080

	)

352 
	#TDA_STATUS_EXC
 0x0040

	)

353 
	#TDA_STATUS_OWC
 0x0020

	)

354 
	#TDA_STATUS_PMB
 0x0008

	)

355 
	#TDA_STATUS_FU
 0x0004

	)

356 
	#TDA_STATUS_BCM
 0x0002

	)

357 
	#TDA_STATUS_PTX
 0x0001

	)

359 
	#TDA_LINK_EOL
 0x0001

	)

360 
	#TDA_LINK_EOL_MASK
 0xFFFE

	)

378 
	sReûiveResourû
 {

379 
ut32_t
 
buff_±r_lsw
;

380 
ut32_t
 
buff_±r_msw
;

381 
ut32_t
 
buff_wc_lsw
;

382 
ut32_t
 
buff_wc_msw
;

384 
ReûiveResourû
 
	tReûiveResourû_t
;

385 vÞ©
	tReûiveResourû_t
 *
	tReûiveResourûPor_t
;

391 
	sReûiveDesütÜ
 {

392 
ut32_t
 
¡©us
;

393 
ut32_t
 
by_couÁ
;

394 
ut32_t
 
pkt_lsw
;

395 
ut32_t
 
pkt_msw
;

396 
ut32_t
 
£q_no
;

397 
ut32_t
 
lk
;

398 
ut32_t
 
_u£
;

403 vÞ©
ReûiveDesütÜ
 *
Ãxt
;

404 
mbuf
 *
mbuå
;

406 
ReûiveDesütÜ
 
	tReûiveDesütÜ_t
;

407 vÞ©
	tReûiveDesütÜ_t
 *
	tReûiveDesütÜPor_t
;

410 
ut32_t
 
ûp
;

411 
ut32_t
 
ÿp0
;

412 
ut32_t
 
ÿp1
;

413 
ut32_t
 
ÿp2
;

414 
ut32_t
 
û
;

415 } 
	tCamDesütÜ_t
;

417 vÞ©
	tCamDesütÜ_t
 *
	tCamDesütÜPor_t
;

422 
	#RDA_STATUS_ERR
 0x8800

	)

423 
	#RDA_STATUS_RNT
 0x4000

	)

424 
	#RDA_STATUS_BRD
 0x2000

	)

425 
	#RDA_STATUS_PRO
 0x1000

	)

426 
	#RDA_STATUS_AMC
 0x0800

	)

427 
	#RDA_STATUS_LB1
 0x0400

	)

428 
	#RDA_STATUS_LB0
 0x0200

	)

429 
	#RDA_STATUS_MC
 0x0100

	)

430 
	#RDA_STATUS_BC
 0x0080

	)

431 
	#RDA_STATUS_LPKT
 0x0040

	)

432 
	#RDA_STATUS_CRS
 0x0020

	)

433 
	#RDA_STATUS_COL
 0x0010

	)

434 
	#RDA_STATUS_CRCR
 0x0008

	)

435 
	#RDA_STATUS_FAER
 0x0004

	)

436 
	#RDA_STATUS_LBK
 0x0002

	)

437 
	#RDA_STATUS_PRX
 0x0001

	)

439 
	#RDA_LINK_EOL
 0x0001

	)

440 
	#RDA_LINK_EOL_MASK
 0xFFFE

	)

441 
	#RDA_IN_USE
 0x0000

	)

443 
	#RDA_FREE
 0xFFFF

	)

449 
	`¹ems_sÚic_driv_©ch
 (

450 
¹ems_bsdÃt_ifcÚfig
 *
cÚfig
,

451 
sÚic_cÚfigu¿tiÚ_t
 *
ch


454 #ifdeà
CPU_U32_FIX


455 
	`®ign
(
mbuf
 *
m
);

	@src/libchip/rtc/ds1375-rtc.h

1 #iâdeà
DS1375_I2C_RTC_H


2 
	#DS1375_I2C_RTC_H


	)

52 
	~<¹ems.h
>

53 
	~<libch/¹c.h
>

54 
	~<¡dt.h
>

56 #ifdeà
__ýlu¥lus


60 
¹c_âs
 
¹c_ds1375_âs
;

62 
boÞ


63 
¹c_ds1375_deviû_´obe
Ð
mÜ
 );

65 
ut32_t


66 
¹c_ds1375_g_»gi¡
Ð
u_t
 
pÜt
, 
ut8_t
 
»g
 );

69 
¹c_ds1375_£t_»gi¡
Ð
u_t
 
pÜt
, 
ut8_t
 
»g
, 
ut32_t
 
v®ue
 );

83 
	#DS1375_RTC_TBL_ENTRY
(
i2úame
) \

85 
sDeviûName
: "/dev/rtc", \

86 
deviûTy³
: 
RTC_CUSTOM
, \

87 
pDeviûFns
: &
¹c_ds1375_âs
, \

88 
deviûProbe
: 
¹c_ds1375_deviû_´obe
, \

89 
ulClPÜt1
: (
u_t
)(
i2úame
), \

90 
ulD©aPÜt
: 0, \

91 
gRegi¡
: 
¹c_ds1375_g_»gi¡
, \

92 
£tRegi¡
: 
¹c_ds1375_£t_»gi¡
, \

93 }

	)

95 #ifdeà
__ýlu¥lus


	@src/libchip/rtc/ds1375.c

51 
	~<uni¡d.h
>

53 
	~<¹ems.h
>

54 
	~<¹ems/¹c.h
>

55 
	~<¹ems/scÜe/sys¡©e.h
>

56 
	~<libch/¹c.h
>

57 
	~<libch/ds1375-¹c.h
>

59 
	~<sys/fú.h
>

60 
	~<ºo.h
>

61 
	~<¡dio.h
>

62 
	~<¡rg.h
>

63 
	~<y³s.h
>

66 
	#STATIC
 

	)

67 #undeà
DEBUG


75 
	#STDIOSAFE
(
fmt
,
¬gs
...) \

77 iàÐ
	`_Sy¡em_¡©e_Is_up
Ð
	`_Sy¡em_¡©e_G
() ) ) { \

78 
	`årtf
(
¡dr
,
fmt
,
¬gs
); \

80 
	`´tk
(
fmt
,
¬gs
); \

82 } 0)

	)

85 
STATIC
 
ut8_t
 
	$ds1375_bcd2b
(
ut8_t
 
x
)

87 
ut8_t
 
h
 = 
x
 & 0xf0;

90  ( 
h
 >> 1 ) + ( h >> 3 ) + ( 
x
 & 0xf );

91 
	}
}

93 
STATIC
 
ut8_t
 
	$ds1375_b2bcd
(
ut8_t
 
x
)

95 
ut8_t
 
h
 = 
x
/10;

97  ( 
h
 << 4 ) + ( 
x
 - ( ( h << 3 ) + ( h << 1 ) ) );

98 
	}
}

108 
	#DS1375_SEC_REG
 0x0

	)

109 
	#DS1375_SEC_OFF
 (
DS1375_SEC_REG
-DS1375_SEC_REG)

	)

111 
	#DS1375_SEC
(
x
è
	`ds1375_bcd2b
Ð((x)[
DS1375_SEC_OFF
]è& 0x7à)

	)

113 
	#DS1375_MIN_REG
 0x1

	)

114 
	#DS1375_MIN_OFF
 (
DS1375_MIN_REG
-
DS1375_SEC_REG
)

	)

116 
	#DS1375_MIN
(
x
è
	`ds1375_bcd2b
Ð((x)[
DS1375_MIN_OFF
]è& 0x7à)

	)

118 
	#DS1375_HR_REG
 0x2

	)

119 
	#DS1375_HR_OFF
 (
DS1375_HR_REG
-
DS1375_SEC_REG
)

	)

120 
	#DS1375_HR_1224
 (1<<6)

	)

121 
	#DS1375_HR_AMPM
 (1<<5)

	)

123 
	#DS1375_IS_AMPM
(
x
è(
DS1375_HR_1224
 & ((x)[
DS1375_HR_OFF
]))

	)

125 
	#DS1375_IS_PM
(
x
è(
DS1375_HR_AMPM
 & ((x)[
DS1375_HR_OFF
]))

	)

127 
	#DS1375_HR_12
(
x
è
	`ds1375_bcd2b
Ð((x)[
DS1375_HR_OFF
]è& 0x1à)

	)

129 
	#DS1375_HR_24
(
x
è
	`ds1375_bcd2b
Ð((x)[
DS1375_HR_OFF
]è& 0x3à)

	)

131 
	#DS1375_DAY_REG
 0x3

	)

132 
	#DS1375_DAY_OFF
 (
DS1375_DAY_REG
-
DS1375_SEC_REG
)

	)

133 
	#DS1375_DAT_REG
 0x4

	)

134 
	#DS1375_DAT_OFF
 (
DS1375_DAT_REG
-
DS1375_SEC_REG
)

	)

136 
	#DS1375_DAT
(
x
è
	`ds1375_bcd2b
Ð((x)[
DS1375_DAT_OFF
]è& 0x3à)

	)

137 
	#DS1375_MON_REG
 0x5

	)

138 
	#DS1375_MON_OFF
 (
DS1375_MON_REG
-
DS1375_SEC_REG
)

	)

139 
	#DS1375_MON_CTRY
 (1<<7)

	)

141 
	#DS1375_IS_CTRY
(
x
è(((x)[
DS1375_MON_OFF
]è& 
DS1375_MON_CTRY
)

	)

143 
	#DS1375_MON
(
x
è
	`ds1375_bcd2b
Ð((x)[
DS1375_MON_OFF
]è& 0x1à)

	)

145 
	#DS1375_YR_REG
 0x6

	)

146 
	#DS1375_YR_OFF
 (
DS1375_YR_REG
-
DS1375_SEC_REG
)

	)

148 
	#DS1375_YR
(
x
è
	`ds1375_bcd2b
Ð((x)[
DS1375_YR_OFF
]è& 0xfà)

	)

151 
	#DS1375_CR_REG
 0xe

	)

152 
	#DS1375_CR_ECLK
 (1<<7)

	)

153 
	#DS1375_CR_CLKSEL1
 (1<<6)

	)

154 
	#DS1375_CR_CLKSEL0
 (1<<5)

	)

155 
	#DS1375_CR_RS2
 (1<<4)

	)

156 
	#DS1375_CR_RS1
 (1<<3)

	)

157 
	#DS1375_CR_INTCN
 (1<<2)

	)

158 
	#DS1375_CR_A2IE
 (1<<1)

	)

159 
	#DS1375_CR_A1IE
 (1<<0)

	)

161 
	#DS1375_CSR_REG
 0xf

	)

164 
	#DS1375_RAM
 0x10

	)

168 
STATIC
 
	$rd_bys
(

169 
fd
,

170 
ut32_t
 
off
,

171 
ut8_t
 *
buf
,

172 
Ën


175 
ut8_t
 
±r
 = 
off
;

177  1 =ð
	`wre
Ð
fd
, &
±r
, 1 ) && 
Ën
 =ð
	`»ad
Ðfd, 
buf
,en ) ? 0 : -1;

178 
	}
}

180 
STATIC
 
	$wr_bys
(

181 
fd
,

182 
ut32_t
 
off
,

183 
ut8_t
 *
buf
,

184 
Ën


187 
ut8_t
 
d
[ 
Ën
 + 1 ];

196 
d
[0] = 
off
;

197 
	`memýy
Ð
d
 + 1, 
buf
, 
Ën
 );

199  
Ën
 + 1 =ð
	`wre
Ð
fd
, 
d
,en + 1 ) ? 0 : -1;

200 
	}
}

204 
	$gfd
(

205 
mÜ


208  
	`Ý
Ð(cÚ¡ *)
RTC_TabË
[
mÜ
].
ulClPÜt1
, 
O_RDWR
 );

209 
	}
}

213 
STATIC
 
	$ds1375_lize
(

214 
mÜ


217 
fd
;

218 
ut8_t
 
ü
;

220 iàÐÐ
fd
 = 
	`gfd
Ð
mÜ
 ) ) >= 0 ) {

221 iàÐ0 =ð
	`rd_bys
Ð
fd
, 
DS1375_CR_REG
, &
ü
, 1 ) ) {

223 iàÐ! ( 
DS1375_CR_ECLK
 & 
ü
 ) ) {

224 
ü
 |ð
DS1375_CR_ECLK
;

225 
	`wr_bys
Ð
fd
, 
DS1375_CR_REG
, &
ü
, 1 );

228 
	`þo£
Ð
fd
 );

231 
	}
}

233 
STATIC
 
	$ds1375_g_time
(

234 
mÜ
,

235 
¹ems_time_of_day
 *
time


238 
rv®
 = -1;

239 
fd
;

240 
ut8_t
 
buf
[
DS1375_YR_REG
 + 1 - 
DS1375_SEC_REG
];

242 iàÐ
time
 && ( ( 
fd
 = 
	`gfd
Ð
mÜ
 ) ) >= 0 ) ) {

243 iàÐ0 =ð
	`rd_bys
Ð
fd
, 
DS1375_SEC_REG
, 
buf
, (buf) ) ) {

244 
time
->
yr
 = 
	`DS1375_IS_CTRY
Ð
buf
 ) ? 2000 : 1900;

245 
time
->
yr
 +ð
	`DS1375_YR
 ( 
buf
 );

246 
time
->
mÚth
 = 
	`DS1375_MON
Ð
buf
 );

247 
time
->
day
 = 
	`DS1375_DAT
Ð
buf
 );

249 iàÐ
	`DS1375_IS_AMPM
Ð
buf
 ) ) {

250 
time
->
hour
 = 
	`DS1375_HR_12
 ( 
buf
 );

251 iàÐ
	`DS1375_IS_PM
Ð
buf
 ) )

252 
time
->
hour
 += 12;

254 
time
->
hour
 = 
	`DS1375_HR_24
 ( 
buf
 );

257 
time
->
mu
 = 
	`DS1375_MIN
Ð
buf
 );

258 
time
->
£cÚd
 = 
	`DS1375_SEC
Ð
buf
 );

259 
time
->
ticks
 = 0;

260 
rv®
 = 0;

262 
	`þo£
Ð
fd
 );

264  
rv®
;

265 
	}
}

267 
STATIC
 
	$ds1375_£t_time
(

268 
mÜ
,

269 cÚ¡ 
¹ems_time_of_day
 *
time


272 
rv®
 = -1;

273 
fd
 = -1;

274 
time_t
 
£cs
;

275 
tm
m;

276 
ut8_t
 
buf
[
DS1375_YR_REG
 + 1 - 
DS1375_SEC_REG
];

277 
ut8_t
 
ü
 = 0xff;

284 
£cs
 = 
	`_TOD_To_£cÚds
Ð
time
 );

286 
	`gmtime_r
Ð&
£cs
, &
tm
 );

288 
buf
[
DS1375_SEC_OFF
] = 
	`ds1375_b2bcd
Ð
time
->
£cÚd
 );

289 
buf
[
DS1375_MIN_OFF
] = 
	`ds1375_b2bcd
Ð
time
->
mu
 );

291 
buf
[
DS1375_HR_OFF
] = 
	`ds1375_b2bcd
Ð
time
->
hour
 );

292 
buf
[
DS1375_DAY_OFF
] = 
tm
.
tm_wday
 + 1;

293 
buf
[
DS1375_DAT_OFF
] = 
	`ds1375_b2bcd
Ð
time
->
day
 );

294 
buf
[
DS1375_MON_OFF
] = 
	`ds1375_b2bcd
Ð
time
->
mÚth
 );

296 iàÐ
time
->
yr
 >= 2000 ) {

297 
buf
[
DS1375_YR_OFF
] = 
	`ds1375_b2bcd
Ð
time
->
yr
 - 2000 );

298 
buf
[
DS1375_MON_OFF
] |ð
DS1375_MON_CTRY
;

300 
buf
[
DS1375_YR_OFF
] = 
	`ds1375_b2bcd
Ð
time
->
yr
 - 1900 );

310 iàÐÐ
fd
 = 
	`gfd
Ð
mÜ
 ) ) < 0 ) {

311 
þnup
;

314 iàÐ
	`rd_bys
Ð
fd
, 
DS1375_CR_REG
, &
ü
, 1 ) )

315 
þnup
;

317 
ü
 &ð~
DS1375_CR_ECLK
;

320 iàÐ
	`wr_bys
Ð
fd
, 
DS1375_CR_REG
, &
ü
, 1 ) )

321 
þnup
;

324 iàÐ
	`wr_bys
Ð
fd
, 
DS1375_SEC_REG
, 
buf
, (buf) ) )

325 
þnup
;

327 
rv®
 = 0;

329 
þnup
:

330 iàÐ
fd
 >= 0 ) {

331 iàÐ! ( 
DS1375_CR_ECLK
 & 
ü
 ) ) {

335 
ü
 |ð
DS1375_CR_ECLK
;

336 iàÐ
	`wr_bys
Ð
fd
, 
DS1375_CR_REG
, &
ü
, 1 ) )

337 
rv®
 = -1;

339 
	`þo£
Ð
fd
 );

341  
rv®
;

342 
	}
}

346 #ifdeà
DEBUG


352 
ut32_t


353 
	$ds1375_g_time_t¡
()

355 
¹ems_time_of_day
 
¹od
;

356 
time_t
 
£cs
;

358 
	`ds1375_g_time
Ð0, &
¹od
 );

359 
£cs
 = 
	`_TOD_To_£cÚds
Ð&
¹od
 );

360 
	`´tf
Ð"%s\n", 
	`ùime
Ð&
£cs
 ) );

361  
£cs
;

362 
	}
}

365 
	$ds1375_£t_time_t¡
ÐcÚ¡ *
d©¡r
, 
¹ems_time_of_day
 *
´t
 )

367 
tm
m;

368 
time_t
 
£cs
;

369 
¹ems_time_of_day
 
¹
;

371 iàÐ!
d©¡r
 )

374 iàÐ! 
	`¡½time
Ð
d©¡r
, "%Y-%m-%d/%T", &
tm
 ) )

377 iàÐ! 
´t
 )

378 
´t
 = &
¹
;

380 
£cs
 = 
	`mktime
Ð&
tm
 );

383 
	`gmtime_r
Ð&
£cs
, &
tm
 );

385 
	`´tf
("Y: %"
PRIu32
" ", (
´t
->
yr
 = 
tm
.
tm_yr
 + 1900) );

386 
	`´tf
("M: %"
PRIu32
" ", (
´t
->
mÚth
 = 
tm
.
tm_mÚ
 + 1) );

387 
	`´tf
("D: %"
PRIu32
" ", (
´t
->
day
 = 
tm
.
tm_mday
 ) );

388 
	`´tf
("h: %"
PRIu32
" ", (
´t
->
hour
 = 
tm
.
tm_hour
 ) );

389 
	`´tf
("m: %"
PRIu32
" ", (
´t
->
mu
 = 
tm
.
tm_m
 ) );

390 
	`´tf
("s: %"
PRIu32
"\n", (
´t
->
£cÚd
 = 
tm
.
tm_£c
 ) );

391 
´t
->
ticks
 = 0;

393  ( 
´t
 =ð&
¹
 ) ? 
	`ds1375_£t_time
( 0, &rt ) : 0;

394 
	}
}

399 
ut32_t


400 
	$¹c_ds1375_g_»gi¡
Ð
u_t
 
pÜt
, 
ut8_t
 
»g
 )

402 
fd
;

403 
ut8_t
 
v
;

404 
ut32_t
 
rv®
 = -1;

406 iàÐÐ
fd
 = 
	`Ý
Ð(cÚ¡ *)
pÜt
, 
O_RDWR
 ) ) >= 0 ) {

408 iàÐ0 =ð
	`rd_bys
Ð
fd
, 
»g
, &
v
, 1 ) ) {

409 
rv®
 = 
v
;

411 
	`þo£
Ð
fd
 );

414  
rv®
;

415 
	}
}

418 
	$¹c_ds1375_£t_»gi¡
Ð
u_t
 
pÜt
, 
ut8_t
 
»g
, 
ut32_t
 
v®ue
 )

420 
fd
;

421 
ut8_t
 
v
 = 
v®ue
;

423 iàÐÐ
fd
 = 
	`Ý
Ð(cÚ¡ *)
pÜt
, 
O_RDWR
 ) ) >= 0 ) {

424 
	`wr_bys
Ð
fd
, 
»g
, &
v
, 1 );

425 
	`þo£
Ð
fd
 );

428 
	}
}

430 
boÞ
 
	$¹c_ds1375_deviû_´obe
(

431 
mÜ


434 
fd
;

436 iàÐÐ
fd
 = 
	`gfd
Ð
mÜ
 ) ) < 0 ) {

437 
	`STDIOSAFE
Ð"ds1375_´ob(Ý): %s\n", 
	`¡»¼Ü
Ð
ºo
 ) );

438  
çl£
;

442 iàÐ0 !ð
	`wr_bys
Ð
fd
, 
DS1375_SEC_REG
, 0, 0 ) ) {

443 
	`STDIOSAFE
Ð"ds1375_´ob(wr_bys): %s\n", 
	`¡»¼Ü
Ð
ºo
 ) );

444 
	`þo£
Ð
fd
 );

445  
çl£
;

448 iàÐ
	`þo£
Ð
fd
 ) ) {

449 
	`STDIOSAFE
Ð"ds1375_´ob(þo£): %s\n", 
	`¡»¼Ü
Ð
ºo
 ) );

450  
çl£
;

453  
ue
;

454 
	}
}

456 
¹c_âs
 
	g¹c_ds1375_âs
 = {

457 .
deviûInlize
 = 
ds1375_lize
,

458 .
	gdeviûGTime
 = 
ds1375_g_time
,

459 .
	gdeviûSTime
 = 
ds1375_£t_time
,

	@src/libchip/rtc/icm7170.c

24 
	~<¹ems.h
>

25 
	~<libch/¹c.h
>

26 
	~<libch/icm7170.h
>

38 
	$icm7170_lize
(

39 
mÜ


42 
u_t
 
icm7170
;

43 
£tRegi¡_f
 
£tReg
;

44 
u_t
 
þock
;

46 
icm7170
 = 
RTC_TabË
[ 
mÜ
 ].
ulClPÜt1
;

47 
£tReg
 = 
RTC_TabË
[ 
mÜ
 ].
£tRegi¡
;

53 
þock
 = (
u_t
è
RTC_TabË
[ 
mÜ
 ].
pDeviûP¬ams
;

54 (*
£tReg
)Ð
icm7170
, 
ICM7170_CONTROL
, 0x0ø| 
þock
 );

55 
	}
}

61 
	$icm7170_g_time
(

62 
mÜ
,

63 
¹ems_time_of_day
 *
time


66 
ut32_t
 
icm7170
;

67 
gRegi¡_f
 
gReg
;

68 
ut32_t
 
yr
;

70 
icm7170
 = 
RTC_TabË
[ 
mÜ
 ].
ulClPÜt1
;

71 
gReg
 = 
RTC_TabË
[ 
mÜ
 ].
gRegi¡
;

77 (è(*
gReg
)Ð
icm7170
, 
ICM7170_COUNTER_HUNDREDTHS
 );

84 
yr
 = (*
gReg
)Ð
icm7170
, 
ICM7170_YEAR
 );

85 iàÐ
yr
 < 88 )

86 
yr
 += 2000;

88 
yr
 += 1900;

90 
time
->
yr
 = year;

91 
time
->
mÚth
 = (*
gReg
)Ð
icm7170
, 
ICM7170_MONTH
 );

92 
time
->
day
 = (*
gReg
)Ð
icm7170
, 
ICM7170_DATE
 );

93 
time
->
hour
 = (*
gReg
)Ð
icm7170
, 
ICM7170_HOUR
 );

94 
time
->
mu
 = (*
gReg
)Ð
icm7170
, 
ICM7170_MINUTE
 );

95 
time
->
£cÚd
 = (*
gReg
)Ð
icm7170
, 
ICM7170_SECOND
 );

97 
time
->
ticks
 = 0;

103 (è(*
gReg
)Ð
icm7170
, 
ICM7170_COUNTER_HUNDREDTHS
 );

106 
	}
}

112 
	$icm7170_£t_time
(

113 
mÜ
,

114 cÚ¡ 
¹ems_time_of_day
 *
time


117 
u_t
 
icm7170
;

118 
£tRegi¡_f
 
£tReg
;

119 
ut32_t
 
yr
;

120 
u_t
 
þock
;

122 
icm7170
 = 
RTC_TabË
[ 
mÜ
 ].
ulClPÜt1
;

123 
£tReg
 = 
RTC_TabË
[ 
mÜ
 ].
£tRegi¡
;

124 
þock
 = (
u_t
è
RTC_TabË
[ 
mÜ
 ].
pDeviûP¬ams
;

126 
yr
 = 
time
->year;

128 iàÐ
yr
 >= 2088 )

129 
	`¹ems_çl_rÜ_occu¼ed
Ð
RTEMS_INVALID_NUMBER
 );

131 iàÐ
yr
 >= 2000 )

132 
yr
 -= 2000;

134 
yr
 -= 1900;

136 (*
£tReg
)Ð
icm7170
, 
ICM7170_CONTROL
, 0x04 | 
þock
 );

138 (*
£tReg
)Ð
icm7170
, 
ICM7170_YEAR
, 
yr
 );

139 (*
£tReg
)Ð
icm7170
, 
ICM7170_MONTH
, 
time
->
mÚth
 );

140 (*
£tReg
)Ð
icm7170
, 
ICM7170_DATE
, 
time
->
day
 );

141 (*
£tReg
)Ð
icm7170
, 
ICM7170_HOUR
, 
time
->
hour
 );

142 (*
£tReg
)Ð
icm7170
, 
ICM7170_MINUTE
, 
time
->
mu
 );

143 (*
£tReg
)Ð
icm7170
, 
ICM7170_SECOND
, 
time
->
£cÚd
 );

149 (*
£tReg
)Ð
icm7170
, 
ICM7170_DAY_OF_WEEK
, 1 );

155 (*
£tReg
)Ð
icm7170
, 
ICM7170_CONTROL
, 0x0ø| 
þock
 );

158 
	}
}

164 
¹c_âs
 
	gicm7170_âs
 = {

165 
icm7170_lize
,

166 
icm7170_g_time
,

167 
icm7170_£t_time


	@src/libchip/rtc/icm7170.h

14 #iâdeà
__LIBCHIP_ICM7170_h


15 
	#__LIBCHIP_ICM7170_h


	)

21 
	#ICM7170_CONTROL
 0x11

	)

24 
	#ICM7170_COUNTER_HUNDREDTHS
 0x00

	)

25 
	#ICM7170_HOUR
 0x01

	)

26 
	#ICM7170_MINUTE
 0x02

	)

27 
	#ICM7170_SECOND
 0x03

	)

28 
	#ICM7170_MONTH
 0x04

	)

29 
	#ICM7170_DATE
 0x05

	)

30 
	#ICM7170_YEAR
 0x06

	)

31 
	#ICM7170_DAY_OF_WEEK
 0x07

	)

37 
	#ICM7170_AT_32_KHZ
 0x00

	)

38 
	#ICM7170_AT_1_MHZ
 0x01

	)

39 
	#ICM7170_AT_2_MHZ
 0x02

	)

40 
	#ICM7170_AT_4_MHZ
 0x03

	)

46 
¹c_âs
 
icm7170_âs
;

52 
ut32_t
 
icm7170_g_»gi¡
(

53 
u_t
 
ulClPÜt
,

54 
ut8_t
 
ucRegNum


57 
icm7170_£t_»gi¡
(

58 
u_t
 
ulClPÜt
,

59 
ut8_t
 
ucRegNum
,

60 
ut32_t
 
ucD©a


63 
ut32_t
 
icm7170_g_»gi¡_2
(

64 
u_t
 
ulClPÜt
,

65 
ut8_t
 
ucRegNum


68 
icm7170_£t_»gi¡_2
(

69 
u_t
 
ulClPÜt
,

70 
ut8_t
 
ucRegNum
,

71 
ut32_t
 
ucD©a


74 
ut32_t
 
icm7170_g_»gi¡_4
(

75 
u_t
 
ulClPÜt
,

76 
ut8_t
 
ucRegNum


79 
icm7170_£t_»gi¡_4
(

80 
u_t
 
ulClPÜt
,

81 
ut8_t
 
ucRegNum
,

82 
ut32_t
 
ucD©a


85 
ut32_t
 
icm7170_g_»gi¡_8
(

86 
u_t
 
ulClPÜt
,

87 
ut8_t
 
ucRegNum


90 
icm7170_£t_»gi¡_8
(

91 
u_t
 
ulClPÜt
,

92 
ut8_t
 
ucRegNum
,

93 
ut32_t
 
ucD©a


	@src/libchip/rtc/icm7170_reg.c

16 
	~<¹ems.h
>

17 
	~<libch/¹c.h
>

18 
	~<libch/icm7170.h
>

20 #iâdeà
_ICM7170_MULTIPLIER


21 
	#_ICM7170_MULTIPLIER
 1

	)

22 
	#_ICM7170_NAME
(
_X
è
	)
_X

23 
	#_ICM7170_TYPE
 
ut8_t


	)

26 
	#CALCULATE_REGISTER_ADDRESS
Ð
_ba£
, 
_»g
 ) \

27 (
_ICM7170_TYPE
 *)((
_ba£
è+ ((
_»g
è* 
_ICM7170_MULTIPLIER
 ))

	)

33 
ut32_t
 
	$_ICM7170_NAME
(
icm7170_g_»gi¡
)(

34 
u_t
 
ulClPÜt
,

35 
ut8_t
 
ucRegNum


38 
_ICM7170_TYPE
 *
pÜt
;

40 
pÜt
 = 
	`CALCULATE_REGISTER_ADDRESS
Ð
ulClPÜt
, 
ucRegNum
 );

42  *
pÜt
;

43 
	}
}

49 
	$_ICM7170_NAME
(
icm7170_£t_»gi¡
)(

50 
u_t
 
ulClPÜt
,

51 
ut8_t
 
ucRegNum
,

52 
ut32_t
 
ucD©a


55 
_ICM7170_TYPE
 *
pÜt
;

57 
pÜt
 = 
	`CALCULATE_REGISTER_ADDRESS
Ð
ulClPÜt
, 
ucRegNum
 );

59 *
pÜt
 = 
ucD©a
;

60 
	}
}

	@src/libchip/rtc/icm7170_reg2.c

16 
	#_ICM7170_MULTIPLIER
 2

	)

17 
	#_ICM7170_NAME
(
_X
è_X##
_2


	)

18 
	#_ICM7170_TYPE
 
ut8_t


	)

20 
	~"icm7170_»g.c
"

	@src/libchip/rtc/icm7170_reg4.c

16 
	#_ICM7170_MULTIPLIER
 4

	)

17 
	#_ICM7170_NAME
(
_X
è_X##
_4


	)

18 
	#_ICM7170_TYPE
 
ut8_t


	)

20 
	~"icm7170_»g.c
"

	@src/libchip/rtc/icm7170_reg8.c

16 
	#_ICM7170_MULTIPLIER
 8

	)

17 
	#_ICM7170_NAME
(
_X
è_X##
_8


	)

18 
	#_ICM7170_TYPE
 
ut8_t


	)

20 
	~"icm7170_»g.c
"

	@src/libchip/rtc/m48t08.c

24 
	~<¹ems.h
>

25 
	~<libch/¹c.h
>

26 
	~<libch/m48t08.h
>

32 
	#M48T08_CONTROL_WRITE
 0x80

	)

33 
	#M48T08_CONTROL_READ
 0x40

	)

34 
	#M48T08_CONTROL_SIGN
 0x20

	)

40 
	$m48t08_lize
(

41 
mÜ


44 
	}
}

50 
	#From_BCD
Ð
_x
 ) ((((_xè>> 4è* 10è+ ((_xè& 0x0F))

	)

51 
	#To_BCD
Ð
_x
 ) ((((_xè/ 10è<< 4è+ ((_xè% 10))

	)

53 
	$m48t08_g_time
(

54 
mÜ
,

55 
¹ems_time_of_day
 *
time


58 
ut32_t
 
m48t08
;

59 
gRegi¡_f
 
gReg
;

60 
£tRegi¡_f
 
£tReg
;

61 
ut8_t
 
cÚÞReg
;

62 
ut32_t
 
v®ue1
;

63 
ut32_t
 
v®ue2
;

65 
m48t08
 = 
RTC_TabË
[ 
mÜ
 ].
ulClPÜt1
;

66 
gReg
 = 
RTC_TabË
[ 
mÜ
 ].
gRegi¡
;

67 
£tReg
 = 
RTC_TabË
[ 
mÜ
 ].
£tRegi¡
;

73 
cÚÞReg
 = (*
gReg
)Ð
m48t08
, 
M48T08_CONTROL
 );

74 (*
£tReg
)Ð
m48t08
, 
M48T08_CONTROL
, 
cÚÞReg
 | 
M48T08_CONTROL_READ
 );

76 
v®ue1
 = (*
gReg
)Ð
m48t08
, 
M48T08_YEAR
 );

77 
v®ue2
 = 
	`From_BCD
Ð
v®ue1
 );

78 iàÐ
v®ue2
 < 88 )

79 
time
->
yr
 = 2000 + 
v®ue2
;

81 
time
->
yr
 = 1900 + 
v®ue2
;

83 
v®ue1
 = (*
gReg
)Ð
m48t08
, 
M48T08_MONTH
 );

84 
time
->
mÚth
 = 
	`From_BCD
Ð
v®ue1
 );

86 
v®ue1
 = (*
gReg
)Ð
m48t08
, 
M48T08_DATE
 );

87 
time
->
day
 = 
	`From_BCD
Ð
v®ue1
 );

89 
v®ue1
 = (*
gReg
)Ð
m48t08
, 
M48T08_HOUR
 );

90 
time
->
hour
 = 
	`From_BCD
Ð
v®ue1
 );

92 
v®ue1
 = (*
gReg
)Ð
m48t08
, 
M48T08_MINUTE
 );

93 
time
->
mu
 = 
	`From_BCD
Ð
v®ue1
 );

95 
v®ue1
 = (*
gReg
)Ð
m48t08
, 
M48T08_SECOND
 );

96 
time
->
£cÚd
 = 
	`From_BCD
Ð
v®ue1
 );

98 
time
->
ticks
 = 0;

104 (*
£tReg
)Ð
m48t08
, 
M48T08_CONTROL
, 
cÚÞReg
 );

107 
	}
}

113 
	$m48t08_£t_time
(

114 
mÜ
,

115 cÚ¡ 
¹ems_time_of_day
 *
time


118 
ut32_t
 
m48t08
;

119 
gRegi¡_f
 
gReg
;

120 
£tRegi¡_f
 
£tReg
;

121 
ut8_t
 
cÚÞReg
;

123 
m48t08
 = 
RTC_TabË
[ 
mÜ
 ].
ulClPÜt1
;

124 
gReg
 = 
RTC_TabË
[ 
mÜ
 ].
gRegi¡
;

125 
£tReg
 = 
RTC_TabË
[ 
mÜ
 ].
£tRegi¡
;

131 
cÚÞReg
 = (*
gReg
)Ð
m48t08
, 
M48T08_CONTROL
 );

132 (*
£tReg
)Ð
m48t08
, 
M48T08_CONTROL
, 
cÚÞReg
 | 
M48T08_CONTROL_WRITE
 );

134 iàÐ
time
->
yr
 >= 2088 )

135 
	`¹ems_çl_rÜ_occu¼ed
Ð
RTEMS_INVALID_NUMBER
 );

137 (*
£tReg
)Ð
m48t08
, 
M48T08_YEAR
, 
	`To_BCD
(
time
->
yr
 % 100) );

138 (*
£tReg
)Ð
m48t08
, 
M48T08_MONTH
, 
	`To_BCD
(
time
->
mÚth
) );

139 (*
£tReg
)Ð
m48t08
, 
M48T08_DATE
, 
	`To_BCD
(
time
->
day
) );

140 (*
£tReg
)Ð
m48t08
, 
M48T08_HOUR
, 
	`To_BCD
(
time
->
hour
) );

141 (*
£tReg
)Ð
m48t08
, 
M48T08_MINUTE
, 
	`To_BCD
(
time
->
mu
) );

142 (*
£tReg
)Ð
m48t08
, 
M48T08_SECOND
, 
	`To_BCD
(
time
->
£cÚd
) );

148 (*
£tReg
)Ð
m48t08
, 
M48T08_CONTROL
, 
cÚÞReg
 );

151 
	}
}

157 
¹c_âs
 
	gm48t08_âs
 = {

158 
m48t08_lize
,

159 
m48t08_g_time
,

160 
m48t08_£t_time


	@src/libchip/rtc/m48t08.h

16 #iâdeà
__LIBCHIP_M48T08_h


17 
	#__LIBCHIP_M48T08_h


	)

23 
	#M48T08_CONTROL
 0

	)

24 
	#M48T08_SECOND
 1

	)

25 
	#M48T08_MINUTE
 2

	)

26 
	#M48T08_HOUR
 3

	)

27 
	#M48T08_DAY_OF_WEEK
 4

	)

28 
	#M48T08_DATE
 5

	)

29 
	#M48T08_MONTH
 6

	)

30 
	#M48T08_YEAR
 7

	)

36 
¹c_âs
 
m48t08_âs
;

42 
ut32_t
 
m48t08_g_»gi¡
(

43 
u_t
 
ulClPÜt
,

44 
ut8_t
 
ucRegNum


47 
m48t08_£t_»gi¡
(

48 
u_t
 
ulClPÜt
,

49 
ut8_t
 
ucRegNum
,

50 
ut32_t
 
ucD©a


53 
ut32_t
 
m48t08_g_»gi¡_2
(

54 
u_t
 
ulClPÜt
,

55 
ut8_t
 
ucRegNum


58 
m48t08_£t_»gi¡_2
(

59 
u_t
 
ulClPÜt
,

60 
ut8_t
 
ucRegNum
,

61 
ut32_t
 
ucD©a


64 
ut32_t
 
m48t08_g_»gi¡_4
(

65 
u_t
 
ulClPÜt
,

66 
ut8_t
 
ucRegNum


69 
m48t08_£t_»gi¡_4
(

70 
u_t
 
ulClPÜt
,

71 
ut8_t
 
ucRegNum
,

72 
ut32_t
 
ucD©a


75 
ut32_t
 
m48t08_g_»gi¡_8
(

76 
u_t
 
ulClPÜt
,

77 
ut8_t
 
ucRegNum


80 
m48t08_£t_»gi¡_8
(

81 
u_t
 
ulClPÜt
,

82 
ut8_t
 
ucRegNum
,

83 
ut32_t
 
ucD©a


	@src/libchip/rtc/m48t08_reg.c

16 
	~<¹ems.h
>

17 
	~<libch/¹c.h
>

18 
	~<libch/m48t08.h
>

20 #iâdeà
_M48T08_MULTIPLIER


21 
	#_M48T08_MULTIPLIER
 1

	)

22 
	#_M48T08_NAME
(
_X
è
	)
_X

23 
	#_M48T08_TYPE
 
ut8_t


	)

26 
	#CALCULATE_REGISTER_ADDRESS
Ð
_ba£
, 
_»g
 ) \

27 (
_M48T08_TYPE
 *)((
_ba£
è+ ((
_»g
è* 
_M48T08_MULTIPLIER
 ))

	)

33 
ut32_t
 
	$_M48T08_NAME
(
m48t08_g_»gi¡
)(

34 
u_t
 
ulClPÜt
,

35 
ut8_t
 
ucRegNum


38 
_M48T08_TYPE
 *
pÜt
;

40 
pÜt
 = 
	`CALCULATE_REGISTER_ADDRESS
Ð
ulClPÜt
, 
ucRegNum
 );

42  *
pÜt
;

43 
	}
}

49 
	$_M48T08_NAME
(
m48t08_£t_»gi¡
)(

50 
u_t
 
ulClPÜt
,

51 
ut8_t
 
ucRegNum
,

52 
ut32_t
 
ucD©a


55 
_M48T08_TYPE
 *
pÜt
;

57 
pÜt
 = 
	`CALCULATE_REGISTER_ADDRESS
Ð
ulClPÜt
, 
ucRegNum
 );

59 *
pÜt
 = 
ucD©a
;

60 
	}
}

	@src/libchip/rtc/m48t08_reg2.c

16 
	#_M48T08_MULTIPLIER
 2

	)

17 
	#_M48T08_NAME
(
_X
è_X##
_2


	)

18 
	#_M48T08_TYPE
 
ut8_t


	)

20 
	~"m48t08_»g.c
"

	@src/libchip/rtc/m48t08_reg4.c

16 
	#_M48T08_MULTIPLIER
 4

	)

17 
	#_M48T08_NAME
(
_X
è_X##
_4


	)

18 
	#_M48T08_TYPE
 
ut8_t


	)

20 
	~"m48t08_»g.c
"

	@src/libchip/rtc/m48t08_reg8.c

16 
	#_M48T08_MULTIPLIER
 8

	)

17 
	#_M48T08_NAME
(
_X
è_X##
_8


	)

18 
	#_M48T08_TYPE
 
ut8_t


	)

20 
	~"m48t08_»g.c
"

	@src/libchip/rtc/mc146818a.c

23 
	~<¹ems.h
>

24 
	~<libch/¹c.h
>

25 
	~<libch/mc146818a.h
>

27 
	#From_BCD
Ð
_x
 ) ((((_xè>> 4è* 10è+ ((_xè& 0x0F))

	)

28 
	#To_BCD
Ð
_x
 ) ((((_xè/ 10è<< 4è+ ((_xè% 10))

	)

33 
boÞ
 
	$mc146818a_´obe
(

34 
mÜ


37 
ut32_t
 
mc146818a
;

38 
gRegi¡_f
 
gReg
;

39 
ut32_t
 
v®ue
;

44 
mc146818a
 = 
RTC_TabË
[ 
mÜ
 ].
ulClPÜt1
;

45 
gReg
 = 
RTC_TabË
[ 
mÜ
 ].
gRegi¡
;

46 
v®ue
 = (*
gReg
)Ð
mc146818a
, 
MC146818A_STATUSD
 );

47 ià((
v®ue
 == 0) || (value == 0xFF))

48  
çl£
;

49  
ue
;

50 
	}
}

55 
	$mc146818a_lize
(

56 
mÜ


59 
u_t
 
mc146818a
;

60 
£tRegi¡_f
 
£tReg
;

62 
mc146818a
 = 
RTC_TabË
[ 
mÜ
 ].
ulClPÜt1
;

63 
£tReg
 = 
RTC_TabË
[ 
mÜ
 ].
£tRegi¡
;

65 (*
£tReg
)(

66 
mc146818a
,

67 
MC146818A_STATUSA
,

68 
MC146818ASA_DIVIDER
|
MC146818ASA_1024


70 (*
£tReg
)(

71 
mc146818a
,

72 
MC146818A_STATUSB
,

73 
MC146818ASB_24HR


75 
	}
}

80 
	$mc146818a_g_time
(

81 
mÜ
,

82 
¹ems_time_of_day
 *
time


85 
u_t
 
mc146818a
;

86 
gRegi¡_f
 
gReg
;

87 
ut32_t
 
v®ue
;

88 
¹ems_¼u±_Ëv
 
Ëv
;

90 
mc146818a
 = 
RTC_TabË
[ 
mÜ
 ].
ulClPÜt1
;

91 
gReg
 = 
RTC_TabË
[ 
mÜ
 ].
gRegi¡
;

96 ià(((*
gReg
)Ð
mc146818a
, 
MC146818A_STATUSD
 ) & 
MC146818ASD_PWR
) == 0)

102 
	`¹ems_¼u±_di§bË
Ð
Ëv
 );

103 ((*
gReg
)Ð
mc146818a
, 
MC146818A_STATUSA
 ) & 
MC146818ASA_TUP
) != 0) {

104 
	`¹ems_¼u±_æash
Ð
Ëv
 );

110 
v®ue
 = (*
gReg
)Ð
mc146818a
, 
MC146818A_YEAR
 );

111 
v®ue
 = 
	`From_BCD
( value );

112 iàÐ
v®ue
 < 88 )

113 
time
->
yr
 = 2000 + 
v®ue
;

115 
time
->
yr
 = 1900 + 
v®ue
;

117 
v®ue
 = (*
gReg
)Ð
mc146818a
, 
MC146818A_MONTH
 );

118 
time
->
mÚth
 = 
	`From_BCD
Ð
v®ue
 );

120 
v®ue
 = (*
gReg
)Ð
mc146818a
, 
MC146818A_DAY
 );

121 
time
->
day
 = 
	`From_BCD
Ð
v®ue
 );

123 
v®ue
 = (*
gReg
)Ð
mc146818a
, 
MC146818A_HRS
 );

124 
time
->
hour
 = 
	`From_BCD
Ð
v®ue
 );

126 
v®ue
 = (*
gReg
)Ð
mc146818a
, 
MC146818A_MIN
 );

127 
time
->
mu
 = 
	`From_BCD
Ð
v®ue
 );

129 
v®ue
 = (*
gReg
)Ð
mc146818a
, 
MC146818A_SEC
 );

130 
	`¹ems_¼u±_abË
Ð
Ëv
 );

131 
time
->
£cÚd
 = 
	`From_BCD
Ð
v®ue
 );

132 
time
->
ticks
 = 0;

135 
	}
}

140 
	$mc146818a_£t_time
(

141 
mÜ
,

142 cÚ¡ 
¹ems_time_of_day
 *
time


145 
ut32_t
 
mc146818a
;

146 
£tRegi¡_f
 
£tReg
;

148 
mc146818a
 = 
RTC_TabË
[ 
mÜ
 ].
ulClPÜt1
;

149 
£tReg
 = 
RTC_TabË
[ 
mÜ
 ].
£tRegi¡
;

154 (*
£tReg
)Ð
mc146818a
, 
MC146818A_STATUSB
, 
MC146818ASB_HALT
|
MC146818ASB_24HR
 );

156 iàÐ
time
->
yr
 >= 2088 )

157 
	`¹ems_çl_rÜ_occu¼ed
Ð
RTEMS_INVALID_NUMBER
 );

159 (*
£tReg
)Ð
mc146818a
, 
MC146818A_YEAR
, 
	`To_BCD
(
time
->
yr
 % 100) );

160 (*
£tReg
)Ð
mc146818a
, 
MC146818A_MONTH
, 
	`To_BCD
(
time
->
mÚth
) );

161 (*
£tReg
)Ð
mc146818a
, 
MC146818A_DAY
, 
	`To_BCD
(
time
->
day
) );

162 (*
£tReg
)Ð
mc146818a
, 
MC146818A_HRS
, 
	`To_BCD
(
time
->
hour
) );

163 (*
£tReg
)Ð
mc146818a
, 
MC146818A_MIN
, 
	`To_BCD
(
time
->
mu
) );

164 (*
£tReg
)Ð
mc146818a
, 
MC146818A_SEC
, 
	`To_BCD
(
time
->
£cÚd
) );

169 (*
£tReg
)Ð
mc146818a
, 
MC146818A_STATUSB
, 
MC146818ASB_24HR
 );

171 
	}
}

176 
¹c_âs
 
	gmc146818a_âs
 = {

177 
mc146818a_lize
,

178 
mc146818a_g_time
,

179 
mc146818a_£t_time


	@src/libchip/rtc/mc146818a.h

14 #iâdeà
__LIBCHIP_MC146818A_h


15 
	#__LIBCHIP_MC146818A_h


	)

20 
	#MC146818A_SEC
 0x00

	)

21 
	#MC146818A_SECALRM
 0x01

	)

22 
	#MC146818A_MIN
 0x02

	)

23 
	#MC146818A_MINALRM
 0x03

	)

24 
	#MC146818A_HRS
 0x04

	)

25 
	#MC146818A_HRSALRM
 0x05

	)

26 
	#MC146818A_WDAY
 0x06

	)

27 
	#MC146818A_DAY
 0x07

	)

28 
	#MC146818A_MONTH
 0x08

	)

29 
	#MC146818A_YEAR
 0x09

	)

31 
	#MC146818A_STATUSA
 0x0¨

	)

32 
	#MC146818ASA_TUP
 0x80

	)

33 
	#MC146818ASA_DIVIDER
 0x20

	)

34 
	#MC146818ASA_1024
 0x06

	)

36 
	#MC146818A_STATUSB
 0x0b

	)

37 
	#MC146818ASB_DST
 0x01

	)

38 
	#MC146818ASB_24HR
 0x02

	)

39 
	#MC146818ASB_HALT
 0x80

	)

41 
	#MC146818A_STATUSD
 0x0d

	)

42 
	#MC146818ASD_PWR
 0x80

	)

48 
¹c_âs
 
mc146818a_âs
;

49 
boÞ
 
mc146818a_´obe
(

50 
mÜ


56 
ut32_t
 
mc146818a_g_»gi¡
(

57 
u_t
 
ulClPÜt
,

58 
ut8_t
 
ucRegNum


61 
mc146818a_£t_»gi¡
(

62 
u_t
 
ulClPÜt
,

63 
ut8_t
 
ucRegNum
,

64 
ut32_t
 
ucD©a


	@src/libchip/rtc/mc146818a_ioreg.c

19 
	~<¹ems.h
>

20 
	~<b¥.h
>

21 
	~<libch/¹c.h
>

22 
	~<libch/mc146818a.h
>

27 #ià
defed
(
__i386__
è|| defed(
__PPC__
)

28 #ià
defed
(
pÜt_by
)

29 
ut32_t
 
	$mc146818a_g_»gi¡
(

30 
u_t
 
ulClPÜt
,

31 
ut8_t
 
ucRegNum


34 
ut8_t
 
v®
;

35 
ut8_t
 
tmp
;

37 (è
tmp
;

39 
	`ouÜt_by
Ð
ulClPÜt
, 
ucRegNum
 );

40 
	`pÜt_by
Ð0x84, 
tmp
 );

41 
	`pÜt_by
Ð
ulClPÜt
+1, 
v®
 );

42 
	`pÜt_by
Ð0x84, 
tmp
 );

43  
v®
;

44 
	}
}

46 
	$mc146818a_£t_»gi¡
(

47 
u_t
 
ulClPÜt
,

48 
ut8_t
 
ucRegNum
,

49 
ut32_t
 
ucD©a


52 
	`ouÜt_by
Ð
ulClPÜt
, 
ucRegNum
 );

53 
	`ouÜt_by
Ð
ulClPÜt
+1, (
ut8_t
)
ucD©a
 );

54 
	}
}

	@src/libchip/rtc/rtc.h

12 #iâdeà
__LIBCHIP_RTC_h


13 
	#__LIBCHIP_RTC_h


	)

15 
	~<¡dboÞ.h
>

16 
	~<¡dt.h
>

18 
	~<¹ems.h
>

24 
	$ut32_t
 (*
	tgRegi¡_f
)(
	tu_t
 
	tpÜt
, 
	tut8_t
 
	t»g
);

25 (*
	t£tRegi¡_f
)(
	tu_t
 
	tpÜt
, 
	tut8_t
 
	t»g
, 
	tut32_t
 
	tv®ue
);

27 
	s_¹c_âs
 {

28 (*
deviûInlize
)(
mÜ
);

29 (*
deviûGTime
)(
mÜ
, 
¹ems_time_of_day
 *
time
);

30 (*
deviûSTime
)(
mÜ
, cÚ¡ 
¹ems_time_of_day
 *
time
);

31 } 
	t¹c_âs
;

34 
RTC_M48T08
,

35 
RTC_ICM7170
,

36 
RTC_CUSTOM
,

37 
RTC_MC146818A


38 } 
	t¹c_devs
;

61 
	s_¹c_tbl
 {

62 cÚ¡ *
sDeviûName
;

63 
¹c_devs
 
deviûTy³
;

64 cÚ¡ 
¹c_âs
 *
pDeviûFns
;

65 
	`boÞ
 (*
deviûProbe
)(
mÜ
);

66 *
pDeviûP¬ams
;

67 
u_t
 
ulClPÜt1
;

68 
u_t
 
ulD©aPÜt
;

69 
gRegi¡_f
 
gRegi¡
;

70 
£tRegi¡_f
 
£tRegi¡
;

71 } 
	t¹c_tbl
;

73 
¹c_tbl
 
RTC_TabË
[];

74 
size_t
 
RTC_CouÁ
;

77 
boÞ
 
	`¹c_´obe
Ð
mÜ
 );

	@src/libchip/rtc/rtcprobe.c

12 
	~<¹ems.h
>

13 
	~<libch/¹c.h
>

16 
boÞ
 
	$¹c_´obe
(

17 
mÜ


20  
ue
;

21 
	}
}

	@src/libchip/sensor/ov9712.c

18 
	~<¹ems.h
>

19 
	~<¹ems/libi2c.h
>

21 
	~<libch/ov9712.h
>

22 
	~<i2c.h
>

24 
	~<¹ems/libio.h
>

26 
	#ARRAY_SIZE
(
¬¿y
è(×¼ayè/ ×¼ay[0]))

	)

28 
SENSOR_DATA_S
 
	gov9712__·¿_1280_720
[] = {

40 
SENSOR_DATA_S
 
	gov9712__·¿_640_400
[] = {

53 
	$ov9712_dowÆßd_fmw¬e
(
SENSOR_DATA_S
 *
pModeStg
, 
ArySize
)

55 
i
, 
»t
;

56 
ut32_t
 
»g_addr
, 
v®
;

58 
i
 = 0; i < 
ArySize
; ++i, ++
pModeStg
){

59 
»g_addr
 = 
pModeStg
->reg_addr;

60 
v®
 = 
pModeStg
->
d©a
;

61 
»t
 = 
	`hi_i2c_wre
(
SENSOR_I2C_ADDR
, 
»g_addr
, 1, 
v®
, 1);

62 if(
»t
 < 0){

63 
	`´tk
("i2øwraddr=0x%x v®=0x%x¼Ü!\n", 
»g_addr
, 
v®
);

68  
»t
;

69 
	}
}

71 
¹ems_¡©us_code


72 
	$£nsÜ_ov9712_
 (
¹ems_deviû_majÜ_numb
 
majÜ
, 
¹ems_deviû_mÜ_numb
 
mÜ
,

73 *
¬g
)

75 
SENSOR_DATA_S
 *
pModeStg
 = 
NULL
;

76 
ArySize
 = 0, 
»t
 = 0;

78 
	`hi_i2c_
();

80 
pModeStg
 = 
ov9712__·¿_1280_720
;

81 
ArySize
 = 
	`ARRAY_SIZE
(
ov9712__·¿_1280_720
);

82 
»t
 = 
	`ov9712_dowÆßd_fmw¬e
(
pModeStg
, 
ArySize
);

83 ià(
»t
 < 0){

84 
	`´tk
("ov9712_download_firmware failed!rygain\n");

85  
RTEMS_IO_ERROR
;

88  
RTEMS_SUCCESSFUL
;

89 
	}
}

91 
¹ems_¡©us_code


92 
	$£nsÜ_ov9712_»ad
 (
¹ems_deviû_majÜ_numb
 
majÜ
, 
¹ems_deviû_mÜ_numb
 
mÜ
,

93 *
¬g
)

95 
SENSOR_DATA_S
 *
¬gs
 = 
¬g
;

97 
	`hi_i2c_»ad
(
SENSOR_I2C_ADDR
, 
¬gs
->
»g_addr
, 1, &¬gs->
d©a
, 1);

99  
RTEMS_SUCCESSFUL
;

100 
	}
}

102 
¹ems_¡©us_code


103 
	$£nsÜ_ov9712_wre
 (
¹ems_deviû_majÜ_numb
 
majÜ
, 
¹ems_deviû_mÜ_numb
 
mÜ
,

104 *
¬g
)

106 
SENSOR_DATA_S
 *
¬gs
 = 
¬g
;

108 
	`hi_i2c_wre
(
SENSOR_I2C_ADDR
, 
¬gs
->
»g_addr
, 1,rgs->
d©a
, 1);

110  
RTEMS_SUCCESSFUL
;

111 
	}
}

113 
¹ems_driv_add»ss_bË
 
	gov9712_Ýs
 = {

114 .
liz©iÚ_y
 = 
£nsÜ_ov9712_
,

115 .
	g»ad_y
 = 
£nsÜ_ov9712_»ad
,

116 .
	gwre_y
 = 
£nsÜ_ov9712_wre
,

119 
¹ems_libi2c_drv_t
 
	gov9712_drv_tbl
 = {

120 .
Ýs
 = &
ov9712_Ýs
,

121 .
	gsize
 =  (
ov9712_drv_tbl
),

124 
¹ems_libi2c_drv_t
 *
	gi2c_ov9712_driv_desütÜ
 = &
ov9712_drv_tbl
;

	@src/libchip/sensor/ov9712.h

1 #iâdeà
_OV9712_H


2 
	#_OV9712_H


	)

4 
	~<¹ems.h
>

5 
	~<¹ems/libi2c.h
>

7 #ifdeà
__ýlu¥lus


11 
	#SENSOR_I2C_ADDR
 0x60

	)

13 
	sSENSOR_DATA_S


15 
»g_addr
;

16 
d©a
;

18 }
	tSENSOR_DATA_S
 ;

21 
¹ems_libi2c_drv_t
 *
i2c_ov9712_driv_desütÜ
;

23 #ifdeà
__ýlu¥lus


	@src/libchip/serial/mc68681.c

17 
	~<¹ems.h
>

18 
	~<¹ems/libio.h
>

19 
	~<¹ems/scÜe/sys¡©e.h
>

20 
	~<¡dlib.h
>

22 
	~<libch/£rl.h
>

23 
	~<libch/mc68681.h
>

24 
	~<libch/£rsuµ.h
>

25 
	~"mc68681_p.h
"

31 cÚ¡ 
cÚsÞe_âs
 
	gmc68681_âs
 =

33 
libch_£rl_deçuÉ_´obe
,

34 
mc68681_Ý
,

35 
NULL
,

36 
NULL
,

37 
mc68681_wre_suµÜt_t
,

38 
mc68681_lize_¼u±s
,

39 
mc68681_wre_pÞËd
,

40 
mc68681_£t_©ibus
,

41 
ue


44 cÚ¡ 
cÚsÞe_âs
 
	gmc68681_âs_pÞËd
 =

46 
libch_£rl_deçuÉ_´obe
,

47 
mc68681_Ý
,

48 
mc68681_þo£
,

49 
mc68681_by_nÚblockg_pÞËd
,

50 
mc68681_wre_suµÜt_pÞËd
,

51 
mc68681_
,

52 
mc68681_wre_pÞËd
,

53 
mc68681_£t_©ibus
,

54 
çl£
,

58 #ià(
CPU_SIMPLE_VECTORED_INTERRUPTS
 =ð
TRUE
)

59 
£t_veùÜ
Ð
¹ems_i¤_y
, 
¹ems_veùÜ_numb
, );

74 
MC68681_STATIC
 
mc68681_baud_¿
(

75 
mÜ
,

76 
baud
,

77 *
baud_mask_p
,

78 *
aü_b_p
,

79 *
commªd


89 
MC68681_STATIC
 
	$mc68681_£t_©ibus
(

90 
mÜ
,

91 cÚ¡ 
rmios
 *
t


94 
ut32_t
 
pMC68681_pÜt
;

95 
ut32_t
 
pMC68681
;

96 
mode1
;

97 
mode2
;

98 
baud_mask
;

99 
aü_b
;

100 
cmd
 = 0;

101 
£tRegi¡_f
 
£tReg
;

102 
¹ems_¼u±_Ëv
 
Irql
;

104 
pMC68681
 = 
CÚsÞe_PÜt_Tbl
[
mÜ
]->
ulClPÜt1
;

105 
pMC68681_pÜt
 = 
CÚsÞe_PÜt_Tbl
[
mÜ
]->
ulClPÜt2
;

106 
£tReg
 = 
CÚsÞe_PÜt_Tbl
[
mÜ
]->
£tRegi¡
;

112 ià(
	`mc68681_baud_¿
Ð
mÜ
, 
t
->
c_cæag
, &
baud_mask
, &
aü_b
, &
cmd
 ) == -1)

115 
baud_mask
 |= baud_mask << 4;

116 
aü_b
 <<= 7;

122 
mode1
 = 0;

123 
mode2
 = 0;

125 ià(
t
->
c_cæag
 & 
PARENB
) {

126 ià(
t
->
c_cæag
 & 
PARODD
)

127 
mode1
 |= 0x04;

131 
mode1
 |= 0x10;

138 ià(
t
->
c_cæag
 & 
CSIZE
) {

139 
t
->
c_cæag
 & 
CSIZE
) {

140 
CS5
: ;

141 
CS6
: 
mode1
 |= 0x01; ;

142 
CS7
: 
mode1
 |= 0x02; ;

143 
CS8
: 
mode1
 |= 0x03; ;

146 
mode1
 |= 0x03;

153 ià(
t
->
c_cæag
 & 
CSTOPB
) {

154 
mode2
 |= 0x0F;

156 ià((
t
->
c_cæag
 & 
CSIZE
è=ð
CS5
)

158 
mode2
 |= 0x07;

165 if(
t
->
c_cæag
 & 
CRTSCTS
) {

166 
mode1
 |= 0x80;

167 
mode2
 |= 0x10;

171 
	`¹ems_¼u±_di§bË
(
Irql
);

172 (*
£tReg
)Ð
pMC68681
, 
MC68681_AUX_CTRL_REG
, 
aü_b
 );

173 (*
£tReg
)Ð
pMC68681_pÜt
, 
MC68681_CLOCK_SELECT
, 
baud_mask
 );

174 iàÐ
cmd
 ) {

175 (*
£tReg
)Ð
pMC68681_pÜt
, 
MC68681_COMMAND
, 
cmd
 );

176 (*
£tReg
)Ð
pMC68681_pÜt
, 
MC68681_COMMAND
, 
cmd
 | 0x20 );

178 (*
£tReg
)Ð
pMC68681_pÜt
, 
MC68681_COMMAND
, 
MC68681_MODE_REG_RESET_MR_PTR
 );

179 (*
£tReg
)Ð
pMC68681_pÜt
, 
MC68681_MODE
, 
mode1
 );

180 (*
£tReg
)Ð
pMC68681_pÜt
, 
MC68681_MODE
, 
mode2
 );

181 
	`¹ems_¼u±_abË
(
Irql
);

183 
	}
}

191 
MC68681_STATIC
 
	$mc68681_lize_cÚxt
(

192 
mÜ
,

193 
mc68681_cÚxt
 *
pmc68681CÚxt


196 
pÜt
;

197 
pMC68681
;

198 
pMC68681_pÜt
;

200 
pMC68681
 = 
CÚsÞe_PÜt_Tbl
[
mÜ
]->
ulClPÜt1
;

201 
pMC68681_pÜt
 = 
CÚsÞe_PÜt_Tbl
[
mÜ
]->
ulClPÜt2
;

203 
pmc68681CÚxt
->
m©e
 = -1;

205 
pÜt
=0 ;Üt<
CÚsÞe_PÜt_CouÁ
 ;ort++ ) {

206 iàÐ
CÚsÞe_PÜt_Tbl
[
pÜt
]->
ulClPÜt1
 =ð
pMC68681
 &&

207 
CÚsÞe_PÜt_Tbl
[
pÜt
]->
ulClPÜt2
 !ð
pMC68681_pÜt
 ) {

208 
pmc68681CÚxt
->
m©e
 = 
pÜt
;

209 
pmc68681CÚxt
->
imr
 = 0;

214 
	}
}

222 
MC68681_STATIC
 
	$mc68681_
(
mÜ
)

224 
ut32_t
 
pMC68681_pÜt
;

225 
mc68681_cÚxt
 *
pmc68681CÚxt
;

226 
£tRegi¡_f
 
£tReg
;

228 
pmc68681CÚxt
 = (
mc68681_cÚxt
 *è
	`m®loc
((mc68681_context));

230 
CÚsÞe_PÜt_D©a
[
mÜ
].
pDeviûCÚxt
 = (*)
pmc68681CÚxt
;

232 
	`mc68681_lize_cÚxt
Ð
mÜ
, 
pmc68681CÚxt
 );

234 
pMC68681_pÜt
 = 
CÚsÞe_PÜt_Tbl
[
mÜ
]->
ulClPÜt2
;

235 
£tReg
 = 
CÚsÞe_PÜt_Tbl
[
mÜ
]->
£tRegi¡
;

241 (*
£tReg
)Ð
pMC68681_pÜt
, 
MC68681_COMMAND
, 
MC68681_MODE_REG_RESET_RX
 );

242 (*
£tReg
)Ð
pMC68681_pÜt
, 
MC68681_COMMAND
, 
MC68681_MODE_REG_RESET_TX
 );

243 (*
£tReg
)Ð
pMC68681_pÜt
, 
MC68681_COMMAND
, 
MC68681_MODE_REG_RESET_ERROR
 );

244 (*
£tReg
)Ð
pMC68681_pÜt
, 
MC68681_COMMAND
, 
MC68681_MODE_REG_RESET_BREAK
 );

245 (*
£tReg
)Ð
pMC68681_pÜt
, 
MC68681_COMMAND
, 
MC68681_MODE_REG_STOP_BREAK
 );

246 (*
£tReg
)Ð
pMC68681_pÜt
, 
MC68681_COMMAND
, 
MC68681_MODE_REG_DISABLE_TX
 );

247 (*
£tReg
)Ð
pMC68681_pÜt
, 
MC68681_COMMAND
, 
MC68681_MODE_REG_DISABLE_RX
 );

250 (*
£tReg
)Ð
pMC68681_pÜt
, 
MC68681_MODE_REG_1A
, 0x00 );

251 (*
£tReg
)Ð
pMC68681_pÜt
, 
MC68681_MODE_REG_2A
, 0x02 );

257 
	`mc68681_abË_¼u±s
Ð
mÜ
, 
MC68681_IMR_DISABLE_ALL
 );

258 
	}
}

268 
MC68681_STATIC
 
	$mc68681_Ý
(

269 
majÜ
,

270 
mÜ
,

271 *
¬g


274 
ut32_t
 
pMC68681
;

275 
ut32_t
 
pMC68681_pÜt
;

276 
baud
;

277 
aü_b
;

278 
veùÜ
;

279 
commªd
 = 0;

280 
¹ems_¼u±_Ëv
 
Irql
;

281 
£tRegi¡_f
 
£tReg
;

282 
¡©us
;

285 
pMC68681
 = 
CÚsÞe_PÜt_Tbl
[
mÜ
]->
ulClPÜt1
;

286 
pMC68681_pÜt
 = 
CÚsÞe_PÜt_Tbl
[
mÜ
]->
ulClPÜt2
;

287 
£tReg
 = 
CÚsÞe_PÜt_Tbl
[
mÜ
]->
£tRegi¡
;

288 
veùÜ
 = 
CÚsÞe_PÜt_Tbl
[
mÜ
]->
ulIÁVeùÜ
;

292 
¡©us
 = 
	`mc68681_baud_¿
Ð
mÜ
, 
B9600
, &
baud
, &
aü_b
, &
commªd
 );

293 ià(
¡©us
 < 0è
	`¹ems_çl_rÜ_occu¼ed
 (
RTEMS_NOT_DEFINED
);

299 
	`¹ems_¼u±_di§bË
(
Irql
);

300 (*
£tReg
)Ð
pMC68681
, 
MC68681_AUX_CTRL_REG
, 
aü_b
 << 7 );

301 (*
£tReg
)Ð
pMC68681_pÜt
, 
MC68681_CLOCK_SELECT
, 
baud
 );

302 iàÐ
commªd
 ) {

303 (*
£tReg
)Ð
pMC68681_pÜt
, 
MC68681_COMMAND
, 
commªd
 );

304 (*
£tReg
)Ð
pMC68681_pÜt
, 
MC68681_COMMAND
, 
commªd
 | 0x20 );

306 (*
£tReg
)Ð
pMC68681_pÜt
, 
MC68681_COMMAND
, 
MC68681_MODE_REG_RESET_MR_PTR
 );

307 (*
£tReg
)Ð
pMC68681_pÜt
, 
MC68681_MODE
, 0x13 );

308 (*
£tReg
)Ð
pMC68681_pÜt
, 
MC68681_MODE
, 0x07 );

309 
	`¹ems_¼u±_abË
(
Irql
);

311 (*
£tReg
)Ð
pMC68681_pÜt
, 
MC68681_COMMAND
, 
MC68681_MODE_REG_ENABLE_TX
 );

312 (*
£tReg
)Ð
pMC68681_pÜt
, 
MC68681_COMMAND
, 
MC68681_MODE_REG_ENABLE_RX
 );

314 (*
£tReg
)Ð
pMC68681
, 
MC68681_INTERRUPT_VECTOR_REG
, 
veùÜ
 );

316  
RTEMS_SUCCESSFUL
;

317 
	}
}

325 
MC68681_STATIC
 
	$mc68681_þo£
(

326 
majÜ
,

327 
mÜ
,

328 *
¬g


331 
ut32_t
 
pMC68681_pÜt
;

332 
£tRegi¡_f
 
£tReg
;

334 
pMC68681_pÜt
 = 
CÚsÞe_PÜt_Tbl
[
mÜ
]->
ulClPÜt2
;

335 
£tReg
 = 
CÚsÞe_PÜt_Tbl
[
mÜ
]->
£tRegi¡
;

340 (*
£tReg
)Ð
pMC68681_pÜt
, 
MC68681_COMMAND
, 
MC68681_MODE_REG_DISABLE_TX
 );

341 (*
£tReg
)Ð
pMC68681_pÜt
, 
MC68681_COMMAND
, 
MC68681_MODE_REG_DISABLE_RX
 );

343 (
RTEMS_SUCCESSFUL
);

344 
	}
}

352 
MC68681_STATIC
 
	$mc68681_wre_pÞËd
(

353 
mÜ
,

354 
cCh¬


357 
ut32_t
 
pMC68681_pÜt
;

358 
ucLeStus
;

359 
iTimeout
;

360 
gRegi¡_f
 
gReg
;

361 
£tRegi¡_f
 
£tReg
;

363 
pMC68681_pÜt
 = 
CÚsÞe_PÜt_Tbl
[
mÜ
]->
ulClPÜt2
;

364 
gReg
 = 
CÚsÞe_PÜt_Tbl
[
mÜ
]->
gRegi¡
;

365 
£tReg
 = 
CÚsÞe_PÜt_Tbl
[
mÜ
]->
£tRegi¡
;

370 
iTimeout
 = 1000;

371 
ucLeStus
 = (*
gReg
)(
pMC68681_pÜt
, 
MC68681_STATUS
);

372 (
ucLeStus
 & (
MC68681_TX_READY
|
MC68681_TX_EMPTY
)) == 0) {

374 ià((
ucLeStus
 & 0xF0))

375 (*
£tReg
)Ð
pMC68681_pÜt
, 
MC68681_COMMAND
, 
MC68681_MODE_REG_RESET_ERROR
 );

382 if(
	`_Sy¡em_¡©e_Is_up
(
	`_Sy¡em_¡©e_G
())) {

383 
	`¹ems_sk_wake_aá
(
RTEMS_YIELD_PROCESSOR
);

386 
ucLeStus
 = (*
gReg
)(
pMC68681_pÜt
, 
MC68681_STATUS
);

387 if(!--
iTimeout
) {

396 (*
£tReg
)(
pMC68681_pÜt
, 
MC68681_TX_BUFFER
, 
cCh¬
);

397 
	}
}

406 
MC68681_STATIC
 
¹ems_i¤
 
	$mc68681_i¤
(

407 
¹ems_veùÜ_numb
 
veùÜ


410 
mÜ
;

412 
mÜ
=0 ; mÜ<
CÚsÞe_PÜt_CouÁ
 ; minor++) {

413 if(
CÚsÞe_PÜt_Tbl
[
mÜ
]->
ulIÁVeùÜ
 =ð
veùÜ
 &&

414 
CÚsÞe_PÜt_Tbl
[
mÜ
]->
deviûTy³
 =ð
SERIAL_MC68681
 ) {

415 
	`mc68681_´oûss
(
mÜ
);

418 
	}
}

427 
MC68681_STATIC
 
	$mc68681_lize_¼u±s
(
mÜ
)

429 
	`mc68681_
(
mÜ
);

431 
CÚsÞe_PÜt_D©a
[
mÜ
].
bAùive
 = 
FALSE
;

433 #ià(
CPU_SIMPLE_VECTORED_INTERRUPTS
 =ð
TRUE
)

434 
	`£t_veùÜ
(
mc68681_i¤
, 
CÚsÞe_PÜt_Tbl
[
mÜ
]->
ulIÁVeùÜ
, 1);

437 
	`mc68681_abË_¼u±s
(
mÜ
,
MC68681_IMR_ENABLE_ALL_EXCEPT_TX
);

438 
	}
}

446 
MC68681_STATIC
 
ssize_t
 
	$mc68681_wre_suµÜt_t
(

447 
mÜ
,

448 cÚ¡ *
buf
,

449 
size_t
 
Ën


452 
ut32_t
 
Irql
;

453 
ut32_t
 
pMC68681_pÜt
;

454 
£tRegi¡_f
 
£tReg
;

456 
pMC68681_pÜt
 = 
CÚsÞe_PÜt_Tbl
[
mÜ
]->
ulClPÜt2
;

457 
£tReg
 = 
CÚsÞe_PÜt_Tbl
[
mÜ
]->
£tRegi¡
;

464 iàÐ!
Ën
 )

471 
	`¹ems_¼u±_di§bË
(
Irql
);

472 iàÐ
CÚsÞe_PÜt_D©a
[
mÜ
].
bAùive
 =ð
FALSE
 ) {

473 
CÚsÞe_PÜt_D©a
[
mÜ
].
bAùive
 = 
TRUE
;

474 
	`mc68681_abË_¼u±s
(
mÜ
, 
MC68681_IMR_ENABLE_ALL
);

476 (*
£tReg
)(
pMC68681_pÜt
, 
MC68681_TX_BUFFER
, *
buf
);

477 
	`¹ems_¼u±_abË
(
Irql
);

480 
	}
}

489 
MC68681_STATIC
 
ssize_t
 
	$mc68681_wre_suµÜt_pÞËd
(

490 
mÜ
,

491 cÚ¡ *
buf
,

492 
size_t
 
Ën


495 
nwre
 = 0;

500 
nwre
 < 
Ën
) {

504 
	`mc68681_wre_pÞËd
(
mÜ
, *
buf
++);

505 
nwre
++;

511  
nwre
;

512 
	}
}

520 
MC68681_STATIC
 
	$mc68681_by_nÚblockg_pÞËd
(

521 
mÜ


524 
ut32_t
 
pMC68681_pÜt
;

525 
ucLeStus
;

526 
cCh¬
;

527 
gRegi¡_f
 
gReg
;

529 
pMC68681_pÜt
 = 
CÚsÞe_PÜt_Tbl
[
mÜ
]->
ulClPÜt2
;

530 
gReg
 = 
CÚsÞe_PÜt_Tbl
[
mÜ
]->
gRegi¡
;

532 
ucLeStus
 = (*
gReg
)(
pMC68681_pÜt
, 
MC68681_STATUS
);

533 if(
ucLeStus
 & 
MC68681_RX_READY
) {

534 
cCh¬
 = (*
gReg
)(
pMC68681_pÜt
, 
MC68681_RX_BUFFER
);

535  ()
cCh¬
;

539 
	}
}

545 
MC68681_STATIC
 
	$mc68681_baud_¿
(

546 
mÜ
,

547 
baud
,

548 *
baud_mask_p
,

549 *
aü_b_p
,

550 *
commªd


553 
baud_mask
;

554 
aü_b
;

555 
¡©us
;

556 
is_exnded
;

557 
baud_»que¡ed
;

558 
mc68681_baud_bË_t
 *
baud_tbl
;

560 
baud_mask
 = 0;

561 
aü_b
 = 0;

562 
¡©us
 = 0;

564 ià(
CÚsÞe_PÜt_Tbl
[
mÜ
]->
ulD©aPÜt
 & 
MC68681_DATA_BAUD_RATE_SET_2
)

566 
aü_b
 = 1;

569 
is_exnded
 = 0;

571 
CÚsÞe_PÜt_Tbl
[
mÜ
]->
ulD©aPÜt
 & 
MC68681_XBRG_MASK
) {

572 
MC68681_XBRG_IGNORED
:

573 *
commªd
 = 0x00;

575 
MC68681_XBRG_ENABLED
:

576 *
commªd
 = 0x80;

577 
is_exnded
 = 1;

579 
MC68681_XBRG_DISABLED
:

580 *
commªd
 = 0x90;

584 
baud_»que¡ed
 = 
baud
 & 
CBAUD
;

585 ià(!
baud_»que¡ed
)

586 
baud_»que¡ed
 = 
B9600
;

588 
baud_»que¡ed
 = 
	`¹ems_rmios_baud_to_dex
( baud_requested );

590 
baud_tbl
 = (
mc68681_baud_bË_t
 *)

591 ((
u_t
)
CÚsÞe_PÜt_Tbl
[
mÜ
]->
ulClock
);

592 ià(!
baud_tbl
)

593 
	`¹ems_çl_rÜ_occu¼ed
(
RTEMS_INVALID_ADDRESS
);

595 iàÐ
is_exnded
 )

596 
baud_mask
 = ()
baud_tbl
[ 
aü_b
 + 2 ][ 
baud_»que¡ed
 ];

598 
baud_mask
 = 
baud_tbl
[ 
aü_b
 ][ 
baud_»que¡ed
 ];

600 iàÐ
baud_mask
 =ð
MC68681_BAUD_NOT_VALID
 )

601 
¡©us
 = -1;

607 *
baud_mask_p
 = (
baud_mask
 << 4) | baud_mask;

608 *
aü_b_p
 = 
aü_b
;

609  
¡©us
;

610 
	}
}

618 
MC68681_STATIC
 
	$mc68681_´oûss
(

619 
mÜ


622 
ut32_t
 
pMC68681
;

623 
ut32_t
 
pMC68681_pÜt
;

624 vÞ©
ut8_t
 
ucLeStus
;

625 vÞ©
ut8_t
 
ucISRStus
;

626 
cCh¬
;

627 
gRegi¡_f
 
gReg
;

629 
pMC68681
 = 
CÚsÞe_PÜt_Tbl
[
mÜ
]->
ulClPÜt1
;

630 
pMC68681_pÜt
 = 
CÚsÞe_PÜt_Tbl
[
mÜ
]->
ulClPÜt2
;

631 
gReg
 = 
CÚsÞe_PÜt_Tbl
[
mÜ
]->
gRegi¡
;

634 
ucISRStus
 = (*
gReg
)(
pMC68681
, 
MC68681_INTERRUPT_STATUS_REG
);

637 ià(
pMC68681
 !ð
pMC68681_pÜt
){

638 
ucISRStus
 >>= 4;

642 if(
CÚsÞe_PÜt_D©a
[
mÜ
].
bAùive
 =ð
FALSE
) {

643 
ucISRStus
 = ucISRStu & ~
MC68681_IR_TX_READY
;

649 
ue
) {

650 
ucLeStus
 = (*
gReg
)(
pMC68681_pÜt
, 
MC68681_STATUS
);

651 if(!(
ucLeStus
 & 
MC68681_RX_READY
)) {

657 iàÐ
ucLeStus
 & 
MC68681_RX_ERRORS
 ) {

659 
cCh¬
 = (*
gReg
)(
pMC68681_pÜt
, 
MC68681_RX_BUFFER
);

660 
ucLeStus
 = (*
gReg
)(
pMC68681_pÜt
, 
MC68681_STATUS
);

661 }  
ucLeStus
 & 
MC68681_RX_READY
 );

664 
cCh¬
 = (*
gReg
)(
pMC68681_pÜt
, 
MC68681_RX_BUFFER
);

665 
	`¹ems_rmios_queue_¿w_ch¬aùs
(

666 
CÚsÞe_PÜt_D©a
[
mÜ
].
rmios_d©a
,

667 &
cCh¬
,

676 ià(
ucISRStus
 & 
MC68681_IR_TX_READY
) {

677 ià(!
	`¹ems_rmios_dequeue_ch¬aùs
(

678 
CÚsÞe_PÜt_D©a
[
mÜ
].
rmios_d©a
, 1)) {

680 
CÚsÞe_PÜt_D©a
[
mÜ
].
bAùive
 = 
FALSE
;

681 
	`mc68681_abË_¼u±s
(
mÜ
, 
MC68681_IMR_ENABLE_ALL_EXCEPT_TX
);

684 
	}
}

694 
MC68681_STATIC
 
	$mc68681_bud_imr
(

695 
mÜ
,

696 
abË_æag


699 
m©e
;

700 
is_a
;

701 
mask
;

702 
m©e_mask
;

703 
pMC68681
;

704 
pMC68681_pÜt
;

705 
mc68681_cÚxt
 *
pmc68681CÚxt
;

706 
mc68681_cÚxt
 *
m©eCÚxt
;

708 
pMC68681
 = 
CÚsÞe_PÜt_Tbl
[
mÜ
]->
ulClPÜt1
;

709 
pMC68681_pÜt
 = 
CÚsÞe_PÜt_Tbl
[
mÜ
]->
ulClPÜt2
;

710 
pmc68681CÚxt
 = (
mc68681_cÚxt
 *è
CÚsÞe_PÜt_D©a
[
mÜ
].
pDeviûCÚxt
;

711 
m©e
 = 
pmc68681CÚxt
->mate;

713 
mask
 = 0;

714 
m©e_mask
 = 0;

716 
is_a
 = (
pMC68681
 =ð
pMC68681_pÜt
);

722 iàÐ
m©e
 != -1 ) {

723 
m©eCÚxt
 = 
CÚsÞe_PÜt_D©a
[
m©e
].
pDeviûCÚxt
;

725 ià(
m©eCÚxt
)

726 
m©e_mask
 = 
m©eCÚxt
->
imr
;

733 iàÐ
CÚsÞe_PÜt_Tbl
[
mÜ
]->
pDeviûFns
->
deviûOuutU£sIÁru±s
 )

734 
mask
 = 
abË_æag
;

736 
pmc68681CÚxt
->
imr
 = 
mask
;

742 ià(
is_a
)

743  (
m©e_mask
 << 4è| 
mask
;

745  (
mask
 << 4è| 
m©e_mask
;

746 
	}
}

754 
MC68681_STATIC
 
	$mc68681_abË_¼u±s
(

755 
mÜ
,

756 
imr_mask


759 
ut32_t
 
pMC68681
;

760 
£tRegi¡_f
 
£tReg
;

762 
pMC68681
 = 
CÚsÞe_PÜt_Tbl
[
mÜ
]->
ulClPÜt1
;

763 
£tReg
 = 
CÚsÞe_PÜt_Tbl
[
mÜ
]->
£tRegi¡
;

769 (*
£tReg
)(

770 
pMC68681
,

771 
MC68681_INTERRUPT_MASK_REG
,

772 
	`mc68681_bud_imr
(
mÜ
, 
imr_mask
)

774 
	}
}

	@src/libchip/serial/mc68681.h

11 #iâdeà
_MC68681_H_


12 
	#_MC68681_H_


	)

14 #ifdeà
__ýlu¥lus


24 
	#MC68681_STATUS
 1

	)

25 
	#MC68681_RX_BUFFER
 3

	)

27 
	#MC68681_MODE
 0

	)

28 
	#MC68681_CLOCK_SELECT
 1

	)

29 
	#MC68681_COMMAND
 2

	)

30 
	#MC68681_TX_BUFFER
 3

	)

39 
	#MC68681_DATA_BAUD_RATE_SET_1
 0

	)

40 
	#MC68681_DATA_BAUD_RATE_SET_2
 1

	)

42 
	#MC68681_XBRG_IGNORED
 (0 << 1)

	)

43 
	#MC68681_XBRG_ENABLED
 (1 << 1)

	)

44 
	#MC68681_XBRG_DISABLED
 (2 << 1)

	)

45 
	#MC68681_XBRG_MASK
 (3 << 1)

	)

51 
	tmc68681_baud_t
;

52 
mc68681_baud_t
 
	tmc68681_baud_bË_t
[
RTEMS_TERMIOS_NUMBER_BAUD_RATES
];

54 
	#MC68681_BAUD_NOT_VALID
 0xFF

	)

56 
mc68681_baud_t


57 
mc68681_baud_¿_bË
[4][
RTEMS_TERMIOS_NUMBER_BAUD_RATES
];

64 cÚ¡ 
cÚsÞe_âs
 
mc68681_âs
;

65 cÚ¡ 
cÚsÞe_âs
 
mc68681_âs_pÞËd
;

71 
ut8_t
 
mc68681_g_»gi¡
(

72 
u_t
 
ulClPÜt
,

73 
ut8_t
 
ucRegNum


76 
mc68681_£t_»gi¡
(

77 
u_t
 
ulClPÜt
,

78 
ut8_t
 
ucRegNum
,

79 
ut8_t
 
ucD©a


82 
ut8_t
 
mc68681_g_»gi¡_2
(

83 
u_t
 
ulClPÜt
,

84 
ut8_t
 
ucRegNum


87 
mc68681_£t_»gi¡_2
(

88 
u_t
 
ulClPÜt
,

89 
ut8_t
 
ucRegNum
,

90 
ut8_t
 
ucD©a


93 
ut8_t
 
mc68681_g_»gi¡_4
(

94 
u_t
 
ulClPÜt
,

95 
ut8_t
 
ucRegNum


98 
mc68681_£t_»gi¡_4
(

99 
u_t
 
ulClPÜt
,

100 
ut8_t
 
ucRegNum
,

101 
ut8_t
 
ucD©a


104 
ut8_t
 
mc68681_g_»gi¡_8
(

105 
u_t
 
ulClPÜt
,

106 
ut8_t
 
ucRegNum


109 
mc68681_£t_»gi¡_8
(

110 
u_t
 
ulClPÜt
,

111 
ut8_t
 
ucRegNum
,

112 
ut8_t
 
ucD©a


116 #ifdeà
__ýlu¥lus


	@src/libchip/serial/mc68681_baud.c

5 
	~<¹ems.h
>

6 
	~<libch/£rl.h
>

7 
	~<libch/mc68681.h
>

15 
mc68681_baud_t
 
	gmc68681_baud_¿_bË
[4][
RTEMS_TERMIOS_NUMBER_BAUD_RATES
] = {

17 
MC68681_BAUD_NOT_VALID
,

19 
MC68681_BAUD_NOT_VALID
,

22 
MC68681_BAUD_NOT_VALID
,

27 
MC68681_BAUD_NOT_VALID
,

31 
MC68681_BAUD_NOT_VALID
,

33 
MC68681_BAUD_NOT_VALID
,

34 
MC68681_BAUD_NOT_VALID
,

35 
MC68681_BAUD_NOT_VALID
,

36 
MC68681_BAUD_NOT_VALID


39 
MC68681_BAUD_NOT_VALID
,

40 
MC68681_BAUD_NOT_VALID
,

45 
MC68681_BAUD_NOT_VALID
,

54 
MC68681_BAUD_NOT_VALID
,

55 
MC68681_BAUD_NOT_VALID
,

56 
MC68681_BAUD_NOT_VALID
,

57 
MC68681_BAUD_NOT_VALID
,

58 
MC68681_BAUD_NOT_VALID


61 
MC68681_BAUD_NOT_VALID
,

62 
MC68681_BAUD_NOT_VALID
,

67 
MC68681_BAUD_NOT_VALID
,

68 
MC68681_BAUD_NOT_VALID
,

69 
MC68681_BAUD_NOT_VALID
,

70 
MC68681_BAUD_NOT_VALID
,

72 
MC68681_BAUD_NOT_VALID
,

76 
MC68681_BAUD_NOT_VALID
,

79 
MC68681_BAUD_NOT_VALID
,

80 
MC68681_BAUD_NOT_VALID


83 
MC68681_BAUD_NOT_VALID
,

85 
MC68681_BAUD_NOT_VALID
,

88 
MC68681_BAUD_NOT_VALID
,

90 
MC68681_BAUD_NOT_VALID
,

91 
MC68681_BAUD_NOT_VALID
,

92 
MC68681_BAUD_NOT_VALID
,

93 
MC68681_BAUD_NOT_VALID
,

94 
MC68681_BAUD_NOT_VALID
,

97 
MC68681_BAUD_NOT_VALID
,

101 
MC68681_BAUD_NOT_VALID
,

102 
MC68681_BAUD_NOT_VALID


	@src/libchip/serial/mc68681_p.h

11 #iâdeà
_MC68681_P_H_


12 
	#_MC68681_P_H_


	)

14 #ifdeà
__ýlu¥lus


23 
	#MC68681_STATIC


	)

31 
	#MC68681_MODE_REG_1A
 0

	)

32 
	#MC68681_MODE_REG_2A
 0

	)

34 
	#MC68681_COUNT_MODE_CURRENT_MSB
 6

	)

35 
	#MC68681_COUNTER_TIMER_UPPER_REG
 6

	)

36 
	#MC68681_COUNT_MODE_CURRENT_LSB
 7

	)

37 
	#MC68681_COUNTER_TIMER_LOWER_REG
 7

	)

38 
	#MC68681_INTERRUPT_VECTOR_REG
 12

	)

40 
	#MC68681_MODE_REG_1B
 8

	)

41 
	#MC68681_MODE_REG_2B
 8

	)

47 
	#MC68681_STATUS_REG_A
 1

	)

48 
	#MC68681_MASK_ISR_REG
 2

	)

49 
	#MC68681_RECEIVE_BUFFER_A
 3

	)

50 
	#MC68681_INPUT_PORT_CHANGE_REG
 4

	)

51 
	#MC68681_INTERRUPT_STATUS_REG
 5

	)

52 
	#MC68681_STATUS_REG_B
 9

	)

53 
	#MC68681_RECEIVE_BUFFER_B
 11

	)

54 
	#MC68681_INPUT_PORT
 13

	)

55 
	#MC68681_START_COUNT_CMD
 14

	)

56 
	#MC68681_STOP_COUNT_CMD
 15

	)

62 
	#MC68681_CLOCK_SELECT_REG_A
 1

	)

63 
	#MC68681_COMMAND_REG_A
 2

	)

64 
	#MC68681_TRANSMIT_BUFFER_A
 3

	)

65 
	#MC68681_AUX_CTRL_REG
 4

	)

66 
	#MC68681_INTERRUPT_MASK_REG
 5

	)

67 
	#MC68681_CLOCK_SELECT_REG_B
 9

	)

68 
	#MC68681_COMMAND_REG_B
 10

	)

69 
	#MC68681_TRANSMIT_BUFFER_B
 11

	)

70 
	#MC68681_OUTPUT_PORT_CONFIG_REG
 13

	)

71 
	#MC68681_OUTPUT_PORT_SET_REG
 14

	)

72 
	#MC68681_OUTPUT_PORT_RESET_BITS
 15

	)

80 
	#MC68681_MODE_REG_ENABLE_RX
 0x01

	)

81 
	#MC68681_MODE_REG_DISABLE_RX
 0x02

	)

82 
	#MC68681_MODE_REG_ENABLE_TX
 0x04

	)

83 
	#MC68681_MODE_REG_DISABLE_TX
 0x08

	)

84 
	#MC68681_MODE_REG_RESET_MR_PTR
 0x10

	)

85 
	#MC68681_MODE_REG_RESET_RX
 0x20

	)

86 
	#MC68681_MODE_REG_RESET_TX
 0x30

	)

87 
	#MC68681_MODE_REG_RESET_ERROR
 0x40

	)

88 
	#MC68681_MODE_REG_RESET_BREAK
 0x50

	)

89 
	#MC68681_MODE_REG_START_BREAK
 0x60

	)

90 
	#MC68681_MODE_REG_STOP_BREAK
 0x70

	)

91 
	#MC68681_MODE_REG_SET_RX_BRG
 0x80

	)

92 
	#MC68681_MODE_REG_CLEAR_RX_BRG
 0x90

	)

93 
	#MC68681_MODE_REG_SET_TX_BRG
 0xa0

	)

94 
	#MC68681_MODE_REG_CLEAR_TX_BRG
 0xb0

	)

95 
	#MC68681_MODE_REG_SET_STANDBY
 0xc0

	)

96 
	#MC68681_MODE_REG_SET_ACTIVE
 0xd0

	)

105 
	#MC68681_5BIT_CHARS
 0x00

	)

106 
	#MC68681_6BIT_CHARS
 0x01

	)

107 
	#MC68681_7BIT_CHARS
 0x02

	)

108 
	#MC68681_8BIT_CHARS
 0x03

	)

110 
	#MC68681_ODD_PARITY
 0x00

	)

111 
	#MC68681_EVEN_PARITY
 0x04

	)

113 
	#MC68681_WITH_PARITY
 0x00

	)

114 
	#MC68681_FORCE_PARITY
 0x08

	)

115 
	#MC68681_NO_PARITY
 0x10

	)

116 
	#MC68681_MULTI_DROP
 0x18

	)

118 
	#MC68681_ERR_MODE_CHAR
 0x00

	)

119 
	#MC68681_ERR_MODE_BLOCK
 0x20

	)

121 
	#MC68681_RX_INTR_RX_READY
 0x00

	)

122 
	#MC68681_RX_INTR_FFULL
 0x40

	)

124 
	#MC68681_NO_RX_RTS_CTL
 0x00

	)

125 
	#MC68681_RX_RTS_CTRL
 0x80

	)

134 
	#MC68681_STOP_BIT_LENGTH__563
 0x00

	)

135 
	#MC68681_STOP_BIT_LENGTH__625
 0x01

	)

136 
	#MC68681_STOP_BIT_LENGTH__688
 0x02

	)

137 
	#MC68681_STOP_BIT_LENGTH__75
 0x03

	)

138 
	#MC68681_STOP_BIT_LENGTH__813
 0x04

	)

139 
	#MC68681_STOP_BIT_LENGTH__875
 0x05

	)

140 
	#MC68681_STOP_BIT_LENGTH__938
 0x06

	)

141 
	#MC68681_STOP_BIT_LENGTH_1
 0x07

	)

142 
	#MC68681_STOP_BIT_LENGTH_1_563
 0x08

	)

143 
	#MC68681_STOP_BIT_LENGTH_1_625
 0x09

	)

144 
	#MC68681_STOP_BIT_LENGTH_1_688
 0x0a

	)

145 
	#MC68681_STOP_BIT_LENGTH_1_75
 0x0b

	)

146 
	#MC68681_STOP_BIT_LENGTH_1_813
 0x0c

	)

147 
	#MC68681_STOP_BIT_LENGTH_1_875
 0x0d

	)

148 
	#MC68681_STOP_BIT_LENGTH_1_938
 0x0e

	)

149 
	#MC68681_STOP_BIT_LENGTH_2
 0x0f

	)

151 
	#MC68681_CTS_ENABLE_TX
 0x10

	)

152 
	#MC68681_TX_RTS_CTRL
 0x20

	)

154 
	#MC68681_CHANNEL_MODE_NORMAL
 0x00

	)

155 
	#MC68681_CHANNEL_MODE_ECHO
 0x40

	)

156 
	#MC68681_CHANNEL_MODE_LOCAL_LOOP
 0x80

	)

157 
	#MC68681_CHANNEL_MODE_REMOTE_LOOP
 0xc0

	)

165 
	#MC68681_RX_READY
 0x01

	)

166 
	#MC68681_FFULL
 0x02

	)

167 
	#MC68681_TX_READY
 0x04

	)

168 
	#MC68681_TX_EMPTY
 0x08

	)

169 
	#MC68681_OVERRUN_ERROR
 0x10

	)

170 
	#MC68681_PARITY_ERROR
 0x20

	)

171 
	#MC68681_FRAMING_ERROR
 0x40

	)

172 
	#MC68681_RECEIVED_BREAK
 0x80

	)

174 
	#MC68681_RX_ERRORS
 \

175 (
MC68681_OVERRUN_ERROR
|
MC68681_PARITY_ERROR
| \

176 
MC68681_FRAMING_ERROR
|
MC68681_RECEIVED_BREAK
)

	)

191 
	#MC68681_IR_TX_READY
 0x01

	)

192 
	#MC68681_IR_RX_READY
 0x02

	)

193 
	#MC68681_IR_BREAK
 0x04

	)

194 
	#MC68681_IMR_ENABLE_ALL
 0x07

	)

195 
	#MC68681_IMR_DISABLE_ALL
 0x00

	)

196 
	#MC68681_IMR_ENABLE_ALL_EXCEPT_TX
 0x06

	)

198 
	#MC68681_IR_TX_READY_A
 0x01

	)

199 
	#MC68681_IR_RX_READY_A
 0x02

	)

200 
	#MC68681_IR_BREAK_A
 0x04

	)

201 
	#MC68681_IR_COUNTER_READY
 0x08

	)

202 
	#MC68681_IR_TX_READY_B
 0x10

	)

203 
	#MC68681_IR_RX_READY_B
 0x20

	)

204 
	#MC68681_IR_BREAK_B
 0x40

	)

205 
	#MC68681_IR_INPUT_PORT_CHANGE
 0x80

	)

213 
	#MC68681_STATUS_RXRDY
 0x01

	)

214 
	#MC68681_STATUS_FFULL
 0x02

	)

215 
	#MC68681_STATUS_TXRDY
 0x04

	)

216 
	#MC68681_STATUS_TXEMT
 0x08

	)

217 
	#MC68681_STATUS_OVERRUN_ERROR
 0x10

	)

218 
	#MC68681_STATUS_PARITY_ERROR
 0x20

	)

219 
	#MC68681_STATUS_FRAMING_ERROR
 0x40

	)

220 
	#MC68681_STATUS_RECEIVED_BREAK
 0x80

	)

228 
	#MC68681_INTERRUPT_VECTOR_INIT
 0x0f

	)

236 
	#MC68681_AUX_BRG_SET1
 0x00

	)

237 
	#MC68681_AUX_BRG_SET2
 0x80

	)

243 
	s_mc68681_cÚxt


245 
m©e
;

246 
imr
;

247 } 
	tmc68681_cÚxt
;

252 
MC68681_STATIC
 
mc68681_lize_cÚxt
(

253 
mÜ
,

254 
mc68681_cÚxt
 *
pmc68681CÚxt


257 
MC68681_STATIC
 
boÞ
 
mc68681_´obe
(
mÜ
);

259 
MC68681_STATIC
 
mc68681_£t_©ibus
(

260 
mÜ
,

261 cÚ¡ 
rmios
 *
t


264 
MC68681_STATIC
 
mc68681_
(
mÜ
);

266 
MC68681_STATIC
 
mc68681_Ý
(

267 
majÜ
,

268 
mÜ
,

269 * 
¬g


272 
MC68681_STATIC
 
mc68681_þo£
(

273 
majÜ
,

274 
mÜ
,

275 * 
¬g


278 
MC68681_STATIC
 
mc68681_wre_pÞËd
(

279 
mÜ
,

280 
cCh¬


283 
MC68681_STATIC
 
mc68681_lize_¼u±s
(
mÜ
);

285 
MC68681_STATIC
 
ssize_t
 
mc68681_wre_suµÜt_t
(

286 
mÜ
,

287 cÚ¡ *
buf
,

288 
size_t
 
Ën


291 
MC68681_STATIC
 
ssize_t
 
mc68681_wre_suµÜt_pÞËd
(

292 
mÜ
,

293 cÚ¡ *
buf
,

294 
size_t
 
Ën


297 
MC68681_STATIC
 
mc68681_by_nÚblockg_pÞËd
(

298 
mÜ


301 
MC68681_STATIC
 
mc68681_bud_imr
(

302 
mÜ
,

303 
abË_æag


306 
MC68681_STATIC
 
mc68681_´oûss
(

307 
mÜ


310 
MC68681_STATIC
 
mc68681_abË_¼u±s
(

311 
mÜ
,

312 
imr_mask


315 
MC68681_STATIC
 
¹ems_i¤
 
mc68681_i¤
(

316 
¹ems_veùÜ_numb
 
veùÜ


319 #ifdeà
__ýlu¥lus


	@src/libchip/serial/mc68681_reg.c

16 
	~<¹ems.h
>

18 
	~<libch/£rl.h
>

19 
	~<libch/mc68681.h
>

21 #iâdeà
_MC68681_MULTIPLIER


22 
	#_MC68681_MULTIPLIER
 1

	)

23 
	#_MC68681_NAME
(
_X
è
	)
_X

24 
	#_MC68681_TYPE
 
ut8_t


	)

27 
	#CALCULATE_REGISTER_ADDRESS
Ð
_ba£
, 
_»g
 ) \

28 (
_MC68681_TYPE
 *)((
_ba£
è+ ((
_»g
è* 
_MC68681_MULTIPLIER
 ))

	)

34 
ut8_t
 
	$_MC68681_NAME
(
mc68681_g_»gi¡
)(

35 
u_t
 
ulClPÜt
,

36 
ut8_t
 
ucRegNum


39 
_MC68681_TYPE
 *
pÜt
;

41 
pÜt
 = 
	`CALCULATE_REGISTER_ADDRESS
Ð
ulClPÜt
, 
ucRegNum
 );

43  *
pÜt
;

44 
	}
}

50 
	$_MC68681_NAME
(
mc68681_£t_»gi¡
)(

51 
u_t
 
ulClPÜt
,

52 
ut8_t
 
ucRegNum
,

53 
ut8_t
 
ucD©a


56 
_MC68681_TYPE
 *
pÜt
;

58 
pÜt
 = 
	`CALCULATE_REGISTER_ADDRESS
Ð
ulClPÜt
, 
ucRegNum
 );

60 *
pÜt
 = 
ucD©a
;

61 
	}
}

	@src/libchip/serial/mc68681_reg2.c

16 
	#_MC68681_MULTIPLIER
 2

	)

17 
	#_MC68681_NAME
(
_X
è_X##
_2


	)

18 
	#_MC68681_TYPE
 
ut8_t


	)

20 
	~"mc68681_»g.c
"

	@src/libchip/serial/mc68681_reg4.c

16 
	#_MC68681_MULTIPLIER
 4

	)

17 
	#_MC68681_NAME
(
_X
è_X##
_4


	)

18 
	#_MC68681_TYPE
 
ut8_t


	)

20 
	~"mc68681_»g.c
"

	@src/libchip/serial/mc68681_reg8.c

16 
	#_MC68681_MULTIPLIER
 8

	)

17 
	#_MC68681_NAME
(
_X
è_X##
_8


	)

18 
	#_MC68681_TYPE
 
ut8_t


	)

20 
	~"mc68681_»g.c
"

	@src/libchip/serial/ns16550-context.c

33 
	~<¡dlib.h
>

35 
	~<¹ems/b¥Io.h
>

37 
	~<b¥.h
>

39 
	~"ns16550.h
"

40 
	~"ns16550_p.h
"

42 #ià
defed
(
BSP_FEATURE_IRQ_EXTENSION
)

43 
	~<b¥/q.h
>

44 #ià
defed
(
BSP_FEATURE_IRQ_LEGACY
)

45 
	~<b¥/q.h
>

46 #ià
defed
(
__PPC__
è|| defed(
__i386__
)

47 
	~<b¥/q.h
>

48 
	#BSP_FEATURE_IRQ_LEGACY


	)

49 #ifdeà
BSP_SHARED_HANDLER_SUPPORT


50 
	#BSP_FEATURE_IRQ_LEGACY_SHARED_HANDLER_SUPPORT


	)

54 
ut32_t
 
	$NS16550_GBaudDivisÜ
(
ns16550_cÚxt
 *
ùx
, 
ut32_t
 
baud
)

56 
ut32_t
 
þock
 = 
ùx
->clock;

57 
ut32_t
 
baudDivisÜ
 = (
þock
 !ð0 ? clock : 115200è/ (
baud
 * 16);

59 ià(
ùx
->
has_äaùiÚ®_divid_»gi¡
) {

60 
ut32_t
 
äaùiÚ®Divid
 = 0x10;

61 
ut32_t
 
r
 = 
baud
;

62 
ut32_t
 
mulV®
;

63 
ut32_t
 
divAddV®
;

65 
þock
 /ð16 * 
baudDivisÜ
;

66 
mulV®
 = 1; mulVal < 16; ++mulVal) {

67 
divAddV®
 = 0; divAddV® < 
mulV®
; ++divAddVal) {

68 
ut32_t
 
aùu®
 = (
mulV®
 * 
þock
è/ (mulV® + 
divAddV®
);

69 
ut32_t
 
ÃwE¼
 = 
aùu®
 > 
baud
 ?ctual - baud : baud -ctual;

71 ià(
ÃwE¼
 < 
r
) {

72 
r
 = 
ÃwE¼
;

73 
äaùiÚ®Divid
 = (
mulV®
 << 4è| 
divAddV®
;

78 (*
ùx
->
£t_»g
)(

79 
ùx
->
pÜt
,

80 
NS16550_FRACTIONAL_DIVIDER
,

81 
äaùiÚ®Divid


85  
baudDivisÜ
;

86 
	}
}

93 
	$ns16550_abË_¼u±s
(

94 
ns16550_cÚxt
 *
ùx
,

95 
mask


98 (*
ùx
->
£t_»g
)(ùx->
pÜt
, 
NS16550_INTERRUPT_ENABLE
, 
mask
);

99 
	}
}

101 
	$ns16550_þr_ªd_£t_¼u±s
(

102 
ns16550_cÚxt
 *
ùx
,

103 
ut8_t
 
þr
,

104 
ut8_t
 
£t


107 
¹ems_¼u±_lock_cÚxt
 
lock_cÚxt
;

108 
ns16550_g_»g
 
g_»g
 = 
ùx
->get_reg;

109 
ns16550_£t_»g
 
£t_»g
 = 
ùx
->set_reg;

110 
u_t
 
pÜt
 = 
ùx
->port;

111 
ut8_t
 
v®
;

113 
	`¹ems_rmios_deviû_lock_acque
(&
ùx
->
ba£
, &
lock_cÚxt
);

114 
v®
 = (*
g_»g
)(
pÜt
, 
NS16550_INTERRUPT_ENABLE
);

115 
v®
 &ð~
þr
;

116 
v®
 |ð
£t
;

117 (*
£t_»g
)(
pÜt
, 
NS16550_INTERRUPT_ENABLE
, 
v®
);

118 
	`¹ems_rmios_deviû_lock_»Ëa£
(&
ùx
->
ba£
, &
lock_cÚxt
);

119 
	}
}

125 
boÞ
 
	$ns16550_´obe
(
¹ems_rmios_deviû_cÚxt
 *
ba£
)

127 
ns16550_cÚxt
 *
ùx
 = (ns16550_cÚx*è
ba£
;

128 
u_t
 
pNS16550
;

129 
ut8_t
 
ucD©aBy
;

130 
ut32_t
 
ulBaudDivisÜ
;

131 
ns16550_£t_»g
 
£tReg
;

132 
ns16550_g_»g
 
gReg
;

134 
ùx
->
modem_cÚÞ
 = 
SP_MODEM_IRQ
;

136 
pNS16550
 = 
ùx
->
pÜt
;

137 
£tReg
 = 
ùx
->
£t_»g
;

138 
gReg
 = 
ùx
->
g_»g
;

145 (*
£tReg
)(
pNS16550
, 
NS16550_LINE_CONTROL
, 0x0);

146 
	`ns16550_abË_¼u±s
(
ùx
, 
NS16550_DISABLE_ALL_INTR
 );

150 
ulBaudDivisÜ
 = 
	`NS16550_GBaudDivisÜ
(
ùx
, ctx->
l_baud
);

151 
ucD©aBy
 = 
SP_LINE_DLAB
;

152 (*
£tReg
)(
pNS16550
, 
NS16550_LINE_CONTROL
, 
ucD©aBy
);

155 (*
£tReg
)(
pNS16550
,
NS16550_TRANSMIT_BUFFER
,(
ut8_t
)(
ulBaudDivisÜ
 & 0xffU));

156 (*
£tReg
)(

157 
pNS16550
,
NS16550_INTERRUPT_ENABLE
,

158 (
ut8_t
)(Ð
ulBaudDivisÜ
 >> 8 ) & 0xffU )

163 
ucD©aBy
 = 
EIGHT_BITS
;

164 (*
£tReg
)(
pNS16550
, 
NS16550_LINE_CONTROL
, 
ucD©aBy
);

167 
ucD©aBy
 = 
SP_FIFO_ENABLE
;

168 (*
£tReg
)(
pNS16550
, 
NS16550_FIFO_CONTROL
, 
ucD©aBy
);

170 
ucD©aBy
 = 
SP_FIFO_ENABLE
 | 
SP_FIFO_RXRST
 | 
SP_FIFO_TXRST
;

171 (*
£tReg
)(
pNS16550
, 
NS16550_FIFO_CONTROL
, 
ucD©aBy
);

173 
	`ns16550_abË_¼u±s
(
ùx
, 
NS16550_DISABLE_ALL_INTR
);

177 (*
£tReg
)(
pNS16550
, 
NS16550_MODEM_CONTROL
,
ùx
->
modem_cÚÞ
);

179 (*
gReg
)(
pNS16550
, 
NS16550_LINE_STATUS
 );

180 (*
gReg
)(
pNS16550
, 
NS16550_RECEIVE_BUFFER
 );

182  
ue
;

183 
	}
}

185 
size_t
 
	$ns16550_wre_to_fifo
(

186 cÚ¡ 
ns16550_cÚxt
 *
ùx
,

187 cÚ¡ *
buf
,

188 
size_t
 
Ën


191 
ut32_t
 
pÜt
 = 
ùx
->port;

192 
ns16550_£t_»g
 
£t
 = 
ùx
->
£t_»g
;

193 
size_t
 
out
 = 
Ën
 > 
SP_FIFO_SIZE
 ? SP_FIFO_SIZE :en;

194 
size_t
 
i
;

196 
i
 = 0; i < 
out
; ++i) {

197 (*
£t
)(
pÜt
, 
NS16550_TRANSMIT_BUFFER
, 
buf
[
i
]);

200  
out
;

201 
	}
}

206 
	$ns16550_i¤
(*
¬g
)

208 
¹ems_rmios_y
 *
y
 = 
¬g
;

209 
ns16550_cÚxt
 *
ùx
 = 
	`¹ems_rmios_g_deviû_cÚxt
(
y
);

210 
ut32_t
 
pÜt
 = 
ùx
->port;

211 
ns16550_g_»g
 
g
 = 
ùx
->
g_»g
;

212 
i
 = 0;

213 
buf
 [
SP_FIFO_SIZE
];

218 
i
 = 0; i < 
SP_FIFO_SIZE
; ++i) {

219 ià((
	`g
Ð
pÜt
, 
NS16550_LINE_STATUS
è& 
SP_LSR_RDY
) != 0) {

220 
buf
 [
i
] = (è
	`g
(
pÜt
, 
NS16550_RECEIVE_BUFFER
);

227 
	`¹ems_rmios_queue_¿w_ch¬aùs
(
y
, 
buf
, 
i
);

230 ià(
ùx
->
out_tÙ®
 > 0

231 && (
	`g
(
pÜt
, 
NS16550_LINE_STATUS
è& 
SP_LSR_THOLD
) != 0) {

232 
size_t
 
cu¼t
 = 
ùx
->
out_cu¼t
;

234 
ùx
->
out_buf
 +ð
cu¼t
;

235 
ùx
->
out_»mag
 -ð
cu¼t
;

237 ià(
ùx
->
out_»mag
 > 0) {

238 
ùx
->
out_cu¼t
 =

239 
	`ns16550_wre_to_fifo
(
ùx
, ctx->
out_buf
, ctx->
out_»mag
);

241 
	`¹ems_rmios_dequeue_ch¬aùs
(
y
, 
ùx
->
out_tÙ®
);

244 } (
	`g
Ð
pÜt
, 
NS16550_INTERRUPT_ID
è& 
SP_IID_0
) == 0);

245 
	}
}

247 
	$ns16550_i¤_sk
(*
¬g
)

249 
¹ems_rmios_y
 *
y
 = 
¬g
;

250 
ns16550_cÚxt
 *
ùx
 = 
	`¹ems_rmios_g_deviû_cÚxt
(
y
);

251 
ut8_t
 
¡©us
 = (*
ùx
->
g_»g
)(ùx->
pÜt
, 
NS16550_LINE_STATUS
);

253 ià((
¡©us
 & 
SP_LSR_RDY
) != 0) {

254 
	`ns16550_þr_ªd_£t_¼u±s
(
ùx
, 
SP_INT_RX_ENABLE
, 0);

255 
	`¹ems_rmios_rxq_occu»d
(
y
);

258 ià(
ùx
->
out_tÙ®
 > 0 && (
¡©us
 & 
SP_LSR_THOLD
) != 0) {

259 
size_t
 
cu¼t
 = 
ùx
->
out_cu¼t
;

261 
ùx
->
out_buf
 +ð
cu¼t
;

262 
ùx
->
out_»mag
 -ð
cu¼t
;

264 ià(
ùx
->
out_»mag
 > 0) {

265 
ùx
->
out_cu¼t
 =

266 
	`ns16550_wre_to_fifo
(
ùx
, ctx->
out_buf
, ctx->
out_»mag
);

268 
size_t
 
dÚe
 = 
ùx
->
out_tÙ®
;

270 
ùx
->
out_tÙ®
 = 0;

271 
	`ns16550_þr_ªd_£t_¼u±s
(
ùx
, 
SP_INT_TX_ENABLE
, 0);

272 
	`¹ems_rmios_dequeue_ch¬aùs
(
y
, 
dÚe
);

275 
	}
}

277 
	$ns16550_»ad_sk
(
¹ems_rmios_deviû_cÚxt
 *
ba£
)

279 
ns16550_cÚxt
 *
ùx
 = (ns16550_cÚx*è
ba£
;

280 
ut32_t
 
pÜt
 = 
ùx
->port;

281 
ns16550_g_»g
 
g
 = 
ùx
->
g_»g
;

282 
buf
[
SP_FIFO_SIZE
];

283 
i
;

285 
i
 = 0; i < 
SP_FIFO_SIZE
; ++i) {

286 ià((
	`g
(
pÜt
, 
NS16550_LINE_STATUS
è& 
SP_LSR_RDY
) != 0) {

287 
buf
[
i
] = (è
	`g
(
pÜt
, 
NS16550_RECEIVE_BUFFER
);

293 
	`¹ems_rmios_queue_¿w_ch¬aùs
(
ùx
->
y
, 
buf
, 
i
);

294 
	`ns16550_þr_ªd_£t_¼u±s
(
ùx
, 0, 
SP_INT_RX_ENABLE
);

297 
	}
}

304 
ns16550_lize_¼u±s
(

305 
¹ems_rmios_y
 *
y
,

306 
ns16550_cÚxt
 *
ùx
,

307 (*
i¤
)(*)

310 #ifdeà
BSP_FEATURE_IRQ_EXTENSION


312 
¹ems_¡©us_code
 
sc
 = 
RTEMS_SUCCESSFUL
;

313 
sc
 = 
	`¹ems_¼u±_hªdËr_¡®l
(

314 
ùx
->
q
,

316 
RTEMS_INTERRUPT_SHARED
,

317 
i¤
,

318 
y


320 ià(
sc
 !ð
RTEMS_SUCCESSFUL
) {

322 
	`´tk
Ð"%s: E¼Ü: In¡®È¼u± hªdËr\n", 
__func__
);

323 
	`¹ems_çl_rÜ_occu¼ed
( 0xdeadbeef);

326 #ià
	`defed
(
BSP_FEATURE_IRQ_LEGACY
)

328 
rv
 = 0;

329 #ifdeà
BSP_FEATURE_IRQ_LEGACY_SHARED_HANDLER_SUPPORT


330 
¹ems_q_cÚÃù_d©a
 
cd
 = {

331 
ùx
->
q
,

332 
i¤
,

333 
y
,

334 
NULL
,

335 
NULL
,

336 
NULL
,

337 
NULL


339 
rv
 = 
	`BSP_¡®l_¹ems_sh¬ed_q_hªdËr
Ð&
cd
);

341 
¹ems_q_cÚÃù_d©a
 
cd
 = {

342 
ùx
->
q
,

343 
i¤
,

344 
y
,

345 
NULL
,

346 
NULL
,

347 
NULL


349 
rv
 = 
	`BSP_¡®l_¹ems_q_hªdËr
Ð&
cd
);

351 ià(
rv
 == 0) {

353 
	`´tk
Ð"%s: E¼Ü: In¡®È¼u± hªdËr\n", 
__func__
);

354 
	`¹ems_çl_rÜ_occu¼ed
( 0xdeadbeef);

358 
	}
}

364 
boÞ
 
	$ns16550_Ý
(

365 
¹ems_rmios_y
 *
y
,

366 
¹ems_rmios_deviû_cÚxt
 *
ba£
,

367 
rmios
 *
rm
,

368 
¹ems_libio_Ý_þo£_¬gs_t
 *
¬gs


371 
ns16550_cÚxt
 *
ùx
 = (ns16550_cÚx*è
ba£
;

373 
ùx
->
y
 =ty;

376 
	`¹ems_rmios_£t_l_baud
(
y
, 
ùx
->
l_baud
);

378 ià(
y
->
hªdËr
.
mode
 =ð
TERMIOS_IRQ_DRIVEN
) {

379 
	`ns16550_lize_¼u±s
(
y
, 
ùx
, 
ns16550_i¤
);

380 
	`ns16550_abË_¼u±s
(
ùx
, 
NS16550_ENABLE_ALL_INTR_EXCEPT_TX
);

381 } ià(
y
->
hªdËr
.
mode
 =ð
TERMIOS_TASK_DRIVEN
) {

382 
	`ns16550_lize_¼u±s
(
y
, 
ùx
, 
ns16550_i¤_sk
);

383 
	`ns16550_abË_¼u±s
(
ùx
, 
NS16550_ENABLE_ALL_INTR_EXCEPT_TX
);

386  
ue
;

387 
	}
}

389 
ns16550_þnup_¼u±s
(

390 
¹ems_rmios_y
 *
y
,

391 
ns16550_cÚxt
 *
ùx
,

392 (*
i¤
)(*)

395 #ià
	`defed
(
BSP_FEATURE_IRQ_EXTENSION
)

396 
¹ems_¡©us_code
 
sc
 = 
RTEMS_SUCCESSFUL
;

397 
sc
 = 
	`¹ems_¼u±_hªdËr_»move
(

398 
ùx
->
q
,

399 
i¤
,

400 
y


402 ià(
sc
 !ð
RTEMS_SUCCESSFUL
) {

404 
	`´tk
("%s: E¼Ü: Remov¼u± hªdËr\n", 
__func__
);

405 
	`¹ems_çl_rÜ_occu¼ed
(0xdeadbeef);

407 #ià
	`defed
(
BSP_FEATURE_IRQ_LEGACY
)

408 
rv
 = 0;

409 
¹ems_q_cÚÃù_d©a
 
cd
 = {

410 .
Çme
 = 
ùx
->
q
,

411 .
hdl
 = 
i¤
,

412 .
hªdË
 = 
y


414 
rv
 = 
	`BSP_»move_¹ems_q_hªdËr
(&
cd
);

415 ià(
rv
 == 0) {

417 
	`´tk
("%s: E¼Ü: Remov¼u± hªdËr\n", 
__func__
);

418 
	`¹ems_çl_rÜ_occu¼ed
(0xdeadbeef);

421 
	}
}

427 
	$ns16550_þo£
(

428 
¹ems_rmios_y
 *
y
,

429 
¹ems_rmios_deviû_cÚxt
 *
ba£
,

430 
¹ems_libio_Ý_þo£_¬gs_t
 *
¬gs


433 
ns16550_cÚxt
 *
ùx
 = (ns16550_cÚx*è
ba£
;

435 
	`ns16550_abË_¼u±s
(
ùx
, 
NS16550_DISABLE_ALL_INTR
);

437 ià(
y
->
hªdËr
.
mode
 =ð
TERMIOS_IRQ_DRIVEN
) {

438 
	`ns16550_þnup_¼u±s
(
y
, 
ùx
, 
ns16550_i¤
);

439 } ià(
y
->
hªdËr
.
mode
 =ð
TERMIOS_TASK_DRIVEN
) {

440 
	`ns16550_þnup_¼u±s
(
y
, 
ùx
, 
ns16550_i¤_sk
);

442 
	}
}

447 
	$ns16550_pÞËd_putch¬
(
¹ems_rmios_deviû_cÚxt
 *
ba£
, 
out
)

449 
ns16550_cÚxt
 *
ùx
 = (ns16550_cÚx*è
ba£
;

450 
u_t
 
pÜt
 = 
ùx
->port;

451 
ns16550_g_»g
 
g
 = 
ùx
->
g_»g
;

452 
ns16550_£t_»g
 
£t
 = 
ùx
->
£t_»g
;

453 
ut32_t
 
¡©us
 = 0;

454 
¹ems_¼u±_lock_cÚxt
 
lock_cÚxt
;

457 
ut32_t
 
¼u±_mask
 = 
	`g
Ð
pÜt
, 
NS16550_INTERRUPT_ENABLE
);

460 
	`ns16550_abË_¼u±s
(
ùx
, 
NS16550_DISABLE_ALL_INTR
);

462 
ue
) {

464 
	`¹ems_rmios_deviû_lock_acque
(&
ùx
->
ba£
, &
lock_cÚxt
);

467 
¡©us
 = 
	`g
Ð
pÜt
, 
NS16550_LINE_STATUS
);

468 ià((
¡©us
 & 
SP_LSR_THOLD
) != 0) {

470 
	`£t
Ð
pÜt
, 
NS16550_TRANSMIT_BUFFER
, 
out
);

473 
	`¹ems_rmios_deviû_lock_»Ëa£
(&
ùx
->
ba£
, &
lock_cÚxt
);

476 
	`¹ems_rmios_deviû_lock_»Ëa£
(&
ùx
->
ba£
, &
lock_cÚxt
);

481 
¡©us
 = 
	`g
Ð
pÜt
, 
NS16550_LINE_STATUS
);

482 } (
¡©us
 & 
SP_LSR_THOLD
) == 0);

486 
	`£t
Ð
pÜt
, 
NS16550_INTERRUPT_ENABLE
, 
¼u±_mask
);

487 
	}
}

497 
	$ns16550_as£¹_RTS
(
¹ems_rmios_deviû_cÚxt
 *
ba£
)

499 
ns16550_cÚxt
 *
ùx
 = (ns16550_cÚx*è
ba£
;

500 
¹ems_¼u±_lock_cÚxt
 
lock_cÚxt
;

505 
	`¹ems_rmios_deviû_lock_acque
(
ba£
, &
lock_cÚxt
);

506 
ùx
->
modem_cÚÞ
 |ð
SP_MODEM_RTS
;

507 (*
ùx
->
£t_»g
)(ùx->
pÜt
, 
NS16550_MODEM_CONTROL
, ctx->
modem_cÚÞ
);

508 
	`¹ems_rmios_deviû_lock_»Ëa£
(
ba£
, &
lock_cÚxt
);

509 
	}
}

515 
	$ns16550_Ãg©e_RTS
(
¹ems_rmios_deviû_cÚxt
 *
ba£
)

517 
ns16550_cÚxt
 *
ùx
 = (ns16550_cÚx*è
ba£
;

518 
¹ems_¼u±_lock_cÚxt
 
lock_cÚxt
;

523 
	`¹ems_rmios_deviû_lock_acque
(
ba£
, &
lock_cÚxt
);

524 
ùx
->
modem_cÚÞ
 &ð~
SP_MODEM_RTS
;

525 (*
ùx
->
£t_»g
)(ùx->
pÜt
, 
NS16550_MODEM_CONTROL
, ctx->
modem_cÚÞ
);

526 
	`¹ems_rmios_deviû_lock_»Ëa£
(
ba£
, &
lock_cÚxt
);

527 
	}
}

538 
	$ns16550_as£¹_DTR
(
¹ems_rmios_deviû_cÚxt
 *
ba£
)

540 
ns16550_cÚxt
 *
ùx
 = (ns16550_cÚx*è
ba£
;

541 
¹ems_¼u±_lock_cÚxt
 
lock_cÚxt
;

546 
	`¹ems_rmios_deviû_lock_acque
(
ba£
, &
lock_cÚxt
);

547 
ùx
->
modem_cÚÞ
 |ð
SP_MODEM_DTR
;

548 (*
ùx
->
£t_»g
)(ùx->
pÜt
, 
NS16550_MODEM_CONTROL
, ctx->
modem_cÚÞ
);

549 
	`¹ems_rmios_deviû_lock_»Ëa£
(
ba£
, &
lock_cÚxt
);

550 
	}
}

556 
	$ns16550_Ãg©e_DTR
(
¹ems_rmios_deviû_cÚxt
 *
ba£
)

558 
ns16550_cÚxt
 *
ùx
 = (ns16550_cÚx*è
ba£
;

559 
¹ems_¼u±_lock_cÚxt
 
lock_cÚxt
;

564 
	`¹ems_rmios_deviû_lock_acque
(
ba£
, &
lock_cÚxt
);

565 
ùx
->
modem_cÚÞ
 &=~
SP_MODEM_DTR
;

566 (*
ùx
->
£t_»g
)(ùx->
pÜt
, 
NS16550_MODEM_CONTROL
,ùx->
modem_cÚÞ
);

567 
	`¹ems_rmios_deviû_lock_»Ëa£
(
ba£
, &
lock_cÚxt
);

568 
	}
}

577 
boÞ
 
	$ns16550_£t_©ibus
(

578 
¹ems_rmios_deviû_cÚxt
 *
ba£
,

579 cÚ¡ 
rmios
 *
t


582 
ns16550_cÚxt
 *
ùx
 = (ns16550_cÚx*è
ba£
;

583 
ut32_t
 
pNS16550
;

584 
ut32_t
 
ulBaudDivisÜ
;

585 
ut8_t
 
ucLeCÚÞ
;

586 
ut32_t
 
baud_»que¡ed
;

587 
ns16550_£t_»g
 
£tReg
;

588 
¹ems_¼u±_lock_cÚxt
 
lock_cÚxt
;

590 
pNS16550
 = 
ùx
->
pÜt
;

591 
£tReg
 = 
ùx
->
£t_»g
;

599 
baud_»que¡ed
 = 
	`¹ems_rmios_baud_to_numb
(
t
->
c_cæag
);

600 
	`_As£¹
Ð
baud_»que¡ed
 != 0 );

602 
ulBaudDivisÜ
 = 
	`NS16550_GBaudDivisÜ
(
ùx
, 
baud_»que¡ed
);

604 
ucLeCÚÞ
 = 0;

610 ià(
t
->
c_cæag
 & 
PARENB
) {

611 
ucLeCÚÞ
 |ð
SP_LINE_PAR
;

612 ià(!(
t
->
c_cæag
 & 
PARODD
))

613 
ucLeCÚÞ
 |ð
SP_LINE_ODD
;

620 ià(
t
->
c_cæag
 & 
CSIZE
) {

621 
t
->
c_cæag
 & 
CSIZE
) {

622 
CS5
: 
ucLeCÚÞ
 |ð
FIVE_BITS
; ;

623 
CS6
: 
ucLeCÚÞ
 |ð
SIX_BITS
; ;

624 
CS7
: 
ucLeCÚÞ
 |ð
SEVEN_BITS
; ;

625 
CS8
: 
ucLeCÚÞ
 |ð
EIGHT_BITS
; ;

628 
ucLeCÚÞ
 |ð
EIGHT_BITS
;

635 ià(
t
->
c_cæag
 & 
CSTOPB
) {

636 
ucLeCÚÞ
 |ð
SP_LINE_STOP
;

645 
	`¹ems_rmios_deviû_lock_acque
(
ba£
, &
lock_cÚxt
);

655 (*
£tReg
)(
pNS16550
, 
NS16550_LINE_CONTROL
, 
SP_LINE_DLAB
);

656 (*
£tReg
)(
pNS16550
, 
NS16550_TRANSMIT_BUFFER
, 
ulBaudDivisÜ
&0xff);

657 (*
£tReg
)(
pNS16550
, 
NS16550_INTERRUPT_ENABLE
, (
ulBaudDivisÜ
>>8)&0xff);

662 (*
£tReg
)(
pNS16550
, 
NS16550_LINE_CONTROL
, 
ucLeCÚÞ
 );

664 
	`¹ems_rmios_deviû_lock_»Ëa£
(
ba£
, &
lock_cÚxt
);

666  
ue
;

667 
	}
}

678 
	$ns16550_wre_suµÜt_t
(

679 
¹ems_rmios_deviû_cÚxt
 *
ba£
,

680 cÚ¡ *
buf
,

681 
size_t
 
Ën


684 
ns16550_cÚxt
 *
ùx
 = (ns16550_cÚx*è
ba£
;

686 
ùx
->
out_tÙ®
 = 
Ën
;

688 ià(
Ën
 > 0) {

689 
ùx
->
out_»mag
 = 
Ën
;

690 
ùx
->
out_buf
 = 
buf
;

691 
ùx
->
out_cu¼t
 = 
	`ns16550_wre_to_fifo
(ùx, 
buf
, 
Ën
);

693 
	`ns16550_abË_¼u±s
(
ùx
, 
NS16550_ENABLE_ALL_INTR
);

695 
	`ns16550_abË_¼u±s
(
ùx
, 
NS16550_ENABLE_ALL_INTR_EXCEPT_TX
);

697 
	}
}

699 
	$ns16550_wre_suµÜt_sk
(

700 
¹ems_rmios_deviû_cÚxt
 *
ba£
,

701 cÚ¡ *
buf
,

702 
size_t
 
Ën


705 
ns16550_cÚxt
 *
ùx
 = (ns16550_cÚx*è
ba£
;

707 
ùx
->
out_tÙ®
 = 
Ën
;

709 ià(
Ën
 > 0) {

710 
ùx
->
out_»mag
 = 
Ën
;

711 
ùx
->
out_buf
 = 
buf
;

712 
ùx
->
out_cu¼t
 = 
	`ns16550_wre_to_fifo
(ùx, 
buf
, 
Ën
);

714 
	`ns16550_þr_ªd_£t_¼u±s
(
ùx
, 0, 
SP_INT_TX_ENABLE
);

716 
	}
}

725 
	$ns16550_wre_suµÜt_pÞËd
(

726 
¹ems_rmios_deviû_cÚxt
 *
ba£
,

727 cÚ¡ *
buf
,

728 
size_t
 
Ën


731 
size_t
 
nwre
 = 0;

736 
nwre
 < 
Ën
) {

740 
	`ns16550_pÞËd_putch¬
(
ba£
, *
buf
++);

741 
nwre
++;

743 
	}
}

748 
	$ns16550_pÞËd_gch¬
(
¹ems_rmios_deviû_cÚxt
 *
ba£
)

750 
ns16550_cÚxt
 *
ùx
 = (ns16550_cÚx*è
ba£
;

751 
ut32_t
 
pNS16550
;

752 
ucLeStus
;

753 
ut8_t
 
cCh¬
;

754 
ns16550_g_»g
 
gReg
;

756 
pNS16550
 = 
ùx
->
pÜt
;

757 
gReg
 = 
ùx
->
g_»g
;

759 
ucLeStus
 = (*
gReg
)(
pNS16550
, 
NS16550_LINE_STATUS
);

760 ià(
ucLeStus
 & 
SP_LSR_RDY
) {

761 
cCh¬
 = (*
gReg
)(
pNS16550
, 
NS16550_RECEIVE_BUFFER
);

762  ()
cCh¬
;

765 
	}
}

771 cÚ¡ 
¹ems_rmios_deviû_æow
 
	gns16550_æow_¹sùs
 = {

772 .
¡Ý_»mÙe_tx
 = 
ns16550_Ãg©e_RTS
,

773 .
	g¡¬t_»mÙe_tx
 = 
ns16550_as£¹_RTS


776 cÚ¡ 
¹ems_rmios_deviû_æow
 
	gns16550_æow_dùs
 = {

777 .
¡Ý_»mÙe_tx
 = 
ns16550_Ãg©e_DTR
,

778 .
	g¡¬t_»mÙe_tx
 = 
ns16550_as£¹_DTR


781 cÚ¡ 
¹ems_rmios_deviû_hªdËr
 
	gns16550_hªdËr_¼u±
 = {

782 .
f¡_Ý
 = 
ns16550_Ý
,

783 .
	gÏ¡_þo£
 = 
ns16550_þo£
,

784 .
	gpÞl_»ad
 = 
NULL
,

785 .
	gwre
 = 
ns16550_wre_suµÜt_t
,

786 .
	g£t_©ibus
 = 
ns16550_£t_©ibus
,

787 .
	gmode
 = 
TERMIOS_IRQ_DRIVEN


790 cÚ¡ 
¹ems_rmios_deviû_hªdËr
 
	gns16550_hªdËr_pÞËd
 = {

791 .
f¡_Ý
 = 
ns16550_Ý
,

792 .
	gÏ¡_þo£
 = 
ns16550_þo£
,

793 .
	gpÞl_»ad
 = 
ns16550_pÞËd_gch¬
,

794 .
	gwre
 = 
ns16550_wre_suµÜt_pÞËd
,

795 .
	g£t_©ibus
 = 
ns16550_£t_©ibus
,

796 .
	gmode
 = 
TERMIOS_POLLED


799 cÚ¡ 
¹ems_rmios_deviû_hªdËr
 
	gns16550_hªdËr_sk
 = {

800 .
f¡_Ý
 = 
ns16550_Ý
,

801 .
	gÏ¡_þo£
 = 
ns16550_þo£
,

802 .
	gpÞl_»ad
 = 
ns16550_»ad_sk
,

803 .
	gwre
 = 
ns16550_wre_suµÜt_sk
,

804 .
	g£t_©ibus
 = 
ns16550_£t_©ibus
,

805 .
	gmode
 = 
TERMIOS_TASK_DRIVEN


	@src/libchip/serial/ns16550.c

33 
	~<¡dlib.h
>

35 
	~<¹ems.h
>

36 
	~<¹ems/libio.h
>

37 
	~<¹ems/rgbuf.h
>

38 
	~<¹ems/b¥Io.h
>

39 
	~<¹ems/rmio¡y³s.h
>

41 
	~<libch/£rl.h
>

42 
	~<libch/£rsuµ.h
>

44 
	~<b¥.h
>

46 
	~"ns16550_p.h
"

47 
	~"ns16550.h
"

49 #ià
defed
(
BSP_FEATURE_IRQ_EXTENSION
)

50 
	~<b¥/q.h
>

51 #ià
defed
(
BSP_FEATURE_IRQ_LEGACY
)

52 
	~<b¥/q.h
>

53 #ià
defed
(
__PPC__
è|| defed(
__i386__
)

54 
	~<b¥/q.h
>

55 
	#BSP_FEATURE_IRQ_LEGACY


	)

56 #ifdeà
BSP_SHARED_HANDLER_SUPPORT


57 
	#BSP_FEATURE_IRQ_LEGACY_SHARED_HANDLER_SUPPORT


	)

62 
ut8_t
 
	mucModemCl
;

63 
	mªsmFifoCh¬s
;

64 } 
	tNS16550CÚxt
;

70 
NS16550_STATIC
 
ns16550_
(
mÜ
);

72 
NS16550_STATIC
 
ns16550_Ý
(

73 
majÜ
,

74 
mÜ
,

75 * 
¬g


78 
NS16550_STATIC
 
ns16550_þo£
(

79 
majÜ
,

80 
mÜ
,

81 * 
¬g


84 
NS16550_STATIC
 
ns16550_wre_pÞËd
(

85 
mÜ
,

86 
cCh¬


89 
NS16550_STATIC
 
ns16550_as£¹_RTS
(

90 
mÜ


93 
NS16550_STATIC
 
ns16550_Ãg©e_RTS
(

94 
mÜ


97 
NS16550_STATIC
 
ns16550_as£¹_DTR
(

98 
mÜ


101 
NS16550_STATIC
 
ns16550_Ãg©e_DTR
(

102 
mÜ


105 
NS16550_STATIC
 
ns16550_lize_¼u±s
(
mÜ
);

107 
NS16550_STATIC
 
ns16550_þnup_¼u±s
(
mÜ
);

109 
NS16550_STATIC
 
ssize_t
 
ns16550_wre_suµÜt_t
(

110 
mÜ
,

111 cÚ¡ *
buf
,

112 
size_t
 
Ën


115 
NS16550_STATIC
 
ssize_t
 
ns16550_wre_suµÜt_pÞËd
(

116 
mÜ
,

117 cÚ¡ *
buf
,

118 
size_t
 
Ën


121 
ns16550_by_nÚblockg_pÞËd
(

122 
mÜ


125 
NS16550_STATIC
 
ns16550_abË_¼u±s
(

126 
cÚsÞe_tbl
 *
c
,

127 
mask


130 
NS16550_STATIC
 
ns16550_£t_©ibus
(

131 
mÜ
,

132 cÚ¡ 
rmios
 *
t


135 #ià
defed
(
BSP_FEATURE_IRQ_EXTENSION
è|| defed(
BSP_FEATURE_IRQ_LEGACY
)

136 
NS16550_STATIC
 
ns16550_i¤
(*
¬g
);

139 
RTEMS_INTERRUPT_LOCK_DEFINE
(, 
ns16550_lock
, "NS16550")

145 cÚ¡ 
cÚsÞe_æow
 
	gns16550_æow_RTSCTS
 = {

146 
ns16550_Ãg©e_RTS
,

147 
ns16550_as£¹_RTS


150 cÚ¡ 
cÚsÞe_æow
 
	gns16550_æow_DTRCTS
 = {

151 
ns16550_Ãg©e_DTR
,

152 
ns16550_as£¹_DTR


155 cÚ¡ 
cÚsÞe_âs
 
	gns16550_âs
 = {

156 
libch_£rl_deçuÉ_´obe
,

157 
ns16550_Ý
,

158 
ns16550_þo£
,

159 
NULL
,

160 
ns16550_wre_suµÜt_t
,

161 
ns16550_
,

162 
ns16550_wre_pÞËd
,

163 
ns16550_£t_©ibus
,

164 
ue


167 cÚ¡ 
cÚsÞe_âs
 
	gns16550_âs_pÞËd
 = {

168 
libch_£rl_deçuÉ_´obe
,

169 
ns16550_Ý
,

170 
ns16550_þo£
,

171 
ns16550_by_nÚblockg_pÞËd
,

172 
ns16550_wre_suµÜt_pÞËd
,

173 
ns16550_
,

174 
ns16550_wre_pÞËd
,

175 
ns16550_£t_©ibus
,

176 
çl£


179 
ut32_t
 
	$NS16550_GBaudDivisÜ
(cÚ¡ 
cÚsÞe_tbl
 *
c
, 
ut32_t
 
baud
)

181 
ut32_t
 
þock
 = 
c
->
ulClock
;

182 
ut32_t
 
baudDivisÜ
 = (
þock
 !ð0 ? clock : 115200è/ (
baud
 * 16);

184 ià(
c
->
deviûTy³
 =ð
SERIAL_NS16550_WITH_FDR
) {

185 
ut32_t
 
äaùiÚ®Divid
 = 0x10;

186 
ut32_t
 
r
 = 
baud
;

187 
ut32_t
 
mulV®
;

188 
ut32_t
 
divAddV®
;

190 
þock
 /ð16 * 
baudDivisÜ
;

191 
mulV®
 = 1; mulVal < 16; ++mulVal) {

192 
divAddV®
 = 0; divAddV® < 
mulV®
; ++divAddVal) {

193 
ut32_t
 
aùu®
 = (
mulV®
 * 
þock
è/ (mulV® + 
divAddV®
);

194 
ut32_t
 
ÃwE¼
 = 
aùu®
 > 
baud
 ?ctual - baud : baud -ctual;

196 ià(
ÃwE¼
 < 
r
) {

197 
r
 = 
ÃwE¼
;

198 
äaùiÚ®Divid
 = (
mulV®
 << 4è| 
divAddV®
;

203 (*
c
->
£tRegi¡
)(

204 
c
->
ulClPÜt1
,

205 
NS16550_FRACTIONAL_DIVIDER
,

206 
äaùiÚ®Divid


210  
baudDivisÜ
;

211 
	}
}

217 
	$ns16550_
(
mÜ
)

219 
u_t
 
pNS16550
;

220 
ut8_t
 
ucD©aBy
;

221 
ut32_t
 
ulBaudDivisÜ
;

222 
NS16550CÚxt
 *
²s16550CÚxt
;

223 
£tRegi¡_f
 
£tReg
;

224 
gRegi¡_f
 
gReg
;

225 
cÚsÞe_tbl
 *
c
 = 
CÚsÞe_PÜt_Tbl
 [
mÜ
];

227 
²s16550CÚxt
=(
NS16550CÚxt
 *)
	`m®loc
((NS16550Context));

229 ià(
²s16550CÚxt
 =ð
NULL
) {

230 
	`´tk
Ð"%s: E¼Ü: NÙnough memÜy\n", 
__func__
);

231 
	`¹ems_çl_rÜ_occu¼ed
( 0xdeadbeef);

234 
CÚsÞe_PÜt_D©a
[
mÜ
].
pDeviûCÚxt
=(*)
²s16550CÚxt
;

235 
²s16550CÚxt
->
ucModemCl
=
SP_MODEM_IRQ
;

237 
pNS16550
 = 
c
->
ulClPÜt1
;

238 
£tReg
 = 
c
->
£tRegi¡
;

239 
gReg
 = 
c
->
gRegi¡
;

246 (*
£tReg
)(
pNS16550
, 
NS16550_LINE_CONTROL
, 0x0);

247 
	`ns16550_abË_¼u±s
Ð
c
, 
NS16550_DISABLE_ALL_INTR
 );

251 
ulBaudDivisÜ
 = 
	`NS16550_GBaudDivisÜ
(
c
, (
u_t
èc->
pDeviûP¬ams
);

252 
ucD©aBy
 = 
SP_LINE_DLAB
;

253 (*
£tReg
)(
pNS16550
, 
NS16550_LINE_CONTROL
, 
ucD©aBy
);

256 (*
£tReg
)(
pNS16550
,
NS16550_TRANSMIT_BUFFER
,(
ut8_t
)(
ulBaudDivisÜ
 & 0xffU));

257 (*
£tReg
)(

258 
pNS16550
,
NS16550_INTERRUPT_ENABLE
,

259 (
ut8_t
)(Ð
ulBaudDivisÜ
 >> 8 ) & 0xffU )

264 
ucD©aBy
 = 
EIGHT_BITS
;

265 (*
£tReg
)(
pNS16550
, 
NS16550_LINE_CONTROL
, 
ucD©aBy
);

268 
ucD©aBy
 = 
SP_FIFO_ENABLE
;

269 (*
£tReg
)(
pNS16550
, 
NS16550_FIFO_CONTROL
, 
ucD©aBy
);

271 
ucD©aBy
 = 
SP_FIFO_ENABLE
 | 
SP_FIFO_RXRST
 | 
SP_FIFO_TXRST
;

272 (*
£tReg
)(
pNS16550
, 
NS16550_FIFO_CONTROL
, 
ucD©aBy
);

274 
	`ns16550_abË_¼u±s
(
c
, 
NS16550_DISABLE_ALL_INTR
);

278 (*
£tReg
)(
pNS16550
, 
NS16550_MODEM_CONTROL
,
²s16550CÚxt
->
ucModemCl
);

280 (*
gReg
)(
pNS16550
, 
NS16550_LINE_STATUS
 );

281 (*
gReg
)(
pNS16550
, 
NS16550_RECEIVE_BUFFER
 );

282 
	}
}

288 
	$ns16550_Ý
(

289 
majÜ
,

290 
mÜ
,

291 *
¬g


294 
¹ems_libio_Ý_þo£_¬gs_t
 *
oc
 = (¹ems_libio_Ý_þo£_¬gs_*è
¬g
;

295 
¹ems_rmios_y
 *
y
 = (¹ems_rmios_y *è
oc
->
iÝ
->
d©a1
;

296 
cÚsÞe_tbl
 *
c
 = 
CÚsÞe_PÜt_Tbl
 [
mÜ
];

297 
cÚsÞe_d©a
 *
d
 = &
CÚsÞe_PÜt_D©a
 [
mÜ
];

299 
d
->
rmios_d©a
 = 
y
;

302 ià(
c
->
pDeviûFlow
 !ð&
ns16550_æow_DTRCTS
) {

303 
	`ns16550_as£¹_DTR
Ð
mÜ
);

307 
	`¹ems_rmios_£t_l_baud
Ð
y
, (
_t
è
c
->
pDeviûP¬ams
);

309 ià(
c
->
pDeviûFns
->
deviûOuutU£sIÁru±s
) {

310 
	`ns16550_lize_¼u±s
Ð
mÜ
);

311 
	`ns16550_abË_¼u±s
Ð
c
, 
NS16550_ENABLE_ALL_INTR_EXCEPT_TX
);

314  
RTEMS_SUCCESSFUL
;

315 
	}
}

321 
	$ns16550_þo£
(

322 
majÜ
,

323 
mÜ
,

324 * 
¬g


327 
cÚsÞe_tbl
 *
c
 = 
CÚsÞe_PÜt_Tbl
 [
mÜ
];

332 ià(
c
->
pDeviûFlow
 !ð&
ns16550_æow_DTRCTS
) {

333 
	`ns16550_Ãg©e_DTR
(
mÜ
);

336 
	`ns16550_abË_¼u±s
(
c
, 
NS16550_DISABLE_ALL_INTR
);

338 ià(
c
->
pDeviûFns
->
deviûOuutU£sIÁru±s
) {

339 
	`ns16550_þnup_¼u±s
(
mÜ
);

342 (
RTEMS_SUCCESSFUL
);

343 
	}
}

348 
	$ns16550_outch_pÞËd
(
cÚsÞe_tbl
 *
c
, 
out
)

350 
u_t
 
pÜt
 = 
c
->
ulClPÜt1
;

351 
gRegi¡_f
 
g
 = 
c
->
gRegi¡
;

352 
£tRegi¡_f
 
£t
 = 
c
->
£tRegi¡
;

353 
ut32_t
 
¡©us
 = 0;

354 
¹ems_¼u±_lock_cÚxt
 
lock_cÚxt
;

357 
ut32_t
 
¼u±_mask
 = 
	`g
Ð
pÜt
, 
NS16550_INTERRUPT_ENABLE
);

360 
	`ns16550_abË_¼u±s
Ð
c
, 
NS16550_DISABLE_ALL_INTR
);

362 
ue
) {

364 
	`¹ems_¼u±_lock_acque
(&
ns16550_lock
, &
lock_cÚxt
);

367 
¡©us
 = 
	`g
Ð
pÜt
, 
NS16550_LINE_STATUS
);

368 ià((
¡©us
 & 
SP_LSR_THOLD
) != 0) {

370 
	`£t
Ð
pÜt
, 
NS16550_TRANSMIT_BUFFER
, 
out
);

373 
	`¹ems_¼u±_lock_»Ëa£
(&
ns16550_lock
, &
lock_cÚxt
);

376 
	`¹ems_¼u±_lock_»Ëa£
(&
ns16550_lock
, &
lock_cÚxt
);

381 
¡©us
 = 
	`g
Ð
pÜt
, 
NS16550_LINE_STATUS
);

382 } (
¡©us
 & 
SP_LSR_THOLD
) == 0);

386 
	`£t
Ð
pÜt
, 
NS16550_INTERRUPT_ENABLE
, 
¼u±_mask
);

387 
	}
}

389 
	$ns16550_wre_pÞËd
(
mÜ
, 
out
)

391 
cÚsÞe_tbl
 *
c
 = 
CÚsÞe_PÜt_Tbl
 [
mÜ
];

393 
	`ns16550_outch_pÞËd
Ð
c
, 
out
 );

394 
	}
}

404 
NS16550_STATIC
 
	$ns16550_as£¹_RTS
(
mÜ
)

406 
ut32_t
 
pNS16550
;

407 
¹ems_¼u±_lock_cÚxt
 
lock_cÚxt
;

408 
NS16550CÚxt
 *
²s16550CÚxt
;

409 
£tRegi¡_f
 
£tReg
;

411 
²s16550CÚxt
=(
NS16550CÚxt
 *è
CÚsÞe_PÜt_D©a
[
mÜ
].
pDeviûCÚxt
;

413 
pNS16550
 = 
CÚsÞe_PÜt_Tbl
[
mÜ
]->
ulClPÜt1
;

414 
£tReg
 = 
CÚsÞe_PÜt_Tbl
[
mÜ
]->
£tRegi¡
;

419 
	`¹ems_¼u±_lock_acque
(&
ns16550_lock
, &
lock_cÚxt
);

420 
²s16550CÚxt
->
ucModemCl
|=
SP_MODEM_RTS
;

421 (*
£tReg
)(
pNS16550
, 
NS16550_MODEM_CONTROL
, 
²s16550CÚxt
->
ucModemCl
);

422 
	`¹ems_¼u±_lock_»Ëa£
(&
ns16550_lock
, &
lock_cÚxt
);

424 
	}
}

430 
NS16550_STATIC
 
	$ns16550_Ãg©e_RTS
(
mÜ
)

432 
ut32_t
 
pNS16550
;

433 
¹ems_¼u±_lock_cÚxt
 
lock_cÚxt
;

434 
NS16550CÚxt
 *
²s16550CÚxt
;

435 
£tRegi¡_f
 
£tReg
;

437 
²s16550CÚxt
=(
NS16550CÚxt
 *è
CÚsÞe_PÜt_D©a
[
mÜ
].
pDeviûCÚxt
;

439 
pNS16550
 = 
CÚsÞe_PÜt_Tbl
[
mÜ
]->
ulClPÜt1
;

440 
£tReg
 = 
CÚsÞe_PÜt_Tbl
[
mÜ
]->
£tRegi¡
;

445 
	`¹ems_¼u±_lock_acque
(&
ns16550_lock
, &
lock_cÚxt
);

446 
²s16550CÚxt
->
ucModemCl
&=~
SP_MODEM_RTS
;

447 (*
£tReg
)(
pNS16550
, 
NS16550_MODEM_CONTROL
, 
²s16550CÚxt
->
ucModemCl
);

448 
	`¹ems_¼u±_lock_»Ëa£
(&
ns16550_lock
, &
lock_cÚxt
);

450 
	}
}

461 
NS16550_STATIC
 
	$ns16550_as£¹_DTR
(
mÜ
)

463 
ut32_t
 
pNS16550
;

464 
¹ems_¼u±_lock_cÚxt
 
lock_cÚxt
;

465 
NS16550CÚxt
 *
²s16550CÚxt
;

466 
£tRegi¡_f
 
£tReg
;

468 
²s16550CÚxt
=(
NS16550CÚxt
 *è
CÚsÞe_PÜt_D©a
[
mÜ
].
pDeviûCÚxt
;

470 
pNS16550
 = 
CÚsÞe_PÜt_Tbl
[
mÜ
]->
ulClPÜt1
;

471 
£tReg
 = 
CÚsÞe_PÜt_Tbl
[
mÜ
]->
£tRegi¡
;

476 
	`¹ems_¼u±_lock_acque
(&
ns16550_lock
, &
lock_cÚxt
);

477 
²s16550CÚxt
->
ucModemCl
|=
SP_MODEM_DTR
;

478 (*
£tReg
)(
pNS16550
, 
NS16550_MODEM_CONTROL
, 
²s16550CÚxt
->
ucModemCl
);

479 
	`¹ems_¼u±_lock_»Ëa£
(&
ns16550_lock
, &
lock_cÚxt
);

481 
	}
}

487 
NS16550_STATIC
 
	$ns16550_Ãg©e_DTR
(
mÜ
)

489 
ut32_t
 
pNS16550
;

490 
¹ems_¼u±_lock_cÚxt
 
lock_cÚxt
;

491 
NS16550CÚxt
 *
²s16550CÚxt
;

492 
£tRegi¡_f
 
£tReg
;

494 
²s16550CÚxt
=(
NS16550CÚxt
 *è
CÚsÞe_PÜt_D©a
[
mÜ
].
pDeviûCÚxt
;

496 
pNS16550
 = 
CÚsÞe_PÜt_Tbl
[
mÜ
]->
ulClPÜt1
;

497 
£tReg
 = 
CÚsÞe_PÜt_Tbl
[
mÜ
]->
£tRegi¡
;

502 
	`¹ems_¼u±_lock_acque
(&
ns16550_lock
, &
lock_cÚxt
);

503 
²s16550CÚxt
->
ucModemCl
&=~
SP_MODEM_DTR
;

504 (*
£tReg
)(
pNS16550
, 
NS16550_MODEM_CONTROL
,
²s16550CÚxt
->
ucModemCl
);

505 
	`¹ems_¼u±_lock_»Ëa£
(&
ns16550_lock
, &
lock_cÚxt
);

507 
	}
}

516 
	$ns16550_£t_©ibus
(

517 
mÜ
,

518 cÚ¡ 
rmios
 *
t


521 
ut32_t
 
pNS16550
;

522 
ut32_t
 
ulBaudDivisÜ
;

523 
ut8_t
 
ucLeCÚÞ
;

524 
ut32_t
 
baud_»que¡ed
;

525 
£tRegi¡_f
 
£tReg
;

526 
¹ems_¼u±_lock_cÚxt
 
lock_cÚxt
;

527 cÚ¡ 
cÚsÞe_tbl
 *
c
 = 
CÚsÞe_PÜt_Tbl
 [
mÜ
];

529 
pNS16550
 = 
c
->
ulClPÜt1
;

530 
£tReg
 = 
c
->
£tRegi¡
;

538 
baud_»que¡ed
 = 
	`¹ems_rmios_baud_to_numb
(
t
->
c_cæag
);

539 
	`_As£¹
Ð
baud_»que¡ed
 != 0 );

540 
ulBaudDivisÜ
 = 
	`NS16550_GBaudDivisÜ
(
c
, 
baud_»que¡ed
);

542 
ucLeCÚÞ
 = 0;

548 ià(
t
->
c_cæag
 & 
PARENB
) {

549 
ucLeCÚÞ
 |ð
SP_LINE_PAR
;

550 ià(!(
t
->
c_cæag
 & 
PARODD
))

551 
ucLeCÚÞ
 |ð
SP_LINE_ODD
;

558 ià(
t
->
c_cæag
 & 
CSIZE
) {

559 
t
->
c_cæag
 & 
CSIZE
) {

560 
CS5
: 
ucLeCÚÞ
 |ð
FIVE_BITS
; ;

561 
CS6
: 
ucLeCÚÞ
 |ð
SIX_BITS
; ;

562 
CS7
: 
ucLeCÚÞ
 |ð
SEVEN_BITS
; ;

563 
CS8
: 
ucLeCÚÞ
 |ð
EIGHT_BITS
; ;

566 
ucLeCÚÞ
 |ð
EIGHT_BITS
;

573 ià(
t
->
c_cæag
 & 
CSTOPB
) {

574 
ucLeCÚÞ
 |ð
SP_LINE_STOP
;

583 
	`¹ems_¼u±_lock_acque
(&
ns16550_lock
, &
lock_cÚxt
);

593 (*
£tReg
)(
pNS16550
, 
NS16550_LINE_CONTROL
, 
SP_LINE_DLAB
);

594 (*
£tReg
)(
pNS16550
, 
NS16550_TRANSMIT_BUFFER
, 
ulBaudDivisÜ
&0xff);

595 (*
£tReg
)(
pNS16550
, 
NS16550_INTERRUPT_ENABLE
, (
ulBaudDivisÜ
>>8)&0xff);

600 (*
£tReg
)(
pNS16550
, 
NS16550_LINE_CONTROL
, 
ucLeCÚÞ
 );

602 
	`¹ems_¼u±_lock_»Ëa£
(&
ns16550_lock
, &
lock_cÚxt
);

605 
	}
}

607 #ià
defed
(
BSP_FEATURE_IRQ_EXTENSION
è|| defed(
BSP_FEATURE_IRQ_LEGACY
)

612 
NS16550_STATIC
 
	$ns16550_´oûss
Ð
mÜ
)

614 
cÚsÞe_tbl
 *
c
 = 
CÚsÞe_PÜt_Tbl
 [
mÜ
];

615 
cÚsÞe_d©a
 *
d
 = &
CÚsÞe_PÜt_D©a
 [
mÜ
];

616 
NS16550CÚxt
 *
ùx
 = 
d
->
pDeviûCÚxt
;

617 
ut32_t
 
pÜt
 = 
c
->
ulClPÜt1
;

618 
gRegi¡_f
 
g
 = 
c
->
gRegi¡
;

619 
i
 = 0;

620 
buf
 [
SP_FIFO_SIZE
];

625 
i
 = 0; i < 
SP_FIFO_SIZE
; ++i) {

626 ià((
	`g
Ð
pÜt
, 
NS16550_LINE_STATUS
è& 
SP_LSR_RDY
) != 0) {

627 
buf
 [
i
] = (è
	`g
(
pÜt
, 
NS16550_RECEIVE_BUFFER
);

634 
	`¹ems_rmios_queue_¿w_ch¬aùs
Ð
d
->
rmios_d©a
, 
buf
, 
i
);

637 ià(
ùx
->
ªsmFifoCh¬s
 > 0

638 && (
	`g
Ð
pÜt
, 
NS16550_LINE_STATUS
è& 
SP_LSR_THOLD
) != 0) {

641 
	`¹ems_rmios_dequeue_ch¬aùs
(

642 
d
->
rmios_d©a
,

643 
ùx
->
ªsmFifoCh¬s


646 } (
	`g
Ð
pÜt
, 
NS16550_INTERRUPT_ID
è& 
SP_IID_0
) == 0);

647 
	}
}

659 
ssize_t
 
	$ns16550_wre_suµÜt_t
(

660 
mÜ
,

661 cÚ¡ *
buf
,

662 
size_t
 
Ën


665 
cÚsÞe_tbl
 *
c
 = 
CÚsÞe_PÜt_Tbl
 [
mÜ
];

666 
cÚsÞe_d©a
 *
d
 = &
CÚsÞe_PÜt_D©a
 [
mÜ
];

667 
NS16550CÚxt
 *
ùx
 = 
d
->
pDeviûCÚxt
;

668 
ut32_t
 
pÜt
 = 
c
->
ulClPÜt1
;

669 
£tRegi¡_f
 
£t
 = 
c
->
£tRegi¡
;

670 
i
 = 0;

671 
out
 = 
Ën
 > 
SP_FIFO_SIZE
 ? SP_FIFO_SIZE :en;

673 
i
 = 0; i < 
out
; ++i) {

674 
	`£t
Ð
pÜt
, 
NS16550_TRANSMIT_BUFFER
, 
buf
 [
i
]);

677 
ùx
->
ªsmFifoCh¬s
 = 
out
;

679 ià(
out
 > 0) {

680 
	`ns16550_abË_¼u±s
Ð
c
, 
NS16550_ENABLE_ALL_INTR
);

682 
	`ns16550_abË_¼u±s
Ð
c
, 
NS16550_ENABLE_ALL_INTR_EXCEPT_TX
);

686 
	}
}

693 
NS16550_STATIC
 
	$ns16550_abË_¼u±s
(

694 
cÚsÞe_tbl
 *
c
,

695 
mask


698 
ut32_t
 
pNS16550
;

699 
£tRegi¡_f
 
£tReg
;

701 
pNS16550
 = 
c
->
ulClPÜt1
;

702 
£tReg
 = 
c
->
£tRegi¡
;

704 (*
£tReg
)(
pNS16550
, 
NS16550_INTERRUPT_ENABLE
, 
mask
);

705 
	}
}

707 #ià
defed
(
BSP_FEATURE_IRQ_EXTENSION
è|| defed(
BSP_FEATURE_IRQ_LEGACY
)

708 
	$ns16550_i¤
(*
¬g
)

710 
mÜ
 = (è
¬g
;

712 
	`ns16550_´oûss
Ð
mÜ
);

713 
	}
}

721 
NS16550_STATIC
 
	$ns16550_lize_¼u±s
Ð
mÜ
)

723 #ià
	`defed
(
BSP_FEATURE_IRQ_EXTENSION
è|| defed(
BSP_FEATURE_IRQ_LEGACY
)

724 
cÚsÞe_tbl
 *
c
 = 
CÚsÞe_PÜt_Tbl
 [
mÜ
];

727 #ifdeà
BSP_FEATURE_IRQ_EXTENSION


729 
¹ems_¡©us_code
 
sc
 = 
RTEMS_SUCCESSFUL
;

730 
sc
 = 
	`¹ems_¼u±_hªdËr_¡®l
(

731 
c
->
ulIÁVeùÜ
,

733 
RTEMS_INTERRUPT_SHARED
,

734 
ns16550_i¤
,

735 (*è
mÜ


737 ià(
sc
 !ð
RTEMS_SUCCESSFUL
) {

739 
	`´tk
Ð"%s: E¼Ü: In¡®È¼u± hªdËr\n", 
__func__
);

740 
	`¹ems_çl_rÜ_occu¼ed
( 0xdeadbeef);

743 #ià
	`defed
(
BSP_FEATURE_IRQ_LEGACY
)

745 
rv
 = 0;

746 #ifdeà
BSP_FEATURE_IRQ_LEGACY_SHARED_HANDLER_SUPPORT


747 
¹ems_q_cÚÃù_d©a
 
cd
 = {

748 
c
->
ulIÁVeùÜ
,

749 
ns16550_i¤
,

750 (*è
mÜ
,

751 
NULL
,

752 
NULL
,

753 
NULL
,

754 
NULL


756 
rv
 = 
	`BSP_¡®l_¹ems_sh¬ed_q_hªdËr
Ð&
cd
);

758 
¹ems_q_cÚÃù_d©a
 
cd
 = {

759 
c
->
ulIÁVeùÜ
,

760 
ns16550_i¤
,

761 (*è
mÜ
,

762 
NULL
,

763 
NULL
,

764 
NULL


766 
rv
 = 
	`BSP_¡®l_¹ems_q_hªdËr
Ð&
cd
);

768 ià(
rv
 == 0) {

770 
	`´tk
Ð"%s: E¼Ü: In¡®È¼u± hªdËr\n", 
__func__
);

771 
	`¹ems_çl_rÜ_occu¼ed
( 0xdeadbeef);

775 
	}
}

777 
NS16550_STATIC
 
	$ns16550_þnup_¼u±s
(
mÜ
)

779 #ià
	`defed
(
BSP_FEATURE_IRQ_EXTENSION
)

780 
¹ems_¡©us_code
 
sc
 = 
RTEMS_SUCCESSFUL
;

781 
cÚsÞe_tbl
 *
c
 = 
CÚsÞe_PÜt_Tbl
 [
mÜ
];

782 
sc
 = 
	`¹ems_¼u±_hªdËr_»move
(

783 
c
->
ulIÁVeùÜ
,

784 
ns16550_i¤
,

785 (*è
mÜ


787 ià(
sc
 !ð
RTEMS_SUCCESSFUL
) {

789 
	`´tk
("%s: E¼Ü: Remov¼u± hªdËr\n", 
__func__
);

790 
	`¹ems_çl_rÜ_occu¼ed
(0xdeadbeef);

792 #ià
	`defed
(
BSP_FEATURE_IRQ_LEGACY
)

793 
rv
 = 0;

794 
cÚsÞe_tbl
 *
c
 = 
CÚsÞe_PÜt_Tbl
 [
mÜ
];

795 
¹ems_q_cÚÃù_d©a
 
cd
 = {

796 .
Çme
 = 
c
->
ulIÁVeùÜ
,

797 .
hdl
 = 
ns16550_i¤
,

798 .
hªdË
 = (*è
mÜ


800 
rv
 = 
	`BSP_»move_¹ems_q_hªdËr
(&
cd
);

801 ià(
rv
 == 0) {

803 
	`´tk
("%s: E¼Ü: Remov¼u± hªdËr\n", 
__func__
);

804 
	`¹ems_çl_rÜ_occu¼ed
(0xdeadbeef);

807 
	}
}

816 
ssize_t
 
	$ns16550_wre_suµÜt_pÞËd
(

817 
mÜ
,

818 cÚ¡ *
buf
,

819 
size_t
 
Ën


822 
nwre
 = 0;

827 
nwre
 < 
Ën
) {

831 
	`ns16550_wre_pÞËd
(
mÜ
, *
buf
++);

832 
nwre
++;

838  
nwre
;

839 
	}
}

844 
	$ns16550_ch_pÞËd
(

845 
cÚsÞe_tbl
 *
c


848 
ut32_t
 
pNS16550
;

849 
ucLeStus
;

850 
ut8_t
 
cCh¬
;

851 
gRegi¡_f
 
gReg
;

853 
pNS16550
 = 
c
->
ulClPÜt1
;

854 
gReg
 = 
c
->
gRegi¡
;

856 
ucLeStus
 = (*
gReg
)(
pNS16550
, 
NS16550_LINE_STATUS
);

857 ià(
ucLeStus
 & 
SP_LSR_RDY
) {

858 
cCh¬
 = (*
gReg
)(
pNS16550
, 
NS16550_RECEIVE_BUFFER
);

859  ()
cCh¬
;

862 
	}
}

869 
	$ns16550_by_nÚblockg_pÞËd
(
mÜ
)

871 
cÚsÞe_tbl
 *
c
 = 
CÚsÞe_PÜt_Tbl
 [
mÜ
];

873  
	`ns16550_ch_pÞËd
Ð
c
 );

874 
	}
}

	@src/libchip/serial/ns16550.h

27 #iâdeà
_NS16550_H_


28 
	#_NS16550_H_


	)

30 
	~<¹ems/rmio¡y³s.h
>

31 
	~<libch/£rl.h
>

33 #ifdeà
__ýlu¥lus


41 cÚ¡ 
cÚsÞe_âs
 
ns16550_âs
;

42 cÚ¡ 
cÚsÞe_âs
 
ns16550_âs_pÞËd
;

48 cÚ¡ 
cÚsÞe_æow
 
ns16550_æow_RTSCTS
;

49 cÚ¡ 
cÚsÞe_æow
 
ns16550_æow_DTRCTS
;

54 
ns16550_outch_pÞËd
(
cÚsÞe_tbl
 *
c
, 
out
);

55 
ns16550_ch_pÞËd
(
cÚsÞe_tbl
 *
c
);

59 
ut8_t
 (*
	tns16550_g_»g
)(
	tu_t
 
	tpÜt
, 
	tut8_t
 
	t»g
);

61 (*
	gns16550_£t_»g
)(
	tu_t
 
	tpÜt
, 
	tut8_t
 
	t»g
, ut8_
	tv®ue
);

64 
¹ems_rmios_deviû_cÚxt
 
	gba£
;

65 
ns16550_g_»g
 
	gg_»g
;

66 
ns16550_£t_»g
 
	g£t_»g
;

67 
u_t
 
	gpÜt
;

68 
¹ems_veùÜ_numb
 
	gq
;

69 
ut32_t
 
	gþock
;

70 
ut32_t
 
	gl_baud
;

71 
boÞ
 
	ghas_äaùiÚ®_divid_»gi¡
;

72 
ut8_t
 
	gmodem_cÚÞ
;

73 
size_t
 
	gout_tÙ®
;

74 
size_t
 
	gout_»mag
;

75 
size_t
 
	gout_cu¼t
;

76 cÚ¡ *
	gout_buf
;

77 
¹ems_rmios_y
 *
	gy
;

78 } 
	tns16550_cÚxt
;

80 cÚ¡ 
¹ems_rmios_deviû_hªdËr
 
ns16550_hªdËr_¼u±
;

81 cÚ¡ 
¹ems_rmios_deviû_hªdËr
 
ns16550_hªdËr_pÞËd
;

82 cÚ¡ 
¹ems_rmios_deviû_hªdËr
 
ns16550_hªdËr_sk
;

84 cÚ¡ 
¹ems_rmios_deviû_æow
 
ns16550_æow_¹sùs
;

85 cÚ¡ 
¹ems_rmios_deviû_æow
 
ns16550_æow_dùs
;

87 
ns16550_pÞËd_putch¬
(
¹ems_rmios_deviû_cÚxt
 *
ba£
, 
out
);

89 
ns16550_pÞËd_gch¬
(
¹ems_rmios_deviû_cÚxt
 *
ba£
);

91 
boÞ
 
ns16550_´obe
(
¹ems_rmios_deviû_cÚxt
 *
ba£
);

93 #ifdeà
__ýlu¥lus


	@src/libchip/serial/ns16550_p.h

28 #iâdeà
_NS16550_P_H_


29 
	#_NS16550_P_H_


	)

31 
	~<libch/£rl.h
>

33 #ifdeà
__ýlu¥lus


42 
	#NS16550_STATIC
 

	)

44 
	#NS16550_RECEIVE_BUFFER
 0

	)

45 
	#NS16550_TRANSMIT_BUFFER
 0

	)

46 
	#NS16550_INTERRUPT_ENABLE
 1

	)

47 
	#NS16550_INTERRUPT_ID
 2

	)

48 
	#NS16550_FIFO_CONTROL
 2

	)

49 
	#NS16550_LINE_CONTROL
 3

	)

50 
	#NS16550_MODEM_CONTROL
 4

	)

51 
	#NS16550_LINE_STATUS
 5

	)

52 
	#NS16550_MODEM_STATUS
 6

	)

53 
	#NS16550_SCRATCH_PAD
 7

	)

54 
	#NS16550_FRACTIONAL_DIVIDER
 10

	)

60 
	#SP_INT_RX_ENABLE
 0x01

	)

61 
	#SP_INT_TX_ENABLE
 0x02

	)

62 
	#SP_INT_LS_ENABLE
 0x04

	)

63 
	#SP_INT_MS_ENABLE
 0x08

	)

65 
	#NS16550_ENABLE_ALL_INTR
 (
SP_INT_RX_ENABLE
 | 
SP_INT_TX_ENABLE
)

	)

66 
	#NS16550_DISABLE_ALL_INTR
 0x00

	)

67 
	#NS16550_ENABLE_ALL_INTR_EXCEPT_TX
 (
SP_INT_RX_ENABLE
)

	)

73 
	#SP_IID_0
 0x01

	)

74 
	#SP_IID_1
 0x02

	)

75 
	#SP_IID_2
 0x04

	)

76 
	#SP_IID_3
 0x08

	)

82 
	#SP_FIFO_ENABLE
 0x01

	)

83 
	#SP_FIFO_RXRST
 0x02

	)

84 
	#SP_FIFO_TXRST
 0x04

	)

85 
	#SP_FIFO_DMA
 0x08

	)

86 
	#SP_FIFO_RXLEVEL
 0xc0

	)

88 
	#SP_FIFO_SIZE
 16

	)

94 
	#SP_LINE_SIZE
 0x03

	)

95 
	#SP_LINE_STOP
 0x04

	)

96 
	#SP_LINE_PAR
 0x08

	)

97 
	#SP_LINE_ODD
 0x10

	)

98 
	#SP_LINE_STICK
 0x20

	)

99 
	#SP_LINE_BREAK
 0x40

	)

100 
	#SP_LINE_DLAB
 0x80

	)

106 
	#FIVE_BITS
 0x0

	)

107 
	#SIX_BITS
 0x1

	)

108 
	#SEVEN_BITS
 0x2

	)

109 
	#EIGHT_BITS
 0x3

	)

115 
	#SP_MODEM_DTR
 0x01

	)

116 
	#SP_MODEM_RTS
 0x02

	)

117 
	#SP_MODEM_IRQ
 0x08

	)

118 
	#SP_MODEM_LOOP
 0x10

	)

119 
	#SP_MODEM_DIV4
 0x80

	)

125 
	#SP_LSR_RDY
 0x01

	)

126 
	#SP_LSR_EOVRUN
 0x02

	)

127 
	#SP_LSR_EPAR
 0x04

	)

128 
	#SP_LSR_EFRAME
 0x08

	)

129 
	#SP_LSR_BREAK
 0x10

	)

130 
	#SP_LSR_THOLD
 0x20

	)

131 
	#SP_LSR_TX
 0x40

	)

132 
	#SP_LSR_EFIFO
 0x80

	)

134 #ifdeà
__ýlu¥lus


	@src/libchip/serial/serial.h

21 #iâdeà
__LIBCHIP_SERIAL_h


22 
	#__LIBCHIP_SERIAL_h


	)

24 
	~<rmios.h
>

26 
	~<¹ems.h
>

28 #ifdeà
__ýlu¥lus


42 
ut8_t
 (*
	tgRegi¡_f
)(
	tu_t
 
	tpÜt
, 
	tut8_t
 
	t»g
);

51 (*
£tRegi¡_f
)(
	tu_t
 
	tpÜt
, 
	tut8_t
 
	t»g
, ut8_
	tv®ue
);

59 
ut8_t
 (*
	tgD©a_f
)(
	tu_t
 
	tpÜt
);

67 (*
£tD©a_f
)(
	tu_t
 
	tpÜt
, 
	tut8_t
 
	tv®ue
);

76 
	s_cÚsÞe_âs
 {

77 
boÞ
 (*
deviûProbe
)(
mÜ
);

78 (*
deviûF¡O³n
)(
majÜ
, 
mÜ
, *
¬g
);

79 (*
deviûLa¡Clo£
)(
majÜ
, 
mÜ
, *
¬g
);

80 (*
deviûRd
)(
mÜ
);

81 
ssize_t
 (*
deviûWre
)(
mÜ
, cÚ¡ *
buf
, 
size_t
 
Ën
);

82 (*
deviûInlize
)(
mÜ
);

83 (*
deviûWrePÞËd
)(
mÜ
, 
cCh¬
);

84 (*
deviûSAribus
)(
mÜ
, cÚ¡ 
rmios
 *
t
);

85 
boÞ
 
deviûOuutU£sIÁru±s
;

86 } 
	tcÚsÞe_âs
;

94 
	s_cÚsÞe_æow
 {

95 (*
deviûStÝRemÙeTx
)(
mÜ
);

96 (*
deviûS¹RemÙeTx
)(
mÜ
);

97 } 
	tcÚsÞe_æow
;

105 
SERIAL_MC68681
,

106 
SERIAL_NS16550
,

107 
SERIAL_NS16550_WITH_FDR
,

109 
SERIAL_Z85C30
,

110 
SERIAL_CUSTOM


111 } 
	tcÚsÞe_devs
;

117 
	s_cÚsÞe_tbl
 {

119 cÚ¡ *
sDeviûName
;

124 
cÚsÞe_devs
 
deviûTy³
;

126 cÚ¡ 
cÚsÞe_âs
 *
pDeviûFns
;

130 
boÞ
 (*
deviûProbe
)(
mÜ
);

138 cÚ¡ 
cÚsÞe_æow
 *
pDeviûFlow
;

149 
ut32_t
 
ulM¬g
;

157 
ut32_t
 
ulHy¡esis
;

162 *
pDeviûP¬ams
;

166 
ut32_t
 
ulClPÜt1
;

170 
ut32_t
 
ulClPÜt2
;

172 
ut32_t
 
ulD©aPÜt
;

174 
gRegi¡_f
 
gRegi¡
;

176 
£tRegi¡_f
 
£tRegi¡
;

178 
gD©a_f
 
gD©a
;

180 
£tD©a_f
 
£tD©a
;

182 
ut32_t
 
ulClock
;

184 
ulIÁVeùÜ
;

185 } 
	tcÚsÞe_tbl
;

190 
	s_cÚsÞe_d©a
 {

191 *
rmios_d©a
;

192 vÞ©
boÞ
 
bAùive
;

194 *
pDeviûCÚxt
;

195 } 
	tcÚsÞe_d©a
;

201 
cÚsÞe_tbl
 **
CÚsÞe_PÜt_Tbl
;

205 
CÚsÞe_PÜt_CouÁ
;

211 
cÚsÞe_tbl
 
CÚsÞe_CÚfigu¿tiÚ_PÜts
[];

215 
CÚsÞe_CÚfigu¿tiÚ_CouÁ
;

220 
cÚsÞe_d©a
 *
CÚsÞe_PÜt_D©a
;

222 
¹ems_deviû_mÜ_numb
 
CÚsÞe_PÜt_MÜ
;

229 
b¥_cÚsÞe_£Ëù
();

231 #ifdeà
__ýlu¥lus


	@src/libchip/serial/serprobe.c

1 
	~<¹ems.h
>

2 
	~<libch/£rl.h
>

3 
	~<libch/£rsuµ.h
>

5 
boÞ
 
	$libch_£rl_deçuÉ_´obe
(
mÜ
)

12  
ue
;

13 
	}
}

	@src/libchip/serial/sersupp.h

1 #iâdeà
__LIBCHIP_SERIAL_SUPPORT_h


2 
	#__LIBCHIP_SERIAL_SUPPORT_h


	)

4 
	~<¹ems/rmio¡y³s.h
>

6 #ifdeà
__ýlu¥lus


10 
boÞ
 
libch_£rl_deçuÉ_´obe
(

11 
mÜ


14 #ifdeà
__ýlu¥lus


	@src/libchip/serial/z85c30.c

31 
	~<¹ems.h
>

32 
	~<¹ems/libio.h
>

33 
	~<¹ems/scÜe/sys¡©e.h
>

34 
	~<¡dlib.h
>

36 
	~<libch/£rl.h
>

37 
	~<libch/£rsuµ.h
>

38 
	~"z85c30_p.h
"

44 cÚ¡ 
cÚsÞe_æow
 
	gz85c30_æow_RTSCTS
 = {

45 
z85c30_Ãg©e_RTS
,

46 
z85c30_as£¹_RTS


49 cÚ¡ 
cÚsÞe_æow
 
	gz85c30_æow_DTRCTS
 = {

50 
z85c30_Ãg©e_DTR
,

51 
z85c30_as£¹_DTR


58 cÚ¡ 
cÚsÞe_âs
 
	gz85c30_âs
 = {

59 
libch_£rl_deçuÉ_´obe
,

60 
z85c30_Ý
,

61 
NULL
,

62 
NULL
,

63 
z85c30_wre_suµÜt_t
,

64 
z85c30_lize_¼u±s
,

65 
z85c30_wre_pÞËd
,

66 
NULL
,

67 
ue


70 cÚ¡ 
cÚsÞe_âs
 
	gz85c30_âs_pÞËd
 = {

71 
libch_£rl_deçuÉ_´obe
,

72 
z85c30_Ý
,

73 
z85c30_þo£
,

74 
z85c30_by_nÚblockg_pÞËd
,

75 
z85c30_wre_suµÜt_pÞËd
,

76 
z85c30_
,

77 
z85c30_wre_pÞËd
,

78 
NULL
,

79 
çl£


82 #ià(
CPU_SIMPLE_VECTORED_INTERRUPTS
 =ð
TRUE
)

83 
£t_veùÜ
Ð
¹ems_i¤_y
, 
¹ems_veùÜ_numb
, );

92 
Z85C30_STATIC
 
	$z85c30_lize_pÜt
(

93 
mÜ


96 
u_t
 
ulClPÜt
;

97 
u_t
 
ulBaudDivisÜ
;

98 
£tRegi¡_f
 
£tReg
;

100 
ulClPÜt
 = 
CÚsÞe_PÜt_Tbl
[
mÜ
]->
ulClPÜt1
;

101 
£tReg
 = 
CÚsÞe_PÜt_Tbl
[
mÜ
]->
£tRegi¡
;

109 (*
£tReg
)Ð
ulClPÜt
, 
SCC_WR0_SEL_WR4
, 
SCC_WR4_1_STOP
 | 
SCC_WR4_16_CLOCK
 );

115 (*
£tReg
)Ð
ulClPÜt
, 
SCC_WR0_SEL_WR3
, 
SCC_WR3_RX_8_BITS
 );

121 (*
£tReg
)Ð
ulClPÜt
, 
SCC_WR0_SEL_WR5
, 
SCC_WR5_TX_8_BITS
 );

126 (*
£tReg
)Ð
ulClPÜt
, 
SCC_WR0_SEL_WR10
, 0x00 );

133 (*
£tReg
)(

134 
ulClPÜt
,

135 
SCC_WR0_SEL_WR11
,

136 
SCC_WR11_OUT_BR_GEN
 | 
SCC_WR11_TRXC_OI
 |

137 
SCC_WR11_TX_BR_GEN
 | 
SCC_WR11_RX_BR_GEN


140 
ulBaudDivisÜ
 = 
	`Z85C30_Baud
(

141 (
ut32_t
è
CÚsÞe_PÜt_Tbl
[
mÜ
]->
ulClock
,

142 (
ut32_t
è((
u_t
)
CÚsÞe_PÜt_Tbl
[
mÜ
]->
pDeviûP¬ams
)

150 (*
£tReg
)Ð
ulClPÜt
, 
SCC_WR0_SEL_WR12
, 
ulBaudDivisÜ
 & 0xff );

156 (*
£tReg
)Ð
ulClPÜt
, 
SCC_WR0_SEL_WR13
, (
ulBaudDivisÜ
>>8) & 0xff );

162 (*
£tReg
)(

163 
ulClPÜt
,

164 
SCC_WR0_SEL_WR14
,

165 
SCC_WR14_BR_EN
 | 
SCC_WR14_BR_SRC
 | 
SCC_WR14_NULL


171 (*
£tReg
)Ð
ulClPÜt
, 
SCC_WR0_SEL_WR15
, 
SCC_WR15_CTS_IE
 );

176 (*
£tReg
)Ð
ulClPÜt
, 
SCC_WR0_SEL_WR0
, 
SCC_WR0_RST_INT
 );

178 (*
£tReg
)Ð
ulClPÜt
, 
SCC_WR0_SEL_WR0
, 
SCC_WR0_ERR_RST
 );

183 (*
£tReg
)Ð
ulClPÜt
, 
SCC_WR0_SEL_WR3
, 
SCC_WR3_RX_8_BITS
 | 
SCC_WR3_RX_EN
 );

188 (*
£tReg
)Ð
ulClPÜt
, 
SCC_WR0_SEL_WR5
, 
SCC_WR5_TX_8_BITS
 | 
SCC_WR5_TX_EN
 );

193 (*
£tReg
)Ð
ulClPÜt
, 
SCC_WR0_SEL_WR1
, 0 );

198 (*
£tReg
)Ð
ulClPÜt
, 
SCC_WR0_SEL_WR0
, 
SCC_WR0_RST_TX_CRC
 );

203 (*
£tReg
)Ð
ulClPÜt
, 
SCC_WR0_SEL_WR0
, 
SCC_WR0_RST_INT
 );

204 
	}
}

210 
Z85C30_STATIC
 
	$z85c30_Ý
(

211 
majÜ
,

212 
mÜ
,

213 *
¬g


217 
	`z85c30_lize_pÜt
(
mÜ
);

223 ià(
CÚsÞe_PÜt_Tbl
[
mÜ
]->
pDeviûFlow
 !=&
z85c30_æow_DTRCTS
) {

224 
	`z85c30_as£¹_DTR
(
mÜ
);

227 (
RTEMS_SUCCESSFUL
);

228 
	}
}

234 
Z85C30_STATIC
 
	$z85c30_þo£
(

235 
majÜ
,

236 
mÜ
,

237 *
¬g


244 ià(
CÚsÞe_PÜt_Tbl
[
mÜ
]->
pDeviûFlow
 !=&
z85c30_æow_DTRCTS
) {

245 
	`z85c30_Ãg©e_DTR
(
mÜ
);

248 (
RTEMS_SUCCESSFUL
);

249 
	}
}

255 
Z85C30_STATIC
 
	$z85c30_
(
mÜ
)

257 
u_t
 
ulClPÜt
;

258 
z85c30_cÚxt
 *
pz85c30CÚxt
;

259 
£tRegi¡_f
 
£tReg
;

260 
gRegi¡_f
 
gReg
;

262 
ulClPÜt
 = 
CÚsÞe_PÜt_Tbl
[
mÜ
]->
ulClPÜt1
;

263 
£tReg
 = 
CÚsÞe_PÜt_Tbl
[
mÜ
]->
£tRegi¡
;

264 
gReg
 = 
CÚsÞe_PÜt_Tbl
[
mÜ
]->
gRegi¡
;

266 
pz85c30CÚxt
 = (
z85c30_cÚxt
 *)
	`m®loc
((z85c30_context));

268 
CÚsÞe_PÜt_D©a
[
mÜ
].
pDeviûCÚxt
 = (*)
pz85c30CÚxt
;

270 
pz85c30CÚxt
->
ucModemCl
 = 
SCC_WR5_TX_8_BITS
 | 
SCC_WR5_TX_EN
;

272 iàÐ
ulClPÜt
 =ð
CÚsÞe_PÜt_Tbl
[
mÜ
]->
ulClPÜt2
 ) {

279 (*
gReg
)(
ulClPÜt
, 
SCC_WR0_SEL_RD0
);

281 (*
£tReg
)(
ulClPÜt
, 
SCC_WR0_SEL_WR9
, 
SCC_WR9_CH_A_RST
);

290 (*
gReg
)(
ulClPÜt
, 
SCC_WR0_SEL_RD0
);

292 (*
£tReg
)(
ulClPÜt
, 
SCC_WR0_SEL_WR9
, 
SCC_WR9_CH_B_RST
);

294 
	}
}

304 
Z85C30_STATIC
 
	$z85c30_as£¹_RTS
(
mÜ
)

306 
¹ems_¼u±_Ëv
 
Irql
;

307 
z85c30_cÚxt
 *
pz85c30CÚxt
;

308 
£tRegi¡_f
 
£tReg
;

310 
£tReg
 = 
CÚsÞe_PÜt_Tbl
[
mÜ
]->
£tRegi¡
;

312 
pz85c30CÚxt
 = (
z85c30_cÚxt
 *è
CÚsÞe_PÜt_D©a
[
mÜ
].
pDeviûCÚxt
;

318 
	`¹ems_¼u±_di§bË
(
Irql
);

319 
pz85c30CÚxt
->
ucModemCl
|=
SCC_WR5_RTS
;

320 (*
£tReg
)(

321 
CÚsÞe_PÜt_Tbl
[
mÜ
]->
ulClPÜt1
,

322 
SCC_WR0_SEL_WR5
,

323 
pz85c30CÚxt
->
ucModemCl


325 
	`¹ems_¼u±_abË
(
Irql
);

327 
	}
}

333 
Z85C30_STATIC
 
	$z85c30_Ãg©e_RTS
(
mÜ
)

335 
¹ems_¼u±_Ëv
 
Irql
;

336 
z85c30_cÚxt
 *
pz85c30CÚxt
;

337 
£tRegi¡_f
 
£tReg
;

339 
£tReg
 = 
CÚsÞe_PÜt_Tbl
[
mÜ
]->
£tRegi¡
;

341 
pz85c30CÚxt
 = (
z85c30_cÚxt
 *è
CÚsÞe_PÜt_D©a
[
mÜ
].
pDeviûCÚxt
;

347 
	`¹ems_¼u±_di§bË
(
Irql
);

348 
pz85c30CÚxt
->
ucModemCl
&=~
SCC_WR5_RTS
;

349 (*
£tReg
)(

350 
CÚsÞe_PÜt_Tbl
[
mÜ
]->
ulClPÜt1
,

351 
SCC_WR0_SEL_WR5
,

352 
pz85c30CÚxt
->
ucModemCl


354 
	`¹ems_¼u±_abË
(
Irql
);

356 
	}
}

367 
Z85C30_STATIC
 
	$z85c30_as£¹_DTR
(
mÜ
)

369 
¹ems_¼u±_Ëv
 
Irql
;

370 
z85c30_cÚxt
 *
pz85c30CÚxt
;

371 
£tRegi¡_f
 
£tReg
;

373 
£tReg
 = 
CÚsÞe_PÜt_Tbl
[
mÜ
]->
£tRegi¡
;

375 
pz85c30CÚxt
 = (
z85c30_cÚxt
 *è
CÚsÞe_PÜt_D©a
[
mÜ
].
pDeviûCÚxt
;

381 
	`¹ems_¼u±_di§bË
(
Irql
);

382 
pz85c30CÚxt
->
ucModemCl
|=
SCC_WR5_DTR
;

383 (*
£tReg
)(

384 
CÚsÞe_PÜt_Tbl
[
mÜ
]->
ulClPÜt1
,

385 
SCC_WR0_SEL_WR5
,

386 
pz85c30CÚxt
->
ucModemCl


388 
	`¹ems_¼u±_abË
(
Irql
);

390 
	}
}

396 
Z85C30_STATIC
 
	$z85c30_Ãg©e_DTR
(
mÜ
)

398 
¹ems_¼u±_Ëv
 
Irql
;

399 
z85c30_cÚxt
 *
pz85c30CÚxt
;

400 
£tRegi¡_f
 
£tReg
;

402 
£tReg
 = 
CÚsÞe_PÜt_Tbl
[
mÜ
]->
£tRegi¡
;

404 
pz85c30CÚxt
 = (
z85c30_cÚxt
 *è
CÚsÞe_PÜt_D©a
[
mÜ
].
pDeviûCÚxt
;

410 
	`¹ems_¼u±_di§bË
(
Irql
);

411 
pz85c30CÚxt
->
ucModemCl
&=~
SCC_WR5_DTR
;

412 (*
£tReg
)(

413 
CÚsÞe_PÜt_Tbl
[
mÜ
]->
ulClPÜt1
,

414 
SCC_WR0_SEL_WR5
,

415 
pz85c30CÚxt
->
ucModemCl


417 
	`¹ems_¼u±_abË
(
Irql
);

419 
	}
}

428 
Z85C30_STATIC
 
	$z85c30_£t_©ibus
(

429 
mÜ
,

430 cÚ¡ 
rmios
 *
t


433 
u_t
 
ulClPÜt
;

434 
ut32_t
 
ulBaudDivisÜ
;

435 
ut32_t
 
wr3
;

436 
ut32_t
 
wr4
;

437 
ut32_t
 
wr5
;

438 
baud_»que¡ed
;

439 
ut32_t
 
baud_numb
;

440 
£tRegi¡_f
 
£tReg
;

441 
¹ems_¼u±_Ëv
 
Irql
;

443 
ulClPÜt
 = 
CÚsÞe_PÜt_Tbl
[
mÜ
]->
ulClPÜt1
;

444 
£tReg
 = 
CÚsÞe_PÜt_Tbl
[
mÜ
]->
£tRegi¡
;

452 
baud_»que¡ed
 = 
t
->
c_cæag
 & 
CBAUD
;

453 ià(!
baud_»que¡ed
)

454 
baud_»que¡ed
 = 
B9600
;

456 
baud_numb
 = (
ut32_t
è
	`¹ems_rmios_baud_to_numb
Ð
baud_»que¡ed
 );

457 
	`_As£¹
Ð
baud_numb
 != 0 );

459 
ulBaudDivisÜ
 = 
	`Z85C30_Baud
(

460 (
ut32_t
è
CÚsÞe_PÜt_Tbl
[
mÜ
]->
ulClock
,

461 
baud_numb


464 
wr3
 = 
SCC_WR3_RX_EN
;

465 
wr4
 = 
SCC_WR4_16_CLOCK
;

466 
wr5
 = 
SCC_WR5_TX_EN
;

472 ià(
t
->
c_cæag
 & 
PARENB
) {

473 
wr4
 |ð
SCC_WR4_PAR_EN
;

474 ià(!(
t
->
c_cæag
 & 
PARODD
))

475 
wr4
 |ð
SCC_WR4_PAR_EVEN
;

482 ià(
t
->
c_cæag
 & 
CSIZE
) {

483 
t
->
c_cæag
 & 
CSIZE
) {

484 
CS5
: ;

485 
CS6
: 
wr3
 |ð
SCC_WR3_RX_6_BITS
; 
wr5
 |ð
SCC_WR5_TX_6_BITS
; ;

486 
CS7
: 
wr3
 |ð
SCC_WR3_RX_7_BITS
; 
wr5
 |ð
SCC_WR5_TX_7_BITS
; ;

487 
CS8
: 
wr3
 |ð
SCC_WR3_RX_8_BITS
; 
wr5
 |ð
SCC_WR5_TX_8_BITS
; ;

490 
wr3
 |ð
SCC_WR3_RX_8_BITS
;

491 
wr5
 |ð
SCC_WR5_TX_8_BITS
;

498 ià(
t
->
c_cæag
 & 
CSTOPB
) {

499 
wr4
 |ð
SCC_WR4_2_STOP
;

501 
wr4
 |ð
SCC_WR4_1_STOP
;

508 
	`¹ems_¼u±_di§bË
(
Irql
);

509 (*
£tReg
)Ð
ulClPÜt
, 
SCC_WR0_SEL_WR4
, 
wr4
 );

510 (*
£tReg
)Ð
ulClPÜt
, 
SCC_WR0_SEL_WR3
, 
wr3
 );

511 (*
£tReg
)Ð
ulClPÜt
, 
SCC_WR0_SEL_WR5
, 
wr5
 );

519 (*
£tReg
)Ð
ulClPÜt
, 
SCC_WR0_SEL_WR12
, 
ulBaudDivisÜ
 & 0xff );

526 (*
£tReg
)Ð
ulClPÜt
, 
SCC_WR0_SEL_WR13
, (
ulBaudDivisÜ
>>8) & 0xff );

528 
	`¹ems_¼u±_abË
(
Irql
);

531 
	}
}

539 
Z85C30_STATIC
 
	$z85c30_´oûss
(

540 
mÜ
,

541 
ut8_t
 
ucIÁPd


544 
ut32_t
 
ulClPÜt
;

545 vÞ©
ut8_t
 
z85c30_¡©us
;

546 
cCh¬
;

547 
£tRegi¡_f
 
£tReg
;

548 
gRegi¡_f
 
gReg
;

550 
ulClPÜt
 = 
CÚsÞe_PÜt_Tbl
[
mÜ
]->
ulClPÜt1
;

551 
£tReg
 = 
CÚsÞe_PÜt_Tbl
[
mÜ
]->
£tRegi¡
;

552 
gReg
 = 
CÚsÞe_PÜt_Tbl
[
mÜ
]->
gRegi¡
;

558 
ucIÁPd
&
SCC_RR3_B_RX_IP
)

560 
z85c30_¡©us
 = (*
gReg
)(
ulClPÜt
, 
SCC_WR0_SEL_RD0
);

561 ià(!
	`Z85C30_Stus_Is_RX_ch¬aù_avaabË
(
z85c30_¡©us
)) {

569 
cCh¬
 = (*
gReg
)(
ulClPÜt
, 
SCC_WR0_SEL_RD8
);

571 
	`¹ems_rmios_queue_¿w_ch¬aùs
(

572 
CÚsÞe_PÜt_D©a
[
mÜ
].
rmios_d©a
,

573 &
cCh¬
,

587 
ue
) {

588 
z85c30_¡©us
 = (*
gReg
)(
ulClPÜt
, 
SCC_WR0_SEL_RD0
);

589 ià(!
	`Z85C30_Stus_Is_TX_bufãr_em±y
(
z85c30_¡©us
)) {

599 ià(!
	`Z85C30_Stus_Is_CTS_as£¹ed
(
z85c30_¡©us
)) {

603 (*
£tReg
)(
ulClPÜt
, 
SCC_WR0_SEL_WR0
, 
SCC_WR0_RST_TX_INT
);

611 
	`¹ems_rmios_dequeue_ch¬aùs
(
CÚsÞe_PÜt_D©a
[
mÜ
].
rmios_d©a
, 1);

612 ià(
	`¹ems_rmios_dequeue_ch¬aùs
(

613 
CÚsÞe_PÜt_D©a
[
mÜ
].
rmios_d©a
, 1)) {

614 ià(
CÚsÞe_PÜt_Tbl
[
mÜ
]->
pDeviûFlow
 !ð&
z85c30_æow_RTSCTS
) {

615 
	`z85c30_Ãg©e_RTS
(
mÜ
);

617 
CÚsÞe_PÜt_D©a
[
mÜ
].
bAùive
 = 
FALSE
;

618 
	`z85c30_abË_¼u±s
(
mÜ
, 
SCC_ENABLE_ALL_INTR_EXCEPT_TX
);

619 (*
£tReg
)(
ulClPÜt
, 
SCC_WR0_SEL_WR0
, 
SCC_WR0_RST_TX_INT
);

625 ià(
ucIÁPd
 & 
SCC_RR3_B_EXT_IP
) {

629 (*
£tReg
)(
ulClPÜt
, 
SCC_WR0_SEL_WR0
, 
SCC_WR0_RST_INT
);

630 
z85c30_¡©us
 = (*
gReg
)(
ulClPÜt
, 
SCC_WR0_SEL_RD0
);

636 (*
£tReg
)(
ulClPÜt
, 
SCC_WR0_SEL_WR0
, 
SCC_WR0_RST_HI_IUS
);

637 
	}
}

645 
Z85C30_STATIC
 
¹ems_i¤
 
	$z85c30_i¤
(

646 
¹ems_veùÜ_numb
 
veùÜ


649 
mÜ
;

650 
ut32_t
 
ulClPÜt
;

651 vÞ©
ut8_t
 
ucIÁPd
;

652 vÞ©
ut8_t
 
ucIÁPdPÜt
;

653 
gRegi¡_f
 
gReg
;

655 
mÜ
=0;mÜ<
CÚsÞe_PÜt_CouÁ
;minor++) {

656 if(
CÚsÞe_PÜt_Tbl
[
mÜ
]->
ulIÁVeùÜ
 =ð
veùÜ
 &&

657 
CÚsÞe_PÜt_Tbl
[
mÜ
]->
deviûTy³
 =ð
SERIAL_Z85C30
 ) {

658 
ulClPÜt
 = 
CÚsÞe_PÜt_Tbl
[
mÜ
]->
ulClPÜt2
;

659 
gReg
 = 
CÚsÞe_PÜt_Tbl
[
mÜ
]->
gRegi¡
;

661 
ucIÁPd
 = (*
gReg
)(
ulClPÜt
, 
SCC_WR0_SEL_RD3
);

667 ià(
ulClPÜt
 =ð
CÚsÞe_PÜt_Tbl
[
mÜ
]->
ulClPÜt1
) {

668 
ucIÁPdPÜt
 = 
ucIÁPd
 >> 3;

669 
ucIÁPdPÜt
 &= 7;

671 
ucIÁPdPÜt
 = 
ucIÁPd
 &= 7;

674 ià(
ucIÁPdPÜt
) {

675 
	`z85c30_´oûss
(
mÜ
, 
ucIÁPdPÜt
);

677 } 
ucIÁPdPÜt
);

680 
	}
}

688 
Z85C30_STATIC
 
	$z85c30_abË_¼u±s
(

689 
mÜ
,

690 
¼u±_mask


693 
ut32_t
 
ulClPÜt
;

694 
£tRegi¡_f
 
£tReg
;

696 
ulClPÜt
 = 
CÚsÞe_PÜt_Tbl
[
mÜ
]->
ulClPÜt1
;

697 
£tReg
 = 
CÚsÞe_PÜt_Tbl
[
mÜ
]->
£tRegi¡
;

699 (*
£tReg
)(
ulClPÜt
, 
SCC_WR0_SEL_WR1
, 
¼u±_mask
);

700 
	}
}

708 
Z85C30_STATIC
 
	$z85c30_lize_¼u±s
(

709 
mÜ


712 
ut32_t
 
ulClPÜt1
;

713 
£tRegi¡_f
 
£tReg
;

715 
ulClPÜt1
 = 
CÚsÞe_PÜt_Tbl
[
mÜ
]->ulCtrlPort1;

716 
£tReg
 = 
CÚsÞe_PÜt_Tbl
[
mÜ
]->
£tRegi¡
;

719 
	`z85c30_
(
mÜ
);

721 
CÚsÞe_PÜt_D©a
[
mÜ
].
bAùive
=
FALSE
;

723 
	`z85c30_lize_pÜt
Ð
mÜ
 );

725 ià(
CÚsÞe_PÜt_Tbl
[
mÜ
]->
pDeviûFlow
 !ð&
z85c30_æow_RTSCTS
) {

726 
	`z85c30_Ãg©e_RTS
(
mÜ
);

729 #ià(
CPU_SIMPLE_VECTORED_INTERRUPTS
 =ð
TRUE
)

730 
	`£t_veùÜ
(
z85c30_i¤
, 
CÚsÞe_PÜt_Tbl
[
mÜ
]->
ulIÁVeùÜ
, 1);

733 
	`z85c30_abË_¼u±s
(
mÜ
, 
SCC_ENABLE_ALL_INTR_EXCEPT_TX
);

735 (*
£tReg
)(
ulClPÜt1
, 
SCC_WR0_SEL_WR2
, 0);

736 (*
£tReg
)(
ulClPÜt1
, 
SCC_WR0_SEL_WR9
, 
SCC_WR9_MIE
);

742 (*
£tReg
)(
ulClPÜt1
, 
SCC_WR0_SEL_WR0
, 
SCC_WR0_RST_INT
);

743 
	}
}

752 
Z85C30_STATIC
 
ssize_t
 
	$z85c30_wre_suµÜt_t
(

753 
mÜ
,

754 cÚ¡ *
buf
,

755 
size_t
 
Ën
)

757 
ut32_t
 
Irql
;

758 
ut32_t
 
ulClPÜt
;

759 
£tRegi¡_f
 
£tReg
;

761 
ulClPÜt
 = 
CÚsÞe_PÜt_Tbl
[
mÜ
]->
ulClPÜt1
;

762 
£tReg
 = 
CÚsÞe_PÜt_Tbl
[
mÜ
]->
£tRegi¡
;

769 iàÐ!
Ën
 )

776 ià(
CÚsÞe_PÜt_Tbl
[
mÜ
]->
pDeviûFlow
 !ð&
z85c30_æow_RTSCTS
) {

777 
	`z85c30_as£¹_RTS
(
mÜ
);

779 
	`¹ems_¼u±_di§bË
(
Irql
);

780 iàÐ
CÚsÞe_PÜt_D©a
[
mÜ
].
bAùive
 =ð
FALSE
) {

781 
CÚsÞe_PÜt_D©a
[
mÜ
].
bAùive
 = 
TRUE
;

782 
	`z85c30_abË_¼u±s
(
mÜ
, 
SCC_ENABLE_ALL_INTR
);

784 (*
£tReg
)(
ulClPÜt
, 
SCC_WR0_SEL_WR8
, *
buf
);

785 
	`¹ems_¼u±_abË
(
Irql
);

788 
	}
}

796 
Z85C30_STATIC
 
	$z85c30_by_nÚblockg_pÞËd
(

797 
mÜ


800 vÞ©
ut8_t
 
z85c30_¡©us
;

801 
ut32_t
 
ulClPÜt
;

802 
gRegi¡_f
 
gReg
;

804 
ulClPÜt
 = 
CÚsÞe_PÜt_Tbl
[
mÜ
]->
ulClPÜt1
;

805 
gReg
 = 
CÚsÞe_PÜt_Tbl
[
mÜ
]->
gRegi¡
;

810 
z85c30_¡©us
 = (*
gReg
)(
ulClPÜt
, 
SCC_WR0_SEL_RD0
);

811 ià(!
	`Z85C30_Stus_Is_RX_ch¬aù_avaabË
(
z85c30_¡©us
)) {

819  (*
gReg
)(
ulClPÜt
, 
SCC_WR0_SEL_RD8
);

820 
	}
}

829 
Z85C30_STATIC
 
ssize_t
 
	$z85c30_wre_suµÜt_pÞËd
(

830 
mÜ
,

831 cÚ¡ *
buf
,

832 
size_t
 
Ën
)

834 
nwre
=0;

839 
nwre
 < 
Ën
) {

840 
	`z85c30_wre_pÞËd
(
mÜ
, *
buf
++);

841 
nwre
++;

847  
nwre
;

848 
	}
}

856 
Z85C30_STATIC
 
	$z85c30_wre_pÞËd
(

857 
mÜ
,

858 
cCh¬


861 vÞ©
ut8_t
 
z85c30_¡©us
;

862 
ut32_t
 
ulClPÜt
;

863 
gRegi¡_f
 
gReg
;

864 
£tRegi¡_f
 
£tReg
;

866 
ulClPÜt
 = 
CÚsÞe_PÜt_Tbl
[
mÜ
]->
ulClPÜt1
;

867 
gReg
 = 
CÚsÞe_PÜt_Tbl
[
mÜ
]->
gRegi¡
;

868 
£tReg
 = 
CÚsÞe_PÜt_Tbl
[
mÜ
]->
£tRegi¡
;

874 
z85c30_¡©us
 = (*
gReg
)Ð
ulClPÜt
, 
SCC_WR0_SEL_RD0
 );

876 !
	`Z85C30_Stus_Is_TX_bufãr_em±y
(
z85c30_¡©us
)) {

881 ià(
	`_Sy¡em_¡©e_Is_up
(
	`_Sy¡em_¡©e_G
())) {

882 
	`¹ems_sk_wake_aá
(
RTEMS_YIELD_PROCESSOR
);

885 
z85c30_¡©us
 = (*
gReg
)(
ulClPÜt
, 
SCC_WR0_SEL_RD0
);

892 (*
£tReg
)Ð
ulClPÜt
, 
SCC_WR0_SEL_WR8
, 
cCh¬
 );

893 
	}
}

	@src/libchip/serial/z85c30.h

30 #iâdeà
__Z85C30_H


31 
	#__Z85C30_H


	)

33 
	~<¡dt.h
>

35 
	~<libch/£rl.h
>

37 #ifdeà
__ýlu¥lus


45 cÚ¡ 
cÚsÞe_âs
 
z85c30_âs
;

46 cÚ¡ 
cÚsÞe_âs
 
z85c30_âs_pÞËd
;

52 cÚ¡ 
cÚsÞe_æow
 
z85c30_æow_RTSCTS
;

53 cÚ¡ 
cÚsÞe_æow
 
z85c30_æow_DTRCTS
;

59 
ut8_t
 
z85c30_g_»gi¡
(

60 
u_t
 
ulClPÜt
,

61 
ut8_t
 
ucRegNum


64 
z85c30_£t_»gi¡
(

65 
u_t
 
ulClPÜt
,

66 
ut8_t
 
ucRegNum
,

67 
ut8_t
 
ucD©a


70 
ut8_t
 
z85c30_g_d©a
(

71 
ut32_t
 
ulD©aPÜt


74 
z85c30_£t_d©a
(

75 
ut32_t
 
ulD©aPÜt
,

76 
ut8_t
 
ucD©a


79 #ifdeà
__ýlu¥lus


	@src/libchip/serial/z85c30_p.h

26 #iâdeà
__Z85C30_P_H


27 
	#__Z85C30_P_H


	)

29 #ifdeà
__ýlu¥lus


38 
	#Z85C30_STATIC


	)

45 
	#SCC_WR0_SEL_WR0
 0x00

	)

46 
	#SCC_WR0_SEL_WR1
 0x01

	)

47 
	#SCC_WR0_SEL_WR2
 0x02

	)

48 
	#SCC_WR0_SEL_WR3
 0x03

	)

49 
	#SCC_WR0_SEL_WR4
 0x04

	)

50 
	#SCC_WR0_SEL_WR5
 0x05

	)

51 
	#SCC_WR0_SEL_WR6
 0x06

	)

52 
	#SCC_WR0_SEL_WR7
 0x07

	)

53 
	#SCC_WR0_SEL_WR8
 0x08

	)

54 
	#SCC_WR0_SEL_WR9
 0x09

	)

55 
	#SCC_WR0_SEL_WR10
 0x0a

	)

56 
	#SCC_WR0_SEL_WR11
 0x0b

	)

57 
	#SCC_WR0_SEL_WR12
 0x0c

	)

58 
	#SCC_WR0_SEL_WR13
 0x0d

	)

59 
	#SCC_WR0_SEL_WR14
 0x0e

	)

60 
	#SCC_WR0_SEL_WR15
 0x0f

	)

61 
	#SCC_WR0_SEL_RD0
 0x00

	)

62 
	#SCC_WR0_SEL_RD1
 0x01

	)

63 
	#SCC_WR0_SEL_RD2
 0x02

	)

64 
	#SCC_WR0_SEL_RD3
 0x03

	)

65 
	#SCC_WR0_SEL_RD4
 0x04

	)

66 
	#SCC_WR0_SEL_RD5
 0x05

	)

67 
	#SCC_WR0_SEL_RD6
 0x06

	)

68 
	#SCC_WR0_SEL_RD7
 0x07

	)

69 
	#SCC_WR0_SEL_RD8
 0x08

	)

70 
	#SCC_WR0_SEL_RD9
 0x09

	)

71 
	#SCC_WR0_SEL_RD10
 0x0a

	)

72 
	#SCC_WR0_SEL_RD11
 0x0b

	)

73 
	#SCC_WR0_SEL_RD12
 0x0c

	)

74 
	#SCC_WR0_SEL_RD13
 0x0d

	)

75 
	#SCC_WR0_SEL_RD14
 0x0e

	)

76 
	#SCC_WR0_SEL_RD15
 0x0f

	)

77 
	#SCC_WR0_NULL_CODE
 0x00

	)

78 
	#SCC_WR0_RST_INT
 0x10

	)

79 
	#SCC_WR0_SEND_ABORT
 0x18

	)

80 
	#SCC_WR0_EN_INT_RX
 0x20

	)

81 
	#SCC_WR0_RST_TX_INT
 0x28

	)

82 
	#SCC_WR0_ERR_RST
 0x30

	)

83 
	#SCC_WR0_RST_HI_IUS
 0x38

	)

84 
	#SCC_WR0_RST_RX_CRC
 0x40

	)

85 
	#SCC_WR0_RST_TX_CRC
 0x80

	)

86 
	#SCC_WR0_RST_TX_UND
 0xc0

	)

94 
	#SCC_WR1_EXT_INT_EN
 0x01

	)

95 
	#SCC_WR1_TX_INT_EN
 0x02

	)

96 
	#SCC_WR1_PARITY
 0x04

	)

97 
	#SCC_WR1_RX_INT_DIS
 0x00

	)

98 
	#SCC_WR1_RX_INT_FIR
 0x08

	)

99 
	#SCC_WR1_INT_ALL_RX
 0x10

	)

100 
	#SCC_WR1_RX_INT_SPE
 0x18

	)

101 
	#SCC_WR1_RDMA_RECTR
 0x20

	)

102 
	#SCC_WR1_RDMA_FUNC
 0x40

	)

103 
	#SCC_WR1_RDMA_EN
 0x80

	)

105 
	#SCC_ENABLE_ALL_INTR
 \

106 (
SCC_WR1_EXT_INT_EN
 | 
SCC_WR1_TX_INT_EN
 | 
SCC_WR1_INT_ALL_RX
)

	)

108 
	#SCC_DISABLE_ALL_INTR
 0x00

	)

110 
	#SCC_ENABLE_ALL_INTR_EXCEPT_TX
 \

111 (
SCC_WR1_EXT_INT_EN
 | 
SCC_WR1_INT_ALL_RX
)

	)

116 
	#SCC_WR3_RX_EN
 0x01

	)

117 
	#SCC_WR3_SYNC_CHAR
 0x02

	)

118 
	#SCC_WR3_ADR_SEARCH
 0x04

	)

119 
	#SCC_WR3_RX_CRC_EN
 0x08

	)

120 
	#SCC_WR3_ENTER_HUNT
 0x10

	)

121 
	#SCC_WR3_AUTO_EN
 0x20

	)

122 
	#SCC_WR3_RX_5_BITS
 0x00

	)

123 
	#SCC_WR3_RX_7_BITS
 0x40

	)

124 
	#SCC_WR3_RX_6_BITS
 0x80

	)

125 
	#SCC_WR3_RX_8_BITS
 0xc0

	)

130 
	#SCC_WR4_PAR_EN
 0x01

	)

131 
	#SCC_WR4_PAR_EVEN
 0x02

	)

132 
	#SCC_WR4_SYNC_EN
 0x00

	)

133 
	#SCC_WR4_1_STOP
 0x04

	)

134 
	#SCC_WR4_2_STOP
 0x0c

	)

135 
	#SCC_WR4_8_SYNC
 0x00

	)

136 
	#SCC_WR4_16_SYNC
 0x10

	)

137 
	#SCC_WR4_SDLC
 0x20

	)

138 
	#SCC_WR4_EXT_SYNC
 0x30

	)

139 
	#SCC_WR4_1_CLOCK
 0x00

	)

140 
	#SCC_WR4_16_CLOCK
 0x40

	)

141 
	#SCC_WR4_32_CLOCK
 0x80

	)

142 
	#SCC_WR4_64_CLOCK
 0xc0

	)

147 
	#SCC_WR5_TX_CRC_EN
 0x01

	)

148 
	#SCC_WR5_RTS
 0x02

	)

149 
	#SCC_WR5_SDLC
 0x04

	)

150 
	#SCC_WR5_TX_EN
 0x08

	)

151 
	#SCC_WR5_SEND_BRK
 0x10

	)

153 
	#SCC_WR5_TX_5_BITS
 0x00

	)

154 
	#SCC_WR5_TX_7_BITS
 0x20

	)

155 
	#SCC_WR5_TX_6_BITS
 0x40

	)

156 
	#SCC_WR5_TX_8_BITS
 0x60

	)

157 
	#SCC_WR5_DTR
 0x80

	)

171 
	#SCC_WR9_VIS
 0x01

	)

172 
	#SCC_WR9_NV
 0x02

	)

173 
	#SCC_WR9_DLC
 0x04

	)

174 
	#SCC_WR9_MIE
 0x08

	)

175 
	#SCC_WR9_STATUS_HI
 0x10

	)

176 
	#SCC_WR9_NO_RST
 0x00

	)

177 
	#SCC_WR9_CH_B_RST
 0x40

	)

178 
	#SCC_WR9_CH_A_RST
 0x80

	)

179 
	#SCC_WR9_HDWR_RST
 0xc0

	)

184 
	#SCC_WR10_6_BIT_SYNC
 0x01

	)

185 
	#SCC_WR10_LOOP_MODE
 0x02

	)

186 
	#SCC_WR10_ABORT_UND
 0x04

	)

187 
	#SCC_WR10_MARK_IDLE
 0x08

	)

188 
	#SCC_WR10_ACT_POLL
 0x10

	)

189 
	#SCC_WR10_NRZ
 0x00

	)

190 
	#SCC_WR10_NRZI
 0x20

	)

191 
	#SCC_WR10_FM1
 0x40

	)

192 
	#SCC_WR10_FM0
 0x60

	)

193 
	#SCC_WR10_CRC_PRESET
 0x80

	)

198 
	#SCC_WR11_OUT_XTAL
 0x00

	)

199 
	#SCC_WR11_OUT_TX_CLK
 0x01

	)

200 
	#SCC_WR11_OUT_BR_GEN
 0x02

	)

201 
	#SCC_WR11_OUT_DPLL
 0x03

	)

202 
	#SCC_WR11_TRXC_OI
 0x04

	)

203 
	#SCC_WR11_TX_RTXC
 0x00

	)

204 
	#SCC_WR11_TX_TRXC
 0x08

	)

205 
	#SCC_WR11_TX_BR_GEN
 0x10

	)

206 
	#SCC_WR11_TX_DPLL
 0x18

	)

207 
	#SCC_WR11_RX_RTXC
 0x00

	)

208 
	#SCC_WR11_RX_TRXC
 0x20

	)

209 
	#SCC_WR11_RX_BR_GEN
 0x40

	)

210 
	#SCC_WR11_RX_DPLL
 0x60

	)

211 
	#SCC_WR11_RTXC_XTAL
 0x80

	)

222 
	#SCC_WR14_BR_EN
 0x01

	)

223 
	#SCC_WR14_BR_SRC
 0x02

	)

224 
	#SCC_WR14_DTR_FUNC
 0x04

	)

225 
	#SCC_WR14_AUTO_ECHO
 0x08

	)

226 
	#SCC_WR14_LCL_LOOP
 0x10

	)

227 
	#SCC_WR14_NULL
 0x00

	)

228 
	#SCC_WR14_SEARCH
 0x20

	)

229 
	#SCC_WR14_RST_CLK
 0x40

	)

230 
	#SCC_WR14_DIS_DPLL
 0x60

	)

231 
	#SCC_WR14_SRC_BR
 0x80

	)

232 
	#SCC_WR14_SRC_RTXC
 0xa0

	)

233 
	#SCC_WR14_FM_MODE
 0xc0

	)

234 
	#SCC_WR14_NRZI
 0xe0

	)

239 
	#SCC_WR15_ZERO_CNT
 0x02

	)

240 
	#SCC_WR15_CD_IE
 0x08

	)

241 
	#SCC_WR15_SYNC_IE
 0x10

	)

242 
	#SCC_WR15_CTS_IE
 0x20

	)

243 
	#SCC_WR15_TX_UND_IE
 0x40

	)

244 
	#SCC_WR15_BREAK_IE
 0x80

	)

249 
	#SCC_RR0_RX_AVAIL
 0x01

	)

250 
	#SCC_RR0_ZERO_CNT
 0x02

	)

251 
	#SCC_RR0_TX_EMPTY
 0x04

	)

252 
	#SCC_RR0_CD
 0x08

	)

253 
	#SCC_RR0_SYNC
 0x10

	)

254 
	#SCC_RR0_CTS
 0x20

	)

255 
	#SCC_RR0_TX_UND
 0x40

	)

256 
	#SCC_RR0_BREAK
 0x80

	)

260 
	#SCC_RR1_ALL_SENT
 0x01

	)

261 
	#SCC_RR1_RES_CD_2
 0x02

	)

262 
	#SCC_RR1_RES_CD_1
 0x01

	)

263 
	#SCC_RR1_RES_CD_0
 0x08

	)

264 
	#SCC_RR1_PAR_ERR
 0x10

	)

265 
	#SCC_RR1_RX_OV_ERR
 0x20

	)

266 
	#SCC_RR1_CRC_ERR
 0x40

	)

267 
	#SCC_RR1_END_FRAME
 0x80

	)

275 
	#SCC_RR3_B_EXT_IP
 0x01

	)

276 
	#SCC_RR3_B_TX_IP
 0x02

	)

277 
	#SCC_RR3_B_RX_IP
 0x04

	)

278 
	#SCC_RR3_A_EXT_IP
 0x08

	)

279 
	#SCC_RR3_A_TX_IP
 0x10

	)

280 
	#SCC_RR3_A_RX_IP
 0x20

	)

288 
	#SCC_RR10_ON_LOOP
 0x02

	)

289 
	#SCC_RR10_LOOP_SEND
 0x10

	)

290 
	#SCC_RR10_2_CLK_MIS
 0x40

	)

291 
	#SCC_RR10_1_CLK_MIS
 0x80

	)

302 
	#SCC_RR15_ZERO_CNT
 0x02

	)

303 
	#SCC_RR15_CD_IE
 0x08

	)

304 
	#SCC_RR15_SYNC_IE
 0x10

	)

305 
	#SCC_RR15_CTS_IE
 0x20

	)

306 
	#SCC_RR15_TX_UND_IE
 0x40

	)

307 
	#SCC_RR15_BREAK_IE
 0x80

	)

309 
	s_z85c30_cÚxt


311 
ut8_t
 
ucModemCl
;

312 } 
	tz85c30_cÚxt
;

321 
	#Z85C30_Baud
Ð
_þock
, 
_baud_¿
 ) \

322 Ð((
_þock
è/Ð16 * 2 * 
_baud_¿
)è- 2)

	)

324 
	#Z85C30_Stus_Is_RX_ch¬aù_avaabË
(
_¡©us
) \

325 ((
_¡©us
è& 
SCC_RR0_RX_AVAIL
)

	)

327 
	#Z85C30_Stus_Is_TX_bufãr_em±y
(
_¡©us
) \

328 ((
_¡©us
è& 
SCC_RR0_TX_EMPTY
)

	)

330 
	#Z85C30_Stus_Is_CTS_as£¹ed
(
_¡©us
) \

331 ((
_¡©us
è& 
SCC_RR0_CTS
)

	)

333 
	#Z85C30_Stus_Is_b»ak_abÜt
(
_¡©us
) \

334 ((
_¡©us
è& 
SCC_RR0_BREAK
)

	)

340 
Z85C30_STATIC
 
z85c30_lize_pÜt
(

341 
mÜ


344 
Z85C30_STATIC
 
z85c30_
(
mÜ
);

346 
Z85C30_STATIC
 
z85c30_£t_©ibus
(

347 
mÜ
,

348 cÚ¡ 
rmios
 *
t


351 
Z85C30_STATIC
 
z85c30_Ý
(

352 
majÜ
,

353 
mÜ
,

354 * 
¬g


357 
Z85C30_STATIC
 
z85c30_þo£
(

358 
majÜ
,

359 
mÜ
,

360 * 
¬g


363 
Z85C30_STATIC
 
z85c30_wre_pÞËd
(

364 
mÜ
,

365 
cCh¬


368 
Z85C30_STATIC
 
z85c30_as£¹_RTS
(

369 
mÜ


372 
Z85C30_STATIC
 
z85c30_Ãg©e_RTS
(

373 
mÜ


376 
Z85C30_STATIC
 
z85c30_as£¹_DTR
(

377 
mÜ


380 
Z85C30_STATIC
 
z85c30_Ãg©e_DTR
(

381 
mÜ


384 
Z85C30_STATIC
 
z85c30_lize_¼u±s
(
mÜ
);

386 
Z85C30_STATIC
 
ssize_t
 
z85c30_wre_suµÜt_t
(

387 
mÜ
,

388 cÚ¡ *
buf
,

389 
size_t
 
Ën


392 
Z85C30_STATIC
 
ssize_t
 
z85c30_wre_suµÜt_pÞËd
(

393 
mÜ
,

394 cÚ¡ *
buf
,

395 
size_t
 
Ën


398 
Z85C30_STATIC
 
z85c30_by_nÚblockg_pÞËd
(

399 
mÜ


402 
Z85C30_STATIC
 
z85c30_abË_¼u±s
(

403 
mÜ
,

404 
¼u±_mask


407 
Z85C30_STATIC
 
z85c30_´oûss
(

408 
mÜ
,

409 
ut8_t
 
ucIÁPd


412 
Z85C30_STATIC
 
¹ems_i¤
 
z85c30_i¤
(

413 
¹ems_veùÜ_numb
 
veùÜ


416 #ifdeà
__ýlu¥lus


	@src/libchip/serial/z85c30_reg.c

15 
	~<¹ems.h
>

17 
	~<libch/z85c30.h
>

19 #iâdeà
_Z85C30_MULTIPLIER


20 
	#_Z85C30_MULTIPLIER
 1

	)

21 
	#_Z85C30_NAME
(
_X
è
	)
_X

22 
	#_Z85C30_TYPE
 
ut8_t


	)

29 
ut8_t
 
	$_Z85C30_NAME
(
z85c30_g_»gi¡
)(

30 
u_t
 
ulClPÜt
,

31 
ut8_t
 
ucRegNum


34 
_Z85C30_TYPE
 *
pÜt
;

35 
ut8_t
 
d©a
;

36 
¹ems_¼u±_Ëv
 
Ëv
;

38 
pÜt
 = (
_Z85C30_TYPE
 *)
ulClPÜt
;

40 
	`¹ems_¼u±_di§bË
(
Ëv
);

42 if(
ucRegNum
) {

43 *
pÜt
 = 
ucRegNum
;

45 
d©a
 = *
pÜt
;

46 
	`¹ems_¼u±_abË
(
Ëv
);

48  
d©a
;

49 
	}
}

55 
	$_Z85C30_NAME
(
z85c30_£t_»gi¡
)(

56 
u_t
 
ulClPÜt
,

57 
ut8_t
 
ucRegNum
,

58 
ut8_t
 
ucD©a


61 
_Z85C30_TYPE
 *
pÜt
;

62 
¹ems_¼u±_Ëv
 
Ëv
;

64 
pÜt
 = (
_Z85C30_TYPE
 *)
ulClPÜt
;

66 
	`¹ems_¼u±_di§bË
(
Ëv
);

67 if(
ucRegNum
) {

68 *
pÜt
 = 
ucRegNum
;

70 *
pÜt
 = 
ucD©a
;

71 
	`¹ems_¼u±_abË
(
Ëv
);

72 
	}
}

	@src/libchip/shmdr/addlq.c

19 
	~<¹ems.h
>

20 
	~"shm_driv.h
"

22 
	$Shm_Locked_queue_Add
(

23 
Shm_Locked_queue_CÚÞ
 *
lq_cb
,

24 
Shm_EnvÝe_cÚÞ
 *
ecb


27 
ut32_t
 
dex
;

29 
ecb
->
Ãxt
 = 
Shm_Locked_queue_End_of_li¡
;

30 
ecb
->
queue
 = 
lq_cb
->
owÃr
;

31 
dex
 = 
ecb
->index;

33 
	`Shm_Lock
Ð
lq_cb
 );

34 iàÐ
	`Shm_CÚvt
(
lq_cb
->
äÚt
è!ð
Shm_Locked_queue_End_of_li¡
 )

35 
Shm_EnvÝes
[ 
	`Shm_CÚvt
(
lq_cb
->
»¬
è].
Ãxt
 = 
dex
;

37 
lq_cb
->
äÚt
 = 
dex
;

38 
lq_cb
->
»¬
 = 
dex
;

39 
	`Shm_UÆock
Ð
lq_cb
 );

40 
	}
}

	@src/libchip/shmdr/cnvpkt.c

24 
	~<¹ems.h
>

25 
	~"shm_driv.h
"

27 
	$Shm_CÚvt_·ck
(

28 
¹ems_·ck_´efix
 *
·ck


31 
ut32_t
 *
pkt
, 
i
;

33 
pkt
 = (
ut32_t
*è
·ck
;

34  
i
=
RTEMS_MINIMUN_HETERO_CONVERSION
 ; i ; i--, 
pkt
++ )

35 *
pkt
 = 
	`CPU_sw­_u32
( *pkt );

37  
i
=
·ck
->
to_cÚvt
 ; i ; i--, 
pkt
++ )

38 *
pkt
 = 
	`CPU_sw­_u32
( *pkt );

39 
	}
}

	@src/libchip/shmdr/dump.c

17 
	~<¹ems.h
>

18 
	~<¡dio.h
>

19 
	~<y³s.h
>

20 
	~<¹ems/b¥Io.h
>

22 
	~"shm_driv.h
"

25 
	$Shm_Prt_¡©i¡ics
()

27 
ut32_t
 
ticks
;

28 
ut32_t
 
ticks_³r_£cÚd
;

29 
ut32_t
 
£cÚds
;

30 
·cks_³r_£cÚd
;

32 
ticks
 = 
	`¹ems_þock_g_ticks_sû_boÙ
();

33 
ticks_³r_£cÚd
 = 
	`¹ems_þock_g_ticks_³r_£cÚd
();

35 
£cÚds
 = 
ticks
 / 
ticks_³r_£cÚd
;

36 iàÐ
£cÚds
 == 0 )

37 
£cÚds
 = 1;

39 
·cks_³r_£cÚd
 = 
Shm_Reûive_mes§ge_couÁ
 / 
£cÚds
;

40 iàÐ(
Shm_Reûive_mes§ge_couÁ
 % 
£cÚds
) >= (seconds / 2) )

41 
·cks_³r_£cÚd
++;

43 
	`´tk
Ð"\n\nSHMDR STATISTICS (NODE %" 
PRId32
 ")\n",

44 
MuÉroûssg_cÚfigu¿tiÚ
.
node
 );

45 
	`´tk
Ð"TICKS SINCE BOOT = %" 
PRId32
 "\n", 
ticks
 );

46 
	`´tk
Ð"TICKS PER SECOND = %" 
PRId32
 "\n", 
ticks_³r_£cÚd
 );

47 
	`´tk
Ð"ISRs=%" 
PRId32
 "\n", 
Shm_IÁru±_couÁ
 );

48 
	`´tk
Ð"RECV=%" 
PRId32
 "\n", 
Shm_Reûive_mes§ge_couÁ
 );

49 
	`´tk
Ð"NULL=%" 
PRId32
 "\n", 
Shm_NuÎ_mes§ge_couÁ
 );

50 
	`´tk
Ð"PKTS/SEC=%" 
PRId32
 "\n", 
·cks_³r_£cÚd
 );

51 
	}
}

	@src/libchip/shmdr/fatal.c

18 
	~<¹ems.h
>

19 
	~"shm_driv.h
"

21 
	$MPCI_F©®
(

22 
IÁÇl_rÜs_Sourû
 
sourû
,

23 
boÞ
 
is_º®
,

24 
ut32_t
 
rÜ


35 
Shm_Loÿl_node_¡©us
->
rÜ
 = 
	`Shm_CÚvt
(error);

36 
	}
}

	@src/libchip/shmdr/getlq.c

21 
	~<¹ems.h
>

22 
	~<shm_driv.h
>

24 
Shm_EnvÝe_cÚÞ
 *
	$Shm_Locked_queue_G
(

25 
Shm_Locked_queue_CÚÞ
 *
lq_cb


28 
Shm_EnvÝe_cÚÞ
 *
tmp_ecb
;

29 
ut32_t
 
tmpäÚt
;

31 
tmp_ecb
 = 
NULL
;

32 
	`Shm_Lock
Ð
lq_cb
 );

34 
tmpäÚt
 = 
	`Shm_CÚvt
(
lq_cb
->
äÚt
);

35 iàÐ
tmpäÚt
 !ð
Shm_Locked_queue_End_of_li¡
 ) {

36 
tmp_ecb
 = &
Shm_EnvÝes
[ 
tmpäÚt
 ];

37 
lq_cb
->
äÚt
 = 
tmp_ecb
->
Ãxt
;

38 iàÐ
tmp_ecb
->
Ãxt
 =ð
Shm_Locked_queue_End_of_li¡
 )

39 
lq_cb
->
»¬
 = 
Shm_Locked_queue_End_of_li¡
;

40 
tmp_ecb
->
Ãxt
 = 
Shm_Locked_queue_NÙ_Ú_li¡
;

43 
	`Shm_UÆock
Ð
lq_cb
 );

44 Ð
tmp_ecb
 );

45 
	}
}

	@src/libchip/shmdr/getpkt.c

20 
	~<¹ems.h
>

21 
	~"shm_driv.h
"

23 
¹ems_mpci_y
 
	$Shm_G_·ck
(

24 
¹ems_·ck_´efix
 **
·ck


27 
Shm_EnvÝe_cÚÞ
 *
ecb
;

29 
ecb
 = 
	`Shm_AÎoÿ_vÝe
();

30 iàÐ!
ecb
 )

31 
	`¹ems_çl_rÜ_occu¼ed
 ( 
SHM_NO_FREE_PKTS
 );

32 *
·ck
 = 
	`Shm_EnvÝe_cÚÞ_to_·ck_´efix_por
Ð
ecb
 );

33 
	}
}

	@src/libchip/shmdr/init.c

18 
	#_SHM_INIT


	)

20 
	~<¹ems.h
>

21 
	~<shm_driv.h
>

23 
	~<¡rg.h
>

24 
	~<¡dlib.h
>

25 
	~<as£¹.h
>

32 
¹ems_exnsiÚs_bË
 
	gMPCI_Shm_exnsiÚs
;

38 
¹ems_mpci_y
 
	$Shm_Inliz©iÚ
( )

41 
ut32_t
 
i
, 
®l_lized
;

42 
ut32_t
 
¼u±_ÿu£
, 
¼u±_v®ue
;

43 *
¼u±_add»ss
;

44 
Shm_Node_¡©us_cÚÞ
 *
nscb
;

45 
ut32_t
 
exnsiÚ_id
;

46 
ut32_t
 
»mag_memÜy
;

47 
ut32_t
 
loÿl_node
;

49 
loÿl_node
 = 
_CÚfigu¿tiÚ_MP_bË
->
node
;

51 
	`Shm_G_cÚfigu¿tiÚ
Ð
loÿl_node
, &
Shm_CÚfigu¿tiÚ
 );

53 
Shm_IÁru±_bË
 = (
Shm_IÁru±_fÜm©iÚ
 *è
	`m®loc
(

54 (
Shm_IÁru±_fÜm©iÚ
è* (
SHM_MAXIMUM_NODES
 + 1)

57 
	`as£¹
Ð
Shm_IÁru±_bË
 );

59 
Shm_Reûive_mes§ge_couÁ
 = 0;

60 
Shm_NuÎ_mes§ge_couÁ
 = 0;

61 
Shm_IÁru±_couÁ
 = 0;

67 
Shm_Pdg_liz©iÚ
 =

68 
	`Shm_CÚvt
(
	`¹ems_bud_Çme
( 'P', 'E', 'N', 'D' ));

69 
Shm_Inliz©iÚ_com¶e
 =

70 
	`Shm_CÚvt
(
	`¹ems_bud_Çme
( 'C', 'O', 'M', 'P' ));

71 
Shm_Aùive_node
 =

72 
	`Shm_CÚvt
(
	`¹ems_bud_Çme
( 'A', 'C', 'T', 'V' ));

78 
Shm_Locked_queue_End_of_li¡
 = 
	`Shm_CÚvt
( 0xffffffff );

79 
Shm_Locked_queue_NÙ_Ú_li¡
 = 
	`Shm_CÚvt
( 0xfffffffe );

88 
Shm_Node_¡©u£s
 = (
Shm_Node_¡©us_cÚÞ
 *è
START_NS_CBS
;

89 
Shm_Locked_queues
 = (
Shm_Locked_queue_CÚÞ
 *è
START_LQ_CBS
;

90 
Shm_EnvÝes
 = (
Shm_EnvÝe_cÚÞ
 *è
START_ENVELOPES
;

97 
»mag_memÜy
 =

98 ((*)
Shm_CÚfigu¿tiÚ
->
ba£
 + Shm_CÚfigu¿tiÚ->
Ëngth
) -

99 ((*)
Shm_EnvÝes
);

101 
Shm_Maximum_vÝes
 = 
»mag_memÜy
 / Ð
Shm_EnvÝe_cÚÞ
 );

102 
Shm_Maximum_vÝes
 -= 1;

110 
Shm_Loÿl_»ûive_queue
 = &
Shm_Locked_queues
[ 
loÿl_node
 ];

111 
Shm_Loÿl_node_¡©us
 = &
Shm_Node_¡©u£s
[ 
loÿl_node
 ];

119 
¼u±_add»ss
 =

120 (*è
	`Shm_CÚvt
Ð(
ut32_t
)
Shm_CÚfigu¿tiÚ
->
IÁr
.
add»ss
 );

121 
¼u±_v®ue
 = 
	`Shm_CÚvt
Ð
Shm_CÚfigu¿tiÚ
->
IÁr
.
v®ue
 );

122 
¼u±_ÿu£
 = 
	`Shm_CÚvt
Ð
Shm_CÚfigu¿tiÚ
->
IÁr
.
Ëngth
 );

124 iàÐ
Shm_CÚfigu¿tiÚ
->
pÞl_
 =ð
POLLED_MODE
 ) 
	`Shm_¡®l_tim
();

125 
	`Shm_£tvec
();

127 iàÐ
	`Shm_Is_ma¡_node
() ) {

133 (è
	`mem£t
(

134 (*è
Shm_CÚfigu¿tiÚ
->
ba£
,

136 
Shm_CÚfigu¿tiÚ
->
Ëngth


146 
	`Shm_Locked_queue_Inlize
Ð
FREE_ENV_CB
, 
FREE_ENV_POOL
 );

148  
i
=
SHM_FIRST_NODE
 ; i<=
SHM_MAXIMUM_NODES
 ; i++ ) {

149 
	`Shm_Inlize_»ûive_queue
Ð
i
 );

151 
Shm_Node_¡©u£s
[ 
i
 ].
¡©us
 = 
Shm_Pdg_liz©iÚ
;

152 
Shm_Node_¡©u£s
[ 
i
 ].
rÜ
 = 0;

160  
i
=0 ; i<
Shm_Maximum_vÝes
 ; i++ ) {

161 
Shm_EnvÝes
[ 
i
 ].
dex
 = 
	`Shm_CÚvt
(i);

162 
	`Shm_F»e_vÝe
Ð&
Shm_EnvÝes
[ 
i
 ] );

170 
Shm_Loÿl_node_¡©us
->
t_add»ss
 = (
ut32_t
è
¼u±_add»ss
;

171 
Shm_Loÿl_node_¡©us
->
t_v®ue
 = 
¼u±_v®ue
;

172 
Shm_Loÿl_node_¡©us
->
t_Ëngth
 = 
¼u±_ÿu£
;

174 
Shm_Loÿl_node_¡©us
->
¡©us
 = 
Shm_Inliz©iÚ_com¶e
;

181 
®l_lized
 = 1;

183  
i
 = 
SHM_FIRST_NODE
 ; i <ð
SHM_MAXIMUM_NODES
 ; i++ )

184 iàÐ
Shm_Node_¡©u£s
[ 
i
 ].
¡©us
 !ð
Shm_Inliz©iÚ_com¶e
 )

185 
®l_lized
 = 0;

187 }  
®l_lized
 == 0 );

193  
i
 = 
SHM_FIRST_NODE
 ; i <ð
SHM_MAXIMUM_NODES
 ; i++ )

194 
Shm_Node_¡©u£s
[ 
i
 ].
¡©us
 = 
Shm_Aùive_node
;

206 
Shm_Loÿl_node_¡©us
->
¡©us
 = 
Shm_Pdg_liz©iÚ
;

210 iàÐ
Shm_Loÿl_node_¡©us
->
¡©us
 =ð
Shm_Pdg_liz©iÚ
 ) {

217 
Shm_Loÿl_node_¡©us
->
t_add»ss
 =

218 (
ut32_t
è
¼u±_add»ss
;

219 
Shm_Loÿl_node_¡©us
->
t_v®ue
 = 
¼u±_v®ue
;

220 
Shm_Loÿl_node_¡©us
->
t_Ëngth
 = 
¼u±_ÿu£
;

222 
Shm_Loÿl_node_¡©us
->
¡©us
 = 
Shm_Inliz©iÚ_com¶e
;

224 }  
Shm_Loÿl_node_¡©us
->
¡©us
 !ð
Shm_Aùive_node
 ) ;

231  
i
 = 
SHM_FIRST_NODE
 ; i <ð
SHM_MAXIMUM_NODES
 ; i++ ) {

232 
nscb
 = &
Shm_Node_¡©u£s
[ 
i
 ];

234 
Shm_IÁru±_bË
[
i
].
add»ss
 = 
	`Shm_CÚvt_add»ss
(

235 (*)
	`Shm_CÚvt
(((
vÞ_u32
è
nscb
->
t_add»ss
))

237 
Shm_IÁru±_bË
[
i
].
v®ue
 = 
	`Shm_CÚvt
Ð
nscb
->
t_v®ue
 );

238 
Shm_IÁru±_bË
[
i
].
Ëngth
 = 
	`Shm_CÚvt
Ð
nscb
->
t_Ëngth
 );

241 
MPCI_Shm_exnsiÚs
.
çl
 = 
MPCI_F©®
;

243 (è
	`¹ems_exnsiÚ_ü
(

244 
	`¹ems_bud_Çme
( 'M', 'P', 'E', 'X' ),

245 &
MPCI_Shm_exnsiÚs
,

246 &
exnsiÚ_id


248 
	}
}

	@src/libchip/shmdr/initlq.c

20 
	~<¹ems.h
>

21 
	~"shm_driv.h
"

23 
	$Shm_Locked_queue_Inlize
(

24 
Shm_Locked_queue_CÚÞ
 *
lq_cb
,

25 
ut32_t
 
owÃr


28 
	`Shm_Inlize_lock
Ð
lq_cb
 );

29 
lq_cb
->
äÚt
 = 
Shm_Locked_queue_End_of_li¡
;

30 
lq_cb
->
»¬
 = 
Shm_Locked_queue_End_of_li¡
;

31 
lq_cb
->
owÃr
 = 
	`Shm_CÚvt
(owner);

32 
	}
}

	@src/libchip/shmdr/intr.c

23 
	~<¹ems.h
>

24 
	~"shm_driv.h
"

26 
	$Shm_Cau£_¼u±
(

27 
ut32_t
 
node


30 
Shm_IÁru±_fÜm©iÚ
 *

;

31 
ut8_t
 *
u8
;

32 
ut16_t
 *
u16
;

33 
ut32_t
 *
u32
;

34 
ut32_t
 
v®ue
;

36 

 = &
Shm_IÁru±_bË
[
node
];

37 
v®ue
 = 

->value;

39  

->
Ëngth
 ) {

40 
NO_INTERRUPT
:

42 
BYTE
:

43 
u8
 = (
ut8_t
*)

->
add»ss
;

44 *
u8
 = (
ut8_t
è
v®ue
;

46 
WORD
:

47 
u16
 = (
ut16_t
*)

->
add»ss
;

48 *
u16
 = (
ut16_t
è
v®ue
;

50 
LONG
:

51 
u32
 = (
ut32_t
*)

->
add»ss
;

52 *
u32
 = (
ut32_t
è
v®ue
;

55 
	}
}

	@src/libchip/shmdr/mpci.h

15 #iâdeà
__SHM_MPCI_h


16 
	#__SHM_MPCI_h


	)

18 #ifdeà
__ýlu¥lus


22 
	~<shm_driv.h
>

24 
	#MPCI_Inliz©iÚ
Ð
_cÚfigu¿tiÚ
 ) \

25 
	`Shm_Inliz©iÚ
Ð
_cÚfigu¿tiÚ
 )

	)

27 
	#MPCI_G_·ck
Ð
_the_·ck
 ) \

28 
	`Shm_G_·ck
Ð
_the_·ck
 )

	)

30 
	#MPCI_Ruº_·ck
Ð
_the_·ck
 ) \

31 
	`Shm_Ruº_·ck
Ð
_the_·ck
 )

	)

33 
	#MPCI_Reûive_·ck
Ð
_the_·ck
 ) \

34 
	`Shm_Reûive_·ck
Ð
_the_·ck
 )

	)

36 
	#MPCI_Sd_·ck
Ð
_de¡©iÚ
, 
_the_·ck
 ) \

37 
	`Shm_Sd_·ck
Ð
_de¡©iÚ
, 
_the_·ck
 )

	)

44 
	#MPCI_EÇbË_¡©i¡ics
()

	)

46 
	#MPCI_Prt_¡©i¡ics
() \

47 
	`Shm_Prt_¡©i¡ics
()

	)

51 #ifdeà
__ýlu¥lus


	@src/libchip/shmdr/mpisr.c

11 
	~<¹ems.h
>

12 
	~"shm_driv.h
"

14 
	$Shm_i¤
()

16 
Shm_IÁru±_couÁ
 += 1;

17 
	`¹ems_muÉroûssg_ªnounû
();

18 
	}
}

	@src/libchip/shmdr/poll.c

13 
	~<¹ems.h
>

14 
	~<¹ems/scÜe/sys¡©e.h
>

15 
	~<¹ems/libio.h
>

17 
	~<as£¹.h
>

19 
	~"shm_driv.h
"

21 
¹ems_tim_£rviû_route
 
	$Shm_PÞl_TSR
(

22 
¹ems_id
 
id
,

23 *
ignÜed_add»ss


26 
ut32_t
 
tmpäÚt
;

31 ià(!
	`_Sy¡em_¡©e_Is_up
(
	`_Sy¡em_¡©e_G
()))

34 
tmpäÚt
 = 
Shm_Loÿl_»ûive_queue
->
äÚt
;

35 iàÐ
	`Shm_CÚvt
(
tmpäÚt
è!ð
Shm_Locked_queue_End_of_li¡
 ) {

36 
	`¹ems_muÉroûssg_ªnounû
();

37 
Shm_IÁru±_couÁ
++;

40 (è
	`¹ems_tim_»£t
Ð
id
 );

41 
	}
}

43 
	$Shm_¡®l_tim
()

45 
¹ems_id
 
id
;

46 
¹ems_¡©us_code
 
¡©us
;

48 
¡©us
 = 
	`¹ems_tim_ü
Ð
	`¹ems_bud_Çme
Ð'S', 'H', 'P', 'L' ), &
id
 );

49 
	`as£¹
Ð!
¡©us
 );

51 
¡©us
 = 
	`¹ems_tim_fe_aá
Ð
id
, 1, 
Shm_PÞl_TSR
, 
NULL
 );

52 
	`as£¹
Ð!
¡©us
 );

53 
	}
}

	@src/libchip/shmdr/receive.c

22 
	~<¹ems.h
>

23 
	~"shm_driv.h
"

25 
¹ems_mpci_y
 
	$Shm_Reûive_·ck
(

26 
¹ems_·ck_´efix
 **
·ck


29 
Shm_EnvÝe_cÚÞ
 *
ecb
;

31 
ecb
 = 
	`Shm_Locked_queue_G
Ð
Shm_Loÿl_»ûive_queue
 );

32 iàÐ
ecb
 ) {

33 *(
·ck
èð
	`Shm_EnvÝe_cÚÞ_to_·ck_´efix_por
Ð
ecb
 );

34 iàÐ
ecb
->
P»ambË
.
dn
 !ð
Shm_CÚfigu¿tiÚ
->
fÜm©
 )

35 
	`Shm_CÚvt_·ck
Ð*
·ck
 );

36 
Shm_Reûive_mes§ge_couÁ
++;

38 *(
·ck
èð
NULL
;

39 
Shm_NuÎ_mes§ge_couÁ
++;

41 
	}
}

	@src/libchip/shmdr/retpkt.c

20 
	~<¹ems.h
>

21 
	~"shm_driv.h
"

23 
¹ems_mpci_y
 
	$Shm_Ruº_·ck
(

24 
¹ems_·ck_´efix
 *
·ck


27 
	`Shm_F»e_vÝe
Ð
	`Shm_Pack_´efix_to_vÝe_cÚÞ_por
(
·ck
) );

28 
	}
}

	@src/libchip/shmdr/send.c

22 
	~<¹ems.h
>

23 
	~"shm_driv.h
"

25 
	spkt_ýy
 {

26 
ut32_t
 
	m·ck
[
MAX_PACKET_SIZE
/4];

29 
¹ems_mpci_y
 
	$Shm_Sd_·ck
(

30 
ut32_t
 
node
,

31 
¹ems_·ck_´efix
 *
·ck


34 
Shm_EnvÝe_cÚÞ
 *
ecb
, *
tmp_ecb
;

35 
ut32_t
 
Âum
;

37 
ecb
 = 
	`Shm_Pack_´efix_to_vÝe_cÚÞ_por
Ð
·ck
 );

38 iàÐ
node
 ) {

39 
	`Shm_Bud_´mbË
Ð
ecb
, 
node
 );

40 
	`Shm_Bud_po¡ambË
Ð
ecb
 );

41 
	`Shm_Aµd_to_»ûive_queue
Ð
node
, 
ecb
 );

42 (*
Shm_CÚfigu¿tiÚ
->
ÿu£_
)Ð
node
 );

45  
Âum
 = 
SHM_FIRST_NODE
 ;num <ð
SHM_MAXIMUM_NODES
 ;num++ )

46 iàÐ
_CÚfigu¿tiÚ_MP_bË
->
node
 !ð
Âum
 ) {

47 
tmp_ecb
 = 
	`Shm_AÎoÿ_vÝe
();

48 iàÐ!
tmp_ecb
 )

49 
	`¹ems_çl_rÜ_occu¼ed
Ð
SHM_NO_FREE_PKTS
 );

50 
	`Shm_Bud_´mbË
Ð
tmp_ecb
, 
Âum
 );

51 *((
pkt_ýy
 *)
tmp_ecb
->
·ck
) = *((pkt_cpy *)packet);

52 
	`Shm_Bud_po¡ambË
Ð
tmp_ecb
 );

53 
	`Shm_Aµd_to_»ûive_queue
Ð
Âum
, 
tmp_ecb
 );

54 (*
Shm_CÚfigu¿tiÚ
->
ÿu£_
)Ð
Âum
 );

56 
	`Shm_F»e_vÝe
Ð
ecb
 );

58 
	}
}

	@src/libchip/shmdr/shm_driver.h

17 #iâdeà
__SHM_h


18 
	#__SHM_h


	)

20 
	~<¹ems/þockdrv.h
>

22 #ifdeà
__ýlu¥lus


90 
	#NEUTRAL_BIG


	)

92 #ifdeà
NEUTRAL_BIG


93 
	#SHM_BIG
 0x00000001

	)

94 
	#SHM_LITTLE
 0x10000000

	)

97 #ifdeà
NEUTRAL_LITTLE


98 
	#SHM_BIG
 0x01000000

	)

99 
	#SHM_LITTLE
 0x00000010

	)

119 #ià
defed
(
__mc68000__
)

120 
	#SHM_LOCK_VALUE
 0x80000000

	)

121 
	#SHM_UNLOCK_VALUE
 0

	)

122 
	#SHM_LOCK_VALUE
 0x80000000

	)

123 
	#SHM_UNLOCK_VALUE
 0

	)

124 #ià
defed
(
__i386__
)

125 
	#SHM_LOCK_VALUE
 0x80000000

	)

126 
	#SHM_UNLOCK_VALUE
 0

	)

127 #ià
defed
(
__ms__
)

128 
	#SHM_LOCK_VALUE
 0x80000000

	)

129 
	#SHM_UNLOCK_VALUE
 0

	)

130 #ià
defed
(
__hµa__
)

131 
	#SHM_LOCK_VALUE
 0

	)

132 
	#SHM_UNLOCK_VALUE
 1

	)

133 #ià
defed
(
__PPC__
)

134 
	#SHM_LOCK_VALUE
 1

	)

135 
	#SHM_UNLOCK_VALUE
 0

	)

136 #ià
defed
(
__unix__
)

137 
	#SHM_LOCK_VALUE
 0

	)

138 
	#SHM_UNLOCK_VALUE
 1

	)

139 #ià
defed
(
_AM29K
)

140 
	#SHM_LOCK_VALUE
 0

	)

141 
	#SHM_UNLOCK_VALUE
 1

	)

142 #ià
defed
(
__nios2__
)

143 
	#SHM_LOCK_VALUE
 1

	)

144 
	#SHM_UNLOCK_VALUE
 0

	)

145 #ià
defed
(
__¥¬c__
)

146 
	#SHM_LOCK_VALUE
 1

	)

147 
	#SHM_UNLOCK_VALUE
 0

	)

148 #ià
defed
(
no_ýu
)

149 
	#SHM_LOCK_VALUE
 1

	)

150 
	#SHM_UNLOCK_VALUE
 0

	)

155 
	#Shm_CÚvt
Ð
v®ue
 ) \

156 ((
Shm_CÚfigu¿tiÚ
->
cÚvt
) ? \

157 (*
Shm_CÚfigu¿tiÚ
->
cÚvt
)(
v®ue
è: (v®ue))

	)

161 
	#SHM_MASTER
 1

	)

162 
	#SHM_FIRST_NODE
 1

	)

166 
	#KILOBYTE
 (1024)

	)

167 
	#MEGABYTE
 (1024*1024)

	)

171 
	#NO_INTERRUPT
 0

	)

172 
	#BYTE
 1

	)

173 
	#WORD
 2

	)

174 
	#LONG
 4

	)

177 
	#POLLED_MODE
 0

	)

178 
	#INTR_MODE
 1

	)

182 
	#NO_ERROR
 0

	)

183 
	#SHM_NO_FREE_PKTS
 0xf0000

	)

187 
	#NULL_ENV_CB
 ((
Shm_EnvÝe_cÚÞ
 *è0)

	)

188 
	#NULL_CONVERT
 0

	)

195 
	#SHM_ENVELOPE_PREFIX_OVERHEAD
 (4 * (
vÞ_u32
))

	)

202 #iâdeà
MAX_ENVELOPE_SIZE


203 
	#MAX_ENVELOPE_SIZE
 0x180

	)

206 
	#MAX_PACKET_SIZE
 (
MAX_ENVELOPE_SIZE
 - \

207 
SHM_ENVELOPE_PREFIX_OVERHEAD
 + \

208 (
Shm_EnvÝe_´mbË
) + \

209 (
Shm_EnvÝe_po¡ambË
))

	)

214 
	#LQ_UNLOCKED
 
SHM_UNLOCK_VALUE


	)

215 
	#LQ_LOCKED
 
SHM_LOCK_VALUE


	)

219 
	#FREE_ENV_POOL
 0

	)

220 
	#FREE_ENV_CB
 (&
Shm_Locked_queues
[ 
FREE_ENV_POOL
 ])

	)

229 
	#START_NS_CBS
 ((*)
Shm_CÚfigu¿tiÚ
->
ba£
)

	)

230 
	#START_LQ_CBS
 ((
START_NS_CBS
) + \

231 Ð( (
Shm_Node_¡©us_cÚÞ
)è* (
SHM_MAXIMUM_NODES
 + 1èè)

	)

232 
	#START_ENVELOPES
 ( ((*è
START_LQ_CBS
) + \

233 Ð( (
Shm_Locked_queue_CÚÞ
)è* (
SHM_MAXIMUM_NODES
 + 1èè)

	)

234 
	#END_SHMCI_AREA
 ( (*è
START_ENVELOPES
 + \

235 Ð( (
Shm_EnvÝe_cÚÞ
)è* 
Shm_Maximum_vÝes
 ) )

	)

236 
	#END_SHARED_MEM
 (
START_NS_CBS
+
Shm_CÚfigu¿tiÚ
->
Ëngth
)

	)

240 
	#Shm_Is_ma¡_node
() \

241 Ð
SHM_MASTER
 ==
_CÚfigu¿tiÚ_MP_bË
-> 
node
 )

	)

243 
	#Shm_F»e_vÝe
Ð
ecb
 ) \

244 
	`Shm_Locked_queue_Add
Ð
FREE_ENV_CB
, (
ecb
è)

	)

245 
	#Shm_AÎoÿ_vÝe
() \

246 
	`Shm_Locked_queue_G
(
FREE_ENV_CB
)

	)

248 
	#Shm_Inlize_»ûive_queue
(
node
) \

249 
	`Shm_Locked_queue_Inlize
Ð&
Shm_Locked_queues
[
node
],od)

	)

251 
	#Shm_Aµd_to_»ûive_queue
(
node
, 
ecb
) \

252 
	`Shm_Locked_queue_Add
Ð&
Shm_Locked_queues
[
node
], (
ecb
è)

	)

254 
	#Shm_EnvÝe_cÚÞ_to_·ck_´efix_por
(
ecb
) \

255 ((*)(
ecb
)->
·ck
)

	)

257 
	#Shm_Pack_´efix_to_vÝe_cÚÞ_por
Ð
pkt
 ) \

258 ((
Shm_EnvÝe_cÚÞ
 *)((
ut8_t
*)(
pkt
) - \

259 ((
Shm_EnvÝe_´mbË
è+ 
SHM_ENVELOPE_PREFIX_OVERHEAD
)))

	)

261 
	#Shm_Bud_´mbË
(
ecb
, 
node
) \

262 (
ecb
)->
P»ambË
.
dn
 = 
Shm_CÚfigu¿tiÚ
->
fÜm©


	)

264 
	#Shm_Bud_po¡ambË
Ð
ecb
 )

	)

268 vÞ©
	tut8_t
 
	tvÞ_u8
;

269 vÞ©
	tut32_t
 
	tvÞ_u32
;

273 
	sshm_fo
 {

274 
vÞ_u32
 
nÙ_cu¼y_u£d_0
;

275 
vÞ_u32
 
nÙ_cu¼y_u£d_1
;

276 
vÞ_u32
 
nÙ_cu¼y_u£d_2
;

277 
vÞ_u32
 
nÙ_cu¼y_u£d_3
;

282 
vÞ_u32
 
dn
;

283 
vÞ_u32
 
nÙ_cu¼y_u£d_0
;

284 
vÞ_u32
 
nÙ_cu¼y_u£d_1
;

285 
vÞ_u32
 
nÙ_cu¼y_u£d_2
;

286 } 
	tShm_EnvÝe_´mbË
;

289 } 
Shm_EnvÝe_po¡ambË
;

312 
vÞ_u32
 
Ãxt
;

313 
vÞ_u32
 
queue
;

314 
vÞ_u32
 
dex
;

315 
vÞ_u32
 
·d0
;

316 
Shm_EnvÝe_´mbË
 
P»ambË
;

317 
vÞ_u8
 
·ck
[
MAX_PACKET_SIZE
];

318 
Shm_EnvÝe_po¡ambË
 
Po¡ambË
;

319 } 
	tShm_EnvÝe_cÚÞ
;

336 
vÞ_u32
 
lock
;

337 
vÞ_u32
 
äÚt
;

338 
vÞ_u32
 
»¬
;

339 
vÞ_u32
 
owÃr
;

340 } 
	tShm_Locked_queue_CÚÞ
;

358 
vÞ_u32
 
¡©us
;

359 
vÞ_u32
 
rÜ
;

360 
vÞ_u32
 
t_add»ss
;

361 
vÞ_u32
 
t_v®ue
;

362 
vÞ_u32
 
t_Ëngth
;

363 
vÞ_u32
 
nÙ_cu¼y_u£d_0
;

364 
vÞ_u32
 
nÙ_cu¼y_u£d_1
;

365 
vÞ_u32
 
nÙ_cu¼y_u£d_2
;

366 } 
	tShm_Node_¡©us_cÚÞ
;

387 
vÞ_u32
 *
add»ss
;

388 
vÞ_u32
 
v®ue
;

389 
vÞ_u32
 
Ëngth
;

390 } 
	tShm_IÁru±_fÜm©iÚ
;

423 
	sshm_cÚfig_fo
 {

424 
vÞ_u32
 *
ba£
;

425 
vÞ_u32
 
Ëngth
;

426 
vÞ_u32
 
fÜm©
;

427 
ut32_t
 (*
cÚvt
)( uint32_t );

428 
vÞ_u32
 
pÞl_
;

429 (*
ÿu£_
)Ð
ut32_t
);

430 
Shm_IÁru±_fÜm©iÚ
 
IÁr
;

433 
shm_cÚfig_fo
 
	tshm_cÚfig_bË
;

435 
	#SHM_MAXIMUM_NODES
 
MuÉroûssg_cÚfigu¿tiÚ
.
maximum_nodes


	)

439 #ifdeà
_SHM_INIT


440 
	#SHM_EXTERN


	)

442 
	#SHM_EXTERN
 

	)

445 
SHM_EXTERN
 
shm_cÚfig_bË
 *
Shm_CÚfigu¿tiÚ
;

446 
SHM_EXTERN
 
Shm_IÁru±_fÜm©iÚ
 *
	gShm_IÁru±_bË
;

447 
SHM_EXTERN
 
Shm_Node_¡©us_cÚÞ
 *
	gShm_Node_¡©u£s
;

448 
SHM_EXTERN
 
Shm_Locked_queue_CÚÞ
 *
	gShm_Locked_queues
;

449 
SHM_EXTERN
 
Shm_EnvÝe_cÚÞ
 *
	gShm_EnvÝes
;

450 
SHM_EXTERN
 
ut32_t
 
	gShm_Reûive_mes§ge_couÁ
;

451 
SHM_EXTERN
 
ut32_t
 
	gShm_NuÎ_mes§ge_couÁ
;

452 
SHM_EXTERN
 
ut32_t
 
	gShm_IÁru±_couÁ
;

453 
SHM_EXTERN
 
Shm_Locked_queue_CÚÞ
 *
	gShm_Loÿl_»ûive_queue
;

454 
SHM_EXTERN
 
Shm_Node_¡©us_cÚÞ
 *
	gShm_Loÿl_node_¡©us
;

455 
SHM_EXTERN
 
ut32_t
 
	gShm_i¤¡©
;

458 
SHM_EXTERN
 
ut32_t
 
	gShm_Pdg_liz©iÚ
;

459 
SHM_EXTERN
 
ut32_t
 
	gShm_Inliz©iÚ_com¶e
;

460 
SHM_EXTERN
 
ut32_t
 
	gShm_Aùive_node
;

462 
SHM_EXTERN
 
ut32_t
 
	gShm_Maximum_vÝes
;

464 
SHM_EXTERN
 
ut32_t
 
	gShm_Locked_queue_End_of_li¡
;

465 
SHM_EXTERN
 
ut32_t
 
	gShm_Locked_queue_NÙ_Ú_li¡
;

470 
Shm_Locked_queue_Add
(

471 
Shm_Locked_queue_CÚÞ
 *, 
Shm_EnvÝe_cÚÞ
 * );

472 
Shm_EnvÝe_cÚÞ
 *
Shm_Locked_queue_G
Ð
Shm_Locked_queue_CÚÞ
 * );

473 
Shm_Locked_queue_Inlize
(

474 
Shm_Locked_queue_CÚÞ
 *, 
ut32_t
);

480 
In_v_poÞ
( );

481 
Shm_Prt_¡©i¡ics
( );

482 
MPCI_F©®
Ð
IÁÇl_rÜs_Sourû
, 
boÞ
, 
ut32_t
);

483 
¹ems_sk
 
Shm_Cau£_¼u±
Ð
ut32_t
 );

484 
Shm_¡®l_tim
( );

485 
Shm_CÚvt_·ck
Ð
¹ems_·ck_´efix
 * );

490 *
Shm_CÚvt_add»ss
( * );

491 
Shm_G_cÚfigu¿tiÚ
Ð
ut32_t
, 
shm_cÚfig_bË
 ** );

492 
Shm_i¤
( );

493 
Shm_£tvec
( );

495 
Shm_Inlize_lock
Ð
Shm_Locked_queue_CÚÞ
 * );

496 
Shm_Lock
Ð
Shm_Locked_queue_CÚÞ
 * );

497 
Shm_UÆock
Ð
Shm_Locked_queue_CÚÞ
 * );

500 
¹ems_mpci_y
 
Shm_G_·ck
(

501 
¹ems_·ck_´efix
 **

504 
¹ems_mpci_y
 
Shm_Inliz©iÚ
( );

506 
¹ems_mpci_y
 
Shm_Reûive_·ck
(

507 
¹ems_·ck_´efix
 **

510 
¹ems_mpci_y
 
Shm_Ruº_·ck
(

511 
¹ems_·ck_´efix
 *

514 
¹ems_mpci_y
 
Shm_Sd_·ck
(

515 
ut32_t
,

516 
¹ems_·ck_´efix
 *

519 
¹ems_mpci_bË
 
MPCI_bË
;

521 #ifdeà
_SHM_INIT


525 
¹ems_mpci_bË
 
	gMPCI_bË
 = {

527 
MAX_PACKET_SIZE
,

528 
Shm_Inliz©iÚ
,

529 
Shm_G_·ck
,

530 
Shm_Ruº_·ck
,

531 
Shm_Sd_·ck
,

532 
Shm_Reûive_·ck


537 #ifdeà
__ýlu¥lus


	@src/librtems++/include/rtems++/rtemsEvent.h

20 #ià!
defed
(
_¹emsEvt_h_
)

21 
	#_¹emsEvt_h_


	)

23 
	~<¹ems++/¹emsStusCode.h
>

24 
	~<¹ems++/¹emsTask.h
>

30 þas 
	c¹emsEvt


31 : 
public
 
¹emsStusCode


33 
public
:

36 
	eWaMode
 { 
wa
 = 
RTEMS_WAIT
,

37 
	mno_wa
 = 
RTEMS_NO_WAIT
};

38 
	eCÚdiÚ
 { 
	gªy
 = 
RTEMS_EVENT_ANY
,

39 
	g®l
 = 
RTEMS_EVENT_ALL
};

44 
¹emsEvt
(cÚ¡ * 
Çme
, 
ut32_t
 
node
 = 
RTEMS_SEARCH_ALL_NODES
);

47 
¹emsEvt
(cÚ¡msEvt& 
evt
);

48 
¹emsEvt
();

50 
	gvtu®
 ~
¹emsEvt
();

53 cÚ¡ 
	g¹emsEvt
& 
	gÝ©Ü
=(cÚ¡ 
¹emsEvt
& 
evt
);

54 
vtu®
 cÚ¡ 
¹ems_¡©us_code
 
cÚÃù
(cÚ¡ *
Çme
,

55 cÚ¡ 
ut32_t
 
node
 = 
RTEMS_SEARCH_ALL_NODES
);

58 
le
 cÚ¡ 
¹ems_¡©us_code
 
£nd
(cÚ¡ 
¹ems_id
 
sk
,

59 cÚ¡ 
¹ems_evt_£t
 
evts
);

60 
le
 cÚ¡ 
¹ems_¡©us_code
 
£nd
(cÚ¡ 
¹emsTask
& 
sk
,

61 cÚ¡ 
¹ems_evt_£t
 
evts
) ;

62 
le
 cÚ¡ 
¹ems_¡©us_code
 
£nd
(cÚ¡ 
¹ems_evt_£t
 
evts
);

65 
le
 cÚ¡ 
¹ems_¡©us_code
 
»ûive
(cÚ¡ 
¹ems_evt_£t
 
evt_
,

66 
¹ems_evt_£t
& 
evt_out
,

67 cÚ¡ 
¹ems_rv®
 
miüo_£cs
 = 0,

68 cÚ¡ 
WaMode
 
wa
 = wait,

69 cÚ¡ 
CÚdiÚ
 
cÚdiÚ
 = 
ªy
);

72 cÚ¡ 
¹ems_id
 
	$sk_id_is
(ècÚ¡ {  
id
; 
	}
}

73 cÚ¡ 
¹ems_Çme
 
	$sk_Çme_is
(ècÚ¡ {  
Çme
; 
	}
}

75 
	g´iv©e
:

77 
¹ems_Çme
 
Çme
;

80 
¹ems_id
 
	gid
;

84 cÚ¡ 
¹ems_¡©us_code
 
	g¹emsEvt
::
	$£nd
(cÚ¡ 
¹ems_id
 
sk
,

85 cÚ¡ 
¹ems_evt_£t
 
evts
)

87 
	`£t_¡©us_code
(
	`¹ems_evt_£nd
(
sk
, 
evts
));

88  
	`Ï¡_¡©us_code
();

89 
	}
}

91 cÚ¡ 
¹ems_¡©us_code
 
	g¹emsEvt
::
	$£nd
(cÚ¡ 
¹emsTask
& 
sk
,

92 cÚ¡ 
¹ems_evt_£t
 
evts
)

94 
	`£t_¡©us_code
(
	`¹ems_evt_£nd
(
sk
.
	`id_is
(), 
evts
));

95  
	`Ï¡_¡©us_code
();

96 
	}
}

98 cÚ¡ 
¹ems_¡©us_code
 
	g¹emsEvt
::
	$£nd
(cÚ¡ 
¹ems_evt_£t
 
evts
)

100 
	`£t_¡©us_code
(
	`¹ems_evt_£nd
(
id
, 
evts
));

101  
	`Ï¡_¡©us_code
();

102 
	}
}

104 cÚ¡ 
¹ems_¡©us_code
 
	g¹emsEvt
::
	$»ûive
(cÚ¡ 
¹ems_evt_£t
 
evt_
,

105 
¹ems_evt_£t
& 
evt_out
,

106 cÚ¡ 
¹ems_rv®
 
miüo_£cs
,

107 cÚ¡ 
WaMode
 
wa
,

108 cÚ¡ 
CÚdiÚ
 
cÚdiÚ
)

110 
¹ems_rv®
 
u£cs
 = 
miüo_£cs
 &&

111 (
miüo_£cs
 < 
	`¹ems_cÚfigu¿tiÚ_g_miüo£cÚds_³r_tick
()) ?

112 
	`¹ems_cÚfigu¿tiÚ_g_miüo£cÚds_³r_tick
(è: 
miüo_£cs
;

113 
	`£t_¡©us_code
(
	`¹ems_evt_»ûive
(
evt_
,

114 
wa
 | 
cÚdiÚ
,

115 
	`RTEMS_MICROSECONDS_TO_TICKS
(
u£cs
),

116 &
evt_out
));

117  
	`Ï¡_¡©us_code
();

118 
	}
}

	@src/librtems++/include/rtems++/rtemsInterrupt.h

37 #ià!
defed
(
_¹emsIÁru±_h_
)

38 
	#_¹emsIÁru±_h_


	)

40 
	~<¹ems++/¹emsStusCode.h
>

46 þas 
	c¹emsIÁru±


47 : 
public
 
¹emsStusCode


49 
public
:

50 
¹emsIÁru±
();

51 
	mvtu®
 ~
¹emsIÁru±
();

54 
vtu®
 cÚ¡ 
¹ems_¡©us_code
 
i¤_ÿtch
(cÚ¡ 
¹ems_veùÜ_numb
 
veùÜ
);

57 
vtu®
 cÚ¡ 
¹ems_¡©us_code
 
»Ëa£
();

60 cÚ¡ 
¹ems_i¤_y
 
	$Þd_i¤_hªdËr
(ècÚ¡ {  
Þd_hªdËr
; }

62 
´Ùeùed
:

65 
vtu®
 
	`hªdËr
() = 0;

68 
le
 
	$cha
() const;

70 
´iv©e
:

71 cÚ¡ 
¹emsIÁru±
& 
Ý©Ü
=(consttemsInterrupt& );

72 
	`¹emsIÁru±
(cÚ¡ 
¹emsIÁru±
& );

75 
¹ems_veùÜ_numb
 
veùÜ
;

78 
boÞ
 
ÿught
;

81 
¹ems_i¤_y
 
Þd_hªdËr
;

84 
¹emsIÁru±
 *
Þd_¼u±
;

87 
	`»deùÜ
(
¹ems_veùÜ_numb
 
veùÜ
);

88 
	}
};

90 
	g¹emsIÁru±
::
	$cha
() const

92 ià(
Þd_¼u±
)

93 
Þd_¼u±
->
	`hªdËr
();

94 ià(
Þd_hªdËr
)

95 (((*)()è
Þd_hªdËr
)();

96 
	}
}

	@src/librtems++/include/rtems++/rtemsMessageQueue.h

37 #ià!
defed
(
_¹emsMes§geQueue_h_
)

38 
	#_¹emsMes§geQueue_h_


	)

40 
	~<¹ems++/¹emsStusCode.h
>

46 þas 
	c¹emsMes§geQueue


47 : 
public
 
¹emsStusCode


49 
public
:

51 
	eWaMode
 { 
wa_by_fifo
 = 
RTEMS_FIFO
,

52 
	mwa_by_´iÜy
 = 
RTEMS_PRIORITY
 };

53 
	eScÝe
 { 
	gloÿl
 = 
RTEMS_LOCAL
,

54 
	gglob®
 = 
RTEMS_GLOBAL
 };

59 
¹emsMes§geQueue
(cÚ¡ * 
Çme
,

60 cÚ¡ 
ut32_t
 
couÁ
,

61 cÚ¡ 
size_t
 
max_mes§ge_size
,

62 cÚ¡ 
WaMode
 
wa_mode
 = 
wa_by_fifo
,

63 cÚ¡ 
ScÝe
 
scÝe
 = 
loÿl
);

66 
¹emsMes§geQueue
(cÚ¡ *
Çme
, cÚ¡ 
ut32_t
 
node
 = 
RTEMS_SEARCH_ALL_NODES
);

69 
¹emsMes§geQueue
(cÚ¡msMes§geQueue& 
mes§ge_queue
);

70 
¹emsMes§geQueue
();

73 
	gvtu®
 ~
¹emsMes§geQueue
();

76 
vtu®
 cÚ¡ 
¹ems_¡©us_code
 
ü
(cÚ¡ * 
Çme
,

77 cÚ¡ 
ut32_t
 
couÁ
,

78 cÚ¡ 
size_t
 
max_mes§ge_size
,

79 cÚ¡ 
WaMode
 
wa_mode
 = 
wa_by_fifo
,

80 cÚ¡ 
ScÝe
 
scÝe
 = 
loÿl
);

81 
vtu®
 cÚ¡ 
¹ems_¡©us_code
 
de¡roy
();

84 cÚ¡ 
	g¹emsMes§geQueue
& 
	gÝ©Ü
=(cÚ¡ 
¹emsMes§geQueue
& 
mes§ge_queue
);

85 
vtu®
 cÚ¡ 
¹ems_¡©us_code
 
cÚÃù
(cÚ¡ *
Çme
,

86 cÚ¡ 
ut32_t
 
node
 = 
RTEMS_SEARCH_ALL_NODES
);

89 
le
 cÚ¡ 
¹ems_¡©us_code
 
£nd
(cÚ¡ *
bufãr
,

90 cÚ¡ 
size_t
 
size
);

91 
le
 cÚ¡ 
¹ems_¡©us_code
 
urgt
(cÚ¡ *
bufãr
,

92 cÚ¡ 
size_t
 
size
);

93 
le
 cÚ¡ 
¹ems_¡©us_code
 
brßdÿ¡
(cÚ¡ *
bufãr
,

94 cÚ¡ 
size_t
 
size
,

95 
ut32_t
& 
couÁ
);

98 
le
 cÚ¡ 
¹ems_¡©us_code
 
»ûive
(cÚ¡ *
bufãr
,

99 
size_t
& 
size
,

100 
¹ems_rv®
 
miüo_£cs
 = 
RTEMS_NO_TIMEOUT
,

101 
boÞ
 
wa
 = 
ue
);

104 
le
 cÚ¡ 
¹ems_¡©us_code
 
æush
(
ut32_t
& 
size
);

107 cÚ¡ 
¹ems_id
 
	$id_is
(ècÚ¡ {  
id
; 
	}
}

108 cÚ¡ 
¹ems_Çme
 
	$Çme_is
(ècÚ¡ {  
Çme
; 
	}
}

109 cÚ¡ *
	$Çme_¡rg
(ècÚ¡ {  
Çme_¡r
; 
	}
}

111 
	g´iv©e
:

114 
make_v®id
();

117 
¹ems_Çme
 
	gÇme
;

118 
	gÇme_¡r
[5];

122 
boÞ
 
	gowÃr
;

125 
¹ems_id
 
	gid
;

128 cÚ¡ 
¹ems_¡©us_code
 
	g¹emsMes§geQueue
::
	$£nd
(cÚ¡ *
bufãr
,

129 cÚ¡ 
size_t
 
size
)

131  
	`£t_¡©us_code
(
	`¹ems_mes§ge_queue_£nd
(
id
, (*è
bufãr
, 
size
));

132 
	}
}

134 cÚ¡ 
¹ems_¡©us_code
 
	g¹emsMes§geQueue
::
	$urgt
(cÚ¡ *
bufãr
,

135 cÚ¡ 
size_t
 
size
)

137  
	`£t_¡©us_code
(
	`¹ems_mes§ge_queue_urgt
(
id
, (*è
bufãr
, 
size
));

138 
	}
}

140 cÚ¡ 
¹ems_¡©us_code
 
	g¹emsMes§geQueue
::
	$brßdÿ¡
(cÚ¡ *
bufãr
,

141 cÚ¡ 
size_t
 
size
,

142 
ut32_t
& 
couÁ
)

144  
	`£t_¡©us_code
(
	`¹ems_mes§ge_queue_brßdÿ¡
(
id
,

145 (*è
bufãr
,

146 
size
,

147 &
couÁ
));

148 
	}
}

150 cÚ¡ 
¹ems_¡©us_code
 
	g¹emsMes§geQueue
::
	$»ûive
(cÚ¡ *
bufãr
,

151 
size_t
& 
size
,

152 
¹ems_rv®
 
miüo_£cs
,

153 
boÞ
 
wa
)

155 
¹ems_rv®
 
u£cs
 = 
miüo_£cs
 &&

156 (
miüo_£cs
 < 
	`¹ems_cÚfigu¿tiÚ_g_miüo£cÚds_³r_tick
()) ?

157 
	`¹ems_cÚfigu¿tiÚ_g_miüo£cÚds_³r_tick
(è: 
miüo_£cs
;

158  
	`£t_¡©us_code
(
	`¹ems_mes§ge_queue_»ûive
(
id
,

159 (*è
bufãr
,

160 &
size
,

161 
wa
 ? 
RTEMS_WAIT
 : 
RTEMS_NO_WAIT
,

162 
	`RTEMS_MICROSECONDS_TO_TICKS
(
u£cs
)));

163 
	}
}

165 cÚ¡ 
¹ems_¡©us_code
 
	g¹emsMes§geQueue
::
	$æush
(
ut32_t
& 
couÁ
)

167  
	`£t_¡©us_code
(
	`¹ems_mes§ge_queue_æush
(
id
, &
couÁ
));

168 
	}
}

	@src/librtems++/include/rtems++/rtemsSemaphore.h

34 #ià!
defed
(
_¹emsSem­hÜe_h_
)

35 
	#_¹emsSem­hÜe_h_


	)

37 
	~<¹ems++/¹emsStusCode.h
>

43 þas 
	c¹emsSem­hÜe


44 : 
public
 
¹emsStusCode


46 
public
:

48 
	eWaMode
 { 
wa_by_fifo
 = 
RTEMS_FIFO
,

49 
	mwa_by_´iÜy
 = 
RTEMS_PRIORITY
 };

50 
	eTy³
 { 
	gb¬y
 = 
RTEMS_BINARY_SEMAPHORE
,

51 
	gcouÁg
 = 
RTEMS_COUNTING_SEMAPHORE
 };

52 
	ePriÜy
 { 
	gno_´iÜy_h
 = 
RTEMS_NO_INHERIT_PRIORITY
,

53 
	gh_´iÜy
 = 
RTEMS_INHERIT_PRIORITY
 };

54 
	eCeg
 { 
	gno_´iÜy_ûg
 = 
RTEMS_NO_PRIORITY_CEILING
,

55 
	g´iÜy_ûg
 = 
RTEMS_PRIORITY_CEILING
 };

56 
	eScÝe
 { 
	gloÿl
 = 
RTEMS_LOCAL
,

57 
	gglob®
 = 
RTEMS_GLOBAL
 };

63 
¹emsSem­hÜe
(cÚ¡ * 
Çme
,

64 cÚ¡ 
ScÝe
 
scÝe
 = 
loÿl
,

65 cÚ¡ 
ut32_t
 
couÁ
 = 1,

66 cÚ¡ 
WaMode
 
wa_mode
 = 
wa_by_fifo
,

67 cÚ¡ 
Ty³
 
ty³
 = 
b¬y
,

68 cÚ¡ 
PriÜy
 
´iÜy
 = 
no_´iÜy_h
,

69 cÚ¡ 
Ceg
 
ûg
 = 
no_´iÜy_ûg
,

70 cÚ¡ 
¹ems_sk_´iÜy
 
´iÜy_ûg
 = 0);

73 
¹emsSem­hÜe
(cÚ¡ *
Çme
, cÚ¡ 
ut32_t
 
node
);

76 
¹emsSem­hÜe
(cÚ¡msSem­hÜe& 
£m­hÜe
);

77 
¹emsSem­hÜe
();

80 
	gvtu®
 ~
¹emsSem­hÜe
();

83 
vtu®
 cÚ¡ 
¹ems_¡©us_code
 
ü
(cÚ¡ * 
Çme
,

84 cÚ¡ 
ScÝe
 
scÝe
 = 
loÿl
,

85 cÚ¡ 
ut32_t
 
couÁ
 = 1,

86 cÚ¡ 
WaMode
 
wa_mode
 = 
wa_by_fifo
,

87 cÚ¡ 
Ty³
 
ty³
 = 
b¬y
,

88 cÚ¡ 
PriÜy
 
´iÜy
 = 
no_´iÜy_h
,

89 cÚ¡ 
Ceg
 
ûg
 = 
no_´iÜy_ûg
,

90 cÚ¡ 
¹ems_sk_´iÜy
 
´iÜy_ûg
 = 0);

91 
vtu®
 cÚ¡ 
¹ems_¡©us_code
 
de¡roy
();

94 cÚ¡ 
	g¹emsSem­hÜe
& 
	gÝ©Ü
=(cÚ¡ 
¹emsSem­hÜe
& 
£m­hÜe
);

95 
vtu®
 cÚ¡ 
¹ems_¡©us_code
 
cÚÃù
(cÚ¡ *
Çme
, 
ut32_t
 
node
);

98 
le
 cÚ¡ 
¹ems_¡©us_code
 
ob
(
boÞ
 
wa
 = 
ue
,

99 cÚ¡ 
ut32_t
 
miüo_£cs
 = 
RTEMS_NO_TIMEOUT
);

102 
le
 cÚ¡ 
¹ems_¡©us_code
 
»Ëa£
();

105 cÚ¡ 
¹ems_id
 
	$id_is
(ècÚ¡ {  
id
; 
	}
}

106 cÚ¡ 
¹ems_Çme
 
	$Çme_is
(ècÚ¡ {  
Çme
; 
	}
}

107 cÚ¡ *
	$Çme_¡rg
(ècÚ¡ {  
Çme_¡r
; 
	}
}

109 
	g´iv©e
:

112 
make_v®id
();

115 
¹ems_Çme
 
	gÇme
;

116 
	gÇme_¡r
[5];

120 
boÞ
 
	gowÃr
;

123 
¹ems_id
 
	gid
;

126 cÚ¡ 
¹ems_¡©us_code
 
	g¹emsSem­hÜe
::
	$ob
(cÚ¡ 
boÞ
 
wa
,

127 cÚ¡ 
ut32_t
 
miüo_£cs
)

129 
¹ems_rv®
 
u£cs
 = 
miüo_£cs
 &&

130 (
miüo_£cs
 < 
	`¹ems_cÚfigu¿tiÚ_g_miüo£cÚds_³r_tick
()) ?

131 
	`¹ems_cÚfigu¿tiÚ_g_miüo£cÚds_³r_tick
(è: 
miüo_£cs
;

134 
	`£t_¡©us_code
(
	`¹ems_£m­hÜe_ob
(
id
,

135 
wa
 ? 
RTEMS_WAIT
 : 
RTEMS_NO_WAIT
,

136 
	`RTEMS_MICROSECONDS_TO_TICKS
(
u£cs
)));

137 
	}
}

139 cÚ¡ 
¹ems_¡©us_code
 
	g¹emsSem­hÜe
::
	$»Ëa£
()

141  
	`£t_¡©us_code
(
	`¹ems_£m­hÜe_»Ëa£
(
id
));

142 
	}
}

	@src/librtems++/include/rtems++/rtemsStatusCode.h

19 #ià!
defed
(
_¹emsStusCode_h_
)

20 
	#_¹emsStusCode_h_


	)

22 
	~<¹ems.h
>

28 þas 
	c¹emsStusCode


30 
	mpublic
:

32 
	$¹emsStusCode
(è{ 
Ï¡_¡©us
 = 
RTEMS_NOT_CONFIGURED
; }

34 cÚ¡ 
boÞ
 
	$sucûssful
(è{  
Ï¡_¡©us
 =ð
RTEMS_SUCCESSFUL
; 
	}
}

35 cÚ¡ 
boÞ
 
	$unsucûssful
(è{  
Ï¡_¡©us
 !ð
RTEMS_SUCCESSFUL
; 
	}
}

38 cÚ¡ 
¹ems_¡©us_code
 
	$Ï¡_¡©us_code
(è{  
Ï¡_¡©us
; 
	}
}

41 cÚ¡ *
Ï¡_¡©us_¡rg
();

43 cÚ¡ *
¡©us_¡rg
(
¹ems_¡©us_code
 
¡©us_code
);

45 
	g´Ùeùed
:

46 cÚ¡ 
¹ems_¡©us_code
 
	$£t_¡©us_code
(cÚ¡ 
¹ems_¡©us_code
 
¡©us
)

47 {  (
Ï¡_¡©us
 = 
¡©us
); 
	}
}

49 
	g´iv©e
:

52 
¹ems_¡©us_code
 
Ï¡_¡©us
;

	@src/librtems++/include/rtems++/rtemsTask.h

54 #ià!
defed
(
_¹emsTask_h_
)

55 
	#_¹emsTask_h_


	)

57 
	~<¹ems++/¹emsStusCode.h
>

63 þas 
	c¹emsTask


64 : 
public
 
¹emsStusCode


66 
public
:

67 
	eFlßtgPot
 { 
åoff
 = 
RTEMS_NO_FLOATING_POINT
,

68 
	måÚ
 = 
RTEMS_FLOATING_POINT
 };

69 
	eScÝe
 { 
	gloÿl
 = 
RTEMS_LOCAL
,

70 
	gglob®
 = 
RTEMS_GLOBAL
 };

75 
¹emsTask
(cÚ¡ * 
Çme
,

76 cÚ¡ 
¹ems_sk_´iÜy
 
l_´iÜy
,

77 cÚ¡ 
ut32_t
 
¡ack_size
,

78 cÚ¡ 
¹ems_mode
 
´m±iÚ
 = 
RTEMS_NO_PREEMPT
,

79 cÚ¡ 
¹ems_mode
 
time¦iû
 = 
RTEMS_NO_TIMESLICE
,

80 cÚ¡ 
¹ems_mode
 
a¤
 = 
RTEMS_NO_ASR
,

81 cÚ¡ 
¹ems_¼u±_Ëv
 
¼u±_Ëv
 = 0,

82 cÚ¡ 
FlßtgPot
 
æßtg_pot
 = 
åoff
,

83 cÚ¡ 
ScÝe
 
scÝe
 = 
loÿl
);

86 
¹emsTask
(cÚ¡ *
Çme
, cÚ¡ 
ut32_t
 
node
 = 
RTEMS_SEARCH_ALL_NODES
);

89 
¹emsTask
(cÚ¡msTask& 
sk
);

90 
¹emsTask
();

93 
	gvtu®
 ~
¹emsTask
();

96 
vtu®
 cÚ¡ 
¹ems_¡©us_code
 
ü
(cÚ¡ * 
Çme
,

97 cÚ¡ 
¹ems_sk_´iÜy
 
l_´iÜy
,

98 cÚ¡ 
ut32_t
 
¡ack_size
,

99 cÚ¡ 
¹ems_mode
 
´m±iÚ
 = 
RTEMS_NO_PREEMPT
,

100 cÚ¡ 
¹ems_mode
 
time¦iû
 = 
RTEMS_NO_TIMESLICE
,

101 cÚ¡ 
¹ems_mode
 
a¤
 = 
RTEMS_NO_ASR
,

102 cÚ¡ 
¹ems_¼u±_Ëv
 
¼u±_Ëv
 = 0,

103 cÚ¡ 
FlßtgPot
 
æßtg_pot
 = 
åoff
,

104 cÚ¡ 
ScÝe
 
scÝe
 = 
loÿl
);

105 
vtu®
 cÚ¡ 
¹ems_¡©us_code
 
de¡roy
();

108 cÚ¡ 
	g¹emsTask
& 
	gÝ©Ü
=(cÚ¡ 
¹emsTask
& 
sk
);

109 
vtu®
 cÚ¡ 
¹ems_¡©us_code
 
cÚÃù
(cÚ¡ *
Çme
,

110 cÚ¡ 
ut32_t
 
node
 = 
RTEMS_SEARCH_ALL_NODES
);

113 
vtu®
 cÚ¡ 
¹ems_¡©us_code
 
¡¬t
(cÚ¡ 
¹ems_sk_¬gumt
 
¬gumt
);

114 
vtu®
 cÚ¡ 
¹ems_¡©us_code
 
»¡¬t
(cÚ¡ 
¹ems_sk_¬gumt
 
¬gumt
);

115 
vtu®
 cÚ¡ 
¹ems_¡©us_code
 
su¥d
();

116 
vtu®
 cÚ¡ 
¹ems_¡©us_code
 
»sume
();

119 
vtu®
 cÚ¡ 
¹ems_¡©us_code
 
wake_aá
(cÚ¡ 
¹ems_rv®
 
miüo_£cs
);

120 
vtu®
 cÚ¡ 
¹ems_¡©us_code
 
wake_wh
(cÚ¡ 
¹ems_time_of_day
& 
tod
);

123 cÚ¡ 
¹ems_¡©us_code
 
g_´iÜy
(
¹ems_sk_´iÜy
& 
´iÜy
);

124 cÚ¡ 
¹ems_¡©us_code
 
£t_´iÜy
(cÚ¡ 
¹ems_sk_´iÜy
 
´iÜy
);

125 cÚ¡ 
¹ems_¡©us_code
 
£t_´iÜy
(cÚ¡ 
¹ems_sk_´iÜy
 
´iÜy
,

126 
¹ems_sk_´iÜy
& 
Þd_´iÜy
);

129 cÚ¡ 
¹ems_¡©us_code
 
	$g_nÙe
(cÚ¡ 
ut32_t
 
nÙad
,

130 
ut32_t
& 
nÙe
è
RTEMS_COMPILER_DEPRECATED_ATTRIBUTE
;

131 cÚ¡ 
¹ems_¡©us_code
 
	$£t_nÙe
(cÚ¡ 
ut32_t
 
nÙad
,

132 cÚ¡ 
ut32_t
 
nÙe
è
RTEMS_COMPILER_DEPRECATED_ATTRIBUTE
;

135 cÚ¡ 
¹ems_id
 
	$id_is
(ècÚ¡ {  
id
; 
	}
}

136 cÚ¡ 
¹ems_Çme
 
	$Çme_is
(ècÚ¡ {  
Çme
; 
	}
}

137 cÚ¡ *
	$Çme_¡rg
(ècÚ¡ {  
Çme_¡r
; 
	}
}

139 
	g´Ùeùed
:

142 
vtu®
 
body
(
¹ems_sk_¬gumt
 
¬gumt
);

144 
	g´iv©e
:

147 
make_£lf
();

150 
¹ems_Çme
 
	gÇme
;

151 
	gÇme_¡r
[5];

155 
boÞ
 
	gowÃr
;

158 
¹ems_id
 
	gid
;

162 
¹ems_sk_¬gumt
 
	g¬gumt
;

165 
¹ems_sk
 
Üig
(
¹ems_sk_¬gumt
 
¬gumt
);

	@src/librtems++/include/rtems++/rtemsTaskMode.h

33 #ià!
defed
(
_¹emsTaskMode_h_
)

34 
	#_¹emsTaskMode_h_


	)

36 
	~<¹ems++/¹emsStusCode.h
>

42 þas 
	c¹emsTaskMode


43 : 
public
 
¹emsStusCode


45 
public
:

47 
	$¹emsTaskMode
() {};

50 
le
 cÚ¡ 
¹ems_¡©us_code
 
	`g_mode
(
¹ems_mode
& 
mode
);

51 
le
 cÚ¡ 
¹ems_¡©us_code
 
	`£t_mode
(cÚ¡ 
¹ems_mode
 
mode
,

52 cÚ¡ 
¹ems_mode
 
mask
);

53 
le
 cÚ¡ 
¹ems_¡©us_code
 
	`£t_mode
(cÚ¡ 
¹ems_mode
 
mode
,

54 cÚ¡ 
¹ems_mode
 
mask
,

55 
¹ems_mode
& 
Þd_mode
);

58 
le
 cÚ¡ 
¹ems_¡©us_code
 
	`g_´m±iÚ_¡©e
(
¹ems_mode
& 
´m±iÚ
);

59 
le
 cÚ¡ 
¹ems_¡©us_code
 
	`£t_´m±iÚ_¡©e
(cÚ¡ 
¹ems_mode
 
´m±iÚ
);

60 
le
 cÚ¡ 
¹ems_¡©us_code
 
	`£t_´m±iÚ_¡©e
(cÚ¡ 
¹ems_mode
 
´m±iÚ
,

61 
¹ems_mode
& 
Þd_´m±iÚ
);

62 
le
 cÚ¡ 
boÞ
 
	`´m±iÚ_£t
(cÚ¡ 
¹ems_mode
 
´m±iÚ
);

65 
le
 cÚ¡ 
¹ems_¡©us_code
 
	`g_time¦iû_¡©e
(
¹ems_mode
& 
time¦iû
);

66 
le
 cÚ¡ 
¹ems_¡©us_code
 
	`£t_time¦iû_¡©e
(cÚ¡ 
¹ems_mode
 
time¦iû
);

67 
le
 cÚ¡ 
¹ems_¡©us_code
 
	`£t_time¦iû_¡©e
(cÚ¡ 
¹ems_mode
 
time¦iû
,

68 
¹ems_mode
& 
Þd_time¦iû
);

69 
le
 cÚ¡ 
boÞ
 
	`time¦iû_£t
(cÚ¡ 
¹ems_mode
 
´m±iÚ
);

72 
le
 cÚ¡ 
¹ems_¡©us_code
 
	`g_a¤_¡©e
(
¹ems_mode
& 
a¤
);

73 
le
 cÚ¡ 
¹ems_¡©us_code
 
	`£t_a¤_¡©e
(cÚ¡ 
¹ems_mode
 
a¤
);

74 
le
 cÚ¡ 
¹ems_¡©us_code
 
	`£t_a¤_¡©e
(cÚ¡ 
¹ems_mode
 
a¤
,

75 
¹ems_mode
& 
Þd_a¤
);

76 
le
 cÚ¡ 
boÞ
 
	`a¤_£t
(cÚ¡ 
¹ems_mode
 
´m±iÚ
);

79 
le
 cÚ¡ 
¹ems_¡©us_code
 
	`g_¼u±_Ëv
(
¹ems_¼u±_Ëv
& 
Ëv
);

80 
le
 cÚ¡ 
¹ems_¡©us_code
 
	`£t_¼u±_Ëv
(cÚ¡ 
¹ems_¼u±_Ëv
 
Ëv
);

81 
le
 cÚ¡ 
¹ems_¡©us_code
 
	`£t_¼u±_Ëv
(cÚ¡ 
¹ems_¼u±_Ëv
 
Ëv
,

82 
¹ems_¼u±_Ëv
& 
Þd_Ëv
);

83 
	}
};

85 cÚ¡ 
¹ems_¡©us_code
 
	g¹emsTaskMode
::
	$g_mode
(
¹ems_mode
& 
mode
)

87  
	`£t_¡©us_code
(
	`¹ems_sk_mode
(0, 
RTEMS_CURRENT_MODE
, &
mode
));

88 
	}
}

90 cÚ¡ 
¹ems_¡©us_code
 
	g¹emsTaskMode
::
	$£t_mode
(cÚ¡ 
¹ems_mode
 
mode
,

91 cÚ¡ 
¹ems_mode
 
mask
)

93 
¹ems_mode
 
Þd_mode
;

94  
	`£t_¡©us_code
(
	`¹ems_sk_mode
(
mode
, 
mask
, &
Þd_mode
));

95 
	}
}

97 cÚ¡ 
¹ems_¡©us_code
 
	g¹emsTaskMode
::
	$£t_mode
(cÚ¡ 
¹ems_mode
 
mode
,

98 cÚ¡ 
¹ems_mode
 
mask
,

99 
¹ems_mode
& 
Þd_mode
)

101  
	`£t_¡©us_code
(
	`¹ems_sk_mode
(
mode
, 
mask
, &
Þd_mode
));

102 
	}
}

104 cÚ¡ 
¹ems_¡©us_code
 
	g¹emsTaskMode
::
	$g_´m±iÚ_¡©e
(
¹ems_mode
& 
´m±iÚ
)

106 
	`£t_¡©us_code
(
	`¹ems_sk_mode
(0, 
RTEMS_CURRENT_MODE
, &
´m±iÚ
));

107 
´m±iÚ
 &ð
RTEMS_PREEMPT_MASK
;

108  
	`Ï¡_¡©us_code
();

109 
	}
}

111 cÚ¡ 
¹ems_¡©us_code
 
	g¹emsTaskMode
::
	$£t_´m±iÚ_¡©e
(cÚ¡ 
¹ems_mode
 
´m±iÚ
)

113 
¹ems_mode
 
Þd_mode
;

114  
	`£t_¡©us_code
(
	`¹ems_sk_mode
(
´m±iÚ
, 
RTEMS_PREEMPT_MASK
, &
Þd_mode
));

115 
	}
}

117 cÚ¡ 
¹ems_¡©us_code
 
	g¹emsTaskMode
::
	$£t_´m±iÚ_¡©e
(cÚ¡ 
¹ems_mode
 
´m±iÚ
,

118 
¹ems_mode
& 
Þd_´m±iÚ
)

120 
	`£t_¡©us_code
(
	`¹ems_sk_mode
(
´m±iÚ
, 
RTEMS_PREEMPT_MASK
, &
Þd_´m±iÚ
));

121 
Þd_´m±iÚ
 &ð
RTEMS_PREEMPT_MASK
;

122  
	`Ï¡_¡©us_code
();

123 
	}
}

125 cÚ¡ 
boÞ
 
	g¹emsTaskMode
::
	$´m±iÚ_£t
(cÚ¡ 
¹ems_mode
 
´m±iÚ
)

127  (
´m±iÚ
 & 
RTEMS_PREEMPT_MASK
è? 
çl£
 : 
ue
;

128 
	}
}

130 cÚ¡ 
¹ems_¡©us_code
 
	g¹emsTaskMode
::
	$g_time¦iû_¡©e
(
¹ems_mode
& 
time¦iû
)

132 
	`£t_¡©us_code
(
	`¹ems_sk_mode
(0, 
RTEMS_CURRENT_MODE
, &
time¦iû
));

133 
time¦iû
 &ð
RTEMS_TIMESLICE_MASK
;

134  
	`Ï¡_¡©us_code
();

135 
	}
}

137 cÚ¡ 
¹ems_¡©us_code
 
	g¹emsTaskMode
::
	$£t_time¦iû_¡©e
(cÚ¡ 
¹ems_mode
 
time¦iû
)

139 
¹ems_mode
 
Þd_mode
;

140  
	`£t_¡©us_code
(
	`¹ems_sk_mode
(
time¦iû
, 
RTEMS_TIMESLICE_MASK
, &
Þd_mode
));

141 
	}
}

143 cÚ¡ 
¹ems_¡©us_code
 
	g¹emsTaskMode
::
	$£t_time¦iû_¡©e
(cÚ¡ 
¹ems_mode
 
time¦iû
,

144 
¹ems_mode
& 
Þd_time¦iû
)

146 
	`£t_¡©us_code
(
	`¹ems_sk_mode
(
time¦iû
, 
RTEMS_TIMESLICE_MASK
, &
Þd_time¦iû
));

147 
Þd_time¦iû
 &ð
RTEMS_TIMESLICE_MASK
;

148  
	`Ï¡_¡©us_code
();

149 
	}
}

151 cÚ¡ 
boÞ
 
	g¹emsTaskMode
::
	$time¦iû_£t
(cÚ¡ 
¹ems_mode
 
time¦iû
)

153  (
time¦iû
 & 
RTEMS_TIMESLICE_MASK
è? 
ue
 : 
çl£
;

154 
	}
}

156 cÚ¡ 
¹ems_¡©us_code
 
	g¹emsTaskMode
::
	$g_a¤_¡©e
(
¹ems_mode
& 
a¤
)

158 
	`£t_¡©us_code
(
	`¹ems_sk_mode
(0, 
RTEMS_CURRENT_MODE
, &
a¤
));

159 
a¤
 &ð
RTEMS_ASR_MASK
;

160  
	`Ï¡_¡©us_code
();

161 
	}
}

163 cÚ¡ 
¹ems_¡©us_code
 
	g¹emsTaskMode
::
	$£t_a¤_¡©e
(cÚ¡ 
¹ems_mode
 
a¤
)

165 
¹ems_mode
 
Þd_mode
;

166  
	`£t_¡©us_code
(
	`¹ems_sk_mode
(
a¤
, 
RTEMS_ASR_MASK
, &
Þd_mode
));

167 
	}
}

169 cÚ¡ 
¹ems_¡©us_code
 
	g¹emsTaskMode
::
	$£t_a¤_¡©e
(cÚ¡ 
¹ems_mode
 
a¤
,

170 
¹ems_mode
& 
Þd_a¤
)

172 
	`£t_¡©us_code
(
	`¹ems_sk_mode
(
a¤
, 
RTEMS_ASR_MASK
, &
Þd_a¤
));

173 
Þd_a¤
 &ð
RTEMS_ASR_MASK
;

174  
	`Ï¡_¡©us_code
();

175 
	}
}

177 cÚ¡ 
boÞ
 
	g¹emsTaskMode
::
	$a¤_£t
(cÚ¡ 
¹ems_mode
 
a¤
)

179  (
a¤
 & 
RTEMS_ASR_MASK
è? 
ue
 : 
çl£
;

180 
	}
}

182 cÚ¡ 
¹ems_¡©us_code
 
	g¹emsTaskMode
::
	$g_¼u±_Ëv
(
¹ems_¼u±_Ëv
& 
Ëv
)

184 
¹ems_mode
 
mode
;

185 
	`£t_¡©us_code
(
	`¹ems_sk_mode
(0, 
RTEMS_CURRENT_MODE
, &
mode
));

186 
Ëv
 = 
mode
 & 
RTEMS_INTERRUPT_MASK
;

187  
	`Ï¡_¡©us_code
();

188 
	}
}

190 cÚ¡ 
¹ems_¡©us_code
 
	g¹emsTaskMode
::
	$£t_¼u±_Ëv
(cÚ¡ 
¹ems_¼u±_Ëv
 
Ëv
)

192 
¹ems_mode
 
Þd_mode
;

193  
	`£t_¡©us_code
(
	`¹ems_sk_mode
(
Ëv
, 
RTEMS_INTERRUPT_MASK
, &
Þd_mode
));

194 
	}
}

196 cÚ¡ 
¹ems_¡©us_code
 
	g¹emsTaskMode
::
	$£t_¼u±_Ëv
(
¹ems_¼u±_Ëv
 
Ëv
,

197 
¹ems_¼u±_Ëv
& 
Þd_Ëv
)

199 
	`£t_¡©us_code
(
	`¹ems_sk_mode
(
Ëv
, 
RTEMS_INTERRUPT_MASK
, &
Þd_Ëv
));

200 
Þd_Ëv
 = old_Ëv & 
RTEMS_INTERRUPT_MASK
;

201  
	`Ï¡_¡©us_code
();

202 
	}
}

	@src/librtems++/include/rtems++/rtemsTimer.h

26 #ià!
defed
(
_¹emsTim_h_
)

27 
	#_¹emsTim_h_


	)

29 
	~<¹ems++/¹emsStusCode.h
>

35 þas 
	c¹emsTim


36 : 
public
 
¹emsStusCode


38 
public
:

42 
¹emsTim
(cÚ¡ * 
Çme
);

43 
¹emsTim
();

46 
	mvtu®
 ~
¹emsTim
();

49 
vtu®
 cÚ¡ 
¹ems_¡©us_code
 
ü
(cÚ¡ * 
Çme
);

50 
vtu®
 cÚ¡ 
¹ems_¡©us_code
 
de¡roy
();

53 
le
 cÚ¡ 
¹ems_¡©us_code
 
fe_aá
(cÚ¡ 
¹ems_rv®
 
miüo_£cs
);

54 
le
 cÚ¡ 
¹ems_¡©us_code
 
»³©_fe_©
(cÚ¡ 
¹ems_rv®
 
miüo_£cs
);

55 
le
 cÚ¡ 
¹ems_¡©us_code
 
fe_wh
(cÚ¡ 
¹ems_time_of_day
& 
wh
);

57 
le
 cÚ¡ 
¹ems_¡©us_code
 
ÿnûl
();

58 
le
 cÚ¡ 
¹ems_¡©us_code
 
»£t
();

61 cÚ¡ 
¹ems_id
 
	$id_is
(ècÚ¡ {  
id
; }

62 cÚ¡ 
¹ems_Çme
 
	$Çme_is
(ècÚ¡ {  
Çme
; 
	}
}

63 cÚ¡ *
	$Çme_¡rg
(ècÚ¡ {  
Çme_¡r
; 
	}
}

65 
	g´Ùeùed
:

68 
vtu®
 
igged
() = 0;

70 
	g´iv©e
:

72 
¹emsTim
(cÚ¡msTim& 
tim
);

73 
	g¹emsTim
& 
	gÝ©Ü
=(cÚ¡ 
¹emsTim
& 
tim
);

76 
make_v®id
();

79 
¹ems_Çme
 
	gÇme
;

80 
	gÇme_¡r
[5];

83 
boÞ
 
	g»³©
;

86 
¹ems_id
 
	gid
;

89 
commÚ_hªdËr
(
¹ems_id
 
id
, *
u£r_d©a
);

92 cÚ¡ 
¹ems_¡©us_code
 
	g¹emsTim
::
	$fe_aá
(cÚ¡ 
¹ems_rv®
 
miüo_£cs
)

94 
»³©
 = 
çl£
;

95 
¹ems_rv®
 
u£cs
 = 
miüo_£cs
 &&

96 (
miüo_£cs
 < 
	`¹ems_cÚfigu¿tiÚ_g_miüo£cÚds_³r_tick
()) ?

97 
	`¹ems_cÚfigu¿tiÚ_g_miüo£cÚds_³r_tick
(è: 
miüo_£cs
;

98  
	`£t_¡©us_code
(
	`¹ems_tim_fe_aá
(
id
,

99 
	`RTEMS_MICROSECONDS_TO_TICKS
(
u£cs
),

100 
commÚ_hªdËr
,

101 
this
));

102 
	}
}

104 cÚ¡ 
¹ems_¡©us_code
 
	g¹emsTim
::
	$»³©_fe_©
(cÚ¡ 
¹ems_rv®
 
miüo_£cs
)

106 
»³©
 = 
ue
;

107 
¹ems_rv®
 
u£cs
 = 
miüo_£cs
 &&

108 (
miüo_£cs
 < 
	`¹ems_cÚfigu¿tiÚ_g_miüo£cÚds_³r_tick
()) ?

109 
	`¹ems_cÚfigu¿tiÚ_g_miüo£cÚds_³r_tick
(è: 
miüo_£cs
;

110  
	`£t_¡©us_code
(
	`¹ems_tim_fe_aá
(
id
,

111 
	`RTEMS_MICROSECONDS_TO_TICKS
(
u£cs
),

112 
commÚ_hªdËr
,

113 
this
));

114 
	}
}

116 cÚ¡ 
¹ems_¡©us_code
 
	g¹emsTim
::
	$fe_wh
(cÚ¡ 
¹ems_time_of_day
& 
wh
)

118  
	`£t_¡©us_code
(
	`¹ems_tim_fe_wh
(
id
,

119 (
¹ems_time_of_day
*è&
wh
,

120 
commÚ_hªdËr
,

121 
this
));

122 
	}
}

124 cÚ¡ 
¹ems_¡©us_code
 
	g¹emsTim
::
	$ÿnûl
()

126 
»³©
 = 
çl£
;

127  
	`£t_¡©us_code
(
	`¹ems_tim_ÿnûl
(
id
));

128 
	}
}

130 cÚ¡ 
¹ems_¡©us_code
 
	g¹emsTim
::
	$»£t
()

132  
	`£t_¡©us_code
(
	`¹ems_tim_»£t
(
id
));

133 
	}
}

	@src/librtems++/src/rtemsEvent.cc

19 
	~<¹ems++/¹emsEvt.h
>

25 
	g¹emsEvt
::
	$¹emsEvt
(cÚ¡ *
Çme_¡r
, 
ut32_t
 
node
)

26 : 
	`Çme
(
	`¹ems_bud_Çme
('S', 'E', 'L', 'F')),

27 
	$id
(
RTEMS_SELF
)

29 
	`cÚÃù
(
Çme_¡r
, 
node
);

30 
	}
}

32 
	g¹emsEvt
::
	$¹emsEvt
(cÚ¡ 
¹emsEvt
& 
evt
)

34 
Çme
 = 
evt
.name;

35 
id
 = 
evt
.id;

36 
	}
}

38 
	g¹emsEvt
::
	$¹emsEvt
()

39 : 
	`Çme
(
	`¹ems_bud_Çme
('S', 'E', 'L', 'F')),

40 
	$id
(
RTEMS_SELF
)

42 
	}
}

44 
	g¹emsEvt
::~
	$¹emsEvt
()

46 
	}
}

48 cÚ¡ 
¹emsEvt
&msEvt::
Ý©Ü
=(cÚ¡msEvt& 
evt
)

50 
Çme
 = 
evt
.name;

51 
	gid
 = 
evt
.
id
;

53  *
	gthis
;

56 cÚ¡ 
¹ems_¡©us_code
 
	g¹emsEvt
::
	$cÚÃù
(cÚ¡ *
Çme_¡r
,

57 cÚ¡ 
ut32_t
 
node
)

59 
Çme
 = 
	`¹ems_bud_Çme
(
Çme_¡r
[0],

60 
Çme_¡r
[1],

61 
Çme_¡r
[2],

62 
Çme_¡r
[3]);

64 
	`£t_¡©us_code
(
	`¹ems_sk_idt
(
Çme
, 
node
, &
id
));

66 ià(
	`unsucûssful
())

68 
Çme
 = 
	`¹ems_bud_Çme
('S', 'E', 'L', 'F');

69 
id
 = 
RTEMS_SELF
;

72  
	`Ï¡_¡©us_code
();

73 
	}
}

	@src/librtems++/src/rtemsInterrupt.cc

19 
	~<¹ems++/¹emsIÁru±.h
>

21 #ià(
CPU_SIMPLE_VECTORED_INTERRUPTS
 =ð
TRUE
)

30 
¹emsIÁru±
 **
	g¼u±_bË
;

33 
boÞ
 
	gli£d
 = 
çl£
;

39 
	~<c¡dlib
>

41 
	g¹emsIÁru±
::
	$¹emsIÁru±
()

42 : 
	`veùÜ
(0),

43 
	`ÿught
(
çl£
),

44 
	`Þd_hªdËr
(0),

45 
	$Þd_¼u±
(0)

47 ià(!
li£d
)

49 
¼u±_bË
 = (
¹emsIÁru±
 **)

50 
	`m®loc
((
¹emsIÁru±
 *è* 
CPU_INTERRUPT_NUMBER_OF_VECTORS
);

51 
¹ems_veùÜ_numb
 
vec
 = 0;

52 
vec
 < 
CPU_INTERRUPT_NUMBER_OF_VECTORS
;

53 
vec
++)

55 
¼u±_bË
[
vec
] = 0;

57 
li£d
 = 
ue
;

59 
	}
}

61 
	g¹emsIÁru±
::~
	$¹emsIÁru±
()

63 
	`»Ëa£
();

64 
	}
}

66 cÚ¡ 
¹ems_¡©us_code
 
	g¹emsIÁru±
::
	$i¤_ÿtch
(cÚ¡ 
¹ems_veùÜ_numb
 
vec
)

68 ià(
vec
 >ð
CPU_INTERRUPT_NUMBER_OF_VECTORS
)

69  
	`£t_¡©us_code
(
RTEMS_INVALID_NUMBER
);

71 ià(
ÿught
)

72  
	`£t_¡©us_code
(
RTEMS_RESOURCE_IN_USE
);

74 
Þd_¼u±
 = 
¼u±_bË
[
vec
];

75 
¼u±_bË
[
vec
] = 
this
;

76 
veùÜ
 = 
vec
;

78 #ià(
CPU_SIMPLE_VECTORED_INTERRUPTS
 =ð
TRUE
)

79 
	`£t_¡©us_code
(
	`¹ems_¼u±_ÿtch
(
»deùÜ
,

80 
veùÜ
,

81 &
Þd_hªdËr
));

83 
	`£t_¡©us_code
(
RTEMS_NOT_DEFINED
);

85 ià(
	`sucûssful
())

86 
ÿught
 = 
ue
;

89 
¼u±_bË
[
veùÜ
] = 
Þd_¼u±
;

90 
Þd_¼u±
 = 0;

91 
Þd_hªdËr
 = 0;

92 
veùÜ
 = 0;

95  
	`Ï¡_¡©us_code
();

96 
	}
}

98 cÚ¡ 
¹ems_¡©us_code
 
	g¹emsIÁru±
::
	$»Ëa£
()

100 ià(
ÿught
)

102 #ià(
CPU_SIMPLE_VECTORED_INTERRUPTS
 =ð
TRUE
)

103 
	`£t_¡©us_code
(
	`¹ems_¼u±_ÿtch
(
Þd_hªdËr
,

104 
veùÜ
,

105 &
Þd_hªdËr
));

107 
	`£t_¡©us_code
(
RTEMS_NOT_DEFINED
);

109 
¼u±_bË
[
veùÜ
] = 
Þd_¼u±
;

110 
Þd_¼u±
 = 0;

111 
Þd_hªdËr
 = 0;

112 
veùÜ
 = 0;

113 
ÿught
 = 
çl£
;

116 
	`£t_¡©us_code
(
RTEMS_SUCCESSFUL
);

118  
	`Ï¡_¡©us_code
();

119 
	}
}

121 
	g¹emsIÁru±
::
	$»deùÜ
(
¹ems_veùÜ_numb
 
veùÜ
)

123 ià(
¼u±_bË
[
veùÜ
])

124 
¼u±_bË
[
veùÜ
]->
	`hªdËr
();

125 
	}
}

	@src/librtems++/src/rtemsMessageQueue.cc

19 
	~<c¡rg
>

20 
	~<¹ems++/¹emsMes§geQueue.h
>

26 
	g¹emsMes§geQueue
::
	$¹emsMes§geQueue
(cÚ¡ * 
mqÇme
,

27 cÚ¡ 
ut32_t
 
couÁ
,

28 cÚ¡ 
size_t
 
max_mes§ge_size
,

29 cÚ¡ 
WaMode
 
wa_mode
,

30 cÚ¡ 
ScÝe
 
scÝe
)

31 : 
	`Çme
(0),

32 
	`owÃr
(
ue
),

33 
	$id
(0)

35 
	`¡rýy
(
Çme_¡r
, "NOID");

36 
	`ü
(
mqÇme
, 
couÁ
, 
max_mes§ge_size
, 
wa_mode
, 
scÝe
);

37 
	}
}

39 
	g¹emsMes§geQueue
::
	$¹emsMes§geQueue
(cÚ¡ *
mqÇme
,

40 cÚ¡ 
ut32_t
 
node
)

41 : 
	`Çme
(0),

42 
	`owÃr
(
çl£
),

43 
	$id
(0)

45 
	`¡rýy
(
Çme_¡r
, "NOID");

46 
	`cÚÃù
(
mqÇme
, 
node
);

47 
	}
}

49 
	g¹emsMes§geQueue
::
	$¹emsMes§geQueue
(cÚ¡ 
¹emsMes§geQueue
& 
mes§ge_queue
)

50 : 
	`Çme
(0),

51 
	`owÃr
(
çl£
),

52 
	$id
(0)

54 
Çme
 = 
mes§ge_queue
.name;

55 
	`¡rýy
(
Çme_¡r
, 
mes§ge_queue
.name_str);

56 
id
 = 
mes§ge_queue
.id;

57 
	}
}

59 
	g¹emsMes§geQueue
::
	$¹emsMes§geQueue
()

60 : 
	`Çme
(0),

61 
	`owÃr
(
çl£
),

62 
	$id
(0)

64 
	`¡rýy
(
Çme_¡r
, "NOID");

65 
	}
}

67 
	g¹emsMes§geQueue
::~
	$¹emsMes§geQueue
()

69 
	`de¡roy
();

70 
	}
}

72 
	g¹emsMes§geQueue
::
	$make_v®id
()

74 
	`¡rýy
(
Çme_¡r
, "NOID");

75 
Çme
 = 0;

76 
id
 = 0;

77 
owÃr
 = 
çl£
;

78 
	}
}

80 cÚ¡ 
¹ems_¡©us_code
 
	g¹emsMes§geQueue
::
	$ü
(cÚ¡ * 
mqÇme
,

81 cÚ¡ 
ut32_t
 
couÁ
,

82 cÚ¡ 
size_t
 
max_mes§ge_size
,

83 cÚ¡ 
WaMode
 
wa_mode
,

84 cÚ¡ 
ScÝe
 
scÝe
)

86 ià(
id
)

87  
	`£t_¡©us_code
(
RTEMS_ILLEGAL_ON_SELF
);

89 
owÃr
 = 
ue
;

91 
	`¡rýy
(
Çme_¡r
, " ");

92 
c
 = 0; (ø< 4è&& (
mqÇme
[c] != '\0'); c++)

93 
Çme_¡r
[
c
] = 
mqÇme
[c];

94 
Çme
 = 
	`¹ems_bud_Çme
(
Çme_¡r
[0],

95 
Çme_¡r
[1],

96 
Çme_¡r
[2],

97 
Çme_¡r
[3]);

99 
	`£t_¡©us_code
(
	`¹ems_mes§ge_queue_ü
(
Çme
,

100 
couÁ
,

101 
max_mes§ge_size
,

102 
scÝe
 | 
wa_mode
,

103 &
id
));

105 ià(
	`unsucûssful
())

107 
	`make_v®id
();

110  
	`Ï¡_¡©us_code
();

111 
	}
}

113 cÚ¡ 
¹ems_¡©us_code
 
	g¹emsMes§geQueue
::
	$de¡roy
()

115 ià(
id
 && 
owÃr
)

117 
	`£t_¡©us_code
(
	`¹ems_mes§ge_queue_de
(
id
));

118 
	`make_v®id
();

121 
	`£t_¡©us_code
(
RTEMS_NOT_OWNER_OF_RESOURCE
);

123  
	`Ï¡_¡©us_code
();

124 
	}
}

126 cÚ¡ 
	g¹emsMes§geQueue
&msMes§geQueue::
Ý©Ü
=(cÚ¡ 
¹emsMes§geQueue
& 
mes§ge_queue
)

128 ià(!
owÃr
)

130 
Çme
 = 
mes§ge_queue
.name;

131 
¡rýy
(
Çme_¡r
, 
mes§ge_queue
.name_str);

132 
	gid
 = 
mes§ge_queue
.
id
;

135  *
	gthis
;

138 cÚ¡ 
¹ems_¡©us_code
 
	g¹emsMes§geQueue
::
	$cÚÃù
(cÚ¡ *
mqÇme
,

139 cÚ¡ 
ut32_t
 
node
)

141 ià(
id
 && 
owÃr
)

142  
	`£t_¡©us_code
(
RTEMS_UNSATISFIED
);

145 
owÃr
 = 
çl£
;

147 
	`¡rýy
(
Çme_¡r
, " ");

148 
c
 = 0; (ø< 4è&& (
mqÇme
[c] != '\0'); c++)

149 
Çme_¡r
[
c
] = 
mqÇme
[c];

150 
Çme
 = 
	`¹ems_bud_Çme
(
Çme_¡r
[0],

151 
Çme_¡r
[1],

152 
Çme_¡r
[2],

153 
Çme_¡r
[3]);

155 
	`£t_¡©us_code
(
	`¹ems_mes§ge_queue_idt
(
Çme
, 
node
, &
id
));

157 ià(
	`unsucûssful
())

159 
	`make_v®id
();

162  
	`Ï¡_¡©us_code
();

163 
	}
}

	@src/librtems++/src/rtemsSemaphore.cc

19 
	~<c¡rg
>

20 
	~<¹ems++/¹emsSem­hÜe.h
>

26 
	g¹emsSem­hÜe
::
	$¹emsSem­hÜe
(cÚ¡ * 
¢ame
,

27 cÚ¡ 
ScÝe
 
scÝe
,

28 cÚ¡ 
ut32_t
 
couÁ
,

29 cÚ¡ 
WaMode
 
wa_mode
,

30 cÚ¡ 
Ty³
 
ty³
,

31 cÚ¡ 
PriÜy
 
´iÜy
,

32 cÚ¡ 
Ceg
 
ûg
,

33 cÚ¡ 
¹ems_sk_´iÜy
 
´iÜy_ûg
)

34 : 
	`Çme
(0),

35 
	`owÃr
(
ue
),

36 
	$id
(0)

38 
	`¡rýy
(
Çme_¡r
, "NOID");

39 
	`ü
(
¢ame
,

40 
scÝe
,

41 
couÁ
,

42 
wa_mode
,

43 
ty³
,

44 
´iÜy
,

45 
ûg
,

46 
´iÜy_ûg
);

47 
	}
}

49 
	g¹emsSem­hÜe
::
	$¹emsSem­hÜe
(cÚ¡ *
¢ame
, cÚ¡ 
ut32_t
 
node
)

50 : 
	`Çme
(0),

51 
	`owÃr
(
çl£
),

52 
	$id
(0)

54 
	`¡rýy
(
Çme_¡r
, "NOID");

55 
	`cÚÃù
(
¢ame
, 
node
);

56 
	}
}

58 
	g¹emsSem­hÜe
::
	$¹emsSem­hÜe
(cÚ¡ 
¹emsSem­hÜe
& 
£m­hÜe
)

59 : 
	`Çme
(0),

60 
	`owÃr
(
çl£
),

61 
	$id
(0)

63 
Çme
 = 
£m­hÜe
.name;

64 
	`¡rýy
(
Çme_¡r
, 
£m­hÜe
.name_str);

65 
id
 = 
£m­hÜe
.id;

66 
	}
}

68 
	g¹emsSem­hÜe
::
	$¹emsSem­hÜe
()

69 : 
	`Çme
(0),

70 
	`owÃr
(
çl£
),

71 
	$id
(0)

73 
	`¡rýy
(
Çme_¡r
, "NOID");

74 
	}
}

76 
	g¹emsSem­hÜe
::~
	$¹emsSem­hÜe
()

78 
	`de¡roy
();

79 
	}
}

81 
	g¹emsSem­hÜe
::
	$make_v®id
()

83 
	`¡rýy
(
Çme_¡r
, "NOID");

84 
Çme
 = 0;

85 
id
 = 0;

86 
owÃr
 = 
çl£
;

87 
	}
}

89 cÚ¡ 
¹ems_¡©us_code
 
	g¹emsSem­hÜe
::
	$ü
(cÚ¡ * 
¢ame
,

90 cÚ¡ 
ScÝe
 
scÝe
,

91 cÚ¡ 
ut32_t
 
couÁ
,

92 cÚ¡ 
WaMode
 
wa_mode
,

93 cÚ¡ 
Ty³
 
ty³
,

94 cÚ¡ 
PriÜy
 
´iÜy
,

95 cÚ¡ 
Ceg
 
ûg
,

96 cÚ¡ 
¹ems_sk_´iÜy
 
´iÜy_ûg
)

98 ià(
id
)

99  
	`£t_¡©us_code
(
RTEMS_ILLEGAL_ON_SELF
);

101 
owÃr
 = 
ue
;

103 
	`¡rýy
(
Çme_¡r
, " ");

104 
c
 = 0; (ø< 4è&& (
¢ame
[c] != '\0'); c++)

105 
Çme_¡r
[
c
] = 
¢ame
[c];

106 
Çme
 = 
	`¹ems_bud_Çme
(
Çme_¡r
[0],

107 
Çme_¡r
[1],

108 
Çme_¡r
[2],

109 
Çme_¡r
[3]);

111 
	`£t_¡©us_code
(
	`¹ems_£m­hÜe_ü
(
Çme
,

112 
couÁ
,

113 
scÝe
 | 
wa_mode
 | 
ty³
 | 
´iÜy
 | 
ûg
,

114 
´iÜy_ûg
,

115 &
id
));

117 ià(
	`unsucûssful
())

119 
	`make_v®id
();

122  
	`Ï¡_¡©us_code
();

123 
	}
}

125 cÚ¡ 
¹ems_¡©us_code
 
	g¹emsSem­hÜe
::
	$de¡roy
()

127 ià(
id
 && 
owÃr
)

129 
	`£t_¡©us_code
(
	`¹ems_£m­hÜe_de
(
id
));

130 
	`make_v®id
();

133 
	`£t_¡©us_code
(
RTEMS_NOT_OWNER_OF_RESOURCE
);

135  
	`Ï¡_¡©us_code
();

136 
	}
}

138 cÚ¡ 
	g¹emsSem­hÜe
&msSem­hÜe::
Ý©Ü
=(cÚ¡ 
¹emsSem­hÜe
& 
£m­hÜe
)

140 ià(!
owÃr
)

142 
Çme
 = 
£m­hÜe
.name;

143 
	gid
 = 
£m­hÜe
.
id
;

145  *
	gthis
;

148 cÚ¡ 
¹ems_¡©us_code
 
	g¹emsSem­hÜe
::
	$cÚÃù
(cÚ¡ *
¢ame
,

149 cÚ¡ 
ut32_t
 
node
)

151 ià(
id
 && 
owÃr
)

152  
	`£t_¡©us_code
(
RTEMS_UNSATISFIED
);

155 
owÃr
 = 
çl£
;

157 
	`¡rýy
(
Çme_¡r
, " ");

158 
c
 = 0; (ø< 4è&& (
¢ame
[c] != '\0'); c++)

159 
Çme_¡r
[
c
] = 
¢ame
[c];

160 
Çme
 = 
	`¹ems_bud_Çme
(
Çme_¡r
[0],

161 
Çme_¡r
[1],

162 
Çme_¡r
[2],

163 
Çme_¡r
[3]);

165 
	`£t_¡©us_code
(
	`¹ems_£m­hÜe_idt
(
Çme
, 
node
, &
id
));

167 ià(
	`unsucûssful
())

169 
	`make_v®id
();

172  
	`Ï¡_¡©us_code
();

173 
	}
}

	@src/librtems++/src/rtemsStatusCode.cc

19 
	~<¹ems++/¹emsStusCode.h
>

25 cÚ¡ *
	g¡©us_¡rgs
[
RTEMS_STATUS_CODES_LAST
 + 1] =

60 cÚ¡ *
	g¹emsStusCode
::
	$Ï¡_¡©us_¡rg
()

62  
	`¡©us_¡rg
(
Ï¡_¡©us
);

63 
	}
}

65 cÚ¡ *
	g¹emsStusCode
::
	$¡©us_¡rg
(
¹ems_¡©us_code
 
¡©us_code
)

68 ià(
¡©us_code
 <ð
RTEMS_STATUS_CODES_LAST
)

70  
¡©us_¡rgs
[
¡©us_code
];

74 
	}
}

	@src/librtems++/src/rtemsTask.cc

19 
	~<c¡rg
>

20 
	~<¹ems++/¹emsTask.h
>

22 
	~<¹ems++/¹emsTaskMode.h
>

28 
	g¹emsTask
::
	$¹emsTask
(cÚ¡ * 
ame
,

29 cÚ¡ 
¹ems_sk_´iÜy
 
l_´iÜy
,

30 cÚ¡ 
ut32_t
 
¡ack_size
,

31 cÚ¡ 
¹ems_mode
 
´m±iÚ
,

32 cÚ¡ 
¹ems_mode
 
time¦iû
,

33 cÚ¡ 
¹ems_mode
 
a¤
,

34 cÚ¡ 
¹ems_¼u±_Ëv
 
¼u±_Ëv
,

35 cÚ¡ 
FlßtgPot
 
æßtg_pot
,

36 cÚ¡ 
ScÝe
 
scÝe
)

37 : 
	`Çme
(
	`¹ems_bud_Çme
('S', 'E', 'L', 'F')),

38 
	`owÃr
(
ue
),

39 
	`id
(
RTEMS_SELF
),

40 
	$¬gumt
(0)

42 
	`¡rýy
(
Çme_¡r
, "SELF");

43 
	`ü
(
ame
,

44 
l_´iÜy
,

45 
¡ack_size
,

46 
´m±iÚ
,

47 
time¦iû
,

48 
a¤
,

49 
¼u±_Ëv
,

50 
æßtg_pot
,

51 
scÝe
);

52 
	}
}

54 
	g¹emsTask
::
	$¹emsTask
(cÚ¡ *
ame
, 
ut32_t
 
node
)

55 : 
	`Çme
(
	`¹ems_bud_Çme
('S', 'E', 'L', 'F')),

56 
	`owÃr
(
çl£
),

57 
	`id
(
RTEMS_SELF
),

58 
	$¬gumt
(0)

60 
	`¡rýy
(
Çme_¡r
, "SELF");

61 
	`cÚÃù
(
ame
, 
node
);

62 
	}
}

64 
	g¹emsTask
::
	$¹emsTask
(cÚ¡ 
¹emsTask
& 
sk
)

65 : 
	`Çme
(
	`¹ems_bud_Çme
('S', 'E', 'L', 'F')),

66 
	`owÃr
(
çl£
),

67 
	`id
(
RTEMS_SELF
),

68 
	$¬gumt
(0)

70 
Çme
 = 
sk
.name;

71 
	`¡rýy
(
Çme_¡r
, 
sk
.name_str);

72 
¬gumt
 = 
sk
.argument;

73 
id
 = 
sk
.id;

74 
	}
}

76 
	g¹emsTask
::
	$¹emsTask
()

77 : 
	`Çme
(
	`¹ems_bud_Çme
('S', 'E', 'L', 'F')),

78 
	`owÃr
(
çl£
),

79 
	`id
(
RTEMS_SELF
),

80 
	$¬gumt
(0)

82 
	`¡rýy
(
Çme_¡r
, "SELF");

83 
	}
}

85 
	g¹emsTask
::~
	$¹emsTask
()

87 
	`de¡roy
();

88 
	}
}

90 
	g¹emsTask
::
	$make_£lf
()

92 
	`¡rýy
(
Çme_¡r
, "SELF");

93 
Çme
 = 
	`¹ems_bud_Çme
('S', 'E', 'L', 'F');

94 
id
 = 
RTEMS_SELF
;

95 
owÃr
 = 
çl£
;

96 
	}
}

98 cÚ¡ 
¹ems_¡©us_code
 
	g¹emsTask
::
	$ü
(cÚ¡ * 
ame
,

99 cÚ¡ 
¹ems_sk_´iÜy
 
l_´iÜy
,

100 cÚ¡ 
ut32_t
 
¡ack_size
,

101 cÚ¡ 
¹ems_mode
 
´m±iÚ
,

102 cÚ¡ 
¹ems_mode
 
time¦iû
,

103 cÚ¡ 
¹ems_mode
 
a¤
,

104 cÚ¡ 
¹ems_¼u±_Ëv
 
¼u±_Ëv
,

105 cÚ¡ 
FlßtgPot
 
æßtg_pot
,

106 cÚ¡ 
ScÝe
 
scÝe
)

108 ià(
id
)

109  
	`£t_¡©us_code
(
RTEMS_ILLEGAL_ON_SELF
);

111 
owÃr
 = 
ue
;

113 
	`¡rýy
(
Çme_¡r
, " ");

114 
c
 = 0; (ø< 4è&& (
ame
[c] != '\0'); c++)

115 
Çme_¡r
[
c
] = 
ame
[c];

116 
Çme
 = 
	`¹ems_bud_Çme
(
Çme_¡r
[0],

117 
Çme_¡r
[1],

118 
Çme_¡r
[2],

119 
Çme_¡r
[3]);

122 
	`£t_¡©us_code
(
	`¹ems_sk_ü
(
Çme
,

123 
l_´iÜy
,

124 
¡ack_size
,

125 (
´m±iÚ
 & 
RTEMS_PREEMPT_MASK
) |

126 (
time¦iû
 & 
RTEMS_TIMESLICE_MASK
) |

127 (
a¤
 & 
RTEMS_ASR_MASK
) |

128 (
¼u±_Ëv
 & 
RTEMS_INTERRUPT_MASK
),

129 
æßtg_pot
 | 
scÝe
,

130 &
id
));

132 ià(
	`unsucûssful
())

134 
	`make_£lf
();

137  
	`Ï¡_¡©us_code
();

138 
	}
}

140 cÚ¡ 
¹ems_¡©us_code
 
	g¹emsTask
::
	$de¡roy
()

142 ià(
id
 && 
owÃr
)

144 
	`£t_¡©us_code
(
	`¹ems_sk_de
(
id
));

145 
	`make_£lf
();

148 
	`£t_¡©us_code
(
RTEMS_NOT_OWNER_OF_RESOURCE
);

150  
	`Ï¡_¡©us_code
();

151 
	}
}

153 cÚ¡ 
	g¹emsTask
&msTask::
Ý©Ü
=(cÚ¡ 
¹emsTask
& 
sk
)

155 ià(!
owÃr
)

157 
Çme
 = 
sk
.name;

158 
¡rýy
(
Çme_¡r
, 
sk
.name_str);

159 
	g¬gumt
 = 
sk
.
¬gumt
;

160 
	gid
 = 
sk
.
id
;

162  *
	gthis
;

165 cÚ¡ 
¹ems_¡©us_code
 
	g¹emsTask
::
	$cÚÃù
(cÚ¡ *
¢ame
,

166 cÚ¡ 
ut32_t
 
node
)

168 ià(
id
 && 
owÃr
)

169  
	`£t_¡©us_code
(
RTEMS_UNSATISFIED
);

172 
owÃr
 = 
çl£
;

174 
	`¡rýy
(
Çme_¡r
, " ");

175 
c
 = 0; (ø< 4è&& (
¢ame
[c] != '\0'); c++)

176 
Çme_¡r
[
c
] = 
¢ame
[c];

177 
Çme
 = 
	`¹ems_bud_Çme
(
Çme_¡r
[0],

178 
Çme_¡r
[1],

179 
Çme_¡r
[2],

180 
Çme_¡r
[3]);

182 
	`£t_¡©us_code
(
	`¹ems_sk_idt
(
Çme
, 
node
, &
id
));

184 ià(
	`unsucûssful
())

186 
	`make_£lf
();

189  
	`Ï¡_¡©us_code
();

190 
	}
}

192 cÚ¡ 
¹ems_¡©us_code
 
	g¹emsTask
::
	$¡¬t
(cÚ¡ 
¹ems_sk_¬gumt
 
¬g
)

194 ià(
owÃr
)

196 
¬gumt
 = 
¬g
;

198 
	`£t_¡©us_code
(
	`¹ems_sk_¡¬t
(
id
,

199 
Üig
,

200 (
¹ems_sk_¬gumt
è
this
));

203 
	`£t_¡©us_code
(
RTEMS_NOT_OWNER_OF_RESOURCE
);

204  
	`Ï¡_¡©us_code
();

205 
	}
}

207 cÚ¡ 
¹ems_¡©us_code
 
	g¹emsTask
::
	$»¡¬t
(cÚ¡ 
¹ems_sk_¬gumt
 
¬g
)

209 ià(
owÃr
)

211 
¬gumt
 = 
¬g
;

212 
	`£t_¡©us_code
(
	`¹ems_sk_»¡¬t
(
id
, (
¹ems_sk_¬gumt
è
this
));

215 
	`£t_¡©us_code
(
RTEMS_NOT_OWNER_OF_RESOURCE
);

217  
	`Ï¡_¡©us_code
();

218 
	}
}

220 cÚ¡ 
¹ems_¡©us_code
 
	g¹emsTask
::
	$su¥d
()

222  
	`£t_¡©us_code
(
	`¹ems_sk_su¥d
(
id
));

223 
	}
}

225 cÚ¡ 
¹ems_¡©us_code
 
	g¹emsTask
::
	$»sume
()

227  
	`£t_¡©us_code
(
	`¹ems_sk_»sume
(
id
));

228 
	}
}

230 cÚ¡ 
¹ems_¡©us_code
 
	g¹emsTask
::
	$wake_aá
(cÚ¡ 
¹ems_rv®
 
miüo_£cs
)

232 
¹ems_rv®
 
u£cs
 =

233 (
miüo_£cs
 < 
	`¹ems_cÚfigu¿tiÚ_g_miüo£cÚds_³r_tick
()) ?

234 
	`¹ems_cÚfigu¿tiÚ_g_miüo£cÚds_³r_tick
(è: 
miüo_£cs
;

235  
	`£t_¡©us_code
(
	`¹ems_sk_wake_aá
(
	`RTEMS_MICROSECONDS_TO_TICKS
(
u£cs
)));

236 
	}
}

238 cÚ¡ 
¹ems_¡©us_code
 
	g¹emsTask
::
	$wake_wh
(cÚ¡ 
¹ems_time_of_day
& 
tod
)

240  
	`£t_¡©us_code
(
	`¹ems_sk_wake_wh
((
¹ems_time_of_day
*è&
tod
));

241 
	}
}

243 cÚ¡ 
¹ems_¡©us_code
 
	g¹emsTask
::
	$g_´iÜy
(
¹ems_sk_´iÜy
& 
´iÜy
)

245  
	`£t_¡©us_code
(
	`¹ems_sk_£t_´iÜy
(
id
,

246 
RTEMS_CURRENT_PRIORITY
,

247 &
´iÜy
));

248 
	}
}

250 cÚ¡ 
¹ems_¡©us_code
 
	g¹emsTask
::
	$£t_´iÜy
(cÚ¡ 
¹ems_sk_´iÜy
 
´iÜy
)

252 
¹ems_sk_´iÜy
 
Þd_´iÜy
;

253  
	`£t_¡©us_code
(
	`¹ems_sk_£t_´iÜy
(
id
,

254 
´iÜy
,

255 &
Þd_´iÜy
));

256 
	}
}

258 cÚ¡ 
¹ems_¡©us_code
 
	g¹emsTask
::
	$£t_´iÜy
(cÚ¡ 
¹ems_sk_´iÜy
 
´iÜy
,

259 
¹ems_sk_´iÜy
& 
Þd_´iÜy
)

261  
	`£t_¡©us_code
(
	`¹ems_sk_£t_´iÜy
(
id
,

262 
´iÜy
,

263 &
Þd_´iÜy
));

264 
	}
}

266 cÚ¡ 
¹ems_¡©us_code
 
	g¹emsTask
::
	$g_nÙe
(cÚ¡ 
ut32_t
 
nÙad
,

267 
ut32_t
& 
nÙe
)

269  
	`£t_¡©us_code
(
	`¹ems_sk_g_nÙe
(
id
, 
nÙad
, &
nÙe
));

270 
	}
}

272 cÚ¡ 
¹ems_¡©us_code
 
	g¹emsTask
::
	$£t_nÙe
(cÚ¡ 
ut32_t
 
nÙad
,

273 cÚ¡ 
ut32_t
 
nÙe
)

275  
	`£t_¡©us_code
(
	`¹ems_sk_£t_nÙe
(
id
, 
nÙad
, 
nÙe
));

276 
	}
}

278 
	g¹emsTask
::
	$body
(
¹ems_sk_¬gumt
 )

280 
	}
}

282 
¹ems_sk
 
¹emsTask
::
	$Üig
(
¹ems_sk_¬gumt
 
¬gumt
)

284 
¹emsTask
 *
sk
 = (¹emsTask*è
¬gumt
;

285 
sk
->
	`body
Ñask->
¬gumt
);

286 
	}
}

	@src/librtems++/src/rtemsTimer.cc

19 
	~<c¡rg
>

20 
	~<¹ems++/¹emsTim.h
>

26 
	g¹emsTim
::
	$¹emsTim
(cÚ¡ * 
ame
)

27 : 
	`Çme
(0),

28 
	`»³©
(
çl£
),

29 
	$id
(0)

31 
	`¡rýy
(
Çme_¡r
, " ");

32 
	`ü
(
ame
);

33 
	}
}

35 
	g¹emsTim
::
	$¹emsTim
()

36 : 
	`Çme
(0),

37 
	`»³©
(
çl£
),

38 
	$id
(0)

40 
	`¡rýy
(
Çme_¡r
, " ");

41 
	}
}

43 
	g¹emsTim
::~
	$¹emsTim
()

45 
	`de¡roy
();

46 
	}
}

48 
	g¹emsTim
::
	$make_v®id
()

50 
	`¡rýy
(
Çme_¡r
, " ");

51 
Çme
 = 0;

52 
id
 = 0;

53 
»³©
 = 
çl£
;

54 
	}
}

55 cÚ¡ 
¹ems_¡©us_code
 
	g¹emsTim
::
	$ü
(cÚ¡ * 
ame
)

57 ià(
id
)

58  
	`£t_¡©us_code
(
RTEMS_ILLEGAL_ON_SELF
);

60 
	`¡rýy
(
Çme_¡r
, " ");

61 
c
 = 0; (ø< 4è&& (
ame
[c] != '\0'); c++)

62 
Çme_¡r
[
c
] = 
ame
[c];

63 
Çme
 = 
	`¹ems_bud_Çme
(
Çme_¡r
[0],

64 
Çme_¡r
[1],

65 
Çme_¡r
[2],

66 
Çme_¡r
[3]);

68 
	`£t_¡©us_code
(
	`¹ems_tim_ü
(
Çme
, &
id
));

70 ià(
	`unsucûssful
())

72 
	`make_v®id
();

75  
	`Ï¡_¡©us_code
();

76 
	}
}

78 cÚ¡ 
¹ems_¡©us_code
 
	g¹emsTim
::
	$de¡roy
()

80 ià(
id
)

82 
	`£t_¡©us_code
(
	`¹ems_tim_de
(
id
));

83 
	`make_v®id
();

86 
	`£t_¡©us_code
(
RTEMS_NOT_OWNER_OF_RESOURCE
);

88  
	`Ï¡_¡©us_code
();

89 
	}
}

91 
	g¹emsTim
::
	$commÚ_hªdËr
(
¹ems_id
 , *
u£r_d©a
)

93 
¹emsTim
 *
tim
 = (¹emsTim*è
u£r_d©a
;

95 ià(
tim
->
»³©
)

96 
tim
->
	`»£t
();

98 
tim
->
	`igged
();

99 
	}
}

	@src/support/version.c

10 
	~<¹ems/sy¡em.h
>

12 #iâdeà
RTEMS_VERSION


15 #iâdeà
CPU_NAME


18 #iâdeà
CPU_MODEL_NAME


21 #iâdeà
RTEMS_BSP


25 cÚ¡ 
	g_RTEMS_vsiÚ
[] =

26 "¹ems-" 
RTEMS_VERSION
 "(" 
CPU_NAME
 "/" 
CPU_MODEL_NAME
 "/" 
RTEMS_BSP
 ")";

	@/usr/include/assert.h

22 #ifdef 
_ASSERT_H


24 #undeà
_ASSERT_H


25 #undeà
as£¹


26 #undeà
__ASSERT_VOID_CAST


28 #ifdef 
__USE_GNU


29 #undeà
as£¹_³¼Ü


34 
	#_ASSERT_H
 1

	)

35 
	~<ã©u»s.h
>

37 #ià
defed
 
__ýlu¥lus
 && 
__GNUC_PREREQ
 (2,95)

38 
	#__ASSERT_VOID_CAST
 
¡©ic_ÿ¡
<>

	)

40 
	#__ASSERT_VOID_CAST
 ()

	)

48 #ifdef 
NDEBUG


50 
	#as£¹
(
ex´
è(
	`__ASSERT_VOID_CAST
 (0))

	)

58 #ifdef 
__USE_GNU


59 
	#as£¹_³¼Ü
(
ºum
è(
	`__ASSERT_VOID_CAST
 (0))

	)

64 #iâdeà
_ASSERT_H_DECLS


65 
	#_ASSERT_H_DECLS


	)

66 
__BEGIN_DECLS


69 
	$__as£¹_ç
 (cÚ¡ *
__as£¹iÚ
, cÚ¡ *
__fe
,

70 
__le
, cÚ¡ *
__funùiÚ
)

71 
__THROW
 
	`__©ibu__
 ((
__nÜuº__
));

74 
	$__as£¹_³¼Ü_ç
 (
__ºum
, cÚ¡ *
__fe
,

75 
__le
, cÚ¡ *
__funùiÚ
)

76 
__THROW
 
	`__©ibu__
 ((
__nÜuº__
));

81 
	$__as£¹
 (cÚ¡ *
__as£¹iÚ
, cÚ¡ *
__fe
, 
__le
)

82 
__THROW
 
	`__©ibu__
 ((
__nÜuº__
));

85 
__END_DECLS


88 
	#as£¹
(
ex´
) \

89 ((
ex´
) \

90 ? 
	`__ASSERT_VOID_CAST
 (0) \

91 : 
	`__as£¹_ç
 (
	`__STRING
(
ex´
), 
__FILE__
, 
__LINE__
, 
__ASSERT_FUNCTION
))

	)

93 #ifdef 
__USE_GNU


94 
	#as£¹_³¼Ü
(
ºum
) \

95 (!(
ºum
) \

96 ? 
	`__ASSERT_VOID_CAST
 (0) \

97 : 
	`__as£¹_³¼Ü_ç
 ((
ºum
), 
__FILE__
, 
__LINE__
, 
__ASSERT_FUNCTION
))

	)

105 #ià
defed
 
__ýlu¥lus
 ? 
	`__GNUC_PREREQ
 (2, 6) : __GNUC_PREREQ (2, 4)

106 
	#__ASSERT_FUNCTION
 
__PRETTY_FUNCTION__


	)

108 #ià
defed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

109 
	#__ASSERT_FUNCTION
 
__func__


	)

111 
	#__ASSERT_FUNCTION
 ((cÚ¡ *è0)

	)

118 #ià
defed
 
__USE_ISOC11
 && !defed 
__ýlu¥lus


120 #undeà
¡©ic_as£¹


121 
	#¡©ic_as£¹
 
_Stic_as£¹


	)

	@/usr/include/ctype.h

22 #iâdef 
_CTYPE_H


23 
	#_CTYPE_H
 1

	)

25 
	~<ã©u»s.h
>

26 
	~<bs/ty³s.h
>

28 
	g__BEGIN_DECLS


30 #iâdeà
_ISb


39 
	~<dn.h
>

40 #ià
__BYTE_ORDER
 =ð
__BIG_ENDIAN


41 
	#_ISb
(
b
è(1 << (b))

	)

43 
	#_ISb
(
b
è((bè< 8 ? ((1 << (b)è<< 8è: ((1 << (b)è>> 8))

	)

48 
	m_ISuµ
 = 
_ISb
 (0),

49 
	m_ISlow
 = 
_ISb
 (1),

50 
	m_IS®pha
 = 
_ISb
 (2),

51 
	m_ISdig
 = 
_ISb
 (3),

52 
	m_ISxdig
 = 
_ISb
 (4),

53 
	m_IS¥aû
 = 
_ISb
 (5),

54 
	m_IS´t
 = 
_ISb
 (6),

55 
	m_ISg¿ph
 = 
_ISb
 (7),

56 
	m_ISbÏnk
 = 
_ISb
 (8),

57 
	m_ISúl
 = 
_ISb
 (9),

58 
	m_ISpunù
 = 
_ISb
 (10),

59 
	m_IS®num
 = 
_ISb
 (11)

79 cÚ¡ **
	$__ùy³_b_loc
 ()

80 
__THROW
 
	`__©ibu__
 ((
__cÚ¡__
));

81 cÚ¡ 
__t32_t
 **
	$__ùy³_tÞow_loc
 ()

82 
__THROW
 
	`__©ibu__
 ((
__cÚ¡__
));

83 cÚ¡ 
__t32_t
 **
	$__ùy³_touµ_loc
 ()

84 
__THROW
 
	`__©ibu__
 ((
__cÚ¡__
));

87 #iâdeà
__ýlu¥lus


88 
	#__isùy³
(
c
, 
ty³
) \

89 ((*
	`__ùy³_b_loc
 ())[(è(
c
)] & (è
ty³
)

	)

90 #ià
defed
 
__USE_EXTERN_INLINES


91 
	#__isùy³_f
(
ty³
) \

92 
__exº_le
 \

93 
is
##
	`ty³
 (
__c
è
__THROW
 \

95  (*
	`__ùy³_b_loc
 ())[(è(
__c
)] & (è
_IS
##
ty³
; \

96 
	}

	)
}

99 
	#__i§scii
(
c
è(((cè& ~0x7fè=ð0è

	)

100 
	#__tßscii
(
c
è((cè& 0x7fè

	)

102 
	#__exùy³
(
Çme
è
	`Çme
 (è
__THROW


	)

104 
__BEGIN_NAMESPACE_STD


110 
__exùy³
 (
i§Êum
);

111 
__exùy³
 (
i§Íha
);

112 
__exùy³
 (
isúl
);

113 
__exùy³
 (
isdig
);

114 
__exùy³
 (
i¦ow
);

115 
__exùy³
 (
isg¿ph
);

116 
__exùy³
 (
i¥rt
);

117 
__exùy³
 (
i¥unù
);

118 
__exùy³
 (
is¥aû
);

119 
__exùy³
 (
isuµ
);

120 
__exùy³
 (
isxdig
);

124 
	$tÞow
 (
__c
è
__THROW
;

127 
	$touµ
 (
__c
è
__THROW
;

129 
__END_NAMESPACE_STD


133 #ifdef 
__USE_ISOC99


134 
__BEGIN_NAMESPACE_C99


136 
	`__exùy³
 (
isbÏnk
);

138 
__END_NAMESPACE_C99


141 #ifdeà
__USE_GNU


143 
	$isùy³
 (
__c
, 
__mask
è
__THROW
;

146 #ià
defed
 
__USE_SVID
 || defed 
__USE_MISC
 || defed 
__USE_XOPEN


150 
	$i§scii
 (
__c
è
__THROW
;

154 
	$tßscii
 (
__c
è
__THROW
;

158 
	`__exùy³
 (
_touµ
);

159 
	`__exùy³
 (
_tÞow
);

163 
	#__tobody
(
c
, 
f
, 
a
, 
¬gs
) \

164 (
__exnsiÚ__
 \

165 ({ 
__»s
; \

166 ià( (
c
) > 1) \

168 ià(
	`__but_cÚ¡ªt_p
 (
c
)) \

170 
__c
 = (
c
); \

171 
__»s
 = 
__c
 < -128 || __ø> 255 ? __ø: (
a
)[__c]; \

174 
__»s
 = 
f
 
¬gs
; \

177 
__»s
 = (
a
)[(è(
c
)]; \

178 
__»s
; 
	}
}))

	)

180 #ià!
defed
 
__NO_CTYPE


181 #ifdeà
__isùy³_f


182 
	$__isùy³_f
 (
®num
)

183 
	$__isùy³_f
 (
®pha
)

184 
	$__isùy³_f
 (
úl
)

185 
	$__isùy³_f
 (
dig
)

186 
	$__isùy³_f
 (
low
)

187 
	$__isùy³_f
 (
g¿ph
)

188 
	$__isùy³_f
 (
´t
)

189 
	$__isùy³_f
 (
punù
)

190 
	$__isùy³_f
 (
¥aû
)

191 
	$__isùy³_f
 (
uµ
)

192 
	$__isùy³_f
 (
xdig
)

193 #ifdeà
__USE_ISOC99


194 
	$__isùy³_f
 (
bÏnk
)

196 #ià
defed
 
__isùy³


197 
	#i§Êum
(
c
è
	`__isùy³
((c), 
_IS®num
)

	)

198 
	#i§Íha
(
c
è
	`__isùy³
((c), 
_IS®pha
)

	)

199 
	#isúl
(
c
è
	`__isùy³
((c), 
_ISúl
)

	)

200 
	#isdig
(
c
è
	`__isùy³
((c), 
_ISdig
)

	)

201 
	#i¦ow
(
c
è
	`__isùy³
((c), 
_ISlow
)

	)

202 
	#isg¿ph
(
c
è
	`__isùy³
((c), 
_ISg¿ph
)

	)

203 
	#i¥rt
(
c
è
	`__isùy³
((c), 
_IS´t
)

	)

204 
	#i¥unù
(
c
è
	`__isùy³
((c), 
_ISpunù
)

	)

205 
	#is¥aû
(
c
è
	`__isùy³
((c), 
_IS¥aû
)

	)

206 
	#isuµ
(
c
è
	`__isùy³
((c), 
_ISuµ
)

	)

207 
	#isxdig
(
c
è
	`__isùy³
((c), 
_ISxdig
)

	)

208 #ifdeà
__USE_ISOC99


209 
	#isbÏnk
(
c
è
	`__isùy³
((c), 
_ISbÏnk
)

	)

213 #ifdeà
__USE_EXTERN_INLINES


214 
__exº_le
 

215 
	`__NTH
 (
	$tÞow
 (
__c
))

217  
__c
 >ð-128 && __ø< 256 ? (*
	`__ùy³_tÞow_loc
 ())[__c] : __c;

218 
	}
}

220 
__exº_le
 

221 
__NTH
 (
	$touµ
 (
__c
))

223  
__c
 >ð-128 && __ø< 256 ? (*
	`__ùy³_touµ_loc
 ())[__c] : __c;

224 
	}
}

227 #ià
__GNUC__
 >ð2 && 
defed
 
__OPTIMIZE__
 && !defed 
__ýlu¥lus


228 
	#tÞow
(
c
è
	`__tobody
 (c, 
tÞow
, *
	`__ùy³_tÞow_loc
 (), (c))

	)

229 
	#touµ
(
c
è
	`__tobody
 (c, 
touµ
, *
	`__ùy³_touµ_loc
 (), (c))

	)

232 #ià
defed
 
__USE_SVID
 || defed 
__USE_MISC
 || defed 
__USE_XOPEN


233 
	#i§scii
(
c
è
	`__i§scii
 (c)

	)

234 
	#tßscii
(
c
è
	`__tßscii
 (c)

	)

236 
	#_tÞow
(
c
è((è(*
	`__ùy³_tÞow_loc
 ())[(è(c)])

	)

237 
	#_touµ
(
c
è((è(*
	`__ùy³_touµ_loc
 ())[(è(c)])

	)

243 #ifdeà
__USE_XOPEN2K8


257 
	~<xloÿË.h
>

261 
	#__isùy³_l
(
c
, 
ty³
, 
loÿË
) \

262 ((
loÿË
)->
__ùy³_b
[(è(
c
)] & (è
ty³
)

	)

264 
	#__exùy³_l
(
Çme
) \

265 
	`Çme
 (, 
__loÿË_t
è
__THROW


	)

271 
__exùy³_l
 (
i§Êum_l
);

272 
__exùy³_l
 (
i§Íha_l
);

273 
__exùy³_l
 (
isúl_l
);

274 
__exùy³_l
 (
isdig_l
);

275 
__exùy³_l
 (
i¦ow_l
);

276 
__exùy³_l
 (
isg¿ph_l
);

277 
__exùy³_l
 (
i¥rt_l
);

278 
__exùy³_l
 (
i¥unù_l
);

279 
__exùy³_l
 (
is¥aû_l
);

280 
__exùy³_l
 (
isuµ_l
);

281 
__exùy³_l
 (
isxdig_l
);

283 
__exùy³_l
 (
isbÏnk_l
);

287 
	$__tÞow_l
 (
__c
, 
__loÿË_t
 
__l
è
__THROW
;

288 
	$tÞow_l
 (
__c
, 
__loÿË_t
 
__l
è
__THROW
;

291 
	$__touµ_l
 (
__c
, 
__loÿË_t
 
__l
è
__THROW
;

292 
	$touµ_l
 (
__c
, 
__loÿË_t
 
__l
è
__THROW
;

294 #ià
__GNUC__
 >ð2 && 
defed
 
__OPTIMIZE__
 && !defed 
__ýlu¥lus


295 
	#__tÞow_l
(
c
, 
loÿË
) \

296 
	`__tobody
 (
c
, 
__tÞow_l
, (
loÿË
)->
__ùy³_tÞow
, (c,oÿË))

	)

297 
	#__touµ_l
(
c
, 
loÿË
) \

298 
	`__tobody
 (
c
, 
__touµ_l
, (
loÿË
)->
__ùy³_touµ
, (c,oÿË))

	)

299 
	#tÞow_l
(
c
, 
loÿË
è
	`__tÞow_l
 ((c), (loÿË))

	)

300 
	#touµ_l
(
c
, 
loÿË
è
	`__touµ_l
 ((c), (loÿË))

	)

304 #iâdeà
__NO_CTYPE


305 
	#__i§Êum_l
(
c
,
l
è
	`__isùy³_l
((c), 
_IS®num
, (l))

	)

306 
	#__i§Íha_l
(
c
,
l
è
	`__isùy³_l
((c), 
_IS®pha
, (l))

	)

307 
	#__isúl_l
(
c
,
l
è
	`__isùy³_l
((c), 
_ISúl
, (l))

	)

308 
	#__isdig_l
(
c
,
l
è
	`__isùy³_l
((c), 
_ISdig
, (l))

	)

309 
	#__i¦ow_l
(
c
,
l
è
	`__isùy³_l
((c), 
_ISlow
, (l))

	)

310 
	#__isg¿ph_l
(
c
,
l
è
	`__isùy³_l
((c), 
_ISg¿ph
, (l))

	)

311 
	#__i¥rt_l
(
c
,
l
è
	`__isùy³_l
((c), 
_IS´t
, (l))

	)

312 
	#__i¥unù_l
(
c
,
l
è
	`__isùy³_l
((c), 
_ISpunù
, (l))

	)

313 
	#__is¥aû_l
(
c
,
l
è
	`__isùy³_l
((c), 
_IS¥aû
, (l))

	)

314 
	#__isuµ_l
(
c
,
l
è
	`__isùy³_l
((c), 
_ISuµ
, (l))

	)

315 
	#__isxdig_l
(
c
,
l
è
	`__isùy³_l
((c), 
_ISxdig
, (l))

	)

317 
	#__isbÏnk_l
(
c
,
l
è
	`__isùy³_l
((c), 
_ISbÏnk
, (l))

	)

319 #ià
defed
 
__USE_SVID
 || defed 
__USE_MISC


320 
	#__i§scii_l
(
c
,
l
è(Ö), 
	`__i§scii
 (c))

	)

321 
	#__tßscii_l
(
c
,
l
è(Ö), 
	`__tßscii
 (c))

	)

324 
	#i§Êum_l
(
c
,
l
è
	`__i§Êum_l
 ((c), (l))

	)

325 
	#i§Íha_l
(
c
,
l
è
	`__i§Íha_l
 ((c), (l))

	)

326 
	#isúl_l
(
c
,
l
è
	`__isúl_l
 ((c), (l))

	)

327 
	#isdig_l
(
c
,
l
è
	`__isdig_l
 ((c), (l))

	)

328 
	#i¦ow_l
(
c
,
l
è
	`__i¦ow_l
 ((c), (l))

	)

329 
	#isg¿ph_l
(
c
,
l
è
	`__isg¿ph_l
 ((c), (l))

	)

330 
	#i¥rt_l
(
c
,
l
è
	`__i¥rt_l
 ((c), (l))

	)

331 
	#i¥unù_l
(
c
,
l
è
	`__i¥unù_l
 ((c), (l))

	)

332 
	#is¥aû_l
(
c
,
l
è
	`__is¥aû_l
 ((c), (l))

	)

333 
	#isuµ_l
(
c
,
l
è
	`__isuµ_l
 ((c), (l))

	)

334 
	#isxdig_l
(
c
,
l
è
	`__isxdig_l
 ((c), (l))

	)

336 
	#isbÏnk_l
(
c
,
l
è
	`__isbÏnk_l
 ((c), (l))

	)

338 #ià
defed
 
__USE_SVID
 || defed 
__USE_MISC


339 
	#i§scii_l
(
c
,
l
è
	`__i§scii_l
 ((c), (l))

	)

340 
	#tßscii_l
(
c
,
l
è
	`__tßscii_l
 ((c), (l))

	)

347 
__END_DECLS


	@/usr/include/errno.h

22 #iâdef 
_ERRNO_H


26 #iâdef 
__Ãed_Em©h


27 
	#_ERRNO_H
 1

	)

28 
	~<ã©u»s.h
>

31 
	g__BEGIN_DECLS


35 
	~<bs/ºo.h
>

36 #undeà
__Ãed_Em©h


38 #ifdef 
_ERRNO_H


45 #iâdef 
ºo


46 
ºo
;

49 #ifdeà
__USE_GNU


54 *
´og¿m_voÿtiÚ_Çme
, *
´og¿m_voÿtiÚ_shÜt_Çme
;

58 
	g__END_DECLS


66 #ià
defed
 
__USE_GNU
 || defed 
__Ãed_rÜ_t


67 #iâdeà
__rÜ_t_defed


68 
	trÜ_t
;

69 
	#__rÜ_t_defed
 1

	)

71 #undeà
__Ãed_rÜ_t


	@/usr/include/fcntl.h

22 #iâdef 
_FCNTL_H


23 
	#_FCNTL_H
 1

	)

25 
	~<ã©u»s.h
>

28 
	g__BEGIN_DECLS


31 
	~<bs/ty³s.h
>

35 
	~<bs/fú.h
>

40 #iâdeà
__mode_t_defed


41 
__mode_t
 
	tmode_t
;

42 
	#__mode_t_defed


	)

45 #iâdeà
__off_t_defed


46 #iâdeà
__USE_FILE_OFFSET64


47 
__off_t
 
	toff_t
;

49 
__off64_t
 
	toff_t
;

51 
	#__off_t_defed


	)

54 #ià
defed
 
__USE_LARGEFILE64
 && !defed 
__off64_t_defed


55 
__off64_t
 
	toff64_t
;

56 
	#__off64_t_defed


	)

59 #iâdeà
__pid_t_defed


60 
__pid_t
 
	tpid_t
;

61 
	#__pid_t_defed


	)

65 #ià
defed
 
__USE_XOPEN
 || defed 
__USE_XOPEN2K8


66 
	#__Ãed_time¥ec


	)

67 
	~<time.h
>

68 
	~<bs/¡©.h
>

70 
	#S_IFMT
 
__S_IFMT


	)

71 
	#S_IFDIR
 
__S_IFDIR


	)

72 
	#S_IFCHR
 
__S_IFCHR


	)

73 
	#S_IFBLK
 
__S_IFBLK


	)

74 
	#S_IFREG
 
__S_IFREG


	)

75 #ifdeà
__S_IFIFO


76 
	#S_IFIFO
 
__S_IFIFO


	)

78 #ifdeà
__S_IFLNK


79 
	#S_IFLNK
 
__S_IFLNK


	)

81 #ià(
defed
 
__USE_UNIX98
 || defed 
__USE_XOPEN2K8
è&& defed 
__S_IFSOCK


82 
	#S_IFSOCK
 
__S_IFSOCK


	)

87 
	#S_ISUID
 
__S_ISUID


	)

88 
	#S_ISGID
 
__S_ISGID


	)

90 #ià
defed
 
__USE_BSD
 || defed 
__USE_MISC
 || defed 
__USE_XOPEN


92 
	#S_ISVTX
 
__S_ISVTX


	)

95 
	#S_IRUSR
 
__S_IREAD


	)

96 
	#S_IWUSR
 
__S_IWRITE


	)

97 
	#S_IXUSR
 
__S_IEXEC


	)

99 
	#S_IRWXU
 (
__S_IREAD
|
__S_IWRITE
|
__S_IEXEC
)

	)

101 
	#S_IRGRP
 (
S_IRUSR
 >> 3è

	)

102 
	#S_IWGRP
 (
S_IWUSR
 >> 3è

	)

103 
	#S_IXGRP
 (
S_IXUSR
 >> 3è

	)

105 
	#S_IRWXG
 (
S_IRWXU
 >> 3)

	)

107 
	#S_IROTH
 (
S_IRGRP
 >> 3è

	)

108 
	#S_IWOTH
 (
S_IWGRP
 >> 3è

	)

109 
	#S_IXOTH
 (
S_IXGRP
 >> 3è

	)

111 
	#S_IRWXO
 (
S_IRWXG
 >> 3)

	)

114 #ifdef 
__USE_MISC


115 #iâdeà
R_OK


118 
	#R_OK
 4

	)

119 
	#W_OK
 2

	)

120 
	#X_OK
 1

	)

121 
	#F_OK
 0

	)

126 #ià
defed
 
__USE_XOPEN
 || defed 
__USE_XOPEN2K8


127 
	#SEEK_SET
 0

	)

128 
	#SEEK_CUR
 1

	)

129 
	#SEEK_END
 2

	)

137 
fú
 (
__fd
, 
__cmd
, ...);

145 #iâdeà
__USE_FILE_OFFSET64


146 
	$Ý
 (cÚ¡ *
__fe
, 
__oæag
, ...è
	`__nÚnuÎ
 ((1));

148 #ifdeà
__REDIRECT


149 
	`__REDIRECT
 (
Ý
, (cÚ¡ *
__fe
, 
__oæag
, ...), 
Ý64
)

150 
	`__nÚnuÎ
 ((1));

152 
	#Ý
 
Ý64


	)

155 #ifdeà
__USE_LARGEFILE64


156 
	$Ý64
 (cÚ¡ *
__fe
, 
__oæag
, ...è
	`__nÚnuÎ
 ((1));

159 #ifdeà
__USE_ATFILE


169 #iâdeà
__USE_FILE_OFFSET64


170 
	$Ý©
 (
__fd
, cÚ¡ *
__fe
, 
__oæag
, ...)

171 
	`__nÚnuÎ
 ((2));

173 #ifdeà
__REDIRECT


174 
	`__REDIRECT
 (
Ý©
, (
__fd
, cÚ¡ *
__fe
, 
__oæag
,

175 ...), 
Ý©64
è
	`__nÚnuÎ
 ((2));

177 
	#Ý©
 
Ý©64


	)

180 #ifdeà
__USE_LARGEFILE64


181 
	$Ý©64
 (
__fd
, cÚ¡ *
__fe
, 
__oæag
, ...)

182 
	`__nÚnuÎ
 ((2));

191 #iâdeà
__USE_FILE_OFFSET64


192 
	$üt
 (cÚ¡ *
__fe
, 
mode_t
 
__mode
è
	`__nÚnuÎ
 ((1));

194 #ifdeà
__REDIRECT


195 
	`__REDIRECT
 (
üt
, (cÚ¡ *
__fe
, 
mode_t
 
__mode
),

196 
üt64
è
	`__nÚnuÎ
 ((1));

198 
	#üt
 
üt64


	)

201 #ifdeà
__USE_LARGEFILE64


202 
	$üt64
 (cÚ¡ *
__fe
, 
mode_t
 
__mode
è
	`__nÚnuÎ
 ((1));

205 #ià!
defed
 
F_LOCK
 && (defed 
__USE_MISC
 || (defed 
__USE_XOPEN_EXTENDED
 \

206 && !
defed
 
__USE_POSIX
))

215 
	#F_ULOCK
 0

	)

216 
	#F_LOCK
 1

	)

217 
	#F_TLOCK
 2

	)

218 
	#F_TEST
 3

	)

220 #iâdeà
__USE_FILE_OFFSET64


221 
	`lockf
 (
__fd
, 
__cmd
, 
off_t
 
__Ën
);

223 #ifdeà
__REDIRECT


224 
	`__REDIRECT
 (
lockf
, (
__fd
, 
__cmd
, 
__off64_t
 
__Ën
), 
lockf64
);

226 
	#lockf
 
lockf64


	)

229 #ifdeà
__USE_LARGEFILE64


230 
	`lockf64
 (
__fd
, 
__cmd
, 
off64_t
 
__Ën
);

234 #ifdeà
__USE_XOPEN2K


237 #iâdeà
__USE_FILE_OFFSET64


238 
	$posix_çdvi£
 (
__fd
, 
off_t
 
__off£t
, off_
__Ën
,

239 
__advi£
è
__THROW
;

241 #ifdeà
__REDIRECT_NTH


242 
	`__REDIRECT_NTH
 (
posix_çdvi£
, (
__fd
, 
__off64_t
 
__off£t
,

243 
__off64_t
 
__Ën
, 
__advi£
),

244 
posix_çdvi£64
);

246 
	#posix_çdvi£
 
posix_çdvi£64


	)

249 #ifdeà
__USE_LARGEFILE64


250 
	$posix_çdvi£64
 (
__fd
, 
off64_t
 
__off£t
, off64_
__Ën
,

251 
__advi£
è
__THROW
;

259 #iâdeà
__USE_FILE_OFFSET64


260 
	`posix_çÎoÿ
 (
__fd
, 
off_t
 
__off£t
, off_
__Ën
);

262 #ifdeà
__REDIRECT


263 
	`__REDIRECT
 (
posix_çÎoÿ
, (
__fd
, 
__off64_t
 
__off£t
,

264 
__off64_t
 
__Ën
),

265 
posix_çÎoÿ64
);

267 
	#posix_çÎoÿ
 
posix_çÎoÿ64


	)

270 #ifdeà
__USE_LARGEFILE64


271 
	`posix_çÎoÿ64
 (
__fd
, 
off64_t
 
__off£t
, off64_
__Ën
);

277 #ià
__USE_FORTIFY_LEVEL
 > 0 && 
defed
 
__fÜtify_funùiÚ
 \

278 && 
defed
 
__va_¬g_·ck_Ën


279 
	~<bs/fú2.h
>

282 
__END_DECLS


	@/usr/include/inttypes.h

22 #iâdeà
_INTTYPES_H


23 
	#_INTTYPES_H
 1

	)

25 
	~<ã©u»s.h
>

27 
	~<¡dt.h
>

30 #iâdeà
____gwch¬_t_defed


31 #ifdeà
__ýlu¥lus


32 
	#__gwch¬_t
 
wch¬_t


	)

33 #ià
defed
 
__WCHAR_TYPE__


34 
__WCHAR_TYPE__
 
	t__gwch¬_t
;

36 
	#__Ãed_wch¬_t


	)

37 
	~<¡ddef.h
>

38 
wch¬_t
 
	t__gwch¬_t
;

40 
	#____gwch¬_t_defed
 1

	)

43 #ià
__WORDSIZE
 == 64

44 
	#__PRI64_PREFIX
 "l"

	)

45 
	#__PRIPTR_PREFIX
 "l"

	)

47 
	#__PRI64_PREFIX
 "Î"

	)

48 
	#__PRIPTR_PREFIX


	)

54 
	#PRId8
 "d"

	)

55 
	#PRId16
 "d"

	)

56 
	#PRId32
 "d"

	)

57 
	#PRId64
 
__PRI64_PREFIX
 "d"

	)

59 
	#PRIdLEAST8
 "d"

	)

60 
	#PRIdLEAST16
 "d"

	)

61 
	#PRIdLEAST32
 "d"

	)

62 
	#PRIdLEAST64
 
__PRI64_PREFIX
 "d"

	)

64 
	#PRIdFAST8
 "d"

	)

65 
	#PRIdFAST16
 
__PRIPTR_PREFIX
 "d"

	)

66 
	#PRIdFAST32
 
__PRIPTR_PREFIX
 "d"

	)

67 
	#PRIdFAST64
 
__PRI64_PREFIX
 "d"

	)

70 
	#PRIi8
 "i"

	)

71 
	#PRIi16
 "i"

	)

72 
	#PRIi32
 "i"

	)

73 
	#PRIi64
 
__PRI64_PREFIX
 "i"

	)

75 
	#PRIiLEAST8
 "i"

	)

76 
	#PRIiLEAST16
 "i"

	)

77 
	#PRIiLEAST32
 "i"

	)

78 
	#PRIiLEAST64
 
__PRI64_PREFIX
 "i"

	)

80 
	#PRIiFAST8
 "i"

	)

81 
	#PRIiFAST16
 
__PRIPTR_PREFIX
 "i"

	)

82 
	#PRIiFAST32
 
__PRIPTR_PREFIX
 "i"

	)

83 
	#PRIiFAST64
 
__PRI64_PREFIX
 "i"

	)

86 
	#PRIo8
 "o"

	)

87 
	#PRIo16
 "o"

	)

88 
	#PRIo32
 "o"

	)

89 
	#PRIo64
 
__PRI64_PREFIX
 "o"

	)

91 
	#PRIoLEAST8
 "o"

	)

92 
	#PRIoLEAST16
 "o"

	)

93 
	#PRIoLEAST32
 "o"

	)

94 
	#PRIoLEAST64
 
__PRI64_PREFIX
 "o"

	)

96 
	#PRIoFAST8
 "o"

	)

97 
	#PRIoFAST16
 
__PRIPTR_PREFIX
 "o"

	)

98 
	#PRIoFAST32
 
__PRIPTR_PREFIX
 "o"

	)

99 
	#PRIoFAST64
 
__PRI64_PREFIX
 "o"

	)

102 
	#PRIu8
 "u"

	)

103 
	#PRIu16
 "u"

	)

104 
	#PRIu32
 "u"

	)

105 
	#PRIu64
 
__PRI64_PREFIX
 "u"

	)

107 
	#PRIuLEAST8
 "u"

	)

108 
	#PRIuLEAST16
 "u"

	)

109 
	#PRIuLEAST32
 "u"

	)

110 
	#PRIuLEAST64
 
__PRI64_PREFIX
 "u"

	)

112 
	#PRIuFAST8
 "u"

	)

113 
	#PRIuFAST16
 
__PRIPTR_PREFIX
 "u"

	)

114 
	#PRIuFAST32
 
__PRIPTR_PREFIX
 "u"

	)

115 
	#PRIuFAST64
 
__PRI64_PREFIX
 "u"

	)

118 
	#PRIx8
 "x"

	)

119 
	#PRIx16
 "x"

	)

120 
	#PRIx32
 "x"

	)

121 
	#PRIx64
 
__PRI64_PREFIX
 "x"

	)

123 
	#PRIxLEAST8
 "x"

	)

124 
	#PRIxLEAST16
 "x"

	)

125 
	#PRIxLEAST32
 "x"

	)

126 
	#PRIxLEAST64
 
__PRI64_PREFIX
 "x"

	)

128 
	#PRIxFAST8
 "x"

	)

129 
	#PRIxFAST16
 
__PRIPTR_PREFIX
 "x"

	)

130 
	#PRIxFAST32
 
__PRIPTR_PREFIX
 "x"

	)

131 
	#PRIxFAST64
 
__PRI64_PREFIX
 "x"

	)

134 
	#PRIX8
 "X"

	)

135 
	#PRIX16
 "X"

	)

136 
	#PRIX32
 "X"

	)

137 
	#PRIX64
 
__PRI64_PREFIX
 "X"

	)

139 
	#PRIXLEAST8
 "X"

	)

140 
	#PRIXLEAST16
 "X"

	)

141 
	#PRIXLEAST32
 "X"

	)

142 
	#PRIXLEAST64
 
__PRI64_PREFIX
 "X"

	)

144 
	#PRIXFAST8
 "X"

	)

145 
	#PRIXFAST16
 
__PRIPTR_PREFIX
 "X"

	)

146 
	#PRIXFAST32
 
__PRIPTR_PREFIX
 "X"

	)

147 
	#PRIXFAST64
 
__PRI64_PREFIX
 "X"

	)

151 
	#PRIdMAX
 
__PRI64_PREFIX
 "d"

	)

152 
	#PRIiMAX
 
__PRI64_PREFIX
 "i"

	)

153 
	#PRIoMAX
 
__PRI64_PREFIX
 "o"

	)

154 
	#PRIuMAX
 
__PRI64_PREFIX
 "u"

	)

155 
	#PRIxMAX
 
__PRI64_PREFIX
 "x"

	)

156 
	#PRIXMAX
 
__PRI64_PREFIX
 "X"

	)

160 
	#PRIdPTR
 
__PRIPTR_PREFIX
 "d"

	)

161 
	#PRIiPTR
 
__PRIPTR_PREFIX
 "i"

	)

162 
	#PRIoPTR
 
__PRIPTR_PREFIX
 "o"

	)

163 
	#PRIuPTR
 
__PRIPTR_PREFIX
 "u"

	)

164 
	#PRIxPTR
 
__PRIPTR_PREFIX
 "x"

	)

165 
	#PRIXPTR
 
__PRIPTR_PREFIX
 "X"

	)

171 
	#SCNd8
 "hhd"

	)

172 
	#SCNd16
 "hd"

	)

173 
	#SCNd32
 "d"

	)

174 
	#SCNd64
 
__PRI64_PREFIX
 "d"

	)

176 
	#SCNdLEAST8
 "hhd"

	)

177 
	#SCNdLEAST16
 "hd"

	)

178 
	#SCNdLEAST32
 "d"

	)

179 
	#SCNdLEAST64
 
__PRI64_PREFIX
 "d"

	)

181 
	#SCNdFAST8
 "hhd"

	)

182 
	#SCNdFAST16
 
__PRIPTR_PREFIX
 "d"

	)

183 
	#SCNdFAST32
 
__PRIPTR_PREFIX
 "d"

	)

184 
	#SCNdFAST64
 
__PRI64_PREFIX
 "d"

	)

187 
	#SCNi8
 "hhi"

	)

188 
	#SCNi16
 "hi"

	)

189 
	#SCNi32
 "i"

	)

190 
	#SCNi64
 
__PRI64_PREFIX
 "i"

	)

192 
	#SCNiLEAST8
 "hhi"

	)

193 
	#SCNiLEAST16
 "hi"

	)

194 
	#SCNiLEAST32
 "i"

	)

195 
	#SCNiLEAST64
 
__PRI64_PREFIX
 "i"

	)

197 
	#SCNiFAST8
 "hhi"

	)

198 
	#SCNiFAST16
 
__PRIPTR_PREFIX
 "i"

	)

199 
	#SCNiFAST32
 
__PRIPTR_PREFIX
 "i"

	)

200 
	#SCNiFAST64
 
__PRI64_PREFIX
 "i"

	)

203 
	#SCNu8
 "hhu"

	)

204 
	#SCNu16
 "hu"

	)

205 
	#SCNu32
 "u"

	)

206 
	#SCNu64
 
__PRI64_PREFIX
 "u"

	)

208 
	#SCNuLEAST8
 "hhu"

	)

209 
	#SCNuLEAST16
 "hu"

	)

210 
	#SCNuLEAST32
 "u"

	)

211 
	#SCNuLEAST64
 
__PRI64_PREFIX
 "u"

	)

213 
	#SCNuFAST8
 "hhu"

	)

214 
	#SCNuFAST16
 
__PRIPTR_PREFIX
 "u"

	)

215 
	#SCNuFAST32
 
__PRIPTR_PREFIX
 "u"

	)

216 
	#SCNuFAST64
 
__PRI64_PREFIX
 "u"

	)

219 
	#SCNo8
 "hho"

	)

220 
	#SCNo16
 "ho"

	)

221 
	#SCNo32
 "o"

	)

222 
	#SCNo64
 
__PRI64_PREFIX
 "o"

	)

224 
	#SCNoLEAST8
 "hho"

	)

225 
	#SCNoLEAST16
 "ho"

	)

226 
	#SCNoLEAST32
 "o"

	)

227 
	#SCNoLEAST64
 
__PRI64_PREFIX
 "o"

	)

229 
	#SCNoFAST8
 "hho"

	)

230 
	#SCNoFAST16
 
__PRIPTR_PREFIX
 "o"

	)

231 
	#SCNoFAST32
 
__PRIPTR_PREFIX
 "o"

	)

232 
	#SCNoFAST64
 
__PRI64_PREFIX
 "o"

	)

235 
	#SCNx8
 "hhx"

	)

236 
	#SCNx16
 "hx"

	)

237 
	#SCNx32
 "x"

	)

238 
	#SCNx64
 
__PRI64_PREFIX
 "x"

	)

240 
	#SCNxLEAST8
 "hhx"

	)

241 
	#SCNxLEAST16
 "hx"

	)

242 
	#SCNxLEAST32
 "x"

	)

243 
	#SCNxLEAST64
 
__PRI64_PREFIX
 "x"

	)

245 
	#SCNxFAST8
 "hhx"

	)

246 
	#SCNxFAST16
 
__PRIPTR_PREFIX
 "x"

	)

247 
	#SCNxFAST32
 
__PRIPTR_PREFIX
 "x"

	)

248 
	#SCNxFAST64
 
__PRI64_PREFIX
 "x"

	)

252 
	#SCNdMAX
 
__PRI64_PREFIX
 "d"

	)

253 
	#SCNiMAX
 
__PRI64_PREFIX
 "i"

	)

254 
	#SCNoMAX
 
__PRI64_PREFIX
 "o"

	)

255 
	#SCNuMAX
 
__PRI64_PREFIX
 "u"

	)

256 
	#SCNxMAX
 
__PRI64_PREFIX
 "x"

	)

259 
	#SCNdPTR
 
__PRIPTR_PREFIX
 "d"

	)

260 
	#SCNiPTR
 
__PRIPTR_PREFIX
 "i"

	)

261 
	#SCNoPTR
 
__PRIPTR_PREFIX
 "o"

	)

262 
	#SCNuPTR
 
__PRIPTR_PREFIX
 "u"

	)

263 
	#SCNxPTR
 
__PRIPTR_PREFIX
 "x"

	)

266 
	g__BEGIN_DECLS


268 #ià
__WORDSIZE
 == 64

273 
	mquÙ
;

274 
	m»m
;

275 } 
	timaxdiv_t
;

282 
__exnsiÚ__
 
	mquÙ
;

283 
__exnsiÚ__
 
	m»m
;

284 } 
	timaxdiv_t
;

290 
tmax_t
 
	$imaxabs
 (
tmax_t
 
__n
è
__THROW
 
	`__©ibu__
 ((
__cÚ¡__
));

293 
imaxdiv_t
 
	$imaxdiv
 (
tmax_t
 
__num
, iÁmax_
__dom
)

294 
__THROW
 
	`__©ibu__
 ((
__cÚ¡__
));

297 
tmax_t
 
	$¡¹oimax
 (cÚ¡ *
__»¡riù
 
__Å
,

298 **
__»¡riù
 
__d±r
, 
__ba£
è
__THROW
;

301 
utmax_t
 
	$¡¹oumax
 (cÚ¡ *
__»¡riù
 
__Å
,

302 ** 
__»¡riù
 
__d±r
, 
__ba£
è
__THROW
;

305 
tmax_t
 
	$wc¡oimax
 (cÚ¡ 
__gwch¬_t
 *
__»¡riù
 
__Å
,

306 
__gwch¬_t
 **
__»¡riù
 
__d±r
, 
__ba£
)

307 
__THROW
;

310 
utmax_t
 
	$wc¡oumax
 (cÚ¡ 
__gwch¬_t
 *
__»¡riù
 
__Å
,

311 
__gwch¬_t
 ** 
__»¡riù
 
__d±r
, 
__ba£
)

312 
__THROW
;

314 #ifdeà
__USE_EXTERN_INLINES


316 #ià
__WORDSIZE
 == 64

318 
	$__¡¹Þ_º®
 (cÚ¡ *
__»¡riù
 
__Å
,

319 **
__»¡riù
 
__d±r
,

320 
__ba£
, 
__group
)

321 
__THROW
 
	`__nÚnuÎ
 ((1)è
__wur
;

323 
__exº_le
 
tmax_t


324 
	`__NTH
 (
	$¡¹oimax
 (cÚ¡ *
__»¡riù
 
Å
, **__»¡riù 
d±r
,

325 
ba£
))

327  
	`__¡¹Þ_º®
 (
Å
, 
d±r
, 
ba£
, 0);

328 
	}
}

330 
	$__¡¹oul_º®
 (cÚ¡ *
__»¡riù
 
__Å
,

331 ** 
__»¡riù
 
__d±r
,

332 
__ba£
, 
__group
)

333 
__THROW
 
	`__nÚnuÎ
 ((1)è
__wur
;

335 
__exº_le
 
utmax_t


336 
	`__NTH
 (
	$¡¹oumax
 (cÚ¡ *
__»¡riù
 
Å
, **__»¡riù 
d±r
,

337 
ba£
))

339  
	`__¡¹oul_º®
 (
Å
, 
d±r
, 
ba£
, 0);

340 
	}
}

342 
	$__wc¡Þ_º®
 (cÚ¡ 
__gwch¬_t
 * 
__»¡riù
 
__Å
,

343 
__gwch¬_t
 **
__»¡riù
 
__d±r
,

344 
__ba£
, 
__group
)

345 
__THROW
 
	`__nÚnuÎ
 ((1)è
__wur
;

347 
__exº_le
 
tmax_t


348 
	`__NTH
 (
	$wc¡oimax
 (cÚ¡ 
__gwch¬_t
 *
__»¡riù
 
Å
,

349 
__gwch¬_t
 **
__»¡riù
 
d±r
, 
ba£
))

351  
	`__wc¡Þ_º®
 (
Å
, 
d±r
, 
ba£
, 0);

352 
	}
}

354 
	$__wc¡oul_º®
 (cÚ¡ 
__gwch¬_t
 *

355 
__»¡riù
 
__Å
,

356 
__gwch¬_t
 **

357 
__»¡riù
 
__d±r
,

358 
__ba£
, 
__group
)

359 
__THROW
 
	`__nÚnuÎ
 ((1)è
__wur
;

361 
__exº_le
 
utmax_t


362 
	`__NTH
 (
	$wc¡oumax
 (cÚ¡ 
__gwch¬_t
 *
__»¡riù
 
Å
,

363 
__gwch¬_t
 **
__»¡riù
 
d±r
, 
ba£
))

365  
	`__wc¡oul_º®
 (
Å
, 
d±r
, 
ba£
, 0);

366 
	}
}

370 
__exnsiÚ__


371 
	$__¡¹Þl_º®
 (cÚ¡ *
__»¡riù
 
__Å
,

372 **
__»¡riù
 
__d±r
,

373 
__ba£
, 
__group
)

374 
__THROW
 
	`__nÚnuÎ
 ((1)è
__wur
;

376 
__exº_le
 
tmax_t


377 
	`__NTH
 (
	$¡¹oimax
 (cÚ¡ *
__»¡riù
 
Å
, **__»¡riù 
d±r
,

378 
ba£
))

380  
	`__¡¹Þl_º®
 (
Å
, 
d±r
, 
ba£
, 0);

381 
	}
}

383 
__exnsiÚ__


384 
	$__¡¹ouÎ_º®
 (const *

385 
__»¡riù
 
__Å
,

387 
__»¡riù
 
__d±r
,

388 
__ba£
,

389 
__group
)

390 
__THROW
 
	`__nÚnuÎ
 ((1)è
__wur
;

392 
__exº_le
 
utmax_t


393 
	`__NTH
 (
	$¡¹oumax
 (cÚ¡ *
__»¡riù
 
Å
, **__»¡riù 
d±r
,

394 
ba£
))

396  
	`__¡¹ouÎ_º®
 (
Å
, 
d±r
, 
ba£
, 0);

397 
	}
}

399 
__exnsiÚ__


400 
	$__wc¡Þl_º®
 (cÚ¡ 
__gwch¬_t
 *
__»¡riù
 
__Å
,

401 
__gwch¬_t
 **
__»¡riù
 
__d±r
,

402 
__ba£
, 
__group
)

403 
__THROW
 
	`__nÚnuÎ
 ((1)è
__wur
;

405 
__exº_le
 
tmax_t


406 
	`__NTH
 (
	$wc¡oimax
 (cÚ¡ 
__gwch¬_t
 *
__»¡riù
 
Å
,

407 
__gwch¬_t
 **
__»¡riù
 
d±r
, 
ba£
))

409  
	`__wc¡Þl_º®
 (
Å
, 
d±r
, 
ba£
, 0);

410 
	}
}

413 
__exnsiÚ__


414 
	$__wc¡ouÎ_º®
 (cÚ¡ 
__gwch¬_t
 *

415 
__»¡riù
 
__Å
,

416 
__gwch¬_t
 **

417 
__»¡riù
 
__d±r
,

418 
__ba£
,

419 
__group
)

420 
__THROW
 
	`__nÚnuÎ
 ((1)è
__wur
;

422 
__exº_le
 
utmax_t


423 
	`__NTH
 (
	$wc¡oumax
 (cÚ¡ 
__gwch¬_t
 *
__»¡riù
 
Å
,

424 
__gwch¬_t
 **
__»¡riù
 
d±r
, 
ba£
))

426  
	`__wc¡ouÎ_º®
 (
Å
, 
d±r
, 
ba£
, 0);

427 
	}
}

432 
	g__END_DECLS


	@/usr/include/limits.h

22 #iâdeà
_LIBC_LIMITS_H_


23 
	#_LIBC_LIMITS_H_
 1

	)

25 
	~<ã©u»s.h
>

31 
	#MB_LEN_MAX
 16

	)

36 #ià!
defed
 
__GNUC__
 || __GNUC__ < 2

41 #iâdeà
_LIMITS_H


42 
	#_LIMITS_H
 1

	)

44 
	~<bs/wÜdsize.h
>

53 
	#CHAR_BIT
 8

	)

56 
	#SCHAR_MIN
 (-128)

	)

57 
	#SCHAR_MAX
 127

	)

60 
	#UCHAR_MAX
 255

	)

63 #ifdeà
__CHAR_UNSIGNED__


64 
	#CHAR_MIN
 0

	)

65 
	#CHAR_MAX
 
UCHAR_MAX


	)

67 
	#CHAR_MIN
 
SCHAR_MIN


	)

68 
	#CHAR_MAX
 
SCHAR_MAX


	)

72 
	#SHRT_MIN
 (-32768)

	)

73 
	#SHRT_MAX
 32767

	)

76 
	#USHRT_MAX
 65535

	)

79 
	#INT_MIN
 (-
INT_MAX
 - 1)

	)

80 
	#INT_MAX
 2147483647

	)

83 
	#UINT_MAX
 4294967295U

	)

86 #ià
__WORDSIZE
 == 64

87 
	#LONG_MAX
 9223372036854775807L

	)

89 
	#LONG_MAX
 2147483647L

	)

91 
	#LONG_MIN
 (-
LONG_MAX
 - 1L)

	)

94 #ià
__WORDSIZE
 == 64

95 
	#ULONG_MAX
 18446744073709551615UL

	)

97 
	#ULONG_MAX
 4294967295UL

	)

100 #ifdeà
__USE_ISOC99


103 
	#LLONG_MAX
 9223372036854775807LL

	)

104 
	#LLONG_MIN
 (-
LLONG_MAX
 - 1LL)

	)

107 
	#ULLONG_MAX
 18446744073709551615ULL

	)

121 #ià
defed
 
__GNUC__
 && !defed 
_GCC_LIMITS_H_


123 #þude_Ãx<
lims
.
h
>

129 #ià
defed
 
__USE_ISOC99
 && defed 
__GNUC__


130 #iâdeà
LLONG_MIN


131 
	#LLONG_MIN
 (-
LLONG_MAX
-1)

	)

133 #iâdeà
LLONG_MAX


134 
	#LLONG_MAX
 
__LONG_LONG_MAX__


	)

136 #iâdeà
ULLONG_MAX


137 
	#ULLONG_MAX
 (
LLONG_MAX
 * 2ULL + 1)

	)

141 #ifdef 
__USE_POSIX


143 
	~<bs/posix1_lim.h
>

146 #ifdef 
__USE_POSIX2


147 
	~<bs/posix2_lim.h
>

150 #ifdef 
__USE_XOPEN


151 
	~<bs/xÝ_lim.h
>

	@/usr/include/net/ethernet.h

21 #iâdeà
__NET_ETHERNET_H


22 
	#__NET_ETHERNET_H
 1

	)

24 
	~<sys/cdefs.h
>

25 
	~<sys/ty³s.h
>

26 
	~<lux/if_h.h
>

28 
__BEGIN_DECLS


32 
	sh_addr


34 
u_t8_t
 
	mh_addr_où
[
ETH_ALEN
];

35 } 
__©ibu__
 ((
__·cked__
));

38 
	sh_hd


40 
u_t8_t
 
	mh_dho¡
[
ETH_ALEN
];

41 
u_t8_t
 
	mh_sho¡
[
ETH_ALEN
];

42 
u_t16_t
 
	mh_ty³
;

43 } 
__©ibu__
 ((
__·cked__
));

46 
	#ETHERTYPE_PUP
 0x0200

	)

47 
	#ETHERTYPE_SPRITE
 0x0500

	)

48 
	#ETHERTYPE_IP
 0x0800

	)

49 
	#ETHERTYPE_ARP
 0x0806

	)

50 
	#ETHERTYPE_REVARP
 0x8035

	)

51 
	#ETHERTYPE_AT
 0x809B

	)

52 
	#ETHERTYPE_AARP
 0x80F3

	)

53 
	#ETHERTYPE_VLAN
 0x8100

	)

54 
	#ETHERTYPE_IPX
 0x8137

	)

55 
	#ETHERTYPE_IPV6
 0x86dd

	)

56 
	#ETHERTYPE_LOOPBACK
 0x9000

	)

59 
	#ETHER_ADDR_LEN
 
ETH_ALEN


	)

60 
	#ETHER_TYPE_LEN
 2

	)

61 
	#ETHER_CRC_LEN
 4

	)

62 
	#ETHER_HDR_LEN
 
ETH_HLEN


	)

63 
	#ETHER_MIN_LEN
 (
ETH_ZLEN
 + 
ETHER_CRC_LEN
è

	)

64 
	#ETHER_MAX_LEN
 (
ETH_FRAME_LEN
 + 
ETHER_CRC_LEN
è

	)

67 
	#ETHER_IS_VALID_LEN
(
foo
) \

68 ((
foo
è>ð
ETHER_MIN_LEN
 && (fooè<ð
ETHER_MAX_LEN
)

	)

75 
	#ETHERTYPE_TRAIL
 0x1000

	)

76 
	#ETHERTYPE_NTRAILER
 16

	)

78 
	#ETHERMTU
 
ETH_DATA_LEN


	)

79 
	#ETHERMIN
 (
ETHER_MIN_LEN
 - 
ETHER_HDR_LEN
 - 
ETHER_CRC_LEN
)

	)

81 
	g__END_DECLS


	@/usr/include/net/if.h

19 #iâdeà
_NET_IF_H


20 
	#_NET_IF_H
 1

	)

22 
	~<ã©u»s.h
>

24 #ifdeà
__USE_MISC


25 
	~<sys/ty³s.h
>

26 
	~<sys/sock.h
>

31 
	#IF_NAMESIZE
 16

	)

33 
	sif_Çmedex


35 
	mif_dex
;

36 *
	mif_Çme
;

40 #ifdeà
__USE_MISC


44 
	mIFF_UP
 = 0x1,

45 
	#IFF_UP
 
IFF_UP


	)

46 
	mIFF_BROADCAST
 = 0x2,

47 
	#IFF_BROADCAST
 
IFF_BROADCAST


	)

48 
	mIFF_DEBUG
 = 0x4,

49 
	#IFF_DEBUG
 
IFF_DEBUG


	)

50 
	mIFF_LOOPBACK
 = 0x8,

51 
	#IFF_LOOPBACK
 
IFF_LOOPBACK


	)

52 
	mIFF_POINTOPOINT
 = 0x10,

53 
	#IFF_POINTOPOINT
 
IFF_POINTOPOINT


	)

54 
	mIFF_NOTRAILERS
 = 0x20,

55 
	#IFF_NOTRAILERS
 
IFF_NOTRAILERS


	)

56 
	mIFF_RUNNING
 = 0x40,

57 
	#IFF_RUNNING
 
IFF_RUNNING


	)

58 
	mIFF_NOARP
 = 0x80,

59 
	#IFF_NOARP
 
IFF_NOARP


	)

60 
	mIFF_PROMISC
 = 0x100,

61 
	#IFF_PROMISC
 
IFF_PROMISC


	)

64 
	mIFF_ALLMULTI
 = 0x200,

65 
	#IFF_ALLMULTI
 
IFF_ALLMULTI


	)

67 
	mIFF_MASTER
 = 0x400,

68 
	#IFF_MASTER
 
IFF_MASTER


	)

69 
	mIFF_SLAVE
 = 0x800,

70 
	#IFF_SLAVE
 
IFF_SLAVE


	)

72 
	mIFF_MULTICAST
 = 0x1000,

73 
	#IFF_MULTICAST
 
IFF_MULTICAST


	)

75 
	mIFF_PORTSEL
 = 0x2000,

76 
	#IFF_PORTSEL
 
IFF_PORTSEL


	)

77 
	mIFF_AUTOMEDIA
 = 0x4000,

78 
	#IFF_AUTOMEDIA
 
IFF_AUTOMEDIA


	)

79 
	mIFF_DYNAMIC
 = 0x8000

80 
	#IFF_DYNAMIC
 
IFF_DYNAMIC


	)

88 
	siçddr


90 
sockaddr
 
	miç_addr
;

93 
sockaddr
 
	mifu_brßdaddr
;

94 
sockaddr
 
	mifu_d¡addr
;

95 } 
	miç_ifu
;

96 
içû
 *
	miç_iå
;

97 
içddr
 *
	miç_Ãxt
;

100 
	#iç_brßdaddr
 
iç_ifu
.
ifu_brßdaddr


	)

101 
	#iç_d¡addr
 
iç_ifu
.
ifu_d¡addr


	)

111 
	sifm­


113 
	mmem_¡¬t
;

114 
	mmem_d
;

115 
	mba£_addr
;

116 
	mq
;

117 
	mdma
;

118 
	mpÜt
;

126 
	siäeq


128 
	#IFHWADDRLEN
 6

	)

129 
	#IFNAMSIZ
 
IF_NAMESIZE


	)

132 
	miän_Çme
[
IFNAMSIZ
];

133 } 
	miä_iän
;

137 
sockaddr
 
	miäu_addr
;

138 
sockaddr
 
	miäu_d¡addr
;

139 
sockaddr
 
	miäu_brßdaddr
;

140 
sockaddr
 
	miäu_Ãtmask
;

141 
sockaddr
 
	miäu_hwaddr
;

142 
	miäu_æags
;

143 
	miäu_iv®ue
;

144 
	miäu_mtu
;

145 
ifm­
 
	miäu_m­
;

146 
	miäu_¦ave
[
IFNAMSIZ
];

147 
	miäu_ÃwÇme
[
IFNAMSIZ
];

148 
__ÿddr_t
 
	miäu_d©a
;

149 } 
	miä_iäu
;

151 
	#iä_Çme
 
iä_iän
.
iän_Çme


	)

152 
	#iä_hwaddr
 
iä_iäu
.
iäu_hwaddr


	)

153 
	#iä_addr
 
iä_iäu
.
iäu_addr


	)

154 
	#iä_d¡addr
 
iä_iäu
.
iäu_d¡addr


	)

155 
	#iä_brßdaddr
 
iä_iäu
.
iäu_brßdaddr


	)

156 
	#iä_Ãtmask
 
iä_iäu
.
iäu_Ãtmask


	)

157 
	#iä_æags
 
iä_iäu
.
iäu_æags


	)

158 
	#iä_mric
 
iä_iäu
.
iäu_iv®ue


	)

159 
	#iä_mtu
 
iä_iäu
.
iäu_mtu


	)

160 
	#iä_m­
 
iä_iäu
.
iäu_m­


	)

161 
	#iä_¦ave
 
iä_iäu
.
iäu_¦ave


	)

162 
	#iä_d©a
 
iä_iäu
.
iäu_d©a


	)

163 
	#iä_ifdex
 
iä_iäu
.
iäu_iv®ue


	)

164 
	#iä_bªdwidth
 
iä_iäu
.
iäu_iv®ue


	)

165 
	#iä_qËn
 
iä_iäu
.
iäu_iv®ue


	)

166 
	#iä_ÃwÇme
 
iä_iäu
.
iäu_ÃwÇme


	)

167 
	#_IOT_iäeq
 
	`_IOT
(
	`_IOTS
(),
IFNAMSIZ
,_IOTS(),16,0,0)

	)

168 
	#_IOT_iäeq_shÜt
 
	`_IOT
(
	`_IOTS
(),
IFNAMSIZ
,_IOTS(),1,0,0)

	)

169 
	#_IOT_iäeq_t
 
	`_IOT
(
	`_IOTS
(),
IFNAMSIZ
,_IOTS(),1,0,0)

	)

176 
	sifcÚf


178 
	mifc_Ën
;

181 
__ÿddr_t
 
	mifcu_buf
;

182 
iäeq
 *
	mifcu_»q
;

183 } 
	mifc_ifcu
;

185 
	#ifc_buf
 
ifc_ifcu
.
ifcu_buf


	)

186 
	#ifc_»q
 
ifc_ifcu
.
ifcu_»q


	)

187 
	#_IOT_ifcÚf
 
	`_IOT
(
	`_IOTS
(
ifcÚf
),1,0,0,0,0è

	)

190 
__BEGIN_DECLS


193 
	$if_Çmodex
 (cÚ¡ *
__iâame
è
__THROW
;

194 *
	$if_dextÚame
 (
__ifdex
, *
__iâame
è
__THROW
;

197 
if_Çmedex
 *
	$if_Çmedex
 (è
__THROW
;

200 
	$if_äÇmedex
 (
if_Çmedex
 *
__±r
è
__THROW
;

202 
__END_DECLS


	@/usr/include/net/if_arp.h

22 #iâdeà
_NET_IF_ARP_H


24 
	#_NET_IF_ARP_H
 1

	)

25 
	~<sys/cdefs.h
>

27 
	~<sys/ty³s.h
>

28 
	~<sys/sock.h
>

30 
	g__BEGIN_DECLS


33 
	#MAX_ADDR_LEN
 7

	)

39 
	#ARPOP_REQUEST
 1

	)

40 
	#ARPOP_REPLY
 2

	)

41 
	#ARPOP_RREQUEST
 3

	)

42 
	#ARPOP_RREPLY
 4

	)

43 
	#ARPOP_InREQUEST
 8

	)

44 
	#ARPOP_InREPLY
 9

	)

45 
	#ARPOP_NAK
 10

	)

54 
	s¬phdr


56 
	m¬_hrd
;

57 
	m¬_´o
;

58 
	m¬_hÊ
;

59 
	m¬_¶n
;

60 
	m¬_Ý
;

64 
	m__¬_sha
[
ETH_ALEN
];

65 
	m__¬_s
[4];

66 
	m__¬_tha
[
ETH_ALEN
];

67 
	m__¬_t
[4];

73 
	#ARPHRD_NETROM
 0

	)

74 
	#ARPHRD_ETHER
 1

	)

75 
	#ARPHRD_EETHER
 2

	)

76 
	#ARPHRD_AX25
 3

	)

77 
	#ARPHRD_PRONET
 4

	)

78 
	#ARPHRD_CHAOS
 5

	)

79 
	#ARPHRD_IEEE802
 6

	)

80 
	#ARPHRD_ARCNET
 7

	)

81 
	#ARPHRD_APPLETLK
 8

	)

82 
	#ARPHRD_DLCI
 15

	)

83 
	#ARPHRD_ATM
 19

	)

84 
	#ARPHRD_METRICOM
 23

	)

85 
	#ARPHRD_IEEE1394
 24

	)

86 
	#ARPHRD_EUI64
 27

	)

87 
	#ARPHRD_INFINIBAND
 32

	)

90 
	#ARPHRD_SLIP
 256

	)

91 
	#ARPHRD_CSLIP
 257

	)

92 
	#ARPHRD_SLIP6
 258

	)

93 
	#ARPHRD_CSLIP6
 259

	)

94 
	#ARPHRD_RSRVD
 260

	)

95 
	#ARPHRD_ADAPT
 264

	)

96 
	#ARPHRD_ROSE
 270

	)

97 
	#ARPHRD_X25
 271

	)

98 
	#ARPHRD_HWX25
 272

	)

99 
	#ARPHRD_PPP
 512

	)

100 
	#ARPHRD_CISCO
 513

	)

101 
	#ARPHRD_HDLC
 
ARPHRD_CISCO


	)

102 
	#ARPHRD_LAPB
 516

	)

103 
	#ARPHRD_DDCMP
 517

	)

104 
	#ARPHRD_RAWHDLC
 518

	)

106 
	#ARPHRD_TUNNEL
 768

	)

107 
	#ARPHRD_TUNNEL6
 769

	)

108 
	#ARPHRD_FRAD
 770

	)

109 
	#ARPHRD_SKIP
 771

	)

110 
	#ARPHRD_LOOPBACK
 772

	)

111 
	#ARPHRD_LOCALTLK
 773

	)

112 
	#ARPHRD_FDDI
 774

	)

113 
	#ARPHRD_BIF
 775

	)

114 
	#ARPHRD_SIT
 776

	)

115 
	#ARPHRD_IPDDP
 777

	)

116 
	#ARPHRD_IPGRE
 778

	)

117 
	#ARPHRD_PIMREG
 779

	)

118 
	#ARPHRD_HIPPI
 780

	)

119 
	#ARPHRD_ASH
 781

	)

120 
	#ARPHRD_ECONET
 782

	)

121 
	#ARPHRD_IRDA
 783

	)

122 
	#ARPHRD_FCPP
 784

	)

123 
	#ARPHRD_FCAL
 785

	)

124 
	#ARPHRD_FCPL
 786

	)

125 
	#ARPHRD_FCFABRIC
 787

	)

126 
	#ARPHRD_IEEE802_TR
 800

	)

127 
	#ARPHRD_IEEE80211
 801

	)

128 
	#ARPHRD_IEEE80211_PRISM
 802

	)

129 
	#ARPHRD_IEEE80211_RADIOTAP
 803

	)

130 
	#ARPHRD_IEEE802154
 804

	)

131 
	#ARPHRD_IEEE802154_PHY
 805

	)

133 
	#ARPHRD_VOID
 0xFFFF

	)

134 
	#ARPHRD_NONE
 0xFFFE

	)

138 
	s¬´eq


140 
sockaddr
 
	m¬p_·
;

141 
sockaddr
 
	m¬p_ha
;

142 
	m¬p_æags
;

143 
sockaddr
 
	m¬p_Ãtmask
;

144 
	m¬p_dev
[16];

147 
	s¬´eq_Þd


149 
sockaddr
 
	m¬p_·
;

150 
sockaddr
 
	m¬p_ha
;

151 
	m¬p_æags
;

152 
sockaddr
 
	m¬p_Ãtmask
;

156 
	#ATF_COM
 0x02

	)

157 
	#ATF_PERM
 0x04

	)

158 
	#ATF_PUBL
 0x08

	)

159 
	#ATF_USETRAILERS
 0x10

	)

160 
	#ATF_NETMASK
 0x20

	)

162 
	#ATF_DONTPUB
 0x40

	)

163 
	#ATF_MAGIC
 0x80

	)

167 
	#ARPD_UPDATE
 0x01

	)

168 
	#ARPD_LOOKUP
 0x02

	)

169 
	#ARPD_FLUSH
 0x03

	)

171 
	s¬pd_»que¡


173 
	m»q
;

174 
u_t32_t
 
	m
;

175 
	mdev
;

176 
	m¡amp
;

177 
	mupd©ed
;

178 
	mha
[
MAX_ADDR_LEN
];

181 
	g__END_DECLS


	@/usr/include/netinet/if_ether.h

18 #iâdeà
__NETINET_IF_ETHER_H


20 
	#__NETINET_IF_ETHER_H
 1

	)

21 
	~<ã©u»s.h
>

22 
	~<sys/ty³s.h
>

25 
	~<lux/if_h.h
>

27 #ifdeà
__USE_BSD


60 
	~<Ãt/hÃt.h
>

61 
	~<Ãt/if_¬p.h
>

63 
__BEGIN_DECLS


71 
	sh_¬p
 {

72 
¬phdr
 
	m_hdr
;

73 
u_t8_t
 
	m¬p_sha
[
ETH_ALEN
];

74 
u_t8_t
 
	m¬p_¥a
[4];

75 
u_t8_t
 
	m¬p_tha
[
ETH_ALEN
];

76 
u_t8_t
 
	m¬p_a
[4];

78 
	#¬p_hrd
 
_hdr
.
¬_hrd


	)

79 
	#¬p_´o
 
_hdr
.
¬_´o


	)

80 
	#¬p_hÊ
 
_hdr
.
¬_hÊ


	)

81 
	#¬p_¶n
 
_hdr
.
¬_¶n


	)

82 
	#¬p_Ý
 
_hdr
.
¬_Ý


	)

89 
	#ETHER_MAP_IP_MULTICAST
(
addr
, 
addr
) \

93 (
addr
)[0] = 0x01; \

94 (
addr
)[1] = 0x00; \

95 (
addr
)[2] = 0x5e; \

96 (
addr
)[3] = ((
u_t8_t
 *)
addr
)[1] & 0x7f; \

97 (
addr
)[4] = ((
u_t8_t
 *)
addr
)[2]; \

98 (
addr
)[5] = ((
u_t8_t
 *)
addr
)[3]; \

99 }

	)

101 
	g__END_DECLS


	@/usr/include/netinet/in.h

18 #iâdef 
_NETINET_IN_H


19 
	#_NETINET_IN_H
 1

	)

21 
	~<ã©u»s.h
>

22 
	~<¡dt.h
>

23 
	~<sys/sock.h
>

24 
	~<bs/ty³s.h
>

27 
__BEGIN_DECLS


30 
ut32_t
 
	t_addr_t
;

31 
	s_addr


33 
_addr_t
 
	ms_addr
;

37 
	~<bs/.h
>

42 
	mIPPROTO_IP
 = 0,

43 
	#IPPROTO_IP
 
IPPROTO_IP


	)

44 
	mIPPROTO_ICMP
 = 1,

45 
	#IPPROTO_ICMP
 
IPPROTO_ICMP


	)

46 
	mIPPROTO_IGMP
 = 2,

47 
	#IPPROTO_IGMP
 
IPPROTO_IGMP


	)

48 
	mIPPROTO_IPIP
 = 4,

49 
	#IPPROTO_IPIP
 
IPPROTO_IPIP


	)

50 
	mIPPROTO_TCP
 = 6,

51 
	#IPPROTO_TCP
 
IPPROTO_TCP


	)

52 
	mIPPROTO_EGP
 = 8,

53 
	#IPPROTO_EGP
 
IPPROTO_EGP


	)

54 
	mIPPROTO_PUP
 = 12,

55 
	#IPPROTO_PUP
 
IPPROTO_PUP


	)

56 
	mIPPROTO_UDP
 = 17,

57 
	#IPPROTO_UDP
 
IPPROTO_UDP


	)

58 
	mIPPROTO_IDP
 = 22,

59 
	#IPPROTO_IDP
 
IPPROTO_IDP


	)

60 
	mIPPROTO_TP
 = 29,

61 
	#IPPROTO_TP
 
IPPROTO_TP


	)

62 
	mIPPROTO_DCCP
 = 33,

63 
	#IPPROTO_DCCP
 
IPPROTO_DCCP


	)

64 
	mIPPROTO_IPV6
 = 41,

65 
	#IPPROTO_IPV6
 
IPPROTO_IPV6


	)

66 
	mIPPROTO_RSVP
 = 46,

67 
	#IPPROTO_RSVP
 
IPPROTO_RSVP


	)

68 
	mIPPROTO_GRE
 = 47,

69 
	#IPPROTO_GRE
 
IPPROTO_GRE


	)

70 
	mIPPROTO_ESP
 = 50,

71 
	#IPPROTO_ESP
 
IPPROTO_ESP


	)

72 
	mIPPROTO_AH
 = 51,

73 
	#IPPROTO_AH
 
IPPROTO_AH


	)

74 
	mIPPROTO_MTP
 = 92,

75 
	#IPPROTO_MTP
 
IPPROTO_MTP


	)

76 
	mIPPROTO_BEETPH
 = 94,

77 
	#IPPROTO_BEETPH
 
IPPROTO_BEETPH


	)

78 
	mIPPROTO_ENCAP
 = 98,

79 
	#IPPROTO_ENCAP
 
IPPROTO_ENCAP


	)

80 
	mIPPROTO_PIM
 = 103,

81 
	#IPPROTO_PIM
 
IPPROTO_PIM


	)

82 
	mIPPROTO_COMP
 = 108,

83 
	#IPPROTO_COMP
 
IPPROTO_COMP


	)

84 
	mIPPROTO_SCTP
 = 132,

85 
	#IPPROTO_SCTP
 
IPPROTO_SCTP


	)

86 
	mIPPROTO_UDPLITE
 = 136,

87 
	#IPPROTO_UDPLITE
 
IPPROTO_UDPLITE


	)

88 
	mIPPROTO_RAW
 = 255,

89 
	#IPPROTO_RAW
 
IPPROTO_RAW


	)

90 
	mIPPROTO_MAX


96 #iâdeà
__USE_KERNEL_IPV6_DEFS


99 
	mIPPROTO_HOPOPTS
 = 0,

100 
	#IPPROTO_HOPOPTS
 
IPPROTO_HOPOPTS


	)

101 
	mIPPROTO_ROUTING
 = 43,

102 
	#IPPROTO_ROUTING
 
IPPROTO_ROUTING


	)

103 
	mIPPROTO_FRAGMENT
 = 44,

104 
	#IPPROTO_FRAGMENT
 
IPPROTO_FRAGMENT


	)

105 
	mIPPROTO_ICMPV6
 = 58,

106 
	#IPPROTO_ICMPV6
 
IPPROTO_ICMPV6


	)

107 
	mIPPROTO_NONE
 = 59,

108 
	#IPPROTO_NONE
 
IPPROTO_NONE


	)

109 
	mIPPROTO_DSTOPTS
 = 60,

110 
	#IPPROTO_DSTOPTS
 
IPPROTO_DSTOPTS


	)

111 
	mIPPROTO_MH
 = 135

112 
	#IPPROTO_MH
 
IPPROTO_MH


	)

117 
ut16_t
 
	t_pÜt_t
;

122 
	mIPPORT_ECHO
 = 7,

123 
	mIPPORT_DISCARD
 = 9,

124 
	mIPPORT_SYSTAT
 = 11,

125 
	mIPPORT_DAYTIME
 = 13,

126 
	mIPPORT_NETSTAT
 = 15,

127 
	mIPPORT_FTP
 = 21,

128 
	mIPPORT_TELNET
 = 23,

129 
	mIPPORT_SMTP
 = 25,

130 
	mIPPORT_TIMESERVER
 = 37,

131 
	mIPPORT_NAMESERVER
 = 42,

132 
	mIPPORT_WHOIS
 = 43,

133 
	mIPPORT_MTP
 = 57,

135 
	mIPPORT_TFTP
 = 69,

136 
	mIPPORT_RJE
 = 77,

137 
	mIPPORT_FINGER
 = 79,

138 
	mIPPORT_TTYLINK
 = 87,

139 
	mIPPORT_SUPDUP
 = 95,

142 
	mIPPORT_EXECSERVER
 = 512,

143 
	mIPPORT_LOGINSERVER
 = 513,

144 
	mIPPORT_CMDSERVER
 = 514,

145 
	mIPPORT_EFSSERVER
 = 520,

148 
	mIPPORT_BIFFUDP
 = 512,

149 
	mIPPORT_WHOSERVER
 = 513,

150 
	mIPPORT_ROUTESERVER
 = 520,

153 
	mIPPORT_RESERVED
 = 1024,

156 
	mIPPORT_USERRESERVED
 = 5000

164 
	#IN_CLASSA
(
a
è((((
_addr_t
)×)è& 0x80000000è=ð0)

	)

165 
	#IN_CLASSA_NET
 0xff000000

	)

166 
	#IN_CLASSA_NSHIFT
 24

	)

167 
	#IN_CLASSA_HOST
 (0xfffffffà& ~
IN_CLASSA_NET
)

	)

168 
	#IN_CLASSA_MAX
 128

	)

170 
	#IN_CLASSB
(
a
è((((
_addr_t
)×)è& 0xc0000000è=ð0x80000000)

	)

171 
	#IN_CLASSB_NET
 0xffff0000

	)

172 
	#IN_CLASSB_NSHIFT
 16

	)

173 
	#IN_CLASSB_HOST
 (0xfffffffà& ~
IN_CLASSB_NET
)

	)

174 
	#IN_CLASSB_MAX
 65536

	)

176 
	#IN_CLASSC
(
a
è((((
_addr_t
)×)è& 0xe0000000è=ð0xc0000000)

	)

177 
	#IN_CLASSC_NET
 0xffffff00

	)

178 
	#IN_CLASSC_NSHIFT
 8

	)

179 
	#IN_CLASSC_HOST
 (0xfffffffà& ~
IN_CLASSC_NET
)

	)

181 
	#IN_CLASSD
(
a
è((((
_addr_t
)×)è& 0xf0000000è=ð0xe0000000)

	)

182 
	#IN_MULTICAST
(
a
è
	`IN_CLASSD
×)

	)

184 
	#IN_EXPERIMENTAL
(
a
è((((
_addr_t
)×)è& 0xe0000000è=ð0xe0000000)

	)

185 
	#IN_BADCLASS
(
a
è((((
_addr_t
)×)è& 0xf0000000è=ð0xf0000000)

	)

188 
	#INADDR_ANY
 ((
_addr_t
è0x00000000)

	)

190 
	#INADDR_BROADCAST
 ((
_addr_t
è0xffffffff)

	)

192 
	#INADDR_NONE
 ((
_addr_t
è0xffffffff)

	)

195 
	#IN_LOOPBACKNET
 127

	)

197 #iâdeà
INADDR_LOOPBACK


198 
	#INADDR_LOOPBACK
 ((
_addr_t
è0x7f000001è

	)

202 
	#INADDR_UNSPEC_GROUP
 ((
_addr_t
è0xe0000000è

	)

203 
	#INADDR_ALLHOSTS_GROUP
 ((
_addr_t
è0xe0000001è

	)

204 
	#INADDR_ALLRTRS_GROUP
 ((
_addr_t
è0xe0000002è

	)

205 
	#INADDR_MAX_LOCAL_GROUP
 ((
_addr_t
è0xe00000ffè

	)

207 #iâdeà
__USE_KERNEL_IPV6_DEFS


209 
	s6_addr


213 
ut8_t
 
	m__u6_addr8
[16];

214 #ià
defed
 
__USE_MISC
 || defed 
__USE_GNU


215 
ut16_t
 
	m__u6_addr16
[8];

216 
ut32_t
 
	m__u6_addr32
[4];

218 } 
	m__6_u
;

219 
	#s6_addr
 
__6_u
.
__u6_addr8


	)

220 #ià
defed
 
__USE_MISC
 || defed 
__USE_GNU


221 
	#s6_addr16
 
__6_u
.
__u6_addr16


	)

222 
	#s6_addr32
 
__6_u
.
__u6_addr32


	)

227 cÚ¡ 
6_addr
 
6addr_ªy
;

228 cÚ¡ 
6_addr
 
6addr_loÝback
;

229 
	#IN6ADDR_ANY_INIT
 { { { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } } }

	)

230 
	#IN6ADDR_LOOPBACK_INIT
 { { { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1 } } }

	)

232 
	#INET_ADDRSTRLEN
 16

	)

233 
	#INET6_ADDRSTRLEN
 46

	)

237 
	ssockaddr_


239 
__SOCKADDR_COMMON
 (
s_
);

240 
_pÜt_t
 
	ms_pÜt
;

241 
_addr
 
	ms_addr
;

244 
	ms_zo
[ (
sockaddr
) -

245 
__SOCKADDR_COMMON_SIZE
 -

246  (
_pÜt_t
) -

247  (
_addr
)];

250 #iâdeà
__USE_KERNEL_IPV6_DEFS


252 
	ssockaddr_6


254 
__SOCKADDR_COMMON
 (
s6_
);

255 
_pÜt_t
 
	ms6_pÜt
;

256 
ut32_t
 
	ms6_æowfo
;

257 
6_addr
 
	ms6_addr
;

258 
ut32_t
 
	ms6_scÝe_id
;

262 #ià
defed
 
__USE_MISC
 || defed 
__USE_GNU


264 
	s_m»q


267 
_addr
 
	mimr_muÉddr
;

270 
_addr
 
	mimr_rçû
;

273 
	s_m»q_sourû


276 
_addr
 
	mimr_muÉddr
;

279 
_addr
 
	mimr_rçû
;

282 
_addr
 
	mimr_sourûaddr
;

286 #iâdeà
__USE_KERNEL_IPV6_DEFS


288 
	sv6_m»q


291 
6_addr
 
	mv6mr_muÉddr
;

294 
	mv6mr_rçû
;

298 #ià
defed
 
__USE_MISC
 || defed 
__USE_GNU


300 
	sgroup_»q


303 
ut32_t
 
	mgr_rçû
;

306 
sockaddr_¡Üage
 
	mgr_group
;

309 
	sgroup_sourû_»q


312 
ut32_t
 
	mg¤_rçû
;

315 
sockaddr_¡Üage
 
	mg¤_group
;

318 
sockaddr_¡Üage
 
	mg¤_sourû
;

323 
	s_msfr


326 
_addr
 
	mimsf_muÉddr
;

329 
_addr
 
	mimsf_rçû
;

332 
ut32_t
 
	mimsf_fmode
;

335 
ut32_t
 
	mimsf_num¤c
;

337 
_addr
 
	mimsf_¦i¡
[1];

340 
	#IP_MSFILTER_SIZE
(
num¤c
è( (
_msfr
) \

341 -  (
_addr
) \

342 + (
num¤c
è*  (
_addr
))

	)

344 
	sgroup_fr


347 
ut32_t
 
	mgf_rçû
;

350 
sockaddr_¡Üage
 
	mgf_group
;

353 
ut32_t
 
	mgf_fmode
;

356 
ut32_t
 
	mgf_num¤c
;

358 
sockaddr_¡Üage
 
	mgf_¦i¡
[1];

361 
	#GROUP_FILTER_SIZE
(
num¤c
è( (
group_fr
) \

362 -  (
sockaddr_¡Üage
) \

363 + ((
num¤c
) \

364 *  (
sockaddr_¡Üage
)))

	)

374 
ut32_t
 
	$Áohl
 (
ut32_t
 
__ÃÚg
è
__THROW
 
	`__©ibu__
 ((
__cÚ¡__
));

375 
ut16_t
 
	$Áohs
 (
ut16_t
 
__ÃtshÜt
)

376 
__THROW
 
	`__©ibu__
 ((
__cÚ¡__
));

377 
ut32_t
 
	$htÚl
 (
ut32_t
 
__ho¡lÚg
)

378 
__THROW
 
	`__©ibu__
 ((
__cÚ¡__
));

379 
ut16_t
 
	$htÚs
 (
ut16_t
 
__ho¡shÜt
)

380 
__THROW
 
	`__©ibu__
 ((
__cÚ¡__
));

382 
	~<dn.h
>

385 
	~<bs/bysw­.h
>

387 #ifdeà
__OPTIMIZE__


391 #ià
__BYTE_ORDER
 =ð
__BIG_ENDIAN


394 
	#Áohl
(
x
è(x)

	)

395 
	#Áohs
(
x
è(x)

	)

396 
	#htÚl
(
x
è(x)

	)

397 
	#htÚs
(
x
è(x)

	)

399 #ià
__BYTE_ORDER
 =ð
__LITTLE_ENDIAN


400 
	#Áohl
(
x
è
	`__bsw­_32
 (x)

	)

401 
	#Áohs
(
x
è
	`__bsw­_16
 (x)

	)

402 
	#htÚl
(
x
è
	`__bsw­_32
 (x)

	)

403 
	#htÚs
(
x
è
	`__bsw­_16
 (x)

	)

408 #ifdeà
__GNUC__


409 
	#IN6_IS_ADDR_UNSPECIFIED
(
a
) \

410 (
__exnsiÚ__
 \

411 ({ cÚ¡ 
6_addr
 *
__a
 = (cÚ¡ 6_add¸*è(
a
); \

412 
__a
->
s6_addr32
[0] == 0 \

413 && 
__a
->
s6_addr32
[1] == 0 \

414 && 
__a
->
s6_addr32
[2] == 0 \

415 && 
__a
->
s6_addr32
[3] =ð0; 
	}
}))

	)

417 
	#IN6_IS_ADDR_LOOPBACK
(
a
) \

418 (
__exnsiÚ__
 \

419 ({ cÚ¡ 
6_addr
 *
__a
 = (cÚ¡ 6_add¸*è(
a
); \

420 
__a
->
s6_addr32
[0] == 0 \

421 && 
__a
->
s6_addr32
[1] == 0 \

422 && 
__a
->
s6_addr32
[2] == 0 \

423 && 
__a
->
s6_addr32
[3] =ð
	`htÚl
 (1); }))

	)

425 
	#IN6_IS_ADDR_LINKLOCAL
(
a
) \

426 (
__exnsiÚ__
 \

427 ({ cÚ¡ 
6_addr
 *
__a
 = (cÚ¡ 6_add¸*è(
a
); \

428 (
__a
->
s6_addr32
[0] & 
	`htÚl
 (0xffc00000)è=ðhtÚÈ(0xã800000); }))

	)

430 
	#IN6_IS_ADDR_SITELOCAL
(
a
) \

431 (
__exnsiÚ__
 \

432 ({ cÚ¡ 
6_addr
 *
__a
 = (cÚ¡ 6_add¸*è(
a
); \

433 (
__a
->
s6_addr32
[0] & 
	`htÚl
 (0xffc00000)è=ðhtÚÈ(0xãc00000); }))

	)

435 
	#IN6_IS_ADDR_V4MAPPED
(
a
) \

436 (
__exnsiÚ__
 \

437 ({ cÚ¡ 
6_addr
 *
__a
 = (cÚ¡ 6_add¸*è(
a
); \

438 
__a
->
s6_addr32
[0] == 0 \

439 && 
__a
->
s6_addr32
[1] == 0 \

440 && 
__a
->
s6_addr32
[2] =ð
	`htÚl
 (0xffff); }))

	)

442 
	#IN6_IS_ADDR_V4COMPAT
(
a
) \

443 (
__exnsiÚ__
 \

444 ({ cÚ¡ 
6_addr
 *
__a
 = (cÚ¡ 6_add¸*è(
a
); \

445 
__a
->
s6_addr32
[0] == 0 \

446 && 
__a
->
s6_addr32
[1] == 0 \

447 && 
__a
->
s6_addr32
[2] == 0 \

448 && 
	`Áohl
 (
__a
->
s6_addr32
[3]è> 1; }))

	)

450 
	#IN6_ARE_ADDR_EQUAL
(
a
,
b
) \

451 (
__exnsiÚ__
 \

452 ({ cÚ¡ 
6_addr
 *
__a
 = (cÚ¡ 6_add¸*è(
a
); \

453 cÚ¡ 
6_addr
 *
__b
 = (cÚ¡ 6_add¸*è(
b
); \

454 
__a
->
s6_addr32
[0] =ð
__b
->s6_addr32[0] \

455 && 
__a
->
s6_addr32
[1] =ð
__b
->s6_addr32[1] \

456 && 
__a
->
s6_addr32
[2] =ð
__b
->s6_addr32[2] \

457 && 
__a
->
s6_addr32
[3] =ð
__b
->s6_addr32[3]; }))

	)

459 
	#IN6_IS_ADDR_UNSPECIFIED
(
a
) \

460 (((cÚ¡ 
ut32_t
 *è(
a
))[0] == 0 \

461 && ((cÚ¡ 
ut32_t
 *è(
a
))[1] == 0 \

462 && ((cÚ¡ 
ut32_t
 *è(
a
))[2] == 0 \

463 && ((cÚ¡ 
ut32_t
 *è(
a
))[3] =ð0)

	)

465 
	#IN6_IS_ADDR_LOOPBACK
(
a
) \

466 (((cÚ¡ 
ut32_t
 *è(
a
))[0] == 0 \

467 && ((cÚ¡ 
ut32_t
 *è(
a
))[1] == 0 \

468 && ((cÚ¡ 
ut32_t
 *è(
a
))[2] == 0 \

469 && ((cÚ¡ 
ut32_t
 *è(
a
))[3] =ð
	`htÚl
 (1))

	)

471 
	#IN6_IS_ADDR_LINKLOCAL
(
a
) \

472 ((((cÚ¡ 
ut32_t
 *è(
a
))[0] & 
	`htÚl
 (0xffc00000)) \

473 =ð
	`htÚl
 (0xã800000))

	)

475 
	#IN6_IS_ADDR_SITELOCAL
(
a
) \

476 ((((cÚ¡ 
ut32_t
 *è(
a
))[0] & 
	`htÚl
 (0xffc00000)) \

477 =ð
	`htÚl
 (0xãc00000))

	)

479 
	#IN6_IS_ADDR_V4MAPPED
(
a
) \

480 ((((cÚ¡ 
ut32_t
 *è(
a
))[0] == 0) \

481 && (((cÚ¡ 
ut32_t
 *è(
a
))[1] == 0) \

482 && (((cÚ¡ 
ut32_t
 *è(
a
))[2] =ð
	`htÚl
 (0xffff)))

	)

484 
	#IN6_IS_ADDR_V4COMPAT
(
a
) \

485 ((((cÚ¡ 
ut32_t
 *è(
a
))[0] == 0) \

486 && (((cÚ¡ 
ut32_t
 *è(
a
))[1] == 0) \

487 && (((cÚ¡ 
ut32_t
 *è(
a
))[2] == 0) \

488 && (
	`Áohl
 (((cÚ¡ 
ut32_t
 *è(
a
))[3]è> 1))

	)

490 
	#IN6_ARE_ADDR_EQUAL
(
a
,
b
) \

491 ((((cÚ¡ 
ut32_t
 *è(
a
))[0] =ð((cÚ¡ ut32_*è(
b
))[0]) \

492 && (((cÚ¡ 
ut32_t
 *è(
a
))[1] =ð((cÚ¡ ut32_*è(
b
))[1]) \

493 && (((cÚ¡ 
ut32_t
 *è(
a
))[2] =ð((cÚ¡ ut32_*è(
b
))[2]) \

494 && (((cÚ¡ 
ut32_t
 *è(
a
))[3] =ð((cÚ¡ ut32_*è(
b
))[3]))

	)

497 
	#IN6_IS_ADDR_MULTICAST
(
a
è(((cÚ¡ 
ut8_t
 *è×))[0] =ð0xff)

	)

499 #ià
defed
 
__USE_MISC
 || defed 
__USE_GNU


501 
	$bd»svpÜt
 (
__sockfd
, 
sockaddr_
 *
__sock_
è
__THROW
;

504 
	$bd»svpÜt6
 (
__sockfd
, 
sockaddr_6
 *
__sock_
)

505 
__THROW
;

509 
	#IN6_IS_ADDR_MC_NODELOCAL
(
a
) \

510 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

511 && ((((cÚ¡ 
ut8_t
 *è(
a
))[1] & 0xfè=ð0x1))

	)

513 
	#IN6_IS_ADDR_MC_LINKLOCAL
(
a
) \

514 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

515 && ((((cÚ¡ 
ut8_t
 *è(
a
))[1] & 0xfè=ð0x2))

	)

517 
	#IN6_IS_ADDR_MC_SITELOCAL
(
a
) \

518 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

519 && ((((cÚ¡ 
ut8_t
 *è(
a
))[1] & 0xfè=ð0x5))

	)

521 
	#IN6_IS_ADDR_MC_ORGLOCAL
(
a
) \

522 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

523 && ((((cÚ¡ 
ut8_t
 *è(
a
))[1] & 0xfè=ð0x8))

	)

525 
	#IN6_IS_ADDR_MC_GLOBAL
(
a
) \

526 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

527 && ((((cÚ¡ 
ut8_t
 *è(
a
))[1] & 0xfè=ð0xe))

	)

530 #ifdeà
__USE_GNU


531 
cmsghdr
;

534 
	s6_pktfo


536 
6_addr
 
i6_addr
;

537 
i6_ifdex
;

541 
	s6_mtufo


543 
sockaddr_6
 
6m_addr
;

544 
ut32_t
 
6m_mtu
;

549 
	$6_ÝtiÚ_¥aû
 (
__nbys
)

550 
__THROW
 
__©ibu_d»ÿd__
;

551 
	$6_ÝtiÚ_
 (*
__bp
, 
cmsghdr
 **
__cmsgp
,

552 
__ty³
è
__THROW
 
__©ibu_d»ÿd__
;

553 
	$6_ÝtiÚ_­³nd
 (
cmsghdr
 *
__cmsg
,

554 cÚ¡ 
ut8_t
 *
__ty³p
, 
__muÉx
,

555 
__¶usy
è
__THROW
 
__©ibu_d»ÿd__
;

556 
ut8_t
 *
	$6_ÝtiÚ_®loc
 (
cmsghdr
 *
__cmsg
, 
__d©®
,

557 
__muÉx
, 
__¶usy
)

558 
__THROW
 
__©ibu_d»ÿd__
;

559 
	$6_ÝtiÚ_Ãxt
 (cÚ¡ 
cmsghdr
 *
__cmsg
,

560 
ut8_t
 **
__p
)

561 
__THROW
 
__©ibu_d»ÿd__
;

562 
	$6_ÝtiÚ_fd
 (cÚ¡ 
cmsghdr
 *
__cmsg
,

563 
ut8_t
 **
__p
, 
__ty³
)

564 
__THROW
 
__©ibu_d»ÿd__
;

568 
	$6_Ýt_
 (*
__extbuf
, 
sockËn_t
 
__ex
è
__THROW
;

569 
	$6_Ýt_­³nd
 (*
__extbuf
, 
sockËn_t
 
__ex
, 
__off£t
,

570 
ut8_t
 
__ty³
, 
sockËn_t
 
__Ën
, ut8_
__®ign
,

571 **
__d©abuå
è
__THROW
;

572 
	$6_Ýt_fish
 (*
__extbuf
, 
sockËn_t
 
__ex
, 
__off£t
)

573 
__THROW
;

574 
	$6_Ýt_£t_v®
 (*
__d©abuf
, 
__off£t
, *
__v®
,

575 
sockËn_t
 
__v®Ën
è
__THROW
;

576 
	$6_Ýt_Ãxt
 (*
__extbuf
, 
sockËn_t
 
__ex
, 
__off£t
,

577 
ut8_t
 *
__ty³p
, 
sockËn_t
 *
__ËÅ
,

578 **
__d©abuå
è
__THROW
;

579 
	$6_Ýt_fd
 (*
__extbuf
, 
sockËn_t
 
__ex
, 
__off£t
,

580 
ut8_t
 
__ty³
, 
sockËn_t
 *
__ËÅ
,

581 **
__d©abuå
è
__THROW
;

582 
	$6_Ýt_g_v®
 (*
__d©abuf
, 
__off£t
, *
__v®
,

583 
sockËn_t
 
__v®Ën
è
__THROW
;

587 
sockËn_t
 
	$6_¹h_¥aû
 (
__ty³
, 
__£gmts
è
__THROW
;

588 *
	$6_¹h_
 (*
__bp
, 
sockËn_t
 
__bp_Ën
, 
__ty³
,

589 
__£gmts
è
__THROW
;

590 
	$6_¹h_add
 (*
__bp
, cÚ¡ 
6_addr
 *
__addr
è
__THROW
;

591 
	$6_¹h_»v£
 (cÚ¡ *
__
, *
__out
è
__THROW
;

592 
	$6_¹h_£gmts
 (cÚ¡ *
__bp
è
__THROW
;

593 
6_addr
 *
	$6_¹h_gaddr
 (cÚ¡ *
__bp
, 
__dex
)

594 
__THROW
;

600 
	$gv4sourûfr
 (
__s
, 
_addr
 
__rçû_addr
,

601 
_addr
 
__group
, 
ut32_t
 *
__fmode
,

602 
ut32_t
 *
__num¤c
, 
_addr
 *
__¦i¡
)

603 
__THROW
;

606 
	$£tv4sourûfr
 (
__s
, 
_addr
 
__rçû_addr
,

607 
_addr
 
__group
, 
ut32_t
 
__fmode
,

608 
ut32_t
 
__num¤c
,

609 cÚ¡ 
_addr
 *
__¦i¡
)

610 
__THROW
;

614 
	$gsourûfr
 (
__s
, 
ut32_t
 
__rçû_addr
,

615 cÚ¡ 
sockaddr
 *
__group
,

616 
sockËn_t
 
__grou¶
, 
ut32_t
 *
__fmode
,

617 
ut32_t
 *
__num¤c
,

618 
sockaddr_¡Üage
 *
__¦i¡
è
__THROW
;

621 
	$£tsourûfr
 (
__s
, 
ut32_t
 
__rçû_addr
,

622 cÚ¡ 
sockaddr
 *
__group
,

623 
sockËn_t
 
__grou¶
, 
ut32_t
 
__fmode
,

624 
ut32_t
 
__num¤c
,

625 cÚ¡ 
sockaddr_¡Üage
 *
__¦i¡
è
__THROW
;

628 
__END_DECLS


	@/usr/include/netinet/in_systm.h

19 #iâdeà
_NETINET_IN_SYSTM_H


20 
	#_NETINET_IN_SYSTM_H
 1

	)

22 
	~<sys/cdefs.h
>

23 
	~<sys/ty³s.h
>

25 
__BEGIN_DECLS


34 
u_t16_t
 
	tn_shÜt
;

35 
u_t32_t
 
	tn_lÚg
;

36 
u_t32_t
 
	tn_time
;

38 
	g__END_DECLS


	@/usr/include/netinet/ip.h

18 #iâdeà
__NETINET_IP_H


19 
	#__NETINET_IP_H
 1

	)

21 
	~<ã©u»s.h
>

22 
	~<sys/ty³s.h
>

24 
	~<Ãt/.h
>

26 
__BEGIN_DECLS


28 
	stime¡amp


30 
u_t8_t
 
	mËn
;

31 
u_t8_t
 
	m±r
;

32 #ià
__BYTE_ORDER
 =ð
__LITTLE_ENDIAN


33 
	mæags
:4;

34 
	movæow
:4;

35 #ià
__BYTE_ORDER
 =ð
__BIG_ENDIAN


36 
	movæow
:4;

37 
	mæags
:4;

41 
u_t32_t
 
	md©a
[9];

44 
	shdr


46 #ià
__BYTE_ORDER
 =ð
__LITTLE_ENDIAN


47 
	mihl
:4;

48 
	mvsiÚ
:4;

49 #ià
__BYTE_ORDER
 =ð
__BIG_ENDIAN


50 
	mvsiÚ
:4;

51 
	mihl
:4;

55 
u_t8_t
 
	mtos
;

56 
u_t16_t
 
	mtÙ_Ën
;

57 
u_t16_t
 
	mid
;

58 
u_t16_t
 
	mäag_off
;

59 
u_t8_t
 
	ml
;

60 
u_t8_t
 
	m´ÙocÞ
;

61 
u_t16_t
 
	mcheck
;

62 
u_t32_t
 
	m§ddr
;

63 
u_t32_t
 
	mdaddr
;

67 #ifdeà
__USE_BSD


107 
	s


109 #ià
__BYTE_ORDER
 =ð
__LITTLE_ENDIAN


110 
	m_hl
:4;

111 
	m_v
:4;

113 #ià
__BYTE_ORDER
 =ð
__BIG_ENDIAN


114 
	m_v
:4;

115 
	m_hl
:4;

117 
u_t8_t
 
	m_tos
;

118 
u_shÜt
 
	m_Ën
;

119 
u_shÜt
 
	m_id
;

120 
u_shÜt
 
	m_off
;

121 
	#IP_RF
 0x8000

	)

122 
	#IP_DF
 0x4000

	)

123 
	#IP_MF
 0x2000

	)

124 
	#IP_OFFMASK
 0x1ffà

	)

125 
u_t8_t
 
	m_l
;

126 
u_t8_t
 
	m_p
;

127 
u_shÜt
 
	m_sum
;

128 
_addr
 
	m_¤c
, 
	m_d¡
;

134 
	s_time¡amp


136 
u_t8_t
 
	mt_code
;

137 
u_t8_t
 
	mt_Ën
;

138 
u_t8_t
 
	mt_±r
;

139 #ià
__BYTE_ORDER
 =ð
__LITTLE_ENDIAN


140 
	mt_æg
:4;

141 
	mt_oæw
:4;

143 #ià
__BYTE_ORDER
 =ð
__BIG_ENDIAN


144 
	mt_oæw
:4;

145 
	mt_æg
:4;

147 
u_t32_t
 
	md©a
[9];

151 
	#IPVERSION
 4

	)

152 
	#IP_MAXPACKET
 65535

	)

160 
	#IPTOS_ECN_MASK
 0x03

	)

161 
	#IPTOS_ECN
(
x
è((xè& 
IPTOS_ECN_MASK
)

	)

162 
	#IPTOS_ECN_NOT_ECT
 0x00

	)

163 
	#IPTOS_ECN_ECT1
 0x01

	)

164 
	#IPTOS_ECN_ECT0
 0x02

	)

165 
	#IPTOS_ECN_CE
 0x03

	)

173 
	#IPTOS_DSCP_MASK
 0xfc

	)

174 
	#IPTOS_DSCP
(
x
è((xè& 
IPTOS_DSCP_MASK
)

	)

175 
	#IPTOS_DSCP_AF11
 0x28

	)

176 
	#IPTOS_DSCP_AF12
 0x30

	)

177 
	#IPTOS_DSCP_AF13
 0x38

	)

178 
	#IPTOS_DSCP_AF21
 0x48

	)

179 
	#IPTOS_DSCP_AF22
 0x50

	)

180 
	#IPTOS_DSCP_AF23
 0x58

	)

181 
	#IPTOS_DSCP_AF31
 0x68

	)

182 
	#IPTOS_DSCP_AF32
 0x70

	)

183 
	#IPTOS_DSCP_AF33
 0x78

	)

184 
	#IPTOS_DSCP_AF41
 0x88

	)

185 
	#IPTOS_DSCP_AF42
 0x90

	)

186 
	#IPTOS_DSCP_AF43
 0x98

	)

187 
	#IPTOS_DSCP_EF
 0xb8

	)

194 
	#IPTOS_CLASS_MASK
 0xe0

	)

195 
	#IPTOS_CLASS
(
þass
è((þassè& 
IPTOS_CLASS_MASK
)

	)

196 
	#IPTOS_CLASS_CS0
 0x00

	)

197 
	#IPTOS_CLASS_CS1
 0x20

	)

198 
	#IPTOS_CLASS_CS2
 0x40

	)

199 
	#IPTOS_CLASS_CS3
 0x60

	)

200 
	#IPTOS_CLASS_CS4
 0x80

	)

201 
	#IPTOS_CLASS_CS5
 0xa0

	)

202 
	#IPTOS_CLASS_CS6
 0xc0

	)

203 
	#IPTOS_CLASS_CS7
 0xe0

	)

205 
	#IPTOS_CLASS_DEFAULT
 
IPTOS_CLASS_CS0


	)

211 
	#IPTOS_TOS_MASK
 0x1E

	)

212 
	#IPTOS_TOS
(
tos
è(Ñosè& 
IPTOS_TOS_MASK
)

	)

213 
	#IPTOS_LOWDELAY
 0x10

	)

214 
	#IPTOS_THROUGHPUT
 0x08

	)

215 
	#IPTOS_RELIABILITY
 0x04

	)

216 
	#IPTOS_LOWCOST
 0x02

	)

217 
	#IPTOS_MINCOST
 
IPTOS_LOWCOST


	)

222 
	#IPTOS_PREC_MASK
 
IPTOS_CLASS_MASK


	)

223 
	#IPTOS_PREC
(
tos
è
	`IPTOS_CLASS
Ños)

	)

224 
	#IPTOS_PREC_NETCONTROL
 
IPTOS_CLASS_CS7


	)

225 
	#IPTOS_PREC_INTERNETCONTROL
 
IPTOS_CLASS_CS6


	)

226 
	#IPTOS_PREC_CRITIC_ECP
 
IPTOS_CLASS_CS5


	)

227 
	#IPTOS_PREC_FLASHOVERRIDE
 
IPTOS_CLASS_CS4


	)

228 
	#IPTOS_PREC_FLASH
 
IPTOS_CLASS_CS3


	)

229 
	#IPTOS_PREC_IMMEDIATE
 
IPTOS_CLASS_CS2


	)

230 
	#IPTOS_PREC_PRIORITY
 
IPTOS_CLASS_CS1


	)

231 
	#IPTOS_PREC_ROUTINE
 
IPTOS_CLASS_CS0


	)

236 
	#IPOPT_COPY
 0x80

	)

237 
	#IPOPT_CLASS_MASK
 0x60

	)

238 
	#IPOPT_NUMBER_MASK
 0x1f

	)

240 
	#IPOPT_COPIED
(
o
è((oè& 
IPOPT_COPY
)

	)

241 
	#IPOPT_CLASS
(
o
è((oè& 
IPOPT_CLASS_MASK
)

	)

242 
	#IPOPT_NUMBER
(
o
è((oè& 
IPOPT_NUMBER_MASK
)

	)

244 
	#IPOPT_CONTROL
 0x00

	)

245 
	#IPOPT_RESERVED1
 0x20

	)

246 
	#IPOPT_DEBMEAS
 0x40

	)

247 
	#IPOPT_MEASUREMENT
 
IPOPT_DEBMEAS


	)

248 
	#IPOPT_RESERVED2
 0x60

	)

250 
	#IPOPT_EOL
 0

	)

251 
	#IPOPT_END
 
IPOPT_EOL


	)

252 
	#IPOPT_NOP
 1

	)

253 
	#IPOPT_NOOP
 
IPOPT_NOP


	)

255 
	#IPOPT_RR
 7

	)

256 
	#IPOPT_TS
 68

	)

257 
	#IPOPT_TIMESTAMP
 
IPOPT_TS


	)

258 
	#IPOPT_SECURITY
 130

	)

259 
	#IPOPT_SEC
 
IPOPT_SECURITY


	)

260 
	#IPOPT_LSRR
 131

	)

261 
	#IPOPT_SATID
 136

	)

262 
	#IPOPT_SID
 
IPOPT_SATID


	)

263 
	#IPOPT_SSRR
 137

	)

264 
	#IPOPT_RA
 148

	)

269 
	#IPOPT_OPTVAL
 0

	)

270 
	#IPOPT_OLEN
 1

	)

271 
	#IPOPT_OFFSET
 2

	)

272 
	#IPOPT_MINOFF
 4

	)

274 
	#MAX_IPOPTLEN
 40

	)

277 
	#IPOPT_TS_TSONLY
 0

	)

278 
	#IPOPT_TS_TSANDADDR
 1

	)

279 
	#IPOPT_TS_PRESPEC
 3

	)

282 
	#IPOPT_SECUR_UNCLASS
 0x0000

	)

283 
	#IPOPT_SECUR_CONFID
 0xf135

	)

284 
	#IPOPT_SECUR_EFTO
 0x789a

	)

285 
	#IPOPT_SECUR_MMMM
 0xbc4d

	)

286 
	#IPOPT_SECUR_RESTR
 0xaf13

	)

287 
	#IPOPT_SECUR_SECRET
 0xd788

	)

288 
	#IPOPT_SECUR_TOPSECRET
 0x6bc5

	)

293 
	#MAXTTL
 255

	)

294 
	#IPDEFTTL
 64

	)

295 
	#IPFRAGTTL
 60

	)

296 
	#IPTTLDEC
 1

	)

298 
	#IP_MSS
 576

	)

300 
	g__END_DECLS


	@/usr/include/signal.h

22 #iâdef 
_SIGNAL_H


24 #ià!
defed
 
__Ãed_sig_©omic_t
 && !defed 
__Ãed_sig£t_t


25 
	#_SIGNAL_H


	)

28 
	~<ã©u»s.h
>

30 
	g__BEGIN_DECLS


32 
	~<bs/sig£t.h
>

36 #ià
defed
 
__Ãed_sig_©omic_t
 || defed 
_SIGNAL_H


37 #iâdeà
__sig_©omic_t_defed


38 
	#__sig_©omic_t_defed


	)

39 
__BEGIN_NAMESPACE_STD


40 
__sig_©omic_t
 
	tsig_©omic_t
;

41 
	g__END_NAMESPACE_STD


43 #undeà
__Ãed_sig_©omic_t


46 #ià
defed
 
__Ãed_sig£t_t
 || (defed 
_SIGNAL_H
 && defed 
__USE_POSIX
)

47 #iâdeà
__sig£t_t_defed


48 
	#__sig£t_t_defed


	)

49 
__sig£t_t
 
	tsig£t_t
;

51 #undeà
__Ãed_sig£t_t


54 #ifdeà
_SIGNAL_H


56 
	~<bs/ty³s.h
>

57 
	~<bs/signum.h
>

59 #ià
defed
 
__USE_XOPEN
 || defed 
__USE_XOPEN2K


60 #iâdeà
__pid_t_defed


61 
__pid_t
 
	tpid_t
;

62 
	#__pid_t_defed


	)

64 #ifdeà
__USE_XOPEN


66 #iâdeà
__uid_t_defed


67 
__uid_t
 
	tuid_t
;

68 
	#__uid_t_defed


	)

72 #ifdeà
__USE_POSIX199309


74 
	#__Ãed_time¥ec


	)

75 
	~<time.h
>

78 #ià
defed
 
__USE_POSIX199309
 || defed 
__USE_XOPEN_EXTENDED


80 
	~<bs/sigfo.h
>

85 (*
	t__sighªdËr_t
) ();

90 
__sighªdËr_t
 
	$__sysv_sigÇl
 (
__sig
, 
__sighªdËr_t
 
__hªdËr
)

91 
__THROW
;

92 #ifdeà
__USE_GNU


93 
__sighªdËr_t
 
	$sysv_sigÇl
 (
__sig
, 
__sighªdËr_t
 
__hªdËr
)

94 
__THROW
;

100 
__BEGIN_NAMESPACE_STD


101 #ifdeà
__USE_BSD


102 
__sighªdËr_t
 
	$sigÇl
 (
__sig
, 
__sighªdËr_t
 
__hªdËr
)

103 
__THROW
;

106 #ifdeà
__REDIRECT_NTH


107 
__sighªdËr_t
 
	`__REDIRECT_NTH
 (
sigÇl
,

108 (
__sig
, 
__sighªdËr_t
 
__hªdËr
),

109 
__sysv_sigÇl
);

111 
	#sigÇl
 
__sysv_sigÇl


	)

114 
__END_NAMESPACE_STD


116 #ifdeà
__USE_XOPEN


119 
__sighªdËr_t
 
	$bsd_sigÇl
 (
__sig
, 
__sighªdËr_t
 
__hªdËr
)

120 
__THROW
;

126 #ifdeà
__USE_POSIX


127 
	$kl
 (
__pid_t
 
__pid
, 
__sig
è
__THROW
;

130 #ià
defed
 
__USE_BSD
 || defed 
__USE_XOPEN_EXTENDED


134 
	$kÍg
 (
__pid_t
 
__pg½
, 
__sig
è
__THROW
;

137 
__BEGIN_NAMESPACE_STD


139 
	$¿i£
 (
__sig
è
__THROW
;

140 
__END_NAMESPACE_STD


142 #ifdeà
__USE_SVID


144 
__sighªdËr_t
 
	$ssigÇl
 (
__sig
, 
__sighªdËr_t
 
__hªdËr
)

145 
__THROW
;

146 
	$gsigÇl
 (
__sig
è
__THROW
;

149 #ià
defed
 
__USE_MISC
 || defed 
__USE_XOPEN2K


151 
	`psigÇl
 (
__sig
, cÚ¡ *
__s
);

154 #ifdeà
__USE_XOPEN2K


156 
	`psigfo
 (cÚ¡ 
sigfo_t
 *
__pfo
, cÚ¡ *
__s
);

167 
	`__sig·u£
 (
__sig_Ü_mask
, 
__is_sig
);

169 #ifdeà
__USE_XOPEN


170 #ifdeà
__GNUC__


171 
	$sig·u£
 (
__sig
è
	`__asm__
 ("__xpg_sigpause");

174 
	#sig·u£
(
sig
è
	`__sig·u£
 ((sig), 1)

	)

179 #ifdeà
__USE_BSD


186 
	#sigmask
(
sig
è
	`__sigmask
(sig)

	)

189 
	$sigblock
 (
__mask
è
__THROW
 
__©ibu_d»ÿd__
;

192 
	$sig£tmask
 (
__mask
è
__THROW
 
__©ibu_d»ÿd__
;

195 
	$siggmask
 (è
__THROW
 
__©ibu_d»ÿd__
;

199 #ifdeà
__USE_MISC


200 
	#NSIG
 
_NSIG


	)

203 #ifdeà
__USE_GNU


204 
__sighªdËr_t
 
	tsighªdËr_t
;

208 #ifdeà
__USE_BSD


209 
__sighªdËr_t
 
	tsig_t
;

212 #ifdeà
__USE_POSIX


215 
	$sigem±y£t
 (
sig£t_t
 *
__£t
è
__THROW
 
	`__nÚnuÎ
 ((1));

218 
	$sigfl£t
 (
sig£t_t
 *
__£t
è
__THROW
 
	`__nÚnuÎ
 ((1));

221 
	$sigadd£t
 (
sig£t_t
 *
__£t
, 
__signo
è
__THROW
 
	`__nÚnuÎ
 ((1));

224 
	$sigd£t
 (
sig£t_t
 *
__£t
, 
__signo
è
__THROW
 
	`__nÚnuÎ
 ((1));

227 
	$sigismemb
 (cÚ¡ 
sig£t_t
 *
__£t
, 
__signo
)

228 
__THROW
 
	`__nÚnuÎ
 ((1));

230 #ifdeà
__USE_GNU


232 
	$sigi£m±y£t
 (cÚ¡ 
sig£t_t
 *
__£t
è
__THROW
 
	`__nÚnuÎ
 ((1));

235 
	$sigªd£t
 (
sig£t_t
 *
__£t
, cÚ¡ sig£t_*
__Ëá
,

236 cÚ¡ 
sig£t_t
 *
__right
è
__THROW
 
	`__nÚnuÎ
 ((1, 2, 3));

239 
	$sigÜ£t
 (
sig£t_t
 *
__£t
, cÚ¡ sig£t_*
__Ëá
,

240 cÚ¡ 
sig£t_t
 *
__right
è
__THROW
 
	`__nÚnuÎ
 ((1, 2, 3));

245 
	~<bs/sigaùiÚ.h
>

248 
	$sig´ocmask
 (
__how
, cÚ¡ 
sig£t_t
 *
__»¡riù
 
__£t
,

249 
sig£t_t
 *
__»¡riù
 
__o£t
è
__THROW
;

256 
	$sigsu¥d
 (cÚ¡ 
sig£t_t
 *
__£t
è
	`__nÚnuÎ
 ((1));

259 
	$sigaùiÚ
 (
__sig
, cÚ¡ 
sigaùiÚ
 *
__»¡riù
 
__aù
,

260 
sigaùiÚ
 *
__»¡riù
 
__ßù
è
__THROW
;

263 
	$sig³ndg
 (
sig£t_t
 *
__£t
è
__THROW
 
	`__nÚnuÎ
 ((1));

270 
	$sigwa
 (cÚ¡ 
sig£t_t
 *
__»¡riù
 
__£t
, *__»¡riù 
__sig
)

271 
	`__nÚnuÎ
 ((1, 2));

273 #ifdeà
__USE_POSIX199309


278 
	$sigwafo
 (cÚ¡ 
sig£t_t
 *
__»¡riù
 
__£t
,

279 
sigfo_t
 *
__»¡riù
 
__fo
è
	`__nÚnuÎ
 ((1));

286 
	$sigtimedwa
 (cÚ¡ 
sig£t_t
 *
__»¡riù
 
__£t
,

287 
sigfo_t
 *
__»¡riù
 
__fo
,

288 cÚ¡ 
time¥ec
 *
__»¡riù
 
__timeout
)

289 
	`__nÚnuÎ
 ((1));

293 
	$sigqueue
 (
__pid_t
 
__pid
, 
__sig
, cÚ¡ 
sigv®
 
__v®
)

294 
__THROW
;

299 #ifdeà
__USE_BSD


303 cÚ¡ *cÚ¡ 
_sys_sigli¡
[
_NSIG
];

304 cÚ¡ *cÚ¡ 
sys_sigli¡
[
_NSIG
];

307 
	ssigvec


309 
__sighªdËr_t
 
sv_hªdËr
;

310 
sv_mask
;

312 
sv_æags
;

313 
	#sv_Ú¡ack
 
sv_æags


	)

317 
	#SV_ONSTACK
 (1 << 0)

	)

318 
	#SV_INTERRUPT
 (1 << 1)

	)

319 
	#SV_RESETHAND
 (1 << 2)

	)

327 
	$sigvec
 (
__sig
, cÚ¡ 
sigvec
 *
__vec
,

328 
sigvec
 *
__ovec
è
__THROW
;

332 
	~<bs/sigcÚxt.h
>

335 
	$sig»tuº
 (
sigcÚxt
 *
__sý
è
__THROW
;

340 #ià
defed
 
__USE_BSD
 || defed 
__USE_XOPEN_EXTENDED
 || defed 
__USE_XOPEN2K8


341 
	#__Ãed_size_t


	)

342 
	~<¡ddef.h
>

347 
	$sig¼u±
 (
__sig
, 
__¼u±
è
__THROW
;

349 
	~<bs/sig¡ack.h
>

350 #ià
defed
 
__USE_XOPEN
 || defed 
__USE_XOPEN2K8


352 
	~<sys/ucÚxt.h
>

358 
	$sig¡ack
 (
sig¡ack
 *
__ss
, sig¡ack *
__oss
)

359 
__THROW
 
__©ibu_d»ÿd__
;

363 
	$sig®t¡ack
 (cÚ¡ 
sig®t¡ack
 *
__»¡riù
 
__ss
,

364 
sig®t¡ack
 *
__»¡riù
 
__oss
è
__THROW
;

368 #ifdeà
__USE_XOPEN_EXTENDED


372 
	$sighÞd
 (
__sig
è
__THROW
;

375 
	$sig»l£
 (
__sig
è
__THROW
;

378 
	$sigignÜe
 (
__sig
è
__THROW
;

381 
__sighªdËr_t
 
	$sig£t
 (
__sig
, 
__sighªdËr_t
 
__di¥
è
__THROW
;

384 #ià
defed
 
__USE_POSIX199506
 || defed 
__USE_UNIX98


387 
	~<bs/±h»adty³s.h
>

388 
	~<bs/sigth»ad.h
>

395 
	$__libc_cu¼t_sig¹m
 (è
__THROW
;

397 
	$__libc_cu¼t_sig¹max
 (è
__THROW
;

401 
__END_DECLS


	@/usr/include/stdint.h

22 #iâdeà
_STDINT_H


23 
	#_STDINT_H
 1

	)

25 
	~<ã©u»s.h
>

26 
	~<bs/wch¬.h
>

27 
	~<bs/wÜdsize.h
>

34 #iâdeà
__t8_t_defed


35 
	#__t8_t_defed


	)

36 sigÃd 
	tt8_t
;

37 
	tt16_t
;

38 
	tt32_t
;

39 #ià
__WORDSIZE
 == 64

40 
	tt64_t
;

42 
__exnsiÚ__


43 
	tt64_t
;

48 
	tut8_t
;

49 
	tut16_t
;

50 #iâdeà
__ut32_t_defed


51 
	tut32_t
;

52 
	#__ut32_t_defed


	)

54 #ià
__WORDSIZE
 == 64

55 
	tut64_t
;

57 
__exnsiÚ__


58 
	tut64_t
;

65 sigÃd 
	tt_Ëa¡8_t
;

66 
	tt_Ëa¡16_t
;

67 
	tt_Ëa¡32_t
;

68 #ià
__WORDSIZE
 == 64

69 
	tt_Ëa¡64_t
;

71 
__exnsiÚ__


72 
	tt_Ëa¡64_t
;

76 
	tut_Ëa¡8_t
;

77 
	tut_Ëa¡16_t
;

78 
	tut_Ëa¡32_t
;

79 #ià
__WORDSIZE
 == 64

80 
	tut_Ëa¡64_t
;

82 
__exnsiÚ__


83 
	tut_Ëa¡64_t
;

90 sigÃd 
	tt_ç¡8_t
;

91 #ià
__WORDSIZE
 == 64

92 
	tt_ç¡16_t
;

93 
	tt_ç¡32_t
;

94 
	tt_ç¡64_t
;

96 
	tt_ç¡16_t
;

97 
	tt_ç¡32_t
;

98 
__exnsiÚ__


99 
	tt_ç¡64_t
;

103 
	tut_ç¡8_t
;

104 #ià
__WORDSIZE
 == 64

105 
	tut_ç¡16_t
;

106 
	tut_ç¡32_t
;

107 
	tut_ç¡64_t
;

109 
	tut_ç¡16_t
;

110 
	tut_ç¡32_t
;

111 
__exnsiÚ__


112 
	tut_ç¡64_t
;

117 #ià
__WORDSIZE
 == 64

118 #iâdeà
___t_defed


119 
	t_t
;

120 
	#___t_defed


	)

122 
	tu_t
;

124 #iâdeà
___t_defed


125 
	t_t
;

126 
	#___t_defed


	)

128 
	tu_t
;

133 #ià
__WORDSIZE
 == 64

134 
	ttmax_t
;

135 
	tutmax_t
;

137 
__exnsiÚ__


138 
	ttmax_t
;

139 
__exnsiÚ__


140 
	tutmax_t
;

144 #ià
__WORDSIZE
 == 64

145 
	#__INT64_C
(
c
èø## 
L


	)

146 
	#__UINT64_C
(
c
èø## 
UL


	)

148 
	#__INT64_C
(
c
èø## 
LL


	)

149 
	#__UINT64_C
(
c
èø## 
ULL


	)

155 
	#INT8_MIN
 (-128)

	)

156 
	#INT16_MIN
 (-32767-1)

	)

157 
	#INT32_MIN
 (-2147483647-1)

	)

158 
	#INT64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

160 
	#INT8_MAX
 (127)

	)

161 
	#INT16_MAX
 (32767)

	)

162 
	#INT32_MAX
 (2147483647)

	)

163 
	#INT64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

166 
	#UINT8_MAX
 (255)

	)

167 
	#UINT16_MAX
 (65535)

	)

168 
	#UINT32_MAX
 (4294967295U)

	)

169 
	#UINT64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

173 
	#INT_LEAST8_MIN
 (-128)

	)

174 
	#INT_LEAST16_MIN
 (-32767-1)

	)

175 
	#INT_LEAST32_MIN
 (-2147483647-1)

	)

176 
	#INT_LEAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

178 
	#INT_LEAST8_MAX
 (127)

	)

179 
	#INT_LEAST16_MAX
 (32767)

	)

180 
	#INT_LEAST32_MAX
 (2147483647)

	)

181 
	#INT_LEAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

184 
	#UINT_LEAST8_MAX
 (255)

	)

185 
	#UINT_LEAST16_MAX
 (65535)

	)

186 
	#UINT_LEAST32_MAX
 (4294967295U)

	)

187 
	#UINT_LEAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

191 
	#INT_FAST8_MIN
 (-128)

	)

192 #ià
__WORDSIZE
 == 64

193 
	#INT_FAST16_MIN
 (-9223372036854775807L-1)

	)

194 
	#INT_FAST32_MIN
 (-9223372036854775807L-1)

	)

196 
	#INT_FAST16_MIN
 (-2147483647-1)

	)

197 
	#INT_FAST32_MIN
 (-2147483647-1)

	)

199 
	#INT_FAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

201 
	#INT_FAST8_MAX
 (127)

	)

202 #ià
__WORDSIZE
 == 64

203 
	#INT_FAST16_MAX
 (9223372036854775807L)

	)

204 
	#INT_FAST32_MAX
 (9223372036854775807L)

	)

206 
	#INT_FAST16_MAX
 (2147483647)

	)

207 
	#INT_FAST32_MAX
 (2147483647)

	)

209 
	#INT_FAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

212 
	#UINT_FAST8_MAX
 (255)

	)

213 #ià
__WORDSIZE
 == 64

214 
	#UINT_FAST16_MAX
 (18446744073709551615UL)

	)

215 
	#UINT_FAST32_MAX
 (18446744073709551615UL)

	)

217 
	#UINT_FAST16_MAX
 (4294967295U)

	)

218 
	#UINT_FAST32_MAX
 (4294967295U)

	)

220 
	#UINT_FAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

224 #ià
__WORDSIZE
 == 64

225 
	#INTPTR_MIN
 (-9223372036854775807L-1)

	)

226 
	#INTPTR_MAX
 (9223372036854775807L)

	)

227 
	#UINTPTR_MAX
 (18446744073709551615UL)

	)

229 
	#INTPTR_MIN
 (-2147483647-1)

	)

230 
	#INTPTR_MAX
 (2147483647)

	)

231 
	#UINTPTR_MAX
 (4294967295U)

	)

236 
	#INTMAX_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

238 
	#INTMAX_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

241 
	#UINTMAX_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

247 #ià
__WORDSIZE
 == 64

248 
	#PTRDIFF_MIN
 (-9223372036854775807L-1)

	)

249 
	#PTRDIFF_MAX
 (9223372036854775807L)

	)

251 
	#PTRDIFF_MIN
 (-2147483647-1)

	)

252 
	#PTRDIFF_MAX
 (2147483647)

	)

256 
	#SIG_ATOMIC_MIN
 (-2147483647-1)

	)

257 
	#SIG_ATOMIC_MAX
 (2147483647)

	)

260 #ià
__WORDSIZE
 == 64

261 
	#SIZE_MAX
 (18446744073709551615UL)

	)

263 
	#SIZE_MAX
 (4294967295U)

	)

267 #iâdeà
WCHAR_MIN


269 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

270 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

274 
	#WINT_MIN
 (0u)

	)

275 
	#WINT_MAX
 (4294967295u)

	)

278 
	#INT8_C
(
c
è
	)
c

279 
	#INT16_C
(
c
è
	)
c

280 
	#INT32_C
(
c
è
	)
c

281 #ià
__WORDSIZE
 == 64

282 
	#INT64_C
(
c
èø## 
L


	)

284 
	#INT64_C
(
c
èø## 
LL


	)

288 
	#UINT8_C
(
c
è
	)
c

289 
	#UINT16_C
(
c
è
	)
c

290 
	#UINT32_C
(
c
èø## 
U


	)

291 #ià
__WORDSIZE
 == 64

292 
	#UINT64_C
(
c
èø## 
UL


	)

294 
	#UINT64_C
(
c
èø## 
ULL


	)

298 #ià
__WORDSIZE
 == 64

299 
	#INTMAX_C
(
c
èø## 
L


	)

300 
	#UINTMAX_C
(
c
èø## 
UL


	)

302 
	#INTMAX_C
(
c
èø## 
LL


	)

303 
	#UINTMAX_C
(
c
èø## 
ULL


	)

	@/usr/include/stdio.h

23 #iâdeà
_STDIO_H


25 #ià!
defed
 
__Ãed_FILE
 && !defed 
__Ãed___FILE


26 
	#_STDIO_H
 1

	)

27 
	~<ã©u»s.h
>

29 
	g__BEGIN_DECLS


31 
	#__Ãed_size_t


	)

32 
	#__Ãed_NULL


	)

33 
	~<¡ddef.h
>

35 
	~<bs/ty³s.h
>

36 
	#__Ãed_FILE


	)

37 
	#__Ãed___FILE


	)

41 #ià!
defed
 
__FILE_defed
 && defed 
__Ãed_FILE


44 
	g_IO_FILE
;

46 
__BEGIN_NAMESPACE_STD


48 
_IO_FILE
 
	tFILE
;

49 
	g__END_NAMESPACE_STD


50 #ià
defed
 
__USE_LARGEFILE64
 || defed 
__USE_SVID
 || defed 
__USE_POSIX
 \

51 || 
defed
 
	g__USE_BSD
 || defed 
	g__USE_ISOC99
 || defed 
	g__USE_XOPEN
 \

52 || 
defed
 
__USE_POSIX2


53 
	$__USING_NAMESPACE_STD
(
FILE
)

56 
	#__FILE_defed
 1

	)

58 #undeà
__Ãed_FILE


61 #ià!
defed
 
____FILE_defed
 && defed 
__Ãed___FILE


64 
_IO_FILE
 
	t__FILE
;

66 
	#____FILE_defed
 1

	)

68 #undeà
__Ãed___FILE


71 #ifdef 
_STDIO_H


72 
	#_STDIO_USES_IOSTREAM


	)

74 
	~<libio.h
>

76 #ià
defed
 
__USE_XOPEN
 || defed 
__USE_XOPEN2K8


77 #ifdeà
__GNUC__


78 #iâdeà
_VA_LIST_DEFINED


79 
_G_va_li¡
 
	tva_li¡
;

80 
	#_VA_LIST_DEFINED


	)

83 
	~<¡d¬g.h
>

87 #ifdeà
__USE_XOPEN2K8


88 #iâdeà
__off_t_defed


89 #iâdeà
__USE_FILE_OFFSET64


90 
__off_t
 
	toff_t
;

92 
__off64_t
 
	toff_t
;

94 
	#__off_t_defed


	)

96 #ià
defed
 
__USE_LARGEFILE64
 && !defed 
__off64_t_defed


97 
__off64_t
 
	toff64_t
;

98 
	#__off64_t_defed


	)

101 #iâdeà
__ssize_t_defed


102 
__ssize_t
 
	tssize_t
;

103 
	#__ssize_t_defed


	)

108 
__BEGIN_NAMESPACE_STD


109 #iâdeà
__USE_FILE_OFFSET64


110 
_G_åos_t
 
	tåos_t
;

112 
_G_åos64_t
 
	tåos_t
;

114 
__END_NAMESPACE_STD


115 #ifdeà
__USE_LARGEFILE64


116 
_G_åos64_t
 
	tåos64_t
;

120 
	#_IOFBF
 0

	)

121 
	#_IOLBF
 1

	)

122 
	#_IONBF
 2

	)

126 #iâdeà
BUFSIZ


127 
	#BUFSIZ
 
_IO_BUFSIZ


	)

133 #iâdeà
EOF


134 
	#EOF
 (-1)

	)

140 
	#SEEK_SET
 0

	)

141 
	#SEEK_CUR
 1

	)

142 
	#SEEK_END
 2

	)

143 #ifdeà
__USE_GNU


144 
	#SEEK_DATA
 3

	)

145 
	#SEEK_HOLE
 4

	)

149 #ià
defed
 
__USE_SVID
 || defed 
__USE_XOPEN


151 
	#P_tmpd
 "/tmp"

	)

164 
	~<bs/¡dio_lim.h
>

168 
_IO_FILE
 *
¡d
;

169 
_IO_FILE
 *
¡dout
;

170 
_IO_FILE
 *
¡dr
;

172 
	#¡d
 
¡d


	)

173 
	#¡dout
 
¡dout


	)

174 
	#¡dr
 
¡dr


	)

176 
__BEGIN_NAMESPACE_STD


178 
	$»move
 (cÚ¡ *
__fame
è
__THROW
;

180 
	$»Çme
 (cÚ¡ *
__Þd
, cÚ¡ *
__Ãw
è
__THROW
;

181 
__END_NAMESPACE_STD


183 #ifdeà
__USE_ATFILE


185 
	$»Çmt
 (
__Þdfd
, cÚ¡ *
__Þd
, 
__Ãwfd
,

186 cÚ¡ *
__Ãw
è
__THROW
;

189 
__BEGIN_NAMESPACE_STD


194 #iâdeà
__USE_FILE_OFFSET64


195 
FILE
 *
	$tmpfe
 (è
__wur
;

197 #ifdeà
__REDIRECT


198 
FILE
 *
	`__REDIRECT
 (
tmpfe
, (), 
tmpfe64
è
__wur
;

200 
	#tmpfe
 
tmpfe64


	)

204 #ifdeà
__USE_LARGEFILE64


205 
FILE
 *
	$tmpfe64
 (è
__wur
;

209 *
	$tm²am
 (*
__s
è
__THROW
 
__wur
;

210 
__END_NAMESPACE_STD


212 #ifdeà
__USE_MISC


215 *
	$tm²am_r
 (*
__s
è
__THROW
 
__wur
;

219 #ià
defed
 
__USE_SVID
 || defed 
__USE_XOPEN


227 *
	$m²am
 (cÚ¡ *
__d
, cÚ¡ *
__pfx
)

228 
__THROW
 
__©ibu_m®loc__
 
__wur
;

232 
__BEGIN_NAMESPACE_STD


237 
	`fþo£
 (
FILE
 *
__¡»am
);

242 
	`fæush
 (
FILE
 *
__¡»am
);

243 
__END_NAMESPACE_STD


245 #ifdeà
__USE_MISC


252 
	`fæush_uÆocked
 (
FILE
 *
__¡»am
);

255 #ifdeà
__USE_GNU


262 
	`fþo£®l
 ();

266 
__BEGIN_NAMESPACE_STD


267 #iâdeà
__USE_FILE_OFFSET64


272 
FILE
 *
	$fÝ
 (cÚ¡ *
__»¡riù
 
__fame
,

273 cÚ¡ *
__»¡riù
 
__modes
è
__wur
;

278 
FILE
 *
	$äeÝ
 (cÚ¡ *
__»¡riù
 
__fame
,

279 cÚ¡ *
__»¡riù
 
__modes
,

280 
FILE
 *
__»¡riù
 
__¡»am
è
__wur
;

282 #ifdeà
__REDIRECT


283 
FILE
 *
	`__REDIRECT
 (
fÝ
, (cÚ¡ *
__»¡riù
 
__fame
,

284 cÚ¡ *
__»¡riù
 
__modes
), 
fÝ64
)

285 
__wur
;

286 
FILE
 *
	`__REDIRECT
 (
äeÝ
, (cÚ¡ *
__»¡riù
 
__fame
,

287 cÚ¡ *
__»¡riù
 
__modes
,

288 
FILE
 *
__»¡riù
 
__¡»am
), 
äeÝ64
)

289 
__wur
;

291 
	#fÝ
 
fÝ64


	)

292 
	#äeÝ
 
äeÝ64


	)

295 
__END_NAMESPACE_STD


296 #ifdeà
__USE_LARGEFILE64


297 
FILE
 *
	$fÝ64
 (cÚ¡ *
__»¡riù
 
__fame
,

298 cÚ¡ *
__»¡riù
 
__modes
è
__wur
;

299 
FILE
 *
	$äeÝ64
 (cÚ¡ *
__»¡riù
 
__fame
,

300 cÚ¡ *
__»¡riù
 
__modes
,

301 
FILE
 *
__»¡riù
 
__¡»am
è
__wur
;

304 #ifdef 
__USE_POSIX


306 
FILE
 *
	$fdÝ
 (
__fd
, cÚ¡ *
__modes
è
__THROW
 
__wur
;

309 #ifdef 
__USE_GNU


312 
FILE
 *
	$fÝcook
 (*
__»¡riù
 
__magic_cook
,

313 cÚ¡ *
__»¡riù
 
__modes
,

314 
_IO_cook_io_funùiÚs_t
 
__io_funcs
è
__THROW
 
__wur
;

317 #ifdeà
__USE_XOPEN2K8


319 
FILE
 *
	$fmemÝ
 (*
__s
, 
size_t
 
__Ën
, cÚ¡ *
__modes
)

320 
__THROW
 
__wur
;

325 
FILE
 *
	$Ý_mem¡»am
 (**
__buæoc
, 
size_t
 *
__sizoc
è
__THROW
 
__wur
;

329 
__BEGIN_NAMESPACE_STD


332 
	$£tbuf
 (
FILE
 *
__»¡riù
 
__¡»am
, *__»¡riù 
__buf
è
__THROW
;

336 
	$£tvbuf
 (
FILE
 *
__»¡riù
 
__¡»am
, *__»¡riù 
__buf
,

337 
__modes
, 
size_t
 
__n
è
__THROW
;

338 
__END_NAMESPACE_STD


340 #ifdef 
__USE_BSD


343 
	$£tbufãr
 (
FILE
 *
__»¡riù
 
__¡»am
, *__»¡riù 
__buf
,

344 
size_t
 
__size
è
__THROW
;

347 
	$£ebuf
 (
FILE
 *
__¡»am
è
__THROW
;

351 
__BEGIN_NAMESPACE_STD


356 
	`årtf
 (
FILE
 *
__»¡riù
 
__¡»am
,

357 cÚ¡ *
__»¡riù
 
__fÜm©
, ...);

362 
	`´tf
 (cÚ¡ *
__»¡riù
 
__fÜm©
, ...);

364 
	$¥rtf
 (*
__»¡riù
 
__s
,

365 cÚ¡ *
__»¡riù
 
__fÜm©
, ...è
__THROWNL
;

371 
	`vårtf
 (
FILE
 *
__»¡riù
 
__s
, cÚ¡ *__»¡riù 
__fÜm©
,

372 
_G_va_li¡
 
__¬g
);

377 
	`v´tf
 (cÚ¡ *
__»¡riù
 
__fÜm©
, 
_G_va_li¡
 
__¬g
);

379 
	$v¥rtf
 (*
__»¡riù
 
__s
, cÚ¡ *__»¡riù 
__fÜm©
,

380 
_G_va_li¡
 
__¬g
è
__THROWNL
;

381 
__END_NAMESPACE_STD


383 #ià
defed
 
__USE_BSD
 || defed 
__USE_ISOC99
 || defed 
__USE_UNIX98


384 
__BEGIN_NAMESPACE_C99


386 
	$¢´tf
 (*
__»¡riù
 
__s
, 
size_t
 
__maxËn
,

387 cÚ¡ *
__»¡riù
 
__fÜm©
, ...)

388 
__THROWNL
 
	`__©ibu__
 ((
	`__fÜm©__
 (
__´tf__
, 3, 4)));

390 
	$v¢´tf
 (*
__»¡riù
 
__s
, 
size_t
 
__maxËn
,

391 cÚ¡ *
__»¡riù
 
__fÜm©
, 
_G_va_li¡
 
__¬g
)

392 
__THROWNL
 
	`__©ibu__
 ((
	`__fÜm©__
 (
__´tf__
, 3, 0)));

393 
__END_NAMESPACE_C99


396 #ifdeà
__USE_GNU


399 
	$va¥rtf
 (**
__»¡riù
 
__±r
, cÚ¡ *__»¡riù 
__f
,

400 
_G_va_li¡
 
__¬g
)

401 
__THROWNL
 
	`__©ibu__
 ((
	$__fÜm©__
 (
__´tf__
, 2, 0))è
__wur
;

402 
	$__a¥rtf
 (**
__»¡riù
 
__±r
,

403 cÚ¡ *
__»¡riù
 
__fmt
, ...)

404 
__THROWNL
 
	`__©ibu__
 ((
	$__fÜm©__
 (
__´tf__
, 2, 3))è
__wur
;

405 
	$a¥rtf
 (**
__»¡riù
 
__±r
,

406 cÚ¡ *
__»¡riù
 
__fmt
, ...)

407 
__THROWNL
 
	`__©ibu__
 ((
	$__fÜm©__
 (
__´tf__
, 2, 3))è
__wur
;

410 #ifdeà
__USE_XOPEN2K8


412 
	$vd´tf
 (
__fd
, cÚ¡ *
__»¡riù
 
__fmt
,

413 
_G_va_li¡
 
__¬g
)

414 
	`__©ibu__
 ((
	`__fÜm©__
 (
__´tf__
, 2, 0)));

415 
	$d´tf
 (
__fd
, cÚ¡ *
__»¡riù
 
__fmt
, ...)

416 
	`__©ibu__
 ((
	`__fÜm©__
 (
__´tf__
, 2, 3)));

420 
__BEGIN_NAMESPACE_STD


425 
	$fsÿnf
 (
FILE
 *
__»¡riù
 
__¡»am
,

426 cÚ¡ *
__»¡riù
 
__fÜm©
, ...è
__wur
;

431 
	$sÿnf
 (cÚ¡ *
__»¡riù
 
__fÜm©
, ...è
__wur
;

433 
	$ssÿnf
 (cÚ¡ *
__»¡riù
 
__s
,

434 cÚ¡ *
__»¡riù
 
__fÜm©
, ...è
__THROW
;

436 #ià
defed
 
__USE_ISOC99
 && !defed 
__USE_GNU
 \

437 && (!
defed
 
__LDBL_COMPAT
 || !defed 
__REDIRECT
) \

438 && (
defed
 
__STRICT_ANSI__
 || defed 
__USE_XOPEN2K
)

439 #ifdeà
__REDIRECT


443 
	`__REDIRECT
 (
fsÿnf
, (
FILE
 *
__»¡riù
 
__¡»am
,

444 cÚ¡ *
__»¡riù
 
__fÜm©
, ...),

445 
__isoc99_fsÿnf
è
__wur
;

446 
	`__REDIRECT
 (
sÿnf
, (cÚ¡ *
__»¡riù
 
__fÜm©
, ...),

447 
__isoc99_sÿnf
è
__wur
;

448 
	`__REDIRECT_NTH
 (
ssÿnf
, (cÚ¡ *
__»¡riù
 
__s
,

449 cÚ¡ *
__»¡riù
 
__fÜm©
, ...),

450 
__isoc99_ssÿnf
);

452 
	$__isoc99_fsÿnf
 (
FILE
 *
__»¡riù
 
__¡»am
,

453 cÚ¡ *
__»¡riù
 
__fÜm©
, ...è
__wur
;

454 
	$__isoc99_sÿnf
 (cÚ¡ *
__»¡riù
 
__fÜm©
, ...è
__wur
;

455 
	$__isoc99_ssÿnf
 (cÚ¡ *
__»¡riù
 
__s
,

456 cÚ¡ *
__»¡riù
 
__fÜm©
, ...è
__THROW
;

457 
	#fsÿnf
 
__isoc99_fsÿnf


	)

458 
	#sÿnf
 
__isoc99_sÿnf


	)

459 
	#ssÿnf
 
__isoc99_ssÿnf


	)

463 
__END_NAMESPACE_STD


465 #ifdef 
__USE_ISOC99


466 
__BEGIN_NAMESPACE_C99


471 
	$vfsÿnf
 (
FILE
 *
__»¡riù
 
__s
, cÚ¡ *__»¡riù 
__fÜm©
,

472 
_G_va_li¡
 
__¬g
)

473 
	`__©ibu__
 ((
	$__fÜm©__
 (
__sÿnf__
, 2, 0))è
__wur
;

479 
	$vsÿnf
 (cÚ¡ *
__»¡riù
 
__fÜm©
, 
_G_va_li¡
 
__¬g
)

480 
	`__©ibu__
 ((
	$__fÜm©__
 (
__sÿnf__
, 1, 0))è
__wur
;

483 
	$vssÿnf
 (cÚ¡ *
__»¡riù
 
__s
,

484 cÚ¡ *
__»¡riù
 
__fÜm©
, 
_G_va_li¡
 
__¬g
)

485 
__THROW
 
	`__©ibu__
 ((
	`__fÜm©__
 (
__sÿnf__
, 2, 0)));

487 #ià!
defed
 
__USE_GNU
 \

488 && (!
defed
 
__LDBL_COMPAT
 || !defed 
__REDIRECT
) \

489 && (
defed
 
__STRICT_ANSI__
 || defed 
__USE_XOPEN2K
)

490 #ifdeà
__REDIRECT


494 
	`__REDIRECT
 (
vfsÿnf
,

495 (
FILE
 *
__»¡riù
 
__s
,

496 cÚ¡ *
__»¡riù
 
__fÜm©
, 
_G_va_li¡
 
__¬g
),

497 
__isoc99_vfsÿnf
)

498 
	`__©ibu__
 ((
	$__fÜm©__
 (
__sÿnf__
, 2, 0))è
__wur
;

499 
	`__REDIRECT
 (
vsÿnf
, (cÚ¡ *
__»¡riù
 
__fÜm©
,

500 
_G_va_li¡
 
__¬g
), 
__isoc99_vsÿnf
)

501 
	`__©ibu__
 ((
	$__fÜm©__
 (
__sÿnf__
, 1, 0))è
__wur
;

502 
	`__REDIRECT_NTH
 (
vssÿnf
,

503 (cÚ¡ *
__»¡riù
 
__s
,

504 cÚ¡ *
__»¡riù
 
__fÜm©
,

505 
_G_va_li¡
 
__¬g
), 
__isoc99_vssÿnf
)

506 
	`__©ibu__
 ((
	`__fÜm©__
 (
__sÿnf__
, 2, 0)));

508 
	$__isoc99_vfsÿnf
 (
FILE
 *
__»¡riù
 
__s
,

509 cÚ¡ *
__»¡riù
 
__fÜm©
,

510 
_G_va_li¡
 
__¬g
è
__wur
;

511 
	$__isoc99_vsÿnf
 (cÚ¡ *
__»¡riù
 
__fÜm©
,

512 
_G_va_li¡
 
__¬g
è
__wur
;

513 
	$__isoc99_vssÿnf
 (cÚ¡ *
__»¡riù
 
__s
,

514 cÚ¡ *
__»¡riù
 
__fÜm©
,

515 
_G_va_li¡
 
__¬g
è
__THROW
;

516 
	#vfsÿnf
 
__isoc99_vfsÿnf


	)

517 
	#vsÿnf
 
__isoc99_vsÿnf


	)

518 
	#vssÿnf
 
__isoc99_vssÿnf


	)

522 
__END_NAMESPACE_C99


526 
__BEGIN_NAMESPACE_STD


531 
	`fgc
 (
FILE
 *
__¡»am
);

532 
	`gc
 (
FILE
 *
__¡»am
);

538 
	`gch¬
 ();

539 
__END_NAMESPACE_STD


543 
	#gc
(
_å
è
	`_IO_gc
 (_å)

	)

545 #ià
defed
 
__USE_POSIX
 || defed 
__USE_MISC


550 
	`gc_uÆocked
 (
FILE
 *
__¡»am
);

551 
	`gch¬_uÆocked
 ();

554 #ifdeà
__USE_MISC


561 
	`fgc_uÆocked
 (
FILE
 *
__¡»am
);

565 
__BEGIN_NAMESPACE_STD


573 
	`åutc
 (
__c
, 
FILE
 *
__¡»am
);

574 
	`putc
 (
__c
, 
FILE
 *
__¡»am
);

580 
	`putch¬
 (
__c
);

581 
__END_NAMESPACE_STD


585 
	#putc
(
_ch
, 
_å
è
	`_IO_putc
 (_ch, _å)

	)

587 #ifdeà
__USE_MISC


594 
	`åutc_uÆocked
 (
__c
, 
FILE
 *
__¡»am
);

597 #ià
defed
 
__USE_POSIX
 || defed 
__USE_MISC


602 
	`putc_uÆocked
 (
__c
, 
FILE
 *
__¡»am
);

603 
	`putch¬_uÆocked
 (
__c
);

607 #ià
defed
 
__USE_SVID
 || defed 
__USE_MISC
 \

608 || (
defed
 
__USE_XOPEN
 && !defed 
__USE_XOPEN2K
)

610 
	`gw
 (
FILE
 *
__¡»am
);

613 
	`putw
 (
__w
, 
FILE
 *
__¡»am
);

617 
__BEGIN_NAMESPACE_STD


622 *
	$fgs
 (*
__»¡riù
 
__s
, 
__n
, 
FILE
 *__»¡riù 
__¡»am
)

623 
__wur
;

625 #ià!
defed
 
__USE_ISOC11
 \

626 || (
defed
 
__ýlu¥lus
 && __cplusplus <= 201103L)

638 *
	$gs
 (*
__s
è
__wur
 
__©ibu_d»ÿd__
;

640 
__END_NAMESPACE_STD


642 #ifdeà
__USE_GNU


649 *
	$fgs_uÆocked
 (*
__»¡riù
 
__s
, 
__n
,

650 
FILE
 *
__»¡riù
 
__¡»am
è
__wur
;

654 #ifdef 
__USE_XOPEN2K8


665 
_IO_ssize_t
 
	$__gdim
 (**
__»¡riù
 
__l
,

666 
size_t
 *
__»¡riù
 
__n
, 
__dim
,

667 
FILE
 *
__»¡riù
 
__¡»am
è
__wur
;

668 
_IO_ssize_t
 
	$gdim
 (**
__»¡riù
 
__l
,

669 
size_t
 *
__»¡riù
 
__n
, 
__dim
,

670 
FILE
 *
__»¡riù
 
__¡»am
è
__wur
;

678 
_IO_ssize_t
 
	$gle
 (**
__»¡riù
 
__l
,

679 
size_t
 *
__»¡riù
 
__n
,

680 
FILE
 *
__»¡riù
 
__¡»am
è
__wur
;

684 
__BEGIN_NAMESPACE_STD


689 
	`åuts
 (cÚ¡ *
__»¡riù
 
__s
, 
FILE
 *__»¡riù 
__¡»am
);

695 
	`puts
 (cÚ¡ *
__s
);

702 
	`ungc
 (
__c
, 
FILE
 *
__¡»am
);

709 
size_t
 
	$äd
 (*
__»¡riù
 
__±r
, 
size_t
 
__size
,

710 
size_t
 
__n
, 
FILE
 *
__»¡riù
 
__¡»am
è
__wur
;

715 
size_t
 
	`fwre
 (cÚ¡ *
__»¡riù
 
__±r
, size_
__size
,

716 
size_t
 
__n
, 
FILE
 *
__»¡riù
 
__s
);

717 
__END_NAMESPACE_STD


719 #ifdeà
__USE_GNU


726 
	`åuts_uÆocked
 (cÚ¡ *
__»¡riù
 
__s
,

727 
FILE
 *
__»¡riù
 
__¡»am
);

730 #ifdeà
__USE_MISC


737 
size_t
 
	$äd_uÆocked
 (*
__»¡riù
 
__±r
, 
size_t
 
__size
,

738 
size_t
 
__n
, 
FILE
 *
__»¡riù
 
__¡»am
è
__wur
;

739 
size_t
 
	`fwre_uÆocked
 (cÚ¡ *
__»¡riù
 
__±r
, size_
__size
,

740 
size_t
 
__n
, 
FILE
 *
__»¡riù
 
__¡»am
);

744 
__BEGIN_NAMESPACE_STD


749 
	`f£ek
 (
FILE
 *
__¡»am
, 
__off
, 
__whû
);

754 
	$ál
 (
FILE
 *
__¡»am
è
__wur
;

759 
	`»wd
 (
FILE
 *
__¡»am
);

760 
__END_NAMESPACE_STD


767 #ià
defed
 
__USE_LARGEFILE
 || defed 
__USE_XOPEN2K


768 #iâdeà
__USE_FILE_OFFSET64


773 
	`f£eko
 (
FILE
 *
__¡»am
, 
__off_t
 
__off
, 
__whû
);

778 
__off_t
 
	$álo
 (
FILE
 *
__¡»am
è
__wur
;

780 #ifdeà
__REDIRECT


781 
	`__REDIRECT
 (
f£eko
,

782 (
FILE
 *
__¡»am
, 
__off64_t
 
__off
, 
__whû
),

783 
f£eko64
);

784 
__off64_t
 
	`__REDIRECT
 (
álo
, (
FILE
 *
__¡»am
), 
álo64
);

786 
	#f£eko
 
f£eko64


	)

787 
	#álo
 
álo64


	)

792 
__BEGIN_NAMESPACE_STD


793 #iâdeà
__USE_FILE_OFFSET64


798 
	`fgpos
 (
FILE
 *
__»¡riù
 
__¡»am
, 
åos_t
 *__»¡riù 
__pos
);

803 
	`f£os
 (
FILE
 *
__¡»am
, cÚ¡ 
åos_t
 *
__pos
);

805 #ifdeà
__REDIRECT


806 
	`__REDIRECT
 (
fgpos
, (
FILE
 *
__»¡riù
 
__¡»am
,

807 
åos_t
 *
__»¡riù
 
__pos
), 
fgpos64
);

808 
	`__REDIRECT
 (
f£os
,

809 (
FILE
 *
__¡»am
, cÚ¡ 
åos_t
 *
__pos
), 
f£os64
);

811 
	#fgpos
 
fgpos64


	)

812 
	#f£os
 
f£os64


	)

815 
__END_NAMESPACE_STD


817 #ifdeà
__USE_LARGEFILE64


818 
	`f£eko64
 (
FILE
 *
__¡»am
, 
__off64_t
 
__off
, 
__whû
);

819 
__off64_t
 
	$álo64
 (
FILE
 *
__¡»am
è
__wur
;

820 
	`fgpos64
 (
FILE
 *
__»¡riù
 
__¡»am
, 
åos64_t
 *__»¡riù 
__pos
);

821 
	`f£os64
 (
FILE
 *
__¡»am
, cÚ¡ 
åos64_t
 *
__pos
);

824 
__BEGIN_NAMESPACE_STD


826 
	$þ»¼
 (
FILE
 *
__¡»am
è
__THROW
;

828 
	$ãof
 (
FILE
 *
__¡»am
è
__THROW
 
__wur
;

830 
	$ã¼Ü
 (
FILE
 *
__¡»am
è
__THROW
 
__wur
;

831 
__END_NAMESPACE_STD


833 #ifdeà
__USE_MISC


835 
	$þ»¼_uÆocked
 (
FILE
 *
__¡»am
è
__THROW
;

836 
	$ãof_uÆocked
 (
FILE
 *
__¡»am
è
__THROW
 
__wur
;

837 
	$ã¼Ü_uÆocked
 (
FILE
 *
__¡»am
è
__THROW
 
__wur
;

841 
__BEGIN_NAMESPACE_STD


846 
	`³¼Ü
 (cÚ¡ *
__s
);

847 
__END_NAMESPACE_STD


853 
	~<bs/sys_¾i¡.h
>

856 #ifdef 
__USE_POSIX


858 
	$fo
 (
FILE
 *
__¡»am
è
__THROW
 
__wur
;

861 #ifdeà
__USE_MISC


863 
	$fo_uÆocked
 (
FILE
 *
__¡»am
è
__THROW
 
__wur
;

867 #ià(
defed
 
__USE_POSIX2
 || defed 
__USE_SVID
 || defed 
__USE_BSD
 || \

868 
defed
 
__USE_MISC
)

873 
FILE
 *
	$pÝ
 (cÚ¡ *
__commªd
, cÚ¡ *
__modes
è
__wur
;

879 
	`pþo£
 (
FILE
 *
__¡»am
);

883 #ifdef 
__USE_POSIX


885 *
	$ùmid
 (*
__s
è
__THROW
;

889 #ifdeà
__USE_XOPEN


891 *
	`cu£rid
 (*
__s
);

895 #ifdef 
__USE_GNU


896 
ob¡ack
;

899 
	$ob¡ack_´tf
 (
ob¡ack
 *
__»¡riù
 
__ob¡ack
,

900 cÚ¡ *
__»¡riù
 
__fÜm©
, ...)

901 
__THROWNL
 
	`__©ibu__
 ((
	`__fÜm©__
 (
__´tf__
, 2, 3)));

902 
	$ob¡ack_v´tf
 (
ob¡ack
 *
__»¡riù
 
__ob¡ack
,

903 cÚ¡ *
__»¡riù
 
__fÜm©
,

904 
_G_va_li¡
 
__¬gs
)

905 
__THROWNL
 
	`__©ibu__
 ((
	`__fÜm©__
 (
__´tf__
, 2, 0)));

909 #ià
defed
 
__USE_POSIX
 || defed 
__USE_MISC


913 
	$æockfe
 (
FILE
 *
__¡»am
è
__THROW
;

917 
	$árylockfe
 (
FILE
 *
__¡»am
è
__THROW
 
__wur
;

920 
	$fuÆockfe
 (
FILE
 *
__¡»am
è
__THROW
;

923 #ià
defed
 
__USE_XOPEN
 && !defed 
__USE_XOPEN2K
 && !defed 
__USE_GNU


927 
	#__Ãed_gÝt


	)

928 
	~<gÝt.h
>

933 #ifdeà
__USE_EXTERN_INLINES


934 
	~<bs/¡dio.h
>

936 #ià
__USE_FORTIFY_LEVEL
 > 0 && 
defed
 
__exº_®ways_le


937 
	~<bs/¡dio2.h
>

939 #ifdeà
__LDBL_COMPAT


940 
	~<bs/¡dio-ldbl.h
>

943 
__END_DECLS


	@/usr/include/stdlib.h

22 #iâdef 
_STDLIB_H


24 
	~<ã©u»s.h
>

27 
	#__Ãed_size_t


	)

28 #iâdeà
__Ãed_m®loc_ªd_ÿÎoc


29 
	#__Ãed_wch¬_t


	)

30 
	#__Ãed_NULL


	)

32 
	~<¡ddef.h
>

34 
	g__BEGIN_DECLS


36 #iâdeà
__Ãed_m®loc_ªd_ÿÎoc


37 
	#_STDLIB_H
 1

	)

39 #ià(
defed
 
__USE_XOPEN
 || defed 
__USE_XOPEN2K8
è&& !defed 
_SYS_WAIT_H


41 
	~<bs/waæags.h
>

42 
	~<bs/wa¡©us.h
>

44 #ifdeà
__USE_BSD


49 #ià
defed
 
__GNUC__
 && !defed 
__ýlu¥lus


50 
	#__WAIT_INT
(
¡©us
) \

51 (
	`__exnsiÚ__
 (((uniÚ { 
	`__ty³of
(
¡©us
è
__
; 
__i
; }) \

52 { .
__
 = (
¡©us
è}).
__i
))

	)

54 
	#__WAIT_INT
(
¡©us
è(*(*è&(¡©us))

	)

62 #ià!
defed
 
__GNUC__
 || __GNUC__ < 2 || defed 
__ýlu¥lus


63 
	#__WAIT_STATUS
 *

	)

64 
	#__WAIT_STATUS_DEFN
 *

	)

69 
wa
 *
	m__u±r
;

70 *
	m__
;

71 } 
	t__WAIT_STATUS
 
	t__©ibu__
 ((
	t__ª¥¬t_uniÚ__
));

72 
	#__WAIT_STATUS_DEFN
 *

	)

77 
	#__WAIT_INT
(
¡©us
è(¡©us)

	)

78 
	#__WAIT_STATUS
 *

	)

79 
	#__WAIT_STATUS_DEFN
 *

	)

84 
	#WEXITSTATUS
(
¡©us
è
	`__WEXITSTATUS
 (
	`__WAIT_INT
 (¡©us))

	)

85 
	#WTERMSIG
(
¡©us
è
	`__WTERMSIG
 (
	`__WAIT_INT
 (¡©us))

	)

86 
	#WSTOPSIG
(
¡©us
è
	`__WSTOPSIG
 (
	`__WAIT_INT
 (¡©us))

	)

87 
	#WIFEXITED
(
¡©us
è
	`__WIFEXITED
 (
	`__WAIT_INT
 (¡©us))

	)

88 
	#WIFSIGNALED
(
¡©us
è
	`__WIFSIGNALED
 (
	`__WAIT_INT
 (¡©us))

	)

89 
	#WIFSTOPPED
(
¡©us
è
	`__WIFSTOPPED
 (
	`__WAIT_INT
 (¡©us))

	)

90 #ifdeà
__WIFCONTINUED


91 
	#WIFCONTINUED
(
¡©us
è
	`__WIFCONTINUED
 (
	`__WAIT_INT
 (¡©us))

	)

95 
__BEGIN_NAMESPACE_STD


99 
	mquÙ
;

100 
	m»m
;

101 } 
	tdiv_t
;

104 #iâdeà
__ldiv_t_defed


107 
	mquÙ
;

108 
	m»m
;

109 } 
	tldiv_t
;

110 
	#__ldiv_t_defed
 1

	)

112 
	g__END_NAMESPACE_STD


114 #ià
defed
 
__USE_ISOC99
 && !defed 
__Îdiv_t_defed


115 
__BEGIN_NAMESPACE_C99


117 
__exnsiÚ__
 struct

119 
	mquÙ
;

120 
	m»m
;

121 } 
	tÎdiv_t
;

122 
	#__Îdiv_t_defed
 1

	)

123 
	g__END_NAMESPACE_C99


128 
	#RAND_MAX
 2147483647

	)

133 
	#EXIT_FAILURE
 1

	)

134 
	#EXIT_SUCCESS
 0

	)

138 
	#MB_CUR_MAX
 (
	`__ùy³_g_mb_cur_max
 ())

	)

139 
size_t
 
	$__ùy³_g_mb_cur_max
 (è
__THROW
 
__wur
;

142 
__BEGIN_NAMESPACE_STD


144 
	$©of
 (cÚ¡ *
__Å
)

145 
__THROW
 
__©ibu_pu»__
 
	`__nÚnuÎ
 ((1)è
__wur
;

147 
	$©oi
 (cÚ¡ *
__Å
)

148 
__THROW
 
__©ibu_pu»__
 
	`__nÚnuÎ
 ((1)è
__wur
;

150 
	$©Þ
 (cÚ¡ *
__Å
)

151 
__THROW
 
__©ibu_pu»__
 
	`__nÚnuÎ
 ((1)è
__wur
;

152 
__END_NAMESPACE_STD


154 #ià
defed
 
__USE_ISOC99
 || defed 
__USE_MISC


155 
__BEGIN_NAMESPACE_C99


157 
__exnsiÚ__
 
	$©Þl
 (cÚ¡ *
__Å
)

158 
__THROW
 
__©ibu_pu»__
 
	`__nÚnuÎ
 ((1)è
__wur
;

159 
__END_NAMESPACE_C99


162 
__BEGIN_NAMESPACE_STD


164 
	$¡¹od
 (cÚ¡ *
__»¡riù
 
__Å
,

165 **
__»¡riù
 
__d±r
)

166 
__THROW
 
	`__nÚnuÎ
 ((1));

167 
__END_NAMESPACE_STD


169 #ifdef 
__USE_ISOC99


170 
__BEGIN_NAMESPACE_C99


172 
	$¡¹of
 (cÚ¡ *
__»¡riù
 
__Å
,

173 **
__»¡riù
 
__d±r
è
__THROW
 
	`__nÚnuÎ
 ((1));

175 
	$¡¹Þd
 (cÚ¡ *
__»¡riù
 
__Å
,

176 **
__»¡riù
 
__d±r
)

177 
__THROW
 
	`__nÚnuÎ
 ((1));

178 
__END_NAMESPACE_C99


181 
__BEGIN_NAMESPACE_STD


183 
	$¡¹Þ
 (cÚ¡ *
__»¡riù
 
__Å
,

184 **
__»¡riù
 
__d±r
, 
__ba£
)

185 
__THROW
 
	`__nÚnuÎ
 ((1));

187 
	$¡¹oul
 (cÚ¡ *
__»¡riù
 
__Å
,

188 **
__»¡riù
 
__d±r
, 
__ba£
)

189 
__THROW
 
	`__nÚnuÎ
 ((1));

190 
__END_NAMESPACE_STD


192 #ifdeà
__USE_BSD


194 
__exnsiÚ__


195 
	$¡¹oq
 (cÚ¡ *
__»¡riù
 
__Å
,

196 **
__»¡riù
 
__d±r
, 
__ba£
)

197 
__THROW
 
	`__nÚnuÎ
 ((1));

199 
__exnsiÚ__


200 
	$¡¹ouq
 (cÚ¡ *
__»¡riù
 
__Å
,

201 **
__»¡riù
 
__d±r
, 
__ba£
)

202 
__THROW
 
	`__nÚnuÎ
 ((1));

205 #ià
defed
 
__USE_ISOC99
 || defed 
__USE_MISC


206 
__BEGIN_NAMESPACE_C99


208 
__exnsiÚ__


209 
	$¡¹Þl
 (cÚ¡ *
__»¡riù
 
__Å
,

210 **
__»¡riù
 
__d±r
, 
__ba£
)

211 
__THROW
 
	`__nÚnuÎ
 ((1));

213 
__exnsiÚ__


214 
	$¡¹ouÎ
 (cÚ¡ *
__»¡riù
 
__Å
,

215 **
__»¡riù
 
__d±r
, 
__ba£
)

216 
__THROW
 
	`__nÚnuÎ
 ((1));

217 
__END_NAMESPACE_C99


221 #ifdeà
__USE_GNU


235 
	~<xloÿË.h
>

239 
	$¡¹Þ_l
 (cÚ¡ *
__»¡riù
 
__Å
,

240 **
__»¡riù
 
__d±r
, 
__ba£
,

241 
__loÿË_t
 
__loc
è
__THROW
 
	`__nÚnuÎ
 ((1, 4));

243 
	$¡¹oul_l
 (cÚ¡ *
__»¡riù
 
__Å
,

244 **
__»¡riù
 
__d±r
,

245 
__ba£
, 
__loÿË_t
 
__loc
)

246 
__THROW
 
	`__nÚnuÎ
 ((1, 4));

248 
__exnsiÚ__


249 
	$¡¹Þl_l
 (cÚ¡ *
__»¡riù
 
__Å
,

250 **
__»¡riù
 
__d±r
, 
__ba£
,

251 
__loÿË_t
 
__loc
)

252 
__THROW
 
	`__nÚnuÎ
 ((1, 4));

254 
__exnsiÚ__


255 
	$¡¹ouÎ_l
 (cÚ¡ *
__»¡riù
 
__Å
,

256 **
__»¡riù
 
__d±r
,

257 
__ba£
, 
__loÿË_t
 
__loc
)

258 
__THROW
 
	`__nÚnuÎ
 ((1, 4));

260 
	$¡¹od_l
 (cÚ¡ *
__»¡riù
 
__Å
,

261 **
__»¡riù
 
__d±r
, 
__loÿË_t
 
__loc
)

262 
__THROW
 
	`__nÚnuÎ
 ((1, 3));

264 
	$¡¹of_l
 (cÚ¡ *
__»¡riù
 
__Å
,

265 **
__»¡riù
 
__d±r
, 
__loÿË_t
 
__loc
)

266 
__THROW
 
	`__nÚnuÎ
 ((1, 3));

268 
	$¡¹Þd_l
 (cÚ¡ *
__»¡riù
 
__Å
,

269 **
__»¡riù
 
__d±r
,

270 
__loÿË_t
 
__loc
)

271 
__THROW
 
	`__nÚnuÎ
 ((1, 3));

275 #ifdeà
__USE_EXTERN_INLINES


276 
__BEGIN_NAMESPACE_STD


277 
__exº_le
 

278 
	`__NTH
 (
	$©oi
 (cÚ¡ *
__Å
))

280  (è
	`¡¹Þ
 (
__Å
, (**è
NULL
, 10);

281 
	}
}

282 
__exº_le
 

283 
__NTH
 (
	$©Þ
 (cÚ¡ *
__Å
))

285  
	`¡¹Þ
 (
__Å
, (**è
NULL
, 10);

286 
	}
}

287 
	g__END_NAMESPACE_STD


289 #ià
defed
 
__USE_MISC
 || defed 
__USE_ISOC99


290 
__BEGIN_NAMESPACE_C99


291 
__exnsiÚ__
 
__exº_le
 

292 
__NTH
 (
	$©Þl
 (cÚ¡ *
__Å
))

294  
	`¡¹Þl
 (
__Å
, (**è
NULL
, 10);

295 
	}
}

296 
	g__END_NAMESPACE_C99


301 #ià
defed
 
__USE_SVID
 || defed 
__USE_XOPEN_EXTENDED


305 *
	$l64a
 (
__n
è
__THROW
 
__wur
;

308 
	$a64l
 (cÚ¡ *
__s
)

309 
__THROW
 
__©ibu_pu»__
 
	`__nÚnuÎ
 ((1)è
__wur
;

313 #ià
defed
 
__USE_SVID
 || defed 
__USE_XOPEN_EXTENDED
 || defed 
__USE_BSD


314 
	~<sys/ty³s.h
>

321 
	$¿ndom
 (è
__THROW
;

324 
	$¤ªdom
 (
__£ed
è
__THROW
;

330 *
	$¡©e
 (
__£ed
, *
__¡©ebuf
,

331 
size_t
 
__¡©
è
__THROW
 
	`__nÚnuÎ
 ((2));

335 *
	$£t¡©e
 (*
__¡©ebuf
è
__THROW
 
	`__nÚnuÎ
 ((1));

338 #ifdeà
__USE_MISC


343 
	s¿ndom_d©a


345 
t32_t
 *
å
;

346 
t32_t
 *
½
;

347 
t32_t
 *
¡©e
;

348 
¿nd_ty³
;

349 
¿nd_deg
;

350 
¿nd_£p
;

351 
t32_t
 *
d_±r
;

354 
	$¿ndom_r
 (
¿ndom_d©a
 *
__»¡riù
 
__buf
,

355 
t32_t
 *
__»¡riù
 
__»suÉ
è
__THROW
 
	`__nÚnuÎ
 ((1, 2));

357 
	$¤ªdom_r
 (
__£ed
, 
¿ndom_d©a
 *
__buf
)

358 
__THROW
 
	`__nÚnuÎ
 ((2));

360 
	$¡©e_r
 (
__£ed
, *
__»¡riù
 
__¡©ebuf
,

361 
size_t
 
__¡©
,

362 
¿ndom_d©a
 *
__»¡riù
 
__buf
)

363 
__THROW
 
	`__nÚnuÎ
 ((2, 4));

365 
	$£t¡©e_r
 (*
__»¡riù
 
__¡©ebuf
,

366 
¿ndom_d©a
 *
__»¡riù
 
__buf
)

367 
__THROW
 
	`__nÚnuÎ
 ((1, 2));

372 
__BEGIN_NAMESPACE_STD


374 
	$¿nd
 (è
__THROW
;

376 
	$¤ªd
 (
__£ed
è
__THROW
;

377 
__END_NAMESPACE_STD


379 #ifdeà
__USE_POSIX


381 
	$¿nd_r
 (*
__£ed
è
__THROW
;

385 #ià
defed
 
__USE_SVID
 || defed 
__USE_XOPEN


389 
	$d¿nd48
 (è
__THROW
;

390 
	$ªd48
 (
__xsubi
[3]è
__THROW
 
	`__nÚnuÎ
 ((1));

393 
	$Ìªd48
 (è
__THROW
;

394 
	$Äªd48
 (
__xsubi
[3])

395 
__THROW
 
	`__nÚnuÎ
 ((1));

398 
	$m¿nd48
 (è
__THROW
;

399 
	$j¿nd48
 (
__xsubi
[3])

400 
__THROW
 
	`__nÚnuÎ
 ((1));

403 
	$¤ªd48
 (
__£edv®
è
__THROW
;

404 *
	$£ed48
 (
__£ed16v
[3])

405 
__THROW
 
	`__nÚnuÎ
 ((1));

406 
	$lcÚg48
 (
__·¿m
[7]è
__THROW
 
	`__nÚnuÎ
 ((1));

408 #ifdeà
__USE_MISC


412 
	sd¿nd48_d©a


414 
__x
[3];

415 
__Þd_x
[3];

416 
__c
;

417 
__
;

418 
__exnsiÚ__
 
__a
;

423 
	$d¿nd48_r
 (
d¿nd48_d©a
 *
__»¡riù
 
__bufãr
,

424 *
__»¡riù
 
__»suÉ
è
__THROW
 
	`__nÚnuÎ
 ((1, 2));

425 
	$ªd48_r
 (
__xsubi
[3],

426 
d¿nd48_d©a
 *
__»¡riù
 
__bufãr
,

427 *
__»¡riù
 
__»suÉ
è
__THROW
 
	`__nÚnuÎ
 ((1, 2));

430 
	$Ìªd48_r
 (
d¿nd48_d©a
 *
__»¡riù
 
__bufãr
,

431 *
__»¡riù
 
__»suÉ
)

432 
__THROW
 
	`__nÚnuÎ
 ((1, 2));

433 
	$Äªd48_r
 (
__xsubi
[3],

434 
d¿nd48_d©a
 *
__»¡riù
 
__bufãr
,

435 *
__»¡riù
 
__»suÉ
)

436 
__THROW
 
	`__nÚnuÎ
 ((1, 2));

439 
	$m¿nd48_r
 (
d¿nd48_d©a
 *
__»¡riù
 
__bufãr
,

440 *
__»¡riù
 
__»suÉ
)

441 
__THROW
 
	`__nÚnuÎ
 ((1, 2));

442 
	$j¿nd48_r
 (
__xsubi
[3],

443 
d¿nd48_d©a
 *
__»¡riù
 
__bufãr
,

444 *
__»¡riù
 
__»suÉ
)

445 
__THROW
 
	`__nÚnuÎ
 ((1, 2));

448 
	$¤ªd48_r
 (
__£edv®
, 
d¿nd48_d©a
 *
__bufãr
)

449 
__THROW
 
	`__nÚnuÎ
 ((2));

451 
	$£ed48_r
 (
__£ed16v
[3],

452 
d¿nd48_d©a
 *
__bufãr
è
__THROW
 
	`__nÚnuÎ
 ((1, 2));

454 
	$lcÚg48_r
 (
__·¿m
[7],

455 
d¿nd48_d©a
 *
__bufãr
)

456 
__THROW
 
	`__nÚnuÎ
 ((1, 2));

462 #iâdeà
__m®loc_ªd_ÿÎoc_defed


463 
	#__m®loc_ªd_ÿÎoc_defed


	)

464 
__BEGIN_NAMESPACE_STD


466 *
	$m®loc
 (
size_t
 
__size
è
__THROW
 
__©ibu_m®loc__
 
__wur
;

468 *
	$ÿÎoc
 (
size_t
 
__nmemb
, size_
__size
)

469 
__THROW
 
__©ibu_m®loc__
 
__wur
;

470 
__END_NAMESPACE_STD


473 #iâdeà
__Ãed_m®loc_ªd_ÿÎoc


474 
__BEGIN_NAMESPACE_STD


480 *
	$»®loc
 (*
__±r
, 
size_t
 
__size
)

481 
__THROW
 
__©ibu_w¬n_unu£d_»suÉ__
;

483 
	$ä
 (*
__±r
è
__THROW
;

484 
__END_NAMESPACE_STD


486 #ifdef 
__USE_MISC


488 
	$cä
 (*
__±r
è
__THROW
;

491 #ià
defed
 
__USE_GNU
 || defed 
__USE_BSD
 || defed 
__USE_MISC


492 
	~<®loÿ.h
>

495 #ià(
defed
 
__USE_XOPEN_EXTENDED
 && !defed 
__USE_XOPEN2K
) \

496 || 
defed
 
__USE_BSD


498 *
	$v®loc
 (
size_t
 
__size
è
__THROW
 
__©ibu_m®loc__
 
__wur
;

501 #ifdeà
__USE_XOPEN2K


503 
	$posix_mem®ign
 (**
__mem±r
, 
size_t
 
__®ignmt
, size_
__size
)

504 
__THROW
 
	`__nÚnuÎ
 ((1)è
__wur
;

507 #ifdeà
__USE_ISOC11


509 *
	$®igÃd_®loc
 (
size_t
 
__®ignmt
, size_
__size
)

510 
__THROW
 
__©ibu_m®loc__
 
	`__©ibu_®loc_size__
 ((2)è
__wur
;

513 
__BEGIN_NAMESPACE_STD


515 
	$abÜt
 (è
__THROW
 
	`__©ibu__
 ((
__nÜuº__
));

519 
	`©ex
 ((*
__func
è()è
__THROW
 
	`__nÚnuÎ
 ((1));

521 #ià
defed
 
__USE_ISOC11
 || defed 
__USE_ISOCXX11


523 #ifdeà
__ýlu¥lus


524 "C++" 
	`©_quick_ex
 ((*
__func
) ())

525 
__THROW
 
	`__asm
 ("©_quick_ex"è
	`__nÚnuÎ
 ((1));

527 
	`©_quick_ex
 ((*
__func
è()è
__THROW
 
	`__nÚnuÎ
 ((1));

530 
__END_NAMESPACE_STD


532 #ifdef 
__USE_MISC


535 
	`Ú_ex
 ((*
__func
è(
__¡©us
, *
__¬g
), *__arg)

536 
__THROW
 
	`__nÚnuÎ
 ((1));

539 
__BEGIN_NAMESPACE_STD


543 
	$ex
 (
__¡©us
è
__THROW
 
	`__©ibu__
 ((
__nÜuº__
));

545 #ià
defed
 
__USE_ISOC11
 || defed 
__USE_ISOCXX11


549 
	$quick_ex
 (
__¡©us
è
__THROW
 
	`__©ibu__
 ((
__nÜuº__
));

551 
__END_NAMESPACE_STD


553 #ifdeà
__USE_ISOC99


554 
__BEGIN_NAMESPACE_C99


557 
	$_Ex
 (
__¡©us
è
__THROW
 
	`__©ibu__
 ((
__nÜuº__
));

558 
__END_NAMESPACE_C99


562 
__BEGIN_NAMESPACE_STD


564 *
	$gv
 (cÚ¡ *
__Çme
è
__THROW
 
	`__nÚnuÎ
 ((1)è
__wur
;

565 
__END_NAMESPACE_STD


567 #ifdeà
__USE_GNU


570 *
	$£cu»_gv
 (cÚ¡ *
__Çme
)

571 
__THROW
 
	`__nÚnuÎ
 ((1)è
__wur
;

574 #ià
defed
 
__USE_SVID
 || defed 
__USE_XOPEN


578 
	$punv
 (*
__¡rg
è
__THROW
 
	`__nÚnuÎ
 ((1));

581 #ià
defed
 
__USE_BSD
 || defed 
__USE_XOPEN2K


584 
	$£nv
 (cÚ¡ *
__Çme
, cÚ¡ *
__v®ue
, 
__»¶aû
)

585 
__THROW
 
	`__nÚnuÎ
 ((2));

588 
	$un£nv
 (cÚ¡ *
__Çme
è
__THROW
 
	`__nÚnuÎ
 ((1));

591 #ifdef 
__USE_MISC


595 
	$þ»nv
 (è
__THROW
;

599 #ià
defed
 
__USE_MISC
 \

600 || (
defed
 
__USE_XOPEN_EXTENDED
 && !defed 
__USE_XOPEN2K8
)

606 *
	$mkmp
 (*
__m¶©e
è
__THROW
 
	`__nÚnuÎ
 ((1));

609 #ià
defed
 
__USE_MISC
 || defed 
__USE_XOPEN_EXTENDED
 \

610 || 
defed
 
__USE_XOPEN2K8


619 #iâdeà
__USE_FILE_OFFSET64


620 
	$mk¡emp
 (*
__m¶©e
è
	`__nÚnuÎ
 ((1)è
__wur
;

622 #ifdeà
__REDIRECT


623 
	`__REDIRECT
 (
mk¡emp
, (*
__m¶©e
), 
mk¡emp64
)

624 
	`__nÚnuÎ
 ((1)è
__wur
;

626 
	#mk¡emp
 
mk¡emp64


	)

629 #ifdeà
__USE_LARGEFILE64


630 
	$mk¡emp64
 (*
__m¶©e
è
	`__nÚnuÎ
 ((1)è
__wur
;

634 #ifdeà
__USE_MISC


641 #iâdeà
__USE_FILE_OFFSET64


642 
	$mk¡emps
 (*
__m¶©e
, 
__suffixËn
è
	`__nÚnuÎ
 ((1)è
__wur
;

644 #ifdeà
__REDIRECT


645 
	`__REDIRECT
 (
mk¡emps
, (*
__m¶©e
, 
__suffixËn
),

646 
mk¡emps64
è
	`__nÚnuÎ
 ((1)è
__wur
;

648 
	#mk¡emps
 
mk¡emps64


	)

651 #ifdeà
__USE_LARGEFILE64


652 
	$mk¡emps64
 (*
__m¶©e
, 
__suffixËn
)

653 
	`__nÚnuÎ
 ((1)è
__wur
;

657 #ià
defed
 
__USE_BSD
 || defed 
__USE_XOPEN2K8


663 *
	$mkdmp
 (*
__m¶©e
è
__THROW
 
	`__nÚnuÎ
 ((1)è
__wur
;

666 #ifdeà
__USE_GNU


673 #iâdeà
__USE_FILE_OFFSET64


674 
	$mko¡emp
 (*
__m¶©e
, 
__æags
è
	`__nÚnuÎ
 ((1)è
__wur
;

676 #ifdeà
__REDIRECT


677 
	`__REDIRECT
 (
mko¡emp
, (*
__m¶©e
, 
__æags
), 
mko¡emp64
)

678 
	`__nÚnuÎ
 ((1)è
__wur
;

680 
	#mko¡emp
 
mko¡emp64


	)

683 #ifdeà
__USE_LARGEFILE64


684 
	$mko¡emp64
 (*
__m¶©e
, 
__æags
è
	`__nÚnuÎ
 ((1)è
__wur
;

693 #iâdeà
__USE_FILE_OFFSET64


694 
	$mko¡emps
 (*
__m¶©e
, 
__suffixËn
, 
__æags
)

695 
	`__nÚnuÎ
 ((1)è
__wur
;

697 #ifdeà
__REDIRECT


698 
	`__REDIRECT
 (
mko¡emps
, (*
__m¶©e
, 
__suffixËn
,

699 
__æags
), 
mko¡emps64
)

700 
	`__nÚnuÎ
 ((1)è
__wur
;

702 
	#mko¡emps
 
mko¡emps64


	)

705 #ifdeà
__USE_LARGEFILE64


706 
	$mko¡emps64
 (*
__m¶©e
, 
__suffixËn
, 
__æags
)

707 
	`__nÚnuÎ
 ((1)è
__wur
;

712 
__BEGIN_NAMESPACE_STD


717 
	$sy¡em
 (cÚ¡ *
__commªd
è
__wur
;

718 
__END_NAMESPACE_STD


721 #ifdef 
__USE_GNU


724 *
	$ÿnÚiÿlize_fe_Çme
 (cÚ¡ *
__Çme
)

725 
__THROW
 
	`__nÚnuÎ
 ((1)è
__wur
;

728 #ià
defed
 
__USE_BSD
 || defed 
__USE_XOPEN_EXTENDED


734 *
	$»®·th
 (cÚ¡ *
__»¡riù
 
__Çme
,

735 *
__»¡riù
 
__»sÞved
è
__THROW
 
__wur
;

740 #iâdeà
__COMPAR_FN_T


741 
	#__COMPAR_FN_T


	)

742 (*
	t__com·r_â_t
) (const *, const *);

744 #ifdef 
__USE_GNU


745 
__com·r_â_t
 
	tcom·risÚ_â_t
;

748 #ifdeà
__USE_GNU


749 (*
	t__com·r_d_â_t
) (const *, const *, *);

752 
__BEGIN_NAMESPACE_STD


755 *
	$b£¬ch
 (cÚ¡ *
__key
, cÚ¡ *
__ba£
,

756 
size_t
 
__nmemb
, size_
__size
, 
__com·r_â_t
 
__com·r
)

757 
	`__nÚnuÎ
 ((1, 2, 5)è
__wur
;

759 #ifdeà
__USE_EXTERN_INLINES


760 
	~<bs/¡dlib-b£¬ch.h
>

765 
	$qsÜt
 (*
__ba£
, 
size_t
 
__nmemb
, size_
__size
,

766 
__com·r_â_t
 
__com·r
è
	`__nÚnuÎ
 ((1, 4));

767 #ifdeà
__USE_GNU


768 
	$qsÜt_r
 (*
__ba£
, 
size_t
 
__nmemb
, size_
__size
,

769 
__com·r_d_â_t
 
__com·r
, *
__¬g
)

770 
	`__nÚnuÎ
 ((1, 4));

775 
	$abs
 (
__x
è
__THROW
 
	`__©ibu__
 ((
__cÚ¡__
)è
__wur
;

776 
	$Ïbs
 (
__x
è
__THROW
 
	`__©ibu__
 ((
__cÚ¡__
)è
__wur
;

777 
__END_NAMESPACE_STD


779 #ifdeà
__USE_ISOC99


780 
__exnsiÚ__
 
	$Îabs
 (
__x
)

781 
__THROW
 
	`__©ibu__
 ((
__cÚ¡__
)è
__wur
;

785 
__BEGIN_NAMESPACE_STD


789 
div_t
 
	$div
 (
__num
, 
__dom
)

790 
__THROW
 
	`__©ibu__
 ((
__cÚ¡__
)è
__wur
;

791 
ldiv_t
 
	$ldiv
 (
__num
, 
__dom
)

792 
__THROW
 
	`__©ibu__
 ((
__cÚ¡__
)è
__wur
;

793 
__END_NAMESPACE_STD


795 #ifdeà
__USE_ISOC99


796 
__BEGIN_NAMESPACE_C99


797 
__exnsiÚ__
 
Îdiv_t
 
	$Îdiv
 (
__num
,

798 
__dom
)

799 
__THROW
 
	`__©ibu__
 ((
__cÚ¡__
)è
__wur
;

800 
__END_NAMESPACE_C99


804 #ià(
defed
 
__USE_XOPEN_EXTENDED
 && !defed 
__USE_XOPEN2K8
) \

805 || 
defed
 
__USE_SVID


812 *
	$ecvt
 (
__v®ue
, 
__ndig
, *
__»¡riù
 
__deýt
,

813 *
__»¡riù
 
__sign
è
__THROW
 
	`__nÚnuÎ
 ((3, 4)è
__wur
;

818 *
	$fcvt
 (
__v®ue
, 
__ndig
, *
__»¡riù
 
__deýt
,

819 *
__»¡riù
 
__sign
è
__THROW
 
	`__nÚnuÎ
 ((3, 4)è
__wur
;

824 *
	$gcvt
 (
__v®ue
, 
__ndig
, *
__buf
)

825 
__THROW
 
	`__nÚnuÎ
 ((3)è
__wur
;

828 #ifdeà
__USE_MISC


830 *
	$qecvt
 (
__v®ue
, 
__ndig
,

831 *
__»¡riù
 
__deýt
, *__»¡riù 
__sign
)

832 
__THROW
 
	`__nÚnuÎ
 ((3, 4)è
__wur
;

833 *
	$qfcvt
 (
__v®ue
, 
__ndig
,

834 *
__»¡riù
 
__deýt
, *__»¡riù 
__sign
)

835 
__THROW
 
	`__nÚnuÎ
 ((3, 4)è
__wur
;

836 *
	$qgcvt
 (
__v®ue
, 
__ndig
, *
__buf
)

837 
__THROW
 
	`__nÚnuÎ
 ((3)è
__wur
;

842 
	$ecvt_r
 (
__v®ue
, 
__ndig
, *
__»¡riù
 
__deýt
,

843 *
__»¡riù
 
__sign
, *__»¡riù 
__buf
,

844 
size_t
 
__Ën
è
__THROW
 
	`__nÚnuÎ
 ((3, 4, 5));

845 
	$fcvt_r
 (
__v®ue
, 
__ndig
, *
__»¡riù
 
__deýt
,

846 *
__»¡riù
 
__sign
, *__»¡riù 
__buf
,

847 
size_t
 
__Ën
è
__THROW
 
	`__nÚnuÎ
 ((3, 4, 5));

849 
	$qecvt_r
 (
__v®ue
, 
__ndig
,

850 *
__»¡riù
 
__deýt
, *__»¡riù 
__sign
,

851 *
__»¡riù
 
__buf
, 
size_t
 
__Ën
)

852 
__THROW
 
	`__nÚnuÎ
 ((3, 4, 5));

853 
	$qfcvt_r
 (
__v®ue
, 
__ndig
,

854 *
__»¡riù
 
__deýt
, *__»¡riù 
__sign
,

855 *
__»¡riù
 
__buf
, 
size_t
 
__Ën
)

856 
__THROW
 
	`__nÚnuÎ
 ((3, 4, 5));

860 
__BEGIN_NAMESPACE_STD


863 
	$mbËn
 (cÚ¡ *
__s
, 
size_t
 
__n
è
__THROW
;

866 
	$mbtowc
 (
wch¬_t
 *
__»¡riù
 
__pwc
,

867 cÚ¡ *
__»¡riù
 
__s
, 
size_t
 
__n
è
__THROW
;

870 
	$wùomb
 (*
__s
, 
wch¬_t
 
__wch¬
è
__THROW
;

874 
size_t
 
	$mb¡owcs
 (
wch¬_t
 *
__»¡riù
 
__pwcs
,

875 cÚ¡ *
__»¡riù
 
__s
, 
size_t
 
__n
è
__THROW
;

877 
size_t
 
	$wc¡ombs
 (*
__»¡riù
 
__s
,

878 cÚ¡ 
wch¬_t
 *
__»¡riù
 
__pwcs
, 
size_t
 
__n
)

879 
__THROW
;

880 
__END_NAMESPACE_STD


883 #ifdeà
__USE_SVID


888 
	$½m©ch
 (cÚ¡ *
__»¥Ú£
è
__THROW
 
	`__nÚnuÎ
 ((1)è
__wur
;

892 #ià
defed
 
__USE_XOPEN_EXTENDED
 || defed 
__USE_XOPEN2K8


899 
	$gsubÝt
 (**
__»¡riù
 
__ÝtiÚp
,

900 *cÚ¡ *
__»¡riù
 
__toks
,

901 **
__»¡riù
 
__v®u
)

902 
__THROW
 
	`__nÚnuÎ
 ((1, 2, 3)è
__wur
;

906 #ifdeà
__USE_XOPEN


908 
	$£tkey
 (cÚ¡ *
__key
è
__THROW
 
	`__nÚnuÎ
 ((1));

914 #ifdeà
__USE_XOPEN2KXSI


916 
	$posix_Ý±
 (
__oæag
è
__wur
;

919 #ifdeà
__USE_XOPEN


924 
	$g¿Á±
 (
__fd
è
__THROW
;

928 
	$uÆock±
 (
__fd
è
__THROW
;

933 *
	$±¢ame
 (
__fd
è
__THROW
 
__wur
;

936 #ifdeà
__USE_GNU


940 
	$±¢ame_r
 (
__fd
, *
__buf
, 
size_t
 
__buæ
)

941 
__THROW
 
	`__nÚnuÎ
 ((2));

944 
	`g±
 ();

947 #ifdeà
__USE_BSD


951 
	$glßdavg
 (
__lßdavg
[], 
__ÃËm
)

952 
__THROW
 
	`__nÚnuÎ
 ((1));

955 
	~<bs/¡dlib-æßt.h
>

958 #ià
__USE_FORTIFY_LEVEL
 > 0 && 
defed
 
__fÜtify_funùiÚ


959 
	~<bs/¡dlib.h
>

961 #ifdeà
__LDBL_COMPAT


962 
	~<bs/¡dlib-ldbl.h
>

966 #undeà
__Ãed_m®loc_ªd_ÿÎoc


968 
__END_DECLS


	@/usr/include/string.h

22 #iâdef 
_STRING_H


23 
	#_STRING_H
 1

	)

25 
	~<ã©u»s.h
>

27 
	g__BEGIN_DECLS


30 
	#__Ãed_size_t


	)

31 
	#__Ãed_NULL


	)

32 
	~<¡ddef.h
>

39 #ià
defed
 
__ýlu¥lus
 && (__ýlu¥lu >ð199711L || 
__GNUC_PREREQ
 (4, 4))

40 
	#__CORRECT_ISO_CPP_STRING_H_PROTO


	)

44 
__BEGIN_NAMESPACE_STD


46 *
	$memýy
 (*
__»¡riù
 
__de¡
, cÚ¡ *__»¡riù 
__¤c
,

47 
size_t
 
__n
è
__THROW
 
	`__nÚnuÎ
 ((1, 2));

50 *
	$memmove
 (*
__de¡
, cÚ¡ *
__¤c
, 
size_t
 
__n
)

51 
__THROW
 
	`__nÚnuÎ
 ((1, 2));

52 
__END_NAMESPACE_STD


57 #ià
defed
 
__USE_SVID
 || defed 
__USE_BSD
 || defed 
__USE_XOPEN


58 *
	$memcýy
 (*
__»¡riù
 
__de¡
, cÚ¡ *__»¡riù 
__¤c
,

59 
__c
, 
size_t
 
__n
)

60 
__THROW
 
	`__nÚnuÎ
 ((1, 2));

64 
__BEGIN_NAMESPACE_STD


66 *
	$mem£t
 (*
__s
, 
__c
, 
size_t
 
__n
è
__THROW
 
	`__nÚnuÎ
 ((1));

69 
	$memcmp
 (cÚ¡ *
__s1
, cÚ¡ *
__s2
, 
size_t
 
__n
)

70 
__THROW
 
__©ibu_pu»__
 
	`__nÚnuÎ
 ((1, 2));

73 #ifdeà
__CORRECT_ISO_CPP_STRING_H_PROTO


76 *
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

77 
__THROW
 
	`__asm
 ("memchr"è
__©ibu_pu»__
 
	`__nÚnuÎ
 ((1));

78 cÚ¡ *
	`memchr
 (cÚ¡ *
__s
, 
__c
, 
size_t
 
__n
)

79 
__THROW
 
	`__asm
 ("memchr"è
__©ibu_pu»__
 
	`__nÚnuÎ
 ((1));

81 #ifdeà
__OPTIMIZE__


82 
__exº_®ways_le
 *

83 
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
è
__THROW


85  
	`__but_memchr
 (
__s
, 
__c
, 
__n
);

88 
__exº_®ways_le
 const *

89 
	`memchr
 (cÚ¡ *
__s
, 
__c
, 
size_t
 
__n
è
__THROW


91  
	`__but_memchr
 (
__s
, 
__c
, 
__n
);

94 
	}
}

96 *
	$memchr
 (cÚ¡ *
__s
, 
__c
, 
size_t
 
__n
)

97 
__THROW
 
__©ibu_pu»__
 
	`__nÚnuÎ
 ((1));

99 
__END_NAMESPACE_STD


101 #ifdeà
__USE_GNU


104 #ifdeà
__CORRECT_ISO_CPP_STRING_H_PROTO


105 "C++" *
	$¿wmemchr
 (*
__s
, 
__c
)

106 
__THROW
 
	`__asm
 ("¿wmemchr"è
__©ibu_pu»__
 
	`__nÚnuÎ
 ((1));

107 "C++" cÚ¡ *
	$¿wmemchr
 (cÚ¡ *
__s
, 
__c
)

108 
__THROW
 
	`__asm
 ("¿wmemchr"è
__©ibu_pu»__
 
	`__nÚnuÎ
 ((1));

110 *
	$¿wmemchr
 (cÚ¡ *
__s
, 
__c
)

111 
__THROW
 
__©ibu_pu»__
 
	`__nÚnuÎ
 ((1));

115 #ifdeà
__CORRECT_ISO_CPP_STRING_H_PROTO


116 "C++" *
	$memrchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

117 
__THROW
 
	`__asm
 ("memrchr"è
__©ibu_pu»__
 
	`__nÚnuÎ
 ((1));

118 "C++" cÚ¡ *
	$memrchr
 (cÚ¡ *
__s
, 
__c
, 
size_t
 
__n
)

119 
__THROW
 
	`__asm
 ("memrchr"è
__©ibu_pu»__
 
	`__nÚnuÎ
 ((1));

121 *
	$memrchr
 (cÚ¡ *
__s
, 
__c
, 
size_t
 
__n
)

122 
__THROW
 
__©ibu_pu»__
 
	`__nÚnuÎ
 ((1));

127 
__BEGIN_NAMESPACE_STD


129 *
	$¡rýy
 (*
__»¡riù
 
__de¡
, cÚ¡ *__»¡riù 
__¤c
)

130 
__THROW
 
	`__nÚnuÎ
 ((1, 2));

132 *
	$¡ºýy
 (*
__»¡riù
 
__de¡
,

133 cÚ¡ *
__»¡riù
 
__¤c
, 
size_t
 
__n
)

134 
__THROW
 
	`__nÚnuÎ
 ((1, 2));

137 *
	$¡rÿt
 (*
__»¡riù
 
__de¡
, cÚ¡ *__»¡riù 
__¤c
)

138 
__THROW
 
	`__nÚnuÎ
 ((1, 2));

140 *
	$¡ºÿt
 (*
__»¡riù
 
__de¡
, cÚ¡ *__»¡riù 
__¤c
,

141 
size_t
 
__n
è
__THROW
 
	`__nÚnuÎ
 ((1, 2));

144 
	$¡rcmp
 (cÚ¡ *
__s1
, cÚ¡ *
__s2
)

145 
__THROW
 
__©ibu_pu»__
 
	`__nÚnuÎ
 ((1, 2));

147 
	$¡ºcmp
 (cÚ¡ *
__s1
, cÚ¡ *
__s2
, 
size_t
 
__n
)

148 
__THROW
 
__©ibu_pu»__
 
	`__nÚnuÎ
 ((1, 2));

151 
	$¡rcÞl
 (cÚ¡ *
__s1
, cÚ¡ *
__s2
)

152 
__THROW
 
__©ibu_pu»__
 
	`__nÚnuÎ
 ((1, 2));

154 
size_t
 
	$¡rxäm
 (*
__»¡riù
 
__de¡
,

155 cÚ¡ *
__»¡riù
 
__¤c
, 
size_t
 
__n
)

156 
__THROW
 
	`__nÚnuÎ
 ((2));

157 
__END_NAMESPACE_STD


159 #ifdeà
__USE_XOPEN2K8


163 
	~<xloÿË.h
>

166 
	$¡rcÞl_l
 (cÚ¡ *
__s1
, cÚ¡ *
__s2
, 
__loÿË_t
 
__l
)

167 
__THROW
 
__©ibu_pu»__
 
	`__nÚnuÎ
 ((1, 2, 3));

169 
size_t
 
	$¡rxäm_l
 (*
__de¡
, cÚ¡ *
__¤c
, 
size_t
 
__n
,

170 
__loÿË_t
 
__l
è
__THROW
 
	`__nÚnuÎ
 ((2, 4));

173 #ià
defed
 
__USE_SVID
 || defed 
__USE_BSD
 || defed 
__USE_XOPEN_EXTENDED
 \

174 || 
defed
 
__USE_XOPEN2K8


176 *
	$¡rdup
 (cÚ¡ *
__s
)

177 
__THROW
 
__©ibu_m®loc__
 
	`__nÚnuÎ
 ((1));

183 #ià
defed
 
__USE_XOPEN2K8


184 *
	$¡ºdup
 (cÚ¡ *
__¡rg
, 
size_t
 
__n
)

185 
__THROW
 
__©ibu_m®loc__
 
	`__nÚnuÎ
 ((1));

188 #ià
defed
 
__USE_GNU
 && defed 
__GNUC__


190 
	#¡rdu·
(
s
) \

191 (
__exnsiÚ__
 \

193 cÚ¡ *
__Þd
 = (
s
); \

194 
size_t
 
__Ën
 = 
	`¡¾
 (
__Þd
) + 1; \

195 *
__Ãw
 = (*è
	`__but_®loÿ
 (
__Ën
); \

196 (*è
	`memýy
 (
__Ãw
, 
__Þd
, 
__Ën
); \

197 
	}
}))

	)

200 
	#¡ºdu·
(
s
, 
n
) \

201 (
__exnsiÚ__
 \

203 cÚ¡ *
__Þd
 = (
s
); \

204 
size_t
 
__Ën
 = 
	`¡ºËn
 (
__Þd
, (
n
)); \

205 *
__Ãw
 = (*è
	`__but_®loÿ
 (
__Ën
 + 1); \

206 
__Ãw
[
__Ën
] = '\0'; \

207 (*è
	`memýy
 (
__Ãw
, 
__Þd
, 
__Ën
); \

208 }))

	)

211 
	g__BEGIN_NAMESPACE_STD


213 #ifdeà
__CORRECT_ISO_CPP_STRING_H_PROTO


216 *
¡rchr
 (*
__s
, 
__c
)

217 
__THROW
 
__asm
 ("¡rchr"è
__©ibu_pu»__
 
__nÚnuÎ
 ((1));

218 cÚ¡ *
¡rchr
 (cÚ¡ *
__s
, 
__c
)

219 
__THROW
 
__asm
 ("¡rchr"è
__©ibu_pu»__
 
__nÚnuÎ
 ((1));

221 #ifdeà
__OPTIMIZE__


222 
__exº_®ways_le
 *

223 
¡rchr
 (*
__s
, 
__c
è
	g__THROW


225  
__but_¡rchr
 (
__s
, 
__c
);

228 
__exº_®ways_le
 const *

229 
¡rchr
 (cÚ¡ *
__s
, 
__c
è
	g__THROW


231  
__but_¡rchr
 (
__s
, 
__c
);

236 *
	$¡rchr
 (cÚ¡ *
__s
, 
__c
)

237 
__THROW
 
__©ibu_pu»__
 
	`__nÚnuÎ
 ((1));

240 #ifdeà
__CORRECT_ISO_CPP_STRING_H_PROTO


243 *
	`¡¼chr
 (*
__s
, 
__c
)

244 
__THROW
 
	`__asm
 ("¡¼chr"è
__©ibu_pu»__
 
	`__nÚnuÎ
 ((1));

245 cÚ¡ *
	`¡¼chr
 (cÚ¡ *
__s
, 
__c
)

246 
__THROW
 
	`__asm
 ("¡¼chr"è
__©ibu_pu»__
 
	`__nÚnuÎ
 ((1));

248 #ifdeà
__OPTIMIZE__


249 
__exº_®ways_le
 *

250 
	`¡¼chr
 (*
__s
, 
__c
è
__THROW


252  
	`__but_¡¼chr
 (
__s
, 
__c
);

255 
__exº_®ways_le
 const *

256 
	`¡¼chr
 (cÚ¡ *
__s
, 
__c
è
__THROW


258  
	`__but_¡¼chr
 (
__s
, 
__c
);

261 
	}
}

263 *
	$¡¼chr
 (cÚ¡ *
__s
, 
__c
)

264 
__THROW
 
__©ibu_pu»__
 
	`__nÚnuÎ
 ((1));

266 
__END_NAMESPACE_STD


268 #ifdeà
__USE_GNU


271 #ifdeà
__CORRECT_ISO_CPP_STRING_H_PROTO


272 "C++" *
	$¡rchºul
 (*
__s
, 
__c
)

273 
__THROW
 
	`__asm
 ("¡rchºul"è
__©ibu_pu»__
 
	`__nÚnuÎ
 ((1));

274 "C++" cÚ¡ *
	$¡rchºul
 (cÚ¡ *
__s
, 
__c
)

275 
__THROW
 
	`__asm
 ("¡rchºul"è
__©ibu_pu»__
 
	`__nÚnuÎ
 ((1));

277 *
	$¡rchºul
 (cÚ¡ *
__s
, 
__c
)

278 
__THROW
 
__©ibu_pu»__
 
	`__nÚnuÎ
 ((1));

282 
__BEGIN_NAMESPACE_STD


285 
size_t
 
	$¡rc¥n
 (cÚ¡ *
__s
, cÚ¡ *
__»jeù
)

286 
__THROW
 
__©ibu_pu»__
 
	`__nÚnuÎ
 ((1, 2));

289 
size_t
 
	$¡r¥n
 (cÚ¡ *
__s
, cÚ¡ *
__acû±
)

290 
__THROW
 
__©ibu_pu»__
 
	`__nÚnuÎ
 ((1, 2));

292 #ifdeà
__CORRECT_ISO_CPP_STRING_H_PROTO


295 *
	`¡½brk
 (*
__s
, cÚ¡ *
__acû±
)

296 
__THROW
 
	`__asm
 ("¡½brk"è
__©ibu_pu»__
 
	`__nÚnuÎ
 ((1, 2));

297 cÚ¡ *
	`¡½brk
 (cÚ¡ *
__s
, cÚ¡ *
__acû±
)

298 
__THROW
 
	`__asm
 ("¡½brk"è
__©ibu_pu»__
 
	`__nÚnuÎ
 ((1, 2));

300 #ifdeà
__OPTIMIZE__


301 
__exº_®ways_le
 *

302 
	`¡½brk
 (*
__s
, cÚ¡ *
__acû±
è
__THROW


304  
	`__but_¡½brk
 (
__s
, 
__acû±
);

307 
__exº_®ways_le
 const *

308 
	`¡½brk
 (cÚ¡ *
__s
, cÚ¡ *
__acû±
è
__THROW


310  
	`__but_¡½brk
 (
__s
, 
__acû±
);

313 
	}
}

315 *
	$¡½brk
 (cÚ¡ *
__s
, cÚ¡ *
__acû±
)

316 
__THROW
 
__©ibu_pu»__
 
	`__nÚnuÎ
 ((1, 2));

319 #ifdeà
__CORRECT_ISO_CPP_STRING_H_PROTO


322 *
	`¡r¡r
 (*
__hay¡ack
, cÚ¡ *
__ÃedË
)

323 
__THROW
 
	`__asm
 ("¡r¡r"è
__©ibu_pu»__
 
	`__nÚnuÎ
 ((1, 2));

324 cÚ¡ *
	`¡r¡r
 (cÚ¡ *
__hay¡ack
, cÚ¡ *
__ÃedË
)

325 
__THROW
 
	`__asm
 ("¡r¡r"è
__©ibu_pu»__
 
	`__nÚnuÎ
 ((1, 2));

327 #ifdeà
__OPTIMIZE__


328 
__exº_®ways_le
 *

329 
	`¡r¡r
 (*
__hay¡ack
, cÚ¡ *
__ÃedË
è
__THROW


331  
	`__but_¡r¡r
 (
__hay¡ack
, 
__ÃedË
);

334 
__exº_®ways_le
 const *

335 
	`¡r¡r
 (cÚ¡ *
__hay¡ack
, cÚ¡ *
__ÃedË
è
__THROW


337  
	`__but_¡r¡r
 (
__hay¡ack
, 
__ÃedË
);

340 
	}
}

342 *
	$¡r¡r
 (cÚ¡ *
__hay¡ack
, cÚ¡ *
__ÃedË
)

343 
__THROW
 
__©ibu_pu»__
 
	`__nÚnuÎ
 ((1, 2));

348 *
	$¡¹ok
 (*
__»¡riù
 
__s
, cÚ¡ *__»¡riù 
__dim
)

349 
__THROW
 
	`__nÚnuÎ
 ((2));

350 
__END_NAMESPACE_STD


354 *
	$__¡¹ok_r
 (*
__»¡riù
 
__s
,

355 cÚ¡ *
__»¡riù
 
__dim
,

356 **
__»¡riù
 
__§ve_±r
)

357 
__THROW
 
	`__nÚnuÎ
 ((2, 3));

358 #ià
defed
 
__USE_POSIX
 || defed 
__USE_MISC


359 *
	$¡¹ok_r
 (*
__»¡riù
 
__s
, cÚ¡ *__»¡riù 
__dim
,

360 **
__»¡riù
 
__§ve_±r
)

361 
__THROW
 
	`__nÚnuÎ
 ((2, 3));

364 #ifdeà
__USE_GNU


366 #ifdeà
__CORRECT_ISO_CPP_STRING_H_PROTO


367 "C++" *
	$¡rÿ£¡r
 (*
__hay¡ack
, cÚ¡ *
__ÃedË
)

368 
__THROW
 
	`__asm
 ("¡rÿ£¡r"è
__©ibu_pu»__
 
	`__nÚnuÎ
 ((1, 2));

369 "C++" cÚ¡ *
	$¡rÿ£¡r
 (cÚ¡ *
__hay¡ack
,

370 cÚ¡ *
__ÃedË
)

371 
__THROW
 
	`__asm
 ("¡rÿ£¡r"è
__©ibu_pu»__
 
	`__nÚnuÎ
 ((1, 2));

373 *
	$¡rÿ£¡r
 (cÚ¡ *
__hay¡ack
, cÚ¡ *
__ÃedË
)

374 
__THROW
 
__©ibu_pu»__
 
	`__nÚnuÎ
 ((1, 2));

378 #ifdeà
__USE_GNU


382 *
	$memmem
 (cÚ¡ *
__hay¡ack
, 
size_t
 
__hay¡ackËn
,

383 cÚ¡ *
__ÃedË
, 
size_t
 
__ÃedËËn
)

384 
__THROW
 
__©ibu_pu»__
 
	`__nÚnuÎ
 ((1, 3));

388 *
	$__mempýy
 (*
__»¡riù
 
__de¡
,

389 cÚ¡ *
__»¡riù
 
__¤c
, 
size_t
 
__n
)

390 
__THROW
 
	`__nÚnuÎ
 ((1, 2));

391 *
	$mempýy
 (*
__»¡riù
 
__de¡
,

392 cÚ¡ *
__»¡riù
 
__¤c
, 
size_t
 
__n
)

393 
__THROW
 
	`__nÚnuÎ
 ((1, 2));

397 
__BEGIN_NAMESPACE_STD


399 
size_t
 
	$¡¾
 (cÚ¡ *
__s
)

400 
__THROW
 
__©ibu_pu»__
 
	`__nÚnuÎ
 ((1));

401 
__END_NAMESPACE_STD


403 #ifdef 
__USE_XOPEN2K8


406 
size_t
 
	$¡ºËn
 (cÚ¡ *
__¡rg
, 
size_t
 
__maxËn
)

407 
__THROW
 
__©ibu_pu»__
 
	`__nÚnuÎ
 ((1));

411 
__BEGIN_NAMESPACE_STD


413 *
	$¡»¼Ü
 (
__ºum
è
__THROW
;

414 
__END_NAMESPACE_STD


415 #ià
defed
 
__USE_XOPEN2K
 || defed 
__USE_MISC


423 #ià
defed
 
__USE_XOPEN2K
 && !defed 
__USE_GNU


426 #ifdeà
__REDIRECT_NTH


427 
	`__REDIRECT_NTH
 (
¡»¼Ü_r
,

428 (
__ºum
, *
__buf
, 
size_t
 
__buæ
),

429 
__xpg_¡»¼Ü_r
è
	`__nÚnuÎ
 ((2));

431 
	$__xpg_¡»¼Ü_r
 (
__ºum
, *
__buf
, 
size_t
 
__buæ
)

432 
__THROW
 
	`__nÚnuÎ
 ((2));

433 
	#¡»¼Ü_r
 
__xpg_¡»¼Ü_r


	)

438 *
	$¡»¼Ü_r
 (
__ºum
, *
__buf
, 
size_t
 
__buæ
)

439 
__THROW
 
	`__nÚnuÎ
 ((2)è
__wur
;

443 #ifdeà
__USE_XOPEN2K8


445 *
	$¡»¼Ü_l
 (
__ºum
, 
__loÿË_t
 
__l
è
__THROW
;

451 
	$__bzo
 (*
__s
, 
size_t
 
__n
è
__THROW
 
	`__nÚnuÎ
 ((1));

453 #ifdeà
__USE_BSD


455 
	$bcÝy
 (cÚ¡ *
__¤c
, *
__de¡
, 
size_t
 
__n
)

456 
__THROW
 
	`__nÚnuÎ
 ((1, 2));

459 
	$bzo
 (*
__s
, 
size_t
 
__n
è
__THROW
 
	`__nÚnuÎ
 ((1));

462 
	$bcmp
 (cÚ¡ *
__s1
, cÚ¡ *
__s2
, 
size_t
 
__n
)

463 
__THROW
 
__©ibu_pu»__
 
	`__nÚnuÎ
 ((1, 2));

466 #ifdeà
__CORRECT_ISO_CPP_STRING_H_PROTO


469 *
	`dex
 (*
__s
, 
__c
)

470 
__THROW
 
	`__asm
 ("dex"è
__©ibu_pu»__
 
	`__nÚnuÎ
 ((1));

471 cÚ¡ *
	`dex
 (cÚ¡ *
__s
, 
__c
)

472 
__THROW
 
	`__asm
 ("dex"è
__©ibu_pu»__
 
	`__nÚnuÎ
 ((1));

474 #ià
defed
 
__OPTIMIZE__
 && !defed 
__CORRECT_ISO_CPP_STRINGS_H_PROTO


475 
__exº_®ways_le
 *

476 
	`dex
 (*
__s
, 
__c
è
__THROW


478  
	`__but_dex
 (
__s
, 
__c
);

481 
__exº_®ways_le
 const *

482 
	`dex
 (cÚ¡ *
__s
, 
__c
è
__THROW


484  
	`__but_dex
 (
__s
, 
__c
);

487 
	}
}

489 *
	$dex
 (cÚ¡ *
__s
, 
__c
)

490 
__THROW
 
__©ibu_pu»__
 
	`__nÚnuÎ
 ((1));

494 #ifdeà
__CORRECT_ISO_CPP_STRING_H_PROTO


497 *
	`rdex
 (*
__s
, 
__c
)

498 
__THROW
 
	`__asm
 ("rdex"è
__©ibu_pu»__
 
	`__nÚnuÎ
 ((1));

499 cÚ¡ *
	`rdex
 (cÚ¡ *
__s
, 
__c
)

500 
__THROW
 
	`__asm
 ("rdex"è
__©ibu_pu»__
 
	`__nÚnuÎ
 ((1));

502 #ià
defed
 
__OPTIMIZE__
 && !defed 
__CORRECT_ISO_CPP_STRINGS_H_PROTO


503 
__exº_®ways_le
 *

504 
	`rdex
 (*
__s
, 
__c
è
__THROW


506  
	`__but_rdex
 (
__s
, 
__c
);

509 
__exº_®ways_le
 const *

510 
	`rdex
 (cÚ¡ *
__s
, 
__c
è
__THROW


512  
	`__but_rdex
 (
__s
, 
__c
);

515 
	}
}

517 *
	$rdex
 (cÚ¡ *
__s
, 
__c
)

518 
__THROW
 
__©ibu_pu»__
 
	`__nÚnuÎ
 ((1));

523 
	$ffs
 (
__i
è
__THROW
 
	`__©ibu__
 ((
__cÚ¡__
));

527 #ifdef 
__USE_GNU


528 
	$ff¦
 (
__l
è
__THROW
 
	`__©ibu__
 ((
__cÚ¡__
));

529 
__exnsiÚ__
 
	$ff¦l
 (
__Î
)

530 
__THROW
 
	`__©ibu__
 ((
__cÚ¡__
));

534 
	$¡rÿ£cmp
 (cÚ¡ *
__s1
, cÚ¡ *
__s2
)

535 
__THROW
 
__©ibu_pu»__
 
	`__nÚnuÎ
 ((1, 2));

538 
	$¡ºÿ£cmp
 (cÚ¡ *
__s1
, cÚ¡ *
__s2
, 
size_t
 
__n
)

539 
__THROW
 
__©ibu_pu»__
 
	`__nÚnuÎ
 ((1, 2));

542 #ifdef 
__USE_GNU


545 
	$¡rÿ£cmp_l
 (cÚ¡ *
__s1
, cÚ¡ *
__s2
,

546 
__loÿË_t
 
__loc
)

547 
__THROW
 
__©ibu_pu»__
 
	`__nÚnuÎ
 ((1, 2, 3));

549 
	$¡ºÿ£cmp_l
 (cÚ¡ *
__s1
, cÚ¡ *
__s2
,

550 
size_t
 
__n
, 
__loÿË_t
 
__loc
)

551 
__THROW
 
__©ibu_pu»__
 
	`__nÚnuÎ
 ((1, 2, 4));

554 #ifdef 
__USE_BSD


557 *
	$¡r£p
 (**
__»¡riù
 
__¡rgp
,

558 cÚ¡ *
__»¡riù
 
__dim
)

559 
__THROW
 
	`__nÚnuÎ
 ((1, 2));

562 #ifdef 
__USE_XOPEN2K8


564 *
	$¡rsigÇl
 (
__sig
è
__THROW
;

567 *
	$__¡pýy
 (*
__»¡riù
 
__de¡
, cÚ¡ *__»¡riù 
__¤c
)

568 
__THROW
 
	`__nÚnuÎ
 ((1, 2));

569 *
	$¡pýy
 (*
__»¡riù
 
__de¡
, cÚ¡ *__»¡riù 
__¤c
)

570 
__THROW
 
	`__nÚnuÎ
 ((1, 2));

574 *
	$__¡²ýy
 (*
__»¡riù
 
__de¡
,

575 cÚ¡ *
__»¡riù
 
__¤c
, 
size_t
 
__n
)

576 
__THROW
 
	`__nÚnuÎ
 ((1, 2));

577 *
	$¡²ýy
 (*
__»¡riù
 
__de¡
,

578 cÚ¡ *
__»¡riù
 
__¤c
, 
size_t
 
__n
)

579 
__THROW
 
	`__nÚnuÎ
 ((1, 2));

582 #ifdef 
__USE_GNU


584 
	$¡rvscmp
 (cÚ¡ *
__s1
, cÚ¡ *
__s2
)

585 
__THROW
 
__©ibu_pu»__
 
	`__nÚnuÎ
 ((1, 2));

588 *
	$¡räy
 (*
__¡rg
è
__THROW
 
	`__nÚnuÎ
 ((1));

591 *
	$memäob
 (*
__s
, 
size_t
 
__n
è
__THROW
 
	`__nÚnuÎ
 ((1));

593 #iâdeà
ba£Çme


598 #ifdeà
__CORRECT_ISO_CPP_STRING_H_PROTO


599 "C++" *
	$ba£Çme
 (*
__fame
)

600 
__THROW
 
	`__asm
 ("ba£Çme"è
	`__nÚnuÎ
 ((1));

601 "C++" cÚ¡ *
	$ba£Çme
 (cÚ¡ *
__fame
)

602 
__THROW
 
	`__asm
 ("ba£Çme"è
	`__nÚnuÎ
 ((1));

604 *
	$ba£Çme
 (cÚ¡ *
__fame
è
__THROW
 
	`__nÚnuÎ
 ((1));

610 #ià
defed
 
__GNUC__
 && __GNUC__ >= 2

611 #ià
defed
 
__OPTIMIZE__
 && !defed 
__OPTIMIZE_SIZE__
 \

612 && !
defed
 
__NO_INLINE__
 && !defed 
__ýlu¥lus


632 
	~<bs/¡rg.h
>

635 
	~<bs/¡rg2.h
>

638 #ià
__USE_FORTIFY_LEVEL
 > 0 && 
defed
 
__fÜtify_funùiÚ


640 
	~<bs/¡rg3.h
>

644 
__END_DECLS


	@/usr/include/sys/fcntl.h

1 
	~<fú.h
>

	@/usr/include/sys/ioctl.h

18 #iâdef 
_SYS_IOCTL_H


19 
	#_SYS_IOCTL_H
 1

	)

21 
	~<ã©u»s.h
>

23 
	g__BEGIN_DECLS


26 
	~<bs/ioùls.h
>

29 
	~<bs/ioùl-ty³s.h
>

36 
	~<sys/ydeçuÉs.h
>

41 
	$ioùl
 (
__fd
, 
__»que¡
, ...è
__THROW
;

43 
__END_DECLS


	@/usr/include/sys/param.h

19 #iâdeà
_SYS_PARAM_H


20 
	#_SYS_PARAM_H
 1

	)

22 
	#__Ãed_NULL


	)

23 
	~<¡ddef.h
>

25 
	~<sys/ty³s.h
>

26 
	~<lims.h
>

27 
	~<dn.h
>

28 
	~<sigÇl.h
>

31 
	~<bs/·¿m.h
>

36 
	#NBBY
 
CHAR_BIT


	)

38 #ià!
defed
 
NGROUPS
 && defed 
NGROUPS_MAX


39 
	#NGROUPS
 
NGROUPS_MAX


	)

41 #ià!
defed
 
MAXSYMLINKS
 && defed 
SYMLOOP_MAX


42 
	#MAXSYMLINKS
 
SYMLOOP_MAX


	)

44 #ià!
defed
 
CANBSIZ
 && defed 
MAX_CANON


45 
	#CANBSIZ
 
MAX_CANON


	)

47 #ià!
defed
 
MAXPATHLEN
 && defed 
PATH_MAX


48 
	#MAXPATHLEN
 
PATH_MAX


	)

50 #ià!
defed
 
NOFILE
 && defed 
OPEN_MAX


51 
	#NOFILE
 
OPEN_MAX


	)

53 #iâdeà
NCARGS


54 #ifdeà
ARG_MAX


55 
	#NCARGS
 
ARG_MAX


	)

59 
	#NCARGS
 
INT_MAX


	)

65 #iâdeà
NOGROUP


66 
	#NOGROUP
 65535

	)

68 #iâdeà
NODEV


69 
	#NODEV
 ((
dev_t
è-1è

	)

74 #iâdeà
DEV_BSIZE


75 
	#DEV_BSIZE
 512

	)

80 
	#£tb
(
a
,
i
è(×)[(i)/
NBBY
] |ð1<<((i)%NBBY))

	)

81 
	#þrb
(
a
,
i
è(×)[(i)/
NBBY
] &ð~(1<<((i)%NBBY)))

	)

82 
	#is£t
(
a
,
i
è(×)[(i)/
NBBY
] & (1<<((i)%NBBY)))

	)

83 
	#isþr
(
a
,
i
è((×)[(i)/
NBBY
] & (1<<((i)%NBBY))è=ð0)

	)

86 #iâdeà
howmªy


87 
	#howmªy
(
x
, 
y
è(((xè+ ((yè- 1)è/ (y))

	)

89 #ifdeà
__GNUC__


90 
	#roundup
(
x
, 
y
è(
	`__but_cÚ¡ªt_p
 (yè&& 
	`powof2
 (y) \

91 ? (((
x
è+ (
y
) - 1) & ~((y) - 1)) \

92 : ((((
x
è+ ((
y
è- 1)è/ (y)è* (y)))

	)

94 
	#roundup
(
x
, 
y
è((((xè+ ((yè- 1)è/ (y)è* (y))

	)

96 
	#powof2
(
x
è((((xè- 1è& (x)è=ð0)

	)

99 
	#MIN
(
a
,
b
è((×)<(b))?×):(b))

	)

100 
	#MAX
(
a
,
b
è((×)>(b))?×):(b))

	)

	@/usr/include/sys/queue.h

32 #iâdef 
_SYS_QUEUE_H_


33 
	#_SYS_QUEUE_H_


	)

84 
	#LIST_HEAD
(
Çme
, 
ty³
) \

85 
	sÇme
 { \

86 
ty³
 *
lh_f¡
; \

87 }

	)

89 
	#LIST_HEAD_INITIALIZER
(
hd
) \

90 { 
NULL
 }

	)

92 
	#LIST_ENTRY
(
ty³
) \

94 
ty³
 *
Ë_Ãxt
; \

95 
ty³
 **
Ë_´ev
; \

96 }

	)

101 
	#LIST_INIT
(
hd
) do { \

102 (
hd
)->
lh_f¡
 = 
NULL
; \

103 }  0)

	)

105 
	#LIST_INSERT_AFTER
(
li¡m
, 
m
, 
fld
) do { \

106 ià(((
m
)->
fld
.
Ë_Ãxt
 = (
li¡m
)->fld.Ë_Ãxtè!ð
NULL
) \

107 (
li¡m
)->
fld
.
Ë_Ãxt
->fld.
Ë_´ev
 = \

108 &(
m
)->
fld
.
Ë_Ãxt
; \

109 (
li¡m
)->
fld
.
Ë_Ãxt
 = (
m
); \

110 (
m
)->
fld
.
Ë_´ev
 = &(
li¡m
)->fld.
Ë_Ãxt
; \

111 }  0)

	)

113 
	#LIST_INSERT_BEFORE
(
li¡m
, 
m
, 
fld
) do { \

114 (
m
)->
fld
.
Ë_´ev
 = (
li¡m
)->field.le_prev; \

115 (
m
)->
fld
.
Ë_Ãxt
 = (
li¡m
); \

116 *(
li¡m
)->
fld
.
Ë_´ev
 = (
m
); \

117 (
li¡m
)->
fld
.
Ë_´ev
 = &(
m
)->fld.
Ë_Ãxt
; \

118 }  0)

	)

120 
	#LIST_INSERT_HEAD
(
hd
, 
m
, 
fld
) do { \

121 ià(((
m
)->
fld
.
Ë_Ãxt
 = (
hd
)->
lh_f¡
è!ð
NULL
) \

122 (
hd
)->
lh_f¡
->
fld
.
Ë_´ev
 = &(
m
)->fld.
Ë_Ãxt
;\

123 (
hd
)->
lh_f¡
 = (
m
); \

124 (
m
)->
fld
.
Ë_´ev
 = &(
hd
)->
lh_f¡
; \

125 }  0)

	)

127 
	#LIST_REMOVE
(
m
, 
fld
) do { \

128 ià((
m
)->
fld
.
Ë_Ãxt
 !ð
NULL
) \

129 (
m
)->
fld
.
Ë_Ãxt
->fld.
Ë_´ev
 = \

130 (
m
)->
fld
.
Ë_´ev
; \

131 *(
m
)->
fld
.
Ë_´ev
 = (m)->fld.
Ë_Ãxt
; \

132 }  0)

	)

134 
	#LIST_FOREACH
(
v¬
, 
hd
, 
fld
) \

135 (
v¬
èð((
hd
)->
lh_f¡
); \

136 (
v¬
); \

137 (
v¬
èð((v¬)->
fld
.
Ë_Ãxt
))

	)

142 
	#LIST_EMPTY
(
hd
è((hd)->
lh_f¡
 =ð
NULL
)

	)

143 
	#LIST_FIRST
(
hd
è((hd)->
lh_f¡
)

	)

144 
	#LIST_NEXT
(
m
, 
fld
è(Ólm)->fld.
Ë_Ãxt
)

	)

150 
	#SLIST_HEAD
(
Çme
, 
ty³
) \

151 
	sÇme
 { \

152 
ty³
 *
¦h_f¡
; \

153 }

	)

155 
	#SLIST_HEAD_INITIALIZER
(
hd
) \

156 { 
NULL
 }

	)

158 
	#SLIST_ENTRY
(
ty³
) \

160 
ty³
 *
¦e_Ãxt
; \

161 }

	)

166 
	#SLIST_INIT
(
hd
) do { \

167 (
hd
)->
¦h_f¡
 = 
NULL
; \

168 }  0)

	)

170 
	#SLIST_INSERT_AFTER
(
¦i¡m
, 
m
, 
fld
) do { \

171 (
m
)->
fld
.
¦e_Ãxt
 = (
¦i¡m
)->field.sle_next; \

172 (
¦i¡m
)->
fld
.
¦e_Ãxt
 = (
m
); \

173 }  0)

	)

175 
	#SLIST_INSERT_HEAD
(
hd
, 
m
, 
fld
) do { \

176 (
m
)->
fld
.
¦e_Ãxt
 = (
hd
)->
¦h_f¡
; \

177 (
hd
)->
¦h_f¡
 = (
m
); \

178 }  0)

	)

180 
	#SLIST_REMOVE_HEAD
(
hd
, 
fld
) do { \

181 (
hd
)->
¦h_f¡
 = (hd)->¦h_f¡->
fld
.
¦e_Ãxt
; \

182 }  0)

	)

184 
	#SLIST_REMOVE
(
hd
, 
m
, 
ty³
, 
fld
) do { \

185 ià((
hd
)->
¦h_f¡
 =ð(
m
)) { \

186 
	`SLIST_REMOVE_HEAD
((
hd
), 
fld
); \

189 
ty³
 *
cu»lm
 = (
hd
)->
¦h_f¡
; \

190 
cu»lm
->
fld
.
¦e_Ãxt
 !ð(
m
)) \

191 
cu»lm
 = cu»lm->
fld
.
¦e_Ãxt
; \

192 
cu»lm
->
fld
.
¦e_Ãxt
 = \

193 
cu»lm
->
fld
.
¦e_Ãxt
->field.sle_next; \

195 }  0)

	)

197 
	#SLIST_FOREACH
(
v¬
, 
hd
, 
fld
) \

198 (
v¬
èð(
hd
)->
¦h_f¡
; (v¬); (v¬èð(v¬)->
fld
.
¦e_Ãxt
)

	)

203 
	#SLIST_EMPTY
(
hd
è((hd)->
¦h_f¡
 =ð
NULL
)

	)

204 
	#SLIST_FIRST
(
hd
è((hd)->
¦h_f¡
)

	)

205 
	#SLIST_NEXT
(
m
, 
fld
è(Ólm)->fld.
¦e_Ãxt
)

	)

211 
	#STAILQ_HEAD
(
Çme
, 
ty³
) \

212 
	sÇme
 { \

213 
ty³
 *
¡qh_f¡
; \

214 
ty³
 **
¡qh_Ï¡
; \

215 }

	)

217 
	#STAILQ_HEAD_INITIALIZER
(
hd
) \

218 { 
NULL
, &(
hd
).
¡qh_f¡
 }

	)

220 
	#STAILQ_ENTRY
(
ty³
) \

222 
ty³
 *
¡qe_Ãxt
; \

223 }

	)

228 
	#STAILQ_INIT
(
hd
) do { \

229 (
hd
)->
¡qh_f¡
 = 
NULL
; \

230 (
hd
)->
¡qh_Ï¡
 = &(hd)->
¡qh_f¡
; \

231 }  0)

	)

233 
	#STAILQ_INSERT_HEAD
(
hd
, 
m
, 
fld
) do { \

234 ià(((
m
)->
fld
.
¡qe_Ãxt
 = (
hd
)->
¡qh_f¡
è=ð
NULL
) \

235 (
hd
)->
¡qh_Ï¡
 = &(
m
)->
fld
.
¡qe_Ãxt
; \

236 (
hd
)->
¡qh_f¡
 = (
m
); \

237 }  0)

	)

239 
	#STAILQ_INSERT_TAIL
(
hd
, 
m
, 
fld
) do { \

240 (
m
)->
fld
.
¡qe_Ãxt
 = 
NULL
; \

241 *(
hd
)->
¡qh_Ï¡
 = (
m
); \

242 (
hd
)->
¡qh_Ï¡
 = &(
m
)->
fld
.
¡qe_Ãxt
; \

243 }  0)

	)

245 
	#STAILQ_INSERT_AFTER
(
hd
, 
li¡m
, 
m
, 
fld
) do { \

246 ià(((
m
)->
fld
.
¡qe_Ãxt
 = (
li¡m
)->fld.¡qe_Ãxtè=ð
NULL
)\

247 (
hd
)->
¡qh_Ï¡
 = &(
m
)->
fld
.
¡qe_Ãxt
; \

248 (
li¡m
)->
fld
.
¡qe_Ãxt
 = (
m
); \

249 }  0)

	)

251 
	#STAILQ_REMOVE_HEAD
(
hd
, 
fld
) do { \

252 ià(((
hd
)->
¡qh_f¡
 = (hd)->¡qh_f¡->
fld
.
¡qe_Ãxt
è=ð
NULL
) \

253 (
hd
)->
¡qh_Ï¡
 = &(hd)->
¡qh_f¡
; \

254 }  0)

	)

256 
	#STAILQ_REMOVE
(
hd
, 
m
, 
ty³
, 
fld
) do { \

257 ià((
hd
)->
¡qh_f¡
 =ð(
m
)) { \

258 
	`STAILQ_REMOVE_HEAD
((
hd
), 
fld
); \

260 
ty³
 *
cu»lm
 = (
hd
)->
¡qh_f¡
; \

261 
cu»lm
->
fld
.
¡qe_Ãxt
 !ð(
m
)) \

262 
cu»lm
 = cu»lm->
fld
.
¡qe_Ãxt
; \

263 ià((
cu»lm
->
fld
.
¡qe_Ãxt
 = \

264 
cu»lm
->
fld
.
¡qe_Ãxt
->fld.¡qe_Ãxtè=ð
NULL
) \

265 (
hd
)->
¡qh_Ï¡
 = &(
cu»lm
)->
fld
.
¡qe_Ãxt
; \

267 }  0)

	)

269 
	#STAILQ_FOREACH
(
v¬
, 
hd
, 
fld
) \

270 (
v¬
èð((
hd
)->
¡qh_f¡
); \

271 (
v¬
); \

272 (
v¬
èð((v¬)->
fld
.
¡qe_Ãxt
))

	)

274 
	#STAILQ_CONCAT
(
hd1
, 
hd2
) do { \

275 ià(!
	`STAILQ_EMPTY
((
hd2
))) { \

276 *(
hd1
)->
¡qh_Ï¡
 = (
hd2
)->
¡qh_f¡
; \

277 (
hd1
)->
¡qh_Ï¡
 = (
hd2
)->stqh_last; \

278 
	`STAILQ_INIT
((
hd2
)); \

280 }  0)

	)

285 
	#STAILQ_EMPTY
(
hd
è((hd)->
¡qh_f¡
 =ð
NULL
)

	)

286 
	#STAILQ_FIRST
(
hd
è((hd)->
¡qh_f¡
)

	)

287 
	#STAILQ_NEXT
(
m
, 
fld
è(Ólm)->fld.
¡qe_Ãxt
)

	)

293 
	#SIMPLEQ_HEAD
(
Çme
, 
ty³
) \

294 
	sÇme
 { \

295 
ty³
 *
sqh_f¡
; \

296 
ty³
 **
sqh_Ï¡
; \

297 }

	)

299 
	#SIMPLEQ_HEAD_INITIALIZER
(
hd
) \

300 { 
NULL
, &(
hd
).
sqh_f¡
 }

	)

302 
	#SIMPLEQ_ENTRY
(
ty³
) \

304 
ty³
 *
sqe_Ãxt
; \

305 }

	)

310 
	#SIMPLEQ_INIT
(
hd
) do { \

311 (
hd
)->
sqh_f¡
 = 
NULL
; \

312 (
hd
)->
sqh_Ï¡
 = &(hd)->
sqh_f¡
; \

313 }  0)

	)

315 
	#SIMPLEQ_INSERT_HEAD
(
hd
, 
m
, 
fld
) do { \

316 ià(((
m
)->
fld
.
sqe_Ãxt
 = (
hd
)->
sqh_f¡
è=ð
NULL
) \

317 (
hd
)->
sqh_Ï¡
 = &(
m
)->
fld
.
sqe_Ãxt
; \

318 (
hd
)->
sqh_f¡
 = (
m
); \

319 }  0)

	)

321 
	#SIMPLEQ_INSERT_TAIL
(
hd
, 
m
, 
fld
) do { \

322 (
m
)->
fld
.
sqe_Ãxt
 = 
NULL
; \

323 *(
hd
)->
sqh_Ï¡
 = (
m
); \

324 (
hd
)->
sqh_Ï¡
 = &(
m
)->
fld
.
sqe_Ãxt
; \

325 }  0)

	)

327 
	#SIMPLEQ_INSERT_AFTER
(
hd
, 
li¡m
, 
m
, 
fld
) do { \

328 ià(((
m
)->
fld
.
sqe_Ãxt
 = (
li¡m
)->fld.sqe_Ãxtè=ð
NULL
)\

329 (
hd
)->
sqh_Ï¡
 = &(
m
)->
fld
.
sqe_Ãxt
; \

330 (
li¡m
)->
fld
.
sqe_Ãxt
 = (
m
); \

331 }  0)

	)

333 
	#SIMPLEQ_REMOVE_HEAD
(
hd
, 
fld
) do { \

334 ià(((
hd
)->
sqh_f¡
 = (hd)->sqh_f¡->
fld
.
sqe_Ãxt
è=ð
NULL
) \

335 (
hd
)->
sqh_Ï¡
 = &(hd)->
sqh_f¡
; \

336 }  0)

	)

338 
	#SIMPLEQ_REMOVE
(
hd
, 
m
, 
ty³
, 
fld
) do { \

339 ià((
hd
)->
sqh_f¡
 =ð(
m
)) { \

340 
	`SIMPLEQ_REMOVE_HEAD
((
hd
), 
fld
); \

342 
ty³
 *
cu»lm
 = (
hd
)->
sqh_f¡
; \

343 
cu»lm
->
fld
.
sqe_Ãxt
 !ð(
m
)) \

344 
cu»lm
 = cu»lm->
fld
.
sqe_Ãxt
; \

345 ià((
cu»lm
->
fld
.
sqe_Ãxt
 = \

346 
cu»lm
->
fld
.
sqe_Ãxt
->fld.sqe_Ãxtè=ð
NULL
) \

347 (
hd
)->
sqh_Ï¡
 = &(
cu»lm
)->
fld
.
sqe_Ãxt
; \

349 }  0)

	)

351 
	#SIMPLEQ_FOREACH
(
v¬
, 
hd
, 
fld
) \

352 (
v¬
èð((
hd
)->
sqh_f¡
); \

353 (
v¬
); \

354 (
v¬
èð((v¬)->
fld
.
sqe_Ãxt
))

	)

359 
	#SIMPLEQ_EMPTY
(
hd
è((hd)->
sqh_f¡
 =ð
NULL
)

	)

360 
	#SIMPLEQ_FIRST
(
hd
è((hd)->
sqh_f¡
)

	)

361 
	#SIMPLEQ_NEXT
(
m
, 
fld
è(Ólm)->fld.
sqe_Ãxt
)

	)

367 
	#_TAILQ_HEAD
(
Çme
, 
ty³
, 
qu®
) \

368 
	sÇme
 { \

369 
qu®
 
ty³
 *
tqh_f¡
; \

370 
qu®
 
ty³
 *qu® *
tqh_Ï¡
; \

371 }

	)

372 
	#TAILQ_HEAD
(
Çme
, 
ty³
è
	`_TAILQ_HEAD
Òame, ty³,)

	)

374 
	#TAILQ_HEAD_INITIALIZER
(
hd
) \

375 { 
NULL
, &(
hd
).
tqh_f¡
 }

	)

377 
	#_TAILQ_ENTRY
(
ty³
, 
qu®
) \

379 
qu®
 
ty³
 *
tqe_Ãxt
; \

380 
qu®
 
ty³
 *qu® *
tqe_´ev
; \

381 }

	)

382 
	#TAILQ_ENTRY
(
ty³
è
	`_TAILQ_ENTRY
(ty³,)

	)

387 
	#TAILQ_INIT
(
hd
) do { \

388 (
hd
)->
tqh_f¡
 = 
NULL
; \

389 (
hd
)->
tqh_Ï¡
 = &(hd)->
tqh_f¡
; \

390 }  0)

	)

392 
	#TAILQ_INSERT_HEAD
(
hd
, 
m
, 
fld
) do { \

393 ià(((
m
)->
fld
.
tqe_Ãxt
 = (
hd
)->
tqh_f¡
è!ð
NULL
) \

394 (
hd
)->
tqh_f¡
->
fld
.
tqe_´ev
 = \

395 &(
m
)->
fld
.
tqe_Ãxt
; \

397 (
hd
)->
tqh_Ï¡
 = &(
m
)->
fld
.
tqe_Ãxt
; \

398 (
hd
)->
tqh_f¡
 = (
m
); \

399 (
m
)->
fld
.
tqe_´ev
 = &(
hd
)->
tqh_f¡
; \

400 }  0)

	)

402 
	#TAILQ_INSERT_TAIL
(
hd
, 
m
, 
fld
) do { \

403 (
m
)->
fld
.
tqe_Ãxt
 = 
NULL
; \

404 (
m
)->
fld
.
tqe_´ev
 = (
hd
)->
tqh_Ï¡
; \

405 *(
hd
)->
tqh_Ï¡
 = (
m
); \

406 (
hd
)->
tqh_Ï¡
 = &(
m
)->
fld
.
tqe_Ãxt
; \

407 }  0)

	)

409 
	#TAILQ_INSERT_AFTER
(
hd
, 
li¡m
, 
m
, 
fld
) do { \

410 ià(((
m
)->
fld
.
tqe_Ãxt
 = (
li¡m
)->fld.tqe_Ãxtè!ð
NULL
)\

411 (
m
)->
fld
.
tqe_Ãxt
->fld.
tqe_´ev
 = \

412 &(
m
)->
fld
.
tqe_Ãxt
; \

414 (
hd
)->
tqh_Ï¡
 = &(
m
)->
fld
.
tqe_Ãxt
; \

415 (
li¡m
)->
fld
.
tqe_Ãxt
 = (
m
); \

416 (
m
)->
fld
.
tqe_´ev
 = &(
li¡m
)->fld.
tqe_Ãxt
; \

417 }  0)

	)

419 
	#TAILQ_INSERT_BEFORE
(
li¡m
, 
m
, 
fld
) do { \

420 (
m
)->
fld
.
tqe_´ev
 = (
li¡m
)->field.tqe_prev; \

421 (
m
)->
fld
.
tqe_Ãxt
 = (
li¡m
); \

422 *(
li¡m
)->
fld
.
tqe_´ev
 = (
m
); \

423 (
li¡m
)->
fld
.
tqe_´ev
 = &(
m
)->fld.
tqe_Ãxt
; \

424 }  0)

	)

426 
	#TAILQ_REMOVE
(
hd
, 
m
, 
fld
) do { \

427 ià(((
m
)->
fld
.
tqe_Ãxt
è!ð
NULL
) \

428 (
m
)->
fld
.
tqe_Ãxt
->fld.
tqe_´ev
 = \

429 (
m
)->
fld
.
tqe_´ev
; \

431 (
hd
)->
tqh_Ï¡
 = (
m
)->
fld
.
tqe_´ev
; \

432 *(
m
)->
fld
.
tqe_´ev
 = (m)->fld.
tqe_Ãxt
; \

433 }  0)

	)

435 
	#TAILQ_FOREACH
(
v¬
, 
hd
, 
fld
) \

436 (
v¬
èð((
hd
)->
tqh_f¡
); \

437 (
v¬
); \

438 (
v¬
èð((v¬)->
fld
.
tqe_Ãxt
))

	)

440 
	#TAILQ_FOREACH_REVERSE
(
v¬
, 
hd
, 
hdÇme
, 
fld
) \

441 (
v¬
èð(*(((
hdÇme
 *)((
hd
)->
tqh_Ï¡
))->tqh_last)); \

442 (
v¬
); \

443 (
v¬
èð(*(((
hdÇme
 *)((v¬)->
fld
.
tqe_´ev
))->
tqh_Ï¡
)))

	)

445 
	#TAILQ_CONCAT
(
hd1
, 
hd2
, 
fld
) do { \

446 ià(!
	`TAILQ_EMPTY
(
hd2
)) { \

447 *(
hd1
)->
tqh_Ï¡
 = (
hd2
)->
tqh_f¡
; \

448 (
hd2
)->
tqh_f¡
->
fld
.
tqe_´ev
 = (
hd1
)->
tqh_Ï¡
; \

449 (
hd1
)->
tqh_Ï¡
 = (
hd2
)->tqh_last; \

450 
	`TAILQ_INIT
((
hd2
)); \

452 }  0)

	)

457 
	#TAILQ_EMPTY
(
hd
è((hd)->
tqh_f¡
 =ð
NULL
)

	)

458 
	#TAILQ_FIRST
(
hd
è((hd)->
tqh_f¡
)

	)

459 
	#TAILQ_NEXT
(
m
, 
fld
è(Ólm)->fld.
tqe_Ãxt
)

	)

461 
	#TAILQ_LAST
(
hd
, 
hdÇme
) \

462 (*(((
hdÇme
 *)((
hd
)->
tqh_Ï¡
))->tqh_Ï¡))

	)

463 
	#TAILQ_PREV
(
m
, 
hdÇme
, 
fld
) \

464 (*(((
hdÇme
 *)((
m
)->
fld
.
tqe_´ev
))->
tqh_Ï¡
))

	)

470 
	#CIRCLEQ_HEAD
(
Çme
, 
ty³
) \

471 
	sÇme
 { \

472 
ty³
 *
cqh_f¡
; \

473 
ty³
 *
cqh_Ï¡
; \

474 }

	)

476 
	#CIRCLEQ_HEAD_INITIALIZER
(
hd
) \

477 { (*)&
hd
, (*)&hd }

	)

479 
	#CIRCLEQ_ENTRY
(
ty³
) \

481 
ty³
 *
cqe_Ãxt
; \

482 
ty³
 *
cqe_´ev
; \

483 }

	)

488 
	#CIRCLEQ_INIT
(
hd
) do { \

489 (
hd
)->
cqh_f¡
 = (*)(head); \

490 (
hd
)->
cqh_Ï¡
 = (*)(head); \

491 }  0)

	)

493 
	#CIRCLEQ_INSERT_AFTER
(
hd
, 
li¡m
, 
m
, 
fld
) do { \

494 (
m
)->
fld
.
cqe_Ãxt
 = (
li¡m
)->field.cqe_next; \

495 (
m
)->
fld
.
cqe_´ev
 = (
li¡m
); \

496 ià((
li¡m
)->
fld
.
cqe_Ãxt
 =ð(*)(
hd
)) \

497 (
hd
)->
cqh_Ï¡
 = (
m
); \

499 (
li¡m
)->
fld
.
cqe_Ãxt
->fld.
cqe_´ev
 = (
m
); \

500 (
li¡m
)->
fld
.
cqe_Ãxt
 = (
m
); \

501 }  0)

	)

503 
	#CIRCLEQ_INSERT_BEFORE
(
hd
, 
li¡m
, 
m
, 
fld
) do { \

504 (
m
)->
fld
.
cqe_Ãxt
 = (
li¡m
); \

505 (
m
)->
fld
.
cqe_´ev
 = (
li¡m
)->field.cqe_prev; \

506 ià((
li¡m
)->
fld
.
cqe_´ev
 =ð(*)(
hd
)) \

507 (
hd
)->
cqh_f¡
 = (
m
); \

509 (
li¡m
)->
fld
.
cqe_´ev
->fld.
cqe_Ãxt
 = (
m
); \

510 (
li¡m
)->
fld
.
cqe_´ev
 = (
m
); \

511 }  0)

	)

513 
	#CIRCLEQ_INSERT_HEAD
(
hd
, 
m
, 
fld
) do { \

514 (
m
)->
fld
.
cqe_Ãxt
 = (
hd
)->
cqh_f¡
; \

515 (
m
)->
fld
.
cqe_´ev
 = (*)(
hd
); \

516 ià((
hd
)->
cqh_Ï¡
 == (*)(head)) \

517 (
hd
)->
cqh_Ï¡
 = (
m
); \

519 (
hd
)->
cqh_f¡
->
fld
.
cqe_´ev
 = (
m
); \

520 (
hd
)->
cqh_f¡
 = (
m
); \

521 }  0)

	)

523 
	#CIRCLEQ_INSERT_TAIL
(
hd
, 
m
, 
fld
) do { \

524 (
m
)->
fld
.
cqe_Ãxt
 = (*)(
hd
); \

525 (
m
)->
fld
.
cqe_´ev
 = (
hd
)->
cqh_Ï¡
; \

526 ià((
hd
)->
cqh_f¡
 == (*)(head)) \

527 (
hd
)->
cqh_f¡
 = (
m
); \

529 (
hd
)->
cqh_Ï¡
->
fld
.
cqe_Ãxt
 = (
m
); \

530 (
hd
)->
cqh_Ï¡
 = (
m
); \

531 }  0)

	)

533 
	#CIRCLEQ_REMOVE
(
hd
, 
m
, 
fld
) do { \

534 ià((
m
)->
fld
.
cqe_Ãxt
 =ð(*)(
hd
)) \

535 (
hd
)->
cqh_Ï¡
 = (
m
)->
fld
.
cqe_´ev
; \

537 (
m
)->
fld
.
cqe_Ãxt
->fld.
cqe_´ev
 = \

538 (
m
)->
fld
.
cqe_´ev
; \

539 ià((
m
)->
fld
.
cqe_´ev
 =ð(*)(
hd
)) \

540 (
hd
)->
cqh_f¡
 = (
m
)->
fld
.
cqe_Ãxt
; \

542 (
m
)->
fld
.
cqe_´ev
->fld.
cqe_Ãxt
 = \

543 (
m
)->
fld
.
cqe_Ãxt
; \

544 }  0)

	)

546 
	#CIRCLEQ_FOREACH
(
v¬
, 
hd
, 
fld
) \

547 (
v¬
èð((
hd
)->
cqh_f¡
); \

548 (
v¬
è!ð(cÚ¡ *)(
hd
); \

549 (
v¬
èð((v¬)->
fld
.
cqe_Ãxt
))

	)

551 
	#CIRCLEQ_FOREACH_REVERSE
(
v¬
, 
hd
, 
fld
) \

552 (
v¬
èð((
hd
)->
cqh_Ï¡
); \

553 (
v¬
è!ð(cÚ¡ *)(
hd
); \

554 (
v¬
èð((v¬)->
fld
.
cqe_´ev
))

	)

559 
	#CIRCLEQ_EMPTY
(
hd
è((hd)->
cqh_f¡
 =ð(*)(hd))

	)

560 
	#CIRCLEQ_FIRST
(
hd
è((hd)->
cqh_f¡
)

	)

561 
	#CIRCLEQ_LAST
(
hd
è((hd)->
cqh_Ï¡
)

	)

562 
	#CIRCLEQ_NEXT
(
m
, 
fld
è(Ólm)->fld.
cqe_Ãxt
)

	)

563 
	#CIRCLEQ_PREV
(
m
, 
fld
è(Ólm)->fld.
cqe_´ev
)

	)

565 
	#CIRCLEQ_LOOP_NEXT
(
hd
, 
m
, 
fld
) \

566 (((
m
)->
fld
.
cqe_Ãxt
 =ð(*)(
hd
)) \

567 ? ((
hd
)->
cqh_f¡
) \

568 : (
m
->
fld
.
cqe_Ãxt
))

	)

569 
	#CIRCLEQ_LOOP_PREV
(
hd
, 
m
, 
fld
) \

570 (((
m
)->
fld
.
cqe_´ev
 =ð(*)(
hd
)) \

571 ? ((
hd
)->
cqh_Ï¡
) \

572 : (
m
->
fld
.
cqe_´ev
))

	)

	@/usr/include/sys/socket.h

19 #iâdef 
_SYS_SOCKET_H


20 
	#_SYS_SOCKET_H
 1

	)

22 
	~<ã©u»s.h
>

24 
	g__BEGIN_DECLS


26 
	~<sys/uio.h
>

27 
	#__Ãed_size_t


	)

28 
	~<¡ddef.h
>

29 #ifdeà
__USE_GNU


31 
	~<bs/sig£t.h
>

38 
	~<bs/sock.h
>

40 #ifdeà
__USE_BSD


43 
	sosockaddr


45 
	m§_çmy
;

46 
	m§_d©a
[14];

54 
	mSHUT_RD
 = 0,

55 
	#SHUT_RD
 
SHUT_RD


	)

56 
	mSHUT_WR
,

57 
	#SHUT_WR
 
SHUT_WR


	)

58 
	mSHUT_RDWR


59 
	#SHUT_RDWR
 
SHUT_RDWR


	)

68 #ià
defed
 
__ýlu¥lus
 || !
__GNUC_PREREQ
 (2, 7è|| !defed 
__USE_GNU


69 
	#__SOCKADDR_ARG
 
sockaddr
 *
__»¡riù


	)

70 
	#__CONST_SOCKADDR_ARG
 cÚ¡ 
sockaddr
 *

	)

74 
	#__SOCKADDR_ALLTYPES
 \

75 
	`__SOCKADDR_ONETYPE
 (
sockaddr
) \

76 
	`__SOCKADDR_ONETYPE
 (
sockaddr_©
) \

77 
	`__SOCKADDR_ONETYPE
 (
sockaddr_ax25
) \

78 
	`__SOCKADDR_ONETYPE
 (
sockaddr_dl
) \

79 
	`__SOCKADDR_ONETYPE
 (
sockaddr_eÚ
) \

80 
	`__SOCKADDR_ONETYPE
 (
sockaddr_
) \

81 
	`__SOCKADDR_ONETYPE
 (
sockaddr_6
) \

82 
	`__SOCKADDR_ONETYPE
 (
sockaddr_¬p
) \

83 
	`__SOCKADDR_ONETYPE
 (
sockaddr_x
) \

84 
	`__SOCKADDR_ONETYPE
 (
sockaddr_iso
) \

85 
	`__SOCKADDR_ONETYPE
 (
sockaddr_ns
) \

86 
	`__SOCKADDR_ONETYPE
 (
sockaddr_un
) \

87 
	`__SOCKADDR_ONETYPE
 (
sockaddr_x25
)

	)

89 
	#__SOCKADDR_ONETYPE
(
ty³
èty³ *
__»¡riù
 
__
##ty³##__;

	)

90 uniÚ { 
	m__SOCKADDR_ALLTYPES


91 } 
	t__SOCKADDR_ARG
 
	t__©ibu__
 ((
	t__ª¥¬t_uniÚ__
));

92 #undeà
__SOCKADDR_ONETYPE


93 
	#__SOCKADDR_ONETYPE
(
ty³
ècÚ¡ ty³ *
__»¡riù
 
__
##ty³##__;

	)

94 uniÚ { 
	m__SOCKADDR_ALLTYPES


95 } 
	t__CONST_SOCKADDR_ARG
 
	t__©ibu__
 ((
	t__ª¥¬t_uniÚ__
));

96 #undeà
__SOCKADDR_ONETYPE


99 #ifdeà
__USE_GNU


101 
	smmsghdr


103 
msghdr
 
	mmsg_hdr
;

104 
	mmsg_Ën
;

113 
	$sock
 (
__doma
, 
__ty³
, 
__´ÙocÞ
è
__THROW
;

119 
	$sock·
 (
__doma
, 
__ty³
, 
__´ÙocÞ
,

120 
__fds
[2]è
__THROW
;

123 
	$bd
 (
__fd
, 
__CONST_SOCKADDR_ARG
 
__addr
, 
sockËn_t
 
__Ën
)

124 
__THROW
;

127 
	$gsockÇme
 (
__fd
, 
__SOCKADDR_ARG
 
__addr
,

128 
sockËn_t
 *
__»¡riù
 
__Ën
è
__THROW
;

137 
	`cÚÃù
 (
__fd
, 
__CONST_SOCKADDR_ARG
 
__addr
, 
sockËn_t
 
__Ën
);

141 
	$g³Çme
 (
__fd
, 
__SOCKADDR_ARG
 
__addr
,

142 
sockËn_t
 *
__»¡riù
 
__Ën
è
__THROW
;

149 
ssize_t
 
	`£nd
 (
__fd
, cÚ¡ *
__buf
, 
size_t
 
__n
, 
__æags
);

156 
ssize_t
 
	`»cv
 (
__fd
, *
__buf
, 
size_t
 
__n
, 
__æags
);

163 
ssize_t
 
	`£ndto
 (
__fd
, cÚ¡ *
__buf
, 
size_t
 
__n
,

164 
__æags
, 
__CONST_SOCKADDR_ARG
 
__addr
,

165 
sockËn_t
 
__addr_Ën
);

174 
ssize_t
 
	`»cväom
 (
__fd
, *
__»¡riù
 
__buf
, 
size_t
 
__n
,

175 
__æags
, 
__SOCKADDR_ARG
 
__addr
,

176 
sockËn_t
 *
__»¡riù
 
__addr_Ën
);

184 
ssize_t
 
	`£ndmsg
 (
__fd
, cÚ¡ 
msghdr
 *
__mes§ge
,

185 
__æags
);

187 #ifdeà
__USE_GNU


193 
	`£ndmmsg
 (
__fd
, 
mmsghdr
 *
__vmes§ges
,

194 
__vËn
, 
__æags
);

202 
ssize_t
 
	`»cvmsg
 (
__fd
, 
msghdr
 *
__mes§ge
, 
__æags
);

204 #ifdeà
__USE_GNU


210 
	`»cvmmsg
 (
__fd
, 
mmsghdr
 *
__vmes§ges
,

211 
__vËn
, 
__æags
,

212 cÚ¡ 
time¥ec
 *
__tmo
);

219 
	$gsockÝt
 (
__fd
, 
__Ëv
, 
__Ýame
,

220 *
__»¡riù
 
__Ýtv®
,

221 
sockËn_t
 *
__»¡riù
 
__Ý
è
__THROW
;

226 
	$£tsockÝt
 (
__fd
, 
__Ëv
, 
__Ýame
,

227 cÚ¡ *
__Ýtv®
, 
sockËn_t
 
__Ý
è
__THROW
;

233 
	$li¡
 (
__fd
, 
__n
è
__THROW
;

243 
	`acû±
 (
__fd
, 
__SOCKADDR_ARG
 
__addr
,

244 
sockËn_t
 *
__»¡riù
 
__addr_Ën
);

246 #ifdeà
__USE_GNU


251 
	`acû±4
 (
__fd
, 
__SOCKADDR_ARG
 
__addr
,

252 
sockËn_t
 *
__»¡riù
 
__addr_Ën
, 
__æags
);

261 
	$shutdown
 (
__fd
, 
__how
è
__THROW
;

264 #ifdeà
__USE_XOPEN2K


266 
	$sock©m¬k
 (
__fd
è
__THROW
;

270 #ifdeà
__USE_MISC


274 
	$isfdty³
 (
__fd
, 
__fdty³
è
__THROW
;

279 #ià
__USE_FORTIFY_LEVEL
 > 0 && 
defed
 
__fÜtify_funùiÚ


280 
	~<bs/sock2.h
>

283 
__END_DECLS


	@/usr/include/sys/types.h

22 #iâdef 
_SYS_TYPES_H


23 
	#_SYS_TYPES_H
 1

	)

25 
	~<ã©u»s.h
>

27 
	g__BEGIN_DECLS


29 
	~<bs/ty³s.h
>

31 #ifdef 
__USE_BSD


32 #iâdeà
__u_ch¬_defed


33 
__u_ch¬
 
	tu_ch¬
;

34 
__u_shÜt
 
	tu_shÜt
;

35 
__u_t
 
	tu_t
;

36 
__u_lÚg
 
	tu_lÚg
;

37 
__quad_t
 
	tquad_t
;

38 
__u_quad_t
 
	tu_quad_t
;

39 
__fsid_t
 
	tfsid_t
;

40 
	#__u_ch¬_defed


	)

44 
__loff_t
 
	tloff_t
;

46 #iâdeà
__o_t_defed


47 #iâdeà
__USE_FILE_OFFSET64


48 
__o_t
 
	to_t
;

50 
__o64_t
 
	to_t
;

52 
	#__o_t_defed


	)

54 #ià
defed
 
__USE_LARGEFILE64
 && !defed 
__o64_t_defed


55 
__o64_t
 
	to64_t
;

56 
	#__o64_t_defed


	)

59 #iâdeà
__dev_t_defed


60 
__dev_t
 
	tdev_t
;

61 
	#__dev_t_defed


	)

64 #iâdeà
__gid_t_defed


65 
__gid_t
 
	tgid_t
;

66 
	#__gid_t_defed


	)

69 #iâdeà
__mode_t_defed


70 
__mode_t
 
	tmode_t
;

71 
	#__mode_t_defed


	)

74 #iâdeà
__Æk_t_defed


75 
__Æk_t
 
	tÆk_t
;

76 
	#__Æk_t_defed


	)

79 #iâdeà
__uid_t_defed


80 
__uid_t
 
	tuid_t
;

81 
	#__uid_t_defed


	)

84 #iâdeà
__off_t_defed


85 #iâdeà
__USE_FILE_OFFSET64


86 
__off_t
 
	toff_t
;

88 
__off64_t
 
	toff_t
;

90 
	#__off_t_defed


	)

92 #ià
defed
 
__USE_LARGEFILE64
 && !defed 
__off64_t_defed


93 
__off64_t
 
	toff64_t
;

94 
	#__off64_t_defed


	)

97 #iâdeà
__pid_t_defed


98 
__pid_t
 
	tpid_t
;

99 
	#__pid_t_defed


	)

102 #ià(
defed
 
__USE_SVID
 || defed 
__USE_XOPEN
 || defed 
__USE_XOPEN2K8
) \

103 && !
defed
 
__id_t_defed


104 
__id_t
 
	tid_t
;

105 
	#__id_t_defed


	)

108 #iâdeà
__ssize_t_defed


109 
__ssize_t
 
	tssize_t
;

110 
	#__ssize_t_defed


	)

113 #ifdef 
__USE_BSD


114 #iâdeà
__daddr_t_defed


115 
__daddr_t
 
	tdaddr_t
;

116 
__ÿddr_t
 
	tÿddr_t
;

117 
	#__daddr_t_defed


	)

121 #ià(
defed
 
__USE_SVID
 || defed 
__USE_XOPEN
è&& !defed 
__key_t_defed


122 
__key_t
 
	tkey_t
;

123 
	#__key_t_defed


	)

126 #ià
defed
 
__USE_XOPEN
 || defed 
__USE_XOPEN2K8


127 
	#__Ãed_þock_t


	)

129 
	#__Ãed_time_t


	)

130 
	#__Ãed_tim_t


	)

131 
	#__Ãed_þockid_t


	)

132 
	~<time.h
>

134 #ifdeà
__USE_XOPEN


135 #iâdeà
__u£cÚds_t_defed


136 
__u£cÚds_t
 
	tu£cÚds_t
;

137 
	#__u£cÚds_t_defed


	)

139 #iâdeà
__su£cÚds_t_defed


140 
__su£cÚds_t
 
	tsu£cÚds_t
;

141 
	#__su£cÚds_t_defed


	)

145 
	#__Ãed_size_t


	)

146 
	~<¡ddef.h
>

148 #ifdeà
__USE_MISC


150 
	tulÚg
;

151 
	tushÜt
;

152 
	tut
;

157 #ià!
__GNUC_PREREQ
 (2, 7)

160 #iâdeà
__t8_t_defed


161 
	#__t8_t_defed


	)

162 
	tt8_t
;

163 
	tt16_t
;

164 
	tt32_t
;

165 #ià
__WORDSIZE
 == 64

166 
	tt64_t
;

168 
__exnsiÚ__
 
	tt64_t
;

173 
	tu_t8_t
;

174 
	tu_t16_t
;

175 
	tu_t32_t
;

176 #ià
__WORDSIZE
 == 64

177 
	tu_t64_t
;

179 
__exnsiÚ__
 
	tu_t64_t
;

182 
	t»gi¡_t
;

187 
	#__tN_t
(
N
, 
MODE
) \

188 ##
	tN
##
	t_t
 
	t__©ibu__
 ((
	t__mode__
 (
	tMODE
)))

	)

189 
	t__u_tN_t
(
	tN
, 
	tMODE
) \

190 
	tu_t
##
	tN
##
	t_t
 
	t__©ibu__
 ((
	t__mode__
 (
	tMODE
)))

	)

192 #iâdeà
	t__t8_t_defed


193 
	t__t8_t_defed


	)

194 
	t__tN_t
 (8, 
	t__QI__
);

195 
__tN_t
 (16, 
__HI__
);

196 
__tN_t
 (32, 
__SI__
);

197 
__tN_t
 (64, 
__DI__
);

200 
__u_tN_t
 (8, 
__QI__
);

201 
__u_tN_t
 (16, 
__HI__
);

202 
__u_tN_t
 (32, 
__SI__
);

203 
__u_tN_t
 (64, 
__DI__
);

205 
	t»gi¡_t
 
	t__©ibu__
 ((
	t__mode__
 (
	t__wÜd__
)));

211 
	#__BIT_TYPES_DEFINED__
 1

	)

214 #ifdef 
__USE_BSD


216 
	~<dn.h
>

219 
	~<sys/£Ëù.h
>

222 
	~<sys/sysmaüos.h
>

226 #ià(
defed
 
__USE_UNIX98
 || defed 
__USE_XOPEN2K8
) \

227 && !
defed
 
__blksize_t_defed


228 
__blksize_t
 
	tblksize_t
;

229 
	#__blksize_t_defed


	)

233 #iâdeà
__USE_FILE_OFFSET64


234 #iâdeà
__blkút_t_defed


235 
__blkút_t
 
	tblkút_t
;

236 
	#__blkút_t_defed


	)

238 #iâdeà
__fsblkút_t_defed


239 
__fsblkút_t
 
	tfsblkút_t
;

240 
	#__fsblkút_t_defed


	)

242 #iâdeà
__fsfút_t_defed


243 
__fsfút_t
 
	tfsfút_t
;

244 
	#__fsfút_t_defed


	)

247 #iâdeà
__blkút_t_defed


248 
__blkút64_t
 
	tblkút_t
;

249 
	#__blkút_t_defed


	)

251 #iâdeà
__fsblkút_t_defed


252 
__fsblkút64_t
 
	tfsblkút_t
;

253 
	#__fsblkút_t_defed


	)

255 #iâdeà
__fsfút_t_defed


256 
__fsfút64_t
 
	tfsfút_t
;

257 
	#__fsfút_t_defed


	)

261 #ifdeà
__USE_LARGEFILE64


262 
__blkút64_t
 
	tblkút64_t
;

263 
__fsblkút64_t
 
	tfsblkút64_t
;

264 
__fsfút64_t
 
	tfsfút64_t
;

269 #ià
defed
 
__USE_POSIX199506
 || defed 
__USE_UNIX98


270 
	~<bs/±h»adty³s.h
>

273 
	g__END_DECLS


	@/usr/include/termios.h

22 #iâdef 
_TERMIOS_H


23 
	#_TERMIOS_H
 1

	)

25 
	~<ã©u»s.h
>

26 #ià
defed
 
__USE_UNIX98
 || defed 
__USE_XOPEN2K8


28 
	~<bs/ty³s.h
>

29 #iâdeà
__pid_t_defed


30 
__pid_t
 
	tpid_t
;

31 
	#__pid_t_defed


	)

35 
	g__BEGIN_DECLS


39 
	~<bs/rmios.h
>

41 #ifdeà
__USE_BSD


44 
	#CCEQ
(
v®
, 
c
è((cè=ð(v®è&& (v®è!ð
_POSIX_VDISABLE
)

	)

48 
¥d_t
 
	$cfgo¥d
 (cÚ¡ 
rmios
 *
__rmios_p
è
__THROW
;

51 
¥d_t
 
	$cfgi¥d
 (cÚ¡ 
rmios
 *
__rmios_p
è
__THROW
;

54 
	$cf£to¥d
 (
rmios
 *
__rmios_p
, 
¥d_t
 
__¥d
è
__THROW
;

57 
	$cf£ti¥d
 (
rmios
 *
__rmios_p
, 
¥d_t
 
__¥d
è
__THROW
;

59 #ifdef 
__USE_BSD


61 
	$cf£t¥d
 (
rmios
 *
__rmios_p
, 
¥d_t
 
__¥d
è
__THROW
;

66 
	$tcg©
 (
__fd
, 
rmios
 *
__rmios_p
è
__THROW
;

70 
	$tc£r
 (
__fd
, 
__ÝtiÚ®_aùiÚs
,

71 cÚ¡ 
rmios
 *
__rmios_p
è
__THROW
;

74 #ifdef 
__USE_BSD


76 
	$cfmakaw
 (
rmios
 *
__rmios_p
è
__THROW
;

80 
	$tc£ndb»ak
 (
__fd
, 
__du¿tiÚ
è
__THROW
;

86 
	`tcd¿
 (
__fd
);

90 
	$tcæush
 (
__fd
, 
__queue_£ËùÜ
è
__THROW
;

94 
	$tcæow
 (
__fd
, 
__aùiÚ
è
__THROW
;

97 #ià
defed
 
__USE_UNIX98
 || defed 
__USE_XOPEN2K8


99 
__pid_t
 
	$tcgsid
 (
__fd
è
__THROW
;

103 #ifdeà
__USE_BSD


104 
	~<sys/ydeçuÉs.h
>

107 
__END_DECLS


	@/usr/include/time.h

22 #iâdef 
_TIME_H


24 #ià(! 
defed
 
__Ãed_time_t
 && !defed 
__Ãed_þock_t
 && \

25 ! 
defed
 
	g__Ãed_time¥ec
)

26 
	#_TIME_H
 1

	)

27 
	~<ã©u»s.h
>

29 
	g__BEGIN_DECLS


33 #ifdef 
_TIME_H


35 
	#__Ãed_size_t


	)

36 
	#__Ãed_NULL


	)

37 
	~<¡ddef.h
>

41 
	~<bs/time.h
>

44 #ià!
defed
 
__STRICT_ANSI__
 && !defed 
__USE_XOPEN2K


45 #iâdeà
CLK_TCK


46 
	#CLK_TCK
 
CLOCKS_PER_SEC


	)

52 #ià!
defed
 
__þock_t_defed
 && (defed 
_TIME_H
 || defed 
__Ãed_þock_t
)

53 
	#__þock_t_defed
 1

	)

55 
	~<bs/ty³s.h
>

57 
__BEGIN_NAMESPACE_STD


59 
__þock_t
 
	tþock_t
;

60 
	g__END_NAMESPACE_STD


61 #ià
defed
 
__USE_XOPEN
 || defed 
__USE_POSIX
 || defed 
__USE_MISC


62 
	$__USING_NAMESPACE_STD
(
þock_t
)

66 #undeà
__Ãed_þock_t


68 #ià!
defed
 
__time_t_defed
 && (defed 
_TIME_H
 || defed 
__Ãed_time_t
)

69 
	#__time_t_defed
 1

	)

71 
	~<bs/ty³s.h
>

73 
__BEGIN_NAMESPACE_STD


75 
__time_t
 
	ttime_t
;

76 
__END_NAMESPACE_STD


77 #ià
defed
 
__USE_POSIX
 || defed 
__USE_MISC
 || defed 
__USE_SVID


78 
	$__USING_NAMESPACE_STD
(
time_t
)

82 #undeà
__Ãed_time_t


84 #ià!
defed
 
__þockid_t_defed
 && \

85 ((
defed
 
_TIME_H
 && defed 
__USE_POSIX199309
è|| defed 
__Ãed_þockid_t
)

86 
	#__þockid_t_defed
 1

	)

88 
	~<bs/ty³s.h
>

91 
__þockid_t
 
	tþockid_t
;

94 #undeà
__þockid_time_t


96 #ià!
defed
 
__tim_t_defed
 && \

97 ((
defed
 
_TIME_H
 && defed 
__USE_POSIX199309
è|| defed 
__Ãed_tim_t
)

98 
	#__tim_t_defed
 1

	)

100 
	~<bs/ty³s.h
>

103 
__tim_t
 
	ttim_t
;

106 #undeà
__Ãed_tim_t


109 #ià(!
defed
 
__time¥ec_defed
 \

110 && ((
defed
 
_TIME_H
 \

111 && (
defed
 
__USE_POSIX199309
 || defed 
__USE_MISC
 \

112 || 
defed
 
__USE_ISOC11
)) \

113 || 
defed
 
__Ãed_time¥ec
))

114 
	#__time¥ec_defed
 1

	)

116 
	~<bs/ty³s.h
>

120 
	stime¥ec


122 
__time_t
 
tv_£c
;

123 
__sysÿÎ_¦Úg_t
 
tv_n£c
;

127 #undeà
__Ãed_time¥ec


130 #ifdef 
_TIME_H


131 
__BEGIN_NAMESPACE_STD


133 
	stm


135 
tm_£c
;

136 
tm_m
;

137 
tm_hour
;

138 
tm_mday
;

139 
tm_mÚ
;

140 
tm_yr
;

141 
tm_wday
;

142 
tm_yday
;

143 
tm_isd¡
;

145 #ifdef 
__USE_BSD


146 
tm_gmtoff
;

147 cÚ¡ *
tm_zÚe
;

149 
__tm_gmtoff
;

150 cÚ¡ *
__tm_zÚe
;

153 
__END_NAMESPACE_STD


154 #ià
defed
 
__USE_XOPEN
 || defed 
__USE_POSIX
 || defed 
__USE_MISC


155 
	$__USING_NAMESPACE_STD
(
tm
)

159 #ifdeà
__USE_POSIX199309


161 
	sim¥ec


163 
time¥ec
 
_rv®
;

164 
time¥ec
 
_v®ue
;

168 
sigevt
;

172 #ifdeà
__USE_XOPEN2K


173 #iâdeà
__pid_t_defed


174 
__pid_t
 
	tpid_t
;

175 
	#__pid_t_defed


	)

180 #ifdeà
__USE_ISOC11


182 
	#TIME_UTC
 1

	)

186 
__BEGIN_NAMESPACE_STD


189 
þock_t
 
	$þock
 (è
__THROW
;

192 
time_t
 
	$time
 (
time_t
 *
__tim
è
__THROW
;

195 
	$difáime
 (
time_t
 
__time1
,ime_
__time0
)

196 
__THROW
 
	`__©ibu__
 ((
__cÚ¡__
));

199 
time_t
 
	$mktime
 (
tm
 *
__
è
__THROW
;

205 
size_t
 
	$¡ráime
 (*
__»¡riù
 
__s
, 
size_t
 
__maxsize
,

206 cÚ¡ *
__»¡riù
 
__fÜm©
,

207 cÚ¡ 
tm
 *
__»¡riù
 
__
è
__THROW
;

208 
__END_NAMESPACE_STD


210 #ifdeà
__USE_XOPEN


213 *
	$¡½time
 (cÚ¡ *
__»¡riù
 
__s
,

214 cÚ¡ *
__»¡riù
 
__fmt
, 
tm
 *
__
)

215 
__THROW
;

218 #ifdeà
__USE_XOPEN2K8


221 
	~<xloÿË.h
>

223 
size_t
 
	$¡ráime_l
 (*
__»¡riù
 
__s
, 
size_t
 
__maxsize
,

224 cÚ¡ *
__»¡riù
 
__fÜm©
,

225 cÚ¡ 
tm
 *
__»¡riù
 
__
,

226 
__loÿË_t
 
__loc
è
__THROW
;

229 #ifdeà
__USE_GNU


230 *
	$¡½time_l
 (cÚ¡ *
__»¡riù
 
__s
,

231 cÚ¡ *
__»¡riù
 
__fmt
, 
tm
 *
__
,

232 
__loÿË_t
 
__loc
è
__THROW
;

236 
__BEGIN_NAMESPACE_STD


239 
tm
 *
	$gmtime
 (cÚ¡ 
time_t
 *
__tim
è
__THROW
;

243 
tm
 *
	$loÿÉime
 (cÚ¡ 
time_t
 *
__tim
è
__THROW
;

244 
__END_NAMESPACE_STD


246 #ià
defed
 
__USE_POSIX
 || defed 
__USE_MISC


249 
tm
 *
	$gmtime_r
 (cÚ¡ 
time_t
 *
__»¡riù
 
__tim
,

250 
tm
 *
__»¡riù
 
__
è
__THROW
;

254 
tm
 *
	$loÿÉime_r
 (cÚ¡ 
time_t
 *
__»¡riù
 
__tim
,

255 
tm
 *
__»¡riù
 
__
è
__THROW
;

258 
__BEGIN_NAMESPACE_STD


261 *
	$asùime
 (cÚ¡ 
tm
 *
__
è
__THROW
;

264 *
	$ùime
 (cÚ¡ 
time_t
 *
__tim
è
__THROW
;

265 
__END_NAMESPACE_STD


267 #ià
defed
 
__USE_POSIX
 || defed 
__USE_MISC


272 *
	$asùime_r
 (cÚ¡ 
tm
 *
__»¡riù
 
__
,

273 *
__»¡riù
 
__buf
è
__THROW
;

276 *
	$ùime_r
 (cÚ¡ 
time_t
 *
__»¡riù
 
__tim
,

277 *
__»¡riù
 
__buf
è
__THROW
;

282 *
__tzÇme
[2];

283 
__daylight
;

284 
__timezÚe
;

287 #ifdef 
__USE_POSIX


289 *
tzÇme
[2];

293 
	$tz£t
 (è
__THROW
;

296 #ià
defed
 
__USE_SVID
 || defed 
__USE_XOPEN


297 
daylight
;

298 
timezÚe
;

301 #ifdeà
__USE_SVID


304 
	$¡ime
 (cÚ¡ 
time_t
 *
__wh
è
__THROW
;

310 
	#__i¦p
(
yr
) \

311 ((
yr
è% 4 =ð0 && ((yrè% 100 !ð0 || (yrè% 400 =ð0))

	)

314 #ifdeà
__USE_MISC


319 
time_t
 
	$timegm
 (
tm
 *
__
è
__THROW
;

322 
time_t
 
	$timoÿl
 (
tm
 *
__
è
__THROW
;

325 
	$dysize
 (
__yr
è
__THROW
 
	`__©ibu__
 ((
__cÚ¡__
));

329 #ifdeà
__USE_POSIX199309


334 
	`Çno¦p
 (cÚ¡ 
time¥ec
 *
__»que¡ed_time
,

335 
time¥ec
 *
__»mag
);

339 
	$þock_g»s
 (
þockid_t
 
__þock_id
, 
time¥ec
 *
__»s
è
__THROW
;

342 
	$þock_gtime
 (
þockid_t
 
__þock_id
, 
time¥ec
 *
__
è
__THROW
;

345 
	$þock_£ime
 (
þockid_t
 
__þock_id
, cÚ¡ 
time¥ec
 *
__
)

346 
__THROW
;

348 #ifdeà
__USE_XOPEN2K


353 
	`þock_Çno¦p
 (
þockid_t
 
__þock_id
, 
__æags
,

354 cÚ¡ 
time¥ec
 *
__»q
,

355 
time¥ec
 *
__»m
);

358 
	$þock_gýuþockid
 (
pid_t
 
__pid
, 
þockid_t
 *
__þock_id
è
__THROW
;

363 
	$tim_ü
 (
þockid_t
 
__þock_id
,

364 
sigevt
 *
__»¡riù
 
__evp
,

365 
tim_t
 *
__»¡riù
 
__timid
è
__THROW
;

368 
	$tim_de
 (
tim_t
 
__timid
è
__THROW
;

371 
	$tim_£ime
 (
tim_t
 
__timid
, 
__æags
,

372 cÚ¡ 
im¥ec
 *
__»¡riù
 
__v®ue
,

373 
im¥ec
 *
__»¡riù
 
__ov®ue
è
__THROW
;

376 
	$tim_gtime
 (
tim_t
 
__timid
, 
im¥ec
 *
__v®ue
)

377 
__THROW
;

380 
	$tim_govrun
 (
tim_t
 
__timid
è
__THROW
;

384 #ifdeà
__USE_ISOC11


386 
	$time¥ec_g
 (
time¥ec
 *
__ts
, 
__ba£
)

387 
__THROW
 
	`__nÚnuÎ
 ((1));

391 #ifdeà
__USE_XOPEN_EXTENDED


403 
gd©e_r
;

412 
tm
 *
	`gd©e
 (cÚ¡ *
__¡rg
);

415 #ifdeà
__USE_GNU


426 
	`gd©e_r
 (cÚ¡ *
__»¡riù
 
__¡rg
,

427 
tm
 *
__»¡riù
 
__»sbuå
);

430 
__END_DECLS


	@/usr/include/unistd.h

22 #iâdef 
_UNISTD_H


23 
	#_UNISTD_H
 1

	)

25 
	~<ã©u»s.h
>

27 
	g__BEGIN_DECLS


32 #ifdeà
__USE_XOPEN2K8


34 
	#_POSIX_VERSION
 200809L

	)

35 #ià
defed
 
__USE_XOPEN2K


37 
	#_POSIX_VERSION
 200112L

	)

38 #ià
defed
 
__USE_POSIX199506


40 
	#_POSIX_VERSION
 199506L

	)

41 #ià
defed
 
__USE_POSIX199309


43 
	#_POSIX_VERSION
 199309L

	)

46 
	#_POSIX_VERSION
 199009L

	)

52 #ifdeà
__USE_XOPEN2K8


53 
	#__POSIX2_THIS_VERSION
 200809L

	)

55 #ià
defed
 
__USE_XOPEN2K


57 
	#__POSIX2_THIS_VERSION
 200112L

	)

58 #ià
defed
 
__USE_POSIX199506


60 
	#__POSIX2_THIS_VERSION
 199506L

	)

63 
	#__POSIX2_THIS_VERSION
 199209L

	)

67 
	#_POSIX2_VERSION
 
__POSIX2_THIS_VERSION


	)

71 
	#_POSIX2_C_BIND
 
__POSIX2_THIS_VERSION


	)

75 
	#_POSIX2_C_DEV
 
__POSIX2_THIS_VERSION


	)

79 
	#_POSIX2_SW_DEV
 
__POSIX2_THIS_VERSION


	)

83 
	#_POSIX2_LOCALEDEF
 
__POSIX2_THIS_VERSION


	)

86 #ifdeà
__USE_XOPEN2K8


87 
	#_XOPEN_VERSION
 700

	)

88 #ià
defed
 
__USE_XOPEN2K


89 
	#_XOPEN_VERSION
 600

	)

90 #ià
defed
 
__USE_UNIX98


91 
	#_XOPEN_VERSION
 500

	)

93 
	#_XOPEN_VERSION
 4

	)

97 
	#_XOPEN_XCU_VERSION
 4

	)

100 
	#_XOPEN_XPG2
 1

	)

101 
	#_XOPEN_XPG3
 1

	)

102 
	#_XOPEN_XPG4
 1

	)

105 
	#_XOPEN_UNIX
 1

	)

108 
	#_XOPEN_CRYPT
 1

	)

112 
	#_XOPEN_ENH_I18N
 1

	)

115 
	#_XOPEN_LEGACY
 1

	)

202 
	~<bs/posix_Ýt.h
>

205 #ià
defed
 
__USE_UNIX98
 || defed 
__USE_XOPEN2K


206 
	~<bs/vÚmts.h
>

210 
	#STDIN_FILENO
 0

	)

211 
	#STDOUT_FILENO
 1

	)

212 
	#STDERR_FILENO
 2

	)

217 
	~<bs/ty³s.h
>

219 #iâdef 
__ssize_t_defed


220 
__ssize_t
 
	tssize_t
;

221 
	#__ssize_t_defed


	)

224 
	#__Ãed_size_t


	)

225 
	#__Ãed_NULL


	)

226 
	~<¡ddef.h
>

228 #ià
defed
 
__USE_XOPEN
 || defed 
__USE_XOPEN2K


231 #iâdeà
__gid_t_defed


232 
__gid_t
 
	tgid_t
;

233 
	#__gid_t_defed


	)

236 #iâdeà
__uid_t_defed


237 
__uid_t
 
	tuid_t
;

238 
	#__uid_t_defed


	)

241 #iâdeà
__off_t_defed


242 #iâdeà
__USE_FILE_OFFSET64


243 
__off_t
 
	toff_t
;

245 
__off64_t
 
	toff_t
;

247 
	#__off_t_defed


	)

249 #ià
defed
 
__USE_LARGEFILE64
 && !defed 
__off64_t_defed


250 
__off64_t
 
	toff64_t
;

251 
	#__off64_t_defed


	)

254 #iâdeà
__u£cÚds_t_defed


255 
__u£cÚds_t
 
	tu£cÚds_t
;

256 
	#__u£cÚds_t_defed


	)

259 #iâdeà
__pid_t_defed


260 
__pid_t
 
	tpid_t
;

261 
	#__pid_t_defed


	)

265 #ià
defed
 
__USE_MISC
 || defed 
__USE_XOPEN_EXTENDED
 || defed 
__USE_XOPEN2K


266 #iâdeà
___t_defed


267 
___t
 
	t_t
;

268 
	#___t_defed


	)

272 #ià
defed
 
__USE_BSD
 || defed 
__USE_XOPEN


273 #iâdeà
__sockËn_t_defed


274 
__sockËn_t
 
	tsockËn_t
;

275 
	#__sockËn_t_defed


	)

281 
	#R_OK
 4

	)

282 
	#W_OK
 2

	)

283 
	#X_OK
 1

	)

284 
	#F_OK
 0

	)

287 
	$acûss
 (cÚ¡ *
__Çme
, 
__ty³
è
__THROW
 
	`__nÚnuÎ
 ((1));

289 #ifdeà
__USE_GNU


292 
	$euidacûss
 (cÚ¡ *
__Çme
, 
__ty³
)

293 
__THROW
 
	`__nÚnuÎ
 ((1));

296 
	$cûss
 (cÚ¡ *
__Çme
, 
__ty³
)

297 
__THROW
 
	`__nÚnuÎ
 ((1));

300 #ifdeà
__USE_ATFILE


304 
	$çcûs§t
 (
__fd
, cÚ¡ *
__fe
, 
__ty³
, 
__æag
)

305 
__THROW
 
	`__nÚnuÎ
 ((2)è
__wur
;

310 #iâdef 
_STDIO_H


311 
	#SEEK_SET
 0

	)

312 
	#SEEK_CUR
 1

	)

313 
	#SEEK_END
 2

	)

314 #ifdeà
__USE_GNU


315 
	#SEEK_DATA
 3

	)

316 
	#SEEK_HOLE
 4

	)

320 #ià
defed
 
__USE_BSD
 && !defed 
L_SET


322 
	#L_SET
 
SEEK_SET


	)

323 
	#L_INCR
 
SEEK_CUR


	)

324 
	#L_XTND
 
SEEK_END


	)

333 #iâdeà
__USE_FILE_OFFSET64


334 
__off_t
 
	$l£ek
 (
__fd
, 
__off_t
 
__off£t
, 
__whû
è
__THROW
;

336 #ifdeà
__REDIRECT_NTH


337 
__off64_t
 
	`__REDIRECT_NTH
 (
l£ek
,

338 (
__fd
, 
__off64_t
 
__off£t
, 
__whû
),

339 
l£ek64
);

341 
	#l£ek
 
l£ek64


	)

344 #ifdeà
__USE_LARGEFILE64


345 
__off64_t
 
	$l£ek64
 (
__fd
, 
__off64_t
 
__off£t
, 
__whû
)

346 
__THROW
;

353 
	`þo£
 (
__fd
);

360 
ssize_t
 
	$»ad
 (
__fd
, *
__buf
, 
size_t
 
__nbys
è
__wur
;

366 
ssize_t
 
	$wre
 (
__fd
, cÚ¡ *
__buf
, 
size_t
 
__n
è
__wur
;

368 #ià
defed
 
__USE_UNIX98
 || defed 
__USE_XOPEN2K8


369 #iâdeà
__USE_FILE_OFFSET64


376 
ssize_t
 
	$´d
 (
__fd
, *
__buf
, 
size_t
 
__nbys
,

377 
__off_t
 
__off£t
è
__wur
;

384 
ssize_t
 
	$pwre
 (
__fd
, cÚ¡ *
__buf
, 
size_t
 
__n
,

385 
__off_t
 
__off£t
è
__wur
;

387 #ifdeà
__REDIRECT


388 
ssize_t
 
	`__REDIRECT
 (
´d
, (
__fd
, *
__buf
, 
size_t
 
__nbys
,

389 
__off64_t
 
__off£t
),

390 
´d64
è
__wur
;

391 
ssize_t
 
	`__REDIRECT
 (
pwre
, (
__fd
, cÚ¡ *
__buf
,

392 
size_t
 
__nbys
, 
__off64_t
 
__off£t
),

393 
pwre64
è
__wur
;

395 
	#´d
 
´d64


	)

396 
	#pwre
 
pwre64


	)

400 #ifdeà
__USE_LARGEFILE64


404 
ssize_t
 
	$´d64
 (
__fd
, *
__buf
, 
size_t
 
__nbys
,

405 
__off64_t
 
__off£t
è
__wur
;

408 
ssize_t
 
	$pwre64
 (
__fd
, cÚ¡ *
__buf
, 
size_t
 
__n
,

409 
__off64_t
 
__off£t
è
__wur
;

417 
	$pe
 (
__pedes
[2]è
__THROW
 
__wur
;

419 #ifdeà
__USE_GNU


422 
	$pe2
 (
__pedes
[2], 
__æags
è
__THROW
 
__wur
;

432 
	$®¬m
 (
__£cÚds
è
__THROW
;

444 
	`¦p
 (
__£cÚds
);

446 #ià(
defed
 
__USE_XOPEN_EXTENDED
 && !defed 
__USE_XOPEN2K8
) \

447 || 
defed
 
__USE_BSD


452 
__u£cÚds_t
 
	$u®¬m
 (
__u£cÚds_t
 
__v®ue
, __u£cÚds_
__rv®
)

453 
__THROW
;

460 
	`u¦p
 (
__u£cÚds_t
 
__u£cÚds
);

469 
	`·u£
 ();

473 
	$chown
 (cÚ¡ *
__fe
, 
__uid_t
 
__owÃr
, 
__gid_t
 
__group
)

474 
__THROW
 
	`__nÚnuÎ
 ((1)è
__wur
;

476 #ià
defed
 
__USE_BSD
 || defed 
__USE_XOPEN_EXTENDED
 || defed 
__USE_XOPEN2K8


478 
	$fchown
 (
__fd
, 
__uid_t
 
__owÃr
, 
__gid_t
 
__group
è
__THROW
 
__wur
;

483 
	$lchown
 (cÚ¡ *
__fe
, 
__uid_t
 
__owÃr
, 
__gid_t
 
__group
)

484 
__THROW
 
	`__nÚnuÎ
 ((1)è
__wur
;

488 #ifdeà
__USE_ATFILE


491 
	$fchowÇt
 (
__fd
, cÚ¡ *
__fe
, 
__uid_t
 
__owÃr
,

492 
__gid_t
 
__group
, 
__æag
)

493 
__THROW
 
	`__nÚnuÎ
 ((2)è
__wur
;

497 
	$chd
 (cÚ¡ *
__·th
è
__THROW
 
	`__nÚnuÎ
 ((1)è
__wur
;

499 #ià
defed
 
__USE_BSD
 || defed 
__USE_XOPEN_EXTENDED
 || defed 
__USE_XOPEN2K8


501 
	$fchd
 (
__fd
è
__THROW
 
__wur
;

511 *
	$gcwd
 (*
__buf
, 
size_t
 
__size
è
__THROW
 
__wur
;

513 #ifdef 
__USE_GNU


517 *
	$g_cu¼t_d_Çme
 (è
__THROW
;

520 #ià(
defed
 
__USE_XOPEN_EXTENDED
 && !defed 
__USE_XOPEN2K8
) \

521 || 
defed
 
__USE_BSD


525 *
	$gwd
 (*
__buf
)

526 
__THROW
 
	`__nÚnuÎ
 ((1)è
__©ibu_d»ÿd__
 
__wur
;

531 
	$dup
 (
__fd
è
__THROW
 
__wur
;

534 
	$dup2
 (
__fd
, 
__fd2
è
__THROW
;

536 #ifdeà
__USE_GNU


539 
	$dup3
 (
__fd
, 
__fd2
, 
__æags
è
__THROW
;

543 **
__vÚ
;

544 #ifdeà
__USE_GNU


545 **
vÚ
;

551 
	$execve
 (cÚ¡ *
__·th
, *cÚ¡ 
__¬gv
[],

552 *cÚ¡ 
__vp
[]è
__THROW
 
	`__nÚnuÎ
 ((1, 2));

554 #ifdeà
__USE_XOPEN2K8


557 
	$ãxecve
 (
__fd
, *cÚ¡ 
__¬gv
[], *cÚ¡ 
__vp
[])

558 
__THROW
 
	`__nÚnuÎ
 ((2));

563 
	$execv
 (cÚ¡ *
__·th
, *cÚ¡ 
__¬gv
[])

564 
__THROW
 
	`__nÚnuÎ
 ((1, 2));

568 
	$exeþe
 (cÚ¡ *
__·th
, cÚ¡ *
__¬g
, ...)

569 
__THROW
 
	`__nÚnuÎ
 ((1, 2));

573 
	$exeþ
 (cÚ¡ *
__·th
, cÚ¡ *
__¬g
, ...)

574 
__THROW
 
	`__nÚnuÎ
 ((1, 2));

578 
	$execvp
 (cÚ¡ *
__fe
, *cÚ¡ 
__¬gv
[])

579 
__THROW
 
	`__nÚnuÎ
 ((1, 2));

584 
	$exeþp
 (cÚ¡ *
__fe
, cÚ¡ *
__¬g
, ...)

585 
__THROW
 
	`__nÚnuÎ
 ((1, 2));

587 #ifdeà
__USE_GNU


590 
	$execv³
 (cÚ¡ *
__fe
, *cÚ¡ 
__¬gv
[],

591 *cÚ¡ 
__vp
[])

592 
__THROW
 
	`__nÚnuÎ
 ((1, 2));

596 #ià
defed
 
__USE_MISC
 || defed 
__USE_XOPEN


598 
	$niû
 (
__c
è
__THROW
 
__wur
;

603 
	$_ex
 (
__¡©us
è
	`__©ibu__
 ((
__nÜuº__
));

609 
	~<bs/cÚâame.h
>

612 
	$·thcÚf
 (cÚ¡ *
__·th
, 
__Çme
)

613 
__THROW
 
	`__nÚnuÎ
 ((1));

616 
	$å©hcÚf
 (
__fd
, 
__Çme
è
__THROW
;

619 
	$syscÚf
 (
__Çme
è
__THROW
;

621 #ifdef 
__USE_POSIX2


623 
size_t
 
	$cÚf¡r
 (
__Çme
, *
__buf
, 
size_t
 
__Ën
è
__THROW
;

628 
__pid_t
 
	$gpid
 (è
__THROW
;

631 
__pid_t
 
	$gµid
 (è
__THROW
;

634 
__pid_t
 
	$gpg½
 (è
__THROW
;

637 
__pid_t
 
	$__gpgid
 (
__pid_t
 
__pid
è
__THROW
;

638 #ià
defed
 
__USE_XOPEN_EXTENDED
 || defed 
__USE_XOPEN2K8


639 
__pid_t
 
	$gpgid
 (
__pid_t
 
__pid
è
__THROW
;

646 
	$£gid
 (
__pid_t
 
__pid
, __pid_
__pgid
è
__THROW
;

648 #ià
defed
 
__USE_SVID
 || defed 
__USE_BSD
 || defed 
__USE_XOPEN_EXTENDED


660 
	$£g½
 (è
__THROW
;

667 
__pid_t
 
	$£tsid
 (è
__THROW
;

669 #ià
defed
 
__USE_XOPEN_EXTENDED
 || defed 
__USE_XOPEN2K8


671 
__pid_t
 
	$gsid
 (
__pid_t
 
__pid
è
__THROW
;

675 
__uid_t
 
	$guid
 (è
__THROW
;

678 
__uid_t
 
	$geuid
 (è
__THROW
;

681 
__gid_t
 
	$ggid
 (è
__THROW
;

684 
__gid_t
 
	$gegid
 (è
__THROW
;

689 
	$ggroups
 (
__size
, 
__gid_t
 
__li¡
[]è
__THROW
 
__wur
;

691 #ifdef 
__USE_GNU


693 
	$group_memb
 (
__gid_t
 
__gid
è
__THROW
;

700 
	$£tuid
 (
__uid_t
 
__uid
è
__THROW
 
__wur
;

702 #ià
defed
 
__USE_BSD
 || defed 
__USE_XOPEN_EXTENDED


705 
	$£euid
 (
__uid_t
 
__ruid
, __uid_
__euid
è
__THROW
 
__wur
;

708 #ià
defed
 
__USE_BSD
 || defed 
__USE_XOPEN2K


710 
	$£uid
 (
__uid_t
 
__uid
è
__THROW
 
__wur
;

717 
	$£tgid
 (
__gid_t
 
__gid
è
__THROW
 
__wur
;

719 #ià
defed
 
__USE_BSD
 || defed 
__USE_XOPEN_EXTENDED


722 
	$£egid
 (
__gid_t
 
__rgid
, __gid_
__egid
è
__THROW
 
__wur
;

725 #ià
defed
 
__USE_BSD
 || defed 
__USE_XOPEN2K


727 
	$£gid
 (
__gid_t
 
__gid
è
__THROW
 
__wur
;

730 #ifdeà
__USE_GNU


733 
	$g»suid
 (
__uid_t
 *
__ruid
, __uid_*
__euid
, __uid_*
__suid
)

734 
__THROW
;

738 
	$g»sgid
 (
__gid_t
 *
__rgid
, __gid_*
__egid
, __gid_*
__sgid
)

739 
__THROW
;

743 
	$£esuid
 (
__uid_t
 
__ruid
, __uid_
__euid
, __uid_
__suid
)

744 
__THROW
 
__wur
;

748 
	$£esgid
 (
__gid_t
 
__rgid
, __gid_
__egid
, __gid_
__sgid
)

749 
__THROW
 
__wur
;

756 
__pid_t
 
	$fÜk
 (è
__THROWNL
;

758 #ià(
defed
 
__USE_XOPEN_EXTENDED
 && !defed 
__USE_XOPEN2K8
) \

759 || 
defed
 
__USE_BSD


764 
__pid_t
 
	$vfÜk
 (è
__THROW
;

770 *
	$yÇme
 (
__fd
è
__THROW
;

774 
	$yÇme_r
 (
__fd
, *
__buf
, 
size_t
 
__buæ
)

775 
__THROW
 
	`__nÚnuÎ
 ((2)è
__wur
;

779 
	$i§y
 (
__fd
è
__THROW
;

781 #ià
defed
 
__USE_BSD
 \

782 || (
defed
 
__USE_XOPEN_EXTENDED
 && !defed 
__USE_UNIX98
)

785 
	$y¦Ù
 (è
__THROW
;

790 
	$lk
 (cÚ¡ *
__äom
, cÚ¡ *
__to
)

791 
__THROW
 
	`__nÚnuÎ
 ((1, 2)è
__wur
;

793 #ifdeà
__USE_ATFILE


796 
	$lk©
 (
__äomfd
, cÚ¡ *
__äom
, 
__tofd
,

797 cÚ¡ *
__to
, 
__æags
)

798 
__THROW
 
	`__nÚnuÎ
 ((2, 4)è
__wur
;

801 #ià
defed
 
__USE_BSD
 || defed 
__USE_XOPEN_EXTENDED
 || defed 
__USE_XOPEN2K


803 
	$symlk
 (cÚ¡ *
__äom
, cÚ¡ *
__to
)

804 
__THROW
 
	`__nÚnuÎ
 ((1, 2)è
__wur
;

809 
ssize_t
 
	$»adlk
 (cÚ¡ *
__»¡riù
 
__·th
,

810 *
__»¡riù
 
__buf
, 
size_t
 
__Ën
)

811 
__THROW
 
	`__nÚnuÎ
 ((1, 2)è
__wur
;

814 #ifdeà
__USE_ATFILE


816 
	$symlk©
 (cÚ¡ *
__äom
, 
__tofd
,

817 cÚ¡ *
__to
è
__THROW
 
	`__nÚnuÎ
 ((1, 3)è
__wur
;

820 
ssize_t
 
	$»adlk©
 (
__fd
, cÚ¡ *
__»¡riù
 
__·th
,

821 *
__»¡riù
 
__buf
, 
size_t
 
__Ën
)

822 
__THROW
 
	`__nÚnuÎ
 ((2, 3)è
__wur
;

826 
	$uÆk
 (cÚ¡ *
__Çme
è
__THROW
 
	`__nÚnuÎ
 ((1));

828 #ifdeà
__USE_ATFILE


830 
	$uÆk©
 (
__fd
, cÚ¡ *
__Çme
, 
__æag
)

831 
__THROW
 
	`__nÚnuÎ
 ((2));

835 
	$rmd
 (cÚ¡ *
__·th
è
__THROW
 
	`__nÚnuÎ
 ((1));

839 
__pid_t
 
	$tcgpg½
 (
__fd
è
__THROW
;

842 
	$tc£g½
 (
__fd
, 
__pid_t
 
__pg½_id
è
__THROW
;

849 *
	`glog
 ();

850 #ià
defed
 
__USE_REENTRANT
 || defed 
__USE_POSIX199506


857 
	$glog_r
 (*
__Çme
, 
size_t
 
__Çme_Ën
è
	`__nÚnuÎ
 ((1));

860 #ifdef 
__USE_BSD


862 
	$£og
 (cÚ¡ *
__Çme
è
__THROW
 
	`__nÚnuÎ
 ((1));

866 #ifdef 
__USE_POSIX2


870 
	#__Ãed_gÝt


	)

871 
	~<gÝt.h
>

875 #ià
defed
 
__USE_BSD
 || defed 
__USE_UNIX98
 || defed 
__USE_XOPEN2K


879 
	$gho¡Çme
 (*
__Çme
, 
size_t
 
__Ën
è
__THROW
 
	`__nÚnuÎ
 ((1));

883 #ià
defed
 
__USE_BSD
 || (defed 
__USE_XOPEN
 && !defed 
__USE_UNIX98
)

886 
	$£tho¡Çme
 (cÚ¡ *
__Çme
, 
size_t
 
__Ën
)

887 
__THROW
 
	`__nÚnuÎ
 ((1)è
__wur
;

891 
	$£tho¡id
 (
__id
è
__THROW
 
__wur
;

897 
	$gdomaÇme
 (*
__Çme
, 
size_t
 
__Ën
)

898 
__THROW
 
	`__nÚnuÎ
 ((1)è
__wur
;

899 
	$£tdomaÇme
 (cÚ¡ *
__Çme
, 
size_t
 
__Ën
)

900 
__THROW
 
	`__nÚnuÎ
 ((1)è
__wur
;

906 
	$vhªgup
 (è
__THROW
;

909 
	$»voke
 (cÚ¡ *
__fe
è
__THROW
 
	`__nÚnuÎ
 ((1)è
__wur
;

917 
	$´of
 (*
__§m¶e_bufãr
, 
size_t
 
__size
,

918 
size_t
 
__off£t
, 
__sÿË
)

919 
__THROW
 
	`__nÚnuÎ
 ((1));

925 
	$acù
 (cÚ¡ *
__Çme
è
__THROW
;

929 *
	$gu£rshl
 (è
__THROW
;

930 
	$du£rshl
 (è
__THROW
;

931 
	$£tu£rshl
 (è
__THROW
;

937 
	$d«mÚ
 (
__nochd
, 
__noþo£
è
__THROW
 
__wur
;

941 #ià
defed
 
__USE_BSD
 || (defed 
__USE_XOPEN
 && !defed 
__USE_XOPEN2K
)

944 
	$chroÙ
 (cÚ¡ *
__·th
è
__THROW
 
	`__nÚnuÎ
 ((1)è
__wur
;

948 *
	$g·ss
 (cÚ¡ *
__´om±
è
	`__nÚnuÎ
 ((1));

956 
	`fsync
 (
__fd
);

959 #ifdeà
__USE_GNU


962 
	$syncfs
 (
__fd
è
__THROW
;

966 #ià
defed
 
__USE_BSD
 || defed 
__USE_XOPEN_EXTENDED


969 
	`gho¡id
 ();

972 
	$sync
 (è
__THROW
;

975 #ià
defed
 
__USE_BSD
 || !defed 
__USE_XOPEN2K


978 
	$g·gesize
 (è
__THROW
 
	`__©ibu__
 ((
__cÚ¡__
));

983 
	$gdbËsize
 (è
__THROW
;

989 #ià
defed
 
__USE_BSD
 || defed 
__USE_XOPEN_EXTENDED
 || defed 
__USE_XOPEN2K8


992 #iâdeà
__USE_FILE_OFFSET64


993 
	$unÿ
 (cÚ¡ *
__fe
, 
__off_t
 
__Ëngth
)

994 
__THROW
 
	`__nÚnuÎ
 ((1)è
__wur
;

996 #ifdeà
__REDIRECT_NTH


997 
	`__REDIRECT_NTH
 (
unÿ
,

998 (cÚ¡ *
__fe
, 
__off64_t
 
__Ëngth
),

999 
unÿ64
è
	`__nÚnuÎ
 ((1)è
__wur
;

1001 
	#unÿ
 
unÿ64


	)

1004 #ifdeà
__USE_LARGEFILE64


1005 
	$unÿ64
 (cÚ¡ *
__fe
, 
__off64_t
 
__Ëngth
)

1006 
__THROW
 
	`__nÚnuÎ
 ((1)è
__wur
;

1011 #ià
defed
 
__USE_BSD
 || defed 
__USE_POSIX199309
 \

1012 || 
defed
 
__USE_XOPEN_EXTENDED
 || defed 
__USE_XOPEN2K


1015 #iâdeà
__USE_FILE_OFFSET64


1016 
	$árunÿ
 (
__fd
, 
__off_t
 
__Ëngth
è
__THROW
 
__wur
;

1018 #ifdeà
__REDIRECT_NTH


1019 
	`__REDIRECT_NTH
 (
árunÿ
, (
__fd
, 
__off64_t
 
__Ëngth
),

1020 
árunÿ64
è
__wur
;

1022 
	#árunÿ
 
árunÿ64


	)

1025 #ifdeà
__USE_LARGEFILE64


1026 
	$árunÿ64
 (
__fd
, 
__off64_t
 
__Ëngth
è
__THROW
 
__wur
;

1032 #ià(
defed
 
__USE_XOPEN_EXTENDED
 && !defed 
__USE_XOPEN2K
) \

1033 || 
defed
 
__USE_MISC


1037 
	$brk
 (*
__addr
è
__THROW
 
__wur
;

1043 *
	$sbrk
 (
_t
 
__d
è
__THROW
;

1047 #ifdeà
__USE_MISC


1058 
	$sysÿÎ
 (
__sy¢o
, ...è
__THROW
;

1063 #ià(
defed
 
__USE_MISC
 || defed 
__USE_XOPEN_EXTENDED
è&& !defed 
F_LOCK


1075 
	#F_ULOCK
 0

	)

1076 
	#F_LOCK
 1

	)

1077 
	#F_TLOCK
 2

	)

1078 
	#F_TEST
 3

	)

1080 #iâdeà
__USE_FILE_OFFSET64


1081 
	$lockf
 (
__fd
, 
__cmd
, 
__off_t
 
__Ën
è
__wur
;

1083 #ifdeà
__REDIRECT


1084 
	`__REDIRECT
 (
lockf
, (
__fd
, 
__cmd
, 
__off64_t
 
__Ën
),

1085 
lockf64
è
__wur
;

1087 
	#lockf
 
lockf64


	)

1090 #ifdeà
__USE_LARGEFILE64


1091 
	$lockf64
 (
__fd
, 
__cmd
, 
__off64_t
 
__Ën
è
__wur
;

1096 #ifdeà
__USE_GNU


1101 
	#TEMP_FAILURE_RETRY
(
ex´essiÚ
) \

1102 (
__exnsiÚ__
 \

1103 ({ 
__»suÉ
; \

1104 dØ
__»suÉ
 = (è(
ex´essiÚ
); \

1105 
__»suÉ
 =ð-1L && 
ºo
 =ð
EINTR
); \

1106 
__»suÉ
; 
	}
}))

	)

1109 #ià
defed
 
__USE_POSIX199309
 || defed 
__USE_UNIX98


1112 
fd©async
 (
__fdes
);

1118 #ifdef 
__USE_XOPEN


1120 *
	$üy±
 (cÚ¡ *
__key
, cÚ¡ *
__§É
)

1121 
__THROW
 
	`__nÚnuÎ
 ((1, 2));

1125 
	$üy±
 (*
__glibc_block
, 
__edæag
)

1126 
__THROW
 
	`__nÚnuÎ
 ((1));

1133 
	$swab
 (cÚ¡ *
__»¡riù
 
__äom
, *__»¡riù 
__to
,

1134 
ssize_t
 
__n
è
__THROW
 
	`__nÚnuÎ
 ((1, 2));

1140 #ià
defed
 
__USE_XOPEN
 && !defed 
__USE_XOPEN2K


1142 *
	$ùmid
 (*
__s
è
__THROW
;

1147 #ià
__USE_FORTIFY_LEVEL
 > 0 && 
defed
 
__fÜtify_funùiÚ


1148 
	~<bs/uni¡d.h
>

1151 
__END_DECLS


	@/usr/include/alloca.h

18 #iâdef 
_ALLOCA_H


19 
	#_ALLOCA_H
 1

	)

21 
	~<ã©u»s.h
>

23 
	#__Ãed_size_t


	)

24 
	~<¡ddef.h
>

26 
	g__BEGIN_DECLS


29 #undeà
®loÿ


32 *
	$®loÿ
 (
size_t
 
__size
è
__THROW
;

34 #ifdef 
__GNUC__


35 
	#®loÿ
(
size
è
	`__but_®loÿ
 (size)

	)

38 
__END_DECLS


	@/usr/include/bits/byteswap.h

19 #ià!
defed
 
_BYTESWAP_H
 && !defed 
_NETINET_IN_H
 && !defed 
_ENDIAN_H


23 #iâdeà
_BITS_BYTESWAP_H


24 
	#_BITS_BYTESWAP_H
 1

	)

26 
	~<ã©u»s.h
>

27 
	~<bs/ty³s.h
>

28 
	~<bs/wÜdsize.h
>

31 
	#__bsw­_cÚ¡ªt_16
(
x
) \

32 ((è((((
x
è>> 8è& 0xffè| (((xè& 0xffè<< 8)))

	)

35 
	~<bs/bysw­-16.h
>

38 
	#__bsw­_cÚ¡ªt_32
(
x
) \

39 ((((
x
) & 0xff000000) >> 24) | (((x) & 0x00ff0000) >> 8) | \

40 (((
x
è& 0x0000ff00è<< 8è| (((xè& 0x000000ffè<< 24))

	)

42 #ifdeà
__GNUC__


43 #ià
__GNUC_PREREQ
 (4, 3)

44 
__le
 

45 
	$__bsw­_32
 (
__bsx
)

47  
	`__but_bsw­32
 (
__bsx
);

48 
	}
}

49 #ià
__GNUC__
 >= 2

50 #ià
__WORDSIZE
 =ð64 || (
defed
 
__i486__
 || defed 
__³Áium__
 \

51 || 
defed
 
	g__³Áium´o__
 || defed 
	g__³Áium4__
 \

52 || 
defed
 
	g__k8__
 || defed 
	g__©hlÚ__
 \

53 || 
defed
 
	g__k6__
 || defed 
	g__nocÚa__
 \

54 || 
defed
 
	g__cÜe2__
 || defed 
	g__geode__
 \

55 || 
defed
 
	g__amdçm10__
)

58 
	#__bsw­_32
(
x
) \

59 (
__exnsiÚ__
 \

60 ({ 
__v
, 
__x
 = (
x
); \

61 ià(
	`__but_cÚ¡ªt_p
 (
__x
)) \

62 
__v
 = 
	`__bsw­_cÚ¡ªt_32
 (
__x
); \

64 
	`__asm__
 ("bsw­ %0" : "ô" (
__v
è: "0" (
__x
)); \

65 
__v
; }))

	)

67 
	#__bsw­_32
(
x
) \

68 (
__exnsiÚ__
 \

69 ({ 
__v
, 
__x
 = (
x
); \

70 ià(
	`__but_cÚ¡ªt_p
 (
__x
)) \

71 
__v
 = 
	`__bsw­_cÚ¡ªt_32
 (
__x
); \

73 
	`__asm__
 ("rorw $8, %w0;" \

76 : "ô" (
__v
) \

77 : "0" (
__x
) \

79 
__v
; }))

	)

82 
	#__bsw­_32
(
x
) \

83 (
__exnsiÚ__
 \

84 ({ 
__x
 = (
x
); 
	`__bsw­_cÚ¡ªt_32
 (__x); }))

	)

87 
__le
 

88 
	$__bsw­_32
 (
__bsx
)

90  
	`__bsw­_cÚ¡ªt_32
 (
__bsx
);

91 
	}
}

95 #ià
__GNUC_PREREQ
 (2, 0)

97 
	#__bsw­_cÚ¡ªt_64
(
x
) \

98 (
	`__exnsiÚ__
 ((((
x
) & 0xff00000000000000ull) >> 56) \

99 | (((
x
) & 0x00ff000000000000ull) >> 40) \

100 | (((
x
) & 0x0000ff0000000000ull) >> 24) \

101 | (((
x
) & 0x000000ff00000000ull) >> 8) \

102 | (((
x
) & 0x00000000ff000000ull) << 8) \

103 | (((
x
) & 0x0000000000ff0000ull) << 24) \

104 | (((
x
) & 0x000000000000ff00ull) << 40) \

105 | (((
x
è& 0x00000000000000ffuÎè<< 56)))

	)

107 #ià
__GNUC_PREREQ
 (4, 3)

108 
__le
 
__ut64_t


109 
	$__bsw­_64
 (
__ut64_t
 
__bsx
)

111  
	`__but_bsw­64
 (
__bsx
);

112 
	}
}

113 #ià
__WORDSIZE
 == 64

114 
	#__bsw­_64
(
x
) \

115 (
__exnsiÚ__
 \

116 ({ 
__ut64_t
 
__v
, 
__x
 = (
x
); \

117 ià(
	`__but_cÚ¡ªt_p
 (
__x
)) \

118 
__v
 = 
	`__bsw­_cÚ¡ªt_64
 (
__x
); \

120 
	`__asm__
 ("bsw­ %q0" : "ô" (
__v
è: "0" (
__x
)); \

121 
__v
; }))

	)

123 
	#__bsw­_64
(
x
) \

124 (
__exnsiÚ__
 \

125 ({ uniÚ { 
__exnsiÚ__
 
__ut64_t
 
__Î
; \

126 
__l
[2]; } 
__w
, 
__r
; \

127 ià(
	`__but_cÚ¡ªt_p
 (
x
)) \

128 
__r
.
__Î
 = 
	`__bsw­_cÚ¡ªt_64
 (
x
); \

131 
__w
.
__Î
 = (
x
); \

132 
__r
.
__l
[0] = 
	`__bsw­_32
 (
__w
.__l[1]); \

133 
__r
.
__l
[1] = 
	`__bsw­_32
 (
__w
.__l[0]); \

135 
__r
.
__Î
; }))

	)

138 
	#__bsw­_cÚ¡ªt_64
(
x
) \

139 ((((
x
) & 0xff00000000000000ull) >> 56) \

140 | (((
x
) & 0x00ff000000000000ull) >> 40) \

141 | (((
x
) & 0x0000ff0000000000ull) >> 24) \

142 | (((
x
) & 0x000000ff00000000ull) >> 8) \

143 | (((
x
) & 0x00000000ff000000ull) << 8) \

144 | (((
x
) & 0x0000000000ff0000ull) << 24) \

145 | (((
x
) & 0x000000000000ff00ull) << 40) \

146 | (((
x
è& 0x00000000000000ffuÎè<< 56))

	)

148 
__le
 
__ut64_t


149 
	$__bsw­_64
 (
__ut64_t
 
__bsx
)

151  
	`__bsw­_cÚ¡ªt_64
 (
__bsx
);

152 
	}
}

	@/usr/include/bits/confname.h

19 #iâdeà
_UNISTD_H


26 
	m_PC_LINK_MAX
,

27 
	#_PC_LINK_MAX
 
_PC_LINK_MAX


	)

28 
	m_PC_MAX_CANON
,

29 
	#_PC_MAX_CANON
 
_PC_MAX_CANON


	)

30 
	m_PC_MAX_INPUT
,

31 
	#_PC_MAX_INPUT
 
_PC_MAX_INPUT


	)

32 
	m_PC_NAME_MAX
,

33 
	#_PC_NAME_MAX
 
_PC_NAME_MAX


	)

34 
	m_PC_PATH_MAX
,

35 
	#_PC_PATH_MAX
 
_PC_PATH_MAX


	)

36 
	m_PC_PIPE_BUF
,

37 
	#_PC_PIPE_BUF
 
_PC_PIPE_BUF


	)

38 
	m_PC_CHOWN_RESTRICTED
,

39 
	#_PC_CHOWN_RESTRICTED
 
_PC_CHOWN_RESTRICTED


	)

40 
	m_PC_NO_TRUNC
,

41 
	#_PC_NO_TRUNC
 
_PC_NO_TRUNC


	)

42 
	m_PC_VDISABLE
,

43 
	#_PC_VDISABLE
 
_PC_VDISABLE


	)

44 
	m_PC_SYNC_IO
,

45 
	#_PC_SYNC_IO
 
_PC_SYNC_IO


	)

46 
	m_PC_ASYNC_IO
,

47 
	#_PC_ASYNC_IO
 
_PC_ASYNC_IO


	)

48 
	m_PC_PRIO_IO
,

49 
	#_PC_PRIO_IO
 
_PC_PRIO_IO


	)

50 
	m_PC_SOCK_MAXBUF
,

51 
	#_PC_SOCK_MAXBUF
 
_PC_SOCK_MAXBUF


	)

52 
	m_PC_FILESIZEBITS
,

53 
	#_PC_FILESIZEBITS
 
_PC_FILESIZEBITS


	)

54 
	m_PC_REC_INCR_XFER_SIZE
,

55 
	#_PC_REC_INCR_XFER_SIZE
 
_PC_REC_INCR_XFER_SIZE


	)

56 
	m_PC_REC_MAX_XFER_SIZE
,

57 
	#_PC_REC_MAX_XFER_SIZE
 
_PC_REC_MAX_XFER_SIZE


	)

58 
	m_PC_REC_MIN_XFER_SIZE
,

59 
	#_PC_REC_MIN_XFER_SIZE
 
_PC_REC_MIN_XFER_SIZE


	)

60 
	m_PC_REC_XFER_ALIGN
,

61 
	#_PC_REC_XFER_ALIGN
 
_PC_REC_XFER_ALIGN


	)

62 
	m_PC_ALLOC_SIZE_MIN
,

63 
	#_PC_ALLOC_SIZE_MIN
 
_PC_ALLOC_SIZE_MIN


	)

64 
	m_PC_SYMLINK_MAX
,

65 
	#_PC_SYMLINK_MAX
 
_PC_SYMLINK_MAX


	)

66 
	m_PC_2_SYMLINKS


67 
	#_PC_2_SYMLINKS
 
_PC_2_SYMLINKS


	)

73 
	m_SC_ARG_MAX
,

74 
	#_SC_ARG_MAX
 
_SC_ARG_MAX


	)

75 
	m_SC_CHILD_MAX
,

76 
	#_SC_CHILD_MAX
 
_SC_CHILD_MAX


	)

77 
	m_SC_CLK_TCK
,

78 
	#_SC_CLK_TCK
 
_SC_CLK_TCK


	)

79 
	m_SC_NGROUPS_MAX
,

80 
	#_SC_NGROUPS_MAX
 
_SC_NGROUPS_MAX


	)

81 
	m_SC_OPEN_MAX
,

82 
	#_SC_OPEN_MAX
 
_SC_OPEN_MAX


	)

83 
	m_SC_STREAM_MAX
,

84 
	#_SC_STREAM_MAX
 
_SC_STREAM_MAX


	)

85 
	m_SC_TZNAME_MAX
,

86 
	#_SC_TZNAME_MAX
 
_SC_TZNAME_MAX


	)

87 
	m_SC_JOB_CONTROL
,

88 
	#_SC_JOB_CONTROL
 
_SC_JOB_CONTROL


	)

89 
	m_SC_SAVED_IDS
,

90 
	#_SC_SAVED_IDS
 
_SC_SAVED_IDS


	)

91 
	m_SC_REALTIME_SIGNALS
,

92 
	#_SC_REALTIME_SIGNALS
 
_SC_REALTIME_SIGNALS


	)

93 
	m_SC_PRIORITY_SCHEDULING
,

94 
	#_SC_PRIORITY_SCHEDULING
 
_SC_PRIORITY_SCHEDULING


	)

95 
	m_SC_TIMERS
,

96 
	#_SC_TIMERS
 
_SC_TIMERS


	)

97 
	m_SC_ASYNCHRONOUS_IO
,

98 
	#_SC_ASYNCHRONOUS_IO
 
_SC_ASYNCHRONOUS_IO


	)

99 
	m_SC_PRIORITIZED_IO
,

100 
	#_SC_PRIORITIZED_IO
 
_SC_PRIORITIZED_IO


	)

101 
	m_SC_SYNCHRONIZED_IO
,

102 
	#_SC_SYNCHRONIZED_IO
 
_SC_SYNCHRONIZED_IO


	)

103 
	m_SC_FSYNC
,

104 
	#_SC_FSYNC
 
_SC_FSYNC


	)

105 
	m_SC_MAPPED_FILES
,

106 
	#_SC_MAPPED_FILES
 
_SC_MAPPED_FILES


	)

107 
	m_SC_MEMLOCK
,

108 
	#_SC_MEMLOCK
 
_SC_MEMLOCK


	)

109 
	m_SC_MEMLOCK_RANGE
,

110 
	#_SC_MEMLOCK_RANGE
 
_SC_MEMLOCK_RANGE


	)

111 
	m_SC_MEMORY_PROTECTION
,

112 
	#_SC_MEMORY_PROTECTION
 
_SC_MEMORY_PROTECTION


	)

113 
	m_SC_MESSAGE_PASSING
,

114 
	#_SC_MESSAGE_PASSING
 
_SC_MESSAGE_PASSING


	)

115 
	m_SC_SEMAPHORES
,

116 
	#_SC_SEMAPHORES
 
_SC_SEMAPHORES


	)

117 
	m_SC_SHARED_MEMORY_OBJECTS
,

118 
	#_SC_SHARED_MEMORY_OBJECTS
 
_SC_SHARED_MEMORY_OBJECTS


	)

119 
	m_SC_AIO_LISTIO_MAX
,

120 
	#_SC_AIO_LISTIO_MAX
 
_SC_AIO_LISTIO_MAX


	)

121 
	m_SC_AIO_MAX
,

122 
	#_SC_AIO_MAX
 
_SC_AIO_MAX


	)

123 
	m_SC_AIO_PRIO_DELTA_MAX
,

124 
	#_SC_AIO_PRIO_DELTA_MAX
 
_SC_AIO_PRIO_DELTA_MAX


	)

125 
	m_SC_DELAYTIMER_MAX
,

126 
	#_SC_DELAYTIMER_MAX
 
_SC_DELAYTIMER_MAX


	)

127 
	m_SC_MQ_OPEN_MAX
,

128 
	#_SC_MQ_OPEN_MAX
 
_SC_MQ_OPEN_MAX


	)

129 
	m_SC_MQ_PRIO_MAX
,

130 
	#_SC_MQ_PRIO_MAX
 
_SC_MQ_PRIO_MAX


	)

131 
	m_SC_VERSION
,

132 
	#_SC_VERSION
 
_SC_VERSION


	)

133 
	m_SC_PAGESIZE
,

134 
	#_SC_PAGESIZE
 
_SC_PAGESIZE


	)

135 
	#_SC_PAGE_SIZE
 
_SC_PAGESIZE


	)

136 
	m_SC_RTSIG_MAX
,

137 
	#_SC_RTSIG_MAX
 
_SC_RTSIG_MAX


	)

138 
	m_SC_SEM_NSEMS_MAX
,

139 
	#_SC_SEM_NSEMS_MAX
 
_SC_SEM_NSEMS_MAX


	)

140 
	m_SC_SEM_VALUE_MAX
,

141 
	#_SC_SEM_VALUE_MAX
 
_SC_SEM_VALUE_MAX


	)

142 
	m_SC_SIGQUEUE_MAX
,

143 
	#_SC_SIGQUEUE_MAX
 
_SC_SIGQUEUE_MAX


	)

144 
	m_SC_TIMER_MAX
,

145 
	#_SC_TIMER_MAX
 
_SC_TIMER_MAX


	)

149 
	m_SC_BC_BASE_MAX
,

150 
	#_SC_BC_BASE_MAX
 
_SC_BC_BASE_MAX


	)

151 
	m_SC_BC_DIM_MAX
,

152 
	#_SC_BC_DIM_MAX
 
_SC_BC_DIM_MAX


	)

153 
	m_SC_BC_SCALE_MAX
,

154 
	#_SC_BC_SCALE_MAX
 
_SC_BC_SCALE_MAX


	)

155 
	m_SC_BC_STRING_MAX
,

156 
	#_SC_BC_STRING_MAX
 
_SC_BC_STRING_MAX


	)

157 
	m_SC_COLL_WEIGHTS_MAX
,

158 
	#_SC_COLL_WEIGHTS_MAX
 
_SC_COLL_WEIGHTS_MAX


	)

159 
	m_SC_EQUIV_CLASS_MAX
,

160 
	#_SC_EQUIV_CLASS_MAX
 
_SC_EQUIV_CLASS_MAX


	)

161 
	m_SC_EXPR_NEST_MAX
,

162 
	#_SC_EXPR_NEST_MAX
 
_SC_EXPR_NEST_MAX


	)

163 
	m_SC_LINE_MAX
,

164 
	#_SC_LINE_MAX
 
_SC_LINE_MAX


	)

165 
	m_SC_RE_DUP_MAX
,

166 
	#_SC_RE_DUP_MAX
 
_SC_RE_DUP_MAX


	)

167 
	m_SC_CHARCLASS_NAME_MAX
,

168 
	#_SC_CHARCLASS_NAME_MAX
 
_SC_CHARCLASS_NAME_MAX


	)

170 
	m_SC_2_VERSION
,

171 
	#_SC_2_VERSION
 
_SC_2_VERSION


	)

172 
	m_SC_2_C_BIND
,

173 
	#_SC_2_C_BIND
 
_SC_2_C_BIND


	)

174 
	m_SC_2_C_DEV
,

175 
	#_SC_2_C_DEV
 
_SC_2_C_DEV


	)

176 
	m_SC_2_FORT_DEV
,

177 
	#_SC_2_FORT_DEV
 
_SC_2_FORT_DEV


	)

178 
	m_SC_2_FORT_RUN
,

179 
	#_SC_2_FORT_RUN
 
_SC_2_FORT_RUN


	)

180 
	m_SC_2_SW_DEV
,

181 
	#_SC_2_SW_DEV
 
_SC_2_SW_DEV


	)

182 
	m_SC_2_LOCALEDEF
,

183 
	#_SC_2_LOCALEDEF
 
_SC_2_LOCALEDEF


	)

185 
	m_SC_PII
,

186 
	#_SC_PII
 
_SC_PII


	)

187 
	m_SC_PII_XTI
,

188 
	#_SC_PII_XTI
 
_SC_PII_XTI


	)

189 
	m_SC_PII_SOCKET
,

190 
	#_SC_PII_SOCKET
 
_SC_PII_SOCKET


	)

191 
	m_SC_PII_INTERNET
,

192 
	#_SC_PII_INTERNET
 
_SC_PII_INTERNET


	)

193 
	m_SC_PII_OSI
,

194 
	#_SC_PII_OSI
 
_SC_PII_OSI


	)

195 
	m_SC_POLL
,

196 
	#_SC_POLL
 
_SC_POLL


	)

197 
	m_SC_SELECT
,

198 
	#_SC_SELECT
 
_SC_SELECT


	)

199 
	m_SC_UIO_MAXIOV
,

200 
	#_SC_UIO_MAXIOV
 
_SC_UIO_MAXIOV


	)

201 
	m_SC_IOV_MAX
 = 
_SC_UIO_MAXIOV
,

202 
	#_SC_IOV_MAX
 
_SC_IOV_MAX


	)

203 
	m_SC_PII_INTERNET_STREAM
,

204 
	#_SC_PII_INTERNET_STREAM
 
_SC_PII_INTERNET_STREAM


	)

205 
	m_SC_PII_INTERNET_DGRAM
,

206 
	#_SC_PII_INTERNET_DGRAM
 
_SC_PII_INTERNET_DGRAM


	)

207 
	m_SC_PII_OSI_COTS
,

208 
	#_SC_PII_OSI_COTS
 
_SC_PII_OSI_COTS


	)

209 
	m_SC_PII_OSI_CLTS
,

210 
	#_SC_PII_OSI_CLTS
 
_SC_PII_OSI_CLTS


	)

211 
	m_SC_PII_OSI_M
,

212 
	#_SC_PII_OSI_M
 
_SC_PII_OSI_M


	)

213 
	m_SC_T_IOV_MAX
,

214 
	#_SC_T_IOV_MAX
 
_SC_T_IOV_MAX


	)

217 
	m_SC_THREADS
,

218 
	#_SC_THREADS
 
_SC_THREADS


	)

219 
	m_SC_THREAD_SAFE_FUNCTIONS
,

220 
	#_SC_THREAD_SAFE_FUNCTIONS
 
_SC_THREAD_SAFE_FUNCTIONS


	)

221 
	m_SC_GETGR_R_SIZE_MAX
,

222 
	#_SC_GETGR_R_SIZE_MAX
 
_SC_GETGR_R_SIZE_MAX


	)

223 
	m_SC_GETPW_R_SIZE_MAX
,

224 
	#_SC_GETPW_R_SIZE_MAX
 
_SC_GETPW_R_SIZE_MAX


	)

225 
	m_SC_LOGIN_NAME_MAX
,

226 
	#_SC_LOGIN_NAME_MAX
 
_SC_LOGIN_NAME_MAX


	)

227 
	m_SC_TTY_NAME_MAX
,

228 
	#_SC_TTY_NAME_MAX
 
_SC_TTY_NAME_MAX


	)

229 
	m_SC_THREAD_DESTRUCTOR_ITERATIONS
,

230 
	#_SC_THREAD_DESTRUCTOR_ITERATIONS
 
_SC_THREAD_DESTRUCTOR_ITERATIONS


	)

231 
	m_SC_THREAD_KEYS_MAX
,

232 
	#_SC_THREAD_KEYS_MAX
 
_SC_THREAD_KEYS_MAX


	)

233 
	m_SC_THREAD_STACK_MIN
,

234 
	#_SC_THREAD_STACK_MIN
 
_SC_THREAD_STACK_MIN


	)

235 
	m_SC_THREAD_THREADS_MAX
,

236 
	#_SC_THREAD_THREADS_MAX
 
_SC_THREAD_THREADS_MAX


	)

237 
	m_SC_THREAD_ATTR_STACKADDR
,

238 
	#_SC_THREAD_ATTR_STACKADDR
 
_SC_THREAD_ATTR_STACKADDR


	)

239 
	m_SC_THREAD_ATTR_STACKSIZE
,

240 
	#_SC_THREAD_ATTR_STACKSIZE
 
_SC_THREAD_ATTR_STACKSIZE


	)

241 
	m_SC_THREAD_PRIORITY_SCHEDULING
,

242 
	#_SC_THREAD_PRIORITY_SCHEDULING
 
_SC_THREAD_PRIORITY_SCHEDULING


	)

243 
	m_SC_THREAD_PRIO_INHERIT
,

244 
	#_SC_THREAD_PRIO_INHERIT
 
_SC_THREAD_PRIO_INHERIT


	)

245 
	m_SC_THREAD_PRIO_PROTECT
,

246 
	#_SC_THREAD_PRIO_PROTECT
 
_SC_THREAD_PRIO_PROTECT


	)

247 
	m_SC_THREAD_PROCESS_SHARED
,

248 
	#_SC_THREAD_PROCESS_SHARED
 
_SC_THREAD_PROCESS_SHARED


	)

250 
	m_SC_NPROCESSORS_CONF
,

251 
	#_SC_NPROCESSORS_CONF
 
_SC_NPROCESSORS_CONF


	)

252 
	m_SC_NPROCESSORS_ONLN
,

253 
	#_SC_NPROCESSORS_ONLN
 
_SC_NPROCESSORS_ONLN


	)

254 
	m_SC_PHYS_PAGES
,

255 
	#_SC_PHYS_PAGES
 
_SC_PHYS_PAGES


	)

256 
	m_SC_AVPHYS_PAGES
,

257 
	#_SC_AVPHYS_PAGES
 
_SC_AVPHYS_PAGES


	)

258 
	m_SC_ATEXIT_MAX
,

259 
	#_SC_ATEXIT_MAX
 
_SC_ATEXIT_MAX


	)

260 
	m_SC_PASS_MAX
,

261 
	#_SC_PASS_MAX
 
_SC_PASS_MAX


	)

263 
	m_SC_XOPEN_VERSION
,

264 
	#_SC_XOPEN_VERSION
 
_SC_XOPEN_VERSION


	)

265 
	m_SC_XOPEN_XCU_VERSION
,

266 
	#_SC_XOPEN_XCU_VERSION
 
_SC_XOPEN_XCU_VERSION


	)

267 
	m_SC_XOPEN_UNIX
,

268 
	#_SC_XOPEN_UNIX
 
_SC_XOPEN_UNIX


	)

269 
	m_SC_XOPEN_CRYPT
,

270 
	#_SC_XOPEN_CRYPT
 
_SC_XOPEN_CRYPT


	)

271 
	m_SC_XOPEN_ENH_I18N
,

272 
	#_SC_XOPEN_ENH_I18N
 
_SC_XOPEN_ENH_I18N


	)

273 
	m_SC_XOPEN_SHM
,

274 
	#_SC_XOPEN_SHM
 
_SC_XOPEN_SHM


	)

276 
	m_SC_2_CHAR_TERM
,

277 
	#_SC_2_CHAR_TERM
 
_SC_2_CHAR_TERM


	)

278 
	m_SC_2_C_VERSION
,

279 
	#_SC_2_C_VERSION
 
_SC_2_C_VERSION


	)

280 
	m_SC_2_UPE
,

281 
	#_SC_2_UPE
 
_SC_2_UPE


	)

283 
	m_SC_XOPEN_XPG2
,

284 
	#_SC_XOPEN_XPG2
 
_SC_XOPEN_XPG2


	)

285 
	m_SC_XOPEN_XPG3
,

286 
	#_SC_XOPEN_XPG3
 
_SC_XOPEN_XPG3


	)

287 
	m_SC_XOPEN_XPG4
,

288 
	#_SC_XOPEN_XPG4
 
_SC_XOPEN_XPG4


	)

290 
	m_SC_CHAR_BIT
,

291 
	#_SC_CHAR_BIT
 
_SC_CHAR_BIT


	)

292 
	m_SC_CHAR_MAX
,

293 
	#_SC_CHAR_MAX
 
_SC_CHAR_MAX


	)

294 
	m_SC_CHAR_MIN
,

295 
	#_SC_CHAR_MIN
 
_SC_CHAR_MIN


	)

296 
	m_SC_INT_MAX
,

297 
	#_SC_INT_MAX
 
_SC_INT_MAX


	)

298 
	m_SC_INT_MIN
,

299 
	#_SC_INT_MIN
 
_SC_INT_MIN


	)

300 
	m_SC_LONG_BIT
,

301 
	#_SC_LONG_BIT
 
_SC_LONG_BIT


	)

302 
	m_SC_WORD_BIT
,

303 
	#_SC_WORD_BIT
 
_SC_WORD_BIT


	)

304 
	m_SC_MB_LEN_MAX
,

305 
	#_SC_MB_LEN_MAX
 
_SC_MB_LEN_MAX


	)

306 
	m_SC_NZERO
,

307 
	#_SC_NZERO
 
_SC_NZERO


	)

308 
	m_SC_SSIZE_MAX
,

309 
	#_SC_SSIZE_MAX
 
_SC_SSIZE_MAX


	)

310 
	m_SC_SCHAR_MAX
,

311 
	#_SC_SCHAR_MAX
 
_SC_SCHAR_MAX


	)

312 
	m_SC_SCHAR_MIN
,

313 
	#_SC_SCHAR_MIN
 
_SC_SCHAR_MIN


	)

314 
	m_SC_SHRT_MAX
,

315 
	#_SC_SHRT_MAX
 
_SC_SHRT_MAX


	)

316 
	m_SC_SHRT_MIN
,

317 
	#_SC_SHRT_MIN
 
_SC_SHRT_MIN


	)

318 
	m_SC_UCHAR_MAX
,

319 
	#_SC_UCHAR_MAX
 
_SC_UCHAR_MAX


	)

320 
	m_SC_UINT_MAX
,

321 
	#_SC_UINT_MAX
 
_SC_UINT_MAX


	)

322 
	m_SC_ULONG_MAX
,

323 
	#_SC_ULONG_MAX
 
_SC_ULONG_MAX


	)

324 
	m_SC_USHRT_MAX
,

325 
	#_SC_USHRT_MAX
 
_SC_USHRT_MAX


	)

327 
	m_SC_NL_ARGMAX
,

328 
	#_SC_NL_ARGMAX
 
_SC_NL_ARGMAX


	)

329 
	m_SC_NL_LANGMAX
,

330 
	#_SC_NL_LANGMAX
 
_SC_NL_LANGMAX


	)

331 
	m_SC_NL_MSGMAX
,

332 
	#_SC_NL_MSGMAX
 
_SC_NL_MSGMAX


	)

333 
	m_SC_NL_NMAX
,

334 
	#_SC_NL_NMAX
 
_SC_NL_NMAX


	)

335 
	m_SC_NL_SETMAX
,

336 
	#_SC_NL_SETMAX
 
_SC_NL_SETMAX


	)

337 
	m_SC_NL_TEXTMAX
,

338 
	#_SC_NL_TEXTMAX
 
_SC_NL_TEXTMAX


	)

340 
	m_SC_XBS5_ILP32_OFF32
,

341 
	#_SC_XBS5_ILP32_OFF32
 
_SC_XBS5_ILP32_OFF32


	)

342 
	m_SC_XBS5_ILP32_OFFBIG
,

343 
	#_SC_XBS5_ILP32_OFFBIG
 
_SC_XBS5_ILP32_OFFBIG


	)

344 
	m_SC_XBS5_LP64_OFF64
,

345 
	#_SC_XBS5_LP64_OFF64
 
_SC_XBS5_LP64_OFF64


	)

346 
	m_SC_XBS5_LPBIG_OFFBIG
,

347 
	#_SC_XBS5_LPBIG_OFFBIG
 
_SC_XBS5_LPBIG_OFFBIG


	)

349 
	m_SC_XOPEN_LEGACY
,

350 
	#_SC_XOPEN_LEGACY
 
_SC_XOPEN_LEGACY


	)

351 
	m_SC_XOPEN_REALTIME
,

352 
	#_SC_XOPEN_REALTIME
 
_SC_XOPEN_REALTIME


	)

353 
	m_SC_XOPEN_REALTIME_THREADS
,

354 
	#_SC_XOPEN_REALTIME_THREADS
 
_SC_XOPEN_REALTIME_THREADS


	)

356 
	m_SC_ADVISORY_INFO
,

357 
	#_SC_ADVISORY_INFO
 
_SC_ADVISORY_INFO


	)

358 
	m_SC_BARRIERS
,

359 
	#_SC_BARRIERS
 
_SC_BARRIERS


	)

360 
	m_SC_BASE
,

361 
	#_SC_BASE
 
_SC_BASE


	)

362 
	m_SC_C_LANG_SUPPORT
,

363 
	#_SC_C_LANG_SUPPORT
 
_SC_C_LANG_SUPPORT


	)

364 
	m_SC_C_LANG_SUPPORT_R
,

365 
	#_SC_C_LANG_SUPPORT_R
 
_SC_C_LANG_SUPPORT_R


	)

366 
	m_SC_CLOCK_SELECTION
,

367 
	#_SC_CLOCK_SELECTION
 
_SC_CLOCK_SELECTION


	)

368 
	m_SC_CPUTIME
,

369 
	#_SC_CPUTIME
 
_SC_CPUTIME


	)

370 
	m_SC_THREAD_CPUTIME
,

371 
	#_SC_THREAD_CPUTIME
 
_SC_THREAD_CPUTIME


	)

372 
	m_SC_DEVICE_IO
,

373 
	#_SC_DEVICE_IO
 
_SC_DEVICE_IO


	)

374 
	m_SC_DEVICE_SPECIFIC
,

375 
	#_SC_DEVICE_SPECIFIC
 
_SC_DEVICE_SPECIFIC


	)

376 
	m_SC_DEVICE_SPECIFIC_R
,

377 
	#_SC_DEVICE_SPECIFIC_R
 
_SC_DEVICE_SPECIFIC_R


	)

378 
	m_SC_FD_MGMT
,

379 
	#_SC_FD_MGMT
 
_SC_FD_MGMT


	)

380 
	m_SC_FIFO
,

381 
	#_SC_FIFO
 
_SC_FIFO


	)

382 
	m_SC_PIPE
,

383 
	#_SC_PIPE
 
_SC_PIPE


	)

384 
	m_SC_FILE_ATTRIBUTES
,

385 
	#_SC_FILE_ATTRIBUTES
 
_SC_FILE_ATTRIBUTES


	)

386 
	m_SC_FILE_LOCKING
,

387 
	#_SC_FILE_LOCKING
 
_SC_FILE_LOCKING


	)

388 
	m_SC_FILE_SYSTEM
,

389 
	#_SC_FILE_SYSTEM
 
_SC_FILE_SYSTEM


	)

390 
	m_SC_MONOTONIC_CLOCK
,

391 
	#_SC_MONOTONIC_CLOCK
 
_SC_MONOTONIC_CLOCK


	)

392 
	m_SC_MULTI_PROCESS
,

393 
	#_SC_MULTI_PROCESS
 
_SC_MULTI_PROCESS


	)

394 
	m_SC_SINGLE_PROCESS
,

395 
	#_SC_SINGLE_PROCESS
 
_SC_SINGLE_PROCESS


	)

396 
	m_SC_NETWORKING
,

397 
	#_SC_NETWORKING
 
_SC_NETWORKING


	)

398 
	m_SC_READER_WRITER_LOCKS
,

399 
	#_SC_READER_WRITER_LOCKS
 
_SC_READER_WRITER_LOCKS


	)

400 
	m_SC_SPIN_LOCKS
,

401 
	#_SC_SPIN_LOCKS
 
_SC_SPIN_LOCKS


	)

402 
	m_SC_REGEXP
,

403 
	#_SC_REGEXP
 
_SC_REGEXP


	)

404 
	m_SC_REGEX_VERSION
,

405 
	#_SC_REGEX_VERSION
 
_SC_REGEX_VERSION


	)

406 
	m_SC_SHELL
,

407 
	#_SC_SHELL
 
_SC_SHELL


	)

408 
	m_SC_SIGNALS
,

409 
	#_SC_SIGNALS
 
_SC_SIGNALS


	)

410 
	m_SC_SPAWN
,

411 
	#_SC_SPAWN
 
_SC_SPAWN


	)

412 
	m_SC_SPORADIC_SERVER
,

413 
	#_SC_SPORADIC_SERVER
 
_SC_SPORADIC_SERVER


	)

414 
	m_SC_THREAD_SPORADIC_SERVER
,

415 
	#_SC_THREAD_SPORADIC_SERVER
 
_SC_THREAD_SPORADIC_SERVER


	)

416 
	m_SC_SYSTEM_DATABASE
,

417 
	#_SC_SYSTEM_DATABASE
 
_SC_SYSTEM_DATABASE


	)

418 
	m_SC_SYSTEM_DATABASE_R
,

419 
	#_SC_SYSTEM_DATABASE_R
 
_SC_SYSTEM_DATABASE_R


	)

420 
	m_SC_TIMEOUTS
,

421 
	#_SC_TIMEOUTS
 
_SC_TIMEOUTS


	)

422 
	m_SC_TYPED_MEMORY_OBJECTS
,

423 
	#_SC_TYPED_MEMORY_OBJECTS
 
_SC_TYPED_MEMORY_OBJECTS


	)

424 
	m_SC_USER_GROUPS
,

425 
	#_SC_USER_GROUPS
 
_SC_USER_GROUPS


	)

426 
	m_SC_USER_GROUPS_R
,

427 
	#_SC_USER_GROUPS_R
 
_SC_USER_GROUPS_R


	)

428 
	m_SC_2_PBS
,

429 
	#_SC_2_PBS
 
_SC_2_PBS


	)

430 
	m_SC_2_PBS_ACCOUNTING
,

431 
	#_SC_2_PBS_ACCOUNTING
 
_SC_2_PBS_ACCOUNTING


	)

432 
	m_SC_2_PBS_LOCATE
,

433 
	#_SC_2_PBS_LOCATE
 
_SC_2_PBS_LOCATE


	)

434 
	m_SC_2_PBS_MESSAGE
,

435 
	#_SC_2_PBS_MESSAGE
 
_SC_2_PBS_MESSAGE


	)

436 
	m_SC_2_PBS_TRACK
,

437 
	#_SC_2_PBS_TRACK
 
_SC_2_PBS_TRACK


	)

438 
	m_SC_SYMLOOP_MAX
,

439 
	#_SC_SYMLOOP_MAX
 
_SC_SYMLOOP_MAX


	)

440 
	m_SC_STREAMS
,

441 
	#_SC_STREAMS
 
_SC_STREAMS


	)

442 
	m_SC_2_PBS_CHECKPOINT
,

443 
	#_SC_2_PBS_CHECKPOINT
 
_SC_2_PBS_CHECKPOINT


	)

445 
	m_SC_V6_ILP32_OFF32
,

446 
	#_SC_V6_ILP32_OFF32
 
_SC_V6_ILP32_OFF32


	)

447 
	m_SC_V6_ILP32_OFFBIG
,

448 
	#_SC_V6_ILP32_OFFBIG
 
_SC_V6_ILP32_OFFBIG


	)

449 
	m_SC_V6_LP64_OFF64
,

450 
	#_SC_V6_LP64_OFF64
 
_SC_V6_LP64_OFF64


	)

451 
	m_SC_V6_LPBIG_OFFBIG
,

452 
	#_SC_V6_LPBIG_OFFBIG
 
_SC_V6_LPBIG_OFFBIG


	)

454 
	m_SC_HOST_NAME_MAX
,

455 
	#_SC_HOST_NAME_MAX
 
_SC_HOST_NAME_MAX


	)

456 
	m_SC_TRACE
,

457 
	#_SC_TRACE
 
_SC_TRACE


	)

458 
	m_SC_TRACE_EVENT_FILTER
,

459 
	#_SC_TRACE_EVENT_FILTER
 
_SC_TRACE_EVENT_FILTER


	)

460 
	m_SC_TRACE_INHERIT
,

461 
	#_SC_TRACE_INHERIT
 
_SC_TRACE_INHERIT


	)

462 
	m_SC_TRACE_LOG
,

463 
	#_SC_TRACE_LOG
 
_SC_TRACE_LOG


	)

465 
	m_SC_LEVEL1_ICACHE_SIZE
,

466 
	#_SC_LEVEL1_ICACHE_SIZE
 
_SC_LEVEL1_ICACHE_SIZE


	)

467 
	m_SC_LEVEL1_ICACHE_ASSOC
,

468 
	#_SC_LEVEL1_ICACHE_ASSOC
 
_SC_LEVEL1_ICACHE_ASSOC


	)

469 
	m_SC_LEVEL1_ICACHE_LINESIZE
,

470 
	#_SC_LEVEL1_ICACHE_LINESIZE
 
_SC_LEVEL1_ICACHE_LINESIZE


	)

471 
	m_SC_LEVEL1_DCACHE_SIZE
,

472 
	#_SC_LEVEL1_DCACHE_SIZE
 
_SC_LEVEL1_DCACHE_SIZE


	)

473 
	m_SC_LEVEL1_DCACHE_ASSOC
,

474 
	#_SC_LEVEL1_DCACHE_ASSOC
 
_SC_LEVEL1_DCACHE_ASSOC


	)

475 
	m_SC_LEVEL1_DCACHE_LINESIZE
,

476 
	#_SC_LEVEL1_DCACHE_LINESIZE
 
_SC_LEVEL1_DCACHE_LINESIZE


	)

477 
	m_SC_LEVEL2_CACHE_SIZE
,

478 
	#_SC_LEVEL2_CACHE_SIZE
 
_SC_LEVEL2_CACHE_SIZE


	)

479 
	m_SC_LEVEL2_CACHE_ASSOC
,

480 
	#_SC_LEVEL2_CACHE_ASSOC
 
_SC_LEVEL2_CACHE_ASSOC


	)

481 
	m_SC_LEVEL2_CACHE_LINESIZE
,

482 
	#_SC_LEVEL2_CACHE_LINESIZE
 
_SC_LEVEL2_CACHE_LINESIZE


	)

483 
	m_SC_LEVEL3_CACHE_SIZE
,

484 
	#_SC_LEVEL3_CACHE_SIZE
 
_SC_LEVEL3_CACHE_SIZE


	)

485 
	m_SC_LEVEL3_CACHE_ASSOC
,

486 
	#_SC_LEVEL3_CACHE_ASSOC
 
_SC_LEVEL3_CACHE_ASSOC


	)

487 
	m_SC_LEVEL3_CACHE_LINESIZE
,

488 
	#_SC_LEVEL3_CACHE_LINESIZE
 
_SC_LEVEL3_CACHE_LINESIZE


	)

489 
	m_SC_LEVEL4_CACHE_SIZE
,

490 
	#_SC_LEVEL4_CACHE_SIZE
 
_SC_LEVEL4_CACHE_SIZE


	)

491 
	m_SC_LEVEL4_CACHE_ASSOC
,

492 
	#_SC_LEVEL4_CACHE_ASSOC
 
_SC_LEVEL4_CACHE_ASSOC


	)

493 
	m_SC_LEVEL4_CACHE_LINESIZE
,

494 
	#_SC_LEVEL4_CACHE_LINESIZE
 
_SC_LEVEL4_CACHE_LINESIZE


	)

497 
	m_SC_IPV6
 = 
_SC_LEVEL1_ICACHE_SIZE
 + 50,

498 
	#_SC_IPV6
 
_SC_IPV6


	)

499 
	m_SC_RAW_SOCKETS
,

500 
	#_SC_RAW_SOCKETS
 
_SC_RAW_SOCKETS


	)

502 
	m_SC_V7_ILP32_OFF32
,

503 
	#_SC_V7_ILP32_OFF32
 
_SC_V7_ILP32_OFF32


	)

504 
	m_SC_V7_ILP32_OFFBIG
,

505 
	#_SC_V7_ILP32_OFFBIG
 
_SC_V7_ILP32_OFFBIG


	)

506 
	m_SC_V7_LP64_OFF64
,

507 
	#_SC_V7_LP64_OFF64
 
_SC_V7_LP64_OFF64


	)

508 
	m_SC_V7_LPBIG_OFFBIG
,

509 
	#_SC_V7_LPBIG_OFFBIG
 
_SC_V7_LPBIG_OFFBIG


	)

511 
	m_SC_SS_REPL_MAX
,

512 
	#_SC_SS_REPL_MAX
 
_SC_SS_REPL_MAX


	)

514 
	m_SC_TRACE_EVENT_NAME_MAX
,

515 
	#_SC_TRACE_EVENT_NAME_MAX
 
_SC_TRACE_EVENT_NAME_MAX


	)

516 
	m_SC_TRACE_NAME_MAX
,

517 
	#_SC_TRACE_NAME_MAX
 
_SC_TRACE_NAME_MAX


	)

518 
	m_SC_TRACE_SYS_MAX
,

519 
	#_SC_TRACE_SYS_MAX
 
_SC_TRACE_SYS_MAX


	)

520 
	m_SC_TRACE_USER_EVENT_MAX
,

521 
	#_SC_TRACE_USER_EVENT_MAX
 
_SC_TRACE_USER_EVENT_MAX


	)

523 
	m_SC_XOPEN_STREAMS
,

524 
	#_SC_XOPEN_STREAMS
 
_SC_XOPEN_STREAMS


	)

526 
	m_SC_THREAD_ROBUST_PRIO_INHERIT
,

527 
	#_SC_THREAD_ROBUST_PRIO_INHERIT
 
_SC_THREAD_ROBUST_PRIO_INHERIT


	)

528 
	m_SC_THREAD_ROBUST_PRIO_PROTECT


529 
	#_SC_THREAD_ROBUST_PRIO_PROTECT
 
_SC_THREAD_ROBUST_PRIO_PROTECT


	)

535 
	m_CS_PATH
,

536 
	#_CS_PATH
 
_CS_PATH


	)

538 
	m_CS_V6_WIDTH_RESTRICTED_ENVS
,

539 
	#_CS_V6_WIDTH_RESTRICTED_ENVS
 
_CS_V6_WIDTH_RESTRICTED_ENVS


	)

540 
	#_CS_POSIX_V6_WIDTH_RESTRICTED_ENVS
 
_CS_V6_WIDTH_RESTRICTED_ENVS


	)

542 
	m_CS_GNU_LIBC_VERSION
,

543 
	#_CS_GNU_LIBC_VERSION
 
_CS_GNU_LIBC_VERSION


	)

544 
	m_CS_GNU_LIBPTHREAD_VERSION
,

545 
	#_CS_GNU_LIBPTHREAD_VERSION
 
_CS_GNU_LIBPTHREAD_VERSION


	)

547 
	m_CS_V5_WIDTH_RESTRICTED_ENVS
,

548 
	#_CS_V5_WIDTH_RESTRICTED_ENVS
 
_CS_V5_WIDTH_RESTRICTED_ENVS


	)

549 
	#_CS_POSIX_V5_WIDTH_RESTRICTED_ENVS
 
_CS_V5_WIDTH_RESTRICTED_ENVS


	)

551 
	m_CS_V7_WIDTH_RESTRICTED_ENVS
,

552 
	#_CS_V7_WIDTH_RESTRICTED_ENVS
 
_CS_V7_WIDTH_RESTRICTED_ENVS


	)

553 
	#_CS_POSIX_V7_WIDTH_RESTRICTED_ENVS
 
_CS_V7_WIDTH_RESTRICTED_ENVS


	)

555 
	m_CS_LFS_CFLAGS
 = 1000,

556 
	#_CS_LFS_CFLAGS
 
_CS_LFS_CFLAGS


	)

557 
	m_CS_LFS_LDFLAGS
,

558 
	#_CS_LFS_LDFLAGS
 
_CS_LFS_LDFLAGS


	)

559 
	m_CS_LFS_LIBS
,

560 
	#_CS_LFS_LIBS
 
_CS_LFS_LIBS


	)

561 
	m_CS_LFS_LINTFLAGS
,

562 
	#_CS_LFS_LINTFLAGS
 
_CS_LFS_LINTFLAGS


	)

563 
	m_CS_LFS64_CFLAGS
,

564 
	#_CS_LFS64_CFLAGS
 
_CS_LFS64_CFLAGS


	)

565 
	m_CS_LFS64_LDFLAGS
,

566 
	#_CS_LFS64_LDFLAGS
 
_CS_LFS64_LDFLAGS


	)

567 
	m_CS_LFS64_LIBS
,

568 
	#_CS_LFS64_LIBS
 
_CS_LFS64_LIBS


	)

569 
	m_CS_LFS64_LINTFLAGS
,

570 
	#_CS_LFS64_LINTFLAGS
 
_CS_LFS64_LINTFLAGS


	)

572 
	m_CS_XBS5_ILP32_OFF32_CFLAGS
 = 1100,

573 
	#_CS_XBS5_ILP32_OFF32_CFLAGS
 
_CS_XBS5_ILP32_OFF32_CFLAGS


	)

574 
	m_CS_XBS5_ILP32_OFF32_LDFLAGS
,

575 
	#_CS_XBS5_ILP32_OFF32_LDFLAGS
 
_CS_XBS5_ILP32_OFF32_LDFLAGS


	)

576 
	m_CS_XBS5_ILP32_OFF32_LIBS
,

577 
	#_CS_XBS5_ILP32_OFF32_LIBS
 
_CS_XBS5_ILP32_OFF32_LIBS


	)

578 
	m_CS_XBS5_ILP32_OFF32_LINTFLAGS
,

579 
	#_CS_XBS5_ILP32_OFF32_LINTFLAGS
 
_CS_XBS5_ILP32_OFF32_LINTFLAGS


	)

580 
	m_CS_XBS5_ILP32_OFFBIG_CFLAGS
,

581 
	#_CS_XBS5_ILP32_OFFBIG_CFLAGS
 
_CS_XBS5_ILP32_OFFBIG_CFLAGS


	)

582 
	m_CS_XBS5_ILP32_OFFBIG_LDFLAGS
,

583 
	#_CS_XBS5_ILP32_OFFBIG_LDFLAGS
 
_CS_XBS5_ILP32_OFFBIG_LDFLAGS


	)

584 
	m_CS_XBS5_ILP32_OFFBIG_LIBS
,

585 
	#_CS_XBS5_ILP32_OFFBIG_LIBS
 
_CS_XBS5_ILP32_OFFBIG_LIBS


	)

586 
	m_CS_XBS5_ILP32_OFFBIG_LINTFLAGS
,

587 
	#_CS_XBS5_ILP32_OFFBIG_LINTFLAGS
 
_CS_XBS5_ILP32_OFFBIG_LINTFLAGS


	)

588 
	m_CS_XBS5_LP64_OFF64_CFLAGS
,

589 
	#_CS_XBS5_LP64_OFF64_CFLAGS
 
_CS_XBS5_LP64_OFF64_CFLAGS


	)

590 
	m_CS_XBS5_LP64_OFF64_LDFLAGS
,

591 
	#_CS_XBS5_LP64_OFF64_LDFLAGS
 
_CS_XBS5_LP64_OFF64_LDFLAGS


	)

592 
	m_CS_XBS5_LP64_OFF64_LIBS
,

593 
	#_CS_XBS5_LP64_OFF64_LIBS
 
_CS_XBS5_LP64_OFF64_LIBS


	)

594 
	m_CS_XBS5_LP64_OFF64_LINTFLAGS
,

595 
	#_CS_XBS5_LP64_OFF64_LINTFLAGS
 
_CS_XBS5_LP64_OFF64_LINTFLAGS


	)

596 
	m_CS_XBS5_LPBIG_OFFBIG_CFLAGS
,

597 
	#_CS_XBS5_LPBIG_OFFBIG_CFLAGS
 
_CS_XBS5_LPBIG_OFFBIG_CFLAGS


	)

598 
	m_CS_XBS5_LPBIG_OFFBIG_LDFLAGS
,

599 
	#_CS_XBS5_LPBIG_OFFBIG_LDFLAGS
 
_CS_XBS5_LPBIG_OFFBIG_LDFLAGS


	)

600 
	m_CS_XBS5_LPBIG_OFFBIG_LIBS
,

601 
	#_CS_XBS5_LPBIG_OFFBIG_LIBS
 
_CS_XBS5_LPBIG_OFFBIG_LIBS


	)

602 
	m_CS_XBS5_LPBIG_OFFBIG_LINTFLAGS
,

603 
	#_CS_XBS5_LPBIG_OFFBIG_LINTFLAGS
 
_CS_XBS5_LPBIG_OFFBIG_LINTFLAGS


	)

605 
	m_CS_POSIX_V6_ILP32_OFF32_CFLAGS
,

606 
	#_CS_POSIX_V6_ILP32_OFF32_CFLAGS
 
_CS_POSIX_V6_ILP32_OFF32_CFLAGS


	)

607 
	m_CS_POSIX_V6_ILP32_OFF32_LDFLAGS
,

608 
	#_CS_POSIX_V6_ILP32_OFF32_LDFLAGS
 
_CS_POSIX_V6_ILP32_OFF32_LDFLAGS


	)

609 
	m_CS_POSIX_V6_ILP32_OFF32_LIBS
,

610 
	#_CS_POSIX_V6_ILP32_OFF32_LIBS
 
_CS_POSIX_V6_ILP32_OFF32_LIBS


	)

611 
	m_CS_POSIX_V6_ILP32_OFF32_LINTFLAGS
,

612 
	#_CS_POSIX_V6_ILP32_OFF32_LINTFLAGS
 
_CS_POSIX_V6_ILP32_OFF32_LINTFLAGS


	)

613 
	m_CS_POSIX_V6_ILP32_OFFBIG_CFLAGS
,

614 
	#_CS_POSIX_V6_ILP32_OFFBIG_CFLAGS
 
_CS_POSIX_V6_ILP32_OFFBIG_CFLAGS


	)

615 
	m_CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS
,

616 
	#_CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS
 
_CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS


	)

617 
	m_CS_POSIX_V6_ILP32_OFFBIG_LIBS
,

618 
	#_CS_POSIX_V6_ILP32_OFFBIG_LIBS
 
_CS_POSIX_V6_ILP32_OFFBIG_LIBS


	)

619 
	m_CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS
,

620 
	#_CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS
 
_CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS


	)

621 
	m_CS_POSIX_V6_LP64_OFF64_CFLAGS
,

622 
	#_CS_POSIX_V6_LP64_OFF64_CFLAGS
 
_CS_POSIX_V6_LP64_OFF64_CFLAGS


	)

623 
	m_CS_POSIX_V6_LP64_OFF64_LDFLAGS
,

624 
	#_CS_POSIX_V6_LP64_OFF64_LDFLAGS
 
_CS_POSIX_V6_LP64_OFF64_LDFLAGS


	)

625 
	m_CS_POSIX_V6_LP64_OFF64_LIBS
,

626 
	#_CS_POSIX_V6_LP64_OFF64_LIBS
 
_CS_POSIX_V6_LP64_OFF64_LIBS


	)

627 
	m_CS_POSIX_V6_LP64_OFF64_LINTFLAGS
,

628 
	#_CS_POSIX_V6_LP64_OFF64_LINTFLAGS
 
_CS_POSIX_V6_LP64_OFF64_LINTFLAGS


	)

629 
	m_CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS
,

630 
	#_CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS
 
_CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS


	)

631 
	m_CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS
,

632 
	#_CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS
 
_CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS


	)

633 
	m_CS_POSIX_V6_LPBIG_OFFBIG_LIBS
,

634 
	#_CS_POSIX_V6_LPBIG_OFFBIG_LIBS
 
_CS_POSIX_V6_LPBIG_OFFBIG_LIBS


	)

635 
	m_CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS
,

636 
	#_CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS
 
_CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS


	)

638 
	m_CS_POSIX_V7_ILP32_OFF32_CFLAGS
,

639 
	#_CS_POSIX_V7_ILP32_OFF32_CFLAGS
 
_CS_POSIX_V7_ILP32_OFF32_CFLAGS


	)

640 
	m_CS_POSIX_V7_ILP32_OFF32_LDFLAGS
,

641 
	#_CS_POSIX_V7_ILP32_OFF32_LDFLAGS
 
_CS_POSIX_V7_ILP32_OFF32_LDFLAGS


	)

642 
	m_CS_POSIX_V7_ILP32_OFF32_LIBS
,

643 
	#_CS_POSIX_V7_ILP32_OFF32_LIBS
 
_CS_POSIX_V7_ILP32_OFF32_LIBS


	)

644 
	m_CS_POSIX_V7_ILP32_OFF32_LINTFLAGS
,

645 
	#_CS_POSIX_V7_ILP32_OFF32_LINTFLAGS
 
_CS_POSIX_V7_ILP32_OFF32_LINTFLAGS


	)

646 
	m_CS_POSIX_V7_ILP32_OFFBIG_CFLAGS
,

647 
	#_CS_POSIX_V7_ILP32_OFFBIG_CFLAGS
 
_CS_POSIX_V7_ILP32_OFFBIG_CFLAGS


	)

648 
	m_CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS
,

649 
	#_CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS
 
_CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS


	)

650 
	m_CS_POSIX_V7_ILP32_OFFBIG_LIBS
,

651 
	#_CS_POSIX_V7_ILP32_OFFBIG_LIBS
 
_CS_POSIX_V7_ILP32_OFFBIG_LIBS


	)

652 
	m_CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS
,

653 
	#_CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS
 
_CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS


	)

654 
	m_CS_POSIX_V7_LP64_OFF64_CFLAGS
,

655 
	#_CS_POSIX_V7_LP64_OFF64_CFLAGS
 
_CS_POSIX_V7_LP64_OFF64_CFLAGS


	)

656 
	m_CS_POSIX_V7_LP64_OFF64_LDFLAGS
,

657 
	#_CS_POSIX_V7_LP64_OFF64_LDFLAGS
 
_CS_POSIX_V7_LP64_OFF64_LDFLAGS


	)

658 
	m_CS_POSIX_V7_LP64_OFF64_LIBS
,

659 
	#_CS_POSIX_V7_LP64_OFF64_LIBS
 
_CS_POSIX_V7_LP64_OFF64_LIBS


	)

660 
	m_CS_POSIX_V7_LP64_OFF64_LINTFLAGS
,

661 
	#_CS_POSIX_V7_LP64_OFF64_LINTFLAGS
 
_CS_POSIX_V7_LP64_OFF64_LINTFLAGS


	)

662 
	m_CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS
,

663 
	#_CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS
 
_CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS


	)

664 
	m_CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS
,

665 
	#_CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS
 
_CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS


	)

666 
	m_CS_POSIX_V7_LPBIG_OFFBIG_LIBS
,

667 
	#_CS_POSIX_V7_LPBIG_OFFBIG_LIBS
 
_CS_POSIX_V7_LPBIG_OFFBIG_LIBS


	)

668 
	m_CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS
,

669 
	#_CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS
 
_CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS


	)

671 
	m_CS_V6_ENV
,

672 
	#_CS_V6_ENV
 
_CS_V6_ENV


	)

673 
	m_CS_V7_ENV


674 
	#_CS_V7_ENV
 
_CS_V7_ENV


	)

	@/usr/include/bits/environments.h

18 #iâdeà
_UNISTD_H


22 
	~<bs/wÜdsize.h
>

42 #ià
__WORDSIZE
 == 64

56 
	#_POSIX_V7_LPBIG_OFFBIG
 -1

	)

57 
	#_POSIX_V6_LPBIG_OFFBIG
 -1

	)

58 
	#_XBS5_LPBIG_OFFBIG
 -1

	)

61 
	#_POSIX_V7_LP64_OFF64
 1

	)

62 
	#_POSIX_V6_LP64_OFF64
 1

	)

63 
	#_XBS5_LP64_OFF64
 1

	)

69 
	#_POSIX_V7_ILP32_OFFBIG
 1

	)

70 
	#_POSIX_V6_ILP32_OFFBIG
 1

	)

71 
	#_XBS5_ILP32_OFFBIG
 1

	)

73 #iâdeà
__x86_64__


75 
	#_POSIX_V7_ILP32_OFF32
 1

	)

76 
	#_POSIX_V6_ILP32_OFF32
 1

	)

77 
	#_XBS5_ILP32_OFF32
 1

	)

95 
	#__ILP32_OFF32_CFLAGS
 "-m32"

	)

96 
	#__ILP32_OFF32_LDFLAGS
 "-m32"

	)

97 #ià
defed
 
__x86_64__
 && defed 
__ILP32__


98 
	#__ILP32_OFFBIG_CFLAGS
 "-mx32"

	)

99 
	#__ILP32_OFFBIG_LDFLAGS
 "-mx32"

	)

101 
	#__ILP32_OFFBIG_CFLAGS
 "-m32 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64"

	)

102 
	#__ILP32_OFFBIG_LDFLAGS
 "-m32"

	)

104 
	#__LP64_OFF64_CFLAGS
 "-m64"

	)

105 
	#__LP64_OFF64_LDFLAGS
 "-m64"

	)

	@/usr/include/bits/errno.h

19 #ifdeà
_ERRNO_H


21 #undeà
EDOM


22 #undeà
EILSEQ


23 #undeà
ERANGE


24 
	~<lux/ºo.h
>

27 
	#ENOTSUP
 
EOPNOTSUPP


	)

30 #iâdeà
ECANCELED


31 
	#ECANCELED
 125

	)

35 #iâdeà
EOWNERDEAD


36 
	#EOWNERDEAD
 130

	)

37 
	#ENOTRECOVERABLE
 131

	)

40 #iâdeà
ERFKILL


41 
	#ERFKILL
 132

	)

44 #iâdeà
EHWPOISON


45 
	#EHWPOISON
 133

	)

48 #iâdeà
__ASSEMBLER__


50 *
	$__ºo_loÿtiÚ
 (è
__THROW
 
	`__©ibu__
 ((
__cÚ¡__
));

52 #ià!
defed
 
_LIBC
 || defed 
_LIBC_REENTRANT


54 
	#ºo
 (*
	`__ºo_loÿtiÚ
 ())

	)

59 #ià!
defed
 
_ERRNO_H
 && defed 
__Ãed_Em©h


63 
	#EDOM
 33

	)

64 
	#EILSEQ
 84

	)

65 
	#ERANGE
 34

	)

	@/usr/include/bits/fcntl.h

19 #iâdeà
_FCNTL_H


23 #ifdeà
__x86_64__


24 
	#__O_LARGEFILE
 0

	)

27 #ifdeà
__x86_64__


29 
	#F_GETLK64
 5

	)

30 
	#F_SETLK64
 6

	)

31 
	#F_SETLKW64
 7

	)

35 
	sæock


37 
	ml_ty³
;

38 
	ml_whû
;

39 #iâdeà
__USE_FILE_OFFSET64


40 
__off_t
 
	ml_¡¬t
;

41 
__off_t
 
	ml_Ën
;

43 
__off64_t
 
	ml_¡¬t
;

44 
__off64_t
 
	ml_Ën
;

46 
__pid_t
 
	ml_pid
;

49 #ifdeà
__USE_LARGEFILE64


50 
	sæock64


52 
	ml_ty³
;

53 
	ml_whû
;

54 
__off64_t
 
	ml_¡¬t
;

55 
__off64_t
 
	ml_Ën
;

56 
__pid_t
 
	ml_pid
;

61 
	~<bs/fú-lux.h
>

	@/usr/include/bits/fcntl2.h

19 #iâdef 
_FCNTL_H


25 #iâdeà
__USE_FILE_OFFSET64


26 
	$__Ý_2
 (cÚ¡ *
__·th
, 
__oæag
è
	`__nÚnuÎ
 ((1));

27 
	`__REDIRECT
 (
__Ý_®s
, (cÚ¡ *
__·th
, 
__oæag
, ...),

28 
Ý
è
	`__nÚnuÎ
 ((1));

30 
	`__REDIRECT
 (
__Ý_2
, (cÚ¡ *
__·th
, 
__oæag
),

31 
__Ý64_2
è
	`__nÚnuÎ
 ((1));

32 
	`__REDIRECT
 (
__Ý_®s
, (cÚ¡ *
__·th
, 
__oæag
, ...),

33 
Ý64
è
	`__nÚnuÎ
 ((1));

35 
	`__rÜdeþ
 (
__Ý_too_mªy_¬gs
,

37 
	`__rÜdeþ
 (
__Ý_missg_mode
,

40 
__fÜtify_funùiÚ
 

41 
	$Ý
 (cÚ¡ *
__·th
, 
__oæag
, ...)

43 ià(
	`__va_¬g_·ck_Ën
 () > 1)

44 
	`__Ý_too_mªy_¬gs
 ();

46 ià(
	`__but_cÚ¡ªt_p
 (
__oæag
))

48 ià((
__oæag
 & 
O_CREAT
è!ð0 && 
	`__va_¬g_·ck_Ën
 () < 1)

50 
	`__Ý_missg_mode
 ();

51  
	`__Ý_2
 (
__·th
, 
__oæag
);

53  
	`__Ý_®s
 (
__·th
, 
__oæag
, 
	`__va_¬g_·ck
 ());

56 ià(
	`__va_¬g_·ck_Ën
 () < 1)

57  
	`__Ý_2
 (
__·th
, 
__oæag
);

59  
	`__Ý_®s
 (
__·th
, 
__oæag
, 
	`__va_¬g_·ck
 ());

60 
	}
}

63 #ifdeà
__USE_LARGEFILE64


64 
	$__Ý64_2
 (cÚ¡ *
__·th
, 
__oæag
è
	`__nÚnuÎ
 ((1));

65 
	`__REDIRECT
 (
__Ý64_®s
, (cÚ¡ *
__·th
, 
__oæag
,

66 ...), 
Ý64
è
	`__nÚnuÎ
 ((1));

67 
	`__rÜdeþ
 (
__Ý64_too_mªy_¬gs
,

69 
	`__rÜdeþ
 (
__Ý64_missg_mode
,

72 
__fÜtify_funùiÚ
 

73 
	$Ý64
 (cÚ¡ *
__·th
, 
__oæag
, ...)

75 ià(
	`__va_¬g_·ck_Ën
 () > 1)

76 
	`__Ý64_too_mªy_¬gs
 ();

78 ià(
	`__but_cÚ¡ªt_p
 (
__oæag
))

80 ià((
__oæag
 & 
O_CREAT
è!ð0 && 
	`__va_¬g_·ck_Ën
 () < 1)

82 
	`__Ý64_missg_mode
 ();

83  
	`__Ý64_2
 (
__·th
, 
__oæag
);

85  
	`__Ý64_®s
 (
__·th
, 
__oæag
, 
	`__va_¬g_·ck
 ());

88 ià(
	`__va_¬g_·ck_Ën
 () < 1)

89  
	`__Ý64_2
 (
__·th
, 
__oæag
);

91  
	`__Ý64_®s
 (
__·th
, 
__oæag
, 
	`__va_¬g_·ck
 ());

92 
	}
}

96 #ifdeà
__USE_ATFILE


97 #iâdeà
__USE_FILE_OFFSET64


98 
	$__Ý©_2
 (
__fd
, cÚ¡ *
__·th
, 
__oæag
)

99 
	`__nÚnuÎ
 ((2));

100 
	`__REDIRECT
 (
__Ý©_®s
, (
__fd
, cÚ¡ *
__·th
,

101 
__oæag
, ...), 
Ý©
)

102 
	`__nÚnuÎ
 ((2));

104 
	`__REDIRECT
 (
__Ý©_2
, (
__fd
, cÚ¡ *
__·th
,

105 
__oæag
), 
__Ý©64_2
)

106 
	`__nÚnuÎ
 ((2));

107 
	`__REDIRECT
 (
__Ý©_®s
, (
__fd
, cÚ¡ *
__·th
,

108 
__oæag
, ...), 
Ý©64
)

109 
	`__nÚnuÎ
 ((2));

111 
	`__rÜdeþ
 (
__Ý©_too_mªy_¬gs
,

113 
	`__rÜdeþ
 (
__Ý©_missg_mode
,

116 
__fÜtify_funùiÚ
 

117 
	$Ý©
 (
__fd
, cÚ¡ *
__·th
, 
__oæag
, ...)

119 ià(
	`__va_¬g_·ck_Ën
 () > 1)

120 
	`__Ý©_too_mªy_¬gs
 ();

122 ià(
	`__but_cÚ¡ªt_p
 (
__oæag
))

124 ià((
__oæag
 & 
O_CREAT
è!ð0 && 
	`__va_¬g_·ck_Ën
 () < 1)

126 
	`__Ý©_missg_mode
 ();

127  
	`__Ý©_2
 (
__fd
, 
__·th
, 
__oæag
);

129  
	`__Ý©_®s
 (
__fd
, 
__·th
, 
__oæag
, 
	`__va_¬g_·ck
 ());

132 ià(
	`__va_¬g_·ck_Ën
 () < 1)

133  
	`__Ý©_2
 (
__fd
, 
__·th
, 
__oæag
);

135  
	`__Ý©_®s
 (
__fd
, 
__·th
, 
__oæag
, 
	`__va_¬g_·ck
 ());

136 
	}
}

139 #ifdeà
__USE_LARGEFILE64


140 
	$__Ý©64_2
 (
__fd
, cÚ¡ *
__·th
, 
__oæag
)

141 
	`__nÚnuÎ
 ((2));

142 
	`__REDIRECT
 (
__Ý©64_®s
, (
__fd
, cÚ¡ *
__·th
,

143 
__oæag
, ...), 
Ý©64
)

144 
	`__nÚnuÎ
 ((2));

145 
	`__rÜdeþ
 (
__Ý©64_too_mªy_¬gs
,

147 
	`__rÜdeþ
 (
__Ý©64_missg_mode
,

150 
__fÜtify_funùiÚ
 

151 
	$Ý©64
 (
__fd
, cÚ¡ *
__·th
, 
__oæag
, ...)

153 ià(
	`__va_¬g_·ck_Ën
 () > 1)

154 
	`__Ý©64_too_mªy_¬gs
 ();

156 ià(
	`__but_cÚ¡ªt_p
 (
__oæag
))

158 ià((
__oæag
 & 
O_CREAT
è!ð0 && 
	`__va_¬g_·ck_Ën
 () < 1)

160 
	`__Ý©64_missg_mode
 ();

161  
	`__Ý©64_2
 (
__fd
, 
__·th
, 
__oæag
);

163  
	`__Ý©64_®s
 (
__fd
, 
__·th
, 
__oæag
, 
	`__va_¬g_·ck
 ());

166 ià(
	`__va_¬g_·ck_Ën
 () < 1)

167  
	`__Ý©64_2
 (
__fd
, 
__·th
, 
__oæag
);

169  
	`__Ý©64_®s
 (
__fd
, 
__·th
, 
__oæag
, 
	`__va_¬g_·ck
 ());

170 
	}
}

	@/usr/include/bits/in.h

20 #iâdeà
_NETINET_IN_H


29 #ifdeà
_UAPI_LINUX_IN6_H


33 
	#__USE_KERNEL_IPV6_DEFS


	)

39 
	#IP_OPTIONS
 4

	)

40 
	#IP_HDRINCL
 3

	)

41 
	#IP_TOS
 1

	)

42 
	#IP_TTL
 2

	)

43 
	#IP_RECVOPTS
 6

	)

45 
	#IP_RECVRETOPTS
 
IP_RETOPTS


	)

46 
	#IP_RETOPTS
 7

	)

47 
	#IP_MULTICAST_IF
 32

	)

48 
	#IP_MULTICAST_TTL
 33

	)

49 
	#IP_MULTICAST_LOOP
 34

	)

50 
	#IP_ADD_MEMBERSHIP
 35

	)

51 
	#IP_DROP_MEMBERSHIP
 36

	)

52 
	#IP_UNBLOCK_SOURCE
 37

	)

53 
	#IP_BLOCK_SOURCE
 38

	)

54 
	#IP_ADD_SOURCE_MEMBERSHIP
 39

	)

55 
	#IP_DROP_SOURCE_MEMBERSHIP
 40

	)

56 
	#IP_MSFILTER
 41

	)

57 #ià
defed
 
__USE_MISC
 || defed 
__USE_GNU


58 
	#MCAST_JOIN_GROUP
 42

	)

59 
	#MCAST_BLOCK_SOURCE
 43

	)

60 
	#MCAST_UNBLOCK_SOURCE
 44

	)

61 
	#MCAST_LEAVE_GROUP
 45

	)

62 
	#MCAST_JOIN_SOURCE_GROUP
 46

	)

63 
	#MCAST_LEAVE_SOURCE_GROUP
 47

	)

64 
	#MCAST_MSFILTER
 48

	)

65 
	#IP_MULTICAST_ALL
 49

	)

66 
	#IP_UNICAST_IF
 50

	)

68 
	#MCAST_EXCLUDE
 0

	)

69 
	#MCAST_INCLUDE
 1

	)

72 
	#IP_ROUTER_ALERT
 5

	)

73 
	#IP_PKTINFO
 8

	)

74 
	#IP_PKTOPTIONS
 9

	)

75 
	#IP_PMTUDISC
 10

	)

76 
	#IP_MTU_DISCOVER
 10

	)

77 
	#IP_RECVERR
 11

	)

78 
	#IP_RECVTTL
 12

	)

79 
	#IP_RECVTOS
 13

	)

80 
	#IP_MTU
 14

	)

81 
	#IP_FREEBIND
 15

	)

82 
	#IP_IPSEC_POLICY
 16

	)

83 
	#IP_XFRM_POLICY
 17

	)

84 
	#IP_PASSSEC
 18

	)

85 
	#IP_TRANSPARENT
 19

	)

86 
	#IP_MULTICAST_ALL
 49

	)

89 
	#IP_ORIGDSTADDR
 20

	)

90 
	#IP_RECVORIGDSTADDR
 
IP_ORIGDSTADDR


	)

92 
	#IP_MINTTL
 21

	)

96 
	#IP_PMTUDISC_DONT
 0

	)

97 
	#IP_PMTUDISC_WANT
 1

	)

98 
	#IP_PMTUDISC_DO
 2

	)

99 
	#IP_PMTUDISC_PROBE
 3

	)

102 
	#SOL_IP
 0

	)

104 
	#IP_DEFAULT_MULTICAST_TTL
 1

	)

105 
	#IP_DEFAULT_MULTICAST_LOOP
 1

	)

106 
	#IP_MAX_MEMBERSHIPS
 20

	)

108 #ià
defed
 
__USE_MISC
 || defed 
__USE_GNU


112 
	s_Ýts


114 
_addr
 
	m_d¡
;

115 
	m_Ýts
[40];

119 
	s_m»qn


121 
_addr
 
	mimr_muÉddr
;

122 
_addr
 
	mimr_add»ss
;

123 
	mimr_ifdex
;

127 
	s_pktfo


129 
	mi_ifdex
;

130 
_addr
 
	mi_¥ec_d¡
;

131 
_addr
 
	mi_addr
;

138 
	#IPV6_ADDRFORM
 1

	)

139 
	#IPV6_2292PKTINFO
 2

	)

140 
	#IPV6_2292HOPOPTS
 3

	)

141 
	#IPV6_2292DSTOPTS
 4

	)

142 
	#IPV6_2292RTHDR
 5

	)

143 
	#IPV6_2292PKTOPTIONS
 6

	)

144 
	#IPV6_CHECKSUM
 7

	)

145 
	#IPV6_2292HOPLIMIT
 8

	)

147 
	#SCM_SRCRT
 
IPV6_RXSRCRT


	)

149 
	#IPV6_NEXTHOP
 9

	)

150 
	#IPV6_AUTHHDR
 10

	)

151 
	#IPV6_UNICAST_HOPS
 16

	)

152 
	#IPV6_MULTICAST_IF
 17

	)

153 
	#IPV6_MULTICAST_HOPS
 18

	)

154 
	#IPV6_MULTICAST_LOOP
 19

	)

155 
	#IPV6_JOIN_GROUP
 20

	)

156 
	#IPV6_LEAVE_GROUP
 21

	)

157 
	#IPV6_ROUTER_ALERT
 22

	)

158 
	#IPV6_MTU_DISCOVER
 23

	)

159 
	#IPV6_MTU
 24

	)

160 
	#IPV6_RECVERR
 25

	)

161 
	#IPV6_V6ONLY
 26

	)

162 
	#IPV6_JOIN_ANYCAST
 27

	)

163 
	#IPV6_LEAVE_ANYCAST
 28

	)

164 
	#IPV6_IPSEC_POLICY
 34

	)

165 
	#IPV6_XFRM_POLICY
 35

	)

167 
	#IPV6_RECVPKTINFO
 49

	)

168 
	#IPV6_PKTINFO
 50

	)

169 
	#IPV6_RECVHOPLIMIT
 51

	)

170 
	#IPV6_HOPLIMIT
 52

	)

171 
	#IPV6_RECVHOPOPTS
 53

	)

172 
	#IPV6_HOPOPTS
 54

	)

173 
	#IPV6_RTHDRDSTOPTS
 55

	)

174 
	#IPV6_RECVRTHDR
 56

	)

175 
	#IPV6_RTHDR
 57

	)

176 
	#IPV6_RECVDSTOPTS
 58

	)

177 
	#IPV6_DSTOPTS
 59

	)

179 
	#IPV6_RECVTCLASS
 66

	)

180 
	#IPV6_TCLASS
 67

	)

183 
	#IPV6_ADD_MEMBERSHIP
 
IPV6_JOIN_GROUP


	)

184 
	#IPV6_DROP_MEMBERSHIP
 
IPV6_LEAVE_GROUP


	)

185 
	#IPV6_RXHOPOPTS
 
IPV6_HOPOPTS


	)

186 
	#IPV6_RXDSTOPTS
 
IPV6_DSTOPTS


	)

189 
	#IPV6_PMTUDISC_DONT
 0

	)

190 
	#IPV6_PMTUDISC_WANT
 1

	)

191 
	#IPV6_PMTUDISC_DO
 2

	)

192 
	#IPV6_PMTUDISC_PROBE
 3

	)

195 
	#SOL_IPV6
 41

	)

196 
	#SOL_ICMPV6
 58

	)

199 
	#IPV6_RTHDR_LOOSE
 0

	)

200 
	#IPV6_RTHDR_STRICT
 1

	)

202 
	#IPV6_RTHDR_TYPE_0
 0

	)

	@/usr/include/bits/ioctl-types.h

19 #iâdeà
_SYS_IOCTL_H


24 
	~<asm/ioùls.h
>

27 
	swsize


29 
	mws_row
;

30 
	mws_cÞ
;

31 
	mws_xpix
;

32 
	mws_ypix
;

35 
	#NCC
 8

	)

36 
	srmio


38 
	mc_iæag
;

39 
	mc_oæag
;

40 
	mc_cæag
;

41 
	mc_læag
;

42 
	mc_le
;

43 
	mc_cc
[
NCC
];

47 
	#TIOCM_LE
 0x001

	)

48 
	#TIOCM_DTR
 0x002

	)

49 
	#TIOCM_RTS
 0x004

	)

50 
	#TIOCM_ST
 0x008

	)

51 
	#TIOCM_SR
 0x010

	)

52 
	#TIOCM_CTS
 0x020

	)

53 
	#TIOCM_CAR
 0x040

	)

54 
	#TIOCM_RNG
 0x080

	)

55 
	#TIOCM_DSR
 0x100

	)

56 
	#TIOCM_CD
 
TIOCM_CAR


	)

57 
	#TIOCM_RI
 
TIOCM_RNG


	)

62 
	#N_TTY
 0

	)

63 
	#N_SLIP
 1

	)

64 
	#N_MOUSE
 2

	)

65 
	#N_PPP
 3

	)

66 
	#N_STRIP
 4

	)

67 
	#N_AX25
 5

	)

68 
	#N_X25
 6

	)

69 
	#N_6PACK
 7

	)

70 
	#N_MASC
 8

	)

71 
	#N_R3964
 9

	)

72 
	#N_PROFIBUS_FDL
 10

	)

73 
	#N_IRDA
 11

	)

74 
	#N_SMSBLOCK
 12

	)

75 
	#N_HDLC
 13

	)

76 
	#N_SYNC_PPP
 14

	)

77 
	#N_HCI
 15

	)

	@/usr/include/bits/ioctls.h

18 #iâdeà
_SYS_IOCTL_H


23 
	~<asm/ioùls.h
>

26 
	#SIOCADDRT
 0x890B

	)

27 
	#SIOCDELRT
 0x890C

	)

28 
	#SIOCRTMSG
 0x890D

	)

31 
	#SIOCGIFNAME
 0x8910

	)

32 
	#SIOCSIFLINK
 0x8911

	)

33 
	#SIOCGIFCONF
 0x8912

	)

34 
	#SIOCGIFFLAGS
 0x8913

	)

35 
	#SIOCSIFFLAGS
 0x8914

	)

36 
	#SIOCGIFADDR
 0x8915

	)

37 
	#SIOCSIFADDR
 0x8916

	)

38 
	#SIOCGIFDSTADDR
 0x8917

	)

39 
	#SIOCSIFDSTADDR
 0x8918

	)

40 
	#SIOCGIFBRDADDR
 0x8919

	)

41 
	#SIOCSIFBRDADDR
 0x891¨

	)

42 
	#SIOCGIFNETMASK
 0x891b

	)

43 
	#SIOCSIFNETMASK
 0x891ø

	)

44 
	#SIOCGIFMETRIC
 0x891d

	)

45 
	#SIOCSIFMETRIC
 0x891

	)

46 
	#SIOCGIFMEM
 0x891à

	)

47 
	#SIOCSIFMEM
 0x8920

	)

48 
	#SIOCGIFMTU
 0x8921

	)

49 
	#SIOCSIFMTU
 0x8922

	)

50 
	#SIOCSIFNAME
 0x8923

	)

51 
	#SIOCSIFHWADDR
 0x8924

	)

52 
	#SIOCGIFENCAP
 0x8925

	)

53 
	#SIOCSIFENCAP
 0x8926

	)

54 
	#SIOCGIFHWADDR
 0x8927

	)

55 
	#SIOCGIFSLAVE
 0x8929

	)

56 
	#SIOCSIFSLAVE
 0x8930

	)

57 
	#SIOCADDMULTI
 0x8931

	)

58 
	#SIOCDELMULTI
 0x8932

	)

59 
	#SIOCGIFINDEX
 0x8933

	)

60 
	#SIOGIFINDEX
 
SIOCGIFINDEX


	)

61 
	#SIOCSIFPFLAGS
 0x8934

	)

62 
	#SIOCGIFPFLAGS
 0x8935

	)

63 
	#SIOCDIFADDR
 0x8936

	)

64 
	#SIOCSIFHWBROADCAST
 0x8937

	)

65 
	#SIOCGIFCOUNT
 0x8938

	)

67 
	#SIOCGIFBR
 0x8940

	)

68 
	#SIOCSIFBR
 0x8941

	)

70 
	#SIOCGIFTXQLEN
 0x8942

	)

71 
	#SIOCSIFTXQLEN
 0x8943

	)

76 
	#SIOCDARP
 0x8953

	)

77 
	#SIOCGARP
 0x8954

	)

78 
	#SIOCSARP
 0x8955

	)

81 
	#SIOCDRARP
 0x8960

	)

82 
	#SIOCGRARP
 0x8961

	)

83 
	#SIOCSRARP
 0x8962

	)

87 
	#SIOCGIFMAP
 0x8970

	)

88 
	#SIOCSIFMAP
 0x8971

	)

92 
	#SIOCADDDLCI
 0x8980

	)

93 
	#SIOCDELDLCI
 0x8981

	)

102 
	#SIOCDEVPRIVATE
 0x89F0

	)

108 
	#SIOCPROTOPRIVATE
 0x89E0

	)

	@/usr/include/bits/param.h

19 #iâdeà
_SYS_PARAM_H


23 #iâdeà
ARG_MAX


24 
	#__undef_ARG_MAX


	)

27 
	~<lux/lims.h
>

28 
	~<lux/·¿m.h
>

31 #ifdeà
__undef_ARG_MAX


32 #undeà
ARG_MAX


33 #undeà
__undef_ARG_MAX


36 
	#MAXSYMLINKS
 20

	)

41 
	#NOFILE
 256

	)

42 
	#NCARGS
 131072

	)

	@/usr/include/bits/posix1_lim.h

24 #iâdef 
_BITS_POSIX1_LIM_H


25 
	#_BITS_POSIX1_LIM_H
 1

	)

31 
	#_POSIX_AIO_LISTIO_MAX
 2

	)

34 
	#_POSIX_AIO_MAX
 1

	)

37 
	#_POSIX_ARG_MAX
 4096

	)

40 #ifdeà
__USE_XOPEN2K


41 
	#_POSIX_CHILD_MAX
 25

	)

43 
	#_POSIX_CHILD_MAX
 6

	)

47 
	#_POSIX_DELAYTIMER_MAX
 32

	)

51 
	#_POSIX_HOST_NAME_MAX
 255

	)

54 
	#_POSIX_LINK_MAX
 8

	)

57 
	#_POSIX_LOGIN_NAME_MAX
 9

	)

60 
	#_POSIX_MAX_CANON
 255

	)

64 
	#_POSIX_MAX_INPUT
 255

	)

67 
	#_POSIX_MQ_OPEN_MAX
 8

	)

70 
	#_POSIX_MQ_PRIO_MAX
 32

	)

73 
	#_POSIX_NAME_MAX
 14

	)

76 #ifdeà
__USE_XOPEN2K


77 
	#_POSIX_NGROUPS_MAX
 8

	)

79 
	#_POSIX_NGROUPS_MAX
 0

	)

83 #ifdeà
__USE_XOPEN2K


84 
	#_POSIX_OPEN_MAX
 20

	)

86 
	#_POSIX_OPEN_MAX
 16

	)

89 #ià!
defed
 
__USE_XOPEN2K
 || defed 
__USE_GNU


92 
	#_POSIX_FD_SETSIZE
 
_POSIX_OPEN_MAX


	)

96 
	#_POSIX_PATH_MAX
 256

	)

99 
	#_POSIX_PIPE_BUF
 512

	)

103 
	#_POSIX_RE_DUP_MAX
 255

	)

106 
	#_POSIX_RTSIG_MAX
 8

	)

109 
	#_POSIX_SEM_NSEMS_MAX
 256

	)

112 
	#_POSIX_SEM_VALUE_MAX
 32767

	)

115 
	#_POSIX_SIGQUEUE_MAX
 32

	)

118 
	#_POSIX_SSIZE_MAX
 32767

	)

121 
	#_POSIX_STREAM_MAX
 8

	)

124 
	#_POSIX_SYMLINK_MAX
 255

	)

128 
	#_POSIX_SYMLOOP_MAX
 8

	)

131 
	#_POSIX_TIMER_MAX
 32

	)

134 
	#_POSIX_TTY_NAME_MAX
 9

	)

137 #ifdeà
__USE_XOPEN2K


138 
	#_POSIX_TZNAME_MAX
 6

	)

140 
	#_POSIX_TZNAME_MAX
 3

	)

143 #ià!
defed
 
__USE_XOPEN2K
 || defed 
__USE_GNU


145 
	#_POSIX_QLIMIT
 1

	)

149 
	#_POSIX_HIWAT
 
_POSIX_PIPE_BUF


	)

152 
	#_POSIX_UIO_MAXIOV
 16

	)

156 
	#_POSIX_CLOCKRES_MIN
 20000000

	)

160 
	~<bs/loÿl_lim.h
>

163 #iâdef 
SSIZE_MAX


164 
	#SSIZE_MAX
 
LONG_MAX


	)

171 #iâdef 
NGROUPS_MAX


172 
	#NGROUPS_MAX
 8

	)

	@/usr/include/bits/posix2_lim.h

22 #iâdef 
_BITS_POSIX2_LIM_H


23 
	#_BITS_POSIX2_LIM_H
 1

	)

27 
	#_POSIX2_BC_BASE_MAX
 99

	)

30 
	#_POSIX2_BC_DIM_MAX
 2048

	)

33 
	#_POSIX2_BC_SCALE_MAX
 99

	)

36 
	#_POSIX2_BC_STRING_MAX
 1000

	)

40 
	#_POSIX2_COLL_WEIGHTS_MAX
 2

	)

44 
	#_POSIX2_EXPR_NEST_MAX
 32

	)

47 
	#_POSIX2_LINE_MAX
 2048

	)

51 
	#_POSIX2_RE_DUP_MAX
 255

	)

55 
	#_POSIX2_CHARCLASS_NAME_MAX
 14

	)

62 #iâdef 
BC_BASE_MAX


63 
	#BC_BASE_MAX
 
_POSIX2_BC_BASE_MAX


	)

65 #iâdef 
BC_DIM_MAX


66 
	#BC_DIM_MAX
 
_POSIX2_BC_DIM_MAX


	)

68 #iâdef 
BC_SCALE_MAX


69 
	#BC_SCALE_MAX
 
_POSIX2_BC_SCALE_MAX


	)

71 #iâdef 
BC_STRING_MAX


72 
	#BC_STRING_MAX
 
_POSIX2_BC_STRING_MAX


	)

74 #iâdef 
COLL_WEIGHTS_MAX


75 
	#COLL_WEIGHTS_MAX
 255

	)

77 #iâdef 
EXPR_NEST_MAX


78 
	#EXPR_NEST_MAX
 
_POSIX2_EXPR_NEST_MAX


	)

80 #iâdef 
LINE_MAX


81 
	#LINE_MAX
 
_POSIX2_LINE_MAX


	)

83 #iâdef 
CHARCLASS_NAME_MAX


84 
	#CHARCLASS_NAME_MAX
 2048

	)

88 
	#RE_DUP_MAX
 (0x7fff)

	)

	@/usr/include/bits/posix_opt.h

19 #iâdef 
_BITS_POSIX_OPT_H


20 
	#_BITS_POSIX_OPT_H
 1

	)

23 
	#_POSIX_JOB_CONTROL
 1

	)

26 
	#_POSIX_SAVED_IDS
 1

	)

29 
	#_POSIX_PRIORITY_SCHEDULING
 200809L

	)

32 
	#_POSIX_SYNCHRONIZED_IO
 200809L

	)

35 
	#_POSIX_FSYNC
 200809L

	)

38 
	#_POSIX_MAPPED_FILES
 200809L

	)

41 
	#_POSIX_MEMLOCK
 200809L

	)

44 
	#_POSIX_MEMLOCK_RANGE
 200809L

	)

47 
	#_POSIX_MEMORY_PROTECTION
 200809L

	)

50 
	#_POSIX_CHOWN_RESTRICTED
 0

	)

54 
	#_POSIX_VDISABLE
 '\0'

	)

57 
	#_POSIX_NO_TRUNC
 1

	)

60 
	#_XOPEN_REALTIME
 1

	)

63 
	#_XOPEN_REALTIME_THREADS
 1

	)

66 
	#_XOPEN_SHM
 1

	)

69 
	#_POSIX_THREADS
 200809L

	)

72 
	#_POSIX_REENTRANT_FUNCTIONS
 1

	)

73 
	#_POSIX_THREAD_SAFE_FUNCTIONS
 200809L

	)

76 
	#_POSIX_THREAD_PRIORITY_SCHEDULING
 200809L

	)

79 
	#_POSIX_THREAD_ATTR_STACKSIZE
 200809L

	)

82 
	#_POSIX_THREAD_ATTR_STACKADDR
 200809L

	)

85 
	#_POSIX_THREAD_PRIO_INHERIT
 200809L

	)

89 
	#_POSIX_THREAD_PRIO_PROTECT
 200809L

	)

91 #ifdeà
__USE_XOPEN2K8


93 
	#_POSIX_THREAD_ROBUST_PRIO_INHERIT
 200809L

	)

96 
	#_POSIX_THREAD_ROBUST_PRIO_PROTECT
 -1

	)

100 
	#_POSIX_SEMAPHORES
 200809L

	)

103 
	#_POSIX_REALTIME_SIGNALS
 200809L

	)

106 
	#_POSIX_ASYNCHRONOUS_IO
 200809L

	)

107 
	#_POSIX_ASYNC_IO
 1

	)

109 
	#_LFS_ASYNCHRONOUS_IO
 1

	)

111 
	#_POSIX_PRIORITIZED_IO
 200809L

	)

114 
	#_LFS64_ASYNCHRONOUS_IO
 1

	)

117 
	#_LFS_LARGEFILE
 1

	)

118 
	#_LFS64_LARGEFILE
 1

	)

119 
	#_LFS64_STDIO
 1

	)

122 
	#_POSIX_SHARED_MEMORY_OBJECTS
 200809L

	)

125 
	#_POSIX_CPUTIME
 0

	)

128 
	#_POSIX_THREAD_CPUTIME
 0

	)

131 
	#_POSIX_REGEXP
 1

	)

134 
	#_POSIX_READER_WRITER_LOCKS
 200809L

	)

137 
	#_POSIX_SHELL
 1

	)

140 
	#_POSIX_TIMEOUTS
 200809L

	)

143 
	#_POSIX_SPIN_LOCKS
 200809L

	)

146 
	#_POSIX_SPAWN
 200809L

	)

149 
	#_POSIX_TIMERS
 200809L

	)

152 
	#_POSIX_BARRIERS
 200809L

	)

155 
	#_POSIX_MESSAGE_PASSING
 200809L

	)

158 
	#_POSIX_THREAD_PROCESS_SHARED
 200809L

	)

161 
	#_POSIX_MONOTONIC_CLOCK
 0

	)

164 
	#_POSIX_CLOCK_SELECTION
 200809L

	)

167 
	#_POSIX_ADVISORY_INFO
 200809L

	)

170 
	#_POSIX_IPV6
 200809L

	)

173 
	#_POSIX_RAW_SOCKETS
 200809L

	)

176 
	#_POSIX2_CHAR_TERM
 200809L

	)

179 
	#_POSIX_SPORADIC_SERVER
 -1

	)

180 
	#_POSIX_THREAD_SPORADIC_SERVER
 -1

	)

183 
	#_POSIX_TRACE
 -1

	)

184 
	#_POSIX_TRACE_EVENT_FILTER
 -1

	)

185 
	#_POSIX_TRACE_INHERIT
 -1

	)

186 
	#_POSIX_TRACE_LOG
 -1

	)

189 
	#_POSIX_TYPED_MEMORY_OBJECTS
 -1

	)

	@/usr/include/bits/pthreadtypes.h

18 #iâdeà
_BITS_PTHREADTYPES_H


19 
	#_BITS_PTHREADTYPES_H
 1

	)

21 
	~<bs/wÜdsize.h
>

23 #ifdeà
__x86_64__


24 #ià
__WORDSIZE
 == 64

25 
	#__SIZEOF_PTHREAD_ATTR_T
 56

	)

26 
	#__SIZEOF_PTHREAD_MUTEX_T
 40

	)

27 
	#__SIZEOF_PTHREAD_MUTEXATTR_T
 4

	)

28 
	#__SIZEOF_PTHREAD_COND_T
 48

	)

29 
	#__SIZEOF_PTHREAD_CONDATTR_T
 4

	)

30 
	#__SIZEOF_PTHREAD_RWLOCK_T
 56

	)

31 
	#__SIZEOF_PTHREAD_RWLOCKATTR_T
 8

	)

32 
	#__SIZEOF_PTHREAD_BARRIER_T
 32

	)

33 
	#__SIZEOF_PTHREAD_BARRIERATTR_T
 4

	)

35 
	#__SIZEOF_PTHREAD_ATTR_T
 32

	)

36 
	#__SIZEOF_PTHREAD_MUTEX_T
 32

	)

37 
	#__SIZEOF_PTHREAD_MUTEXATTR_T
 4

	)

38 
	#__SIZEOF_PTHREAD_COND_T
 48

	)

39 
	#__SIZEOF_PTHREAD_CONDATTR_T
 4

	)

40 
	#__SIZEOF_PTHREAD_RWLOCK_T
 44

	)

41 
	#__SIZEOF_PTHREAD_RWLOCKATTR_T
 8

	)

42 
	#__SIZEOF_PTHREAD_BARRIER_T
 20

	)

43 
	#__SIZEOF_PTHREAD_BARRIERATTR_T
 4

	)

46 
	#__SIZEOF_PTHREAD_ATTR_T
 36

	)

47 
	#__SIZEOF_PTHREAD_MUTEX_T
 24

	)

48 
	#__SIZEOF_PTHREAD_MUTEXATTR_T
 4

	)

49 
	#__SIZEOF_PTHREAD_COND_T
 48

	)

50 
	#__SIZEOF_PTHREAD_CONDATTR_T
 4

	)

51 
	#__SIZEOF_PTHREAD_RWLOCK_T
 32

	)

52 
	#__SIZEOF_PTHREAD_RWLOCKATTR_T
 8

	)

53 
	#__SIZEOF_PTHREAD_BARRIER_T
 20

	)

54 
	#__SIZEOF_PTHREAD_BARRIERATTR_T
 4

	)

60 
	t±h»ad_t
;

63 
	u±h»ad_©_t


65 
	m__size
[
__SIZEOF_PTHREAD_ATTR_T
];

66 
	m__®ign
;

68 #iâdeà
__have_±h»ad_©_t


69 
±h»ad_©_t
 
	t±h»ad_©_t
;

70 
	#__have_±h»ad_©_t
 1

	)

74 #ifdeà
__x86_64__


75 
	s__±h»ad_º®_li¡


77 
__±h»ad_º®_li¡
 *
	m__´ev
;

78 
__±h»ad_º®_li¡
 *
	m__Ãxt
;

79 } 
	t__±h»ad_li¡_t
;

81 
	s__±h»ad_º®_¦i¡


83 
__±h»ad_º®_¦i¡
 *
	m__Ãxt
;

84 } 
	t__±h»ad_¦i¡_t
;

92 
	s__±h»ad_mux_s


94 
	m__lock
;

95 
	m__couÁ
;

96 
	m__owÃr
;

97 #ifdeà
__x86_64__


98 
	m__nu£rs
;

102 
	m__kd
;

103 #ifdeà
__x86_64__


104 
	m__¥s
;

105 
	m__isiÚ
;

106 
__±h»ad_li¡_t
 
	m__li¡
;

107 
	#__PTHREAD_MUTEX_HAVE_PREV
 1

	)

108 
	#__PTHREAD_MUTEX_HAVE_ELISION
 1

	)

110 
	m__nu£rs
;

111 
__exnsiÚ__
 union

115 
	m__e¥s
;

116 
	m__isiÚ
;

117 
	#__¥s
 
d
.
__e¥s


	)

118 
	#__isiÚ
 
d
.
__isiÚ


	)

119 
	#__PTHREAD_MUTEX_HAVE_ELISION
 2

	)

120 } 
	md
;

121 
__±h»ad_¦i¡_t
 
	m__li¡
;

124 } 
	m__d©a
;

125 
	m__size
[
__SIZEOF_PTHREAD_MUTEX_T
];

126 
	m__®ign
;

127 } 
	t±h»ad_mux_t
;

131 
	m__size
[
__SIZEOF_PTHREAD_MUTEXATTR_T
];

132 
	m__®ign
;

133 } 
	t±h»ad_mux©_t
;

142 
	m__lock
;

143 
	m__fux
;

144 
__exnsiÚ__
 
	m__tÙ®_£q
;

145 
__exnsiÚ__
 
	m__wakeup_£q
;

146 
__exnsiÚ__
 
	m__wok_£q
;

147 *
	m__mux
;

148 
	m__nwas
;

149 
	m__brßdÿ¡_£q
;

150 } 
	m__d©a
;

151 
	m__size
[
__SIZEOF_PTHREAD_COND_T
];

152 
__exnsiÚ__
 
	m__®ign
;

153 } 
	t±h»ad_cÚd_t
;

157 
	m__size
[
__SIZEOF_PTHREAD_CONDATTR_T
];

158 
	m__®ign
;

159 } 
	t±h»ad_cÚd©_t
;

163 
	t±h»ad_key_t
;

167 
	t±h»ad_Úû_t
;

170 #ià
defed
 
__USE_UNIX98
 || defed 
__USE_XOPEN2K


175 #ifdeà
__x86_64__


178 
	m__lock
;

179 
	m__Ä_»ads
;

180 
	m__»ads_wakeup
;

181 
	m__wr_wakeup
;

182 
	m__Ä_»ads_queued
;

183 
	m__Ä_wrs_queued
;

184 
	m__wr
;

185 
	m__sh¬ed
;

186 
	m__·d1
;

187 
	m__·d2
;

190 
	m__æags
;

191 
	#__PTHREAD_RWLOCK_INT_FLAGS_SHARED
 1

	)

192 } 
	m__d©a
;

196 
	m__lock
;

197 
	m__Ä_»ads
;

198 
	m__»ads_wakeup
;

199 
	m__wr_wakeup
;

200 
	m__Ä_»ads_queued
;

201 
	m__Ä_wrs_queued
;

204 
	m__æags
;

205 
	m__sh¬ed
;

206 
	m__·d1
;

207 
	m__·d2
;

208 
	m__wr
;

209 } 
	m__d©a
;

211 
	m__size
[
__SIZEOF_PTHREAD_RWLOCK_T
];

212 
	m__®ign
;

213 } 
	t±h»ad_rwlock_t
;

217 
	m__size
[
__SIZEOF_PTHREAD_RWLOCKATTR_T
];

218 
	m__®ign
;

219 } 
	t±h»ad_rwlock©_t
;

223 #ifdeà
__USE_XOPEN2K


225 vÞ©
	t±h»ad_¥lock_t
;

232 
	m__size
[
__SIZEOF_PTHREAD_BARRIER_T
];

233 
	m__®ign
;

234 } 
	t±h»ad_b¬rr_t
;

238 
	m__size
[
__SIZEOF_PTHREAD_BARRIERATTR_T
];

239 
	m__®ign
;

240 } 
	t±h»ad_b¬r¿r_t
;

244 #iâdeà
__x86_64__


246 
	#__þnup_fù_©ibu
 
	`__©ibu__
 ((
	`__»g·rm__
 (1)))

	)

	@/usr/include/bits/sigaction.h

19 #iâdeà
_SIGNAL_H


24 
	ssigaùiÚ


27 #ifdeà
__USE_POSIX199309


31 
__sighªdËr_t
 
	m§_hªdËr
;

33 (*
	m§_sigaùiÚ
è(, 
	msigfo_t
 *, *);

35 
	m__sigaùiÚ_hªdËr
;

36 
	#§_hªdËr
 
__sigaùiÚ_hªdËr
.
§_hªdËr


	)

37 
	#§_sigaùiÚ
 
__sigaùiÚ_hªdËr
.
§_sigaùiÚ


	)

39 
__sighªdËr_t
 
	m§_hªdËr
;

43 
__sig£t_t
 
	m§_mask
;

46 
	m§_æags
;

49 (*
	m§_»¡Ü
) ();

53 
	#SA_NOCLDSTOP
 1

	)

54 
	#SA_NOCLDWAIT
 2

	)

55 
	#SA_SIGINFO
 4

	)

57 #ià
defed
 
__USE_UNIX98
 || defed 
__USE_MISC


58 
	#SA_ONSTACK
 0x08000000

	)

60 #ià
defed
 
__USE_UNIX98
 || defed 
__USE_MISC
 || defed 
__USE_XOPEN2K8


61 
	#SA_RESTART
 0x10000000

	)

62 
	#SA_NODEFER
 0x40000000

	)

64 
	#SA_RESETHAND
 0x80000000

	)

66 #ifdeà
__USE_MISC


67 
	#SA_INTERRUPT
 0x20000000

	)

70 
	#SA_NOMASK
 
SA_NODEFER


	)

71 
	#SA_ONESHOT
 
SA_RESETHAND


	)

72 
	#SA_STACK
 
SA_ONSTACK


	)

76 
	#SIG_BLOCK
 0

	)

77 
	#SIG_UNBLOCK
 1

	)

78 
	#SIG_SETMASK
 2

	)

	@/usr/include/bits/sigcontext.h

18 #iâdeà
_BITS_SIGCONTEXT_H


19 
	#_BITS_SIGCONTEXT_H
 1

	)

21 #ià!
defed
 
_SIGNAL_H
 && !defed 
_SYS_UCONTEXT_H


25 
	#FP_XSTATE_MAGIC1
 0x46505853U

	)

26 
	#FP_XSTATE_MAGIC2
 0x46505845U

	)

27 
	#FP_XSTATE_MAGIC2_SIZE
 (
FP_XSTATE_MAGIC2
)

	)

29 
	s_åx_sw_bys


31 
__ut32_t
 
	mmagic1
;

32 
__ut32_t
 
	mexnded_size
;

33 
__ut64_t
 
	mx¡©e_bv
;

34 
__ut32_t
 
	mx¡©e_size
;

35 
__ut32_t
 
	m·ddg
[7];

38 
	s_å»g


40 
	msignifiÿnd
[4];

41 
	mexpÚt
;

44 
	s_åx»g


46 
	msignifiÿnd
[4];

47 
	mexpÚt
;

48 
	m·ddg
[3];

51 
	s_xmm»g


53 
__ut32_t
 
	memt
[4];

58 #iâdeà
__x86_64__


60 
	s_å¡©e


63 
__ut32_t
 
	mcw
;

64 
__ut32_t
 
	msw
;

65 
__ut32_t
 
	mg
;

66 
__ut32_t
 
	moff
;

67 
__ut32_t
 
	mcs£l
;

68 
__ut32_t
 
	md©aoff
;

69 
__ut32_t
 
	md©a£l
;

70 
_å»g
 
	m_¡
[8];

71 
	m¡©us
;

72 
	mmagic
;

75 
__ut32_t
 
	m_fx¤_v
[6];

76 
__ut32_t
 
	mmxc¤
;

77 
__ut32_t
 
	m»£rved
;

78 
_åx»g
 
	m_fx¤_¡
[8];

79 
_xmm»g
 
	m_xmm
[8];

80 
__ut32_t
 
	m·ddg
[56];

83 #iâdeà
sigcÚxt_¡ruù


88 
	#sigcÚxt_¡ruù
 
sigcÚxt


	)

91 
	#X86_FXSR_MAGIC
 0x0000

	)

93 
	ssigcÚxt


95 
	mgs
, 
	m__gsh
;

96 
	mfs
, 
	m__fsh
;

97 
	mes
, 
	m__esh
;

98 
	mds
, 
	m__dsh
;

99 
	medi
;

100 
	mesi
;

101 
	mebp
;

102 
	me¥
;

103 
	mebx
;

104 
	medx
;

105 
	mecx
;

106 
	mx
;

107 
	m­no
;

108 
	mr
;

109 
	me
;

110 
	mcs
, 
	m__csh
;

111 
	meæags
;

112 
	me¥_©_sigÇl
;

113 
	mss
, 
	m__ssh
;

114 
_å¡©e
 * 
	må¡©e
;

115 
	mÞdmask
;

116 
	mü2
;

121 
	s_å¡©e


124 
__ut16_t
 
	mcwd
;

125 
__ut16_t
 
	mswd
;

126 
__ut16_t
 
	máw
;

127 
__ut16_t
 
	mfÝ
;

128 
__ut64_t
 
	mr
;

129 
__ut64_t
 
	mrdp
;

130 
__ut32_t
 
	mmxc¤
;

131 
__ut32_t
 
	mmxü_mask
;

132 
_åx»g
 
	m_¡
[8];

133 
_xmm»g
 
	m_xmm
[16];

134 
__ut32_t
 
	m·ddg
[24];

137 
	ssigcÚxt


139 
__ut64_t
 
	mr8
;

140 
__ut64_t
 
	mr9
;

141 
__ut64_t
 
	mr10
;

142 
__ut64_t
 
	mr11
;

143 
__ut64_t
 
	mr12
;

144 
__ut64_t
 
	mr13
;

145 
__ut64_t
 
	mr14
;

146 
__ut64_t
 
	mr15
;

147 
__ut64_t
 
	mrdi
;

148 
__ut64_t
 
	mrsi
;

149 
__ut64_t
 
	mrbp
;

150 
__ut64_t
 
	mrbx
;

151 
__ut64_t
 
	mrdx
;

152 
__ut64_t
 
	m¿x
;

153 
__ut64_t
 
	mrcx
;

154 
__ut64_t
 
	mr¥
;

155 
__ut64_t
 
	mr
;

156 
__ut64_t
 
	meæags
;

157 
	mcs
;

158 
	mgs
;

159 
	mfs
;

160 
	m__·d0
;

161 
__ut64_t
 
	mr
;

162 
__ut64_t
 
	m­no
;

163 
__ut64_t
 
	mÞdmask
;

164 
__ut64_t
 
	mü2
;

165 
__exnsiÚ__
 union

167 
_å¡©e
 * 
	må¡©e
;

168 
__ut64_t
 
	m__å¡©e_wÜd
;

170 
__ut64_t
 
	m__»£rved1
 [8];

175 
	s_x§ve_hdr


177 
__ut64_t
 
	mx¡©e_bv
;

178 
__ut64_t
 
	m»£rved1
[2];

179 
__ut64_t
 
	m»£rved2
[5];

182 
	s_ymmh_¡©e


184 
__ut32_t
 
	mymmh_¥aû
[64];

187 
	s_x¡©e


189 
_å¡©e
 
	må¡©e
;

190 
_x§ve_hdr
 
	mx¡©e_hdr
;

191 
_ymmh_¡©e
 
	mymmh
;

	@/usr/include/bits/siginfo.h

19 #ià!
defed
 
_SIGNAL_H
 && !defed 
__Ãed_sigfo_t
 \

20 && !
defed
 
	g__Ãed_sigevt_t


24 
	~<bs/wÜdsize.h
>

26 #ià(!
defed
 
__have_sigv®_t
 \

27 && (
defed
 
	g_SIGNAL_H
 || defed 
	g__Ãed_sigfo_t
 \

28 || 
defed
 
	g__Ãed_sigevt_t
))

29 
	#__have_sigv®_t
 1

	)

32 
	usigv®


34 
	msiv®_t
;

35 *
	msiv®_±r
;

36 } 
	tsigv®_t
;

39 #ià(!
defed
 
__have_sigfo_t
 \

40 && (
defed
 
	g_SIGNAL_H
 || defed 
	g__Ãed_sigfo_t
))

41 
	#__have_sigfo_t
 1

	)

43 
	#__SI_MAX_SIZE
 128

	)

44 #ià
__WORDSIZE
 == 64

45 
	#__SI_PAD_SIZE
 ((
__SI_MAX_SIZE
 /  ()è- 4)

	)

47 
	#__SI_PAD_SIZE
 ((
__SI_MAX_SIZE
 /  ()è- 3)

	)

50 #ià
defed
 
__x86_64__
 && 
__WORDSIZE
 == 32

55 
__þock_t
 
	t__©ibu__
 ((
	t__®igÃd__
 (4))è
	t__sigchld_þock_t
;

56 
	#__SI_ALIGNMENT
 
	`__©ibu__
 ((
	`__®igÃd__
 (8)))

	)

58 
__þock_t
 
	t__sigchld_þock_t
;

59 
	#__SI_ALIGNMENT


	)

64 
si_signo
;

65 
si_ºo
;

67 
si_code
;

71 
_·d
[
__SI_PAD_SIZE
];

76 
__pid_t
 
si_pid
;

77 
__uid_t
 
si_uid
;

78 } 
_kl
;

83 
si_tid
;

84 
si_ovrun
;

85 
sigv®_t
 
si_sigv®
;

86 } 
_tim
;

91 
__pid_t
 
si_pid
;

92 
__uid_t
 
si_uid
;

93 
sigv®_t
 
si_sigv®
;

94 } 
_¹
;

99 
__pid_t
 
si_pid
;

100 
__uid_t
 
si_uid
;

101 
si_¡©us
;

102 
__sigchld_þock_t
 
si_utime
;

103 
__sigchld_þock_t
 
si_¡ime
;

104 } 
_sigchld
;

109 *
si_addr
;

110 
si_addr_lsb
;

111 } 
_sigçuÉ
;

116 
si_bªd
;

117 
si_fd
;

118 } 
_sigpÞl
;

123 *
_ÿÎ_addr
;

124 
_sysÿÎ
;

125 
_¬ch
;

126 } 
_sigsys
;

127 } 
_siflds
;

128 } 
	tsigfo_t
 
	t__SI_ALIGNMENT
;

132 
	#si_pid
 
_siflds
.
_kl
.
si_pid


	)

133 
	#si_uid
 
_siflds
.
_kl
.
si_uid


	)

134 
	#si_timid
 
_siflds
.
_tim
.
si_tid


	)

135 
	#si_ovrun
 
_siflds
.
_tim
.
si_ovrun


	)

136 
	#si_¡©us
 
_siflds
.
_sigchld
.
si_¡©us


	)

137 
	#si_utime
 
_siflds
.
_sigchld
.
si_utime


	)

138 
	#si_¡ime
 
_siflds
.
_sigchld
.
si_¡ime


	)

139 
	#si_v®ue
 
_siflds
.
_¹
.
si_sigv®


	)

140 
	#si_t
 
_siflds
.
_¹
.
si_sigv®
.
siv®_t


	)

141 
	#si_±r
 
_siflds
.
_¹
.
si_sigv®
.
siv®_±r


	)

142 
	#si_addr
 
_siflds
.
_sigçuÉ
.
si_addr


	)

143 
	#si_addr_lsb
 
_siflds
.
_sigçuÉ
.
si_addr_lsb


	)

144 
	#si_bªd
 
_siflds
.
_sigpÞl
.
si_bªd


	)

145 
	#si_fd
 
_siflds
.
_sigpÞl
.
si_fd


	)

146 
	#si_ÿÎ_addr
 
_siflds
.
_sigsys
.
_ÿÎ_addr


	)

147 
	#si_sysÿÎ
 
_siflds
.
_sigsys
.
_sysÿÎ


	)

148 
	#si_¬ch
 
_siflds
.
_sigsys
.
_¬ch


	)

155 
SI_ASYNCNL
 = -60,

156 
	#SI_ASYNCNL
 
SI_ASYNCNL


	)

157 
SI_TKILL
 = -6,

158 
	#SI_TKILL
 
SI_TKILL


	)

159 
SI_SIGIO
,

160 
	#SI_SIGIO
 
SI_SIGIO


	)

161 
SI_ASYNCIO
,

162 
	#SI_ASYNCIO
 
SI_ASYNCIO


	)

163 
SI_MESGQ
,

164 
	#SI_MESGQ
 
SI_MESGQ


	)

165 
SI_TIMER
,

166 
	#SI_TIMER
 
SI_TIMER


	)

167 
SI_QUEUE
,

168 
	#SI_QUEUE
 
SI_QUEUE


	)

169 
SI_USER
,

170 
	#SI_USER
 
SI_USER


	)

171 
SI_KERNEL
 = 0x80

172 
	#SI_KERNEL
 
SI_KERNEL


	)

179 
ILL_ILLOPC
 = 1,

180 
	#ILL_ILLOPC
 
ILL_ILLOPC


	)

181 
ILL_ILLOPN
,

182 
	#ILL_ILLOPN
 
ILL_ILLOPN


	)

183 
ILL_ILLADR
,

184 
	#ILL_ILLADR
 
ILL_ILLADR


	)

185 
ILL_ILLTRP
,

186 
	#ILL_ILLTRP
 
ILL_ILLTRP


	)

187 
ILL_PRVOPC
,

188 
	#ILL_PRVOPC
 
ILL_PRVOPC


	)

189 
ILL_PRVREG
,

190 
	#ILL_PRVREG
 
ILL_PRVREG


	)

191 
ILL_COPROC
,

192 
	#ILL_COPROC
 
ILL_COPROC


	)

193 
ILL_BADSTK


194 
	#ILL_BADSTK
 
ILL_BADSTK


	)

200 
FPE_INTDIV
 = 1,

201 
	#FPE_INTDIV
 
FPE_INTDIV


	)

202 
FPE_INTOVF
,

203 
	#FPE_INTOVF
 
FPE_INTOVF


	)

204 
FPE_FLTDIV
,

205 
	#FPE_FLTDIV
 
FPE_FLTDIV


	)

206 
FPE_FLTOVF
,

207 
	#FPE_FLTOVF
 
FPE_FLTOVF


	)

208 
FPE_FLTUND
,

209 
	#FPE_FLTUND
 
FPE_FLTUND


	)

210 
FPE_FLTRES
,

211 
	#FPE_FLTRES
 
FPE_FLTRES


	)

212 
FPE_FLTINV
,

213 
	#FPE_FLTINV
 
FPE_FLTINV


	)

214 
FPE_FLTSUB


215 
	#FPE_FLTSUB
 
FPE_FLTSUB


	)

221 
SEGV_MAPERR
 = 1,

222 
	#SEGV_MAPERR
 
SEGV_MAPERR


	)

223 
SEGV_ACCERR


224 
	#SEGV_ACCERR
 
SEGV_ACCERR


	)

230 
BUS_ADRALN
 = 1,

231 
	#BUS_ADRALN
 
BUS_ADRALN


	)

232 
BUS_ADRERR
,

233 
	#BUS_ADRERR
 
BUS_ADRERR


	)

234 
BUS_OBJERR
,

235 
	#BUS_OBJERR
 
BUS_OBJERR


	)

236 
BUS_MCEERR_AR
,

237 
	#BUS_MCEERR_AR
 
BUS_MCEERR_AR


	)

238 
BUS_MCEERR_AO


239 
	#BUS_MCEERR_AO
 
BUS_MCEERR_AO


	)

245 
TRAP_BRKPT
 = 1,

246 
	#TRAP_BRKPT
 
TRAP_BRKPT


	)

247 
TRAP_TRACE


248 
	#TRAP_TRACE
 
TRAP_TRACE


	)

254 
CLD_EXITED
 = 1,

255 
	#CLD_EXITED
 
CLD_EXITED


	)

256 
CLD_KILLED
,

257 
	#CLD_KILLED
 
CLD_KILLED


	)

258 
CLD_DUMPED
,

259 
	#CLD_DUMPED
 
CLD_DUMPED


	)

260 
CLD_TRAPPED
,

261 
	#CLD_TRAPPED
 
CLD_TRAPPED


	)

262 
CLD_STOPPED
,

263 
	#CLD_STOPPED
 
CLD_STOPPED


	)

264 
CLD_CONTINUED


265 
	#CLD_CONTINUED
 
CLD_CONTINUED


	)

271 
POLL_IN
 = 1,

272 
	#POLL_IN
 
POLL_IN


	)

273 
POLL_OUT
,

274 
	#POLL_OUT
 
POLL_OUT


	)

275 
POLL_MSG
,

276 
	#POLL_MSG
 
POLL_MSG


	)

277 
POLL_ERR
,

278 
	#POLL_ERR
 
POLL_ERR


	)

279 
POLL_PRI
,

280 
	#POLL_PRI
 
POLL_PRI


	)

281 
POLL_HUP


282 
	#POLL_HUP
 
POLL_HUP


	)

285 #undeà
__Ãed_sigfo_t


289 #ià(
defed
 
_SIGNAL_H
 || defed 
__Ãed_sigevt_t
) \

290 && !
defed
 
__have_sigevt_t


291 
	#__have_sigevt_t
 1

	)

294 
	#__SIGEV_MAX_SIZE
 64

	)

295 #ià
__WORDSIZE
 == 64

296 
	#__SIGEV_PAD_SIZE
 ((
__SIGEV_MAX_SIZE
 /  ()è- 4)

	)

298 
	#__SIGEV_PAD_SIZE
 ((
__SIGEV_MAX_SIZE
 /  ()è- 3)

	)

302 #iâdeà
__have_±h»ad_©_t


303 
±h»ad_©_t
 
	t±h»ad_©_t
;

304 
	#__have_±h»ad_©_t
 1

	)

307 
	ssigevt


309 
sigv®_t
 
sigev_v®ue
;

310 
sigev_signo
;

311 
sigev_nÙify
;

315 
_·d
[
__SIGEV_PAD_SIZE
];

319 
__pid_t
 
_tid
;

323 (*
_funùiÚ
è(
sigv®_t
);

324 
±h»ad_©_t
 *
_©ibu
;

325 } 
_sigev_th»ad
;

326 } 
_sigev_un
;

327 } 
	tsigevt_t
;

330 
	#sigev_nÙify_funùiÚ
 
_sigev_un
.
_sigev_th»ad
.
_funùiÚ


	)

331 
	#sigev_nÙify_©ibus
 
_sigev_un
.
_sigev_th»ad
.
_©ibu


	)

336 
SIGEV_SIGNAL
 = 0,

337 
	#SIGEV_SIGNAL
 
SIGEV_SIGNAL


	)

338 
SIGEV_NONE
,

339 
	#SIGEV_NONE
 
SIGEV_NONE


	)

340 
SIGEV_THREAD
,

341 
	#SIGEV_THREAD
 
SIGEV_THREAD


	)

343 
SIGEV_THREAD_ID
 = 4

344 
	#SIGEV_THREAD_ID
 
SIGEV_THREAD_ID


	)

	@/usr/include/bits/signum.h

19 #ifdef 
_SIGNAL_H


22 
	#SIG_ERR
 ((
__sighªdËr_t
è-1è

	)

23 
	#SIG_DFL
 ((
__sighªdËr_t
è0è

	)

24 
	#SIG_IGN
 ((
__sighªdËr_t
è1è

	)

26 #ifdeà
__USE_UNIX98


27 
	#SIG_HOLD
 ((
__sighªdËr_t
è2è

	)

32 
	#SIGHUP
 1

	)

33 
	#SIGINT
 2

	)

34 
	#SIGQUIT
 3

	)

35 
	#SIGILL
 4

	)

36 
	#SIGTRAP
 5

	)

37 
	#SIGABRT
 6

	)

38 
	#SIGIOT
 6

	)

39 
	#SIGBUS
 7

	)

40 
	#SIGFPE
 8

	)

41 
	#SIGKILL
 9

	)

42 
	#SIGUSR1
 10

	)

43 
	#SIGSEGV
 11

	)

44 
	#SIGUSR2
 12

	)

45 
	#SIGPIPE
 13

	)

46 
	#SIGALRM
 14

	)

47 
	#SIGTERM
 15

	)

48 
	#SIGSTKFLT
 16

	)

49 
	#SIGCLD
 
SIGCHLD


	)

50 
	#SIGCHLD
 17

	)

51 
	#SIGCONT
 18

	)

52 
	#SIGSTOP
 19

	)

53 
	#SIGTSTP
 20

	)

54 
	#SIGTTIN
 21

	)

55 
	#SIGTTOU
 22

	)

56 
	#SIGURG
 23

	)

57 
	#SIGXCPU
 24

	)

58 
	#SIGXFSZ
 25

	)

59 
	#SIGVTALRM
 26

	)

60 
	#SIGPROF
 27

	)

61 
	#SIGWINCH
 28

	)

62 
	#SIGPOLL
 
SIGIO


	)

63 
	#SIGIO
 29

	)

64 
	#SIGPWR
 30

	)

65 
	#SIGSYS
 31

	)

66 
	#SIGUNUSED
 31

	)

68 
	#_NSIG
 65

	)

71 
	#SIGRTMIN
 (
	`__libc_cu¼t_sig¹m
 ())

	)

72 
	#SIGRTMAX
 (
	`__libc_cu¼t_sig¹max
 ())

	)

76 
	#__SIGRTMIN
 32

	)

77 
	#__SIGRTMAX
 (
_NSIG
 - 1)

	)

	@/usr/include/bits/sigset.h

19 #iâdef 
_SIGSET_H_ty³s


20 
	#_SIGSET_H_ty³s
 1

	)

22 
	t__sig_©omic_t
;

26 
	#_SIGSET_NWORDS
 (1024 / (8 *  ()))

	)

29 
	m__v®
[
_SIGSET_NWORDS
];

30 } 
	t__sig£t_t
;

41 #ià!
defed
 
_SIGSET_H_âs
 && defed 
_SIGNAL_H


42 
	#_SIGSET_H_âs
 1

	)

44 #iâdeà
_EXTERN_INLINE


45 
	#_EXTERN_INLINE
 
__exº_le


	)

49 
	#__sigmask
(
sig
) \

50 (((è1è<< (((
sig
è- 1è% (8 *  ())))

	)

53 
	#__sigwÜd
(
sig
è(((sigè- 1è/ (8 *  ()))

	)

55 #ià
defed
 
__GNUC__
 && __GNUC__ >= 2

56 
	#__sigem±y£t
(
£t
) \

57 (
	`__exnsiÚ__
 ({ 
__út
 = 
_SIGSET_NWORDS
; \

58 
sig£t_t
 *
__£t
 = (
£t
); \

59 --
__út
 >ð0è
__£t
->
__v®
[__cnt] = 0; \

60 0; }))

	)

61 
	#__sigfl£t
(
£t
) \

62 (
	`__exnsiÚ__
 ({ 
__út
 = 
_SIGSET_NWORDS
; \

63 
sig£t_t
 *
__£t
 = (
£t
); \

64 --
__út
 >ð0è
__£t
->
__v®
[__cnt] = ~0UL; \

65 0; }))

	)

67 #ifdeà
__USE_GNU


71 
	#__sigi£m±y£t
(
£t
) \

72 (
	`__exnsiÚ__
 ({ 
__út
 = 
_SIGSET_NWORDS
; \

73 cÚ¡ 
sig£t_t
 *
__£t
 = (
£t
); \

74 
__»t
 = 
__£t
->
__v®
[--
__út
]; \

75 !
__»t
 && --
__út
 >= 0) \

76 
__»t
 = 
__£t
->
__v®
[
__út
]; \

77 
__»t
 =ð0; }))

	)

78 
	#__sigªd£t
(
de¡
, 
Ëá
, 
right
) \

79 (
	`__exnsiÚ__
 ({ 
__út
 = 
_SIGSET_NWORDS
; \

80 
sig£t_t
 *
__de¡
 = (
de¡
); \

81 cÚ¡ 
sig£t_t
 *
__Ëá
 = (
Ëá
); \

82 cÚ¡ 
sig£t_t
 *
__right
 = (
right
); \

83 --
__út
 >= 0) \

84 
__de¡
->
__v®
[
__út
] = (
__Ëá
->__val[__cnt] \

85 & 
__right
->
__v®
[
__út
]); \

86 0; }))

	)

87 
	#__sigÜ£t
(
de¡
, 
Ëá
, 
right
) \

88 (
	`__exnsiÚ__
 ({ 
__út
 = 
_SIGSET_NWORDS
; \

89 
sig£t_t
 *
__de¡
 = (
de¡
); \

90 cÚ¡ 
sig£t_t
 *
__Ëá
 = (
Ëá
); \

91 cÚ¡ 
sig£t_t
 *
__right
 = (
right
); \

92 --
__út
 >= 0) \

93 
__de¡
->
__v®
[
__út
] = (
__Ëá
->__val[__cnt] \

94 | 
__right
->
__v®
[
__út
]); \

95 0; }))

	)

102 
__sigismemb
 (cÚ¡ 
__sig£t_t
 *, );

103 
__sigadd£t
 (
__sig£t_t
 *, );

104 
__sigd£t
 (
__sig£t_t
 *, );

106 #ifdeà
__USE_EXTERN_INLINES


107 
	#__SIGSETFN
(
NAME
, 
BODY
, 
CONST
) \

108 
_EXTERN_INLINE
 \

109 
	`NAME
 (
CONST
 
__sig£t_t
 *
__£t
, 
__sig
) \

111 
__mask
 = 
	`__sigmask
 (
__sig
); \

112 
__wÜd
 = 
	`__sigwÜd
 (
__sig
); \

113  
BODY
; \

114 }

	)

116 
__SIGSETFN
 (
__sigismemb
, (
__£t
->
__v®
[
__wÜd
] & 
__mask
) ? 1 : 0, const)

117 
__SIGSETFN
 (
__sigadd£t
, ((
__£t
->
__v®
[
__wÜd
] |ð
__mask
), 0), )

118 
__SIGSETFN
 (
__sigd£t
, ((
__£t
->
__v®
[
__wÜd
] &ð~
__mask
), 0), )

120 #undeà
__SIGSETFN


	@/usr/include/bits/sigstack.h

19 #iâdeà
_SIGNAL_H


25 
	ssig¡ack


27 *
	mss_¥
;

28 
	mss_Ú¡ack
;

35 
	mSS_ONSTACK
 = 1,

36 
	#SS_ONSTACK
 
SS_ONSTACK


	)

37 
	mSS_DISABLE


38 
	#SS_DISABLE
 
SS_DISABLE


	)

42 
	#MINSIGSTKSZ
 2048

	)

45 
	#SIGSTKSZ
 8192

	)

49 
	ssig®t¡ack


51 *
	mss_¥
;

52 
	mss_æags
;

53 
size_t
 
	mss_size
;

54 } 
	t¡ack_t
;

	@/usr/include/bits/sigthread.h

19 #iâdeà
_BITS_SIGTHREAD_H


20 
	#_BITS_SIGTHREAD_H
 1

	)

22 #ià!
defed
 
_SIGNAL_H
 && !defed 
_PTHREAD_H


30 
	$±h»ad_sigmask
 (
__how
,

31 cÚ¡ 
__sig£t_t
 *
__»¡riù
 
__Ãwmask
,

32 
__sig£t_t
 *
__»¡riù
 
__Þdmask
)
__THROW
;

35 
	$±h»ad_kl
 (
±h»ad_t
 
__th»adid
, 
__signo
è
__THROW
;

37 #ifdeà
__USE_GNU


39 
	$±h»ad_sigqueue
 (
±h»ad_t
 
__th»adid
, 
__signo
,

40 cÚ¡ 
sigv®
 
__v®ue
è
__THROW
;

	@/usr/include/bits/socket.h

19 #iâdeà
__BITS_SOCKET_H


20 
	#__BITS_SOCKET_H


	)

22 #iâdeà
_SYS_SOCKET_H


26 
	#__Ãed_size_t


	)

27 
	~<¡ddef.h
>

29 
	~<sys/ty³s.h
>

32 #iâdeà
__sockËn_t_defed


33 
__sockËn_t
 
	tsockËn_t
;

34 
	#__sockËn_t_defed


	)

38 
	~<bs/sock_ty³.h
>

41 
	#PF_UNSPEC
 0

	)

42 
	#PF_LOCAL
 1

	)

43 
	#PF_UNIX
 
PF_LOCAL


	)

44 
	#PF_FILE
 
PF_LOCAL


	)

45 
	#PF_INET
 2

	)

46 
	#PF_AX25
 3

	)

47 
	#PF_IPX
 4

	)

48 
	#PF_APPLETALK
 5

	)

49 
	#PF_NETROM
 6

	)

50 
	#PF_BRIDGE
 7

	)

51 
	#PF_ATMPVC
 8

	)

52 
	#PF_X25
 9

	)

53 
	#PF_INET6
 10

	)

54 
	#PF_ROSE
 11

	)

55 
	#PF_DECÃt
 12

	)

56 
	#PF_NETBEUI
 13

	)

57 
	#PF_SECURITY
 14

	)

58 
	#PF_KEY
 15

	)

59 
	#PF_NETLINK
 16

	)

60 
	#PF_ROUTE
 
PF_NETLINK


	)

61 
	#PF_PACKET
 17

	)

62 
	#PF_ASH
 18

	)

63 
	#PF_ECONET
 19

	)

64 
	#PF_ATMSVC
 20

	)

65 
	#PF_RDS
 21

	)

66 
	#PF_SNA
 22

	)

67 
	#PF_IRDA
 23

	)

68 
	#PF_PPPOX
 24

	)

69 
	#PF_WANPIPE
 25

	)

70 
	#PF_LLC
 26

	)

71 
	#PF_CAN
 29

	)

72 
	#PF_TIPC
 30

	)

73 
	#PF_BLUETOOTH
 31

	)

74 
	#PF_IUCV
 32

	)

75 
	#PF_RXRPC
 33

	)

76 
	#PF_ISDN
 34

	)

77 
	#PF_PHONET
 35

	)

78 
	#PF_IEEE802154
 36

	)

79 
	#PF_CAIF
 37

	)

80 
	#PF_ALG
 38

	)

81 
	#PF_NFC
 39

	)

82 
	#PF_VSOCK
 40

	)

83 
	#PF_MAX
 41

	)

86 
	#AF_UNSPEC
 
PF_UNSPEC


	)

87 
	#AF_LOCAL
 
PF_LOCAL


	)

88 
	#AF_UNIX
 
PF_UNIX


	)

89 
	#AF_FILE
 
PF_FILE


	)

90 
	#AF_INET
 
PF_INET


	)

91 
	#AF_AX25
 
PF_AX25


	)

92 
	#AF_IPX
 
PF_IPX


	)

93 
	#AF_APPLETALK
 
PF_APPLETALK


	)

94 
	#AF_NETROM
 
PF_NETROM


	)

95 
	#AF_BRIDGE
 
PF_BRIDGE


	)

96 
	#AF_ATMPVC
 
PF_ATMPVC


	)

97 
	#AF_X25
 
PF_X25


	)

98 
	#AF_INET6
 
PF_INET6


	)

99 
	#AF_ROSE
 
PF_ROSE


	)

100 
	#AF_DECÃt
 
PF_DECÃt


	)

101 
	#AF_NETBEUI
 
PF_NETBEUI


	)

102 
	#AF_SECURITY
 
PF_SECURITY


	)

103 
	#AF_KEY
 
PF_KEY


	)

104 
	#AF_NETLINK
 
PF_NETLINK


	)

105 
	#AF_ROUTE
 
PF_ROUTE


	)

106 
	#AF_PACKET
 
PF_PACKET


	)

107 
	#AF_ASH
 
PF_ASH


	)

108 
	#AF_ECONET
 
PF_ECONET


	)

109 
	#AF_ATMSVC
 
PF_ATMSVC


	)

110 
	#AF_RDS
 
PF_RDS


	)

111 
	#AF_SNA
 
PF_SNA


	)

112 
	#AF_IRDA
 
PF_IRDA


	)

113 
	#AF_PPPOX
 
PF_PPPOX


	)

114 
	#AF_WANPIPE
 
PF_WANPIPE


	)

115 
	#AF_LLC
 
PF_LLC


	)

116 
	#AF_CAN
 
PF_CAN


	)

117 
	#AF_TIPC
 
PF_TIPC


	)

118 
	#AF_BLUETOOTH
 
PF_BLUETOOTH


	)

119 
	#AF_IUCV
 
PF_IUCV


	)

120 
	#AF_RXRPC
 
PF_RXRPC


	)

121 
	#AF_ISDN
 
PF_ISDN


	)

122 
	#AF_PHONET
 
PF_PHONET


	)

123 
	#AF_IEEE802154
 
PF_IEEE802154


	)

124 
	#AF_CAIF
 
PF_CAIF


	)

125 
	#AF_ALG
 
PF_ALG


	)

126 
	#AF_NFC
 
PF_NFC


	)

127 
	#AF_VSOCK
 
PF_VSOCK


	)

128 
	#AF_MAX
 
PF_MAX


	)

134 
	#SOL_RAW
 255

	)

135 
	#SOL_DECNET
 261

	)

136 
	#SOL_X25
 262

	)

137 
	#SOL_PACKET
 263

	)

138 
	#SOL_ATM
 264

	)

139 
	#SOL_AAL
 265

	)

140 
	#SOL_IRDA
 266

	)

143 
	#SOMAXCONN
 128

	)

146 
	~<bs/sockaddr.h
>

149 
	ssockaddr


151 
__SOCKADDR_COMMON
 (
§_
);

152 
	m§_d©a
[14];

158 
	#__ss_®igÁy³
 

	)

159 
	#_SS_SIZE
 128

	)

160 
	#_SS_PADSIZE
 (
_SS_SIZE
 - (2 *  (
__ss_®igÁy³
)))

	)

162 
	ssockaddr_¡Üage


164 
__SOCKADDR_COMMON
 (
ss_
);

165 
__ss_®igÁy³
 
	m__ss_®ign
;

166 
	m__ss_·ddg
[
_SS_PADSIZE
];

173 
	mMSG_OOB
 = 0x01,

174 
	#MSG_OOB
 
MSG_OOB


	)

175 
	mMSG_PEEK
 = 0x02,

176 
	#MSG_PEEK
 
MSG_PEEK


	)

177 
	mMSG_DONTROUTE
 = 0x04,

178 
	#MSG_DONTROUTE
 
MSG_DONTROUTE


	)

179 #ifdeà
__USE_GNU


181 
	mMSG_TRYHARD
 = 
MSG_DONTROUTE
,

182 
	#MSG_TRYHARD
 
MSG_DONTROUTE


	)

184 
	mMSG_CTRUNC
 = 0x08,

185 
	#MSG_CTRUNC
 
MSG_CTRUNC


	)

186 
	mMSG_PROXY
 = 0x10,

187 
	#MSG_PROXY
 
MSG_PROXY


	)

188 
	mMSG_TRUNC
 = 0x20,

189 
	#MSG_TRUNC
 
MSG_TRUNC


	)

190 
	mMSG_DONTWAIT
 = 0x40,

191 
	#MSG_DONTWAIT
 
MSG_DONTWAIT


	)

192 
	mMSG_EOR
 = 0x80,

193 
	#MSG_EOR
 
MSG_EOR


	)

194 
	mMSG_WAITALL
 = 0x100,

195 
	#MSG_WAITALL
 
MSG_WAITALL


	)

196 
	mMSG_FIN
 = 0x200,

197 
	#MSG_FIN
 
MSG_FIN


	)

198 
	mMSG_SYN
 = 0x400,

199 
	#MSG_SYN
 
MSG_SYN


	)

200 
	mMSG_CONFIRM
 = 0x800,

201 
	#MSG_CONFIRM
 
MSG_CONFIRM


	)

202 
	mMSG_RST
 = 0x1000,

203 
	#MSG_RST
 
MSG_RST


	)

204 
	mMSG_ERRQUEUE
 = 0x2000,

205 
	#MSG_ERRQUEUE
 
MSG_ERRQUEUE


	)

206 
	mMSG_NOSIGNAL
 = 0x4000,

207 
	#MSG_NOSIGNAL
 
MSG_NOSIGNAL


	)

208 
	mMSG_MORE
 = 0x8000,

209 
	#MSG_MORE
 
MSG_MORE


	)

210 
	mMSG_WAITFORONE
 = 0x10000,

211 
	#MSG_WAITFORONE
 
MSG_WAITFORONE


	)

212 
	mMSG_FASTOPEN
 = 0x20000000,

213 
	#MSG_FASTOPEN
 
MSG_FASTOPEN


	)

215 
	mMSG_CMSG_CLOEXEC
 = 0x40000000

218 
	#MSG_CMSG_CLOEXEC
 
MSG_CMSG_CLOEXEC


	)

224 
	smsghdr


226 *
	mmsg_Çme
;

227 
sockËn_t
 
	mmsg_Çm
;

229 
iovec
 *
	mmsg_iov
;

230 
size_t
 
	mmsg_iovËn
;

232 *
	mmsg_cÚÞ
;

233 
size_t
 
	mmsg_cÚÞËn
;

238 
	mmsg_æags
;

242 
	scmsghdr


244 
size_t
 
	mcmsg_Ën
;

249 
	mcmsg_Ëv
;

250 
	mcmsg_ty³
;

251 #ià(!
defed
 
__STRICT_ANSI__
 && 
__GNUC__
 >ð2è|| 
__STDC_VERSION__
 >= 199901L

252 
__exnsiÚ__
 
__cmsg_d©a
 
	m__æex¬r
;

257 #ià(!
defed
 
__STRICT_ANSI__
 && 
__GNUC__
 >ð2è|| 
__STDC_VERSION__
 >= 199901L

258 
	#CMSG_DATA
(
cmsg
è((cmsg)->
__cmsg_d©a
)

	)

260 
	#CMSG_DATA
(
cmsg
è((*è((
cmsghdr
 *è(cmsgè+ 1))

	)

262 
	#CMSG_NXTHDR
(
mhdr
, 
cmsg
è
	`__cmsg_nxthdr
 (mhdr, cmsg)

	)

263 
	#CMSG_FIRSTHDR
(
mhdr
) \

264 ((
size_t
è(
mhdr
)->
msg_cÚÞËn
 >ð (
cmsghdr
) \

265 ? (
cmsghdr
 *è(
mhdr
)->
msg_cÚÞ
 : (cmsghd¸*è0)

	)

266 
	#CMSG_ALIGN
(
Ën
è((Öè+  (
size_t
) - 1) \

267 & (
size_t
è~( (size_tè- 1))

	)

268 
	#CMSG_SPACE
(
Ën
è(
	`CMSG_ALIGN
 (len) \

269 + 
	`CMSG_ALIGN
 ( (
cmsghdr
)))

	)

270 
	#CMSG_LEN
(
Ën
è(
	`CMSG_ALIGN
 ( (
cmsghdr
)è+ (Ën))

	)

272 
cmsghdr
 *
	$__cmsg_nxthdr
 (
msghdr
 *
__mhdr
,

273 
cmsghdr
 *
__cmsg
è
__THROW
;

274 #ifdeà
__USE_EXTERN_INLINES


275 #iâdeà
_EXTERN_INLINE


276 
	#_EXTERN_INLINE
 
__exº_le


	)

278 
_EXTERN_INLINE
 
cmsghdr
 *

279 
	`__NTH
 (
	$__cmsg_nxthdr
 (
msghdr
 *
__mhdr
, 
cmsghdr
 *
__cmsg
))

281 ià((
size_t
è
__cmsg
->
cmsg_Ën
 <  (
cmsghdr
))

283  (
cmsghdr
 *) 0;

285 
__cmsg
 = (
cmsghdr
 *) ((*) __cmsg

286 + 
	`CMSG_ALIGN
 (
__cmsg
->
cmsg_Ën
));

287 ià((*è(
__cmsg
 + 1è> ((*è
__mhdr
->
msg_cÚÞ


288 + 
__mhdr
->
msg_cÚÞËn
)

289 || ((*è
__cmsg
 + 
	`CMSG_ALIGN
 (__cmsg->
cmsg_Ën
)

290 > ((*è
__mhdr
->
msg_cÚÞ
 + __mhdr->
msg_cÚÞËn
)))

292  (
cmsghdr
 *) 0;

293  
__cmsg
;

294 
	}
}

301 
	mSCM_RIGHTS
 = 0x01

302 
	#SCM_RIGHTS
 
SCM_RIGHTS


	)

303 #ifdeà
__USE_GNU


304 , 
	mSCM_CREDENTIALS
 = 0x02

305 
	#SCM_CREDENTIALS
 
SCM_CREDENTIALS


	)

309 #ifdeà
__USE_GNU


311 
	suüed


313 
pid_t
 
	mpid
;

314 
uid_t
 
	muid
;

315 
gid_t
 
	mgid
;

320 #ià!
defed
 
__USE_MISC
 && !defed 
__USE_GNU


321 #iâdeà
FIOGETOWN


322 
	#__SYS_SOCKET_H_undef_FIOGETOWN


	)

324 #iâdeà
FIOSETOWN


325 
	#__SYS_SOCKET_H_undef_FIOSETOWN


	)

327 #iâdeà
SIOCATMARK


328 
	#__SYS_SOCKET_H_undef_SIOCATMARK


	)

330 #iâdeà
SIOCGPGRP


331 
	#__SYS_SOCKET_H_undef_SIOCGPGRP


	)

333 #iâdeà
SIOCGSTAMP


334 
	#__SYS_SOCKET_H_undef_SIOCGSTAMP


	)

336 #iâdeà
SIOCGSTAMPNS


337 
	#__SYS_SOCKET_H_undef_SIOCGSTAMPNS


	)

339 #iâdeà
SIOCSPGRP


340 
	#__SYS_SOCKET_H_undef_SIOCSPGRP


	)

345 
	~<asm/sock.h
>

347 #ià!
defed
 
__USE_MISC
 && !defed 
__USE_GNU


348 #ifdeà
__SYS_SOCKET_H_undef_FIOGETOWN


349 #undeà
__SYS_SOCKET_H_undef_FIOGETOWN


350 #undeà
FIOGETOWN


352 #ifdeà
__SYS_SOCKET_H_undef_FIOSETOWN


353 #undeà
__SYS_SOCKET_H_undef_FIOSETOWN


354 #undeà
FIOSETOWN


356 #ifdeà
__SYS_SOCKET_H_undef_SIOCATMARK


357 #undeà
__SYS_SOCKET_H_undef_SIOCATMARK


358 #undeà
SIOCATMARK


360 #ifdeà
__SYS_SOCKET_H_undef_SIOCGPGRP


361 #undeà
__SYS_SOCKET_H_undef_SIOCGPGRP


362 #undeà
SIOCGPGRP


364 #ifdeà
__SYS_SOCKET_H_undef_SIOCGSTAMP


365 #undeà
__SYS_SOCKET_H_undef_SIOCGSTAMP


366 #undeà
SIOCGSTAMP


368 #ifdeà
__SYS_SOCKET_H_undef_SIOCGSTAMPNS


369 #undeà
__SYS_SOCKET_H_undef_SIOCGSTAMPNS


370 #undeà
SIOCGSTAMPNS


372 #ifdeà
__SYS_SOCKET_H_undef_SIOCSPGRP


373 #undeà
__SYS_SOCKET_H_undef_SIOCSPGRP


374 #undeà
SIOCSPGRP


379 
	slg


381 
	ml_Úoff
;

382 
	ml_lg
;

	@/usr/include/bits/socket2.h

19 #iâdeà
_SYS_SOCKET_H


23 
ssize_t
 
__»cv_chk
 (
__fd
, *
__buf
, 
size_t
 
__n
, size_
__buæ
,

24 
__æags
);

25 
ssize_t
 
__REDIRECT
 (
__»cv_®s
, (
__fd
, *
__buf
, 
size_t
 
__n
,

26 
__æags
), 
»cv
);

27 
ssize_t
 
__REDIRECT
 (
__»cv_chk_w¬n
,

28 (
__fd
, *
__buf
, 
size_t
 
__n
, size_
__buæ
,

29 
__æags
), 
__»cv_chk
)

30 
__w¬Çr
 ("recv called with biggerengthhan size of destination "

33 
__fÜtify_funùiÚ
 
ssize_t


34 
	$»cv
 (
__fd
, *
__buf
, 
size_t
 
__n
, 
__æags
)

36 ià(
	`__bos0
 (
__buf
è!ð(
size_t
) -1)

38 ià(!
	`__but_cÚ¡ªt_p
 (
__n
))

39  
	`__»cv_chk
 (
__fd
, 
__buf
, 
__n
, 
	`__bos0
 (__buf), 
__æags
);

41 ià(
__n
 > 
	`__bos0
 (
__buf
))

42  
	`__»cv_chk_w¬n
 (
__fd
, 
__buf
, 
__n
, 
	`__bos0
 (__buf), 
__æags
);

44  
	`__»cv_®s
 (
__fd
, 
__buf
, 
__n
, 
__æags
);

45 
	}
}

47 
ssize_t
 
__»cväom_chk
 (
__fd
, *
__»¡riù
 
__buf
, 
size_t
 
__n
,

48 
size_t
 
__buæ
, 
__æags
,

49 
__SOCKADDR_ARG
 
__addr
,

50 
sockËn_t
 *
__»¡riù
 
__addr_Ën
);

51 
ssize_t
 
__REDIRECT
 (
__»cväom_®s
,

52 (
__fd
, *
__»¡riù
 
__buf
, 
size_t
 
__n
,

53 
__æags
, 
__SOCKADDR_ARG
 
__addr
,

54 
sockËn_t
 *
__»¡riù
 
__addr_Ën
), 
»cväom
);

55 
ssize_t
 
__REDIRECT
 (
__»cväom_chk_w¬n
,

56 (
__fd
, *
__»¡riù
 
__buf
, 
size_t
 
__n
,

57 
size_t
 
__buæ
, 
__æags
,

58 
__SOCKADDR_ARG
 
__addr
,

59 
sockËn_t
 *
__»¡riù
 
__addr_Ën
), 
__»cväom_chk
)

60 
__w¬Çr
 ("recvfrom called with biggerengthhan size of "

63 
__fÜtify_funùiÚ
 
ssize_t


64 
	$»cväom
 (
__fd
, *
__»¡riù
 
__buf
, 
size_t
 
__n
, 
__æags
,

65 
__SOCKADDR_ARG
 
__addr
, 
sockËn_t
 *
__»¡riù
 
__addr_Ën
)

67 ià(
	`__bos0
 (
__buf
è!ð(
size_t
) -1)

69 ià(!
	`__but_cÚ¡ªt_p
 (
__n
))

70  
	`__»cväom_chk
 (
__fd
, 
__buf
, 
__n
, 
	`__bos0
 (__buf), 
__æags
,

71 
__addr
, 
__addr_Ën
);

72 ià(
__n
 > 
	`__bos0
 (
__buf
))

73  
	`__»cväom_chk_w¬n
 (
__fd
, 
__buf
, 
__n
, 
	`__bos0
 (__buf), 
__æags
,

74 
__addr
, 
__addr_Ën
);

76  
	`__»cväom_®s
 (
__fd
, 
__buf
, 
__n
, 
__æags
, 
__addr
, 
__addr_Ën
);

77 
	}
}

	@/usr/include/bits/stat.h

18 #ià!
defed
 
_SYS_STAT_H
 && !defed 
_FCNTL_H


22 #iâdeà
_BITS_STAT_H


23 
	#_BITS_STAT_H
 1

	)

26 #iâdeà
__x86_64__


27 
	#_STAT_VER_LINUX_OLD
 1

	)

28 
	#_STAT_VER_KERNEL
 1

	)

29 
	#_STAT_VER_SVR4
 2

	)

30 
	#_STAT_VER_LINUX
 3

	)

33 
	#_MKNOD_VER_LINUX
 1

	)

34 
	#_MKNOD_VER_SVR4
 2

	)

35 
	#_MKNOD_VER
 
_MKNOD_VER_LINUX


	)

37 
	#_STAT_VER_KERNEL
 0

	)

38 
	#_STAT_VER_LINUX
 1

	)

41 
	#_MKNOD_VER_LINUX
 0

	)

44 
	#_STAT_VER
 
_STAT_VER_LINUX


	)

46 
	s¡©


48 
__dev_t
 
	m¡_dev
;

49 #iâdeà
__x86_64__


50 
	m__·d1
;

52 #ià
defed
 
__x86_64__
 || !defed 
__USE_FILE_OFFSET64


53 
__o_t
 
	m¡_o
;

55 
__o_t
 
	m__¡_o
;

57 #iâdeà
__x86_64__


58 
__mode_t
 
	m¡_mode
;

59 
__Æk_t
 
	m¡_Æk
;

61 
__Æk_t
 
	m¡_Æk
;

62 
__mode_t
 
	m¡_mode
;

64 
__uid_t
 
	m¡_uid
;

65 
__gid_t
 
	m¡_gid
;

66 #ifdeà
__x86_64__


67 
	m__·d0
;

69 
__dev_t
 
	m¡_rdev
;

70 #iâdeà
__x86_64__


71 
	m__·d2
;

73 #ià
defed
 
__x86_64__
 || !defed 
__USE_FILE_OFFSET64


74 
__off_t
 
	m¡_size
;

76 
__off64_t
 
	m¡_size
;

78 
__blksize_t
 
	m¡_blksize
;

79 #ià
defed
 
__x86_64__
 || !defed 
__USE_FILE_OFFSET64


80 
__blkút_t
 
	m¡_blocks
;

82 
__blkút64_t
 
	m¡_blocks
;

84 #ià
defed
 
__USE_MISC
 || defed 
__USE_XOPEN2K8


91 
time¥ec
 
	m¡_©im
;

92 
time¥ec
 
	m¡_mtim
;

93 
time¥ec
 
	m¡_ùim
;

94 
	#¡_©ime
 
¡_©im
.
tv_£c


	)

95 
	#¡_mtime
 
¡_mtim
.
tv_£c


	)

96 
	#¡_ùime
 
¡_ùim
.
tv_£c


	)

98 
__time_t
 
	m¡_©ime
;

99 
__sysÿÎ_ulÚg_t
 
	m¡_©im£c
;

100 
__time_t
 
	m¡_mtime
;

101 
__sysÿÎ_ulÚg_t
 
	m¡_mtim£c
;

102 
__time_t
 
	m¡_ùime
;

103 
__sysÿÎ_ulÚg_t
 
	m¡_ùim£c
;

105 #ifdeà
__x86_64__


106 
__sysÿÎ_¦Úg_t
 
	m__glibc_»£rved
[3];

108 #iâdeà
__USE_FILE_OFFSET64


109 
	m__glibc_»£rved4
;

110 
	m__glibc_»£rved5
;

112 
__o64_t
 
	m¡_o
;

117 #ifdeà
__USE_LARGEFILE64


119 
	s¡©64


121 
__dev_t
 
	m¡_dev
;

122 #ifdeà
__x86_64__


123 
__o64_t
 
	m¡_o
;

124 
__Æk_t
 
	m¡_Æk
;

125 
__mode_t
 
	m¡_mode
;

127 
	m__·d1
;

128 
__o_t
 
	m__¡_o
;

129 
__mode_t
 
	m¡_mode
;

130 
__Æk_t
 
	m¡_Æk
;

132 
__uid_t
 
	m¡_uid
;

133 
__gid_t
 
	m¡_gid
;

134 #ifdeà
__x86_64__


135 
	m__·d0
;

136 
__dev_t
 
	m¡_rdev
;

137 
__off_t
 
	m¡_size
;

139 
__dev_t
 
	m¡_rdev
;

140 
	m__·d2
;

141 
__off64_t
 
	m¡_size
;

143 
__blksize_t
 
	m¡_blksize
;

144 
__blkút64_t
 
	m¡_blocks
;

145 #ià
defed
 
__USE_MISC
 || defed 
__USE_XOPEN2K8


152 
time¥ec
 
	m¡_©im
;

153 
time¥ec
 
	m¡_mtim
;

154 
time¥ec
 
	m¡_ùim
;

156 
__time_t
 
	m¡_©ime
;

157 
__sysÿÎ_ulÚg_t
 
	m¡_©im£c
;

158 
__time_t
 
	m¡_mtime
;

159 
__sysÿÎ_ulÚg_t
 
	m¡_mtim£c
;

160 
__time_t
 
	m¡_ùime
;

161 
__sysÿÎ_ulÚg_t
 
	m¡_ùim£c
;

163 #ifdeà
__x86_64__


164 
__sysÿÎ_¦Úg_t
 
	m__glibc_»£rved
[3];

166 
__o64_t
 
	m¡_o
;

172 
	#_STATBUF_ST_BLKSIZE


	)

173 
	#_STATBUF_ST_RDEV


	)

175 
	#_STATBUF_ST_NSEC


	)

179 
	#__S_IFMT
 0170000

	)

182 
	#__S_IFDIR
 0040000

	)

183 
	#__S_IFCHR
 0020000

	)

184 
	#__S_IFBLK
 0060000

	)

185 
	#__S_IFREG
 0100000

	)

186 
	#__S_IFIFO
 0010000

	)

187 
	#__S_IFLNK
 0120000

	)

188 
	#__S_IFSOCK
 0140000

	)

192 
	#__S_TYPEISMQ
(
buf
è((buf)->
¡_mode
 - (buf)->¡_mode)

	)

193 
	#__S_TYPEISSEM
(
buf
è((buf)->
¡_mode
 - (buf)->¡_mode)

	)

194 
	#__S_TYPEISSHM
(
buf
è((buf)->
¡_mode
 - (buf)->¡_mode)

	)

198 
	#__S_ISUID
 04000

	)

199 
	#__S_ISGID
 02000

	)

200 
	#__S_ISVTX
 01000

	)

201 
	#__S_IREAD
 0400

	)

202 
	#__S_IWRITE
 0200

	)

203 
	#__S_IEXEC
 0100

	)

205 #ifdeà
__USE_ATFILE


206 
	#UTIME_NOW
 ((1È<< 30è- 1l)

	)

207 
	#UTIME_OMIT
 ((1È<< 30è- 2l)

	)

	@/usr/include/bits/stdio-ldbl.h

19 #iâdeà
_STDIO_H


23 
__BEGIN_NAMESPACE_STD


24 
	$__LDBL_REDIR_DECL
 (
årtf
)

25 
	$__LDBL_REDIR_DECL
 (
´tf
)

26 
	$__LDBL_REDIR_DECL
 (
¥rtf
)

27 
	$__LDBL_REDIR_DECL
 (
vårtf
)

28 
	$__LDBL_REDIR_DECL
 (
v´tf
)

29 
	$__LDBL_REDIR_DECL
 (
v¥rtf
)

30 #ià
defed
 
__USE_ISOC99
 && !defed 
__USE_GNU
 \

31 && !
defed
 
__REDIRECT
 \

32 && (
defed
 
__STRICT_ANSI__
 || defed 
__USE_XOPEN2K
)

33 
	$__LDBL_REDIR1_DECL
 (
fsÿnf
, 
__Ædbl___isoc99_fsÿnf
)

34 
	$__LDBL_REDIR1_DECL
 (
sÿnf
, 
__Ædbl___isoc99_sÿnf
)

35 
	$__LDBL_REDIR1_DECL
 (
ssÿnf
, 
__Ædbl___isoc99_ssÿnf
)

37 
	$__LDBL_REDIR_DECL
 (
fsÿnf
)

38 
	$__LDBL_REDIR_DECL
 (
sÿnf
)

39 
	$__LDBL_REDIR_DECL
 (
ssÿnf
)

41 
__END_NAMESPACE_STD


43 #ià
defed
 
__USE_BSD
 || defed 
__USE_ISOC99
 || defed 
__USE_UNIX98


44 
__BEGIN_NAMESPACE_C99


45 
	$__LDBL_REDIR_DECL
 (
¢´tf
)

46 
	$__LDBL_REDIR_DECL
 (
v¢´tf
)

47 
__END_NAMESPACE_C99


50 #ifdef 
__USE_ISOC99


51 
__BEGIN_NAMESPACE_C99


52 #ià!
defed
 
__USE_GNU
 && !defed 
__REDIRECT
 \

53 && (
defed
 
__STRICT_ANSI__
 || defed 
__USE_XOPEN2K
)

54 
	$__LDBL_REDIR1_DECL
 (
vfsÿnf
, 
__Ædbl___isoc99_vfsÿnf
)

55 
	$__LDBL_REDIR1_DECL
 (
vsÿnf
, 
__Ædbl___isoc99_vsÿnf
)

56 
	$__LDBL_REDIR1_DECL
 (
vssÿnf
, 
__Ædbl___isoc99_vssÿnf
)

58 
	$__LDBL_REDIR_DECL
 (
vfsÿnf
)

59 
	$__LDBL_REDIR_DECL
 (
vssÿnf
)

60 
	$__LDBL_REDIR_DECL
 (
vsÿnf
)

62 
__END_NAMESPACE_C99


65 #ifdeà
__USE_XOPEN2K8


66 
	$__LDBL_REDIR_DECL
 (
vd´tf
)

67 
	$__LDBL_REDIR_DECL
 (
d´tf
)

70 #ifdeà
__USE_GNU


71 
	$__LDBL_REDIR_DECL
 (
va¥rtf
)

72 
	$__LDBL_REDIR_DECL
 (
__a¥rtf
)

73 
	$__LDBL_REDIR_DECL
 (
a¥rtf
)

74 
	$__LDBL_REDIR_DECL
 (
ob¡ack_´tf
)

75 
	$__LDBL_REDIR_DECL
 (
ob¡ack_v´tf
)

78 #ià
__USE_FORTIFY_LEVEL
 > 0 && 
defed
 
__fÜtify_funùiÚ


79 
	$__LDBL_REDIR_DECL
 (
__¥rtf_chk
)

80 
	$__LDBL_REDIR_DECL
 (
__v¥rtf_chk
)

81 #ià
defed
 
__USE_BSD
 || defed 
__USE_ISOC99
 || defed 
__USE_UNIX98


82 
	$__LDBL_REDIR_DECL
 (
__¢´tf_chk
)

83 
	$__LDBL_REDIR_DECL
 (
__v¢´tf_chk
)

85 #ià
__USE_FORTIFY_LEVEL
 > 1

86 
	$__LDBL_REDIR_DECL
 (
__årtf_chk
)

87 
	$__LDBL_REDIR_DECL
 (
__´tf_chk
)

88 
	$__LDBL_REDIR_DECL
 (
__vårtf_chk
)

89 
	$__LDBL_REDIR_DECL
 (
__v´tf_chk
)

90 #ifdeà
__USE_XOPEN2K8


91 
	$__LDBL_REDIR_DECL
 (
__d´tf_chk
)

92 
	$__LDBL_REDIR_DECL
 (
__vd´tf_chk
)

94 #ifdeà
__USE_GNU


95 
	$__LDBL_REDIR_DECL
 (
__a¥rtf_chk
)

96 
	$__LDBL_REDIR_DECL
 (
__va¥rtf_chk
)

97 
	$__LDBL_REDIR_DECL
 (
__ob¡ack_´tf_chk
)

98 
	$__LDBL_REDIR_DECL
 (
__ob¡ack_v´tf_chk
)

	@/usr/include/bits/stdio.h

19 #iâdeà
_STDIO_H


23 #iâdeà
__exº_le


24 
	#__STDIO_INLINE
 
le


	)

26 
	#__STDIO_INLINE
 
__exº_le


	)

30 #ifdeà
__USE_EXTERN_INLINES


33 #ià!(
__USE_FORTIFY_LEVEL
 > 0 && 
defed
 
__fÜtify_funùiÚ
)

35 
__STDIO_INLINE
 

36 
	$v´tf
 (cÚ¡ *
__»¡riù
 
__fmt
, 
_G_va_li¡
 
__¬g
)

38  
	`vårtf
 (
¡dout
, 
__fmt
, 
__¬g
);

39 
	}
}

43 
__STDIO_INLINE
 

44 
	$gch¬
 ()

46  
	`_IO_gc
 (
¡d
);

47 
	}
}

50 #ifdeà
__USE_MISC


52 
__STDIO_INLINE
 

53 
	$fgc_uÆocked
 (
FILE
 *
__å
)

55  
	`_IO_gc_uÆocked
 (
__å
);

56 
	}
}

60 #ià
defed
 
__USE_POSIX
 || defed 
__USE_MISC


62 
__STDIO_INLINE
 

63 
	$gc_uÆocked
 (
FILE
 *
__å
)

65  
	`_IO_gc_uÆocked
 (
__å
);

66 
	}
}

69 
__STDIO_INLINE
 

70 
	$gch¬_uÆocked
 ()

72  
	`_IO_gc_uÆocked
 (
¡d
);

73 
	}
}

78 
__STDIO_INLINE
 

79 
	$putch¬
 (
__c
)

81  
	`_IO_putc
 (
__c
, 
¡dout
);

82 
	}
}

85 #ifdeà
__USE_MISC


87 
__STDIO_INLINE
 

88 
	$åutc_uÆocked
 (
__c
, 
FILE
 *
__¡»am
)

90  
	`_IO_putc_uÆocked
 (
__c
, 
__¡»am
);

91 
	}
}

95 #ià
defed
 
__USE_POSIX
 || defed 
__USE_MISC


97 
__STDIO_INLINE
 

98 
	$putc_uÆocked
 (
__c
, 
FILE
 *
__¡»am
)

100  
	`_IO_putc_uÆocked
 (
__c
, 
__¡»am
);

101 
	}
}

104 
__STDIO_INLINE
 

105 
	$putch¬_uÆocked
 (
__c
)

107  
	`_IO_putc_uÆocked
 (
__c
, 
¡dout
);

108 
	}
}

112 #ifdef 
__USE_GNU


114 
__STDIO_INLINE
 
_IO_ssize_t


115 
	$gle
 (**
__l
, 
size_t
 *
__n
, 
FILE
 *
__¡»am
)

117  
	`__gdim
 (
__l
, 
__n
, '\n', 
__¡»am
);

118 
	}
}

122 #ifdeà
__USE_MISC


124 
__STDIO_INLINE
 

125 
__NTH
 (
	$ãof_uÆocked
 (
FILE
 *
__¡»am
))

127  
	`_IO_ãof_uÆocked
 (
__¡»am
);

128 
	}
}

131 
__STDIO_INLINE
 

132 
__NTH
 (
	$ã¼Ü_uÆocked
 (
FILE
 *
__¡»am
))

134  
	`_IO_ã¼Ü_uÆocked
 (
__¡»am
);

135 
	}
}

141 #ià
defed
 
__USE_MISC
 && defed 
__GNUC__
 && defed 
__OPTIMIZE__
 \

142 && !
defed
 
	g__ýlu¥lus


144 
	#äd_uÆocked
(
±r
, 
size
, 
n
, 
¡»am
) \

145 (
	`__exnsiÚ__
 ((
	`__but_cÚ¡ªt_p
 (
size
è&& __but_cÚ¡ªt_°(
n
) \

146 && (
size_t
è(
size
è* (size_tè(
n
) <= 8 \

147 && (
size_t
è(
size
) != 0) \

148 ? ({ *
__±r
 = (*è(
±r
); \

149 
FILE
 *
__¡»am
 = (
¡»am
); \

150 
size_t
 
__út
; \

151 
__út
 = (
size_t
è(
size
è* (size_tè(
n
); \

152 
__út
 > 0; --__cnt) \

154 
__c
 = 
	`_IO_gc_uÆocked
 (
__¡»am
); \

155 ià(
__c
 =ð
EOF
) \

157 *
__±r
++ = 
__c
; \

159 ((
size_t
è(
size
è* (size_tè(
n
è- 
__út
) \

160 / (
size_t
è(
size
); }) \

161 : (((
	`__but_cÚ¡ªt_p
 (
size
è&& (
size_t
) (size) == 0) \

162 || (
	`__but_cÚ¡ªt_p
 (
n
è&& (
size_t
) (n) == 0)) \

164 ? ((è(
±r
), (è(
¡»am
), (è(
size
), \

165 (è(
n
), (
size_t
) 0) \

166 : 
	`äd_uÆocked
 (
±r
, 
size
, 
n
, 
¡»am
))))

	)

168 
	#fwre_uÆocked
(
±r
, 
size
, 
n
, 
¡»am
) \

169 (
	`__exnsiÚ__
 ((
	`__but_cÚ¡ªt_p
 (
size
è&& __but_cÚ¡ªt_°(
n
) \

170 && (
size_t
è(
size
è* (size_tè(
n
) <= 8 \

171 && (
size_t
è(
size
) != 0) \

172 ? ({ cÚ¡ *
__±r
 = (cÚ¡ *è(
±r
); \

173 
FILE
 *
__¡»am
 = (
¡»am
); \

174 
size_t
 
__út
; \

175 
__út
 = (
size_t
è(
size
è* (size_tè(
n
); \

176 
__út
 > 0; --__cnt) \

177 ià(
	`_IO_putc_uÆocked
 (*
__±r
++, 
__¡»am
è=ð
EOF
) \

179 ((
size_t
è(
size
è* (size_tè(
n
è- 
__út
) \

180 / (
size_t
è(
size
); }) \

181 : (((
	`__but_cÚ¡ªt_p
 (
size
è&& (
size_t
) (size) == 0) \

182 || (
	`__but_cÚ¡ªt_p
 (
n
è&& (
size_t
) (n) == 0)) \

184 ? ((è(
±r
), (è(
¡»am
), (è(
size
), \

185 (è(
n
), (
size_t
) 0) \

186 : 
	`fwre_uÆocked
 (
±r
, 
size
, 
n
, 
¡»am
))))

	)

190 #undeà
__STDIO_INLINE


	@/usr/include/bits/stdio2.h

19 #iâdeà
_STDIO_H


23 
	$__¥rtf_chk
 (*
__»¡riù
 
__s
, 
__æag
, 
size_t
 
__¦
,

24 cÚ¡ *
__»¡riù
 
__fÜm©
, ...è
__THROW
;

25 
	$__v¥rtf_chk
 (*
__»¡riù
 
__s
, 
__æag
, 
size_t
 
__¦
,

26 cÚ¡ *
__»¡riù
 
__fÜm©
,

27 
_G_va_li¡
 
__­
è
__THROW
;

29 #ifdeà
__va_¬g_·ck


30 
__fÜtify_funùiÚ
 

31 
	`__NTH
 (
	$¥rtf
 (*
__»¡riù
 
__s
, cÚ¡ *__»¡riù 
__fmt
, ...))

33  
	`__but___¥rtf_chk
 (
__s
, 
__USE_FORTIFY_LEVEL
 - 1,

34 
	`__bos
 (
__s
), 
__fmt
, 
	`__va_¬g_·ck
 ());

35 
	}
}

36 #ià!
defed
 
__ýlu¥lus


37 
	#¥rtf
(
¡r
, ...) \

38 
	`__but___¥rtf_chk
 (
¡r
, 
__USE_FORTIFY_LEVEL
 - 1, 
	`__bos
 (str), \

39 
__VA_ARGS__
)

	)

42 
__fÜtify_funùiÚ
 

43 
__NTH
 (
	$v¥rtf
 (*
__»¡riù
 
__s
, cÚ¡ *__»¡riù 
__fmt
,

44 
_G_va_li¡
 
__­
))

46  
	`__but___v¥rtf_chk
 (
__s
, 
__USE_FORTIFY_LEVEL
 - 1,

47 
	`__bos
 (
__s
), 
__fmt
, 
__­
);

48 
	}
}

50 #ià
defed
 
__USE_BSD
 || defed 
__USE_ISOC99
 || defed 
__USE_UNIX98


52 
	$__¢´tf_chk
 (*
__»¡riù
 
__s
, 
size_t
 
__n
, 
__æag
,

53 
size_t
 
__¦
, cÚ¡ *
__»¡riù
 
__fÜm©
,

54 ...è
__THROW
;

55 
	$__v¢´tf_chk
 (*
__»¡riù
 
__s
, 
size_t
 
__n
, 
__æag
,

56 
size_t
 
__¦
, cÚ¡ *
__»¡riù
 
__fÜm©
,

57 
_G_va_li¡
 
__­
è
__THROW
;

59 #ifdeà
__va_¬g_·ck


60 
__fÜtify_funùiÚ
 

61 
	`__NTH
 (
	$¢´tf
 (*
__»¡riù
 
__s
, 
size_t
 
__n
,

62 cÚ¡ *
__»¡riù
 
__fmt
, ...))

64  
	`__but___¢´tf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

65 
	`__bos
 (
__s
), 
__fmt
, 
	`__va_¬g_·ck
 ());

66 
	}
}

67 #ià!
defed
 
__ýlu¥lus


68 
	#¢´tf
(
¡r
, 
Ën
, ...) \

69 
	`__but___¢´tf_chk
 (
¡r
, 
Ën
, 
__USE_FORTIFY_LEVEL
 - 1, 
	`__bos
 (str), \

70 
__VA_ARGS__
)

	)

73 
__fÜtify_funùiÚ
 

74 
__NTH
 (
	$v¢´tf
 (*
__»¡riù
 
__s
, 
size_t
 
__n
,

75 cÚ¡ *
__»¡riù
 
__fmt
, 
_G_va_li¡
 
__­
))

77  
	`__but___v¢´tf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

78 
	`__bos
 (
__s
), 
__fmt
, 
__­
);

79 
	}
}

83 #ià
__USE_FORTIFY_LEVEL
 > 1

85 
__årtf_chk
 (
FILE
 *
__»¡riù
 
__¡»am
, 
__æag
,

86 cÚ¡ *
__»¡riù
 
__fÜm©
, ...);

87 
__´tf_chk
 (
__æag
, cÚ¡ *
__»¡riù
 
__fÜm©
, ...);

88 
__vårtf_chk
 (
FILE
 *
__»¡riù
 
__¡»am
, 
__æag
,

89 cÚ¡ *
__»¡riù
 
__fÜm©
, 
_G_va_li¡
 
__­
);

90 
__v´tf_chk
 (
__æag
, cÚ¡ *
__»¡riù
 
__fÜm©
,

91 
_G_va_li¡
 
__­
);

93 #ifdeà
__va_¬g_·ck


94 
__fÜtify_funùiÚ
 

95 
	$årtf
 (
FILE
 *
__»¡riù
 
__¡»am
, cÚ¡ *__»¡riù 
__fmt
, ...)

97  
	`__årtf_chk
 (
__¡»am
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

98 
	`__va_¬g_·ck
 ());

99 
	}
}

101 
__fÜtify_funùiÚ
 

102 
	$´tf
 (cÚ¡ *
__»¡riù
 
__fmt
, ...)

104  
	`__´tf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
	`__va_¬g_·ck
 ());

105 
	}
}

106 #ià!
defed
 
__ýlu¥lus


107 
	#´tf
(...) \

108 
	`__´tf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

109 
	#årtf
(
¡»am
, ...) \

110 
	`__årtf_chk
 (
¡»am
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

113 
__fÜtify_funùiÚ
 

114 
	$v´tf
 (cÚ¡ *
__»¡riù
 
__fmt
, 
_G_va_li¡
 
__­
)

116 #ifdeà
__USE_EXTERN_INLINES


117  
	`__vårtf_chk
 (
¡dout
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__­
);

119  
	`__v´tf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__­
);

121 
	}
}

123 
__fÜtify_funùiÚ
 

124 
	$vårtf
 (
FILE
 *
__»¡riù
 
__¡»am
,

125 cÚ¡ *
__»¡riù
 
__fmt
, 
_G_va_li¡
 
__­
)

127  
	`__vårtf_chk
 (
__¡»am
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__­
);

128 
	}
}

130 #ifdeà
__USE_XOPEN2K8


131 
	$__d´tf_chk
 (
__fd
, 
__æag
, cÚ¡ *
__»¡riù
 
__fmt
,

132 ...è
	`__©ibu__
 ((
	`__fÜm©__
 (
__´tf__
, 3, 4)));

133 
	$__vd´tf_chk
 (
__fd
, 
__æag
,

134 cÚ¡ *
__»¡riù
 
__fmt
, 
_G_va_li¡
 
__¬g
)

135 
	`__©ibu__
 ((
	`__fÜm©__
 (
__´tf__
, 3, 0)));

137 #ifdeà
__va_¬g_·ck


138 
__fÜtify_funùiÚ
 

139 
	$d´tf
 (
__fd
, cÚ¡ *
__»¡riù
 
__fmt
, ...)

141  
	`__d´tf_chk
 (
__fd
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

142 
	`__va_¬g_·ck
 ());

143 
	}
}

144 #ià!
defed
 
__ýlu¥lus


145 
	#d´tf
(
fd
, ...) \

146 
	`__d´tf_chk
 (
fd
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

149 
__fÜtify_funùiÚ
 

150 
	$vd´tf
 (
__fd
, cÚ¡ *
__»¡riù
 
__fmt
, 
_G_va_li¡
 
__­
)

152  
	`__vd´tf_chk
 (
__fd
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__­
);

153 
	}
}

156 #ifdeà
__USE_GNU


158 
	$__a¥rtf_chk
 (**
__»¡riù
 
__±r
, 
__æag
,

159 cÚ¡ *
__»¡riù
 
__fmt
, ...)

160 
__THROW
 
	`__©ibu__
 ((
	$__fÜm©__
 (
__´tf__
, 3, 4))è
__wur
;

161 
	$__va¥rtf_chk
 (**
__»¡riù
 
__±r
, 
__æag
,

162 cÚ¡ *
__»¡riù
 
__fmt
, 
_G_va_li¡
 
__¬g
)

163 
__THROW
 
	`__©ibu__
 ((
	$__fÜm©__
 (
__´tf__
, 3, 0))è
__wur
;

164 
	$__ob¡ack_´tf_chk
 (
ob¡ack
 *
__»¡riù
 
__ob¡ack
,

165 
__æag
, cÚ¡ *
__»¡riù
 
__fÜm©
,

167 
__THROW
 
	`__©ibu__
 ((
	`__fÜm©__
 (
__´tf__
, 3, 4)));

168 
	$__ob¡ack_v´tf_chk
 (
ob¡ack
 *
__»¡riù
 
__ob¡ack
,

169 
__æag
,

170 cÚ¡ *
__»¡riù
 
__fÜm©
,

171 
_G_va_li¡
 
__¬gs
)

172 
__THROW
 
	`__©ibu__
 ((
	`__fÜm©__
 (
__´tf__
, 3, 0)));

174 #ifdeà
__va_¬g_·ck


175 
__fÜtify_funùiÚ
 

176 
	`__NTH
 (
	$a¥rtf
 (**
__»¡riù
 
__±r
, cÚ¡ *__»¡riù 
__fmt
, ...))

178  
	`__a¥rtf_chk
 (
__±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

179 
	`__va_¬g_·ck
 ());

180 
	}
}

182 
__fÜtify_funùiÚ
 

183 
__NTH
 (
	$__a¥rtf
 (**
__»¡riù
 
__±r
, cÚ¡ *__»¡riù 
__fmt
,

186  
	`__a¥rtf_chk
 (
__±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

187 
	`__va_¬g_·ck
 ());

188 
	}
}

190 
__fÜtify_funùiÚ
 

191 
__NTH
 (
	$ob¡ack_´tf
 (
ob¡ack
 *
__»¡riù
 
__ob¡ack
,

192 cÚ¡ *
__»¡riù
 
__fmt
, ...))

194  
	`__ob¡ack_´tf_chk
 (
__ob¡ack
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

195 
	`__va_¬g_·ck
 ());

196 
	}
}

197 #ià!
defed
 
__ýlu¥lus


198 
	#a¥rtf
(
±r
, ...) \

199 
	`__a¥rtf_chk
 (
±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

200 
	#__a¥rtf
(
±r
, ...) \

201 
	`__a¥rtf_chk
 (
±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

202 
	#ob¡ack_´tf
(
ob¡ack
, ...) \

203 
	`__ob¡ack_´tf_chk
 (
ob¡ack
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

206 
__fÜtify_funùiÚ
 

207 
__NTH
 (
	$va¥rtf
 (**
__»¡riù
 
__±r
, cÚ¡ *__»¡riù 
__fmt
,

208 
_G_va_li¡
 
__­
))

210  
	`__va¥rtf_chk
 (
__±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__­
);

211 
	}
}

213 
__fÜtify_funùiÚ
 

214 
__NTH
 (
	$ob¡ack_v´tf
 (
ob¡ack
 *
__»¡riù
 
__ob¡ack
,

215 cÚ¡ *
__»¡riù
 
__fmt
, 
_G_va_li¡
 
__­
))

217  
	`__ob¡ack_v´tf_chk
 (
__ob¡ack
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

218 
__­
);

219 
	}
}

225 #ià!
defed
 
__USE_ISOC11
 \

226 || (
defed
 
	g__ýlu¥lus
 && __ýlu¥lu <ð201103L && !defed 
__USE_GNU
)

227 *
	$__gs_chk
 (*
__¡r
, 
size_t
è
__wur
;

228 *
	`__REDIRECT
 (
__gs_w¬n
, (*
__¡r
), 
gs
)

229 
__wur
 
	`__w¬Çr
 ("please use fgets or getline instead, gets can't "

232 
__fÜtify_funùiÚ
 
__wur
 *

233 
	$gs
 (*
__¡r
)

235 ià(
	`__bos
 (
__¡r
è!ð(
size_t
) -1)

236  
	`__gs_chk
 (
__¡r
, 
	`__bos
 (__str));

237  
	`__gs_w¬n
 (
__¡r
);

238 
	}
}

241 *
	$__fgs_chk
 (*
__»¡riù
 
__s
, 
size_t
 
__size
, 
__n
,

242 
FILE
 *
__»¡riù
 
__¡»am
è
__wur
;

243 *
	`__REDIRECT
 (
__fgs_®s
,

244 (*
__»¡riù
 
__s
, 
__n
,

245 
FILE
 *
__»¡riù
 
__¡»am
), 
fgs
è
__wur
;

246 *
	`__REDIRECT
 (
__fgs_chk_w¬n
,

247 (*
__»¡riù
 
__s
, 
size_t
 
__size
, 
__n
,

248 
FILE
 *
__»¡riù
 
__¡»am
), 
__fgs_chk
)

249 
__wur
 
	`__w¬Çr
 ("fgets called with bigger sizehanength "

252 
__fÜtify_funùiÚ
 
__wur
 *

253 
	$fgs
 (*
__»¡riù
 
__s
, 
__n
, 
FILE
 *__»¡riù 
__¡»am
)

255 ià(
	`__bos
 (
__s
è!ð(
size_t
) -1)

257 ià(!
	`__but_cÚ¡ªt_p
 (
__n
) || __n <= 0)

258  
	`__fgs_chk
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__¡»am
);

260 ià((
size_t
è
__n
 > 
	`__bos
 (
__s
))

261  
	`__fgs_chk_w¬n
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__¡»am
);

263  
	`__fgs_®s
 (
__s
, 
__n
, 
__¡»am
);

264 
	}
}

266 
size_t
 
	$__äd_chk
 (*
__»¡riù
 
__±r
, 
size_t
 
__±¾
,

267 
size_t
 
__size
, size_
__n
,

268 
FILE
 *
__»¡riù
 
__¡»am
è
__wur
;

269 
size_t
 
	`__REDIRECT
 (
__äd_®s
,

270 (*
__»¡riù
 
__±r
, 
size_t
 
__size
,

271 
size_t
 
__n
, 
FILE
 *
__»¡riù
 
__¡»am
),

272 
äd
è
__wur
;

273 
size_t
 
	`__REDIRECT
 (
__äd_chk_w¬n
,

274 (*
__»¡riù
 
__±r
, 
size_t
 
__±¾
,

275 
size_t
 
__size
, size_
__n
,

276 
FILE
 *
__»¡riù
 
__¡»am
),

277 
__äd_chk
)

278 
__wur
 
	`__w¬Çr
 ("fread called with bigger size *membhanength "

281 
__fÜtify_funùiÚ
 
__wur
 
size_t


282 
	$äd
 (*
__»¡riù
 
__±r
, 
size_t
 
__size
, size_
__n
,

283 
FILE
 *
__»¡riù
 
__¡»am
)

285 ià(
	`__bos0
 (
__±r
è!ð(
size_t
) -1)

287 ià(!
	`__but_cÚ¡ªt_p
 (
__size
)

288 || !
	`__but_cÚ¡ªt_p
 (
__n
)

289 || (
__size
 | 
__n
è>ð(((
size_t
) 1) << (8 *  (size_t) / 2)))

290  
	`__äd_chk
 (
__±r
, 
	`__bos0
 (__±r), 
__size
, 
__n
, 
__¡»am
);

292 ià(
__size
 * 
__n
 > 
	`__bos0
 (
__±r
))

293  
	`__äd_chk_w¬n
 (
__±r
, 
	`__bos0
 (__±r), 
__size
, 
__n
, 
__¡»am
);

295  
	`__äd_®s
 (
__±r
, 
__size
, 
__n
, 
__¡»am
);

296 
	}
}

298 #ifdeà
__USE_GNU


299 *
	$__fgs_uÆocked_chk
 (*
__»¡riù
 
__s
, 
size_t
 
__size
,

300 
__n
, 
FILE
 *
__»¡riù
 
__¡»am
è
__wur
;

301 *
	`__REDIRECT
 (
__fgs_uÆocked_®s
,

302 (*
__»¡riù
 
__s
, 
__n
,

303 
FILE
 *
__»¡riù
 
__¡»am
), 
fgs_uÆocked
è
__wur
;

304 *
	`__REDIRECT
 (
__fgs_uÆocked_chk_w¬n
,

305 (*
__»¡riù
 
__s
, 
size_t
 
__size
, 
__n
,

306 
FILE
 *
__»¡riù
 
__¡»am
), 
__fgs_uÆocked_chk
)

307 
__wur
 
	`__w¬Çr
 ("fgets_unlocked called with bigger sizehanength "

310 
__fÜtify_funùiÚ
 
__wur
 *

311 
	$fgs_uÆocked
 (*
__»¡riù
 
__s
, 
__n
, 
FILE
 *__»¡riù 
__¡»am
)

313 ià(
	`__bos
 (
__s
è!ð(
size_t
) -1)

315 ià(!
	`__but_cÚ¡ªt_p
 (
__n
) || __n <= 0)

316  
	`__fgs_uÆocked_chk
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__¡»am
);

318 ià((
size_t
è
__n
 > 
	`__bos
 (
__s
))

319  
	`__fgs_uÆocked_chk_w¬n
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__¡»am
);

321  
	`__fgs_uÆocked_®s
 (
__s
, 
__n
, 
__¡»am
);

322 
	}
}

325 #ifdeà
__USE_MISC


326 #undeà
äd_uÆocked


327 
size_t
 
	$__äd_uÆocked_chk
 (*
__»¡riù
 
__±r
, 
size_t
 
__±¾
,

328 
size_t
 
__size
, size_
__n
,

329 
FILE
 *
__»¡riù
 
__¡»am
è
__wur
;

330 
size_t
 
	`__REDIRECT
 (
__äd_uÆocked_®s
,

331 (*
__»¡riù
 
__±r
, 
size_t
 
__size
,

332 
size_t
 
__n
, 
FILE
 *
__»¡riù
 
__¡»am
),

333 
äd_uÆocked
è
__wur
;

334 
size_t
 
	`__REDIRECT
 (
__äd_uÆocked_chk_w¬n
,

335 (*
__»¡riù
 
__±r
, 
size_t
 
__±¾
,

336 
size_t
 
__size
, size_
__n
,

337 
FILE
 *
__»¡riù
 
__¡»am
),

338 
__äd_uÆocked_chk
)

339 
__wur
 
	`__w¬Çr
 ("fread_unlocked called with bigger size *membhan "

342 
__fÜtify_funùiÚ
 
__wur
 
size_t


343 
	$äd_uÆocked
 (*
__»¡riù
 
__±r
, 
size_t
 
__size
, size_
__n
,

344 
FILE
 *
__»¡riù
 
__¡»am
)

346 ià(
	`__bos0
 (
__±r
è!ð(
size_t
) -1)

348 ià(!
	`__but_cÚ¡ªt_p
 (
__size
)

349 || !
	`__but_cÚ¡ªt_p
 (
__n
)

350 || (
__size
 | 
__n
è>ð(((
size_t
) 1) << (8 *  (size_t) / 2)))

351  
	`__äd_uÆocked_chk
 (
__±r
, 
	`__bos0
 (__±r), 
__size
, 
__n
,

352 
__¡»am
);

354 ià(
__size
 * 
__n
 > 
	`__bos0
 (
__±r
))

355  
	`__äd_uÆocked_chk_w¬n
 (
__±r
, 
	`__bos0
 (__±r), 
__size
, 
__n
,

356 
__¡»am
);

359 #ifdeà
__USE_EXTERN_INLINES


360 ià(
	`__but_cÚ¡ªt_p
 (
__size
)

361 && 
	`__but_cÚ¡ªt_p
 (
__n
)

362 && (
__size
 | 
__n
è< (((
size_t
) 1) << (8 *  (size_t) / 2))

363 && 
__size
 * 
__n
 <= 8)

365 
size_t
 
__út
 = 
__size
 * 
__n
;

366 *
__ý
 = (*è
__±r
;

367 ià(
__út
 == 0)

370 ; 
__út
 > 0; --__cnt)

372 
__c
 = 
	`_IO_gc_uÆocked
 (
__¡»am
);

373 ià(
__c
 =ð
EOF
)

375 *
__ý
++ = 
__c
;

377  (
__ý
 - (*è
__±r
è/ 
__size
;

380  
	`__äd_uÆocked_®s
 (
__±r
, 
__size
, 
__n
, 
__¡»am
);

381 
	}
}

	@/usr/include/bits/stdio_lim.h

18 #ià!
defed
 
_STDIO_H
 && !defed 
__Ãed_FOPEN_MAX
 && !defed 
__Ãed_IOV_MAX


22 #ifdeà
_STDIO_H


23 
	#L_tm²am
 20

	)

24 
	#TMP_MAX
 238328

	)

25 
	#FILENAME_MAX
 4096

	)

27 #ifdeà
__USE_POSIX


28 
	#L_ùmid
 9

	)

29 #ià!
defed
 
__USE_XOPEN2K
 || defed 
__USE_GNU


30 
	#L_cu£rid
 9

	)

35 #ià
defed
 
__Ãed_FOPEN_MAX
 || defed 
_STDIO_H


36 #undeà
FOPEN_MAX


37 
	#FOPEN_MAX
 16

	)

40 #ià
defed
 
__Ãed_IOV_MAX
 && !defed 
IOV_MAX


41 
	#IOV_MAX
 1024

	)

	@/usr/include/bits/stdlib-bsearch.h

19 
__exº_le
 *

20 
	$b£¬ch
 (cÚ¡ *
__key
, cÚ¡ *
__ba£
, 
size_t
 
__nmemb
, size_
__size
,

21 
__com·r_â_t
 
__com·r
)

23 
size_t
 
__l
, 
__u
, 
__idx
;

24 cÚ¡ *
__p
;

25 
__com·risÚ
;

27 
__l
 = 0;

28 
__u
 = 
__nmemb
;

29 
__l
 < 
__u
)

31 
__idx
 = (
__l
 + 
__u
) / 2;

32 
__p
 = (*è(((cÚ¡ *è
__ba£
è+ (
__idx
 * 
__size
));

33 
__com·risÚ
 = (*
__com·r
è(
__key
, 
__p
);

34 ià(
__com·risÚ
 < 0)

35 
__u
 = 
__idx
;

36 ià(
__com·risÚ
 > 0)

37 
__l
 = 
__idx
 + 1;

39  (*è
__p
;

42  
NULL
;

43 
	}
}

	@/usr/include/bits/stdlib-float.h

19 #iâdeà
_STDLIB_H


23 #ifdeà
__USE_EXTERN_INLINES


24 
__BEGIN_NAMESPACE_STD


25 
__exº_le
 

26 
__NTH
 (
	$©of
 (cÚ¡ *
__Å
))

28  
	`¡¹od
 (
__Å
, (**è
NULL
);

29 
	}
}

30 
	g__END_NAMESPACE_STD


	@/usr/include/bits/stdlib-ldbl.h

19 #iâdeà
_STDLIB_H


23 #ifdef 
__USE_ISOC99


24 
__BEGIN_NAMESPACE_C99


25 
	$__LDBL_REDIR1_DECL
 (
¡¹Þd
, 
¡¹od
)

26 
__END_NAMESPACE_C99


29 #ifdeà
__USE_GNU


30 
	$__LDBL_REDIR1_DECL
 (
¡¹Þd_l
, 
¡¹od_l
)

33 #ifdeà
__USE_MISC


34 
	$__LDBL_REDIR1_DECL
 (
qecvt
, 
ecvt
)

35 
	$__LDBL_REDIR1_DECL
 (
qfcvt
, 
fcvt
)

36 
	$__LDBL_REDIR1_DECL
 (
qgcvt
, 
gcvt
)

37 
	$__LDBL_REDIR1_DECL
 (
qecvt_r
, 
ecvt_r
)

38 
	$__LDBL_REDIR1_DECL
 (
qfcvt_r
, 
fcvt_r
)

	@/usr/include/bits/stdlib.h

19 #iâdeà
_STDLIB_H


23 *
	$__»®·th_chk
 (cÚ¡ *
__»¡riù
 
__Çme
,

24 *
__»¡riù
 
__»sÞved
,

25 
size_t
 
__»sÞvedËn
è
__THROW
 
__wur
;

26 *
	`__REDIRECT_NTH
 (
__»®·th_®s
,

27 (cÚ¡ *
__»¡riù
 
__Çme
,

28 *
__»¡riù
 
__»sÞved
), 
»®·th
è
__wur
;

29 *
	`__REDIRECT_NTH
 (
__»®·th_chk_w¬n
,

30 (cÚ¡ *
__»¡riù
 
__Çme
,

31 *
__»¡riù
 
__»sÞved
,

32 
size_t
 
__»sÞvedËn
), 
__»®·th_chk
è
__wur


33 
	`__w¬Çr
 ("secondrgument ofealpath must beither NULL ort "

36 
__fÜtify_funùiÚ
 
__wur
 *

37 
	`__NTH
 (
	$»®·th
 (cÚ¡ *
__»¡riù
 
__Çme
, *__»¡riù 
__»sÞved
))

39 ià(
	`__bos
 (
__»sÞved
è!ð(
size_t
) -1)

41 #ià
defed
 
_LIBC_LIMITS_H_
 && defed 
PATH_MAX


42 ià(
	`__bos
 (
__»sÞved
è< 
PATH_MAX
)

43  
	`__»®·th_chk_w¬n
 (
__Çme
, 
__»sÞved
, 
	`__bos
 (__resolved));

45  
	`__»®·th_chk
 (
__Çme
, 
__»sÞved
, 
	`__bos
 (__resolved));

48  
	`__»®·th_®s
 (
__Çme
, 
__»sÞved
);

49 
	}
}

52 
	$__±¢ame_r_chk
 (
__fd
, *
__buf
, 
size_t
 
__buæ
,

53 
size_t
 
__Äl
è
__THROW
 
	`__nÚnuÎ
 ((2));

54 
	`__REDIRECT_NTH
 (
__±¢ame_r_®s
, (
__fd
, *
__buf
,

55 
size_t
 
__buæ
), 
±¢ame_r
)

56 
	`__nÚnuÎ
 ((2));

57 
	`__REDIRECT_NTH
 (
__±¢ame_r_chk_w¬n
,

58 (
__fd
, *
__buf
, 
size_t
 
__buæ
,

59 
size_t
 
__Äl
), 
__±¢ame_r_chk
)

60 
	`__nÚnuÎ
 ((2)è
	`__w¬Çr
 ("ptsname_r called with buflen biggerhan "

63 
__fÜtify_funùiÚ
 

64 
	`__NTH
 (
	$±¢ame_r
 (
__fd
, *
__buf
, 
size_t
 
__buæ
))

66 ià(
	`__bos
 (
__buf
è!ð(
size_t
) -1)

68 ià(!
	`__but_cÚ¡ªt_p
 (
__buæ
))

69  
	`__±¢ame_r_chk
 (
__fd
, 
__buf
, 
__buæ
, 
	`__bos
 (__buf));

70 ià(
__buæ
 > 
	`__bos
 (
__buf
))

71  
	`__±¢ame_r_chk_w¬n
 (
__fd
, 
__buf
, 
__buæ
, 
	`__bos
 (__buf));

73  
	`__±¢ame_r_®s
 (
__fd
, 
__buf
, 
__buæ
);

74 
	}
}

77 
	$__wùomb_chk
 (*
__s
, 
wch¬_t
 
__wch¬
, 
size_t
 
__buæ
)

78 
__THROW
 
__wur
;

79 
	`__REDIRECT_NTH
 (
__wùomb_®s
, (*
__s
, 
wch¬_t
 
__wch¬
),

80 
wùomb
è
__wur
;

82 
__fÜtify_funùiÚ
 
__wur
 

83 
	`__NTH
 (
	$wùomb
 (*
__s
, 
wch¬_t
 
__wch¬
))

88 
	#__STDLIB_MB_LEN_MAX
 16

	)

89 #ià
defed
 
MB_LEN_MAX
 && MB_LEN_MAX !ð
__STDLIB_MB_LEN_MAX


92 ià(
	`__bos
 (
__s
è!ð(
size_t
è-1 && 
__STDLIB_MB_LEN_MAX
 > __bos (__s))

93  
	`__wùomb_chk
 (
__s
, 
__wch¬
, 
	`__bos
 (__s));

94  
	`__wùomb_®s
 (
__s
, 
__wch¬
);

95 
	}
}

98 
size_t
 
	$__mb¡owcs_chk
 (
wch¬_t
 *
__»¡riù
 
__d¡
,

99 cÚ¡ *
__»¡riù
 
__¤c
,

100 
size_t
 
__Ën
, size_
__d¡Ën
è
__THROW
;

101 
size_t
 
	`__REDIRECT_NTH
 (
__mb¡owcs_®s
,

102 (
wch¬_t
 *
__»¡riù
 
__d¡
,

103 cÚ¡ *
__»¡riù
 
__¤c
,

104 
size_t
 
__Ën
), 
mb¡owcs
);

105 
size_t
 
	`__REDIRECT_NTH
 (
__mb¡owcs_chk_w¬n
,

106 (
wch¬_t
 *
__»¡riù
 
__d¡
,

107 cÚ¡ *
__»¡riù
 
__¤c
,

108 
size_t
 
__Ën
, size_
__d¡Ën
), 
__mb¡owcs_chk
)

109 
	`__w¬Çr
 ("mbstowcs called with dst buffer smallerhanen "

112 
__fÜtify_funùiÚ
 
size_t


113 
	`__NTH
 (
	$mb¡owcs
 (
wch¬_t
 *
__»¡riù
 
__d¡
, cÚ¡ *__»¡riù 
__¤c
,

114 
size_t
 
__Ën
))

116 ià(
	`__bos
 (
__d¡
è!ð(
size_t
) -1)

118 ià(!
	`__but_cÚ¡ªt_p
 (
__Ën
))

119  
	`__mb¡owcs_chk
 (
__d¡
, 
__¤c
, 
__Ën
,

120 
	`__bos
 (
__d¡
è/  (
wch¬_t
));

122 ià(
__Ën
 > 
	`__bos
 (
__d¡
è/  (
wch¬_t
))

123  
	`__mb¡owcs_chk_w¬n
 (
__d¡
, 
__¤c
, 
__Ën
,

124 
	`__bos
 (
__d¡
è/  (
wch¬_t
));

126  
	`__mb¡owcs_®s
 (
__d¡
, 
__¤c
, 
__Ën
);

127 
	}
}

130 
size_t
 
	$__wc¡ombs_chk
 (*
__»¡riù
 
__d¡
,

131 cÚ¡ 
wch¬_t
 *
__»¡riù
 
__¤c
,

132 
size_t
 
__Ën
, size_
__d¡Ën
è
__THROW
;

133 
size_t
 
	`__REDIRECT_NTH
 (
__wc¡ombs_®s
,

134 (*
__»¡riù
 
__d¡
,

135 cÚ¡ 
wch¬_t
 *
__»¡riù
 
__¤c
,

136 
size_t
 
__Ën
), 
wc¡ombs
);

137 
size_t
 
	`__REDIRECT_NTH
 (
__wc¡ombs_chk_w¬n
,

138 (*
__»¡riù
 
__d¡
,

139 cÚ¡ 
wch¬_t
 *
__»¡riù
 
__¤c
,

140 
size_t
 
__Ën
, size_
__d¡Ën
), 
__wc¡ombs_chk
)

141 
	`__w¬Çr
 ("wcstombs called with dst buffer smallerhanen");

143 
__fÜtify_funùiÚ
 
size_t


144 
	`__NTH
 (
	$wc¡ombs
 (*
__»¡riù
 
__d¡
, cÚ¡ 
wch¬_t
 *__»¡riù 
__¤c
,

145 
size_t
 
__Ën
))

147 ià(
	`__bos
 (
__d¡
è!ð(
size_t
) -1)

149 ià(!
	`__but_cÚ¡ªt_p
 (
__Ën
))

150  
	`__wc¡ombs_chk
 (
__d¡
, 
__¤c
, 
__Ën
, 
	`__bos
 (__dst));

151 ià(
__Ën
 > 
	`__bos
 (
__d¡
))

152  
	`__wc¡ombs_chk_w¬n
 (
__d¡
, 
__¤c
, 
__Ën
, 
	`__bos
 (__dst));

154  
	`__wc¡ombs_®s
 (
__d¡
, 
__¤c
, 
__Ën
);

155 
	}
}

	@/usr/include/bits/string.h

19 #iâdeà
_STRING_H


24 
	#_STRING_ARCH_uÇligÃd
 1

	)

28 #ià!
defed
 
__x86_64__
 && (defed 
__i486__
 || defed 
__³Áium__
 \

29 || 
defed
 
	g__³Áium´o__
 || defed 
	g__³Áium4__
 \

30 || 
defed
 
	g__nocÚa__
 || defed 
	g__©om__
 \

31 || 
defed
 
	g__cÜe2__
 || defed 
	g__cÜei7__
 \

32 || 
defed
 
	g__k6__
 || defed 
	g__geode__
 \

33 || 
defed
 
	g__k8__
 || defed 
	g__©hlÚ__
 \

34 || 
defed
 
	g__amdçm10__
)

38 #ià!
defed
 
__NO_STRING_INLINES
 && defed 
__USE_STRING_INLINES
 \

39 && 
defed
 
	g__GNUC__
 && __GNUC__ >= 2

41 #iâdeà
__STRING_INLINE


42 #iâdeà
__exº_le


43 
	#__STRING_INLINE
 
le


	)

45 
	#__STRING_INLINE
 
__exº_le


	)

50 
	#__STRING_SMALL_GET16
(
¤c
, 
idx
) \

51 ((((cÚ¡ *è(
¤c
))[
idx
 + 1] << 8) \

52 | ((cÚ¡ *è(
¤c
))[
idx
])

	)

53 
	#__STRING_SMALL_GET32
(
¤c
, 
idx
) \

54 (((((cÚ¡ *è(
¤c
))[
idx
 + 3] << 8 \

55 | ((cÚ¡ *è(
¤c
))[
idx
 + 2]) << 8 \

56 | ((cÚ¡ *è(
¤c
))[
idx
 + 1]) << 8 \

57 | ((cÚ¡ *è(
¤c
))[
idx
])

	)

61 
	#_HAVE_STRING_ARCH_memýy
 1

	)

62 
	#memýy
(
de¡
, 
¤c
, 
n
) \

63 (
	`__exnsiÚ__
 (
	`__but_cÚ¡ªt_p
 (
n
) \

64 ? 
	`__memýy_c
 ((
de¡
), (
¤c
), (
n
)) \

65 : 
	`__memýy_g
 ((
de¡
), (
¤c
), (
n
))))

	)

66 
	#__memýy_c
(
de¡
, 
¤c
, 
n
) \

67 ((
n
) == 0 \

68 ? (
de¡
) \

69 : (((
n
) % 4 == 0) \

70 ? 
	`__memýy_by4
 (
de¡
, 
¤c
, 
n
) \

71 : (((
n
) % 2 == 0) \

72 ? 
	`__memýy_by2
 (
de¡
, 
¤c
, 
n
) \

73 : 
	`__memýy_g
 (
de¡
, 
¤c
, 
n
))))

	)

75 
__STRING_INLINE
 *
__memýy_by4
 (*
__de¡
, cÚ¡ *
__¤c
,

76 
size_t
 
__n
);

78 
__STRING_INLINE
 *

79 
	$__memýy_by4
 (*
__de¡
, cÚ¡ *
__¤c
, 
size_t
 
__n
)

81 
__d0
, 
__d1
;

82 *
__tmp
 = 
__de¡
;

83 
__asm__
 
__vÞ©e__


91 : "=&r" (
__d0
), "=&r" (
__tmp
), "=&r" (
__¤c
), "=&r" (
__d1
)

92 : "1" (
__tmp
), "2" (
__¤c
), "3" (
__n
 / 4)

94  
__de¡
;

95 
	}
}

97 
__STRING_INLINE
 *
__memýy_by2
 (*
__de¡
, cÚ¡ *
__¤c
,

98 
size_t
 
__n
);

100 
__STRING_INLINE
 *

101 
	$__memýy_by2
 (*
__de¡
, cÚ¡ *
__¤c
, 
size_t
 
__n
)

103 
__d0
, 
__d1
;

104 *
__tmp
 = 
__de¡
;

105 
__asm__
 
__vÞ©e__


118 : "=&q" (
__d0
), "=&r" (
__tmp
), "=&r" (
__¤c
), "=&r" (
__d1
)

119 : "1" (
__tmp
), "2" (
__¤c
), "3" (
__n
 / 2)

121  
__de¡
;

122 
	}
}

124 
__STRING_INLINE
 *
__memýy_g
 (*
__de¡
, cÚ¡ *
__¤c
, 
size_t
 
__n
);

126 
__STRING_INLINE
 *

127 
	$__memýy_g
 (*
__de¡
, cÚ¡ *
__¤c
, 
size_t
 
__n
)

129 
__d0
, 
__d1
, 
__d2
;

130 *
__tmp
 = 
__de¡
;

131 
__asm__
 
__vÞ©e__


142 : "=&c" (
__d0
), "=&D" (
__d1
), "=&S" (
__d2
),

143 "=m" ( *(¡ruù { 
__exnsiÚ__
 
__x
[
__n
]; } *)
__de¡
)

144 : "0" (
__n
), "1" (
__tmp
), "2" (
__¤c
),

145 "m" ( *(¡ruù { 
__exnsiÚ__
 
__x
[
__n
]; } *)
__¤c
)

147  
__de¡
;

148 
	}
}

150 
	#_HAVE_STRING_ARCH_memmove
 1

	)

151 #iâdeà
_FORCE_INLINES


154 
	#memmove
(
de¡
, 
¤c
, 
n
è
	`__memmove_g
 (de¡, src,)

	)

156 
__STRING_INLINE
 *
	$__memmove_g
 (*, cÚ¡ *, 
size_t
)

157 
	`__asm__
 ("memmove");

159 
__STRING_INLINE
 *

160 
	$__memmove_g
 (*
__de¡
, cÚ¡ *
__¤c
, 
size_t
 
__n
)

162 
__d0
, 
__d1
, 
__d2
;

163 *
__tmp
 = 
__de¡
;

164 ià(
__de¡
 < 
__¤c
)

165 
__asm__
 
__vÞ©e__


168 : "=&c" (
__d0
), "=&S" (
__d1
), "=&D" (
__d2
),

169 "=m" ( *(¡ruù { 
__exnsiÚ__
 
__x
[
__n
]; } *)
__de¡
)

170 : "0" (
__n
), "1" (
__¤c
), "2" (
__tmp
),

171 "m" ( *(¡ruù { 
__exnsiÚ__
 
__x
[
__n
]; } *)
__¤c
));

173 
__asm__
 
__vÞ©e__


177 : "=&c" (
__d0
), "=&S" (
__d1
), "=&D" (
__d2
),

178 "=m" ( *(¡ruù { 
__exnsiÚ__
 
__x
[
__n
]; } *)
__de¡
)

179 : "0" (
__n
), "1" (__À- 1 + (cÚ¡ *è
__¤c
),

180 "2" (
__n
 - 1 + (*è
__tmp
),

181 "m" ( *(¡ruù { 
__exnsiÚ__
 
__x
[
__n
]; } *)
__¤c
));

182  
__de¡
;

183 
	}
}

187 
	#_HAVE_STRING_ARCH_memcmp
 1

	)

188 #iâdeà
_FORCE_INLINES


189 #iâdeà
__PIC__


191 
__STRING_INLINE
 

192 
	$memcmp
 (cÚ¡ *
__s1
, cÚ¡ *
__s2
, 
size_t
 
__n
)

194 
__d0
, 
__d1
, 
__d2
;

195 
__»s
;

196 
__asm__
 
__vÞ©e__


204 : "=&a" (
__»s
), "=&S" (
__d0
), "=&D" (
__d1
), "=&c" (
__d2
)

205 : "0" (0), "1" (
__s1
), "2" (
__s2
), "3" (
__n
),

206 "m" ( *(¡ruù { 
__exnsiÚ__
 
__x
[
__n
]; } *)
__s1
),

207 "m" ( *(¡ruù { 
__exnsiÚ__
 
__x
[
__n
]; } *)
__s2
)

209  
__»s
;

210 
	}
}

215 
	#_HAVE_STRING_ARCH_mem£t
 1

	)

216 
	#_USE_STRING_ARCH_mem£t
 1

	)

217 
	#mem£t
(
s
, 
c
, 
n
) \

218 (
	`__exnsiÚ__
 (
	`__but_cÚ¡ªt_p
 (
n
) && (n) <= 16 \

219 ? ((
n
) == 1 \

220 ? 
	`__mem£t_c1
 ((
s
), (
c
)) \

221 : 
	`__mem£t_gc
 ((
s
), (
c
), (
n
))) \

222 : (
	`__but_cÚ¡ªt_p
 (
c
) \

223 ? (
	`__but_cÚ¡ªt_p
 (
n
) \

224 ? 
	`__mem£t_cú
 ((
s
), (
c
), (
n
)) \

225 : 
	`mem£t
 ((
s
), (
c
), (
n
))) \

226 : (
	`__but_cÚ¡ªt_p
 (
n
) \

227 ? 
	`__mem£t_gú
 ((
s
), (
c
), (
n
)) \

228 : 
	`mem£t
 ((
s
), (
c
), (
n
))))))

	)

230 
	#__mem£t_c1
(
s
, 
c
è({ *
__s
 = (s); \

231 *((*è
__s
èð(è(
c
); \

232 
__s
; })

	)

234 
	#__mem£t_gc
(
s
, 
c
, 
n
) \

235 ({ *
__s
 = (
s
); \

237 
__ui
; \

238 
__usi
; \

239 
__uc
; \

240 } *
__u
 = 
__s
; \

241 
__c
 = ((è((è(
c
))) * 0x01010101; \

247 ià((
n
) == 3 || (n) >= 5) \

248 
__asm__
 
	`__vÞ©e__
 ("" : "ô" (
__c
) : "0" (__c)); \

251 
n
) \

254 
__u
->
__ui
 = 
__c
; \

255 
__u
 = 
	`__exnsiÚ__
 ((*) __u + 4); \

257 
__u
->
__ui
 = 
__c
; \

258 
__u
 = 
	`__exnsiÚ__
 ((*) __u + 4); \

260 
__u
->
__ui
 = 
__c
; \

261 
__u
 = 
	`__exnsiÚ__
 ((*) __u + 4); \

263 
__u
->
__usi
 = (è
__c
; \

264 
__u
 = 
	`__exnsiÚ__
 ((*) __u + 2); \

265 
__u
->
__uc
 = (è
__c
; \

269 
__u
->
__ui
 = 
__c
; \

270 
__u
 = 
	`__exnsiÚ__
 ((*) __u + 4); \

272 
__u
->
__ui
 = 
__c
; \

273 
__u
 = 
	`__exnsiÚ__
 ((*) __u + 4); \

275 
__u
->
__ui
 = 
__c
; \

276 
__u
 = 
	`__exnsiÚ__
 ((*) __u + 4); \

278 
__u
->
__usi
 = (è
__c
; \

282 
__u
->
__ui
 = 
__c
; \

283 
__u
 = 
	`__exnsiÚ__
 ((*) __u + 4); \

285 
__u
->
__ui
 = 
__c
; \

286 
__u
 = 
	`__exnsiÚ__
 ((*) __u + 4); \

288 
__u
->
__ui
 = 
__c
; \

289 
__u
 = 
	`__exnsiÚ__
 ((*) __u + 4); \

291 
__u
->
__uc
 = (è
__c
; \

295 
__u
->
__ui
 = 
__c
; \

296 
__u
 = 
	`__exnsiÚ__
 ((*) __u + 4); \

298 
__u
->
__ui
 = 
__c
; \

299 
__u
 = 
	`__exnsiÚ__
 ((*) __u + 4); \

301 
__u
->
__ui
 = 
__c
; \

302 
__u
 = 
	`__exnsiÚ__
 ((*) __u + 4); \

304 
__u
->
__ui
 = 
__c
; \

309 
__s
; })

	)

311 
	#__mem£t_cú
(
s
, 
c
, 
n
) \

312 (((
n
) % 4 == 0) \

313 ? 
	`__mem£t_cú_by4
 (
s
, ((è((è(
c
))) * 0x01010101,\

314 
n
) \

315 : (((
n
) % 2 == 0) \

316 ? 
	`__mem£t_cú_by2
 (
s
, \

317 ((è((è(
c
))) * 0x01010101,\

318 
n
) \

319 : 
	`mem£t
 (
s
, 
c
, 
n
)))

	)

321 
__STRING_INLINE
 *
__mem£t_cú_by4
 (*
__s
, 
__c
,

322 
size_t
 
__n
);

324 
__STRING_INLINE
 *

325 
	$__mem£t_cú_by4
 (*
__s
, 
__c
, 
size_t
 
__n
)

327 *
__tmp
 = 
__s
;

328 
__d0
;

329 #ifdeà
__i686__


330 
__asm__
 
__vÞ©e__


333 : "=&a" (
__c
), "=&D" (
__tmp
), "=&c" (
__d0
),

334 "=m" ( *(¡ruù { 
__exnsiÚ__
 
__x
[
__n
]; } *)
__s
)

335 : "0" ((è
__c
), "1" (
__tmp
), "2" (
__n
 / 4)

338 
__asm__
 
__vÞ©e__


344 : "=&r" (
__c
), "=&r" (
__tmp
), "=&r" (
__d0
),

345 "=m" ( *(¡ruù { 
__exnsiÚ__
 
__x
[
__n
]; } *)
__s
)

346 : "0" ((è
__c
), "1" (
__tmp
), "2" (
__n
 / 4)

349  
__s
;

350 
	}
}

352 
__STRING_INLINE
 *
__mem£t_cú_by2
 (*
__s
, 
__c
,

353 
size_t
 
__n
);

355 
__STRING_INLINE
 *

356 
	$__mem£t_cú_by2
 (*
__s
, 
__c
, 
size_t
 
__n
)

358 
__d0
, 
__d1
;

359 *
__tmp
 = 
__s
;

360 #ifdeà
__i686__


361 
__asm__
 
__vÞ©e__


365 : "=&a" (
__d0
), "=&D" (
__tmp
), "=&c" (
__d1
),

366 "=m" ( *(¡ruù { 
__exnsiÚ__
 
__x
[
__n
]; } *)
__s
)

367 : "0" ((è
__c
), "1" (
__tmp
), "2" (
__n
 / 4)

370 
__asm__
 
__vÞ©e__


376 : "=&q" (
__d0
), "=&r" (
__tmp
), "=&r" (
__d1
),

377 "=m" ( *(¡ruù { 
__exnsiÚ__
 
__x
[
__n
]; } *)
__s
)

378 : "0" ((è
__c
), "1" (
__tmp
), "2" (
__n
 / 4)

381  
__s
;

382 
	}
}

384 
	#__mem£t_gú
(
s
, 
c
, 
n
) \

385 (((
n
) % 4 == 0) \

386 ? 
	`__mem£t_gú_by4
 (
s
, 
c
, 
n
) \

387 : (((
n
) % 2 == 0) \

388 ? 
	`__mem£t_gú_by2
 (
s
, 
c
, 
n
) \

389 : 
	`mem£t
 (
s
, 
c
, 
n
)))

	)

391 
__STRING_INLINE
 *
__mem£t_gú_by4
 (*
__s
, 
__c
, 
size_t
 
__n
);

393 
__STRING_INLINE
 *

394 
	$__mem£t_gú_by4
 (*
__s
, 
__c
, 
size_t
 
__n
)

396 *
__tmp
 = 
__s
;

397 
__d0
;

398 
__asm__
 
__vÞ©e__


408 : "=&q" (
__c
), "=&r" (
__tmp
), "=&r" (
__d0
),

409 "=m" ( *(¡ruù { 
__exnsiÚ__
 
__x
[
__n
]; } *)
__s
)

410 : "0" ((è
__c
), "1" (
__tmp
), "2" (
__n
 / 4)

412  
__s
;

413 
	}
}

415 
__STRING_INLINE
 *
__mem£t_gú_by2
 (*
__s
, 
__c
, 
size_t
 
__n
);

417 
__STRING_INLINE
 *

418 
	$__mem£t_gú_by2
 (*
__s
, 
__c
, 
size_t
 
__n
)

420 
__d0
, 
__d1
;

421 *
__tmp
 = 
__s
;

422 
__asm__
 
__vÞ©e__


433 : "=&q" (
__d0
), "=&r" (
__tmp
), "=&r" (
__d1
),

434 "=m" ( *(¡ruù { 
__exnsiÚ__
 
__x
[
__n
]; } *)
__s
)

435 : "0" ((è
__c
), "1" (
__tmp
), "2" (
__n
 / 4)

437  
__s
;

438 
	}
}

442 
	#_HAVE_STRING_ARCH_memchr
 1

	)

443 #iâdeà
_FORCE_INLINES


444 
__STRING_INLINE
 *

445 
	$memchr
 (cÚ¡ *
__s
, 
__c
, 
size_t
 
__n
)

447 
__d0
;

448 #ifdeà
__i686__


449 
__d1
;

451 *
__»s
;

452 ià(
__n
 == 0)

453  
NULL
;

454 #ifdeà
__i686__


455 
__asm__
 
__vÞ©e__


459 : "=D" (
__»s
), "=&c" (
__d0
), "=&r" (
__d1
)

460 : "a" (
__c
), "0" (
__s
), "1" (
__n
), "2" (1),

461 "m" ( *(¡ruù { 
__exnsiÚ__
 
__x
[
__n
]; } *)
__s
)

464 
__asm__
 
__vÞ©e__


470 : "=D" (
__»s
), "=&c" (
__d0
)

471 : "a" (
__c
), "0" (
__s
), "1" (
__n
),

472 "m" ( *(¡ruù { 
__exnsiÚ__
 
__x
[
__n
]; } *)
__s
)

475  
__»s
 - 1;

476 
	}
}

479 
	#_HAVE_STRING_ARCH_memrchr
 1

	)

480 #iâdeà
_FORCE_INLINES


481 
__STRING_INLINE
 *
__memrchr
 (cÚ¡ *
__s
, 
__c
, 
size_t
 
__n
);

483 
__STRING_INLINE
 *

484 
	$__memrchr
 (cÚ¡ *
__s
, 
__c
, 
size_t
 
__n
)

486 
__d0
;

487 #ifdeà
__i686__


488 
__d1
;

490 *
__»s
;

491 ià(
__n
 == 0)

492  
NULL
;

493 #ifdeà
__i686__


494 
__asm__
 
__vÞ©e__


500 : "=D" (
__»s
), "=&c" (
__d0
), "=&r" (
__d1
)

501 : "a" (
__c
), "0" (
__s
 + 
__n
 - 1), "1" (__n), "2" (-1),

502 "m" ( *(¡ruù { 
__exnsiÚ__
 
__x
[
__n
]; } *)
__s
)

505 
__asm__
 
__vÞ©e__


512 : "=D" (
__»s
), "=&c" (
__d0
)

513 : "a" (
__c
), "0" (
__s
 + 
__n
 - 1), "1" (__n),

514 "m" ( *(¡ruù { 
__exnsiÚ__
 
__x
[
__n
]; } *)
__s
)

517  
__»s
;

518 
	}
}

519 #ifdeà
__USE_GNU


520 
	#memrchr
(
s
, 
c
, 
n
è
	`__memrchr
 ((s), (c), (n))

	)

525 
	#_HAVE_STRING_ARCH_¿wmemchr
 1

	)

526 
__STRING_INLINE
 *
__¿wmemchr
 (cÚ¡ *
__s
, 
__c
);

528 #iâdeà
_FORCE_INLINES


529 
__STRING_INLINE
 *

530 
	$__¿wmemchr
 (cÚ¡ *
__s
, 
__c
)

532 
__d0
;

533 *
__»s
;

534 
__asm__
 
__vÞ©e__


537 : "=D" (
__»s
), "=&c" (
__d0
)

538 : "a" (
__c
), "0" (
__s
), "1" (0xffffffff),

539 "m" ( *(¡ruù { 
__x
[0xfffffff]; } *)
__s
)

541  
__»s
 - 1;

542 
	}
}

543 #ifdeà
__USE_GNU


544 
__STRING_INLINE
 *

545 
	$¿wmemchr
 (cÚ¡ *
__s
, 
__c
)

547  
	`__¿wmemchr
 (
__s
, 
__c
);

548 
	}
}

554 
	#_HAVE_STRING_ARCH_¡¾
 1

	)

555 
	#¡¾
(
¡r
) \

556 (
	`__exnsiÚ__
 (
	`__but_cÚ¡ªt_p
 (
¡r
) \

557 ? 
	`__but_¡¾
 (
¡r
) \

558 : 
	`__¡¾_g
 (
¡r
)))

	)

559 
__STRING_INLINE
 
size_t
 
__¡¾_g
 (cÚ¡ *
__¡r
);

561 
__STRING_INLINE
 
size_t


562 
	$__¡¾_g
 (cÚ¡ *
__¡r
)

564 
__dummy
;

565 cÚ¡ *
__tmp
 = 
__¡r
;

566 
__asm__
 
__vÞ©e__


572 : "ô" (
__tmp
), "=&q" (
__dummy
)

573 : "0" (
__¡r
),

574 "m" ( *(¡ruù { 
__x
[0xfffffff]; } *)
__¡r
)

576  
__tmp
 - 
__¡r
 - 1;

577 
	}
}

581 
	#_HAVE_STRING_ARCH_¡rýy
 1

	)

582 
	#¡rýy
(
de¡
, 
¤c
) \

583 (
	`__exnsiÚ__
 (
	`__but_cÚ¡ªt_p
 (
¤c
) \

584 ? ( ((
¤c
)[0]è=ð1 && 
	`¡¾
 (src) + 1 <= 8 \

585 ? 
	`__¡rýy_a_sm®l
 ((
de¡
), (
¤c
), 
	`¡¾
 (src) + 1) \

586 : (*è
	`memýy
 ((*è(
de¡
), \

587 (cÚ¡ *è(
¤c
), \

588 
	`¡¾
 (
¤c
) + 1)) \

589 : 
	`__¡rýy_g
 ((
de¡
), (
¤c
))))

	)

591 
	#__¡rýy_a_sm®l
(
de¡
, 
¤c
, 
¤þ
) \

592 (
	`__exnsiÚ__
 ({ *
__de¡
 = (
de¡
); \

594 
__ui
; \

595 
__usi
; \

596 
__uc
; \

597 
__c
; \

598 } *
__u
 = (*è
__de¡
; \

599 
¤þ
) \

602 
__u
->
__uc
 = '\0'; \

605 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
¤c
, 0); \

608 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
¤c
, 0); \

609 
__u
 = 
	`__exnsiÚ__
 ((*) __u + 2); \

610 
__u
->
__uc
 = '\0'; \

613 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
¤c
, 0); \

616 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
¤c
, 0); \

617 
__u
 = 
	`__exnsiÚ__
 ((*) __u + 4); \

618 
__u
->
__uc
 = '\0'; \

621 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
¤c
, 0); \

622 
__u
 = 
	`__exnsiÚ__
 ((*) __u + 4); \

623 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
¤c
, 4); \

626 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
¤c
, 0); \

627 
__u
 = 
	`__exnsiÚ__
 ((*) __u + 4); \

628 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
¤c
, 4); \

629 
__u
 = 
	`__exnsiÚ__
 ((*) __u + 2); \

630 
__u
->
__uc
 = '\0'; \

633 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
¤c
, 0); \

634 
__u
 = 
	`__exnsiÚ__
 ((*) __u + 4); \

635 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
¤c
, 4); \

638 (*è
__de¡
; }))

	)

640 
__STRING_INLINE
 *
__¡rýy_g
 (*
__de¡
, cÚ¡ *
__¤c
);

642 
__STRING_INLINE
 *

643 
	$__¡rýy_g
 (*
__de¡
, cÚ¡ *
__¤c
)

645 *
__tmp
 = 
__de¡
;

646 
__dummy
;

647 
__asm__
 
__vÞ©e__


656 : "=&r" (
__¤c
), "=&r" (
__tmp
), "=&q" (
__dummy
),

657 "=m" ( *(¡ruù { 
__x
[0xfffffff]; } *)
__de¡
)

658 : "0" (
__¤c
), "1" (
__tmp
),

659 "m" ( *(¡ruù { 
__x
[0xfffffff]; } *)
__¤c
)

661  
__de¡
;

662 
	}
}

665 #ifdeà
__USE_GNU


666 
	#_HAVE_STRING_ARCH_¡pýy
 1

	)

668 
	#__¡pýy
(
de¡
, 
¤c
) \

669 (
	`__exnsiÚ__
 (
	`__but_cÚ¡ªt_p
 (
¤c
) \

670 ? (
	`¡¾
 (
¤c
) + 1 <= 8 \

671 ? 
	`__¡pýy_a_sm®l
 ((
de¡
), (
¤c
), 
	`¡¾
 (src) + 1) \

672 : 
	`__¡pýy_c
 ((
de¡
), (
¤c
), 
	`¡¾
 (src) + 1)) \

673 : 
	`__¡pýy_g
 ((
de¡
), (
¤c
))))

	)

674 
	#__¡pýy_c
(
de¡
, 
¤c
, 
¤þ
) \

675 ((
¤þ
) % 4 == 0 \

676 ? 
	`__mempýy_by4
 (
de¡
, 
¤c
, 
¤þ
) - 1 \

677 : ((
¤þ
) % 2 == 0 \

678 ? 
	`__mempýy_by2
 (
de¡
, 
¤c
, 
¤þ
) - 1 \

679 : 
	`__mempýy_byn
 (
de¡
, 
¤c
, 
¤þ
è- 1))

	)

682 
	#¡pýy
(
de¡
, 
¤c
è
	`__¡pýy
 ((de¡), (¤c))

	)

684 
	#__¡pýy_a_sm®l
(
de¡
, 
¤c
, 
¤þ
) \

685 (
	`__exnsiÚ__
 ({ union { \

686 
__ui
; \

687 
__usi
; \

688 
__uc
; \

689 
__c
; \

690 } *
__u
 = (*è(
de¡
); \

691 
¤þ
) \

694 
__u
->
__uc
 = '\0'; \

697 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
¤c
, 0); \

698 
__u
 = 
	`__exnsiÚ__
 ((*) __u + 1); \

701 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
¤c
, 0); \

702 
__u
 = 
	`__exnsiÚ__
 ((*) __u + 2); \

703 
__u
->
__uc
 = '\0'; \

706 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
¤c
, 0); \

707 
__u
 = 
	`__exnsiÚ__
 ((*) __u + 3); \

710 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
¤c
, 0); \

711 
__u
 = 
	`__exnsiÚ__
 ((*) __u + 4); \

712 
__u
->
__uc
 = '\0'; \

715 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
¤c
, 0); \

716 
__u
 = 
	`__exnsiÚ__
 ((*) __u + 4); \

717 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
¤c
, 4); \

718 
__u
 = 
	`__exnsiÚ__
 ((*) __u + 1); \

721 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
¤c
, 0); \

722 
__u
 = 
	`__exnsiÚ__
 ((*) __u + 4); \

723 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
¤c
, 4); \

724 
__u
 = 
	`__exnsiÚ__
 ((*) __u + 2); \

725 
__u
->
__uc
 = '\0'; \

728 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
¤c
, 0); \

729 
__u
 = 
	`__exnsiÚ__
 ((*) __u + 4); \

730 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
¤c
, 4); \

731 
__u
 = 
	`__exnsiÚ__
 ((*) __u + 3); \

734 (*è
__u
; }))

	)

736 
__STRING_INLINE
 *
__mempýy_by4
 (*
__de¡
, cÚ¡ *
__¤c
,

737 
size_t
 
__¤þ
);

739 
__STRING_INLINE
 *

740 
	$__mempýy_by4
 (*
__de¡
, cÚ¡ *
__¤c
, 
size_t
 
__¤þ
)

742 *
__tmp
 = 
__de¡
;

743 
__d0
, 
__d1
;

744 
__asm__
 
__vÞ©e__


752 : "=&r" (
__d0
), "ô" (
__tmp
), "=&r" (
__¤c
), "=&r" (
__d1
)

753 : "1" (
__tmp
), "2" (
__¤c
), "3" (
__¤þ
 / 4)

755  
__tmp
;

756 
	}
}

758 
__STRING_INLINE
 *
__mempýy_by2
 (*
__de¡
, cÚ¡ *
__¤c
,

759 
size_t
 
__¤þ
);

761 
__STRING_INLINE
 *

762 
	$__mempýy_by2
 (*
__de¡
, cÚ¡ *
__¤c
, 
size_t
 
__¤þ
)

764 *
__tmp
 = 
__de¡
;

765 
__d0
, 
__d1
;

766 
__asm__
 
__vÞ©e__


779 : "=&q" (
__d0
), "ô" (
__tmp
), "=&r" (
__¤c
), "=&r" (
__d1
),

780 "=m" ( *(¡ruù { 
__exnsiÚ__
 
__x
[
__¤þ
]; } *)
__de¡
)

781 : "1" (
__tmp
), "2" (
__¤c
), "3" (
__¤þ
 / 2),

782 "m" ( *(¡ruù { 
__exnsiÚ__
 
__x
[
__¤þ
]; } *)
__¤c
)

784  
__tmp
 + 2;

785 
	}
}

787 
__STRING_INLINE
 *
__mempýy_byn
 (*
__de¡
, cÚ¡ *
__¤c
,

788 
size_t
 
__¤þ
);

790 
__STRING_INLINE
 *

791 
	$__mempýy_byn
 (*
__de¡
, cÚ¡ *
__¤c
, 
size_t
 
__¤þ
)

793 
__d0
, 
__d1
;

794 *
__tmp
 = 
__de¡
;

795 
__asm__
 
__vÞ©e__


806 : "=D" (
__tmp
), "=&c" (
__d0
), "=&S" (
__d1
),

807 "=m" ( *(¡ruù { 
__exnsiÚ__
 
__x
[
__¤þ
]; } *)
__de¡
)

808 : "0" (
__tmp
), "1" (
__¤þ
), "2" (
__¤c
),

809 "m" ( *(¡ruù { 
__exnsiÚ__
 
__x
[
__¤þ
]; } *)
__¤c
)

811  
__tmp
;

812 
	}
}

814 
__STRING_INLINE
 *
__¡pýy_g
 (*
__de¡
, cÚ¡ *
__¤c
);

816 
__STRING_INLINE
 *

817 
	$__¡pýy_g
 (*
__de¡
, cÚ¡ *
__¤c
)

819 *
__tmp
 = 
__de¡
;

820 
__dummy
;

821 
__asm__
 
__vÞ©e__


830 : "=&r" (
__¤c
), "ô" (
__tmp
), "=&q" (
__dummy
),

831 "=m" ( *(¡ruù { 
__x
[0xfffffff]; } *)
__de¡
)

832 : "0" (
__¤c
), "1" (
__tmp
),

833 "m" ( *(¡ruù { 
__x
[0xfffffff]; } *)
__¤c
)

835  
__tmp
 - 1;

836 
	}
}

841 
	#_HAVE_STRING_ARCH_¡ºýy
 1

	)

842 
	#¡ºýy
(
de¡
, 
¤c
, 
n
) \

843 (
	`__exnsiÚ__
 (
	`__but_cÚ¡ªt_p
 (
¤c
) \

844 ? ((
	`¡¾
 (
¤c
è+ 1 >ð((
size_t
è(
n
)) \

845 ? (*è
	`memýy
 ((*è(
de¡
), \

846 (cÚ¡ *è(
¤c
), 
n
) \

847 : 
	`__¡ºýy_cg
 ((
de¡
), (
¤c
), 
	`¡¾
 (¤cè+ 1, 
n
))) \

848 : 
	`__¡ºýy_gg
 ((
de¡
), (
¤c
), 
n
)))

	)

849 
	#__¡ºýy_cg
(
de¡
, 
¤c
, 
¤þ
, 
n
) \

850 (((
¤þ
) % 4 == 0) \

851 ? 
	`__¡ºýy_by4
 (
de¡
, 
¤c
, 
¤þ
, 
n
) \

852 : (((
¤þ
) % 2 == 0) \

853 ? 
	`__¡ºýy_by2
 (
de¡
, 
¤c
, 
¤þ
, 
n
) \

854 : 
	`__¡ºýy_byn
 (
de¡
, 
¤c
, 
¤þ
, 
n
)))

	)

856 
__STRING_INLINE
 *
__¡ºýy_by4
 (*
__de¡
, cÚ¡ 
__¤c
[],

857 
size_t
 
__¤þ
, size_
__n
);

859 
__STRING_INLINE
 *

860 
	$__¡ºýy_by4
 (*
__de¡
, cÚ¡ 
__¤c
[], 
size_t
 
__¤þ
, size_
__n
)

862 *
__tmp
 = 
__de¡
;

863 
__dummy1
, 
__dummy2
;

864 
__asm__
 
__vÞ©e__


872 : "=&r" (
__dummy1
), "ô" (
__tmp
), "=&r" (
__¤c
), "=&r" (
__dummy2
),

873 "=m" ( *(¡ruù { 
__exnsiÚ__
 
__x
[
__¤þ
]; } *)
__de¡
)

874 : "1" (
__tmp
), "2" (
__¤c
), "3" (
__¤þ
 / 4),

875 "m" ( *(¡ruù { 
__exnsiÚ__
 
__x
[
__¤þ
]; } *)
__¤c
)

877 (è
	`mem£t
 (
__tmp
, '\0', 
__n
 - 
__¤þ
);

878  
__de¡
;

879 
	}
}

881 
__STRING_INLINE
 *
__¡ºýy_by2
 (*
__de¡
, cÚ¡ 
__¤c
[],

882 
size_t
 
__¤þ
, size_
__n
);

884 
__STRING_INLINE
 *

885 
	$__¡ºýy_by2
 (*
__de¡
, cÚ¡ 
__¤c
[], 
size_t
 
__¤þ
, size_
__n
)

887 *
__tmp
 = 
__de¡
;

888 
__dummy1
, 
__dummy2
;

889 
__asm__
 
__vÞ©e__


902 : "=&q" (
__dummy1
), "ô" (
__tmp
), "=&r" (
__¤c
), "=&r" (
__dummy2
),

903 "=m" ( *(¡ruù { 
__exnsiÚ__
 
__x
[
__¤þ
]; } *)
__de¡
)

904 : "1" (
__tmp
), "2" (
__¤c
), "3" (
__¤þ
 / 2),

905 "m" ( *(¡ruù { 
__exnsiÚ__
 
__x
[
__¤þ
]; } *)
__¤c
)

907 (è
	`mem£t
 (
__tmp
 + 2, '\0', 
__n
 - 
__¤þ
);

908  
__de¡
;

909 
	}
}

911 
__STRING_INLINE
 *
__¡ºýy_byn
 (*
__de¡
, cÚ¡ 
__¤c
[],

912 
size_t
 
__¤þ
, size_
__n
);

914 
__STRING_INLINE
 *

915 
	$__¡ºýy_byn
 (*
__de¡
, cÚ¡ 
__¤c
[], 
size_t
 
__¤þ
, size_
__n
)

917 
__d0
, 
__d1
;

918 *
__tmp
 = 
__de¡
;

919 
__asm__
 
__vÞ©e__


930 : "=D" (
__tmp
), "=&c" (
__d0
), "=&S" (
__d1
),

931 "=m" ( *(¡ruù { 
__exnsiÚ__
 
__x
[
__¤þ
]; } *)
__de¡
)

932 : "1" (
__¤þ
), "0" (
__tmp
),"2" (
__¤c
),

933 "m" ( *(¡ruù { 
__exnsiÚ__
 
__x
[
__¤þ
]; } *)
__¤c
)

935 (è
	`mem£t
 (
__tmp
, '\0', 
__n
 - 
__¤þ
);

936  
__de¡
;

937 
	}
}

939 
__STRING_INLINE
 *
__¡ºýy_gg
 (*
__de¡
, cÚ¡ *
__¤c
,

940 
size_t
 
__n
);

942 
__STRING_INLINE
 *

943 
	$__¡ºýy_gg
 (*
__de¡
, cÚ¡ *
__¤c
, 
size_t
 
__n
)

945 *
__tmp
 = 
__de¡
;

946 
__dummy
;

947 ià(
__n
 > 0)

948 
__asm__
 
__vÞ©e__


964 : "=&r" (
__¤c
), "=&r" (
__tmp
), "=&q" (
__dummy
), "=&r" (
__n
)

965 : "0" (
__¤c
), "1" (
__tmp
), "3" (
__n
)

968  
__de¡
;

969 
	}
}

973 
	#_HAVE_STRING_ARCH_¡rÿt
 1

	)

974 
	#¡rÿt
(
de¡
, 
¤c
) \

975 (
	`__exnsiÚ__
 (
	`__but_cÚ¡ªt_p
 (
¤c
) \

976 ? 
	`__¡rÿt_c
 ((
de¡
), (
¤c
), 
	`¡¾
 (src) + 1) \

977 : 
	`__¡rÿt_g
 ((
de¡
), (
¤c
))))

	)

979 
__STRING_INLINE
 *
__¡rÿt_c
 (*
__de¡
, cÚ¡ 
__¤c
[],

980 
size_t
 
__¤þ
);

982 
__STRING_INLINE
 *

983 
	$__¡rÿt_c
 (*
__de¡
, cÚ¡ 
__¤c
[], 
size_t
 
__¤þ
)

985 #ifdeà
__i686__


986 
__d0
;

987 *
__tmp
;

988 
__asm__
 
__vÞ©e__


990 : "=D" (
__tmp
), "=&c" (
__d0
),

991 "=m" ( *(¡ruù { 
__x
[0xfffffff]; } *)
__de¡
)

992 : "0" (
__de¡
), "1" (0xffffffff), "a" (0),

993 "m" ( *(¡ruù { 
__exnsiÚ__
 
__x
[
__¤þ
]; } *)
__¤c
)

995 --
__tmp
;

997 *
__tmp
 = 
__de¡
 - 1;

998 
__asm__
 
__vÞ©e__


1003 : "ô" (
__tmp
),

1004 "=m" ( *(¡ruù { 
__x
[0xfffffff]; } *)
__de¡
)

1005 : "0" (
__tmp
),

1006 "m" ( *(¡ruù { 
__exnsiÚ__
 
__x
[
__¤þ
]; } *)
__¤c
)

1009 (è
	`memýy
 (
__tmp
, 
__¤c
, 
__¤þ
);

1010  
__de¡
;

1011 
	}
}

1013 
__STRING_INLINE
 *
__¡rÿt_g
 (*
__de¡
, cÚ¡ *
__¤c
);

1015 
__STRING_INLINE
 *

1016 
	$__¡rÿt_g
 (*
__de¡
, cÚ¡ *
__¤c
)

1018 *
__tmp
 = 
__de¡
 - 1;

1019 
__dummy
;

1020 
__asm__
 
__vÞ©e__


1032 : "=&q" (
__dummy
), "=&r" (
__tmp
), "=&r" (
__¤c
),

1033 "=m" ( *(¡ruù { 
__x
[0xfffffff]; } *)
__de¡
)

1034 : "1" (
__tmp
), "2" (
__¤c
),

1035 "m" ( *(¡ruù { 
__x
[0xfffffff]; } *)
__¤c
)

1037  
__de¡
;

1038 
	}
}

1042 
	#_HAVE_STRING_ARCH_¡ºÿt
 1

	)

1043 
	#¡ºÿt
(
de¡
, 
¤c
, 
n
) \

1044 (
	`__exnsiÚ__
 ({ *
__de¡
 = (
de¡
); \

1045 
	`__but_cÚ¡ªt_p
 (
¤c
è&& __but_cÚ¡ªt_°(
n
) \

1046 ? (
	`¡¾
 (
¤c
è< ((
size_t
è(
n
)) \

1047 ? 
	`¡rÿt
 (
__de¡
, (
¤c
)) \

1048 : (*(*)
	`__mempýy
 (
	`¡rchr
 (
__de¡
, '\0'), \

1049 (cÚ¡ *è(
¤c
), \

1050 (
n
)èð0, 
__de¡
)) \

1051 : 
	`__¡ºÿt_g
 (
__de¡
, (
¤c
), (
n
)); }))

	)

1053 
__STRING_INLINE
 *
__¡ºÿt_g
 (*
__de¡
, cÚ¡ 
__¤c
[],

1054 
size_t
 
__n
);

1056 
__STRING_INLINE
 *

1057 
	$__¡ºÿt_g
 (*
__de¡
, cÚ¡ 
__¤c
[], 
size_t
 
__n
)

1059 *
__tmp
 = 
__de¡
;

1060 
__dummy
;

1061 #ifdeà
__i686__


1062 
__asm__
 
__vÞ©e__


1076 : "=&a" (
__dummy
), "=&D" (
__tmp
), "=&S" (
__¤c
), "=&c" (
__n
)

1077 : "g" (
__n
), "0" (0), "1" (
__tmp
), "2" (
__¤c
), "3" (0xffffffff)

1080 --
__tmp
;

1081 
__asm__
 
__vÞ©e__


1098 : "=&q" (
__dummy
), "=&r" (
__tmp
), "=&r" (
__¤c
), "=&r" (
__n
)

1099 : "1" (
__tmp
), "2" (
__¤c
), "3" (
__n
)

1102  
__de¡
;

1103 
	}
}

1107 
	#_HAVE_STRING_ARCH_¡rcmp
 1

	)

1108 
	#¡rcmp
(
s1
, 
s2
) \

1109 (
	`__exnsiÚ__
 (
	`__but_cÚ¡ªt_p
 (
s1
è&& __but_cÚ¡ªt_°(
s2
) \

1110 && ( ((
s1
)[0]è!ð1 || 
	`¡¾
 (s1) >= 4) \

1111 && ( ((
s2
)[0]è!ð1 || 
	`¡¾
 (s2) >= 4) \

1112 ? 
	`memcmp
 ((cÚ¡ *è(
s1
), (cÚ¡ *è(
s2
), \

1113 (
	`¡¾
 (
s1
è< sËÀ(
s2
) \

1114 ? 
	`¡¾
 (
s1
è: sËÀ(
s2
)) + 1) \

1115 : (
	`__but_cÚ¡ªt_p
 (
s1
) &&  ((s1)[0]) == 1 \

1116 &&  ((
s2
)[0]è=ð1 && 
	`¡¾
 (
s1
) < 4 \

1117 ? (
	`__but_cÚ¡ªt_p
 (
s2
) &&  ((s2)[0]) == 1 \

1118 ? 
	`__¡rcmp_cc
 ((cÚ¡ *è(
s1
), \

1119 (cÚ¡ *è(
s2
), \

1120 
	`¡¾
 (
s1
)) \

1121 : 
	`__¡rcmp_cg
 ((cÚ¡ *è(
s1
), \

1122 (cÚ¡ *è(
s2
), \

1123 
	`¡¾
 (
s1
))) \

1124 : (
	`__but_cÚ¡ªt_p
 (
s2
è&&  ((
s1
)[0]) == 1 \

1125 &&  ((
s2
)[0]è=ð1 && 
	`¡¾
 (s2) < 4 \

1126 ? (
	`__but_cÚ¡ªt_p
 (
s1
) \

1127 ? 
	`__¡rcmp_cc
 ((cÚ¡ *è(
s1
), \

1128 (cÚ¡ *è(
s2
), \

1129 
	`¡¾
 (
s2
)) \

1130 : 
	`__¡rcmp_gc
 ((cÚ¡ *è(
s1
), \

1131 (cÚ¡ *è(
s2
), \

1132 
	`¡¾
 (
s2
))) \

1133 : 
	`__¡rcmp_gg
 ((
s1
), (
s2
))))))

	)

1135 
	#__¡rcmp_cc
(
s1
, 
s2
, 
l
) \

1136 (
	`__exnsiÚ__
 ({ 
__»suÉ
 = (
s1
)[0] - (
s2
)[0]; \

1137 ià(
l
 > 0 && 
__»suÉ
 == 0) \

1139 
__»suÉ
 = (
s1
)[1] - (
s2
)[1]; \

1140 ià(
l
 > 1 && 
__»suÉ
 == 0) \

1142 
__»suÉ
 = (
s1
)[2] - (
s2
)[2]; \

1143 ià(
l
 > 2 && 
__»suÉ
 == 0) \

1144 
__»suÉ
 = (
s1
)[3] - (
s2
)[3]; \

1147 
__»suÉ
; }))

	)

1149 
	#__¡rcmp_cg
(
s1
, 
s2
, 
l1
) \

1150 (
	`__exnsiÚ__
 ({ cÚ¡ *
__s2
 = (
s2
); \

1151 
__»suÉ
 = (
s1
)[0] - 
__s2
[0]; \

1152 ià(
l1
 > 0 && 
__»suÉ
 == 0) \

1154 
__»suÉ
 = (
s1
)[1] - 
__s2
[1]; \

1155 ià(
l1
 > 1 && 
__»suÉ
 == 0) \

1157 
__»suÉ
 = (
s1
)[2] - 
__s2
[2]; \

1158 ià(
l1
 > 2 && 
__»suÉ
 == 0) \

1159 
__»suÉ
 = (
s1
)[3] - 
__s2
[3]; \

1162 
__»suÉ
; }))

	)

1164 
	#__¡rcmp_gc
(
s1
, 
s2
, 
l2
) \

1165 (
	`__exnsiÚ__
 ({ cÚ¡ *
__s1
 = (
s1
); \

1166 
__»suÉ
 = 
__s1
[0] - (
s2
)[0]; \

1167 ià(
l2
 > 0 && 
__»suÉ
 == 0) \

1169 
__»suÉ
 = 
__s1
[1] - (
s2
)[1]; \

1170 ià(
l2
 > 1 && 
__»suÉ
 == 0) \

1172 
__»suÉ
 = 
__s1
[2] - (
s2
)[2]; \

1173 ià(
l2
 > 2 && 
__»suÉ
 == 0) \

1174 
__»suÉ
 = 
__s1
[3] - (
s2
)[3]; \

1177 
__»suÉ
; }))

	)

1179 
__STRING_INLINE
 
__¡rcmp_gg
 (cÚ¡ *
__s1
, cÚ¡ *
__s2
);

1181 
__STRING_INLINE
 

1182 
	$__¡rcmp_gg
 (cÚ¡ *
__s1
, cÚ¡ *
__s2
)

1184 
__»s
;

1185 
__asm__
 
__vÞ©e__


1201 : "=q" (
__»s
), "=&r" (
__s1
), "=&r" (
__s2
)

1202 : "1" (
__s1
), "2" (
__s2
),

1203 "m" ( *(¡ruù { 
__x
[0xfffffff]; } *)
__s1
),

1204 "m" ( *(¡ruù { 
__x
[0xfffffff]; } *)
__s2
)

1206  
__»s
;

1207 
	}
}

1211 
	#_HAVE_STRING_ARCH_¡ºcmp
 1

	)

1212 
	#¡ºcmp
(
s1
, 
s2
, 
n
) \

1213 (
	`__exnsiÚ__
 (
	`__but_cÚ¡ªt_p
 (
s1
è&& 
	`¡¾
 (s1è< ((
size_t
è(
n
)) \

1214 ? 
	`¡rcmp
 ((
s1
), (
s2
)) \

1215 : (
	`__but_cÚ¡ªt_p
 (
s2
è&& 
	`¡¾
 (s2è< ((
size_t
è(
n
))\

1216 ? 
	`¡rcmp
 ((
s1
), (
s2
)) \

1217 : 
	`__¡ºcmp_g
 ((
s1
), (
s2
), (
n
)))))

	)

1219 
__STRING_INLINE
 
__¡ºcmp_g
 (cÚ¡ *
__s1
, cÚ¡ *
__s2
,

1220 
size_t
 
__n
);

1222 
__STRING_INLINE
 

1223 
	$__¡ºcmp_g
 (cÚ¡ *
__s1
, cÚ¡ *
__s2
, 
size_t
 
__n
)

1225 
__»s
;

1226 
__asm__
 
__vÞ©e__


1245 : "=q" (
__»s
), "=&r" (
__s1
), "=&r" (
__s2
), "=&r" (
__n
)

1246 : "1" (
__s1
), "2" (
__s2
), "3" (
__n
),

1247 "m" ( *(¡ruù { 
__exnsiÚ__
 
__x
[
__n
]; } *)
__s1
),

1248 "m" ( *(¡ruù { 
__exnsiÚ__
 
__x
[
__n
]; } *)
__s2
)

1250  
__»s
;

1251 
	}
}

1255 
	#_HAVE_STRING_ARCH_¡rchr
 1

	)

1256 
	#_USE_STRING_ARCH_¡rchr
 1

	)

1257 
	#¡rchr
(
s
, 
c
) \

1258 (
	`__exnsiÚ__
 (
	`__but_cÚ¡ªt_p
 (
c
) \

1259 ? ((
c
) == '\0' \

1260 ? (*è
	`__¿wmemchr
 ((
s
), (
c
)) \

1261 : 
	`__¡rchr_c
 ((
s
), ((
c
) & 0xff) << 8)) \

1262 : 
	`__¡rchr_g
 ((
s
), (
c
))))

	)

1264 
__STRING_INLINE
 *
__¡rchr_c
 (cÚ¡ *
__s
, 
__c
);

1266 
__STRING_INLINE
 *

1267 
	$__¡rchr_c
 (cÚ¡ *
__s
, 
__c
)

1269 
__d0
;

1270 *
__»s
;

1271 
__asm__
 
__vÞ©e__


1281 : "ô" (
__»s
), "=&a" (
__d0
)

1282 : "0" (
__s
), "1" (
__c
),

1283 "m" ( *(¡ruù { 
__x
[0xfffffff]; } *)
__s
)

1285  
__»s
;

1286 
	}
}

1288 
__STRING_INLINE
 *
__¡rchr_g
 (cÚ¡ *
__s
, 
__c
);

1290 
__STRING_INLINE
 *

1291 
	$__¡rchr_g
 (cÚ¡ *
__s
, 
__c
)

1293 
__d0
;

1294 *
__»s
;

1295 
__asm__
 
__vÞ©e__


1306 : "ô" (
__»s
), "=&a" (
__d0
)

1307 : "0" (
__s
), "1" (
__c
),

1308 "m" ( *(¡ruù { 
__x
[0xfffffff]; } *)
__s
)

1310  
__»s
;

1311 
	}
}

1315 
	#_HAVE_STRING_ARCH_¡rchºul
 1

	)

1316 
	#__¡rchºul
(
s
, 
c
) \

1317 (
	`__exnsiÚ__
 (
	`__but_cÚ¡ªt_p
 (
c
) \

1318 ? ((
c
) == '\0' \

1319 ? (*è
	`__¿wmemchr
 ((
s
), 
c
) \

1320 : 
	`__¡rchºul_c
 ((
s
), ((
c
) & 0xff) << 8)) \

1321 : 
	`__¡rchºul_g
 ((
s
), 
c
)))

	)

1323 
__STRING_INLINE
 *
__¡rchºul_c
 (cÚ¡ *
__s
, 
__c
);

1325 
__STRING_INLINE
 *

1326 
	$__¡rchºul_c
 (cÚ¡ *
__s
, 
__c
)

1328 
__d0
;

1329 *
__»s
;

1330 
__asm__
 
__vÞ©e__


1340 : "ô" (
__»s
), "=&a" (
__d0
)

1341 : "0" (
__s
), "1" (
__c
),

1342 "m" ( *(¡ruù { 
__x
[0xfffffff]; } *)
__s
)

1344  
__»s
;

1345 
	}
}

1347 
__STRING_INLINE
 *
__¡rchºul_g
 (cÚ¡ *
__s
, 
__c
);

1349 
__STRING_INLINE
 *

1350 
	$__¡rchºul_g
 (cÚ¡ *
__s
, 
__c
)

1352 
__d0
;

1353 *
__»s
;

1354 
__asm__
 
__vÞ©e__


1365 : "ô" (
__»s
), "=&a" (
__d0
)

1366 : "0" (
__s
), "1" (
__c
),

1367 "m" ( *(¡ruù { 
__x
[0xfffffff]; } *)
__s
)

1369  
__»s
;

1370 
	}
}

1371 #ifdeà
__USE_GNU


1372 
	#¡rchºul
(
s
, 
c
è
	`__¡rchºul
 ((s), (c))

	)

1376 #ià
defed
 
__USE_BSD
 || defed 
__USE_XOPEN_EXTENDED


1378 
	#_HAVE_STRING_ARCH_dex
 1

	)

1379 
	#dex
(
s
, 
c
) \

1380 (
	`__exnsiÚ__
 (
	`__but_cÚ¡ªt_p
 (
c
) \

1381 ? 
	`__¡rchr_c
 ((
s
), ((
c
) & 0xff) << 8) \

1382 : 
	`__¡rchr_g
 ((
s
), (
c
))))

	)

1387 
	#_HAVE_STRING_ARCH_¡¼chr
 1

	)

1388 
	#¡¼chr
(
s
, 
c
) \

1389 (
	`__exnsiÚ__
 (
	`__but_cÚ¡ªt_p
 (
c
) \

1390 ? 
	`__¡¼chr_c
 ((
s
), ((
c
) & 0xff) << 8) \

1391 : 
	`__¡¼chr_g
 ((
s
), (
c
))))

	)

1393 #ifdeà
__i686__


1394 
__STRING_INLINE
 *
__¡¼chr_c
 (cÚ¡ *
__s
, 
__c
);

1396 
__STRING_INLINE
 *

1397 
	$__¡¼chr_c
 (cÚ¡ *
__s
, 
__c
)

1399 
__d0
, 
__d1
;

1400 *
__»s
;

1401 
__asm__
 
__vÞ©e__


1409 : "=d" (
__»s
), "=&S" (
__d0
), "=&a" (
__d1
)

1410 : "0" (1), "1" (
__s
), "2" (
__c
),

1411 "m" ( *(¡ruù { 
__x
[0xfffffff]; } *)
__s
)

1413  
__»s
 - 1;

1414 
	}
}

1416 
__STRING_INLINE
 *
__¡¼chr_g
 (cÚ¡ *
__s
, 
__c
);

1418 
__STRING_INLINE
 *

1419 
	$__¡¼chr_g
 (cÚ¡ *
__s
, 
__c
)

1421 
__d0
, 
__d1
;

1422 *
__»s
;

1423 
__asm__
 
__vÞ©e__


1432 : "=d" (
__»s
), "=&S" (
__d0
), "=&a" (
__d1
)

1433 : "0" (1), "1" (
__s
), "2" (
__c
),

1434 "m" ( *(¡ruù { 
__x
[0xfffffff]; } *)
__s
)

1436  
__»s
 - 1;

1437 
	}
}

1439 
__STRING_INLINE
 *
__¡¼chr_c
 (cÚ¡ *
__s
, 
__c
);

1441 
__STRING_INLINE
 *

1442 
	$__¡¼chr_c
 (cÚ¡ *
__s
, 
__c
)

1444 
__d0
, 
__d1
;

1445 *
__»s
;

1446 
__asm__
 
__vÞ©e__


1456 : "=d" (
__»s
), "=&S" (
__d0
), "=&a" (
__d1
)

1457 : "0" (0), "1" (
__s
), "2" (
__c
),

1458 "m" ( *(¡ruù { 
__x
[0xfffffff]; } *)
__s
)

1460  
__»s
;

1461 
	}
}

1463 
__STRING_INLINE
 *
__¡¼chr_g
 (cÚ¡ *
__s
, 
__c
);

1465 
__STRING_INLINE
 *

1466 
	$__¡¼chr_g
 (cÚ¡ *
__s
, 
__c
)

1468 
__d0
, 
__d1
;

1469 *
__»s
;

1470 
__asm__
 
__vÞ©e__


1481 : "ô" (
__»s
), "=&S" (
__d0
), "=&a" (
__d1
)

1482 : "0" (0), "1" (
__s
), "2" (
__c
),

1483 "m" ( *(¡ruù { 
__x
[0xfffffff]; } *)
__s
)

1485  
__»s
;

1486 
	}
}

1490 #ià
defed
 
__USE_BSD
 || defed 
__USE_XOPEN_EXTENDED


1492 
	#_HAVE_STRING_ARCH_rdex
 1

	)

1493 
	#rdex
(
s
, 
c
) \

1494 (
	`__exnsiÚ__
 (
	`__but_cÚ¡ªt_p
 (
c
) \

1495 ? 
	`__¡¼chr_c
 ((
s
), ((
c
) & 0xff) << 8) \

1496 : 
	`__¡¼chr_g
 ((
s
), (
c
))))

	)

1502 
	#_HAVE_STRING_ARCH_¡rc¥n
 1

	)

1503 
	#¡rc¥n
(
s
, 
»jeù
) \

1504 (
	`__exnsiÚ__
 (
	`__but_cÚ¡ªt_p
 (
»jeù
) &&  ((reject)[0]) == 1 \

1505 ? ((
»jeù
)[0] == '\0' \

1506 ? 
	`¡¾
 (
s
) \

1507 : ((
»jeù
)[1] == '\0' \

1508 ? 
	`__¡rc¥n_c1
 ((
s
), (((
»jeù
)[0] << 8) & 0xff00)) \

1509 : 
	`__¡rc¥n_cg
 ((
s
), (
»jeù
), 
	`¡¾
 (reject)))) \

1510 : 
	`__¡rc¥n_g
 ((
s
), (
»jeù
))))

	)

1512 
__STRING_INLINE
 
size_t
 
__¡rc¥n_c1
 (cÚ¡ *
__s
, 
__»jeù
);

1514 #iâdeà
_FORCE_INLINES


1515 
__STRING_INLINE
 
size_t


1516 
	$__¡rc¥n_c1
 (cÚ¡ *
__s
, 
__»jeù
)

1518 
__d0
;

1519 *
__»s
;

1520 
__asm__
 
__vÞ©e__


1529 : "ô" (
__»s
), "=&a" (
__d0
)

1530 : "0" (
__s
), "1" (
__»jeù
),

1531 "m" ( *(¡ruù { 
__x
[0xfffffff]; } *)
__s
)

1533  (
__»s
 - 1è- 
__s
;

1534 
	}
}

1537 
__STRING_INLINE
 
size_t
 
__¡rc¥n_cg
 (cÚ¡ *
__s
, cÚ¡ 
__»jeù
[],

1538 
size_t
 
__»jeù_Ën
);

1540 
__STRING_INLINE
 
size_t


1541 
	$__¡rc¥n_cg
 (cÚ¡ *
__s
, cÚ¡ 
__»jeù
[], 
size_t
 
__»jeù_Ën
)

1543 
__d0
, 
__d1
, 
__d2
;

1544 cÚ¡ *
__»s
;

1545 
__asm__
 
__vÞ©e__


1556 : "=S" (
__»s
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
)

1557 : "0" (
__s
), "d" (
__»jeù
), "g" (
__»jeù_Ën
)

1559  (
__»s
 - 1è- 
__s
;

1560 
	}
}

1562 
__STRING_INLINE
 
size_t
 
__¡rc¥n_g
 (cÚ¡ *
__s
, cÚ¡ *
__»jeù
);

1563 #ifdeà
__PIC__


1565 
__STRING_INLINE
 
size_t


1566 
	$__¡rc¥n_g
 (cÚ¡ *
__s
, cÚ¡ *
__»jeù
)

1568 
__d0
, 
__d1
, 
__d2
;

1569 cÚ¡ *
__»s
;

1570 
__asm__
 
__vÞ©e__


1587 : "=S" (
__»s
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
)

1588 : "r" (
__»jeù
), "0" (
__s
), "1" (0), "2" (0xffffffff)

1590  (
__»s
 - 1è- 
__s
;

1591 
	}
}

1593 
__STRING_INLINE
 
size_t


1594 
	$__¡rc¥n_g
 (cÚ¡ *
__s
, cÚ¡ *
__»jeù
)

1596 
__d0
, 
__d1
, 
__d2
, 
__d3
;

1597 cÚ¡ *
__»s
;

1598 
__asm__
 
__vÞ©e__


1612 : "=S" (
__»s
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
), "=&d" (
__d3
)

1613 : "0" (
__s
), "1" (0), "2" (0xffffffff), "3" (
__»jeù
), "b" (__reject)

1616  (
__»s
 - 1è- 
__s
;

1617 
	}
}

1623 
	#_HAVE_STRING_ARCH_¡r¥n
 1

	)

1624 
	#¡r¥n
(
s
, 
acû±
) \

1625 (
	`__exnsiÚ__
 (
	`__but_cÚ¡ªt_p
 (
acû±
) &&  ((accept)[0]) == 1 \

1626 ? ((
acû±
)[0] == '\0' \

1627 ? ((è(
s
), 0) \

1628 : ((
acû±
)[1] == '\0' \

1629 ? 
	`__¡r¥n_c1
 ((
s
), (((
acû±
)[0] << 8 ) & 0xff00)) \

1630 : 
	`__¡r¥n_cg
 ((
s
), (
acû±
), 
	`¡¾
 (accept)))) \

1631 : 
	`__¡r¥n_g
 ((
s
), (
acû±
))))

	)

1633 #iâdeà
_FORCE_INLINES


1634 
__STRING_INLINE
 
size_t
 
__¡r¥n_c1
 (cÚ¡ *
__s
, 
__acû±
);

1636 
__STRING_INLINE
 
size_t


1637 
	$__¡r¥n_c1
 (cÚ¡ *
__s
, 
__acû±
)

1639 
__d0
;

1640 *
__»s
;

1642 
__asm__
 
__vÞ©e__


1648 : "ô" (
__»s
), "=&q" (
__d0
)

1649 : "0" (
__s
), "1" (
__acû±
),

1650 "m" ( *(¡ruù { 
__x
[0xfffffff]; } *)
__s
)

1652  (
__»s
 - 1è- 
__s
;

1653 
	}
}

1656 
__STRING_INLINE
 
size_t
 
__¡r¥n_cg
 (cÚ¡ *
__s
, cÚ¡ 
__acû±
[],

1657 
size_t
 
__acû±_Ën
);

1659 
__STRING_INLINE
 
size_t


1660 
	$__¡r¥n_cg
 (cÚ¡ *
__s
, cÚ¡ 
__acû±
[], 
size_t
 
__acû±_Ën
)

1662 
__d0
, 
__d1
, 
__d2
;

1663 cÚ¡ *
__»s
;

1664 
__asm__
 
__vÞ©e__


1675 : "=S" (
__»s
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
)

1676 : "0" (
__s
), "g" (
__acû±
), "g" (
__acû±_Ën
),

1679 "m" ( *(¡ruù { 
__x
[0xfffffff]; } *)
__s
),

1680 "m" ( *(¡ruù { 
__exnsiÚ__
 
__x
[
__acû±_Ën
]; } *)
__acû±
)

1682  (
__»s
 - 1è- 
__s
;

1683 
	}
}

1685 
__STRING_INLINE
 
size_t
 
__¡r¥n_g
 (cÚ¡ *
__s
, cÚ¡ *
__acû±
);

1686 #ifdeà
__PIC__


1688 
__STRING_INLINE
 
size_t


1689 
	$__¡r¥n_g
 (cÚ¡ *
__s
, cÚ¡ *
__acû±
)

1691 
__d0
, 
__d1
, 
__d2
;

1692 cÚ¡ *
__»s
;

1693 
__asm__
 
__vÞ©e__


1709 : "=S" (
__»s
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
)

1710 : "d" (
__acû±
), "0" (
__s
), "1" (0), "2" (0xffffffff), "3" (__accept)

1712  (
__»s
 - 1è- 
__s
;

1713 
	}
}

1715 
__STRING_INLINE
 
size_t


1716 
	$__¡r¥n_g
 (cÚ¡ *
__s
, cÚ¡ *
__acû±
)

1718 
__d0
, 
__d1
, 
__d2
, 
__d3
;

1719 cÚ¡ *
__»s
;

1720 
__asm__
 
__vÞ©e__


1734 : "=S" (
__»s
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
), "=&d" (
__d3
)

1735 : "0" (
__s
), "1" (0), "2" (0xffffffff), "3" (
__acû±
), "b" (__accept)

1737  (
__»s
 - 1è- 
__s
;

1738 
	}
}

1743 
	#_HAVE_STRING_ARCH_¡½brk
 1

	)

1744 
	#¡½brk
(
s
, 
acû±
) \

1745 (
	`__exnsiÚ__
 (
	`__but_cÚ¡ªt_p
 (
acû±
) &&  ((accept)[0]) == 1 \

1746 ? ((
acû±
)[0] == '\0' \

1747 ? ((è(
s
), (*) 0) \

1748 : ((
acû±
)[1] == '\0' \

1749 ? 
	`¡rchr
 ((
s
), (
acû±
)[0]) \

1750 : 
	`__¡½brk_cg
 ((
s
), (
acû±
), 
	`¡¾
 (accept)))) \

1751 : 
	`__¡½brk_g
 ((
s
), (
acû±
))))

	)

1753 
__STRING_INLINE
 *
__¡½brk_cg
 (cÚ¡ *
__s
, cÚ¡ 
__acû±
[],

1754 
size_t
 
__acû±_Ën
);

1756 
__STRING_INLINE
 *

1757 
	$__¡½brk_cg
 (cÚ¡ *
__s
, cÚ¡ 
__acû±
[], 
size_t
 
__acû±_Ën
)

1759 
__d0
, 
__d1
, 
__d2
;

1760 *
__»s
;

1761 
__asm__
 
__vÞ©e__


1776 : "=S" (
__»s
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
)

1777 : "0" (
__s
), "d" (
__acû±
), "g" (
__acû±_Ën
)

1779  
__»s
;

1780 
	}
}

1782 
__STRING_INLINE
 *
__¡½brk_g
 (cÚ¡ *
__s
, cÚ¡ *
__acû±
);

1783 #ifdeà
__PIC__


1785 
__STRING_INLINE
 *

1786 
	$__¡½brk_g
 (cÚ¡ *
__s
, cÚ¡ *
__acû±
)

1788 
__d0
, 
__d1
, 
__d2
;

1789 *
__»s
;

1790 
__asm__
 
__vÞ©e__


1811 : "=S" (
__»s
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
)

1812 : "d" (
__acû±
), "0" (
__s
), "1" (0), "2" (0xffffffff)

1814  
__»s
;

1815 
	}
}

1817 
__STRING_INLINE
 *

1818 
	$__¡½brk_g
 (cÚ¡ *
__s
, cÚ¡ *
__acû±
)

1820 
__d0
, 
__d1
, 
__d2
, 
__d3
;

1821 *
__»s
;

1822 
__asm__
 
__vÞ©e__


1841 : "=S" (
__»s
), "=&a" (
__d0
), "=&c" (
__d1
), "=&d" (
__d2
), "=&D" (
__d3
)

1842 : "0" (
__s
), "1" (0), "2" (0xffffffff), "b" (
__acû±
)

1844  
__»s
;

1845 
	}
}

1850 
	#_HAVE_STRING_ARCH_¡r¡r
 1

	)

1851 
	#¡r¡r
(
hay¡ack
, 
ÃedË
) \

1852 (
	`__exnsiÚ__
 (
	`__but_cÚ¡ªt_p
 (
ÃedË
) &&  ((needle)[0]) == 1 \

1853 ? ((
ÃedË
)[0] == '\0' \

1854 ? (
hay¡ack
) \

1855 : ((
ÃedË
)[1] == '\0' \

1856 ? 
	`¡rchr
 ((
hay¡ack
), (
ÃedË
)[0]) \

1857 : 
	`__¡r¡r_cg
 ((
hay¡ack
), (
ÃedË
), \

1858 
	`¡¾
 (
ÃedË
)))) \

1859 : 
	`__¡r¡r_g
 ((
hay¡ack
), (
ÃedË
))))

	)

1863 
__STRING_INLINE
 *
__¡r¡r_cg
 (cÚ¡ *
__hay¡ack
,

1864 cÚ¡ 
__ÃedË
[],

1865 
size_t
 
__ÃedË_Ën
);

1867 
__STRING_INLINE
 *

1868 
	$__¡r¡r_cg
 (cÚ¡ *
__hay¡ack
, cÚ¡ 
__ÃedË
[],

1869 
size_t
 
__ÃedË_Ën
)

1871 
__d0
, 
__d1
, 
__d2
;

1872 *
__»s
;

1873 
__asm__
 
__vÞ©e__


1886 : "=&a" (
__»s
), "=&S" (
__d0
), "=&D" (
__d1
), "=&c" (
__d2
)

1887 : "g" (
__ÃedË_Ën
), "1" (
__hay¡ack
), "d" (
__ÃedË
)

1889  
__»s
;

1890 
	}
}

1892 
__STRING_INLINE
 *
__¡r¡r_g
 (cÚ¡ *
__hay¡ack
,

1893 cÚ¡ *
__ÃedË
);

1894 #ifdeà
__PIC__


1896 
__STRING_INLINE
 *

1897 
	$__¡r¡r_g
 (cÚ¡ *
__hay¡ack
, cÚ¡ *
__ÃedË
)

1899 
__d0
, 
__d1
, 
__d2
;

1900 *
__»s
;

1901 
__asm__
 
__vÞ©e__


1920 : "=&a" (
__»s
), "=&c" (
__d0
), "=&S" (
__d1
), "=&D" (
__d2
)

1921 : "0" (0), "1" (0xffffffff), "2" (
__hay¡ack
), "3" (
__ÃedË
),

1922 "d" (
__ÃedË
)

1924  
__»s
;

1925 
	}
}

1927 
__STRING_INLINE
 *

1928 
	$__¡r¡r_g
 (cÚ¡ *
__hay¡ack
, cÚ¡ *
__ÃedË
)

1930 
__d0
, 
__d1
, 
__d2
, 
__d3
;

1931 *
__»s
;

1932 
__asm__
 
__vÞ©e__


1949 : "=&a" (
__»s
), "=&c" (
__d0
), "=&S" (
__d1
), "=&D" (
__d2
), "=&d" (
__d3
)

1950 : "0" (0), "1" (0xffffffff), "2" (
__hay¡ack
), "3" (
__ÃedË
),

1951 "b" (
__ÃedË
)

1953  
__»s
;

1954 
	}
}

1960 #ià
defed
 
__USE_BSD
 || defed 
__USE_XOPEN_EXTENDED


1961 #ifdeà
__i686__


1962 
	#_HAVE_STRING_ARCH_ffs
 1

	)

1963 
	#ffs
(
wÜd
è(
	`__but_cÚ¡ªt_p
 (word) \

1964 ? 
	`__but_ffs
 (
wÜd
) \

1965 : ({ 
__út
, 
__tmp
; \

1966 
__asm__
 
__vÞ©e__
 \

1969 : "=&r" (
__út
), "ô" (
__tmp
) \

1970 : "rm" (
wÜd
), "1" (-1)); \

1971 
__út
 + 1; }))

	)

1973 #iâdeà
ff¦


1974 
	#ff¦
(
wÜd
è
	`ffs
(wÜd)

	)

1979 #iâdeà
_FORCE_INLINES


1980 #undeà
__STRING_INLINE


	@/usr/include/bits/string2.h

20 #iâdeà
_STRING_H


24 #iâdeà
__NO_STRING_INLINES


41 #iâdeà
__STRING_INLINE


42 #ifdeà
__ýlu¥lus


43 
	#__STRING_INLINE
 
le


	)

45 
	#__STRING_INLINE
 
__exº_le


	)

49 #ià
_STRING_ARCH_uÇligÃd


51 
	~<dn.h
>

52 
	~<bs/ty³s.h
>

54 #ià
__BYTE_ORDER
 =ð
__LITTLE_ENDIAN


55 
	#__STRING2_SMALL_GET16
(
¤c
, 
idx
) \

56 (((cÚ¡ *è(cÚ¡ *è(
¤c
))[
idx
 + 1] << 8 \

57 | ((cÚ¡ *è(cÚ¡ *è(
¤c
))[
idx
])

	)

58 
	#__STRING2_SMALL_GET32
(
¤c
, 
idx
) \

59 (((((cÚ¡ *è(cÚ¡ *è(
¤c
))[
idx
 + 3] << 8 \

60 | ((cÚ¡ *è(cÚ¡ *è(
¤c
))[
idx
 + 2]) << 8 \

61 | ((cÚ¡ *è(cÚ¡ *è(
¤c
))[
idx
 + 1]) << 8 \

62 | ((cÚ¡ *è(cÚ¡ *è(
¤c
))[
idx
])

	)

64 
	#__STRING2_SMALL_GET16
(
¤c
, 
idx
) \

65 (((cÚ¡ *è(cÚ¡ *è(
¤c
))[
idx
] << 8 \

66 | ((cÚ¡ *è(cÚ¡ *è(
¤c
))[
idx
 + 1])

	)

67 
	#__STRING2_SMALL_GET32
(
¤c
, 
idx
) \

68 (((((cÚ¡ *è(cÚ¡ *è(
¤c
))[
idx
] << 8 \

69 | ((cÚ¡ *è(cÚ¡ *è(
¤c
))[
idx
 + 1]) << 8 \

70 | ((cÚ¡ *è(cÚ¡ *è(
¤c
))[
idx
 + 2]) << 8 \

71 | ((cÚ¡ *è(cÚ¡ *è(
¤c
))[
idx
 + 3])

	)

76 
	#__STRING2_COPY_TYPE
(
N
) \

77 ¡ruù { 
__¬r
[
N
]; } \

78 
	t__©ibu__
 ((
	t__·cked__
)è
	t__STRING2_COPY_ARR
##
	tN


	)

79 
	t__STRING2_COPY_TYPE
 (2);

80 
__STRING2_COPY_TYPE
 (3);

81 
__STRING2_COPY_TYPE
 (4);

82 
__STRING2_COPY_TYPE
 (5);

83 
__STRING2_COPY_TYPE
 (6);

84 
__STRING2_COPY_TYPE
 (7);

85 
__STRING2_COPY_TYPE
 (8);

86 #undeà
__STRING2_COPY_TYPE


92 
	#__¡rg2_1b±r_p
(
__x
) \

93 ((
size_t
)(cÚ¡ *)((
__x
è+ 1è- (size_t)(cÚ¡ *)(__xè=ð1)

	)

96 #ià!
defed
 
_HAVE_STRING_ARCH_mem£t


97 #ià!
__GNUC_PREREQ
 (3, 0)

98 #ià
_STRING_ARCH_uÇligÃd


99 
	#mem£t
(
s
, 
c
, 
n
) \

100 (
	`__exnsiÚ__
 (
	`__but_cÚ¡ªt_p
 (
n
) && (n) <= 16 \

101 ? ((
n
) == 1 \

102 ? 
	`__mem£t_1
 (
s
, 
c
) \

103 : 
	`__mem£t_gc
 (
s
, 
c
, 
n
)) \

104 : (
	`__but_cÚ¡ªt_p
 (
c
) && (c) == '\0' \

105 ? ({ *
__s
 = (
s
); 
	`__bzo
 (__s, 
n
); __s; }) \

106 : 
	`mem£t
 (
s
, 
c
, 
n
))))

	)

108 
	#__mem£t_1
(
s
, 
c
è({ *
__s
 = (s); \

109 *((
__ut8_t
 *è
__s
èð(__ut8_tè
c
; __s; })

	)

111 
	#__mem£t_gc
(
s
, 
c
, 
n
) \

112 ({ *
__s
 = (
s
); \

114 
__ui
; \

115 
__usi
; \

116 
__uc
; \

117 } *
__u
 = 
__s
; \

118 
__ut8_t
 
__c
 = (__ut8_tè(
c
); \

121 (è(
n
)) \

124 
__u
->
__ui
 = 
__c
 * 0x01010101; \

125 
__u
 = 
	`__exnsiÚ__
 ((*) __u + 4); \

127 
__u
->
__ui
 = 
__c
 * 0x01010101; \

128 
__u
 = 
	`__exnsiÚ__
 ((*) __u + 4); \

130 
__u
->
__ui
 = 
__c
 * 0x01010101; \

131 
__u
 = 
	`__exnsiÚ__
 ((*) __u + 4); \

133 
__u
->
__usi
 = (è
__c
 * 0x0101; \

134 
__u
 = 
	`__exnsiÚ__
 ((*) __u + 2); \

135 
__u
->
__uc
 = (è
__c
; \

139 
__u
->
__ui
 = 
__c
 * 0x01010101; \

140 
__u
 = 
	`__exnsiÚ__
 ((*) __u + 4); \

142 
__u
->
__ui
 = 
__c
 * 0x01010101; \

143 
__u
 = 
	`__exnsiÚ__
 ((*) __u + 4); \

145 
__u
->
__ui
 = 
__c
 * 0x01010101; \

146 
__u
 = 
	`__exnsiÚ__
 ((*) __u + 4); \

148 
__u
->
__usi
 = (è
__c
 * 0x0101; \

152 
__u
->
__ui
 = 
__c
 * 0x01010101; \

153 
__u
 = 
	`__exnsiÚ__
 ((*) __u + 4); \

155 
__u
->
__ui
 = 
__c
 * 0x01010101; \

156 
__u
 = 
	`__exnsiÚ__
 ((*) __u + 4); \

158 
__u
->
__ui
 = 
__c
 * 0x01010101; \

159 
__u
 = 
	`__exnsiÚ__
 ((*) __u + 4); \

161 
__u
->
__uc
 = (è
__c
; \

165 
__u
->
__ui
 = 
__c
 * 0x01010101; \

166 
__u
 = 
	`__exnsiÚ__
 ((*) __u + 4); \

168 
__u
->
__ui
 = 
__c
 * 0x01010101; \

169 
__u
 = 
	`__exnsiÚ__
 ((*) __u + 4); \

171 
__u
->
__ui
 = 
__c
 * 0x01010101; \

172 
__u
 = 
	`__exnsiÚ__
 ((*) __u + 4); \

174 
__u
->
__ui
 = 
__c
 * 0x01010101; \

179 
__s
; })

	)

181 
	#mem£t
(
s
, 
c
, 
n
) \

182 (
	`__exnsiÚ__
 (
	`__but_cÚ¡ªt_p
 (
c
) && (c) == '\0' \

183 ? ({ *
__s
 = (
s
); 
	`__bzo
 (__s, 
n
); __s; }) \

184 : 
	`mem£t
 (
s
, 
c
, 
n
)))

	)

193 #ià
__GNUC_PREREQ
 (2, 91)

194 
	#__bzo
(
s
, 
n
è
	`__but_mem£t
 (s, '\0',)

	)

202 #ifdeà
__USE_GNU


203 #ià!
defed
 
_HAVE_STRING_ARCH_mempýy
 || defed 
_FORCE_INLINES


204 #iâdeà
_HAVE_STRING_ARCH_mempýy


205 #ià
__GNUC_PREREQ
 (3, 4)

206 
	#__mempýy
(
de¡
, 
¤c
, 
n
è
	`__but_mempýy
 (de¡, src,)

	)

207 #ià
__GNUC_PREREQ
 (3, 0)

208 
	#__mempýy
(
de¡
, 
¤c
, 
n
) \

209 (
	`__exnsiÚ__
 (
	`__but_cÚ¡ªt_p
 (
¤c
è&& __but_cÚ¡ªt_°(
n
) \

210 && 
	`__¡rg2_1b±r_p
 (
¤c
è&& 
n
 <= 8 \

211 ? 
	`__but_memýy
 (
de¡
, 
¤c
, 
n
) + (n) \

212 : 
	`__mempýy
 (
de¡
, 
¤c
, 
n
)))

	)

214 
	#__mempýy
(
de¡
, 
¤c
, 
n
) \

215 (
	`__exnsiÚ__
 (
	`__but_cÚ¡ªt_p
 (
¤c
è&& __but_cÚ¡ªt_°(
n
) \

216 && 
	`__¡rg2_1b±r_p
 (
¤c
è&& 
n
 <= 8 \

217 ? 
	`__mempýy_sm®l
 (
de¡
, 
	`__mempýy_¬gs
 (
¤c
), 
n
) \

218 : 
	`__mempýy
 (
de¡
, 
¤c
, 
n
)))

	)

222 
	#mempýy
(
de¡
, 
¤c
, 
n
è
	`__mempýy
 (de¡, src,)

	)

225 #ià!
__GNUC_PREREQ
 (3, 0è|| 
defed
 
_FORCE_INLINES


226 #ià
_STRING_ARCH_uÇligÃd


227 #iâdeà
_FORCE_INLINES


228 
	#__mempýy_¬gs
(
¤c
) \

229 ((cÚ¡ *è(
¤c
))[0], ((const *) (src))[2], \

230 ((cÚ¡ *è(
¤c
))[4], ((const *) (src))[6], \

231 
__exnsiÚ__
 
	`__STRING2_SMALL_GET16
 (
¤c
, 0), \

232 
__exnsiÚ__
 
	`__STRING2_SMALL_GET16
 (
¤c
, 4), \

233 
__exnsiÚ__
 
	`__STRING2_SMALL_GET32
 (
¤c
, 0), \

234 
__exnsiÚ__
 
	`__STRING2_SMALL_GET32
 (
¤c
, 4)

	)

236 
__STRING_INLINE
 *
__mempýy_sm®l
 (*, , , , ,

237 
__ut16_t
, __ut16_t, 
__ut32_t
,

238 
__ut32_t
, 
size_t
);

239 
__STRING_INLINE
 *

240 
	$__mempýy_sm®l
 (*
__de¡1
,

241 
__¤c0_1
, 
__¤c2_1
, 
__¤c4_1
, 
__¤c6_1
,

242 
__ut16_t
 
__¤c0_2
, __ut16_
__¤c4_2
,

243 
__ut32_t
 
__¤c0_4
, __ut32_
__¤c4_4
,

244 
size_t
 
__¤þ
)

247 
__ut32_t
 
__ui
;

248 
__ut16_t
 
__usi
;

249 
__uc
;

250 
__c
;

251 } *
__u
 = 
__de¡1
;

252 (è
__¤þ
)

255 
__u
->
__c
 = 
__¤c0_1
;

256 
__u
 = 
	`__exnsiÚ__
 ((*) __u + 1);

259 
__u
->
__usi
 = 
__¤c0_2
;

260 
__u
 = 
	`__exnsiÚ__
 ((*) __u + 2);

263 
__u
->
__usi
 = 
__¤c0_2
;

264 
__u
 = 
	`__exnsiÚ__
 ((*) __u + 2);

265 
__u
->
__c
 = 
__¤c2_1
;

266 
__u
 = 
	`__exnsiÚ__
 ((*) __u + 1);

269 
__u
->
__ui
 = 
__¤c0_4
;

270 
__u
 = 
	`__exnsiÚ__
 ((*) __u + 4);

273 
__u
->
__ui
 = 
__¤c0_4
;

274 
__u
 = 
	`__exnsiÚ__
 ((*) __u + 4);

275 
__u
->
__c
 = 
__¤c4_1
;

276 
__u
 = 
	`__exnsiÚ__
 ((*) __u + 1);

279 
__u
->
__ui
 = 
__¤c0_4
;

280 
__u
 = 
	`__exnsiÚ__
 ((*) __u + 4);

281 
__u
->
__usi
 = 
__¤c4_2
;

282 
__u
 = 
	`__exnsiÚ__
 ((*) __u + 2);

285 
__u
->
__ui
 = 
__¤c0_4
;

286 
__u
 = 
	`__exnsiÚ__
 ((*) __u + 4);

287 
__u
->
__usi
 = 
__¤c4_2
;

288 
__u
 = 
	`__exnsiÚ__
 ((*) __u + 2);

289 
__u
->
__c
 = 
__¤c6_1
;

290 
__u
 = 
	`__exnsiÚ__
 ((*) __u + 1);

293 
__u
->
__ui
 = 
__¤c0_4
;

294 
__u
 = 
	`__exnsiÚ__
 ((*) __u + 4);

295 
__u
->
__ui
 = 
__¤c4_4
;

296 
__u
 = 
	`__exnsiÚ__
 ((*) __u + 4);

299  (*è
__u
;

300 
	}
}

302 #iâdeà
_FORCE_INLINES


303 
	#__mempýy_¬gs
(
¤c
) \

304 ((cÚ¡ *è(
¤c
))[0], \

305 
	`__exnsiÚ__
 ((
__STRING2_COPY_ARR2
) \

306 { { ((cÚ¡ *è(
¤c
))[0], ((const *) (src))[1] } }), \

307 
	`__exnsiÚ__
 ((
__STRING2_COPY_ARR3
) \

308 { { ((cÚ¡ *è(
¤c
))[0], ((const *) (src))[1], \

309 ((cÚ¡ *è(
¤c
))[2] } }), \

310 
	`__exnsiÚ__
 ((
__STRING2_COPY_ARR4
) \

311 { { ((cÚ¡ *è(
¤c
))[0], ((const *) (src))[1], \

312 ((cÚ¡ *è(
¤c
))[2], ((const *) (src))[3] } }), \

313 
	`__exnsiÚ__
 ((
__STRING2_COPY_ARR5
) \

314 { { ((cÚ¡ *è(
¤c
))[0], ((const *) (src))[1], \

315 ((cÚ¡ *è(
¤c
))[2], ((const *) (src))[3], \

316 ((cÚ¡ *è(
¤c
))[4] } }), \

317 
	`__exnsiÚ__
 ((
__STRING2_COPY_ARR6
) \

318 { { ((cÚ¡ *è(
¤c
))[0], ((const *) (src))[1], \

319 ((cÚ¡ *è(
¤c
))[2], ((const *) (src))[3], \

320 ((cÚ¡ *è(
¤c
))[4], ((const *) (src))[5] } }), \

321 
	`__exnsiÚ__
 ((
__STRING2_COPY_ARR7
) \

322 { { ((cÚ¡ *è(
¤c
))[0], ((const *) (src))[1], \

323 ((cÚ¡ *è(
¤c
))[2], ((const *) (src))[3], \

324 ((cÚ¡ *è(
¤c
))[4], ((const *) (src))[5], \

325 ((cÚ¡ *è(
¤c
))[6] } }), \

326 
	`__exnsiÚ__
 ((
__STRING2_COPY_ARR8
) \

327 { { ((cÚ¡ *è(
¤c
))[0], ((const *) (src))[1], \

328 ((cÚ¡ *è(
¤c
))[2], ((const *) (src))[3], \

329 ((cÚ¡ *è(
¤c
))[4], ((const *) (src))[5], \

330 ((cÚ¡ *è(
¤c
))[6], ((cÚ¡ *è(¤c))[7] } })

	)

332 
__STRING_INLINE
 *
__mempýy_sm®l
 (*, , 
__STRING2_COPY_ARR2
,

333 
__STRING2_COPY_ARR3
,

334 
__STRING2_COPY_ARR4
,

335 
__STRING2_COPY_ARR5
,

336 
__STRING2_COPY_ARR6
,

337 
__STRING2_COPY_ARR7
,

338 
__STRING2_COPY_ARR8
, 
size_t
);

339 
__STRING_INLINE
 *

340 
	$__mempýy_sm®l
 (*
__de¡
, 
__¤c1
,

341 
__STRING2_COPY_ARR2
 
__¤c2
, 
__STRING2_COPY_ARR3
 
__¤c3
,

342 
__STRING2_COPY_ARR4
 
__¤c4
, 
__STRING2_COPY_ARR5
 
__¤c5
,

343 
__STRING2_COPY_ARR6
 
__¤c6
, 
__STRING2_COPY_ARR7
 
__¤c7
,

344 
__STRING2_COPY_ARR8
 
__¤c8
, 
size_t
 
__¤þ
)

347 
__c
;

348 
__STRING2_COPY_ARR2
 
__sÿ2
;

349 
__STRING2_COPY_ARR3
 
__sÿ3
;

350 
__STRING2_COPY_ARR4
 
__sÿ4
;

351 
__STRING2_COPY_ARR5
 
__sÿ5
;

352 
__STRING2_COPY_ARR6
 
__sÿ6
;

353 
__STRING2_COPY_ARR7
 
__sÿ7
;

354 
__STRING2_COPY_ARR8
 
__sÿ8
;

355 } *
__u
 = 
__de¡
;

356 (è
__¤þ
)

359 
__u
->
__c
 = 
__¤c1
;

362 
__exnsiÚ__
 
__u
->
__sÿ2
 = 
__¤c2
;

365 
__exnsiÚ__
 
__u
->
__sÿ3
 = 
__¤c3
;

368 
__exnsiÚ__
 
__u
->
__sÿ4
 = 
__¤c4
;

371 
__exnsiÚ__
 
__u
->
__sÿ5
 = 
__¤c5
;

374 
__exnsiÚ__
 
__u
->
__sÿ6
 = 
__¤c6
;

377 
__exnsiÚ__
 
__u
->
__sÿ7
 = 
__¤c7
;

380 
__exnsiÚ__
 
__u
->
__sÿ8
 = 
__¤c8
;

383  
	`__exnsiÚ__
 ((*è
__u
 + 
__¤þ
);

384 
	}
}

392 #iâdeà
_HAVE_STRING_ARCH_¡rchr


393 *
__¿wmemchr
 (cÚ¡ *
__s
, 
__c
);

394 #ià
__GNUC_PREREQ
 (3, 2)

395 
	#¡rchr
(
s
, 
c
) \

396 (
	`__exnsiÚ__
 (
	`__but_cÚ¡ªt_p
 (
c
è&& !__but_cÚ¡ªt_°(
s
) \

397 && (
c
) == '\0' \

398 ? (*è
	`__¿wmemchr
 (
s
, 
c
) \

399 : 
	`__but_¡rchr
 (
s
, 
c
)))

	)

401 
	#¡rchr
(
s
, 
c
) \

402 (
	`__exnsiÚ__
 (
	`__but_cÚ¡ªt_p
 (
c
) && (c) == '\0' \

403 ? (*è
	`__¿wmemchr
 (
s
, 
c
) \

404 : 
	`¡rchr
 (
s
, 
c
)))

	)

410 #ià(!
defed
 
_HAVE_STRING_ARCH_¡rýy
 && !
__GNUC_PREREQ
 (3, 0)) \

411 || 
defed
 
	g_FORCE_INLINES


412 #ià!
defed
 
_HAVE_STRING_ARCH_¡rýy
 && !
__GNUC_PREREQ
 (3, 0)

413 
	#¡rýy
(
de¡
, 
¤c
) \

414 (
	`__exnsiÚ__
 (
	`__but_cÚ¡ªt_p
 (
¤c
) \

415 ? (
	`__¡rg2_1b±r_p
 (
¤c
è&& 
	`¡¾
 (src) + 1 <= 8 \

416 ? 
	`__¡rýy_sm®l
 (
de¡
, 
	`__¡rýy_¬gs
 (
¤c
), \

417 
	`¡¾
 (
¤c
) + 1) \

418 : (*è
	`memýy
 (
de¡
, 
¤c
, 
	`¡¾
 (src) + 1)) \

419 : 
	`¡rýy
 (
de¡
, 
¤c
)))

	)

422 #ià
_STRING_ARCH_uÇligÃd


423 #iâdeà
_FORCE_INLINES


424 
	#__¡rýy_¬gs
(
¤c
) \

425 
__exnsiÚ__
 
	`__STRING2_SMALL_GET16
 (
¤c
, 0), \

426 
__exnsiÚ__
 
	`__STRING2_SMALL_GET16
 (
¤c
, 4), \

427 
__exnsiÚ__
 
	`__STRING2_SMALL_GET32
 (
¤c
, 0), \

428 
__exnsiÚ__
 
	`__STRING2_SMALL_GET32
 (
¤c
, 4)

	)

430 
__STRING_INLINE
 *
__¡rýy_sm®l
 (*, 
__ut16_t
, __uint16_t,

431 
__ut32_t
, __ut32_t, 
size_t
);

432 
__STRING_INLINE
 *

433 
	$__¡rýy_sm®l
 (*
__de¡
,

434 
__ut16_t
 
__¤c0_2
, __ut16_
__¤c4_2
,

435 
__ut32_t
 
__¤c0_4
, __ut32_
__¤c4_4
,

436 
size_t
 
__¤þ
)

439 
__ut32_t
 
__ui
;

440 
__ut16_t
 
__usi
;

441 
__uc
;

442 } *
__u
 = (*è
__de¡
;

443 (è
__¤þ
)

446 
__u
->
__uc
 = '\0';

449 
__u
->
__usi
 = 
__¤c0_2
;

452 
__u
->
__usi
 = 
__¤c0_2
;

453 
__u
 = 
	`__exnsiÚ__
 ((*) __u + 2);

454 
__u
->
__uc
 = '\0';

457 
__u
->
__ui
 = 
__¤c0_4
;

460 
__u
->
__ui
 = 
__¤c0_4
;

461 
__u
 = 
	`__exnsiÚ__
 ((*) __u + 4);

462 
__u
->
__uc
 = '\0';

465 
__u
->
__ui
 = 
__¤c0_4
;

466 
__u
 = 
	`__exnsiÚ__
 ((*) __u + 4);

467 
__u
->
__usi
 = 
__¤c4_2
;

470 
__u
->
__ui
 = 
__¤c0_4
;

471 
__u
 = 
	`__exnsiÚ__
 ((*) __u + 4);

472 
__u
->
__usi
 = 
__¤c4_2
;

473 
__u
 = 
	`__exnsiÚ__
 ((*) __u + 2);

474 
__u
->
__uc
 = '\0';

477 
__u
->
__ui
 = 
__¤c0_4
;

478 
__u
 = 
	`__exnsiÚ__
 ((*) __u + 4);

479 
__u
->
__ui
 = 
__¤c4_4
;

482  
__de¡
;

483 
	}
}

485 #iâdeà
_FORCE_INLINES


486 
	#__¡rýy_¬gs
(
¤c
) \

487 
	`__exnsiÚ__
 ((
__STRING2_COPY_ARR2
) \

488 { { ((cÚ¡ *è(
¤c
))[0], '\0' } }), \

489 
	`__exnsiÚ__
 ((
__STRING2_COPY_ARR3
) \

490 { { ((cÚ¡ *è(
¤c
))[0], ((const *) (src))[1], \

492 
	`__exnsiÚ__
 ((
__STRING2_COPY_ARR4
) \

493 { { ((cÚ¡ *è(
¤c
))[0], ((const *) (src))[1], \

494 ((cÚ¡ *è(
¤c
))[2], '\0' } }), \

495 
	`__exnsiÚ__
 ((
__STRING2_COPY_ARR5
) \

496 { { ((cÚ¡ *è(
¤c
))[0], ((const *) (src))[1], \

497 ((cÚ¡ *è(
¤c
))[2], ((const *) (src))[3], \

499 
	`__exnsiÚ__
 ((
__STRING2_COPY_ARR6
) \

500 { { ((cÚ¡ *è(
¤c
))[0], ((const *) (src))[1], \

501 ((cÚ¡ *è(
¤c
))[2], ((const *) (src))[3], \

502 ((cÚ¡ *è(
¤c
))[4], '\0' } }), \

503 
	`__exnsiÚ__
 ((
__STRING2_COPY_ARR7
) \

504 { { ((cÚ¡ *è(
¤c
))[0], ((const *) (src))[1], \

505 ((cÚ¡ *è(
¤c
))[2], ((const *) (src))[3], \

506 ((cÚ¡ *è(
¤c
))[4], ((const *) (src))[5], \

508 
	`__exnsiÚ__
 ((
__STRING2_COPY_ARR8
) \

509 { { ((cÚ¡ *è(
¤c
))[0], ((const *) (src))[1], \

510 ((cÚ¡ *è(
¤c
))[2], ((const *) (src))[3], \

511 ((cÚ¡ *è(
¤c
))[4], ((const *) (src))[5], \

512 ((cÚ¡ *è(
¤c
))[6], '\0' } })

	)

514 
__STRING_INLINE
 *
__¡rýy_sm®l
 (*, 
__STRING2_COPY_ARR2
,

515 
__STRING2_COPY_ARR3
,

516 
__STRING2_COPY_ARR4
,

517 
__STRING2_COPY_ARR5
,

518 
__STRING2_COPY_ARR6
,

519 
__STRING2_COPY_ARR7
,

520 
__STRING2_COPY_ARR8
, 
size_t
);

521 
__STRING_INLINE
 *

522 
	$__¡rýy_sm®l
 (*
__de¡
,

523 
__STRING2_COPY_ARR2
 
__¤c2
, 
__STRING2_COPY_ARR3
 
__¤c3
,

524 
__STRING2_COPY_ARR4
 
__¤c4
, 
__STRING2_COPY_ARR5
 
__¤c5
,

525 
__STRING2_COPY_ARR6
 
__¤c6
, 
__STRING2_COPY_ARR7
 
__¤c7
,

526 
__STRING2_COPY_ARR8
 
__¤c8
, 
size_t
 
__¤þ
)

529 
__c
;

530 
__STRING2_COPY_ARR2
 
__sÿ2
;

531 
__STRING2_COPY_ARR3
 
__sÿ3
;

532 
__STRING2_COPY_ARR4
 
__sÿ4
;

533 
__STRING2_COPY_ARR5
 
__sÿ5
;

534 
__STRING2_COPY_ARR6
 
__sÿ6
;

535 
__STRING2_COPY_ARR7
 
__sÿ7
;

536 
__STRING2_COPY_ARR8
 
__sÿ8
;

537 } *
__u
 = (*è
__de¡
;

538 (è
__¤þ
)

541 
__u
->
__c
 = '\0';

544 
__exnsiÚ__
 
__u
->
__sÿ2
 = 
__¤c2
;

547 
__exnsiÚ__
 
__u
->
__sÿ3
 = 
__¤c3
;

550 
__exnsiÚ__
 
__u
->
__sÿ4
 = 
__¤c4
;

553 
__exnsiÚ__
 
__u
->
__sÿ5
 = 
__¤c5
;

556 
__exnsiÚ__
 
__u
->
__sÿ6
 = 
__¤c6
;

559 
__exnsiÚ__
 
__u
->
__sÿ7
 = 
__¤c7
;

562 
__exnsiÚ__
 
__u
->
__sÿ8
 = 
__¤c8
;

565  
__de¡
;

566 
	}
}

572 #ifdeà
__USE_GNU


573 #ià!
defed
 
_HAVE_STRING_ARCH_¡pýy
 || defed 
_FORCE_INLINES


574 #iâdeà
_HAVE_STRING_ARCH_¡pýy


575 #ià
__GNUC_PREREQ
 (3, 4)

576 
	#__¡pýy
(
de¡
, 
¤c
è
	`__but_¡pýy
 (de¡, src)

	)

577 #ià
__GNUC_PREREQ
 (3, 0)

578 
	#__¡pýy
(
de¡
, 
¤c
) \

579 (
	`__exnsiÚ__
 (
	`__but_cÚ¡ªt_p
 (
¤c
) \

580 ? (
	`__¡rg2_1b±r_p
 (
¤c
è&& 
	`¡¾
 (src) + 1 <= 8 \

581 ? 
	`__but_¡rýy
 (
de¡
, 
¤c
è+ 
	`¡¾
 (src) \

582 : ((*è(
__mempýy
è(
de¡
, 
¤c
, 
	`¡¾
 (src) + 1) \

584 : 
	`__¡pýy
 (
de¡
, 
¤c
)))

	)

586 
	#__¡pýy
(
de¡
, 
¤c
) \

587 (
	`__exnsiÚ__
 (
	`__but_cÚ¡ªt_p
 (
¤c
) \

588 ? (
	`__¡rg2_1b±r_p
 (
¤c
è&& 
	`¡¾
 (src) + 1 <= 8 \

589 ? 
	`__¡pýy_sm®l
 (
de¡
, 
	`__¡pýy_¬gs
 (
¤c
), \

590 
	`¡¾
 (
¤c
) + 1) \

591 : ((*è(
__mempýy
è(
de¡
, 
¤c
, 
	`¡¾
 (src) + 1) \

593 : 
	`__¡pýy
 (
de¡
, 
¤c
)))

	)

597 
	#¡pýy
(
de¡
, 
¤c
è
	`__¡pýy
 (de¡, src)

	)

600 #ià!
__GNUC_PREREQ
 (3, 0è|| 
defed
 
_FORCE_INLINES


601 #ià
_STRING_ARCH_uÇligÃd


602 #iâdeà
_FORCE_INLINES


603 
	#__¡pýy_¬gs
(
¤c
) \

604 
__exnsiÚ__
 
	`__STRING2_SMALL_GET16
 (
¤c
, 0), \

605 
__exnsiÚ__
 
	`__STRING2_SMALL_GET16
 (
¤c
, 4), \

606 
__exnsiÚ__
 
	`__STRING2_SMALL_GET32
 (
¤c
, 0), \

607 
__exnsiÚ__
 
	`__STRING2_SMALL_GET32
 (
¤c
, 4)

	)

609 
__STRING_INLINE
 *
__¡pýy_sm®l
 (*, 
__ut16_t
, __uint16_t,

610 
__ut32_t
, __ut32_t, 
size_t
);

611 
__STRING_INLINE
 *

612 
	$__¡pýy_sm®l
 (*
__de¡
,

613 
__ut16_t
 
__¤c0_2
, __ut16_
__¤c4_2
,

614 
__ut32_t
 
__¤c0_4
, __ut32_
__¤c4_4
,

615 
size_t
 
__¤þ
)

618 
__ui
;

619 
__usi
;

620 
__uc
;

621 
__c
;

622 } *
__u
 = (*è
__de¡
;

623 (è
__¤þ
)

626 
__u
->
__uc
 = '\0';

629 
__u
->
__usi
 = 
__¤c0_2
;

630 
__u
 = 
	`__exnsiÚ__
 ((*) __u + 1);

633 
__u
->
__usi
 = 
__¤c0_2
;

634 
__u
 = 
	`__exnsiÚ__
 ((*) __u + 2);

635 
__u
->
__uc
 = '\0';

638 
__u
->
__ui
 = 
__¤c0_4
;

639 
__u
 = 
	`__exnsiÚ__
 ((*) __u + 3);

642 
__u
->
__ui
 = 
__¤c0_4
;

643 
__u
 = 
	`__exnsiÚ__
 ((*) __u + 4);

644 
__u
->
__uc
 = '\0';

647 
__u
->
__ui
 = 
__¤c0_4
;

648 
__u
 = 
	`__exnsiÚ__
 ((*) __u + 4);

649 
__u
->
__usi
 = 
__¤c4_2
;

650 
__u
 = 
	`__exnsiÚ__
 ((*) __u + 1);

653 
__u
->
__ui
 = 
__¤c0_4
;

654 
__u
 = 
	`__exnsiÚ__
 ((*) __u + 4);

655 
__u
->
__usi
 = 
__¤c4_2
;

656 
__u
 = 
	`__exnsiÚ__
 ((*) __u + 2);

657 
__u
->
__uc
 = '\0';

660 
__u
->
__ui
 = 
__¤c0_4
;

661 
__u
 = 
	`__exnsiÚ__
 ((*) __u + 4);

662 
__u
->
__ui
 = 
__¤c4_4
;

663 
__u
 = 
	`__exnsiÚ__
 ((*) __u + 3);

666  &
__u
->
__c
;

667 
	}
}

669 #iâdeà
_FORCE_INLINES


670 
	#__¡pýy_¬gs
(
¤c
) \

671 
	`__exnsiÚ__
 ((
__STRING2_COPY_ARR2
) \

672 { { ((cÚ¡ *è(
¤c
))[0], '\0' } }), \

673 
	`__exnsiÚ__
 ((
__STRING2_COPY_ARR3
) \

674 { { ((cÚ¡ *è(
¤c
))[0], ((const *) (src))[1], \

676 
	`__exnsiÚ__
 ((
__STRING2_COPY_ARR4
) \

677 { { ((cÚ¡ *è(
¤c
))[0], ((const *) (src))[1], \

678 ((cÚ¡ *è(
¤c
))[2], '\0' } }), \

679 
	`__exnsiÚ__
 ((
__STRING2_COPY_ARR5
) \

680 { { ((cÚ¡ *è(
¤c
))[0], ((const *) (src))[1], \

681 ((cÚ¡ *è(
¤c
))[2], ((const *) (src))[3], \

683 
	`__exnsiÚ__
 ((
__STRING2_COPY_ARR6
) \

684 { { ((cÚ¡ *è(
¤c
))[0], ((const *) (src))[1], \

685 ((cÚ¡ *è(
¤c
))[2], ((const *) (src))[3], \

686 ((cÚ¡ *è(
¤c
))[4], '\0' } }), \

687 
	`__exnsiÚ__
 ((
__STRING2_COPY_ARR7
) \

688 { { ((cÚ¡ *è(
¤c
))[0], ((const *) (src))[1], \

689 ((cÚ¡ *è(
¤c
))[2], ((const *) (src))[3], \

690 ((cÚ¡ *è(
¤c
))[4], ((const *) (src))[5], \

692 
	`__exnsiÚ__
 ((
__STRING2_COPY_ARR8
) \

693 { { ((cÚ¡ *è(
¤c
))[0], ((const *) (src))[1], \

694 ((cÚ¡ *è(
¤c
))[2], ((const *) (src))[3], \

695 ((cÚ¡ *è(
¤c
))[4], ((const *) (src))[5], \

696 ((cÚ¡ *è(
¤c
))[6], '\0' } })

	)

698 
__STRING_INLINE
 *
__¡pýy_sm®l
 (*, 
__STRING2_COPY_ARR2
,

699 
__STRING2_COPY_ARR3
,

700 
__STRING2_COPY_ARR4
,

701 
__STRING2_COPY_ARR5
,

702 
__STRING2_COPY_ARR6
,

703 
__STRING2_COPY_ARR7
,

704 
__STRING2_COPY_ARR8
, 
size_t
);

705 
__STRING_INLINE
 *

706 
	$__¡pýy_sm®l
 (*
__de¡
,

707 
__STRING2_COPY_ARR2
 
__¤c2
, 
__STRING2_COPY_ARR3
 
__¤c3
,

708 
__STRING2_COPY_ARR4
 
__¤c4
, 
__STRING2_COPY_ARR5
 
__¤c5
,

709 
__STRING2_COPY_ARR6
 
__¤c6
, 
__STRING2_COPY_ARR7
 
__¤c7
,

710 
__STRING2_COPY_ARR8
 
__¤c8
, 
size_t
 
__¤þ
)

713 
__c
;

714 
__STRING2_COPY_ARR2
 
__sÿ2
;

715 
__STRING2_COPY_ARR3
 
__sÿ3
;

716 
__STRING2_COPY_ARR4
 
__sÿ4
;

717 
__STRING2_COPY_ARR5
 
__sÿ5
;

718 
__STRING2_COPY_ARR6
 
__sÿ6
;

719 
__STRING2_COPY_ARR7
 
__sÿ7
;

720 
__STRING2_COPY_ARR8
 
__sÿ8
;

721 } *
__u
 = (*è
__de¡
;

722 (è
__¤þ
)

725 
__u
->
__c
 = '\0';

728 
__exnsiÚ__
 
__u
->
__sÿ2
 = 
__¤c2
;

731 
__exnsiÚ__
 
__u
->
__sÿ3
 = 
__¤c3
;

734 
__exnsiÚ__
 
__u
->
__sÿ4
 = 
__¤c4
;

737 
__exnsiÚ__
 
__u
->
__sÿ5
 = 
__¤c5
;

740 
__exnsiÚ__
 
__u
->
__sÿ6
 = 
__¤c6
;

743 
__exnsiÚ__
 
__u
->
__sÿ7
 = 
__¤c7
;

746 
__exnsiÚ__
 
__u
->
__sÿ8
 = 
__¤c8
;

749  
__de¡
 + 
__¤þ
 - 1;

750 
	}
}

758 #iâdeà
_HAVE_STRING_ARCH_¡ºýy


759 #ià
__GNUC_PREREQ
 (3, 2)

760 
	#¡ºýy
(
de¡
, 
¤c
, 
n
è
	`__but_¡ºýy
 (de¡, src,)

	)

762 
	#¡ºýy
(
de¡
, 
¤c
, 
n
) \

763 (
	`__exnsiÚ__
 (
	`__but_cÚ¡ªt_p
 (
¤c
è&& __but_cÚ¡ªt_°(
n
) \

764 ? (
	`¡¾
 (
¤c
è+ 1 >ð((
size_t
è(
n
)) \

765 ? (*è
	`memýy
 (
de¡
, 
¤c
, 
n
) \

766 : 
	`¡ºýy
 (
de¡
, 
¤c
, 
n
)) \

767 : 
	`¡ºýy
 (
de¡
, 
¤c
, 
n
)))

	)

773 #iâdeà
_HAVE_STRING_ARCH_¡ºÿt


774 #ifdeà
_USE_STRING_ARCH_¡rchr


775 
	#¡ºÿt
(
de¡
, 
¤c
, 
n
) \

776 (
	`__exnsiÚ__
 ({ *
__de¡
 = (
de¡
); \

777 
	`__but_cÚ¡ªt_p
 (
¤c
è&& __but_cÚ¡ªt_°(
n
) \

778 ? (
	`¡¾
 (
¤c
è< ((
size_t
è(
n
)) \

779 ? 
	`¡rÿt
 (
__de¡
, 
¤c
) \

780 : (*((*è
	`__mempýy
 (
	`¡rchr
 (
__de¡
, '\0'), \

781 
¤c
, 
n
)èð'\0', 
__de¡
)) \

782 : 
	`¡ºÿt
 (
de¡
, 
¤c
, 
n
); }))

	)

783 #ià
__GNUC_PREREQ
 (3, 2)

784 
	#¡ºÿt
(
de¡
, 
¤c
, 
n
è
	`__but_¡ºÿt
 (de¡, src,)

	)

786 
	#¡ºÿt
(
de¡
, 
¤c
, 
n
) \

787 (
	`__exnsiÚ__
 (
	`__but_cÚ¡ªt_p
 (
¤c
è&& __but_cÚ¡ªt_°(
n
) \

788 ? (
	`¡¾
 (
¤c
è< ((
size_t
è(
n
)) \

789 ? 
	`¡rÿt
 (
de¡
, 
¤c
) \

790 : 
	`¡ºÿt
 (
de¡
, 
¤c
, 
n
)) \

791 : 
	`¡ºÿt
 (
de¡
, 
¤c
, 
n
)))

	)

797 #iâdeà
_HAVE_STRING_ARCH_¡rcmp


798 #ià
__GNUC_PREREQ
 (3, 2)

799 
	#¡rcmp
(
s1
, 
s2
) \

800 
__exnsiÚ__
 \

801 ({ 
size_t
 
__s1_Ën
, 
__s2_Ën
; \

802 (
	`__but_cÚ¡ªt_p
 (
s1
è&& __but_cÚ¡ªt_°(
s2
) \

803 && (
__s1_Ën
 = 
	`__but_¡¾
 (
s1
), 
__s2_Ën
 = __but_¡¾ (
s2
), \

804 (!
	`__¡rg2_1b±r_p
 (
s1
è|| 
__s1_Ën
 >= 4) \

805 && (!
	`__¡rg2_1b±r_p
 (
s2
è|| 
__s2_Ën
 >= 4)) \

806 ? 
	`__but_¡rcmp
 (
s1
, 
s2
) \

807 : (
	`__but_cÚ¡ªt_p
 (
s1
è&& 
	`__¡rg2_1b±r_p
 (s1) \

808 && (
__s1_Ën
 = 
	`__but_¡¾
 (
s1
), __s1_len < 4) \

809 ? (
	`__but_cÚ¡ªt_p
 (
s2
è&& 
	`__¡rg2_1b±r_p
 (s2) \

810 ? 
	`__but_¡rcmp
 (
s1
, 
s2
) \

811 : 
	`__¡rcmp_cg
 (
s1
, 
s2
, 
__s1_Ën
)) \

812 : (
	`__but_cÚ¡ªt_p
 (
s2
è&& 
	`__¡rg2_1b±r_p
 (s2) \

813 && (
__s2_Ën
 = 
	`__but_¡¾
 (
s2
), __s2_len < 4) \

814 ? (
	`__but_cÚ¡ªt_p
 (
s1
è&& 
	`__¡rg2_1b±r_p
 (s1) \

815 ? 
	`__but_¡rcmp
 (
s1
, 
s2
) \

816 : 
	`__¡rcmp_gc
 (
s1
, 
s2
, 
__s2_Ën
)) \

817 : 
	`__but_¡rcmp
 (
s1
, 
s2
)))); })

	)

819 
	#¡rcmp
(
s1
, 
s2
) \

820 
__exnsiÚ__
 \

821 ({ 
size_t
 
__s1_Ën
, 
__s2_Ën
; \

822 (
	`__but_cÚ¡ªt_p
 (
s1
è&& __but_cÚ¡ªt_°(
s2
) \

823 && (
__s1_Ën
 = 
	`¡¾
 (
s1
), 
__s2_Ën
 = sËÀ(
s2
), \

824 (!
	`__¡rg2_1b±r_p
 (
s1
è|| 
__s1_Ën
 >= 4) \

825 && (!
	`__¡rg2_1b±r_p
 (
s2
è|| 
__s2_Ën
 >= 4)) \

826 ? 
	`memcmp
 ((cÚ¡ *è(
s1
), (cÚ¡ *è(
s2
), \

827 (
__s1_Ën
 < 
__s2_Ën
 ? __s1_len : __s2_len) + 1) \

828 : (
	`__but_cÚ¡ªt_p
 (
s1
è&& 
	`__¡rg2_1b±r_p
 (s1) \

829 && (
__s1_Ën
 = 
	`¡¾
 (
s1
), __s1_len < 4) \

830 ? (
	`__but_cÚ¡ªt_p
 (
s2
è&& 
	`__¡rg2_1b±r_p
 (s2) \

831 ? 
	`__¡rcmp_cc
 (
s1
, 
s2
, 
__s1_Ën
) \

832 : 
	`__¡rcmp_cg
 (
s1
, 
s2
, 
__s1_Ën
)) \

833 : (
	`__but_cÚ¡ªt_p
 (
s2
è&& 
	`__¡rg2_1b±r_p
 (s2) \

834 && (
__s2_Ën
 = 
	`¡¾
 (
s2
), __s2_len < 4) \

835 ? (
	`__but_cÚ¡ªt_p
 (
s1
è&& 
	`__¡rg2_1b±r_p
 (s1) \

836 ? 
	`__¡rcmp_cc
 (
s1
, 
s2
, 
__s2_Ën
) \

837 : 
	`__¡rcmp_gc
 (
s1
, 
s2
, 
__s2_Ën
)) \

838 : 
	`¡rcmp
 (
s1
, 
s2
)))); })

	)

841 
	#__¡rcmp_cc
(
s1
, 
s2
, 
l
) \

842 (
	`__exnsiÚ__
 ({ 
__»suÉ
 = \

843 (((cÚ¡ *è(cÚ¡ *è(
s1
))[0] \

844 - ((cÚ¡ *è(cÚ¡ *)(
s2
))[0]); \

845 ià(
l
 > 0 && 
__»suÉ
 == 0) \

847 
__»suÉ
 = (((const *) \

848 (cÚ¡ *è(
s1
))[1] \

850 (cÚ¡ *è(
s2
))[1]); \

851 ià(
l
 > 1 && 
__»suÉ
 == 0) \

853 
__»suÉ
 = \

855 (cÚ¡ *è(
s1
))[2] \

857 (cÚ¡ *è(
s2
))[2]); \

858 ià(
l
 > 2 && 
__»suÉ
 == 0) \

859 
__»suÉ
 = \

861 (cÚ¡ *è(
s1
))[3] \

863 (cÚ¡ *è(
s2
))[3]); \

866 
__»suÉ
; }))

	)

868 
	#__¡rcmp_cg
(
s1
, 
s2
, 
l1
) \

869 (
	`__exnsiÚ__
 ({ cÚ¡ *
__s2
 = \

870 (cÚ¡ *è(cÚ¡ *è(
s2
); \

871 
__»suÉ
 = \

872 (((cÚ¡ *è(cÚ¡ *è(
s1
))[0] \

873 - 
__s2
[0]); \

874 ià(
l1
 > 0 && 
__»suÉ
 == 0) \

876 
__»suÉ
 = (((const *) \

877 (cÚ¡ *è(
s1
))[1] - 
__s2
[1]); \

878 ià(
l1
 > 1 && 
__»suÉ
 == 0) \

880 
__»suÉ
 = (((const *) \

881 (cÚ¡ *è(
s1
))[2] - 
__s2
[2]); \

882 ià(
l1
 > 2 && 
__»suÉ
 == 0) \

883 
__»suÉ
 = (((const *) \

884 (cÚ¡ *è(
s1
))[3] \

885 - 
__s2
[3]); \

888 
__»suÉ
; }))

	)

890 
	#__¡rcmp_gc
(
s1
, 
s2
, 
l2
è(- 
	`__¡rcmp_cg
 (s2, s1,2))

	)

895 #iâdeà
_HAVE_STRING_ARCH_¡ºcmp


896 
	#¡ºcmp
(
s1
, 
s2
, 
n
) \

897 (
	`__exnsiÚ__
 (
	`__but_cÚ¡ªt_p
 (
n
) \

898 && ((
	`__but_cÚ¡ªt_p
 (
s1
) \

899 && 
	`¡¾
 (
s1
è< ((
size_t
è(
n
))) \

900 || (
	`__but_cÚ¡ªt_p
 (
s2
) \

901 && 
	`¡¾
 (
s2
è< ((
size_t
è(
n
)))) \

902 ? 
	`¡rcmp
 (
s1
, 
s2
è: 
	`¡ºcmp
 (s1, s2, 
n
)))

	)

908 #ià!
defed
 
_HAVE_STRING_ARCH_¡rc¥n
 || defed 
_FORCE_INLINES


909 #iâdeà
_HAVE_STRING_ARCH_¡rc¥n


910 #ià
__GNUC_PREREQ
 (3, 2)

911 
	#¡rc¥n
(
s
, 
»jeù
) \

912 
__exnsiÚ__
 \

913 ({ 
__r0
, 
__r1
, 
__r2
; \

914 (
	`__but_cÚ¡ªt_p
 (
»jeù
è&& 
	`__¡rg2_1b±r_p
 (reject) \

915 ? ((
	`__but_cÚ¡ªt_p
 (
s
è&& 
	`__¡rg2_1b±r_p
 (s)) \

916 ? 
	`__but_¡rc¥n
 (
s
, 
»jeù
) \

917 : ((
__r0
 = ((cÚ¡ *è(
»jeù
))[0], __r0 == '\0') \

918 ? 
	`¡¾
 (
s
) \

919 : ((
__r1
 = ((cÚ¡ *è(
»jeù
))[1], __r1 == '\0') \

920 ? 
	`__¡rc¥n_c1
 (
s
, 
__r0
) \

921 : ((
__r2
 = ((cÚ¡ *è(
»jeù
))[2], __r2 == '\0') \

922 ? 
	`__¡rc¥n_c2
 (
s
, 
__r0
, 
__r1
) \

923 : (((cÚ¡ *è(
»jeù
))[3] == '\0' \

924 ? 
	`__¡rc¥n_c3
 (
s
, 
__r0
, 
__r1
, 
__r2
) \

925 : 
	`__but_¡rc¥n
 (
s
, 
»jeù
)))))) \

926 : 
	`__but_¡rc¥n
 (
s
, 
»jeù
)); })

	)

928 
	#¡rc¥n
(
s
, 
»jeù
) \

929 
__exnsiÚ__
 \

930 ({ 
__r0
, 
__r1
, 
__r2
; \

931 (
	`__but_cÚ¡ªt_p
 (
»jeù
è&& 
	`__¡rg2_1b±r_p
 (reject) \

932 ? ((
__r0
 = ((cÚ¡ *è(
»jeù
))[0], __r0 == '\0') \

933 ? 
	`¡¾
 (
s
) \

934 : ((
__r1
 = ((cÚ¡ *è(
»jeù
))[1], __r1 == '\0') \

935 ? 
	`__¡rc¥n_c1
 (
s
, 
__r0
) \

936 : ((
__r2
 = ((cÚ¡ *è(
»jeù
))[2], __r2 == '\0') \

937 ? 
	`__¡rc¥n_c2
 (
s
, 
__r0
, 
__r1
) \

938 : (((cÚ¡ *è(
»jeù
))[3] == '\0' \

939 ? 
	`__¡rc¥n_c3
 (
s
, 
__r0
, 
__r1
, 
__r2
) \

940 : 
	`¡rc¥n
 (
s
, 
»jeù
))))) \

941 : 
	`¡rc¥n
 (
s
, 
»jeù
)); })

	)

945 
__STRING_INLINE
 
size_t
 
__¡rc¥n_c1
 (cÚ¡ *
__s
, 
__»jeù
);

946 
__STRING_INLINE
 
size_t


947 
	$__¡rc¥n_c1
 (cÚ¡ *
__s
, 
__»jeù
)

949 
size_t
 
__»suÉ
 = 0;

950 
__s
[
__»suÉ
] !ð'\0' && __s[__»suÉ] !ð
__»jeù
)

951 ++
__»suÉ
;

952  
__»suÉ
;

953 
	}
}

955 
__STRING_INLINE
 
size_t
 
__¡rc¥n_c2
 (cÚ¡ *
__s
, 
__»jeù1
,

956 
__»jeù2
);

957 
__STRING_INLINE
 
size_t


958 
	$__¡rc¥n_c2
 (cÚ¡ *
__s
, 
__»jeù1
, 
__»jeù2
)

960 
size_t
 
__»suÉ
 = 0;

961 
__s
[
__»suÉ
] !ð'\0' && __s[__»suÉ] !ð
__»jeù1


962 && 
__s
[
__»suÉ
] !ð
__»jeù2
)

963 ++
__»suÉ
;

964  
__»suÉ
;

965 
	}
}

967 
__STRING_INLINE
 
size_t
 
__¡rc¥n_c3
 (cÚ¡ *
__s
, 
__»jeù1
,

968 
__»jeù2
, 
__»jeù3
);

969 
__STRING_INLINE
 
size_t


970 
	$__¡rc¥n_c3
 (cÚ¡ *
__s
, 
__»jeù1
, 
__»jeù2
,

971 
__»jeù3
)

973 
size_t
 
__»suÉ
 = 0;

974 
__s
[
__»suÉ
] !ð'\0' && __s[__»suÉ] !ð
__»jeù1


975 && 
__s
[
__»suÉ
] !ð
__»jeù2
 && __s[__»suÉ] !ð
__»jeù3
)

976 ++
__»suÉ
;

977  
__»suÉ
;

978 
	}
}

984 #ià!
defed
 
_HAVE_STRING_ARCH_¡r¥n
 || defed 
_FORCE_INLINES


985 #iâdeà
_HAVE_STRING_ARCH_¡r¥n


986 #ià
__GNUC_PREREQ
 (3, 2)

987 
	#¡r¥n
(
s
, 
acû±
) \

988 
__exnsiÚ__
 \

989 ({ 
__a0
, 
__a1
, 
__a2
; \

990 (
	`__but_cÚ¡ªt_p
 (
acû±
è&& 
	`__¡rg2_1b±r_p
 (accept) \

991 ? ((
	`__but_cÚ¡ªt_p
 (
s
è&& 
	`__¡rg2_1b±r_p
 (s)) \

992 ? 
	`__but_¡r¥n
 (
s
, 
acû±
) \

993 : ((
__a0
 = ((cÚ¡ *è(
acû±
))[0], __a0 == '\0') \

994 ? ((è(
s
), (
size_t
) 0) \

995 : ((
__a1
 = ((cÚ¡ *è(
acû±
))[1], __a1 == '\0') \

996 ? 
	`__¡r¥n_c1
 (
s
, 
__a0
) \

997 : ((
__a2
 = ((cÚ¡ *è(
acû±
))[2], __a2 == '\0') \

998 ? 
	`__¡r¥n_c2
 (
s
, 
__a0
, 
__a1
) \

999 : (((cÚ¡ *è(
acû±
))[3] == '\0' \

1000 ? 
	`__¡r¥n_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1001 : 
	`__but_¡r¥n
 (
s
, 
acû±
)))))) \

1002 : 
	`__but_¡r¥n
 (
s
, 
acû±
)); })

	)

1004 
	#¡r¥n
(
s
, 
acû±
) \

1005 
__exnsiÚ__
 \

1006 ({ 
__a0
, 
__a1
, 
__a2
; \

1007 (
	`__but_cÚ¡ªt_p
 (
acû±
è&& 
	`__¡rg2_1b±r_p
 (accept) \

1008 ? ((
__a0
 = ((cÚ¡ *è(
acû±
))[0], __a0 == '\0') \

1009 ? ((è(
s
), (
size_t
) 0) \

1010 : ((
__a1
 = ((cÚ¡ *è(
acû±
))[1], __a1 == '\0') \

1011 ? 
	`__¡r¥n_c1
 (
s
, 
__a0
) \

1012 : ((
__a2
 = ((cÚ¡ *è(
acû±
))[2], __a2 == '\0') \

1013 ? 
	`__¡r¥n_c2
 (
s
, 
__a0
, 
__a1
) \

1014 : (((cÚ¡ *è(
acû±
))[3] == '\0' \

1015 ? 
	`__¡r¥n_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1016 : 
	`¡r¥n
 (
s
, 
acû±
))))) \

1017 : 
	`¡r¥n
 (
s
, 
acû±
)); })

	)

1021 
__STRING_INLINE
 
size_t
 
__¡r¥n_c1
 (cÚ¡ *
__s
, 
__acû±
);

1022 
__STRING_INLINE
 
size_t


1023 
	$__¡r¥n_c1
 (cÚ¡ *
__s
, 
__acû±
)

1025 
size_t
 
__»suÉ
 = 0;

1027 
__s
[
__»suÉ
] =ð
__acû±
)

1028 ++
__»suÉ
;

1029  
__»suÉ
;

1030 
	}
}

1032 
__STRING_INLINE
 
size_t
 
__¡r¥n_c2
 (cÚ¡ *
__s
, 
__acû±1
,

1033 
__acû±2
);

1034 
__STRING_INLINE
 
size_t


1035 
	$__¡r¥n_c2
 (cÚ¡ *
__s
, 
__acû±1
, 
__acû±2
)

1037 
size_t
 
__»suÉ
 = 0;

1039 
__s
[
__»suÉ
] =ð
__acû±1
 || __s[__»suÉ] =ð
__acû±2
)

1040 ++
__»suÉ
;

1041  
__»suÉ
;

1042 
	}
}

1044 
__STRING_INLINE
 
size_t
 
__¡r¥n_c3
 (cÚ¡ *
__s
, 
__acû±1
,

1045 
__acû±2
, 
__acû±3
);

1046 
__STRING_INLINE
 
size_t


1047 
	$__¡r¥n_c3
 (cÚ¡ *
__s
, 
__acû±1
, 
__acû±2
, 
__acû±3
)

1049 
size_t
 
__»suÉ
 = 0;

1051 
__s
[
__»suÉ
] =ð
__acû±1
 || __s[__»suÉ] =ð
__acû±2


1052 || 
__s
[
__»suÉ
] =ð
__acû±3
)

1053 ++
__»suÉ
;

1054  
__»suÉ
;

1055 
	}
}

1060 #ià!
defed
 
_HAVE_STRING_ARCH_¡½brk
 || defed 
_FORCE_INLINES


1061 #iâdeà
_HAVE_STRING_ARCH_¡½brk


1062 #ià
__GNUC_PREREQ
 (3, 2)

1063 
	#¡½brk
(
s
, 
acû±
) \

1064 
__exnsiÚ__
 \

1065 ({ 
__a0
, 
__a1
, 
__a2
; \

1066 (
	`__but_cÚ¡ªt_p
 (
acû±
è&& 
	`__¡rg2_1b±r_p
 (accept) \

1067 ? ((
	`__but_cÚ¡ªt_p
 (
s
è&& 
	`__¡rg2_1b±r_p
 (s)) \

1068 ? 
	`__but_¡½brk
 (
s
, 
acû±
) \

1069 : ((
__a0
 = ((cÚ¡ *è(
acû±
))[0], __a0 == '\0') \

1070 ? ((è(
s
), (*è
NULL
) \

1071 : ((
__a1
 = ((cÚ¡ *è(
acû±
))[1], __a1 == '\0') \

1072 ? 
	`__but_¡rchr
 (
s
, 
__a0
) \

1073 : ((
__a2
 = ((cÚ¡ *è(
acû±
))[2], __a2 == '\0') \

1074 ? 
	`__¡½brk_c2
 (
s
, 
__a0
, 
__a1
) \

1075 : (((cÚ¡ *è(
acû±
))[3] == '\0' \

1076 ? 
	`__¡½brk_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1077 : 
	`__but_¡½brk
 (
s
, 
acû±
)))))) \

1078 : 
	`__but_¡½brk
 (
s
, 
acû±
)); })

	)

1080 
	#¡½brk
(
s
, 
acû±
) \

1081 
__exnsiÚ__
 \

1082 ({ 
__a0
, 
__a1
, 
__a2
; \

1083 (
	`__but_cÚ¡ªt_p
 (
acû±
è&& 
	`__¡rg2_1b±r_p
 (accept) \

1084 ? ((
__a0
 = ((cÚ¡ *è(
acû±
))[0], __a0 == '\0') \

1085 ? ((è(
s
), (*è
NULL
) \

1086 : ((
__a1
 = ((cÚ¡ *è(
acû±
))[1], __a1 == '\0') \

1087 ? 
	`¡rchr
 (
s
, 
__a0
) \

1088 : ((
__a2
 = ((cÚ¡ *è(
acû±
))[2], __a2 == '\0') \

1089 ? 
	`__¡½brk_c2
 (
s
, 
__a0
, 
__a1
) \

1090 : (((cÚ¡ *è(
acû±
))[3] == '\0' \

1091 ? 
	`__¡½brk_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1092 : 
	`¡½brk
 (
s
, 
acû±
))))) \

1093 : 
	`¡½brk
 (
s
, 
acû±
)); })

	)

1097 
__STRING_INLINE
 *
__¡½brk_c2
 (cÚ¡ *
__s
, 
__acû±1
,

1098 
__acû±2
);

1099 
__STRING_INLINE
 *

1100 
	$__¡½brk_c2
 (cÚ¡ *
__s
, 
__acû±1
, 
__acû±2
)

1103 *
__s
 !ð'\0' && *__ !ð
__acû±1
 && *__ !ð
__acû±2
)

1104 ++
__s
;

1105  *
__s
 =ð'\0' ? 
NULL
 : (*è(
size_t
) __s;

1106 
	}
}

1108 
__STRING_INLINE
 *
__¡½brk_c3
 (cÚ¡ *
__s
, 
__acû±1
,

1109 
__acû±2
, 
__acû±3
);

1110 
__STRING_INLINE
 *

1111 
	$__¡½brk_c3
 (cÚ¡ *
__s
, 
__acû±1
, 
__acû±2
, 
__acû±3
)

1114 *
__s
 !ð'\0' && *__ !ð
__acû±1
 && *__ !ð
__acû±2


1115 && *
__s
 !ð
__acû±3
)

1116 ++
__s
;

1117  *
__s
 =ð'\0' ? 
NULL
 : (*è(
size_t
) __s;

1118 
	}
}

1124 #ià!
defed
 
_HAVE_STRING_ARCH_¡r¡r
 && !
__GNUC_PREREQ
 (2, 97)

1125 
	#¡r¡r
(
hay¡ack
, 
ÃedË
) \

1126 (
	`__exnsiÚ__
 (
	`__but_cÚ¡ªt_p
 (
ÃedË
è&& 
	`__¡rg2_1b±r_p
 (needle) \

1127 ? (((cÚ¡ *è(
ÃedË
))[0] == '\0' \

1128 ? (*è(
size_t
è(
hay¡ack
) \

1129 : (((cÚ¡ *è(
ÃedË
))[1] == '\0' \

1130 ? 
	`¡rchr
 (
hay¡ack
, \

1131 ((cÚ¡ *è(
ÃedË
))[0]) \

1132 : 
	`¡r¡r
 (
hay¡ack
, 
ÃedË
))) \

1133 : 
	`¡r¡r
 (
hay¡ack
, 
ÃedË
)))

	)

1137 #ià!
defed
 
_HAVE_STRING_ARCH_¡¹ok_r
 || defed 
_FORCE_INLINES


1138 #iâdeà
_HAVE_STRING_ARCH_¡¹ok_r


1139 
	#__¡¹ok_r
(
s
, 
£p
, 
Ãx
) \

1140 (
	`__exnsiÚ__
 (
	`__but_cÚ¡ªt_p
 (
£p
è&& 
	`__¡rg2_1b±r_p
 (sep) \

1141 && ((cÚ¡ *è(
£p
))[0] != '\0' \

1142 && ((cÚ¡ *è(
£p
))[1] == '\0' \

1143 ? 
	`__¡¹ok_r_1c
 (
s
, ((cÚ¡ *è(
£p
))[0], 
Ãx
) \

1144 : 
	`__¡¹ok_r
 (
s
, 
£p
, 
Ãx
)))

	)

1147 
__STRING_INLINE
 *
__¡¹ok_r_1c
 (*
__s
, 
__£p
, **
__Ãx
);

1148 
__STRING_INLINE
 *

1149 
	$__¡¹ok_r_1c
 (*
__s
, 
__£p
, **
__Ãx
)

1151 *
__»suÉ
;

1152 ià(
__s
 =ð
NULL
)

1153 
__s
 = *
__Ãx
;

1154 *
__s
 =ð
__£p
)

1155 ++
__s
;

1156 
__»suÉ
 = 
NULL
;

1157 ià(*
__s
 != '\0')

1159 
__»suÉ
 = 
__s
++;

1160 *
__s
 != '\0')

1161 ià(*
__s
++ =ð
__£p
)

1163 
__s
[-1] = '\0';

1167 *
__Ãx
 = 
__s
;

1168  
__»suÉ
;

1169 
	}
}

1170 #ià
defed
 
__USE_POSIX
 || defed 
__USE_MISC


1171 
	#¡¹ok_r
(
s
, 
£p
, 
Ãx
è
	`__¡¹ok_r
 (s, s,ex)

	)

1176 #ià!
defed
 
_HAVE_STRING_ARCH_¡r£p
 || defed 
_FORCE_INLINES


1177 #iâdeà
_HAVE_STRING_ARCH_¡r£p


1179 *
__¡r£p_g
 (**
__¡rgp
, cÚ¡ *
__dim
);

1180 
	#__¡r£p
(
s
, 
»jeù
) \

1181 
__exnsiÚ__
 \

1182 ({ 
__r0
, 
__r1
, 
__r2
; \

1183 (
	`__but_cÚ¡ªt_p
 (
»jeù
è&& 
	`__¡rg2_1b±r_p
 (reject) \

1184 && (
__r0
 = ((cÚ¡ *è(
»jeù
))[0], \

1185 ((cÚ¡ *è(
»jeù
))[0] != '\0') \

1186 ? ((
__r1
 = ((cÚ¡ *è(
»jeù
))[1], \

1187 ((cÚ¡ *è(
»jeù
))[1] == '\0') \

1188 ? 
	`__¡r£p_1c
 (
s
, 
__r0
) \

1189 : ((
__r2
 = ((cÚ¡ *è(
»jeù
))[2], __r2 == '\0') \

1190 ? 
	`__¡r£p_2c
 (
s
, 
__r0
, 
__r1
) \

1191 : (((cÚ¡ *è(
»jeù
))[3] == '\0' \

1192 ? 
	`__¡r£p_3c
 (
s
, 
__r0
, 
__r1
, 
__r2
) \

1193 : 
	`__¡r£p_g
 (
s
, 
»jeù
)))) \

1194 : 
	`__¡r£p_g
 (
s
, 
»jeù
)); })

	)

1197 
__STRING_INLINE
 *
__¡r£p_1c
 (**
__s
, 
__»jeù
);

1198 
__STRING_INLINE
 *

1199 
	$__¡r£p_1c
 (**
__s
, 
__»jeù
)

1201 *
__»tv®
 = *
__s
;

1202 ià(
__»tv®
 !ð
NULL
 && (*
__s
 = 
	`¡rchr
 (__»tv®, 
__»jeù
)) != NULL)

1203 *(*
__s
)++ = '\0';

1204  
__»tv®
;

1205 
	}
}

1207 
__STRING_INLINE
 *
__¡r£p_2c
 (**
__s
, 
__»jeù1
, 
__»jeù2
);

1208 
__STRING_INLINE
 *

1209 
	$__¡r£p_2c
 (**
__s
, 
__»jeù1
, 
__»jeù2
)

1211 *
__»tv®
 = *
__s
;

1212 ià(
__»tv®
 !ð
NULL
)

1214 *
__ý
 = 
__»tv®
;

1217 ià(*
__ý
 == '\0')

1219 
__ý
 = 
NULL
;

1222 ià(*
__ý
 =ð
__»jeù1
 || *__ý =ð
__»jeù2
)

1224 *
__ý
++ = '\0';

1227 ++
__ý
;

1229 *
__s
 = 
__ý
;

1231  
__»tv®
;

1232 
	}
}

1234 
__STRING_INLINE
 *
__¡r£p_3c
 (**
__s
, 
__»jeù1
, 
__»jeù2
,

1235 
__»jeù3
);

1236 
__STRING_INLINE
 *

1237 
	$__¡r£p_3c
 (**
__s
, 
__»jeù1
, 
__»jeù2
, 
__»jeù3
)

1239 *
__»tv®
 = *
__s
;

1240 ià(
__»tv®
 !ð
NULL
)

1242 *
__ý
 = 
__»tv®
;

1245 ià(*
__ý
 == '\0')

1247 
__ý
 = 
NULL
;

1250 ià(*
__ý
 =ð
__»jeù1
 || *__ý =ð
__»jeù2
 || *__ý =ð
__»jeù3
)

1252 *
__ý
++ = '\0';

1255 ++
__ý
;

1257 *
__s
 = 
__ý
;

1259  
__»tv®
;

1260 
	}
}

1261 #ifdeà
__USE_BSD


1262 
	#¡r£p
(
s
, 
»jeù
è
	`__¡r£p
 (s,ejeù)

	)

1269 #ifdeà
__USE_MISC


1271 #ià!
defed
 
_HAVE_STRING_ARCH_¡rdup
 || !defed 
_HAVE_STRING_ARCH_¡ºdup


1272 
	#__Ãed_m®loc_ªd_ÿÎoc


	)

1273 
	~<¡dlib.h
>

1276 #iâdeà
_HAVE_STRING_ARCH_¡rdup


1278 *
	$__¡rdup
 (cÚ¡ *
__¡rg
è
__THROW
 
__©ibu_m®loc__
;

1279 
	#__¡rdup
(
s
) \

1280 (
	`__exnsiÚ__
 (
	`__but_cÚ¡ªt_p
 (
s
è&& 
	`__¡rg2_1b±r_p
 (s) \

1281 ? (((cÚ¡ *è(
s
))[0] == '\0' \

1282 ? (*è
	`ÿÎoc
 ((
size_t
) 1, (size_t) 1) \

1283 : ({ 
size_t
 
__Ën
 = 
	`¡¾
 (
s
) + 1; \

1284 *
__»tv®
 = (*è
	`m®loc
 (
__Ën
); \

1285 ià(
__»tv®
 !ð
NULL
) \

1286 
__»tv®
 = (*è
	`memýy
 (__»tv®, 
s
, 
__Ën
); \

1287 
__»tv®
; 
	}
})) \

1288 : 
	`__¡rdup
 (
s
)))

	)

1290 #ià
defed
 
__USE_SVID
 || defed 
__USE_BSD
 || defed 
__USE_XOPEN_EXTENDED


1291 
	#¡rdup
(
s
è
	`__¡rdup
 (s)

	)

1295 #iâdeà
_HAVE_STRING_ARCH_¡ºdup


1297 *
	$__¡ºdup
 (cÚ¡ *
__¡rg
, 
size_t
 
__n
)

1298 
__THROW
 
__©ibu_m®loc__
;

1299 
	#__¡ºdup
(
s
, 
n
) \

1300 (
	`__exnsiÚ__
 (
	`__but_cÚ¡ªt_p
 (
s
è&& 
	`__¡rg2_1b±r_p
 (s) \

1301 ? (((cÚ¡ *è(
s
))[0] == '\0' \

1302 ? (*è
	`ÿÎoc
 ((
size_t
) 1, (size_t) 1) \

1303 : ({ 
size_t
 
__Ën
 = 
	`¡¾
 (
s
) + 1; \

1304 
size_t
 
__n
 = (
n
); \

1305 *
__»tv®
; \

1306 ià(
__n
 < 
__Ën
) \

1307 
__Ën
 = 
__n
 + 1; \

1308 
__»tv®
 = (*è
	`m®loc
 (
__Ën
); \

1309 ià(
__»tv®
 !ð
NULL
) \

1311 
__»tv®
[
__Ën
 - 1] = '\0'; \

1312 
__»tv®
 = (*è
	`memýy
 (__»tv®, 
s
, \

1313 
__Ën
 - 1); \

1315 
__»tv®
; 
	}
})) \

1316 : 
	`__¡ºdup
 (
s
, 
n
)))

	)

1318 #ifdeà
__USE_GNU


1319 
	#¡ºdup
(
s
, 
n
è
	`__¡ºdup
 (s,)

	)

1325 #iâdeà
_FORCE_INLINES


1326 #undeà
__STRING_INLINE


	@/usr/include/bits/string3.h

18 #iâdeà
_STRING_H


22 
__w¬ndeþ
 (
__w¬n_mem£t_zo_Ën
,

25 #iâdeà
__ýlu¥lus


29 #undeà
memýy


30 #undeà
memmove


31 #undeà
mem£t


32 #undeà
¡rÿt


33 #undeà
¡rýy


34 #undeà
¡ºÿt


35 #undeà
¡ºýy


36 #ifdeà
__USE_GNU


37 #undeà
mempýy


38 #undeà
¡pýy


40 #ifdeà
__USE_BSD


41 #undeà
bcÝy


42 #undeà
bzo


47 
__fÜtify_funùiÚ
 *

48 
__NTH
 (
	$memýy
 (*
__»¡riù
 
__de¡
, cÚ¡ *__»¡riù 
__¤c
,

49 
size_t
 
__Ën
))

51  
	`__but___memýy_chk
 (
__de¡
, 
__¤c
, 
__Ën
, 
	`__bos0
 (__dest));

52 
	}
}

54 
__fÜtify_funùiÚ
 *

55 
__NTH
 (
	$memmove
 (*
__de¡
, cÚ¡ *
__¤c
, 
size_t
 
__Ën
))

57  
	`__but___memmove_chk
 (
__de¡
, 
__¤c
, 
__Ën
, 
	`__bos0
 (__dest));

58 
	}
}

60 #ifdeà
__USE_GNU


61 
__fÜtify_funùiÚ
 *

62 
__NTH
 (
	$mempýy
 (*
__»¡riù
 
__de¡
, cÚ¡ *__»¡riù 
__¤c
,

63 
size_t
 
__Ën
))

65  
	`__but___mempýy_chk
 (
__de¡
, 
__¤c
, 
__Ën
, 
	`__bos0
 (__dest));

66 
	}
}

75 
__fÜtify_funùiÚ
 *

76 
__NTH
 (
	$mem£t
 (*
__de¡
, 
__ch
, 
size_t
 
__Ën
))

78 ià(
	`__but_cÚ¡ªt_p
 (
__Ën
) && __len == 0

79 && (!
	`__but_cÚ¡ªt_p
 (
__ch
) || __ch != 0))

81 
	`__w¬n_mem£t_zo_Ën
 ();

82  
__de¡
;

84  
	`__but___mem£t_chk
 (
__de¡
, 
__ch
, 
__Ën
, 
	`__bos0
 (__dest));

85 
	}
}

87 #ifdeà
__USE_BSD


88 
__fÜtify_funùiÚ
 

89 
__NTH
 (
	$bcÝy
 (cÚ¡ *
__¤c
, *
__de¡
, 
size_t
 
__Ën
))

91 (è
	`__but___memmove_chk
 (
__de¡
, 
__¤c
, 
__Ën
, 
	`__bos0
 (__dest));

92 
	}
}

94 
__fÜtify_funùiÚ
 

95 
__NTH
 (
	$bzo
 (*
__de¡
, 
size_t
 
__Ën
))

97 (è
	`__but___mem£t_chk
 (
__de¡
, '\0', 
__Ën
, 
	`__bos0
 (__dest));

98 
	}
}

101 
__fÜtify_funùiÚ
 *

102 
__NTH
 (
	$¡rýy
 (*
__»¡riù
 
__de¡
, cÚ¡ *__»¡riù 
__¤c
))

104  
	`__but___¡rýy_chk
 (
__de¡
, 
__¤c
, 
	`__bos
 (__dest));

105 
	}
}

107 #ifdeà
__USE_GNU


108 
__fÜtify_funùiÚ
 *

109 
__NTH
 (
	$¡pýy
 (*
__»¡riù
 
__de¡
, cÚ¡ *__»¡riù 
__¤c
))

111  
	`__but___¡pýy_chk
 (
__de¡
, 
__¤c
, 
	`__bos
 (__dest));

112 
	}
}

116 
__fÜtify_funùiÚ
 *

117 
__NTH
 (
	$¡ºýy
 (*
__»¡riù
 
__de¡
, cÚ¡ *__»¡riù 
__¤c
,

118 
size_t
 
__Ën
))

120  
	`__but___¡ºýy_chk
 (
__de¡
, 
__¤c
, 
__Ën
, 
	`__bos
 (__dest));

121 
	}
}

124 *
	$__¡²ýy_chk
 (*
__de¡
, cÚ¡ *
__¤c
, 
size_t
 
__n
,

125 
size_t
 
__de¡Ën
è
__THROW
;

126 *
	`__REDIRECT_NTH
 (
__¡²ýy_®s
, (*
__de¡
, cÚ¡ *
__¤c
,

127 
size_t
 
__n
), 
¡²ýy
);

129 
__fÜtify_funùiÚ
 *

130 
	`__NTH
 (
	$¡²ýy
 (*
__de¡
, cÚ¡ *
__¤c
, 
size_t
 
__n
))

132 ià(
	`__bos
 (
__de¡
è!ð(
size_t
) -1

133 && (!
	`__but_cÚ¡ªt_p
 (
__n
è|| __À<ð
	`__bos
 (
__de¡
)))

134  
	`__¡²ýy_chk
 (
__de¡
, 
__¤c
, 
__n
, 
	`__bos
 (__dest));

135  
	`__¡²ýy_®s
 (
__de¡
, 
__¤c
, 
__n
);

136 
	}
}

139 
__fÜtify_funùiÚ
 *

140 
__NTH
 (
	$¡rÿt
 (*
__»¡riù
 
__de¡
, cÚ¡ *__»¡riù 
__¤c
))

142  
	`__but___¡rÿt_chk
 (
__de¡
, 
__¤c
, 
	`__bos
 (__dest));

143 
	}
}

146 
__fÜtify_funùiÚ
 *

147 
__NTH
 (
	$¡ºÿt
 (*
__»¡riù
 
__de¡
, cÚ¡ *__»¡riù 
__¤c
,

148 
size_t
 
__Ën
))

150  
	`__but___¡ºÿt_chk
 (
__de¡
, 
__¤c
, 
__Ën
, 
	`__bos
 (__dest));

151 
	}
}

	@/usr/include/bits/sys_errlist.h

19 #iâdeà
_STDIO_H


25 #ifdeà 
__USE_BSD


26 
sys_Ã¼
;

27 cÚ¡ *cÚ¡ 
sys_¾i¡
[];

29 #ifdeà 
__USE_GNU


30 
_sys_Ã¼
;

31 cÚ¡ *cÚ¡ 
_sys_¾i¡
[];

	@/usr/include/bits/termios.h

19 #iâdeà
_TERMIOS_H


23 
	tcc_t
;

24 
	t¥d_t
;

25 
	ttcæag_t
;

27 
	#NCCS
 32

	)

28 
	srmios


30 
tcæag_t
 
	mc_iæag
;

31 
tcæag_t
 
	mc_oæag
;

32 
tcæag_t
 
	mc_cæag
;

33 
tcæag_t
 
	mc_læag
;

34 
cc_t
 
	mc_le
;

35 
cc_t
 
	mc_cc
[
NCCS
];

36 
¥d_t
 
	mc_i¥d
;

37 
¥d_t
 
	mc_o¥d
;

38 
	#_HAVE_STRUCT_TERMIOS_C_ISPEED
 1

	)

39 
	#_HAVE_STRUCT_TERMIOS_C_OSPEED
 1

	)

43 
	#VINTR
 0

	)

44 
	#VQUIT
 1

	)

45 
	#VERASE
 2

	)

46 
	#VKILL
 3

	)

47 
	#VEOF
 4

	)

48 
	#VTIME
 5

	)

49 
	#VMIN
 6

	)

50 
	#VSWTC
 7

	)

51 
	#VSTART
 8

	)

52 
	#VSTOP
 9

	)

53 
	#VSUSP
 10

	)

54 
	#VEOL
 11

	)

55 
	#VREPRINT
 12

	)

56 
	#VDISCARD
 13

	)

57 
	#VWERASE
 14

	)

58 
	#VLNEXT
 15

	)

59 
	#VEOL2
 16

	)

62 
	#IGNBRK
 0000001

	)

63 
	#BRKINT
 0000002

	)

64 
	#IGNPAR
 0000004

	)

65 
	#PARMRK
 0000010

	)

66 
	#INPCK
 0000020

	)

67 
	#ISTRIP
 0000040

	)

68 
	#INLCR
 0000100

	)

69 
	#IGNCR
 0000200

	)

70 
	#ICRNL
 0000400

	)

71 
	#IUCLC
 0001000

	)

72 
	#IXON
 0002000

	)

73 
	#IXANY
 0004000

	)

74 
	#IXOFF
 0010000

	)

75 
	#IMAXBEL
 0020000

	)

76 
	#IUTF8
 0040000

	)

79 
	#OPOST
 0000001

	)

80 
	#OLCUC
 0000002

	)

81 
	#ONLCR
 0000004

	)

82 
	#OCRNL
 0000010

	)

83 
	#ONOCR
 0000020

	)

84 
	#ONLRET
 0000040

	)

85 
	#OFILL
 0000100

	)

86 
	#OFDEL
 0000200

	)

87 #ià
defed
 
__USE_MISC
 || defed 
__USE_XOPEN


88 
	#NLDLY
 0000400

	)

89 
	#NL0
 0000000

	)

90 
	#NL1
 0000400

	)

91 
	#CRDLY
 0003000

	)

92 
	#CR0
 0000000

	)

93 
	#CR1
 0001000

	)

94 
	#CR2
 0002000

	)

95 
	#CR3
 0003000

	)

96 
	#TABDLY
 0014000

	)

97 
	#TAB0
 0000000

	)

98 
	#TAB1
 0004000

	)

99 
	#TAB2
 0010000

	)

100 
	#TAB3
 0014000

	)

101 
	#BSDLY
 0020000

	)

102 
	#BS0
 0000000

	)

103 
	#BS1
 0020000

	)

104 
	#FFDLY
 0100000

	)

105 
	#FF0
 0000000

	)

106 
	#FF1
 0100000

	)

109 
	#VTDLY
 0040000

	)

110 
	#VT0
 0000000

	)

111 
	#VT1
 0040000

	)

113 #ifdeà
__USE_MISC


114 
	#XTABS
 0014000

	)

118 #ifdeà
__USE_MISC


119 
	#CBAUD
 0010017

	)

121 
	#B0
 0000000

	)

122 
	#B50
 0000001

	)

123 
	#B75
 0000002

	)

124 
	#B110
 0000003

	)

125 
	#B134
 0000004

	)

126 
	#B150
 0000005

	)

127 
	#B200
 0000006

	)

128 
	#B300
 0000007

	)

129 
	#B600
 0000010

	)

130 
	#B1200
 0000011

	)

131 
	#B1800
 0000012

	)

132 
	#B2400
 0000013

	)

133 
	#B4800
 0000014

	)

134 
	#B9600
 0000015

	)

135 
	#B19200
 0000016

	)

136 
	#B38400
 0000017

	)

137 #ifdeà
__USE_MISC


138 
	#EXTA
 
B19200


	)

139 
	#EXTB
 
B38400


	)

141 
	#CSIZE
 0000060

	)

142 
	#CS5
 0000000

	)

143 
	#CS6
 0000020

	)

144 
	#CS7
 0000040

	)

145 
	#CS8
 0000060

	)

146 
	#CSTOPB
 0000100

	)

147 
	#CREAD
 0000200

	)

148 
	#PARENB
 0000400

	)

149 
	#PARODD
 0001000

	)

150 
	#HUPCL
 0002000

	)

151 
	#CLOCAL
 0004000

	)

152 #ifdeà
__USE_MISC


153 
	#CBAUDEX
 0010000

	)

155 
	#B57600
 0010001

	)

156 
	#B115200
 0010002

	)

157 
	#B230400
 0010003

	)

158 
	#B460800
 0010004

	)

159 
	#B500000
 0010005

	)

160 
	#B576000
 0010006

	)

161 
	#B921600
 0010007

	)

162 
	#B1000000
 0010010

	)

163 
	#B1152000
 0010011

	)

164 
	#B1500000
 0010012

	)

165 
	#B2000000
 0010013

	)

166 
	#B2500000
 0010014

	)

167 
	#B3000000
 0010015

	)

168 
	#B3500000
 0010016

	)

169 
	#B4000000
 0010017

	)

170 
	#__MAX_BAUD
 
B4000000


	)

171 #ifdeà
__USE_MISC


172 
	#CIBAUD
 002003600000

	)

173 
	#CMSPAR
 010000000000

	)

174 
	#CRTSCTS
 020000000000

	)

178 
	#ISIG
 0000001

	)

179 
	#ICANON
 0000002

	)

180 #ià
defed
 
__USE_MISC
 || defed 
__USE_XOPEN


181 
	#XCASE
 0000004

	)

183 
	#ECHO
 0000010

	)

184 
	#ECHOE
 0000020

	)

185 
	#ECHOK
 0000040

	)

186 
	#ECHONL
 0000100

	)

187 
	#NOFLSH
 0000200

	)

188 
	#TOSTOP
 0000400

	)

189 #ifdeà
__USE_MISC


190 
	#ECHOCTL
 0001000

	)

191 
	#ECHOPRT
 0002000

	)

192 
	#ECHOKE
 0004000

	)

193 
	#FLUSHO
 0010000

	)

194 
	#PENDIN
 0040000

	)

196 
	#IEXTEN
 0100000

	)

197 #ifdeà
__USE_BSD


198 
	#EXTPROC
 0200000

	)

202 
	#TCOOFF
 0

	)

203 
	#TCOON
 1

	)

204 
	#TCIOFF
 2

	)

205 
	#TCION
 3

	)

208 
	#TCIFLUSH
 0

	)

209 
	#TCOFLUSH
 1

	)

210 
	#TCIOFLUSH
 2

	)

213 
	#TCSANOW
 0

	)

214 
	#TCSADRAIN
 1

	)

215 
	#TCSAFLUSH
 2

	)

218 
	#_IOT_rmios
 \

219 
	`_IOT
 (
	`_IOTS
 (
cæag_t
), 4, _IOTS (
cc_t
), 
NCCS
, _IOTS (
¥d_t
), 2)

	)

	@/usr/include/bits/time.h

23 #ià
defed
 
__Ãed_timev®
 || defed 
__USE_GNU


24 #iâdeà
_STRUCT_TIMEVAL


25 
	#_STRUCT_TIMEVAL
 1

	)

26 
	~<bs/ty³s.h
>

30 
	stimev®


32 
__time_t
 
	mtv_£c
;

33 
__su£cÚds_t
 
	mtv_u£c
;

38 #iâdeà
__Ãed_timev®


39 #iâdeà
_BITS_TIME_H


40 
	#_BITS_TIME_H
 1

	)

48 
	#CLOCKS_PER_SEC
 1000000l

	)

50 #ià(!
defed
 
__STRICT_ANSI__
 || defed 
__USE_POSIX
) \

51 && !
defed
 
	g__USE_XOPEN2K


54 
	~<bs/ty³s.h
>

55 
__syscÚf
 ();

56 
	#CLK_TCK
 ((
__þock_t
è
	`__syscÚf
 (2)è

	)

59 #ifdeà
__USE_POSIX199309


61 
	#CLOCK_REALTIME
 0

	)

63 
	#CLOCK_MONOTONIC
 1

	)

65 
	#CLOCK_PROCESS_CPUTIME_ID
 2

	)

67 
	#CLOCK_THREAD_CPUTIME_ID
 3

	)

69 
	#CLOCK_MONOTONIC_RAW
 4

	)

71 
	#CLOCK_REALTIME_COARSE
 5

	)

73 
	#CLOCK_MONOTONIC_COARSE
 6

	)

75 
	#CLOCK_BOOTTIME
 7

	)

77 
	#CLOCK_REALTIME_ALARM
 8

	)

79 
	#CLOCK_BOOTTIME_ALARM
 9

	)

82 
	#TIMER_ABSTIME
 1

	)

85 #ifdeà
__USE_GNU


86 
	~<bs/timex.h
>

88 
__BEGIN_DECLS


91 
	$þock_adjtime
 (
__þockid_t
 
__þock_id
, 
timex
 *
__utx
è
__THROW
;

93 
__END_DECLS


99 #undeà
__Ãed_timev®


	@/usr/include/bits/types.h

23 #iâdef 
_BITS_TYPES_H


24 
	#_BITS_TYPES_H
 1

	)

26 
	~<ã©u»s.h
>

27 
	~<bs/wÜdsize.h
>

30 
	t__u_ch¬
;

31 
	t__u_shÜt
;

32 
	t__u_t
;

33 
	t__u_lÚg
;

36 sigÃd 
	t__t8_t
;

37 
	t__ut8_t
;

38 sigÃd 
	t__t16_t
;

39 
	t__ut16_t
;

40 sigÃd 
	t__t32_t
;

41 
	t__ut32_t
;

42 #ià
__WORDSIZE
 == 64

43 sigÃd 
	t__t64_t
;

44 
	t__ut64_t
;

46 
__exnsiÚ__
 sigÃd 
	t__t64_t
;

47 
__exnsiÚ__
 
	t__ut64_t
;

51 #ià
__WORDSIZE
 == 64

52 
	t__quad_t
;

53 
	t__u_quad_t
;

55 
__exnsiÚ__
 
	t__quad_t
;

56 
__exnsiÚ__
 
	t__u_quad_t
;

89 
	#__S16_TYPE
 

	)

90 
	#__U16_TYPE
 

	)

91 
	#__S32_TYPE
 

	)

92 
	#__U32_TYPE
 

	)

93 
	#__SLONGWORD_TYPE
 

	)

94 
	#__ULONGWORD_TYPE
 

	)

95 #ià
__WORDSIZE
 == 32

96 
	#__SQUAD_TYPE
 
__quad_t


	)

97 
	#__UQUAD_TYPE
 
__u_quad_t


	)

98 
	#__SWORD_TYPE
 

	)

99 
	#__UWORD_TYPE
 

	)

100 
	#__SLONG32_TYPE
 

	)

101 
	#__ULONG32_TYPE
 

	)

102 
	#__S64_TYPE
 
__quad_t


	)

103 
	#__U64_TYPE
 
__u_quad_t


	)

106 
	#__STD_TYPE
 
__exnsiÚ__
 

	)

107 #ià
__WORDSIZE
 == 64

108 
	t__SQUAD_TYPE
 

	)

109 
	t__UQUAD_TYPE
 

	)

110 
	t__SWORD_TYPE
 

	)

111 
	t__UWORD_TYPE
 

	)

112 
	t__SLONG32_TYPE
 

	)

113 
	t__ULONG32_TYPE
 

	)

114 
	t__S64_TYPE
 

	)

115 
	t__U64_TYPE
 

	)

117 
	t__STD_TYPE
 

	)

121 
	~<bs/ty³sizes.h
>

124 
__STD_TYPE
 
	t__DEV_T_TYPE
 
	t__dev_t
;

125 
__STD_TYPE
 
__UID_T_TYPE
 
	g__uid_t
;

126 
__STD_TYPE
 
__GID_T_TYPE
 
	g__gid_t
;

127 
__STD_TYPE
 
__INO_T_TYPE
 
	g__o_t
;

128 
__STD_TYPE
 
__INO64_T_TYPE
 
	g__o64_t
;

129 
__STD_TYPE
 
__MODE_T_TYPE
 
	g__mode_t
;

130 
__STD_TYPE
 
__NLINK_T_TYPE
 
	g__Æk_t
;

131 
__STD_TYPE
 
__OFF_T_TYPE
 
	g__off_t
;

132 
__STD_TYPE
 
__OFF64_T_TYPE
 
	g__off64_t
;

133 
__STD_TYPE
 
__PID_T_TYPE
 
	g__pid_t
;

134 
__STD_TYPE
 
__FSID_T_TYPE
 
	g__fsid_t
;

135 
__STD_TYPE
 
__CLOCK_T_TYPE
 
	g__þock_t
;

136 
__STD_TYPE
 
__RLIM_T_TYPE
 
	g__¾im_t
;

137 
__STD_TYPE
 
__RLIM64_T_TYPE
 
	g__¾im64_t
;

138 
__STD_TYPE
 
__ID_T_TYPE
 
	g__id_t
;

139 
__STD_TYPE
 
__TIME_T_TYPE
 
	g__time_t
;

140 
__STD_TYPE
 
__USECONDS_T_TYPE
 
	g__u£cÚds_t
;

141 
__STD_TYPE
 
__SUSECONDS_T_TYPE
 
	g__su£cÚds_t
;

143 
__STD_TYPE
 
__DADDR_T_TYPE
 
	g__daddr_t
;

144 
__STD_TYPE
 
__KEY_T_TYPE
 
	g__key_t
;

147 
__STD_TYPE
 
__CLOCKID_T_TYPE
 
	g__þockid_t
;

150 
__STD_TYPE
 
__TIMER_T_TYPE
 
	g__tim_t
;

153 
__STD_TYPE
 
__BLKSIZE_T_TYPE
 
	g__blksize_t
;

158 
__STD_TYPE
 
__BLKCNT_T_TYPE
 
	g__blkút_t
;

159 
__STD_TYPE
 
__BLKCNT64_T_TYPE
 
	g__blkút64_t
;

162 
__STD_TYPE
 
__FSBLKCNT_T_TYPE
 
	g__fsblkút_t
;

163 
__STD_TYPE
 
__FSBLKCNT64_T_TYPE
 
	g__fsblkút64_t
;

166 
__STD_TYPE
 
__FSFILCNT_T_TYPE
 
	g__fsfút_t
;

167 
__STD_TYPE
 
__FSFILCNT64_T_TYPE
 
	g__fsfút64_t
;

170 
__STD_TYPE
 
__FSWORD_T_TYPE
 
	g__fswÜd_t
;

172 
__STD_TYPE
 
__SSIZE_T_TYPE
 
	g__ssize_t
;

175 
__STD_TYPE
 
__SYSCALL_SLONG_TYPE
 
	g__sysÿÎ_¦Úg_t
;

177 
__STD_TYPE
 
__SYSCALL_ULONG_TYPE
 
	g__sysÿÎ_ulÚg_t
;

181 
__off64_t
 
	t__loff_t
;

182 
__quad_t
 *
	t__qaddr_t
;

183 *
	t__ÿddr_t
;

186 
__STD_TYPE
 
__SWORD_TYPE
 
	g___t
;

189 
__STD_TYPE
 
__U32_TYPE
 
	g__sockËn_t
;

192 #undeà
__STD_TYPE


	@/usr/include/bits/unistd.h

19 #iâdeà
_UNISTD_H


23 
ssize_t
 
	$__»ad_chk
 (
__fd
, *
__buf
, 
size_t
 
__nbys
,

24 
size_t
 
__buæ
è
__wur
;

25 
ssize_t
 
	`__REDIRECT
 (
__»ad_®s
, (
__fd
, *
__buf
,

26 
size_t
 
__nbys
), 
»ad
è
__wur
;

27 
ssize_t
 
	`__REDIRECT
 (
__»ad_chk_w¬n
,

28 (
__fd
, *
__buf
, 
size_t
 
__nbys
,

29 
size_t
 
__buæ
), 
__»ad_chk
)

30 
__wur
 
	`__w¬Çr
 ("read called with biggerengthhan size of "

33 
__fÜtify_funùiÚ
 
__wur
 
ssize_t


34 
	$»ad
 (
__fd
, *
__buf
, 
size_t
 
__nbys
)

36 ià(
	`__bos0
 (
__buf
è!ð(
size_t
) -1)

38 ià(!
	`__but_cÚ¡ªt_p
 (
__nbys
))

39  
	`__»ad_chk
 (
__fd
, 
__buf
, 
__nbys
, 
	`__bos0
 (__buf));

41 ià(
__nbys
 > 
	`__bos0
 (
__buf
))

42  
	`__»ad_chk_w¬n
 (
__fd
, 
__buf
, 
__nbys
, 
	`__bos0
 (__buf));

44  
	`__»ad_®s
 (
__fd
, 
__buf
, 
__nbys
);

45 
	}
}

47 #ifdeà
__USE_UNIX98


48 
ssize_t
 
	$__´d_chk
 (
__fd
, *
__buf
, 
size_t
 
__nbys
,

49 
__off_t
 
__off£t
, 
size_t
 
__bufsize
è
__wur
;

50 
ssize_t
 
	$__´d64_chk
 (
__fd
, *
__buf
, 
size_t
 
__nbys
,

51 
__off64_t
 
__off£t
, 
size_t
 
__bufsize
è
__wur
;

52 
ssize_t
 
	`__REDIRECT
 (
__´d_®s
,

53 (
__fd
, *
__buf
, 
size_t
 
__nbys
,

54 
__off_t
 
__off£t
), 
´d
è
__wur
;

55 
ssize_t
 
	`__REDIRECT
 (
__´d64_®s
,

56 (
__fd
, *
__buf
, 
size_t
 
__nbys
,

57 
__off64_t
 
__off£t
), 
´d64
è
__wur
;

58 
ssize_t
 
	`__REDIRECT
 (
__´d_chk_w¬n
,

59 (
__fd
, *
__buf
, 
size_t
 
__nbys
,

60 
__off_t
 
__off£t
, 
size_t
 
__bufsize
), 
__´d_chk
)

61 
__wur
 
	`__w¬Çr
 ("pread called with biggerengthhan size of "

63 
ssize_t
 
	`__REDIRECT
 (
__´d64_chk_w¬n
,

64 (
__fd
, *
__buf
, 
size_t
 
__nbys
,

65 
__off64_t
 
__off£t
, 
size_t
 
__bufsize
),

66 
__´d64_chk
)

67 
__wur
 
	`__w¬Çr
 ("pread64 called with biggerengthhan size of "

70 #iâdeà
__USE_FILE_OFFSET64


71 
__fÜtify_funùiÚ
 
__wur
 
ssize_t


72 
	$´d
 (
__fd
, *
__buf
, 
size_t
 
__nbys
, 
__off_t
 
__off£t
)

74 ià(
	`__bos0
 (
__buf
è!ð(
size_t
) -1)

76 ià(!
	`__but_cÚ¡ªt_p
 (
__nbys
))

77  
	`__´d_chk
 (
__fd
, 
__buf
, 
__nbys
, 
__off£t
, 
	`__bos0
 (__buf));

79 iàÐ
__nbys
 > 
	`__bos0
 (
__buf
))

80  
	`__´d_chk_w¬n
 (
__fd
, 
__buf
, 
__nbys
, 
__off£t
,

81 
	`__bos0
 (
__buf
));

83  
	`__´d_®s
 (
__fd
, 
__buf
, 
__nbys
, 
__off£t
);

84 
	}
}

86 
__fÜtify_funùiÚ
 
__wur
 
ssize_t


87 
	$´d
 (
__fd
, *
__buf
, 
size_t
 
__nbys
, 
__off64_t
 
__off£t
)

89 ià(
	`__bos0
 (
__buf
è!ð(
size_t
) -1)

91 ià(!
	`__but_cÚ¡ªt_p
 (
__nbys
))

92  
	`__´d64_chk
 (
__fd
, 
__buf
, 
__nbys
, 
__off£t
, 
	`__bos0
 (__buf));

94 iàÐ
__nbys
 > 
	`__bos0
 (
__buf
))

95  
	`__´d64_chk_w¬n
 (
__fd
, 
__buf
, 
__nbys
, 
__off£t
,

96 
	`__bos0
 (
__buf
));

99  
	`__´d64_®s
 (
__fd
, 
__buf
, 
__nbys
, 
__off£t
);

100 
	}
}

103 #ifdeà
__USE_LARGEFILE64


104 
__fÜtify_funùiÚ
 
__wur
 
ssize_t


105 
	$´d64
 (
__fd
, *
__buf
, 
size_t
 
__nbys
, 
__off64_t
 
__off£t
)

107 ià(
	`__bos0
 (
__buf
è!ð(
size_t
) -1)

109 ià(!
	`__but_cÚ¡ªt_p
 (
__nbys
))

110  
	`__´d64_chk
 (
__fd
, 
__buf
, 
__nbys
, 
__off£t
, 
	`__bos0
 (__buf));

112 iàÐ
__nbys
 > 
	`__bos0
 (
__buf
))

113  
	`__´d64_chk_w¬n
 (
__fd
, 
__buf
, 
__nbys
, 
__off£t
,

114 
	`__bos0
 (
__buf
));

117  
	`__´d64_®s
 (
__fd
, 
__buf
, 
__nbys
, 
__off£t
);

118 
	}
}

122 #ià
defed
 
__USE_BSD
 || defed 
__USE_XOPEN_EXTENDED
 || defed 
__USE_XOPEN2K


123 
ssize_t
 
	$__»adlk_chk
 (cÚ¡ *
__»¡riù
 
__·th
,

124 *
__»¡riù
 
__buf
, 
size_t
 
__Ën
,

125 
size_t
 
__buæ
)

126 
__THROW
 
	`__nÚnuÎ
 ((1, 2)è
__wur
;

127 
ssize_t
 
	`__REDIRECT_NTH
 (
__»adlk_®s
,

128 (cÚ¡ *
__»¡riù
 
__·th
,

129 *
__»¡riù
 
__buf
, 
size_t
 
__Ën
), 
»adlk
)

130 
	`__nÚnuÎ
 ((1, 2)è
__wur
;

131 
ssize_t
 
	`__REDIRECT_NTH
 (
__»adlk_chk_w¬n
,

132 (cÚ¡ *
__»¡riù
 
__·th
,

133 *
__»¡riù
 
__buf
, 
size_t
 
__Ën
,

134 
size_t
 
__buæ
), 
__»adlk_chk
)

135 
	`__nÚnuÎ
 ((1, 2)è
__wur
 
	`__w¬Çr
 ("readlink called with biggerength "

138 
__fÜtify_funùiÚ
 
	`__nÚnuÎ
 ((1, 2)è
__wur
 
ssize_t


139 
	`__NTH
 (
	$»adlk
 (cÚ¡ *
__»¡riù
 
__·th
, *__»¡riù 
__buf
,

140 
size_t
 
__Ën
))

142 ià(
	`__bos
 (
__buf
è!ð(
size_t
) -1)

144 ià(!
	`__but_cÚ¡ªt_p
 (
__Ën
))

145  
	`__»adlk_chk
 (
__·th
, 
__buf
, 
__Ën
, 
	`__bos
 (__buf));

147 iàÐ
__Ën
 > 
	`__bos
 (
__buf
))

148  
	`__»adlk_chk_w¬n
 (
__·th
, 
__buf
, 
__Ën
, 
	`__bos
 (__buf));

150  
	`__»adlk_®s
 (
__·th
, 
__buf
, 
__Ën
);

151 
	}
}

154 #ifdeà
__USE_ATFILE


155 
ssize_t
 
	$__»adlk©_chk
 (
__fd
, cÚ¡ *
__»¡riù
 
__·th
,

156 *
__»¡riù
 
__buf
, 
size_t
 
__Ën
,

157 
size_t
 
__buæ
)

158 
__THROW
 
	`__nÚnuÎ
 ((2, 3)è
__wur
;

159 
ssize_t
 
	`__REDIRECT_NTH
 (
__»adlk©_®s
,

160 (
__fd
, cÚ¡ *
__»¡riù
 
__·th
,

161 *
__»¡riù
 
__buf
, 
size_t
 
__Ën
),

162 
»adlk©
)

163 
	`__nÚnuÎ
 ((2, 3)è
__wur
;

164 
ssize_t
 
	`__REDIRECT_NTH
 (
__»adlk©_chk_w¬n
,

165 (
__fd
, cÚ¡ *
__»¡riù
 
__·th
,

166 *
__»¡riù
 
__buf
, 
size_t
 
__Ën
,

167 
size_t
 
__buæ
), 
__»adlk©_chk
)

168 
	`__nÚnuÎ
 ((2, 3)è
__wur
 
	`__w¬Çr
 ("readlinkat called with bigger "

172 
__fÜtify_funùiÚ
 
	`__nÚnuÎ
 ((2, 3)è
__wur
 
ssize_t


173 
	`__NTH
 (
	$»adlk©
 (
__fd
, cÚ¡ *
__»¡riù
 
__·th
,

174 *
__»¡riù
 
__buf
, 
size_t
 
__Ën
))

176 ià(
	`__bos
 (
__buf
è!ð(
size_t
) -1)

178 ià(!
	`__but_cÚ¡ªt_p
 (
__Ën
))

179  
	`__»adlk©_chk
 (
__fd
, 
__·th
, 
__buf
, 
__Ën
, 
	`__bos
 (__buf));

181 ià(
__Ën
 > 
	`__bos
 (
__buf
))

182  
	`__»adlk©_chk_w¬n
 (
__fd
, 
__·th
, 
__buf
, 
__Ën
,

183 
	`__bos
 (
__buf
));

185  
	`__»adlk©_®s
 (
__fd
, 
__·th
, 
__buf
, 
__Ën
);

186 
	}
}

189 *
	$__gcwd_chk
 (*
__buf
, 
size_t
 
__size
, size_
__buæ
)

190 
__THROW
 
__wur
;

191 *
	`__REDIRECT_NTH
 (
__gcwd_®s
,

192 (*
__buf
, 
size_t
 
__size
), 
gcwd
è
__wur
;

193 *
	`__REDIRECT_NTH
 (
__gcwd_chk_w¬n
,

194 (*
__buf
, 
size_t
 
__size
, size_
__buæ
),

195 
__gcwd_chk
)

196 
__wur
 
	`__w¬Çr
 ("getcwd caller with biggerengthhan size of "

199 
__fÜtify_funùiÚ
 
__wur
 *

200 
	`__NTH
 (
	$gcwd
 (*
__buf
, 
size_t
 
__size
))

202 ià(
	`__bos
 (
__buf
è!ð(
size_t
) -1)

204 ià(!
	`__but_cÚ¡ªt_p
 (
__size
))

205  
	`__gcwd_chk
 (
__buf
, 
__size
, 
	`__bos
 (__buf));

207 ià(
__size
 > 
	`__bos
 (
__buf
))

208  
	`__gcwd_chk_w¬n
 (
__buf
, 
__size
, 
	`__bos
 (__buf));

210  
	`__gcwd_®s
 (
__buf
, 
__size
);

211 
	}
}

213 #ià
defed
 
__USE_BSD
 || defed 
__USE_XOPEN_EXTENDED


214 *
	$__gwd_chk
 (*
__buf
, 
size_t
 
buæ
)

215 
__THROW
 
	`__nÚnuÎ
 ((1)è
__wur
;

216 *
	`__REDIRECT_NTH
 (
__gwd_w¬n
, (*
__buf
), 
gwd
)

217 
	`__nÚnuÎ
 ((1)è
__wur
 
	`__w¬Çr
 ("please use getcwd instead,s getwd "

220 
__fÜtify_funùiÚ
 
	`__nÚnuÎ
 ((1)è
__©ibu_d»ÿd__
 
__wur
 *

221 
	`__NTH
 (
	$gwd
 (*
__buf
))

223 ià(
	`__bos
 (
__buf
è!ð(
size_t
) -1)

224  
	`__gwd_chk
 (
__buf
, 
	`__bos
 (__buf));

225  
	`__gwd_w¬n
 (
__buf
);

226 
	}
}

229 
size_t
 
	$__cÚf¡r_chk
 (
__Çme
, *
__buf
, 
size_t
 
__Ën
,

230 
size_t
 
__buæ
è
__THROW
;

231 
size_t
 
	`__REDIRECT_NTH
 (
__cÚf¡r_®s
, (
__Çme
, *
__buf
,

232 
size_t
 
__Ën
), 
cÚf¡r
);

233 
size_t
 
	`__REDIRECT_NTH
 (
__cÚf¡r_chk_w¬n
,

234 (
__Çme
, *
__buf
, 
size_t
 
__Ën
,

235 
size_t
 
__buæ
), 
__cÚf¡r_chk
)

236 
	`__w¬Çr
 ("confstr called with biggerengthhan size of destination "

239 
__fÜtify_funùiÚ
 
size_t


240 
	`__NTH
 (
	$cÚf¡r
 (
__Çme
, *
__buf
, 
size_t
 
__Ën
))

242 ià(
	`__bos
 (
__buf
è!ð(
size_t
) -1)

244 ià(!
	`__but_cÚ¡ªt_p
 (
__Ën
))

245  
	`__cÚf¡r_chk
 (
__Çme
, 
__buf
, 
__Ën
, 
	`__bos
 (__buf));

247 ià(
	`__bos
 (
__buf
è< 
__Ën
)

248  
	`__cÚf¡r_chk_w¬n
 (
__Çme
, 
__buf
, 
__Ën
, 
	`__bos
 (__buf));

250  
	`__cÚf¡r_®s
 (
__Çme
, 
__buf
, 
__Ën
);

251 
	}
}

254 
	$__ggroups_chk
 (
__size
, 
__gid_t
 
__li¡
[], 
size_t
 
__li¡Ën
)

255 
__THROW
 
__wur
;

256 
	`__REDIRECT_NTH
 (
__ggroups_®s
, (
__size
, 
__gid_t
 
__li¡
[]),

257 
ggroups
è
__wur
;

258 
	`__REDIRECT_NTH
 (
__ggroups_chk_w¬n
,

259 (
__size
, 
__gid_t
 
__li¡
[], 
size_t
 
__li¡Ën
),

260 
__ggroups_chk
)

261 
__wur
 
	`__w¬Çr
 ("getgroups called with bigger group counthan what "

264 
__fÜtify_funùiÚ
 

265 
	`__NTH
 (
	$ggroups
 (
__size
, 
__gid_t
 
__li¡
[]))

267 ià(
	`__bos
 (
__li¡
è!ð(
size_t
) -1)

269 ià(!
	`__but_cÚ¡ªt_p
 (
__size
) || __size < 0)

270  
	`__ggroups_chk
 (
__size
, 
__li¡
, 
	`__bos
 (__list));

272 ià(
__size
 *  (
__gid_t
è> 
	`__bos
 (
__li¡
))

273  
	`__ggroups_chk_w¬n
 (
__size
, 
__li¡
, 
	`__bos
 (__list));

275  
	`__ggroups_®s
 (
__size
, 
__li¡
);

276 
	}
}

279 
	$__yÇme_r_chk
 (
__fd
, *
__buf
, 
size_t
 
__buæ
,

280 
size_t
 
__Äl
è
__THROW
 
	`__nÚnuÎ
 ((2));

281 
	`__REDIRECT_NTH
 (
__yÇme_r_®s
, (
__fd
, *
__buf
,

282 
size_t
 
__buæ
), 
yÇme_r
)

283 
	`__nÚnuÎ
 ((2));

284 
	`__REDIRECT_NTH
 (
__yÇme_r_chk_w¬n
,

285 (
__fd
, *
__buf
, 
size_t
 
__buæ
,

286 
size_t
 
__Äl
), 
__yÇme_r_chk
)

287 
	`__nÚnuÎ
 ((2)è
	`__w¬Çr
 ("ttyname_r called with bigger buflenhan "

290 
__fÜtify_funùiÚ
 

291 
	`__NTH
 (
	$yÇme_r
 (
__fd
, *
__buf
, 
size_t
 
__buæ
))

293 ià(
	`__bos
 (
__buf
è!ð(
size_t
) -1)

295 ià(!
	`__but_cÚ¡ªt_p
 (
__buæ
))

296  
	`__yÇme_r_chk
 (
__fd
, 
__buf
, 
__buæ
, 
	`__bos
 (__buf));

298 ià(
__buæ
 > 
	`__bos
 (
__buf
))

299  
	`__yÇme_r_chk_w¬n
 (
__fd
, 
__buf
, 
__buæ
, 
	`__bos
 (__buf));

301  
	`__yÇme_r_®s
 (
__fd
, 
__buf
, 
__buæ
);

302 
	}
}

305 #ià
defed
 
__USE_REENTRANT
 || defed 
__USE_POSIX199506


306 
	$__glog_r_chk
 (*
__buf
, 
size_t
 
__buæ
, size_
__Äl
)

307 
	`__nÚnuÎ
 ((1));

308 
	`__REDIRECT
 (
__glog_r_®s
, (*
__buf
, 
size_t
 
__buæ
),

309 
glog_r
è
	`__nÚnuÎ
 ((1));

310 
	`__REDIRECT
 (
__glog_r_chk_w¬n
,

311 (*
__buf
, 
size_t
 
__buæ
, size_
__Äl
),

312 
__glog_r_chk
)

313 
	`__nÚnuÎ
 ((1)è
	`__w¬Çr
 ("getlogin_r called with bigger buflenhan "

316 
__fÜtify_funùiÚ
 

317 
	$glog_r
 (*
__buf
, 
size_t
 
__buæ
)

319 ià(
	`__bos
 (
__buf
è!ð(
size_t
) -1)

321 ià(!
	`__but_cÚ¡ªt_p
 (
__buæ
))

322  
	`__glog_r_chk
 (
__buf
, 
__buæ
, 
	`__bos
 (__buf));

324 ià(
__buæ
 > 
	`__bos
 (
__buf
))

325  
	`__glog_r_chk_w¬n
 (
__buf
, 
__buæ
, 
	`__bos
 (__buf));

327  
	`__glog_r_®s
 (
__buf
, 
__buæ
);

328 
	}
}

332 #ià
defed
 
__USE_BSD
 || defed 
__USE_UNIX98


333 
	$__gho¡Çme_chk
 (*
__buf
, 
size_t
 
__buæ
, size_
__Äl
)

334 
__THROW
 
	`__nÚnuÎ
 ((1));

335 
	`__REDIRECT_NTH
 (
__gho¡Çme_®s
, (*
__buf
, 
size_t
 
__buæ
),

336 
gho¡Çme
è
	`__nÚnuÎ
 ((1));

337 
	`__REDIRECT_NTH
 (
__gho¡Çme_chk_w¬n
,

338 (*
__buf
, 
size_t
 
__buæ
, size_
__Äl
),

339 
__gho¡Çme_chk
)

340 
	`__nÚnuÎ
 ((1)è
	`__w¬Çr
 ("gethostname called with bigger buflenhan "

343 
__fÜtify_funùiÚ
 

344 
	`__NTH
 (
	$gho¡Çme
 (*
__buf
, 
size_t
 
__buæ
))

346 ià(
	`__bos
 (
__buf
è!ð(
size_t
) -1)

348 ià(!
	`__but_cÚ¡ªt_p
 (
__buæ
))

349  
	`__gho¡Çme_chk
 (
__buf
, 
__buæ
, 
	`__bos
 (__buf));

351 ià(
__buæ
 > 
	`__bos
 (
__buf
))

352  
	`__gho¡Çme_chk_w¬n
 (
__buf
, 
__buæ
, 
	`__bos
 (__buf));

354  
	`__gho¡Çme_®s
 (
__buf
, 
__buæ
);

355 
	}
}

359 #ià
defed
 
__USE_BSD
 || (defed 
__USE_XOPEN
 && !defed 
__USE_UNIX98
)

360 
	$__gdomaÇme_chk
 (*
__buf
, 
size_t
 
__buæ
, size_
__Äl
)

361 
__THROW
 
	`__nÚnuÎ
 ((1)è
__wur
;

362 
	`__REDIRECT_NTH
 (
__gdomaÇme_®s
, (*
__buf
,

363 
size_t
 
__buæ
),

364 
gdomaÇme
è
	`__nÚnuÎ
 ((1)è
__wur
;

365 
	`__REDIRECT_NTH
 (
__gdomaÇme_chk_w¬n
,

366 (*
__buf
, 
size_t
 
__buæ
, size_
__Äl
),

367 
__gdomaÇme_chk
)

368 
	`__nÚnuÎ
 ((1)è
__wur
 
	`__w¬Çr
 ("getdomainname called with bigger "

372 
__fÜtify_funùiÚ
 

373 
	`__NTH
 (
	$gdomaÇme
 (*
__buf
, 
size_t
 
__buæ
))

375 ià(
	`__bos
 (
__buf
è!ð(
size_t
) -1)

377 ià(!
	`__but_cÚ¡ªt_p
 (
__buæ
))

378  
	`__gdomaÇme_chk
 (
__buf
, 
__buæ
, 
	`__bos
 (__buf));

380 ià(
__buæ
 > 
	`__bos
 (
__buf
))

381  
	`__gdomaÇme_chk_w¬n
 (
__buf
, 
__buæ
, 
	`__bos
 (__buf));

383  
	`__gdomaÇme_®s
 (
__buf
, 
__buæ
);

384 
	}
}

	@/usr/include/bits/waitflags.h

19 #ià!
defed
 
_SYS_WAIT_H
 && !defed 
_STDLIB_H


25 
	#WNOHANG
 1

	)

26 
	#WUNTRACED
 2

	)

29 
	#WSTOPPED
 2

	)

30 
	#WEXITED
 4

	)

31 
	#WCONTINUED
 8

	)

32 
	#WNOWAIT
 0x01000000

	)

34 
	#__WNOTHREAD
 0x20000000

	)

36 
	#__WALL
 0x40000000

	)

37 
	#__WCLONE
 0x80000000

	)

40 #ià
defed
 
__USE_SVID
 || defed 
__USE_XOPEN
 || defed 
__USE_XOPEN2K8


41 #iâdeà
__ENUM_IDTYPE_T


42 
	#__ENUM_IDTYPE_T
 1

	)

46 #undeà
P_ALL


47 #undeà
P_PID


48 #undeà
P_PGID


52 
	mP_ALL
,

53 
	mP_PID
,

54 
	mP_PGID


55 } 
	tidty³_t
;

	@/usr/include/bits/waitstatus.h

19 #ià!
defed
 
_SYS_WAIT_H
 && !defed 
_STDLIB_H


28 
	#__WEXITSTATUS
(
¡©us
è(((¡©usè& 0xff00è>> 8)

	)

31 
	#__WTERMSIG
(
¡©us
è((¡©usè& 0x7f)

	)

34 
	#__WSTOPSIG
(
¡©us
è
	`__WEXITSTATUS
(¡©us)

	)

37 
	#__WIFEXITED
(
¡©us
è(
	`__WTERMSIG
(¡©usè=ð0)

	)

40 
	#__WIFSIGNALED
(
¡©us
) \

41 (((sigÃd è(((
¡©us
è& 0x7fè+ 1è>> 1è> 0)

	)

44 
	#__WIFSTOPPED
(
¡©us
è(((¡©usè& 0xffè=ð0x7f)

	)

48 #ifdeà
WCONTINUED


49 
	#__WIFCONTINUED
(
¡©us
è((¡©usè=ð
__W_CONTINUED
)

	)

53 
	#__WCOREDUMP
(
¡©us
è((¡©usè& 
__WCOREFLAG
)

	)

56 
	#__W_EXITCODE
(
»t
, 
sig
è(Ôè<< 8 | (sig))

	)

57 
	#__W_STOPCODE
(
sig
è((sigè<< 8 | 0x7f)

	)

58 
	#__W_CONTINUED
 0xffff

	)

59 
	#__WCOREFLAG
 0x80

	)

62 #ifdef 
__USE_BSD


64 
	~<dn.h
>

66 
	uwa


68 
	mw_¡©us
;

71 #if 
__BYTE_ORDER
 =ð
__LITTLE_ENDIAN


72 
	m__w_rmsig
:7;

73 
	m__w_cÜedump
:1;

74 
	m__w_»tcode
:8;

77 #if 
__BYTE_ORDER
 =ð
__BIG_ENDIAN


79 
	m__w_»tcode
:8;

80 
	m__w_cÜedump
:1;

81 
	m__w_rmsig
:7;

83 } 
	m__wa_rm©ed
;

86 #if 
__BYTE_ORDER
 =ð
__LITTLE_ENDIAN


87 
	m__w_¡Ýv®
:8;

88 
	m__w_¡Ýsig
:8;

91 #if 
__BYTE_ORDER
 =ð
__BIG_ENDIAN


93 
	m__w_¡Ýsig
:8;

94 
	m__w_¡Ýv®
:8;

96 } 
	m__wa_¡Ý³d
;

99 
	#w_rmsig
 
__wa_rm©ed
.
__w_rmsig


	)

100 
	#w_cÜedump
 
__wa_rm©ed
.
__w_cÜedump


	)

101 
	#w_»tcode
 
__wa_rm©ed
.
__w_»tcode


	)

102 
	#w_¡Ýsig
 
__wa_¡Ý³d
.
__w_¡Ýsig


	)

103 
	#w_¡Ýv®
 
__wa_¡Ý³d
.
__w_¡Ýv®


	)

	@/usr/include/bits/wchar.h

19 #iâdeà
_BITS_WCHAR_H


20 
	#_BITS_WCHAR_H
 1

	)

33 #ifdeà
__WCHAR_MAX__


34 
	#__WCHAR_MAX
 
__WCHAR_MAX__


	)

35 #ià
L
'\0' - 1 > 0

36 
	#__WCHAR_MAX
 (0xffffffffu + 
L
'\0')

	)

38 
	#__WCHAR_MAX
 (0x7ffffffà+ 
L
'\0')

	)

41 #ifdeà
__WCHAR_MIN__


42 
	#__WCHAR_MIN
 
__WCHAR_MIN__


	)

43 #ià
L
'\0' - 1 > 0

44 
	#__WCHAR_MIN
 (
L
'\0' + 0)

	)

46 
	#__WCHAR_MIN
 (-
__WCHAR_MAX
 - 1)

	)

	@/usr/include/bits/wordsize.h

3 #ià
defed
 
__x86_64__
 && !defed 
__ILP32__


4 
	#__WORDSIZE
 64

	)

6 
	#__WORDSIZE
 32

	)

9 #ifdeà
__x86_64__


10 
	#__WORDSIZE_TIME64_COMPAT32
 1

	)

12 
	#__SYSCALL_WORDSIZE
 64

	)

	@/usr/include/bits/xopen_lim.h

29 #iâdeà
_XOPEN_LIM_H


30 
	#_XOPEN_LIM_H
 1

	)

32 
	#__Ãed_IOV_MAX


	)

33 
	~<bs/¡dio_lim.h
>

65 
	#_XOPEN_IOV_MAX
 
_POSIX_UIO_MAXIOV


	)

70 
	#NL_ARGMAX
 
_POSIX_ARG_MAX


	)

73 
	#NL_LANGMAX
 
_POSIX2_LINE_MAX


	)

76 
	#NL_MSGMAX
 
INT_MAX


	)

80 
	#NL_NMAX
 
INT_MAX


	)

83 
	#NL_SETMAX
 
INT_MAX


	)

86 
	#NL_TEXTMAX
 
INT_MAX


	)

89 
	#NZERO
 20

	)

93 #ifdeà
INT_MAX


94 #ià
INT_MAX
 == 32767

95 
	#WORD_BIT
 16

	)

97 #ià
INT_MAX
 == 2147483647

98 
	#WORD_BIT
 32

	)

101 
	#WORD_BIT
 64

	)

104 #ià
defed
 
__INT_MAX__


105 #ià
__INT_MAX__
 == 32767

106 
	#WORD_BIT
 16

	)

108 #ià
__INT_MAX__
 == 2147483647

109 
	#WORD_BIT
 32

	)

112 
	#WORD_BIT
 64

	)

116 
	#WORD_BIT
 32

	)

120 #ifdeà
LONG_MAX


121 #ià
LONG_MAX
 == 2147483647

122 
	#LONG_BIT
 32

	)

125 
	#LONG_BIT
 64

	)

127 #ià
defed
 
__LONG_MAX__


128 #ià
__LONG_MAX__
 == 2147483647

129 
	#LONG_BIT
 32

	)

132 
	#LONG_BIT
 64

	)

135 
	~<bs/wÜdsize.h
>

136 #ià
__WORDSIZE
 == 64

137 
	#LONG_BIT
 64

	)

139 
	#LONG_BIT
 32

	)

	@/usr/include/endian.h

18 #iâdef 
_ENDIAN_H


19 
	#_ENDIAN_H
 1

	)

21 
	~<ã©u»s.h
>

31 
	#__LITTLE_ENDIAN
 1234

	)

32 
	#__BIG_ENDIAN
 4321

	)

33 
	#__PDP_ENDIAN
 3412

	)

36 
	~<bs/dn.h
>

40 #iâdeà
__FLOAT_WORD_ORDER


41 
	#__FLOAT_WORD_ORDER
 
__BYTE_ORDER


	)

44 #ifdef 
__USE_BSD


45 
	#LITTLE_ENDIAN
 
__LITTLE_ENDIAN


	)

46 
	#BIG_ENDIAN
 
__BIG_ENDIAN


	)

47 
	#PDP_ENDIAN
 
__PDP_ENDIAN


	)

48 
	#BYTE_ORDER
 
__BYTE_ORDER


	)

51 #ià
__BYTE_ORDER
 =ð
__LITTLE_ENDIAN


52 
	#__LONG_LONG_PAIR
(
HI
, 
LO
èLO, 
	)
HI

53 #ià
__BYTE_ORDER
 =ð
__BIG_ENDIAN


54 
	#__LONG_LONG_PAIR
(
HI
, 
LO
èHI, 
	)
LO

58 #ià
defed
 
__USE_BSD
 && !defed 
__ASSEMBLER__


60 
	~<bs/bysw­.h
>

62 #ià
__BYTE_ORDER
 =ð
__LITTLE_ENDIAN


63 
	#htobe16
(
x
è
	`__bsw­_16
 (x)

	)

64 
	#htÞe16
(
x
è(x)

	)

65 
	#be16toh
(
x
è
	`__bsw­_16
 (x)

	)

66 
	#Ë16toh
(
x
è(x)

	)

68 
	#htobe32
(
x
è
	`__bsw­_32
 (x)

	)

69 
	#htÞe32
(
x
è(x)

	)

70 
	#be32toh
(
x
è
	`__bsw­_32
 (x)

	)

71 
	#Ë32toh
(
x
è(x)

	)

73 
	#htobe64
(
x
è
	`__bsw­_64
 (x)

	)

74 
	#htÞe64
(
x
è(x)

	)

75 
	#be64toh
(
x
è
	`__bsw­_64
 (x)

	)

76 
	#Ë64toh
(
x
è(x)

	)

79 
	#htobe16
(
x
è(x)

	)

80 
	#htÞe16
(
x
è
	`__bsw­_16
 (x)

	)

81 
	#be16toh
(
x
è(x)

	)

82 
	#Ë16toh
(
x
è
	`__bsw­_16
 (x)

	)

84 
	#htobe32
(
x
è(x)

	)

85 
	#htÞe32
(
x
è
	`__bsw­_32
 (x)

	)

86 
	#be32toh
(
x
è(x)

	)

87 
	#Ë32toh
(
x
è
	`__bsw­_32
 (x)

	)

89 
	#htobe64
(
x
è(x)

	)

90 
	#htÞe64
(
x
è
	`__bsw­_64
 (x)

	)

91 
	#be64toh
(
x
è(x)

	)

92 
	#Ë64toh
(
x
è
	`__bsw­_64
 (x)

	)

	@/usr/include/features.h

18 #iâdef 
_FEATURES_H


19 
	#_FEATURES_H
 1

	)

101 #undeà
__USE_ISOC11


102 #undeà
__USE_ISOC99


103 #undeà
__USE_ISOC95


104 #undeà
__USE_ISOCXX11


105 #undeà
__USE_POSIX


106 #undeà
__USE_POSIX2


107 #undeà
__USE_POSIX199309


108 #undeà
__USE_POSIX199506


109 #undeà
__USE_XOPEN


110 #undeà
__USE_XOPEN_EXTENDED


111 #undeà
__USE_UNIX98


112 #undeà
__USE_XOPEN2K


113 #undeà
__USE_XOPEN2KXSI


114 #undeà
__USE_XOPEN2K8


115 #undeà
__USE_XOPEN2K8XSI


116 #undeà
__USE_LARGEFILE


117 #undeà
__USE_LARGEFILE64


118 #undeà
__USE_FILE_OFFSET64


119 #undeà
__USE_BSD


120 #undeà
__USE_SVID


121 #undeà
__USE_MISC


122 #undeà
__USE_ATFILE


123 #undeà
__USE_GNU


124 #undeà
__USE_REENTRANT


125 #undeà
__USE_FORTIFY_LEVEL


126 #undeà
__KERNEL_STRICT_NAMES


130 #iâdeà
_LOOSE_KERNEL_NAMES


131 
	#__KERNEL_STRICT_NAMES


	)

141 #ià
defed
 
__GNUC__
 && defed 
__GNUC_MINOR__


142 
	#__GNUC_PREREQ
(
maj
, 
m
) \

143 ((
__GNUC__
 << 16è+ 
__GNUC_MINOR__
 >ð((
maj
è<< 16è+ (
m
))

	)

145 
	#__GNUC_PREREQ
(
maj
, 
m
è0

	)

150 #ifdeà
_GNU_SOURCE


151 #undeà
_ISOC95_SOURCE


152 
	#_ISOC95_SOURCE
 1

	)

153 #undeà
_ISOC99_SOURCE


154 
	#_ISOC99_SOURCE
 1

	)

155 #undeà
_ISOC11_SOURCE


156 
	#_ISOC11_SOURCE
 1

	)

157 #undeà
_POSIX_SOURCE


158 
	#_POSIX_SOURCE
 1

	)

159 #undeà
_POSIX_C_SOURCE


160 
	#_POSIX_C_SOURCE
 200809L

	)

161 #undeà
_XOPEN_SOURCE


162 
	#_XOPEN_SOURCE
 700

	)

163 #undeà
_XOPEN_SOURCE_EXTENDED


164 
	#_XOPEN_SOURCE_EXTENDED
 1

	)

165 #undeà
_LARGEFILE64_SOURCE


166 
	#_LARGEFILE64_SOURCE
 1

	)

167 #undeà
_DEFAULT_SOURCE


168 
	#_DEFAULT_SOURCE
 1

	)

169 #undeà
_BSD_SOURCE


170 
	#_BSD_SOURCE
 1

	)

171 #undeà
_SVID_SOURCE


172 
	#_SVID_SOURCE
 1

	)

173 #undeà
_ATFILE_SOURCE


174 
	#_ATFILE_SOURCE
 1

	)

179 #ià(
defed
 
_DEFAULT_SOURCE
 \

180 || (!
defed
 
	g__STRICT_ANSI__
 \

181 && !
defed
 
	g_ISOC99_SOURCE
 \

182 && !
defed
 
	g_POSIX_SOURCE
 && !defed 
	g_POSIX_C_SOURCE
 \

183 && !
defed
 
	g_XOPEN_SOURCE
 \

184 && !
defed
 
	g_BSD_SOURCE
 && !defed 
	g_SVID_SOURCE
))

185 #undeà
_DEFAULT_SOURCE


186 
	#_DEFAULT_SOURCE
 1

	)

187 #undeà
_BSD_SOURCE


188 
	#_BSD_SOURCE
 1

	)

189 #undeà
_SVID_SOURCE


190 
	#_SVID_SOURCE
 1

	)

194 #ià(
defed
 
_ISOC11_SOURCE
 \

195 || (
defed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 201112L))

196 
	#__USE_ISOC11
 1

	)

200 #ià(
defed
 
_ISOC99_SOURCE
 || defed 
_ISOC11_SOURCE
 \

201 || (
defed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L))

202 
	#__USE_ISOC99
 1

	)

206 #ià(
defed
 
_ISOC99_SOURCE
 || defed 
_ISOC11_SOURCE
 \

207 || (
defed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199409L))

208 
	#__USE_ISOC95
 1

	)

215 #ià((
defed
 
__ýlu¥lus
 && __cplusplus >= 201103L) \

216 || 
defed
 
__GXX_EXPERIMENTAL_CXX0X__
)

217 
	#__USE_ISOCXX11
 1

	)

223 #ifdeà
_DEFAULT_SOURCE


224 #ià!
defed
 
_POSIX_SOURCE
 && !defed 
_POSIX_C_SOURCE


225 
	#__USE_POSIX_IMPLICITLY
 1

	)

227 #undeà
_POSIX_SOURCE


228 
	#_POSIX_SOURCE
 1

	)

229 #undeà
_POSIX_C_SOURCE


230 
	#_POSIX_C_SOURCE
 200809L

	)

232 #ià((!
defed
 
__STRICT_ANSI__
 || (
_XOPEN_SOURCE
 - 0) >= 500) && \

233 !
defed
 
_POSIX_SOURCE
 && !defed 
_POSIX_C_SOURCE
)

234 
	#_POSIX_SOURCE
 1

	)

235 #ià
defed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 500

236 
	#_POSIX_C_SOURCE
 2

	)

237 #ià
defed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 600

238 
	#_POSIX_C_SOURCE
 199506L

	)

239 #ià
defed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 700

240 
	#_POSIX_C_SOURCE
 200112L

	)

242 
	#_POSIX_C_SOURCE
 200809L

	)

244 
	#__USE_POSIX_IMPLICITLY
 1

	)

247 #ià
defed
 
_POSIX_SOURCE
 || 
_POSIX_C_SOURCE
 >ð1 || defed 
_XOPEN_SOURCE


248 
	#__USE_POSIX
 1

	)

251 #ià
defed
 
_POSIX_C_SOURCE
 && _POSIX_C_SOURCE >ð2 || defed 
_XOPEN_SOURCE


252 
	#__USE_POSIX2
 1

	)

255 #ià(
_POSIX_C_SOURCE
 - 0) >= 199309L

256 
	#__USE_POSIX199309
 1

	)

259 #ià(
_POSIX_C_SOURCE
 - 0) >= 199506L

260 
	#__USE_POSIX199506
 1

	)

263 #ià(
_POSIX_C_SOURCE
 - 0) >= 200112L

264 
	#__USE_XOPEN2K
 1

	)

265 #undeà
__USE_ISOC95


266 
	#__USE_ISOC95
 1

	)

267 #undeà
__USE_ISOC99


268 
	#__USE_ISOC99
 1

	)

271 #ià(
_POSIX_C_SOURCE
 - 0) >= 200809L

272 
	#__USE_XOPEN2K8
 1

	)

273 #undeà
_ATFILE_SOURCE


274 
	#_ATFILE_SOURCE
 1

	)

277 #ifdef 
_XOPEN_SOURCE


278 
	#__USE_XOPEN
 1

	)

279 #ià(
_XOPEN_SOURCE
 - 0) >= 500

280 
	#__USE_XOPEN_EXTENDED
 1

	)

281 
	#__USE_UNIX98
 1

	)

282 #undeà
_LARGEFILE_SOURCE


283 
	#_LARGEFILE_SOURCE
 1

	)

284 #ià(
_XOPEN_SOURCE
 - 0) >= 600

285 #ià(
_XOPEN_SOURCE
 - 0) >= 700

286 
	#__USE_XOPEN2K8
 1

	)

287 
	#__USE_XOPEN2K8XSI
 1

	)

289 
	#__USE_XOPEN2K
 1

	)

290 
	#__USE_XOPEN2KXSI
 1

	)

291 #undeà
__USE_ISOC95


292 
	#__USE_ISOC95
 1

	)

293 #undeà
__USE_ISOC99


294 
	#__USE_ISOC99
 1

	)

297 #ifdeà
_XOPEN_SOURCE_EXTENDED


298 
	#__USE_XOPEN_EXTENDED
 1

	)

303 #ifdeà
_LARGEFILE_SOURCE


304 
	#__USE_LARGEFILE
 1

	)

307 #ifdeà
_LARGEFILE64_SOURCE


308 
	#__USE_LARGEFILE64
 1

	)

311 #ià
defed
 
_FILE_OFFSET_BITS
 && _FILE_OFFSET_BITS == 64

312 
	#__USE_FILE_OFFSET64
 1

	)

315 #ià
defed
 
_BSD_SOURCE
 || defed 
_SVID_SOURCE


316 
	#__USE_MISC
 1

	)

319 #ifdef 
_BSD_SOURCE


320 
	#__USE_BSD
 1

	)

323 #ifdef 
_SVID_SOURCE


324 
	#__USE_SVID
 1

	)

327 #ifdef 
_ATFILE_SOURCE


328 
	#__USE_ATFILE
 1

	)

331 #ifdef 
_GNU_SOURCE


332 
	#__USE_GNU
 1

	)

335 #ià
defed
 
_REENTRANT
 || defed 
_THREAD_SAFE


336 
	#__USE_REENTRANT
 1

	)

339 #ià
defed
 
_FORTIFY_SOURCE
 && _FORTIFY_SOURCE > 0 \

340 && 
__GNUC_PREREQ
 (4, 1è&& 
defed
 
	g__OPTIMIZE__
 && __OPTIMIZE__ > 0

341 #ià
_FORTIFY_SOURCE
 > 1

342 
	#__USE_FORTIFY_LEVEL
 2

	)

344 
	#__USE_FORTIFY_LEVEL
 1

	)

347 
	#__USE_FORTIFY_LEVEL
 0

	)

352 
	~<¡dc-´edef.h
>

360 #undeà
__GNU_LIBRARY__


361 
	#__GNU_LIBRARY__
 6

	)

365 
	#__GLIBC__
 2

	)

366 
	#__GLIBC_MINOR__
 19

	)

368 
	#__GLIBC_PREREQ
(
maj
, 
m
) \

369 ((
__GLIBC__
 << 16è+ 
__GLIBC_MINOR__
 >ð((
maj
è<< 16è+ (
m
))

	)

372 #iâdeà
__ASSEMBLER__


373 #iâdeà
_SYS_CDEFS_H


374 
	~<sys/cdefs.h
>

379 #ià
defed
 
__USE_FILE_OFFSET64
 && !defed 
__REDIRECT


380 
	#__USE_LARGEFILE
 1

	)

381 
	#__USE_LARGEFILE64
 1

	)

387 #ià
__GNUC_PREREQ
 (2, 7è&& 
defed
 
__OPTIMIZE__
 \

388 && !
defed
 
	g__OPTIMIZE_SIZE__
 && !defed 
	g__NO_INLINE__
 \

389 && 
defed
 
	g__exº_le


390 
	#__USE_EXTERN_INLINES
 1

	)

398 
	~<gnu/¡ubs.h
>

	@/usr/include/getopt.h

19 #iâdeà
_GETOPT_H


21 #iâdeà
__Ãed_gÝt


22 
	#_GETOPT_H
 1

	)

32 #ià!
defed
 
__GNU_LIBRARY__


33 
	~<ùy³.h
>

36 #iâdeà
__THROW


37 #iâdeà
__GNUC_PREREQ


38 
	#__GNUC_PREREQ
(
maj
, 
m
è(0)

	)

40 #ià
defed
 
__ýlu¥lus
 && 
__GNUC_PREREQ
 (2,8)

41 
	#__THROW
 
	`throw
 ()

	)

43 
	#__THROW


	)

47 #ifdef 
__ýlu¥lus


57 *
Ýrg
;

71 
Ýtd
;

76 
Ý¼
;

80 
ÝtÝt
;

82 #iâdeà
__Ãed_gÝt


104 
	sÝtiÚ


106 cÚ¡ *
	gÇme
;

109 
	ghas_¬g
;

110 *
	gæag
;

111 
	gv®
;

116 
	#no_¬gumt
 0

	)

117 
	#»qued_¬gumt
 1

	)

118 
	#ÝtiÚ®_¬gumt
 2

	)

146 #ifdeà
__GNU_LIBRARY__


150 
gÝt
 (
___¬gc
, *cÚ¡ *
___¬gv
, cÚ¡ *
__shÜtÝts
)

151 
__THROW
;

153 #ià
defed
 
__Ãed_gÝt
 && defed 
__USE_POSIX2
 \

154 && !
defed
 
	g__USE_POSIX_IMPLICITLY
 && !defed 
	g__USE_GNU


158 #ifdeà
__REDIRECT


159 
__REDIRECT_NTH
 (
gÝt
, (
___¬gc
, *cÚ¡ *
___¬gv
,

160 cÚ¡ *
__shÜtÝts
),

161 
__posix_gÝt
);

163 
__posix_gÝt
 (
___¬gc
, *cÚ¡ *
___¬gv
,

164 cÚ¡ *
__shÜtÝts
è
__THROW
;

165 
	#gÝt
 
__posix_gÝt


	)

169 
gÝt
 ();

172 #iâdeà
__Ãed_gÝt


173 
gÝt_lÚg
 (
___¬gc
, *cÚ¡ *
___¬gv
,

174 cÚ¡ *
__shÜtÝts
,

175 cÚ¡ 
ÝtiÚ
 *
__lÚgÝts
, *
__lÚgd
)

176 
__THROW
;

177 
gÝt_lÚg_Úly
 (
___¬gc
, *cÚ¡ *
___¬gv
,

178 cÚ¡ *
__shÜtÝts
,

179 cÚ¡ 
ÝtiÚ
 *
__lÚgÝts
, *
__lÚgd
)

180 
__THROW
;

184 #ifdef 
__ýlu¥lus


189 #undeà
__Ãed_gÝt


	@/usr/include/libio.h

28 #iâdeà
_IO_STDIO_H


29 
	#_IO_STDIO_H


	)

31 
	~<_G_cÚfig.h
>

33 
	#_IO_åos_t
 
_G_åos_t


	)

34 
	#_IO_åos64_t
 
_G_åos64_t


	)

35 
	#_IO_size_t
 
size_t


	)

36 
	#_IO_ssize_t
 
__ssize_t


	)

37 
	#_IO_off_t
 
__off_t


	)

38 
	#_IO_off64_t
 
__off64_t


	)

39 
	#_IO_pid_t
 
__pid_t


	)

40 
	#_IO_uid_t
 
__uid_t


	)

41 
	#_IO_icÚv_t
 
_G_icÚv_t


	)

42 
	#_IO_HAVE_ST_BLKSIZE
 
_G_HAVE_ST_BLKSIZE


	)

43 
	#_IO_BUFSIZ
 
_G_BUFSIZ


	)

44 
	#_IO_va_li¡
 
_G_va_li¡


	)

45 
	#_IO_wt_t
 
wt_t


	)

48 
	#__Ãed___va_li¡


	)

49 
	~<¡d¬g.h
>

50 #ifdeà
__GNUC_VA_LIST


51 #undeà
_IO_va_li¡


52 
	#_IO_va_li¡
 
__gnuc_va_li¡


	)

55 #iâdeà
__P


56 
	~<sys/cdefs.h
>

59 
	#_IO_UNIFIED_JUMPTABLES
 1

	)

61 #iâdeà
EOF


62 
	#EOF
 (-1)

	)

64 #iâdeà
NULL


65 #ià
defed
 
__GNUG__
 && \

66 (
	g__GNUC__
 > 2 || (__GNUC__ =ð2 && 
__GNUC_MINOR__
 >= 8))

67 
	#NULL
 (
__nuÎ
)

	)

69 #ià!
defed
(
__ýlu¥lus
)

70 
	#NULL
 ((*)0)

	)

72 
	#NULL
 (0)

	)

77 
	#_IOS_INPUT
 1

	)

78 
	#_IOS_OUTPUT
 2

	)

79 
	#_IOS_ATEND
 4

	)

80 
	#_IOS_APPEND
 8

	)

81 
	#_IOS_TRUNC
 16

	)

82 
	#_IOS_NOCREATE
 32

	)

83 
	#_IOS_NOREPLACE
 64

	)

84 
	#_IOS_BIN
 128

	)

92 
	#_IO_MAGIC
 0xFBAD0000

	)

93 
	#_OLD_STDIO_MAGIC
 0xFABC0000

	)

94 
	#_IO_MAGIC_MASK
 0xFFFF0000

	)

95 
	#_IO_USER_BUF
 1

	)

96 
	#_IO_UNBUFFERED
 2

	)

97 
	#_IO_NO_READS
 4

	)

98 
	#_IO_NO_WRITES
 8

	)

99 
	#_IO_EOF_SEEN
 0x10

	)

100 
	#_IO_ERR_SEEN
 0x20

	)

101 
	#_IO_DELETE_DONT_CLOSE
 0x40

	)

102 
	#_IO_LINKED
 0x80

	)

103 
	#_IO_IN_BACKUP
 0x100

	)

104 
	#_IO_LINE_BUF
 0x200

	)

105 
	#_IO_TIED_PUT_GET
 0x400

	)

106 
	#_IO_CURRENTLY_PUTTING
 0x800

	)

107 
	#_IO_IS_APPENDING
 0x1000

	)

108 
	#_IO_IS_FILEBUF
 0x2000

	)

109 
	#_IO_BAD_SEEN
 0x4000

	)

110 
	#_IO_USER_LOCK
 0x8000

	)

112 
	#_IO_FLAGS2_MMAP
 1

	)

113 
	#_IO_FLAGS2_NOTCANCEL
 2

	)

114 #ifdeà
_LIBC


115 
	#_IO_FLAGS2_FORTIFY
 4

	)

117 
	#_IO_FLAGS2_USER_WBUF
 8

	)

118 #ifdeà
_LIBC


119 
	#_IO_FLAGS2_SCANF_STD
 16

	)

120 
	#_IO_FLAGS2_NOCLOSE
 32

	)

121 
	#_IO_FLAGS2_CLOEXEC
 64

	)

125 
	#_IO_SKIPWS
 01

	)

126 
	#_IO_LEFT
 02

	)

127 
	#_IO_RIGHT
 04

	)

128 
	#_IO_INTERNAL
 010

	)

129 
	#_IO_DEC
 020

	)

130 
	#_IO_OCT
 040

	)

131 
	#_IO_HEX
 0100

	)

132 
	#_IO_SHOWBASE
 0200

	)

133 
	#_IO_SHOWPOINT
 0400

	)

134 
	#_IO_UPPERCASE
 01000

	)

135 
	#_IO_SHOWPOS
 02000

	)

136 
	#_IO_SCIENTIFIC
 04000

	)

137 
	#_IO_FIXED
 010000

	)

138 
	#_IO_UNITBUF
 020000

	)

139 
	#_IO_STDIO
 040000

	)

140 
	#_IO_DONT_CLOSE
 0100000

	)

141 
	#_IO_BOOLALPHA
 0200000

	)

144 
_IO_jump_t
; 
	g_IO_FILE
;

147 #ifdeà
_IO_MTSAFE_IO


148 #ià
defed
 
__GLIBC__
 && __GLIBC__ >= 2

149 
	~<bs/¡dio-lock.h
>

154 
	t_IO_lock_t
;

160 
	s_IO_m¬k
 {

161 
_IO_m¬k
 *
	m_Ãxt
;

162 
_IO_FILE
 *
	m_sbuf
;

166 
	m_pos
;

168 
£t_¡»ampos
(
¡»ampos
 
¥
è{ 
	m_¥os
 = sp; }

169 
£t_off£t
(
off£t
è{ 
	m_pos
 = off£t; 
	m_¥os
 = (
¡»ampos
)(-2); }

170 
	mpublic
:

171 
¡»amm¬k
(
¡»ambuf
 *
sb
);

172 ~
¡»amm¬k
();

173 
§vg
(è{  
	m_¥os
 == -2; }

174 
d
(
¡»amm¬k
&);

175 
d
();

180 
	e__codecvt_»suÉ


182 
	m__codecvt_ok
,

183 
	m__codecvt_·¹l
,

184 
	m__codecvt_rÜ
,

185 
	m__codecvt_nocÚv


188 #ià
defed
 
_LIBC
 || defed 
_GLIBCPP_USE_WCHAR_T


191 
	s_IO_codecvt


193 (*
	m__codecvt_de¡r
è(
	m_IO_codecvt
 *);

194 
__codecvt_»suÉ
 (*
__codecvt_do_out
è(
	m_IO_codecvt
 *,

195 
	m__mb¡©e_t
 *,

196 cÚ¡ 
	mwch¬_t
 *,

197 cÚ¡ 
	mwch¬_t
 *,

198 cÚ¡ 
	mwch¬_t
 **, *,

200 
__codecvt_»suÉ
 (*
__codecvt_do_unshiá
è(
	m_IO_codecvt
 *,

201 
	m__mb¡©e_t
 *, *,

203 
__codecvt_»suÉ
 (*
__codecvt_do_
è(
	m_IO_codecvt
 *,

204 
	m__mb¡©e_t
 *,

206 cÚ¡ **, 
	mwch¬_t
 *,

207 
	mwch¬_t
 *, wchar_t **);

208 (*
	m__codecvt_do_codg
è(
	m_IO_codecvt
 *);

209 (*
	m__codecvt_do_®ways_nocÚv
è(
	m_IO_codecvt
 *);

210 (*
	m__codecvt_do_Ëngth
è(
	m_IO_codecvt
 *, 
	m__mb¡©e_t
 *,

211 cÚ¡ *, cÚ¡ *, 
	m_IO_size_t
);

212 (*
	m__codecvt_do_max_Ëngth
è(
	m_IO_codecvt
 *);

214 
_IO_icÚv_t
 
	m__cd_
;

215 
_IO_icÚv_t
 
	m__cd_out
;

219 
	s_IO_wide_d©a


221 
wch¬_t
 *
	m_IO_»ad_±r
;

222 
wch¬_t
 *
	m_IO_»ad_d
;

223 
wch¬_t
 *
	m_IO_»ad_ba£
;

224 
wch¬_t
 *
	m_IO_wre_ba£
;

225 
wch¬_t
 *
	m_IO_wre_±r
;

226 
wch¬_t
 *
	m_IO_wre_d
;

227 
wch¬_t
 *
	m_IO_buf_ba£
;

228 
wch¬_t
 *
	m_IO_buf_d
;

230 
wch¬_t
 *
	m_IO_§ve_ba£
;

231 
wch¬_t
 *
	m_IO_backup_ba£
;

233 
wch¬_t
 *
	m_IO_§ve_d
;

235 
__mb¡©e_t
 
	m_IO_¡©e
;

236 
__mb¡©e_t
 
	m_IO_Ï¡_¡©e
;

237 
_IO_codecvt
 
	m_codecvt
;

239 
wch¬_t
 
	m_shÜtbuf
[1];

241 cÚ¡ 
_IO_jump_t
 *
	m_wide_vbË
;

245 
	s_IO_FILE
 {

246 
	m_æags
;

247 
	#_IO_fe_æags
 
_æags


	)

251 * 
	m_IO_»ad_±r
;

252 * 
	m_IO_»ad_d
;

253 * 
	m_IO_»ad_ba£
;

254 * 
	m_IO_wre_ba£
;

255 * 
	m_IO_wre_±r
;

256 * 
	m_IO_wre_d
;

257 * 
	m_IO_buf_ba£
;

258 * 
	m_IO_buf_d
;

260 *
	m_IO_§ve_ba£
;

261 *
	m_IO_backup_ba£
;

262 *
	m_IO_§ve_d
;

264 
_IO_m¬k
 *
	m_m¬ks
;

266 
_IO_FILE
 *
	m_cha
;

268 
	m_fo
;

270 
	m_blksize
;

272 
	m_æags2
;

274 
_IO_off_t
 
	m_Þd_off£t
;

276 
	#__HAVE_COLUMN


	)

278 
	m_cur_cÞumn
;

279 sigÃd 
	m_vbË_off£t
;

280 
	m_shÜtbuf
[1];

284 
_IO_lock_t
 *
	m_lock
;

285 #ifdeà
_IO_USE_OLD_IO_FILE


288 
	s_IO_FILE_com¶e


290 
_IO_FILE
 
	m_fe
;

292 #ià
defed
 
_G_IO_IO_FILE_VERSION
 && _G_IO_IO_FILE_VERSION == 0x20001

293 
_IO_off64_t
 
	m_off£t
;

294 #ià
defed
 
_LIBC
 || defed 
_GLIBCPP_USE_WCHAR_T


296 
_IO_codecvt
 *
	m_codecvt
;

297 
_IO_wide_d©a
 *
	m_wide_d©a
;

298 
_IO_FILE
 *
	m_ä»s_li¡
;

299 *
	m_ä»s_buf
;

300 
size_t
 
	m_ä»s_size
;

302 *
	m__·d1
;

303 *
	m__·d2
;

304 *
	m__·d3
;

305 *
	m__·d4
;

306 
size_t
 
	m__·d5
;

308 
	m_mode
;

310 
	m_unu£d2
[15 *  (è- 4 *  (*è-  (
size_t
)];

314 #iâdeà
__ýlu¥lus


315 
_IO_FILE
 
	t_IO_FILE
;

318 
	g_IO_FILE_¶us
;

320 
_IO_FILE_¶us
 
_IO_2_1_¡d_
;

321 
_IO_FILE_¶us
 
_IO_2_1_¡dout_
;

322 
_IO_FILE_¶us
 
_IO_2_1_¡dr_
;

323 #iâdeà
_LIBC


324 
	#_IO_¡d
 ((
_IO_FILE
*)(&
_IO_2_1_¡d_
))

	)

325 
	#_IO_¡dout
 ((
_IO_FILE
*)(&
_IO_2_1_¡dout_
))

	)

326 
	#_IO_¡dr
 ((
_IO_FILE
*)(&
_IO_2_1_¡dr_
))

	)

328 
_IO_FILE
 *
_IO_¡d
 
©ibu_hidd
;

329 
_IO_FILE
 *
_IO_¡dout
 
©ibu_hidd
;

330 
_IO_FILE
 *
_IO_¡dr
 
©ibu_hidd
;

338 
__ssize_t
 
	t__io_»ad_â
 (*
	t__cook
, *
	t__buf
, 
	tsize_t
 
	t__nbys
);

346 
__ssize_t
 
	t__io_wre_â
 (*
	t__cook
, cÚ¡ *
	t__buf
,

347 
	tsize_t
 
	t__n
);

355 
	t__io_£ek_â
 (*
	t__cook
, 
	t_IO_off64_t
 *
	t__pos
, 
	t__w
);

358 
	t__io_þo£_â
 (*
	t__cook
);

361 #ifdeà
_GNU_SOURCE


363 
__io_»ad_â
 
	tcook_»ad_funùiÚ_t
;

364 
__io_wre_â
 
	tcook_wre_funùiÚ_t
;

365 
__io_£ek_â
 
	tcook_£ek_funùiÚ_t
;

366 
__io_þo£_â
 
	tcook_þo£_funùiÚ_t
;

371 
__io_»ad_â
 *
	m»ad
;

372 
__io_wre_â
 *
	mwre
;

373 
__io_£ek_â
 *
	m£ek
;

374 
__io_þo£_â
 *
	mþo£
;

375 } 
	t_IO_cook_io_funùiÚs_t
;

376 
_IO_cook_io_funùiÚs_t
 
	tcook_io_funùiÚs_t
;

378 
	g_IO_cook_fe
;

381 
_IO_cook_
 (
_IO_cook_fe
 *
__cfe
, 
__»ad_wre
,

382 *
__cook
, 
_IO_cook_io_funùiÚs_t
 
__âs
);

386 #ifdeà
__ýlu¥lus


390 
__undæow
 (
_IO_FILE
 *);

391 
__uæow
 (
_IO_FILE
 *);

392 
__ovæow
 (
_IO_FILE
 *, );

393 #ià
defed
 
_LIBC
 || defed 
_GLIBCPP_USE_WCHAR_T


394 
_IO_wt_t
 
__wundæow
 (
_IO_FILE
 *);

395 
_IO_wt_t
 
__wuæow
 (
_IO_FILE
 *);

396 
_IO_wt_t
 
__wovæow
 (
_IO_FILE
 *, _IO_wint_t);

399 #ià 
__GNUC__
 >= 3

400 
	#_IO_BE
(
ex´
, 
»s
è
	`__but_ex³ù
 (Óx´),es)

	)

402 
	#_IO_BE
(
ex´
, 
»s
èÓx´)

	)

405 
	#_IO_gc_uÆocked
(
_å
) \

406 (
	`_IO_BE
 ((
_å
)->
_IO_»ad_±r
 >ð(_å)->
_IO_»ad_d
, 0) \

407 ? 
	`__uæow
 (
_å
è: *(*è(_å)->
_IO_»ad_±r
++)

	)

408 
	#_IO_³ekc_uÆocked
(
_å
) \

409 (
	`_IO_BE
 ((
_å
)->
_IO_»ad_±r
 >ð(_å)->
_IO_»ad_d
, 0) \

410 && 
	`__undæow
 (
_å
è=ð
EOF
 ? EOF \

411 : *(*è(
_å
)->
_IO_»ad_±r
)

	)

412 
	#_IO_putc_uÆocked
(
_ch
, 
_å
) \

413 (
	`_IO_BE
 ((
_å
)->
_IO_wre_±r
 >ð(_å)->
_IO_wre_d
, 0) \

414 ? 
	`__ovæow
 (
_å
, (è(
_ch
)) \

415 : (è(*(
_å
)->
_IO_wre_±r
++ = (
_ch
)))

	)

417 #ià
defed
 
_LIBC
 || defed 
_GLIBCPP_USE_WCHAR_T


418 
	#_IO_gwc_uÆocked
(
_å
) \

419 (
	`_IO_BE
 ((
_å
)->
_wide_d©a
 =ð
NULL
 \

420 || ((
_å
)->
_wide_d©a
->
_IO_»ad_±r
 \

421 >ð(
_å
)->
_wide_d©a
->
_IO_»ad_d
), 0) \

422 ? 
	`__wuæow
 (
_å
è: (
_IO_wt_t
è*(_å)->
_wide_d©a
->
_IO_»ad_±r
++)

	)

423 
	#_IO_putwc_uÆocked
(
_wch
, 
_å
) \

424 (
	`_IO_BE
 ((
_å
)->
_wide_d©a
 =ð
NULL
 \

425 || ((
_å
)->
_wide_d©a
->
_IO_wre_±r
 \

426 >ð(
_å
)->
_wide_d©a
->
_IO_wre_d
), 0) \

427 ? 
	`__wovæow
 (
_å
, 
_wch
) \

428 : (
_IO_wt_t
è(*(
_å
)->
_wide_d©a
->
_IO_wre_±r
++ = (
_wch
)))

	)

431 
	#_IO_ãof_uÆocked
(
__å
è(((__å)->
_æags
 & 
_IO_EOF_SEEN
è!ð0)

	)

432 
	#_IO_ã¼Ü_uÆocked
(
__å
è(((__å)->
_æags
 & 
_IO_ERR_SEEN
è!ð0)

	)

434 
_IO_gc
 (
_IO_FILE
 *
__å
);

435 
_IO_putc
 (
__c
, 
_IO_FILE
 *
__å
);

436 
_IO_ãof
 (
_IO_FILE
 *
__å
è
__THROW
;

437 
_IO_ã¼Ü
 (
_IO_FILE
 *
__å
è
__THROW
;

439 
_IO_³ekc_locked
 (
_IO_FILE
 *
__å
);

442 
	#_IO_PENDING_OUTPUT_COUNT
(
_å
) \

443 ((
_å
)->
_IO_wre_±r
 - (_å)->
_IO_wre_ba£
)

	)

445 
_IO_æockfe
 (
_IO_FILE
 *è
__THROW
;

446 
_IO_fuÆockfe
 (
_IO_FILE
 *è
__THROW
;

447 
_IO_árylockfe
 (
_IO_FILE
 *è
__THROW
;

449 #ifdeà
_IO_MTSAFE_IO


450 
	#_IO_³ekc
(
_å
è
	`_IO_³ekc_locked
 (_å)

	)

451 
	#_IO_æockfe
(
_å
) \

452 ià(((
_å
)->
_æags
 & 
_IO_USER_LOCK
è=ð0è
	`_IO_æockfe
 (_å)

	)

453 
	#_IO_fuÆockfe
(
_å
) \

454 ià(((
_å
)->
_æags
 & 
_IO_USER_LOCK
è=ð0è
	`_IO_fuÆockfe
 (_å)

	)

456 
	#_IO_³ekc
(
_å
è
	`_IO_³ekc_uÆocked
 (_å)

	)

457 
	#_IO_æockfe
(
_å
è

	)

458 
	#_IO_fuÆockfe
(
_å
è

	)

459 
	#_IO_árylockfe
(
_å
è

	)

460 
	#_IO_þnup_»giÚ_¡¬t
(
_fù
, 
_å
è

	)

461 
	#_IO_þnup_»giÚ_d
(
_Do
è

	)

464 
_IO_vfsÿnf
 (
_IO_FILE
 * 
__»¡riù
, const * __restrict,

465 
_IO_va_li¡
, *
__»¡riù
);

466 
_IO_vårtf
 (
_IO_FILE
 *
__»¡riù
, const *__restrict,

467 
_IO_va_li¡
);

468 
_IO_ssize_t
 
_IO_·dn
 (
_IO_FILE
 *, , _IO_ssize_t);

469 
_IO_size_t
 
_IO_sgn
 (
_IO_FILE
 *, *, _IO_size_t);

471 
_IO_off64_t
 
_IO_£ekoff
 (
_IO_FILE
 *, _IO_off64_t, , );

472 
_IO_off64_t
 
_IO_£ekpos
 (
_IO_FILE
 *, _IO_off64_t, );

474 
_IO_ä_backup_¬
 (
_IO_FILE
 *è
__THROW
;

476 #ià
defed
 
_LIBC
 || defed 
_GLIBCPP_USE_WCHAR_T


477 
_IO_wt_t
 
_IO_gwc
 (
_IO_FILE
 *
__å
);

478 
_IO_wt_t
 
_IO_putwc
 (
wch¬_t
 
__wc
, 
_IO_FILE
 *
__å
);

479 
_IO_fwide
 (
_IO_FILE
 *
__å
, 
__mode
è
__THROW
;

480 #ià
__GNUC__
 >= 2

483 #ià
defed
 
_LIBC
 && defed 
SHARED


484 
	~<shlib-com·t.h
>

485 #ià
SHLIB_COMPAT
 (
libc
, 
GLIBC_2_0
, 
GLIBC_2_1
)

486 
	#_IO_fwide_maybe_com·tibË
 \

487 (
	`__but_ex³ù
 (&
_IO_¡d_u£d
 =ð
NULL
, 0))

	)

488 cÚ¡ 
_IO_¡d_u£d
;

489 
wk_exº
 (
_IO_¡d_u£d
);

492 #iâdeà
_IO_fwide_maybe_com·tibË


493 
	#_IO_fwide_maybe_com·tibË
 (0)

	)

497 
	#_IO_fwide
(
__å
, 
__mode
) \

498 ({ 
__»suÉ
 = (
__mode
); \

499 ià(
__»suÉ
 < 0 && ! 
_IO_fwide_maybe_com·tibË
) \

501 ià((
__å
)->
_mode
 == 0) \

503 (
__å
)->
_mode
 = -1; \

504 
__»suÉ
 = (
__å
)->
_mode
; \

506 ià(
	`__but_cÚ¡ªt_p
 (
__mode
) && (__mode) == 0) \

507 
__»suÉ
 = 
_IO_fwide_maybe_com·tibË
 ? -1 : (
__å
)->
_mode
; \

509 
__»suÉ
 = 
	`_IO_fwide
 (
__å
, __result); \

510 
__»suÉ
; })

	)

513 
_IO_vfwsÿnf
 (
_IO_FILE
 * 
__»¡riù
, cÚ¡ 
wch¬_t
 * __restrict,

514 
_IO_va_li¡
, *
__»¡riù
);

515 
_IO_vfw´tf
 (
_IO_FILE
 *
__»¡riù
, cÚ¡ 
wch¬_t
 *__restrict,

516 
_IO_va_li¡
);

517 
_IO_ssize_t
 
_IO_w·dn
 (
_IO_FILE
 *, 
wt_t
, _IO_ssize_t);

518 
_IO_ä_wbackup_¬
 (
_IO_FILE
 *è
__THROW
;

521 #ifdeà
__LDBL_COMPAT


522 
	~<bs/libio-ldbl.h
>

525 #ifdeà
__ýlu¥lus


	@/usr/include/linux/if_ether.h

21 #iâdeà
_LINUX_IF_ETHER_H


22 
	#_LINUX_IF_ETHER_H


	)

24 
	~<lux/ty³s.h
>

31 
	#ETH_ALEN
 6

	)

32 
	#ETH_HLEN
 14

	)

33 
	#ETH_ZLEN
 60

	)

34 
	#ETH_DATA_LEN
 1500

	)

35 
	#ETH_FRAME_LEN
 1514

	)

36 
	#ETH_FCS_LEN
 4

	)

42 
	#ETH_P_LOOP
 0x0060

	)

43 
	#ETH_P_PUP
 0x0200

	)

44 
	#ETH_P_PUPAT
 0x0201

	)

45 
	#ETH_P_IP
 0x0800

	)

46 
	#ETH_P_X25
 0x0805

	)

47 
	#ETH_P_ARP
 0x0806

	)

48 
	#ETH_P_BPQ
 0x08FF

	)

49 
	#ETH_P_IEEEPUP
 0x0a00

	)

50 
	#ETH_P_IEEEPUPAT
 0x0a01

	)

51 
	#ETH_P_BATMAN
 0x4305

	)

52 
	#ETH_P_DEC
 0x6000

	)

53 
	#ETH_P_DNA_DL
 0x6001

	)

54 
	#ETH_P_DNA_RC
 0x6002

	)

55 
	#ETH_P_DNA_RT
 0x6003

	)

56 
	#ETH_P_LAT
 0x6004

	)

57 
	#ETH_P_DIAG
 0x6005

	)

58 
	#ETH_P_CUST
 0x6006

	)

59 
	#ETH_P_SCA
 0x6007

	)

60 
	#ETH_P_TEB
 0x6558

	)

61 
	#ETH_P_RARP
 0x8035

	)

62 
	#ETH_P_ATALK
 0x809B

	)

63 
	#ETH_P_AARP
 0x80F3

	)

64 
	#ETH_P_8021Q
 0x8100

	)

65 
	#ETH_P_IPX
 0x8137

	)

66 
	#ETH_P_IPV6
 0x86DD

	)

67 
	#ETH_P_PAUSE
 0x8808

	)

68 
	#ETH_P_SLOW
 0x8809

	)

69 
	#ETH_P_WCCP
 0x883E

	)

71 
	#ETH_P_PPP_DISC
 0x8863

	)

72 
	#ETH_P_PPP_SES
 0x8864

	)

73 
	#ETH_P_MPLS_UC
 0x8847

	)

74 
	#ETH_P_MPLS_MC
 0x8848

	)

75 
	#ETH_P_ATMMPOA
 0x884ø

	)

76 
	#ETH_P_LINK_CTL
 0x886ø

	)

77 
	#ETH_P_ATMFATE
 0x8884

	)

80 
	#ETH_P_PAE
 0x888E

	)

81 
	#ETH_P_AOE
 0x88A2

	)

82 
	#ETH_P_8021AD
 0x88A8

	)

83 
	#ETH_P_802_EX1
 0x88B5

	)

84 
	#ETH_P_TIPC
 0x88CA

	)

85 
	#ETH_P_8021AH
 0x88E7

	)

86 
	#ETH_P_MVRP
 0x88F5

	)

87 
	#ETH_P_1588
 0x88F7

	)

88 
	#ETH_P_PRP
 0x88FB

	)

89 
	#ETH_P_FCOE
 0x8906

	)

90 
	#ETH_P_TDLS
 0x890D

	)

91 
	#ETH_P_FIP
 0x8914

	)

92 
	#ETH_P_QINQ1
 0x9100

	)

93 
	#ETH_P_QINQ2
 0x9200

	)

94 
	#ETH_P_QINQ3
 0x9300

	)

95 
	#ETH_P_EDSA
 0xDADA

	)

96 
	#ETH_P_AF_IUCV
 0xFBFB

	)

98 
	#ETH_P_802_3_MIN
 0x0600

	)

105 
	#ETH_P_802_3
 0x0001

	)

106 
	#ETH_P_AX25
 0x0002

	)

107 
	#ETH_P_ALL
 0x0003

	)

108 
	#ETH_P_802_2
 0x0004

	)

109 
	#ETH_P_SNAP
 0x0005

	)

110 
	#ETH_P_DDCMP
 0x0006

	)

111 
	#ETH_P_WAN_PPP
 0x0007

	)

112 
	#ETH_P_PPP_MP
 0x0008

	)

113 
	#ETH_P_LOCALTALK
 0x0009

	)

114 
	#ETH_P_CAN
 0x000C

	)

115 
	#ETH_P_CANFD
 0x000D

	)

116 
	#ETH_P_PPPTALK
 0x0010

	)

117 
	#ETH_P_TR_802_2
 0x0011

	)

118 
	#ETH_P_MOBITEX
 0x0015

	)

119 
	#ETH_P_CONTROL
 0x0016

	)

120 
	#ETH_P_IRDA
 0x0017

	)

121 
	#ETH_P_ECONET
 0x0018

	)

122 
	#ETH_P_HDLC
 0x0019

	)

123 
	#ETH_P_ARCNET
 0x001A

	)

124 
	#ETH_P_DSA
 0x001B

	)

125 
	#ETH_P_TRAILER
 0x001C

	)

126 
	#ETH_P_PHONET
 0x00F5

	)

127 
	#ETH_P_IEEE802154
 0x00F6

	)

128 
	#ETH_P_CAIF
 0x00F7

	)

134 
	shhdr
 {

135 
	mh_de¡
[
ETH_ALEN
];

136 
	mh_sourû
[
ETH_ALEN
];

137 
__be16
 
	mh_´Ùo
;

138 } 
__©ibu__
((
·cked
));

	@/usr/include/sys/cdefs.h

18 #iâdef 
_SYS_CDEFS_H


19 
	#_SYS_CDEFS_H
 1

	)

22 #iâdeà
_FEATURES_H


23 
	~<ã©u»s.h
>

29 #ià
defed
 
__GNUC__
 && !defed 
__STDC__


34 #undeà
__P


35 #undeà
__PMT


37 #ifdeà
__GNUC__


41 #ià
__GNUC_PREREQ
 (4, 6è&& !
defed
 
_LIBC


42 
	#__LEAF
 , 
__Ëaf__


	)

43 
	#__LEAF_ATTR
 
	`__©ibu__
 ((
__Ëaf__
))

	)

45 
	#__LEAF


	)

46 
	#__LEAF_ATTR


	)

54 #ià!
defed
 
__ýlu¥lus
 && 
__GNUC_PREREQ
 (3, 3)

55 
	#__THROW
 
	`__©ibu__
 ((
__nÙhrow__
 
__LEAF
))

	)

56 
	#__THROWNL
 
	`__©ibu__
 ((
__nÙhrow__
))

	)

57 
	#__NTH
(
fù
è
	`__©ibu__
 ((
__nÙhrow__
 
__LEAF
)è
	)
fù

59 #ià
defed
 
__ýlu¥lus
 && 
__GNUC_PREREQ
 (2,8)

60 
	#__THROW
 
	`throw
 ()

	)

61 
	#__THROWNL
 
	`throw
 ()

	)

62 
	#__NTH
(
fù
è
__LEAF_ATTR
 fù 
	`throw
 ()

	)

64 
	#__THROW


	)

65 
	#__THROWNL


	)

66 
	#__NTH
(
fù
è
	)
fù

72 
	#__le


	)

74 
	#__THROW


	)

75 
	#__THROWNL


	)

76 
	#__NTH
(
fù
è
	)
fù

82 
	#__P
(
¬gs
è
	)
¬gs

83 
	#__PMT
(
¬gs
è
	)
¬gs

88 
	#__CONCAT
(
x
,
y
èx ## 
	)
y

89 
	#__STRING
(
x
è#x

	)

92 
	#__±r_t
 *

	)

93 
	#__lÚg_doubË_t
 

	)

97 #ifdef 
__ýlu¥lus


98 
	#__BEGIN_DECLS
 "C" {

	)

99 
	#__END_DECLS
 }

	)

101 
	#__BEGIN_DECLS


	)

102 
	#__END_DECLS


	)

111 #ià
defed
 
__ýlu¥lus
 && defed 
_GLIBCPP_USE_NAMESPACES


112 
	#__BEGIN_NAMESPACE_STD
 
Çme¥aû
 
¡d
 {

	)

113 
	#__END_NAMESPACE_STD
 }

	)

114 
	#__USING_NAMESPACE_STD
(
Çme
è
usg
 
¡d
::Çme;

	)

115 
	#__BEGIN_NAMESPACE_C99
 
Çme¥aû
 
__c99
 {

	)

116 
	#__END_NAMESPACE_C99
 }

	)

117 
	#__USING_NAMESPACE_C99
(
Çme
è
usg
 
__c99
::Çme;

	)

122 
	#__BEGIN_NAMESPACE_STD


	)

123 
	#__END_NAMESPACE_STD


	)

124 
	#__USING_NAMESPACE_STD
(
Çme
)

	)

125 
	#__BEGIN_NAMESPACE_C99


	)

126 
	#__END_NAMESPACE_C99


	)

127 
	#__USING_NAMESPACE_C99
(
Çme
)

	)

132 
	#__bos
(
±r
è
	`__but_objeù_size
 (±r, 
__USE_FORTIFY_LEVEL
 > 1)

	)

133 
	#__bos0
(
±r
è
	`__but_objeù_size
 (±r, 0)

	)

134 
	#__fÜtify_funùiÚ
 
__exº_®ways_le
 
__©ibu_¬tificl__


	)

136 #ià
__GNUC_PREREQ
 (4,3)

137 
	#__w¬ndeþ
(
Çme
, 
msg
) \

138 
	`Çme
 (è
	`__©ibu__
((
	`__w¬ng__
 (
msg
)))

	)

139 
	#__w¬Çr
(
msg
è
	`__©ibu__
((
	`__w¬ng__
 (msg)))

	)

140 
	#__rÜdeþ
(
Çme
, 
msg
) \

141 
	`Çme
 (è
	`__©ibu__
((
	`__rÜ__
 (
msg
)))

	)

143 
	#__w¬ndeþ
(
Çme
, 
msg
è
	`Çme
 ()

	)

144 
	#__w¬Çr
(
msg
)

	)

145 
	#__rÜdeþ
(
Çme
, 
msg
è
	`Çme
 ()

	)

149 #ià
__GNUC_PREREQ
 (2,97)

151 
	#__æex¬r
 []

	)

153 #ifdeà
__GNUC__


154 
	#__æex¬r
 [0]

	)

156 #ià
defed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

157 
	#__æex¬r
 []

	)

160 
	#__æex¬r
 [1]

	)

176 #ià
defed
 
__GNUC__
 && __GNUC__ >= 2

178 
	#__REDIRECT
(
Çme
, 
´Ùo
, 
®s
èÇm´ÙØ
	`__asm__
 (
	`__ASMNAME
 (#®s))

	)

179 #ifdeà
__ýlu¥lus


180 
	#__REDIRECT_NTH
(
Çme
, 
´Ùo
, 
®s
) \

181 
Çme
 
´Ùo
 
__THROW
 
	`__asm__
 (
	`__ASMNAME
 (#®s))

	)

182 
	#__REDIRECT_NTHNL
(
Çme
, 
´Ùo
, 
®s
) \

183 
Çme
 
´Ùo
 
__THROWNL
 
	`__asm__
 (
	`__ASMNAME
 (#®s))

	)

185 
	#__REDIRECT_NTH
(
Çme
, 
´Ùo
, 
®s
) \

186 
Çme
 
´Ùo
 
	`__asm__
 (
	`__ASMNAME
 (#®s)è
__THROW


	)

187 
	#__REDIRECT_NTHNL
(
Çme
, 
´Ùo
, 
®s
) \

188 
Çme
 
´Ùo
 
	`__asm__
 (
	`__ASMNAME
 (#®s)è
__THROWNL


	)

190 
	#__ASMNAME
(
úame
è
	`__ASMNAME2
 (
__USER_LABEL_PREFIX__
, cÇme)

	)

191 
	#__ASMNAME2
(
´efix
, 
úame
è
	`__STRING
 (´efixè
	)
úame

204 #ià!
defed
 
__GNUC__
 || __GNUC__ < 2

205 
	#__©ibu__
(
xyz
è

	)

211 #ià
__GNUC_PREREQ
 (2,96)

212 
	#__©ibu_m®loc__
 
	`__©ibu__
 ((
__m®loc__
))

	)

214 
	#__©ibu_m®loc__


	)

219 #ià
__GNUC_PREREQ
 (4, 3)

220 
	#__©ibu_®loc_size__
(
·¿ms
) \

221 
	`__©ibu__
 ((
__®loc_size__
 
·¿ms
))

	)

223 
	#__©ibu_®loc_size__
(
·¿ms
è

	)

229 #ià
__GNUC_PREREQ
 (2,96)

230 
	#__©ibu_pu»__
 
	`__©ibu__
 ((
__pu»__
))

	)

232 
	#__©ibu_pu»__


	)

236 #ià
__GNUC_PREREQ
 (2,5)

237 
	#__©ibu_cÚ¡__
 
	`__©ibu__
 ((
__cÚ¡__
))

	)

239 
	#__©ibu_cÚ¡__


	)

245 #ià
__GNUC_PREREQ
 (3,1)

246 
	#__©ibu_u£d__
 
	`__©ibu__
 ((
__u£d__
))

	)

247 
	#__©ibu_nole__
 
	`__©ibu__
 ((
__nole__
))

	)

249 
	#__©ibu_u£d__
 
	`__©ibu__
 ((
__unu£d__
))

	)

250 
	#__©ibu_nole__


	)

254 #ià
__GNUC_PREREQ
 (3,2)

255 
	#__©ibu_d»ÿd__
 
	`__©ibu__
 ((
__d»ÿd__
))

	)

257 
	#__©ibu_d»ÿd__


	)

266 #ià
__GNUC_PREREQ
 (2,8)

267 
	#__©ibu_fÜm©_¬g__
(
x
è
	`__©ibu__
 ((
	`__fÜm©_¬g__
 (x)))

	)

269 
	#__©ibu_fÜm©_¬g__
(
x
è

	)

276 #ià
__GNUC_PREREQ
 (2,97)

277 
	#__©ibu_fÜm©_¡rfmÚ__
(
a
,
b
) \

278 
	`__©ibu__
 ((
	`__fÜm©__
 (
__¡rfmÚ__
, 
a
, 
b
)))

	)

280 
	#__©ibu_fÜm©_¡rfmÚ__
(
a
,
b
è

	)

285 #ià
__GNUC_PREREQ
 (3,3)

286 
	#__nÚnuÎ
(
·¿ms
è
	`__©ibu__
 ((
__nÚnuÎ__
¬ams))

	)

288 
	#__nÚnuÎ
(
·¿ms
)

	)

293 #ià
__GNUC_PREREQ
 (3,4)

294 
	#__©ibu_w¬n_unu£d_»suÉ__
 \

295 
	`__©ibu__
 ((
__w¬n_unu£d_»suÉ__
))

	)

296 #ià
__USE_FORTIFY_LEVEL
 > 0

297 
	#__wur
 
__©ibu_w¬n_unu£d_»suÉ__


	)

300 
	#__©ibu_w¬n_unu£d_»suÉ__


	)

302 #iâdeà
__wur


303 
	#__wur


	)

307 #ià
__GNUC_PREREQ
 (3,2)

308 
	#__®ways_le
 
__le
 
	`__©ibu__
 ((
__®ways_le__
))

	)

310 
	#__®ways_le
 
__le


	)

315 #ià
__GNUC_PREREQ
 (4,3)

316 
	#__©ibu_¬tificl__
 
	`__©ibu__
 ((
__¬tificl__
))

	)

318 
	#__©ibu_¬tificl__


	)

321 #ifdeà
__GNUC__


326 #ià
defed
 
__GNUC_STDC_INLINE__
 || defed 
__GNUC_GNU_INLINE__


327 
	#__exº_le
 
__le
 
	`__©ibu__
 ((
__gnu_le__
))

	)

328 
	#__exº_®ways_le
 \

329 
__®ways_le
 
	`__©ibu__
 ((
__gnu_le__
))

	)

331 
	#__exº_le
 
__le


	)

332 
	#__exº_®ways_le
 
__®ways_le


	)

335 
	#__exº_le


	)

336 
	#__exº_®ways_le


	)

341 #ià
__GNUC_PREREQ
 (4,3)

342 
	#__va_¬g_·ck
(è
	`__but_va_¬g_·ck
 ()

	)

343 
	#__va_¬g_·ck_Ën
(è
	`__but_va_¬g_·ck_Ën
 ()

	)

350 #ià!
__GNUC_PREREQ
 (2,8)

351 
	#__exnsiÚ__


	)

355 #ià!
__GNUC_PREREQ
 (2,92)

356 
	#__»¡riù


	)

362 #ià
__GNUC_PREREQ
 (3,1è&& !
defed
 
__GNUG__


363 
	#__»¡riù_¬r
 
__»¡riù


	)

365 #ifdeà
__GNUC__


366 
	#__»¡riù_¬r


	)

368 #ià
defed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

369 
	#__»¡riù_¬r
 
»¡riù


	)

372 
	#__»¡riù_¬r


	)

377 #ià
__GNUC__
 >= 3

378 
	#__glibc_uÆiky
(
cÚd
è
	`__but_ex³ù
 ((cÚd), 0)

	)

379 
	#__glibc_liky
(
cÚd
è
	`__but_ex³ù
 ((cÚd), 1)

	)

381 
	#__glibc_uÆiky
(
cÚd
è(cÚd)

	)

382 
	#__glibc_liky
(
cÚd
è(cÚd)

	)

385 
	~<bs/wÜdsize.h
>

387 #ià
defed
 
__LONG_DOUBLE_MATH_OPTIONAL
 && defed 
__NO_LONG_DOUBLE_MATH


388 
	#__LDBL_COMPAT
 1

	)

389 #ifdeà
__REDIRECT


390 
	#__LDBL_REDIR1
(
Çme
, 
´Ùo
, 
®s
è
	`__REDIRECT
 (Çme,rÙo,ls)

	)

391 
	#__LDBL_REDIR
(
Çme
, 
´Ùo
) \

392 
	`__LDBL_REDIR1
 (
Çme
, 
´Ùo
, 
__Ædbl_
##Çme)

	)

393 
	#__LDBL_REDIR1_NTH
(
Çme
, 
´Ùo
, 
®s
è
	`__REDIRECT_NTH
 (Çme,rÙo,ls)

	)

394 
	#__LDBL_REDIR_NTH
(
Çme
, 
´Ùo
) \

395 
	`__LDBL_REDIR1_NTH
 (
Çme
, 
´Ùo
, 
__Ædbl_
##Çme)

	)

396 
	#__LDBL_REDIR1_DECL
(
Çme
, 
®s
) \

397 
	`__ty³of
 (
Çme
èÇm
	`__asm
 (
	`__ASMNAME
 (#®s));

	)

398 
	#__LDBL_REDIR_DECL
(
Çme
) \

399 
	`__ty³of
 (
Çme
èÇm
	`__asm
 (
	`__ASMNAME
 ("__Ædbl_" #Çme));

	)

400 
	#__REDIRECT_LDBL
(
Çme
, 
´Ùo
, 
®s
) \

401 
	`__LDBL_REDIR1
 (
Çme
, 
´Ùo
, 
__Ædbl_
##
®s
)

	)

402 
	#__REDIRECT_NTH_LDBL
(
Çme
, 
´Ùo
, 
®s
) \

403 
	`__LDBL_REDIR1_NTH
 (
Çme
, 
´Ùo
, 
__Ædbl_
##
®s
)

	)

406 #ià!
defed
 
__LDBL_COMPAT
 || !defed 
__REDIRECT


407 
	#__LDBL_REDIR1
(
Çme
, 
´Ùo
, 
®s
èÇm
	)
´Ùo

408 
	#__LDBL_REDIR
(
Çme
, 
´Ùo
èÇm
	)
´Ùo

409 
	#__LDBL_REDIR1_NTH
(
Çme
, 
´Ùo
, 
®s
èÇm´ÙØ
__THROW


	)

410 
	#__LDBL_REDIR_NTH
(
Çme
, 
´Ùo
èÇm´ÙØ
__THROW


	)

411 
	#__LDBL_REDIR_DECL
(
Çme
)

	)

412 #ifdeà
__REDIRECT


413 
	#__REDIRECT_LDBL
(
Çme
, 
´Ùo
, 
®s
è
	`__REDIRECT
 (Çme,rÙo,ls)

	)

414 
	#__REDIRECT_NTH_LDBL
(
Çme
, 
´Ùo
, 
®s
) \

415 
	`__REDIRECT_NTH
 (
Çme
, 
´Ùo
, 
®s
)

	)

	@/usr/include/sys/select.h

21 #iâdeà
_SYS_SELECT_H


22 
	#_SYS_SELECT_H
 1

	)

24 
	~<ã©u»s.h
>

27 
	~<bs/ty³s.h
>

30 
	~<bs/£Ëù.h
>

33 
	~<bs/sig£t.h
>

35 #iâdeà
__sig£t_t_defed


36 
	#__sig£t_t_defed


	)

37 
__sig£t_t
 
	tsig£t_t
;

41 
	#__Ãed_time_t


	)

42 
	#__Ãed_time¥ec


	)

43 
	~<time.h
>

44 
	#__Ãed_timev®


	)

45 
	~<bs/time.h
>

47 #iâdeà
__su£cÚds_t_defed


48 
__su£cÚds_t
 
	tsu£cÚds_t
;

49 
	#__su£cÚds_t_defed


	)

54 
	t__fd_mask
;

57 #undeà
__NFDBITS


59 
	#__NFDBITS
 (8 * (è (
__fd_mask
))

	)

60 
	#__FD_ELT
(
d
è((dè/ 
__NFDBITS
)

	)

61 
	#__FD_MASK
(
d
è((
__fd_mask
è1 << ((dè% 
__NFDBITS
))

	)

68 #ifdeà
__USE_XOPEN


69 
__fd_mask
 
	mfds_bs
[
__FD_SETSIZE
 / 
__NFDBITS
];

70 
	#__FDS_BITS
(
£t
è((£t)->
fds_bs
)

	)

72 
__fd_mask
 
	m__fds_bs
[
__FD_SETSIZE
 / 
__NFDBITS
];

73 
	#__FDS_BITS
(
£t
è((£t)->
__fds_bs
)

	)

75 } 
	tfd_£t
;

78 
	#FD_SETSIZE
 
__FD_SETSIZE


	)

80 #ifdeà
__USE_MISC


82 
__fd_mask
 
	tfd_mask
;

85 
	#NFDBITS
 
__NFDBITS


	)

90 
	#FD_SET
(
fd
, 
fd£
è
	`__FD_SET
 (fd, fd£)

	)

91 
	#FD_CLR
(
fd
, 
fd£
è
	`__FD_CLR
 (fd, fd£)

	)

92 
	#FD_ISSET
(
fd
, 
fd£
è
	`__FD_ISSET
 (fd, fd£)

	)

93 
	#FD_ZERO
(
fd£
è
	`__FD_ZERO
 (fd£)

	)

96 
__BEGIN_DECLS


106 
£Ëù
 (
__nfds
, 
fd_£t
 *
__»¡riù
 
__»adfds
,

107 
fd_£t
 *
__»¡riù
 
__wrefds
,

108 
fd_£t
 *
__»¡riù
 
__exû±fds
,

109 
timev®
 *
__»¡riù
 
__timeout
);

111 #ifdeà
__USE_XOPEN2K


118 
p£Ëù
 (
__nfds
, 
fd_£t
 *
__»¡riù
 
__»adfds
,

119 
fd_£t
 *
__»¡riù
 
__wrefds
,

120 
fd_£t
 *
__»¡riù
 
__exû±fds
,

121 cÚ¡ 
time¥ec
 *
__»¡riù
 
__timeout
,

122 cÚ¡ 
__sig£t_t
 *
__»¡riù
 
__sigmask
);

127 #ià
__USE_FORTIFY_LEVEL
 > 0 && 
defed
 
__GNUC__


128 
	~<bs/£Ëù2.h
>

131 
	g__END_DECLS


	@/usr/include/sys/sysmacros.h

19 #iâdeà
_SYS_SYSMACROS_H


20 
	#_SYS_SYSMACROS_H
 1

	)

22 
	~<ã©u»s.h
>

24 
__BEGIN_DECLS


26 
__exnsiÚ__


27 
	$gnu_dev_majÜ
 (
__dev
)

28 
__THROW
 
__©ibu_cÚ¡__
;

29 
__exnsiÚ__


30 
	$gnu_dev_mÜ
 (
__dev
)

31 
__THROW
 
__©ibu_cÚ¡__
;

32 
__exnsiÚ__


33 
	$gnu_dev_makedev
 (
__majÜ
,

34 
__mÜ
)

35 
__THROW
 
__©ibu_cÚ¡__
;

37 #ifdeà
__USE_EXTERN_INLINES


38 
__exnsiÚ__
 
__exº_le
 
__©ibu_cÚ¡__
 

39 
	`__NTH
 (
	$gnu_dev_majÜ
 (
__dev
))

41  ((
__dev
 >> 8) & 0xfff) | (() (__dev >> 32) & ~0xfff);

42 
	}
}

44 
__exnsiÚ__
 
__exº_le
 
__©ibu_cÚ¡__
 

45 
__NTH
 (
	$gnu_dev_mÜ
 (
__dev
))

47  (
__dev
 & 0xff) | (() (__dev >> 12) & ~0xff);

48 
	}
}

50 
__exnsiÚ__
 
__exº_le
 
__©ibu_cÚ¡__
 

51 
__NTH
 (
	$gnu_dev_makedev
 (
__majÜ
, 
__mÜ
))

53  ((
__mÜ
 & 0xffè| ((
__majÜ
 & 0xfff) << 8)

54 | (((è(
__mÜ
 & ~0xff)) << 12)

55 | (((è(
__majÜ
 & ~0xfff)) << 32));

56 
	}
}

58 
	g__END_DECLS


61 
	#majÜ
(
dev
è
	`gnu_dev_majÜ
 (dev)

	)

62 
	#mÜ
(
dev
è
	`gnu_dev_mÜ
 (dev)

	)

63 
	#makedev
(
maj
, 
m
è
	`gnu_dev_makedev
 (maj, m)

	)

	@/usr/include/sys/ttydefaults.h

40 #iâdeà
_SYS_TTYDEFAULTS_H_


41 
	#_SYS_TTYDEFAULTS_H_


	)

46 
	#TTYDEF_IFLAG
 (
BRKINT
 | 
ISTRIP
 | 
ICRNL
 | 
IMAXBEL
 | 
IXON
 | 
IXANY
)

	)

47 
	#TTYDEF_OFLAG
 (
OPOST
 | 
ONLCR
 | 
XTABS
)

	)

48 
	#TTYDEF_LFLAG
 (
ECHO
 | 
ICANON
 | 
ISIG
 | 
IEXTEN
 | 
ECHOE
|
ECHOKE
|
ECHOCTL
)

	)

49 
	#TTYDEF_CFLAG
 (
CREAD
 | 
CS7
 | 
PARENB
 | 
HUPCL
)

	)

50 
	#TTYDEF_SPEED
 (
B9600
)

	)

55 
	#CTRL
(
x
è(x&037)

	)

56 
	#CEOF
 
	`CTRL
('d')

	)

57 #ifdeà
_POSIX_VDISABLE


58 
	#CEOL
 
_POSIX_VDISABLE


	)

60 
	#CEOL
 '\0'

	)

62 
	#CERASE
 0177

	)

63 
	#CINTR
 
	`CTRL
('c')

	)

64 #ifdeà
_POSIX_VDISABLE


65 
	#CSTATUS
 
_POSIX_VDISABLE


	)

67 
	#CSTATUS
 '\0'

	)

69 
	#CKILL
 
	`CTRL
('u')

	)

70 
	#CMIN
 1

	)

71 
	#CQUIT
 034

	)

72 
	#CSUSP
 
	`CTRL
('z')

	)

73 
	#CTIME
 0

	)

74 
	#CDSUSP
 
	`CTRL
('y')

	)

75 
	#CSTART
 
	`CTRL
('q')

	)

76 
	#CSTOP
 
	`CTRL
('s')

	)

77 
	#CLNEXT
 
	`CTRL
('v')

	)

78 
	#CDISCARD
 
	`CTRL
('o')

	)

79 
	#CWERASE
 
	`CTRL
('w')

	)

80 
	#CREPRINT
 
	`CTRL
('r')

	)

81 
	#CEOT
 
CEOF


	)

83 
	#CBRK
 
CEOL


	)

84 
	#CRPRNT
 
CREPRINT


	)

85 
	#CFLUSH
 
CDISCARD


	)

93 #ifdeà
TTYDEFCHARS


94 
cc_t
 
	gydefch¬s
[
NCCS
] = {

95 
CEOF
, 
CEOL
, CEOL, 
CERASE
, 
CWERASE
, 
CKILL
, 
CREPRINT
,

96 
_POSIX_VDISABLE
, 
CINTR
, 
CQUIT
, 
CSUSP
, 
CDSUSP
, 
CSTART
, 
CSTOP
, 
CLNEXT
,

97 
CDISCARD
, 
CMIN
, 
CTIME
, 
CSTATUS
, 
_POSIX_VDISABLE


99 #undeà
TTYDEFCHARS


	@/usr/include/sys/ucontext.h

18 #iâdeà
_SYS_UCONTEXT_H


19 
	#_SYS_UCONTEXT_H
 1

	)

21 
	~<ã©u»s.h
>

22 
	~<sigÇl.h
>

26 
	~<bs/sigcÚxt.h
>

28 #ifdeà
__x86_64__


31 
__exnsiÚ__
 
	tg»g_t
;

34 
	#NGREG
 23

	)

37 
g»g_t
 
	tg»g£t_t
[
NGREG
];

39 #ifdeà
__USE_GNU


43 
	mREG_R8
 = 0,

44 
	#REG_R8
 
REG_R8


	)

45 
	mREG_R9
,

46 
	#REG_R9
 
REG_R9


	)

47 
	mREG_R10
,

48 
	#REG_R10
 
REG_R10


	)

49 
	mREG_R11
,

50 
	#REG_R11
 
REG_R11


	)

51 
	mREG_R12
,

52 
	#REG_R12
 
REG_R12


	)

53 
	mREG_R13
,

54 
	#REG_R13
 
REG_R13


	)

55 
	mREG_R14
,

56 
	#REG_R14
 
REG_R14


	)

57 
	mREG_R15
,

58 
	#REG_R15
 
REG_R15


	)

59 
	mREG_RDI
,

60 
	#REG_RDI
 
REG_RDI


	)

61 
	mREG_RSI
,

62 
	#REG_RSI
 
REG_RSI


	)

63 
	mREG_RBP
,

64 
	#REG_RBP
 
REG_RBP


	)

65 
	mREG_RBX
,

66 
	#REG_RBX
 
REG_RBX


	)

67 
	mREG_RDX
,

68 
	#REG_RDX
 
REG_RDX


	)

69 
	mREG_RAX
,

70 
	#REG_RAX
 
REG_RAX


	)

71 
	mREG_RCX
,

72 
	#REG_RCX
 
REG_RCX


	)

73 
	mREG_RSP
,

74 
	#REG_RSP
 
REG_RSP


	)

75 
	mREG_RIP
,

76 
	#REG_RIP
 
REG_RIP


	)

77 
	mREG_EFL
,

78 
	#REG_EFL
 
REG_EFL


	)

79 
	mREG_CSGSFS
,

80 
	#REG_CSGSFS
 
REG_CSGSFS


	)

81 
	mREG_ERR
,

82 
	#REG_ERR
 
REG_ERR


	)

83 
	mREG_TRAPNO
,

84 
	#REG_TRAPNO
 
REG_TRAPNO


	)

85 
	mREG_OLDMASK
,

86 
	#REG_OLDMASK
 
REG_OLDMASK


	)

87 
	mREG_CR2


88 
	#REG_CR2
 
REG_CR2


	)

92 
	s_libc_åx»g


94 
	msignifiÿnd
[4];

95 
	mexpÚt
;

96 
	m·ddg
[3];

99 
	s_libc_xmm»g


101 
__ut32_t
 
	memt
[4];

104 
	s_libc_å¡©e


107 
__ut16_t
 
	mcwd
;

108 
__ut16_t
 
	mswd
;

109 
__ut16_t
 
	máw
;

110 
__ut16_t
 
	mfÝ
;

111 
__ut64_t
 
	mr
;

112 
__ut64_t
 
	mrdp
;

113 
__ut32_t
 
	mmxc¤
;

114 
__ut32_t
 
	mmxü_mask
;

115 
_libc_åx»g
 
	m_¡
[8];

116 
_libc_xmm»g
 
	m_xmm
[16];

117 
__ut32_t
 
	m·ddg
[24];

121 
_libc_å¡©e
 *
	tå»g£t_t
;

126 
g»g£t_t
 
	mg»gs
;

128 
å»g£t_t
 
	må»gs
;

129 
__exnsiÚ__
 
	m__»£rved1
 [8];

130 } 
	tmcÚxt_t
;

133 
	sucÚxt


135 
	muc_æags
;

136 
ucÚxt
 *
	muc_lk
;

137 
¡ack_t
 
	muc_¡ack
;

138 
mcÚxt_t
 
	muc_mcÚxt
;

139 
__sig£t_t
 
	muc_sigmask
;

140 
_libc_å¡©e
 
	m__å»gs_mem
;

141 } 
	tucÚxt_t
;

146 
	tg»g_t
;

149 
	#NGREG
 19

	)

152 
g»g_t
 
	tg»g£t_t
[
NGREG
];

154 #ifdeà
__USE_GNU


158 
	mREG_GS
 = 0,

159 
	#REG_GS
 
REG_GS


	)

160 
	mREG_FS
,

161 
	#REG_FS
 
REG_FS


	)

162 
	mREG_ES
,

163 
	#REG_ES
 
REG_ES


	)

164 
	mREG_DS
,

165 
	#REG_DS
 
REG_DS


	)

166 
	mREG_EDI
,

167 
	#REG_EDI
 
REG_EDI


	)

168 
	mREG_ESI
,

169 
	#REG_ESI
 
REG_ESI


	)

170 
	mREG_EBP
,

171 
	#REG_EBP
 
REG_EBP


	)

172 
	mREG_ESP
,

173 
	#REG_ESP
 
REG_ESP


	)

174 
	mREG_EBX
,

175 
	#REG_EBX
 
REG_EBX


	)

176 
	mREG_EDX
,

177 
	#REG_EDX
 
REG_EDX


	)

178 
	mREG_ECX
,

179 
	#REG_ECX
 
REG_ECX


	)

180 
	mREG_EAX
,

181 
	#REG_EAX
 
REG_EAX


	)

182 
	mREG_TRAPNO
,

183 
	#REG_TRAPNO
 
REG_TRAPNO


	)

184 
	mREG_ERR
,

185 
	#REG_ERR
 
REG_ERR


	)

186 
	mREG_EIP
,

187 
	#REG_EIP
 
REG_EIP


	)

188 
	mREG_CS
,

189 
	#REG_CS
 
REG_CS


	)

190 
	mREG_EFL
,

191 
	#REG_EFL
 
REG_EFL


	)

192 
	mREG_UESP
,

193 
	#REG_UESP
 
REG_UESP


	)

194 
	mREG_SS


195 
	#REG_SS
 
REG_SS


	)

200 
	s_libc_å»g


202 
	msignifiÿnd
[4];

203 
	mexpÚt
;

206 
	s_libc_å¡©e


208 
	mcw
;

209 
	msw
;

210 
	mg
;

211 
	moff
;

212 
	mcs£l
;

213 
	md©aoff
;

214 
	md©a£l
;

215 
_libc_å»g
 
	m_¡
[8];

216 
	m¡©us
;

220 
_libc_å¡©e
 *
	tå»g£t_t
;

225 
g»g£t_t
 
	mg»gs
;

228 
å»g£t_t
 
	må»gs
;

229 
	mÞdmask
;

230 
	mü2
;

231 } 
	tmcÚxt_t
;

234 
	sucÚxt


236 
	muc_æags
;

237 
ucÚxt
 *
	muc_lk
;

238 
¡ack_t
 
	muc_¡ack
;

239 
mcÚxt_t
 
	muc_mcÚxt
;

240 
__sig£t_t
 
	muc_sigmask
;

241 
_libc_å¡©e
 
	m__å»gs_mem
;

242 } 
	tucÚxt_t
;

	@/usr/include/sys/uio.h

18 #iâdeà
_SYS_UIO_H


19 
	#_SYS_UIO_H
 1

	)

21 
	~<ã©u»s.h
>

23 
	~<sys/ty³s.h
>

25 
	g__BEGIN_DECLS


28 
	~<bs/uio.h
>

39 
ssize_t
 
	$»adv
 (
__fd
, cÚ¡ 
iovec
 *
__iovec
, 
__couÁ
)

40 
__wur
;

50 
ssize_t
 
	$wrev
 (
__fd
, cÚ¡ 
iovec
 *
__iovec
, 
__couÁ
)

51 
__wur
;

54 #ifdeà
__USE_BSD


55 #iâdeà
__USE_FILE_OFFSET64


65 
ssize_t
 
	$´dv
 (
__fd
, cÚ¡ 
iovec
 *
__iovec
, 
__couÁ
,

66 
__off_t
 
__off£t
è
__wur
;

77 
ssize_t
 
	$pwrev
 (
__fd
, cÚ¡ 
iovec
 *
__iovec
, 
__couÁ
,

78 
__off_t
 
__off£t
è
__wur
;

80 #ifdeà
__REDIRECT


81 
ssize_t
 
	`__REDIRECT
 (
´dv
, (
__fd
, cÚ¡ 
iovec
 *
__iovec
,

82 
__couÁ
, 
__off64_t
 
__off£t
),

83 
´dv64
è
__wur
;

84 
ssize_t
 
	`__REDIRECT
 (
pwrev
, (
__fd
, cÚ¡ 
iovec
 *
__iovec
,

85 
__couÁ
, 
__off64_t
 
__off£t
),

86 
pwrev64
è
__wur
;

88 
	#´dv
 
´dv64


	)

89 
	#pwrev
 
pwrev64


	)

93 #ifdeà
__USE_LARGEFILE64


103 
ssize_t
 
	$´dv64
 (
__fd
, cÚ¡ 
iovec
 *
__iovec
, 
__couÁ
,

104 
__off64_t
 
__off£t
è
__wur
;

115 
ssize_t
 
	$pwrev64
 (
__fd
, cÚ¡ 
iovec
 *
__iovec
, 
__couÁ
,

116 
__off64_t
 
__off£t
è
__wur
;

120 
__END_DECLS


	@/usr/include/xlocale.h

20 #iâdeà
_XLOCALE_H


21 
	#_XLOCALE_H
 1

	)

27 
	s__loÿË_¡ruù


30 
__loÿË_d©a
 *
	m__loÿËs
[13];

33 cÚ¡ *
	m__ùy³_b
;

34 cÚ¡ *
	m__ùy³_tÞow
;

35 cÚ¡ *
	m__ùy³_touµ
;

38 cÚ¡ *
	m__Çmes
[13];

39 } *
	t__loÿË_t
;

42 
__loÿË_t
 
	tloÿË_t
;

	@/usr/include/_G_config.h

4 #iâdeà
_G_cÚfig_h


5 
	#_G_cÚfig_h
 1

	)

9 
	~<bs/ty³s.h
>

10 
	#__Ãed_size_t


	)

11 #ià
defed
 
_LIBC
 || defed 
_GLIBCPP_USE_WCHAR_T


12 
	#__Ãed_wch¬_t


	)

14 
	#__Ãed_NULL


	)

15 
	~<¡ddef.h
>

16 
	#__Ãed_mb¡©e_t


	)

17 #ià
defed
 
_LIBC
 || defed 
_GLIBCPP_USE_WCHAR_T


18 
	#__Ãed_wt_t


	)

20 
	~<wch¬.h
>

23 
__off_t
 
	m__pos
;

24 
__mb¡©e_t
 
	m__¡©e
;

25 } 
	t_G_åos_t
;

28 
__off64_t
 
	m__pos
;

29 
__mb¡©e_t
 
	m__¡©e
;

30 } 
	t_G_åos64_t
;

31 #ià
defed
 
_LIBC
 || defed 
_GLIBCPP_USE_WCHAR_T


32 
	~<gcÚv.h
>

35 
__gcÚv_fo
 
	m__cd
;

38 
__gcÚv_fo
 
	m__cd
;

39 
__gcÚv_¡_d©a
 
	m__d©a
;

40 } 
	m__combed
;

41 } 
	t_G_icÚv_t
;

46 
	#_G_va_li¡
 
__gnuc_va_li¡


	)

48 
	#_G_HAVE_MMAP
 1

	)

49 
	#_G_HAVE_MREMAP
 1

	)

51 
	#_G_IO_IO_FILE_VERSION
 0x20001

	)

54 
	#_G_HAVE_ST_BLKSIZE
 
	`defed
 (
_STATBUF_ST_BLKSIZE
)

	)

56 
	#_G_BUFSIZ
 8192

	)

	@/usr/include/asm/ioctls.h

1 
	~<asm-gic/ioùls.h
>

	@/usr/include/asm/socket.h

1 
	~<asm-gic/sock.h
>

	@/usr/include/bits/byteswap-16.h

19 #iâdeà
_BITS_BYTESWAP_H


23 #ifdeà
__GNUC__


24 #ià
__GNUC__
 >= 2

25 
	#__bsw­_16
(
x
) \

26 (
__exnsiÚ__
 \

27 ({ 
__v
, 
__x
 = (è(
x
); \

28 ià(
	`__but_cÚ¡ªt_p
 (
__x
)) \

29 
__v
 = 
	`__bsw­_cÚ¡ªt_16
 (
__x
); \

31 
	`__asm__
 ("rorw $8, %w0" \

32 : "ô" (
__v
) \

33 : "0" (
__x
) \

35 
__v
; }))

	)

38 
	#__bsw­_16
(
x
) \

39 (
__exnsiÚ__
 \

40 ({ 
__x
 = (è(
x
); \

41 
	`__bsw­_cÚ¡ªt_16
 (
__x
); }))

	)

44 
__le
 

45 
	$__bsw­_16
 (
__bsx
)

47  
	`__bsw­_cÚ¡ªt_16
 (
__bsx
);

48 
	}
}

	@/usr/include/bits/endian.h

3 #iâdeà
_ENDIAN_H


7 
	#__BYTE_ORDER
 
__LITTLE_ENDIAN


	)

	@/usr/include/bits/fcntl-linux.h

19 #iâdef 
_FCNTL_H


37 #ifdeà
__USE_GNU


38 
	~<bs/uio.h
>

42 
	#O_ACCMODE
 0003

	)

43 
	#O_RDONLY
 00

	)

44 
	#O_WRONLY
 01

	)

45 
	#O_RDWR
 02

	)

46 #iâdeà
O_CREAT


47 
	#O_CREAT
 0100

	)

49 #iâdeà
O_EXCL


50 
	#O_EXCL
 0200

	)

52 #iâdeà
O_NOCTTY


53 
	#O_NOCTTY
 0400

	)

55 #iâdeà
O_TRUNC


56 
	#O_TRUNC
 01000

	)

58 #iâdeà
O_APPEND


59 
	#O_APPEND
 02000

	)

61 #iâdeà
O_NONBLOCK


62 
	#O_NONBLOCK
 04000

	)

64 #iâdeà
O_NDELAY


65 
	#O_NDELAY
 
O_NONBLOCK


	)

67 #iâdeà
O_SYNC


68 
	#O_SYNC
 04010000

	)

70 
	#O_FSYNC
 
O_SYNC


	)

71 #iâdeà
O_ASYNC


72 
	#O_ASYNC
 020000

	)

74 #iâdeà
__O_LARGEFILE


75 
	#__O_LARGEFILE
 0100000

	)

78 #iâdeà
__O_DIRECTORY


79 
	#__O_DIRECTORY
 0200000

	)

81 #iâdeà
__O_NOFOLLOW


82 
	#__O_NOFOLLOW
 0400000

	)

84 #iâdeà
__O_CLOEXEC


85 
	#__O_CLOEXEC
 02000000

	)

87 #iâdeà
__O_DIRECT


88 
	#__O_DIRECT
 040000

	)

90 #iâdeà
__O_NOATIME


91 
	#__O_NOATIME
 01000000

	)

93 #iâdeà
__O_PATH


94 
	#__O_PATH
 010000000

	)

96 #iâdeà
__O_DSYNC


97 
	#__O_DSYNC
 010000

	)

99 #iâdeà
__O_TMPFILE


100 
	#__O_TMPFILE
 020200000

	)

103 #iâdeà
F_GETLK


104 #iâdeà
__USE_FILE_OFFSET64


105 
	#F_GETLK
 5

	)

106 
	#F_SETLK
 6

	)

107 
	#F_SETLKW
 7

	)

109 
	#F_GETLK
 
F_GETLK64


	)

110 
	#F_SETLK
 
F_SETLK64


	)

111 
	#F_SETLKW
 
F_SETLKW64


	)

114 #iâdeà
F_GETLK64


115 
	#F_GETLK64
 12

	)

116 
	#F_SETLK64
 13

	)

117 
	#F_SETLKW64
 14

	)

120 #ifdeà
__USE_LARGEFILE64


121 
	#O_LARGEFILE
 
__O_LARGEFILE


	)

124 #ifdeà
__USE_XOPEN2K8


125 
	#O_DIRECTORY
 
__O_DIRECTORY


	)

126 
	#O_NOFOLLOW
 
__O_NOFOLLOW


	)

127 
	#O_CLOEXEC
 
__O_CLOEXEC


	)

130 #ifdeà
__USE_GNU


131 
	#O_DIRECT
 
__O_DIRECT


	)

132 
	#O_NOATIME
 
__O_NOATIME


	)

133 
	#O_PATH
 
__O_PATH


	)

134 
	#O_TMPFILE
 
__O_TMPFILE


	)

140 #ià
defed
 
__USE_POSIX199309
 || defed 
__USE_UNIX98


141 
	#O_DSYNC
 
__O_DSYNC


	)

142 #ià
defed
 
__O_RSYNC


143 
	#O_RSYNC
 
__O_RSYNC


	)

145 
	#O_RSYNC
 
O_SYNC


	)

150 
	#F_DUPFD
 0

	)

151 
	#F_GETFD
 1

	)

152 
	#F_SETFD
 2

	)

153 
	#F_GETFL
 3

	)

154 
	#F_SETFL
 4

	)

156 #iâdeà
__F_SETOWN


157 
	#__F_SETOWN
 8

	)

158 
	#__F_GETOWN
 9

	)

161 #ià
defed
 
__USE_BSD
 || defed 
__USE_UNIX98
 || defed 
__USE_XOPEN2K8


162 
	#F_SETOWN
 
__F_SETOWN


	)

163 
	#F_GETOWN
 
__F_GETOWN


	)

166 #iâdeà
__F_SETSIG


167 
	#__F_SETSIG
 10

	)

168 
	#__F_GETSIG
 11

	)

170 #iâdeà
__F_SETOWN_EX


171 
	#__F_SETOWN_EX
 15

	)

172 
	#__F_GETOWN_EX
 16

	)

175 #ifdeà
__USE_GNU


176 
	#F_SETSIG
 
__F_SETSIG


	)

177 
	#F_GETSIG
 
__F_GETSIG


	)

178 
	#F_SETOWN_EX
 
__F_SETOWN_EX


	)

179 
	#F_GETOWN_EX
 
__F_GETOWN_EX


	)

182 #ifdeà
__USE_GNU


183 
	#F_SETLEASE
 1024

	)

184 
	#F_GETLEASE
 1025

	)

185 
	#F_NOTIFY
 1026

	)

186 
	#F_SETPIPE_SZ
 1031

	)

187 
	#F_GETPIPE_SZ
 1032

	)

189 #ifdeà
__USE_XOPEN2K8


190 
	#F_DUPFD_CLOEXEC
 1030

	)

195 
	#FD_CLOEXEC
 1

	)

197 #iâdeà
F_RDLCK


199 
	#F_RDLCK
 0

	)

200 
	#F_WRLCK
 1

	)

201 
	#F_UNLCK
 2

	)

206 #iâdeà
F_EXLCK


207 
	#F_EXLCK
 4

	)

208 
	#F_SHLCK
 8

	)

211 #ifdeà
__USE_BSD


213 
	#LOCK_SH
 1

	)

214 
	#LOCK_EX
 2

	)

215 
	#LOCK_NB
 4

	)

217 
	#LOCK_UN
 8

	)

220 #ifdeà
__USE_GNU


221 
	#LOCK_MAND
 32

	)

222 
	#LOCK_READ
 64

	)

223 
	#LOCK_WRITE
 128

	)

224 
	#LOCK_RW
 192

	)

227 #ifdeà
__USE_GNU


229 
	#DN_ACCESS
 0x00000001

	)

230 
	#DN_MODIFY
 0x00000002

	)

231 
	#DN_CREATE
 0x00000004

	)

232 
	#DN_DELETE
 0x00000008

	)

233 
	#DN_RENAME
 0x00000010

	)

234 
	#DN_ATTRIB
 0x00000020

	)

235 
	#DN_MULTISHOT
 0x80000000

	)

239 #ifdeà
__USE_GNU


241 
	e__pid_ty³


243 
	mF_OWNER_TID
 = 0,

244 
	mF_OWNER_PID
,

245 
	mF_OWNER_PGRP
,

246 
	mF_OWNER_GID
 = 
F_OWNER_PGRP


250 
	sf_owÃr_ex


252 
__pid_ty³
 
	mty³
;

253 
__pid_t
 
	mpid
;

259 #ifdef 
__USE_BSD


260 
	#FAPPEND
 
O_APPEND


	)

261 
	#FFSYNC
 
O_FSYNC


	)

262 
	#FASYNC
 
O_ASYNC


	)

263 
	#FNONBLOCK
 
O_NONBLOCK


	)

264 
	#FNDELAY
 
O_NDELAY


	)

267 #iâdeà
__POSIX_FADV_DONTNEED


268 
	#__POSIX_FADV_DONTNEED
 4

	)

269 
	#__POSIX_FADV_NOREUSE
 5

	)

272 #ifdeà
__USE_XOPEN2K


273 
	#POSIX_FADV_NORMAL
 0

	)

274 
	#POSIX_FADV_RANDOM
 1

	)

275 
	#POSIX_FADV_SEQUENTIAL
 2

	)

276 
	#POSIX_FADV_WILLNEED
 3

	)

277 
	#POSIX_FADV_DONTNEED
 
__POSIX_FADV_DONTNEED


	)

278 
	#POSIX_FADV_NOREUSE
 
__POSIX_FADV_NOREUSE


	)

282 #ifdeà
__USE_GNU


284 
	#SYNC_FILE_RANGE_WAIT_BEFORE
 1

	)

287 
	#SYNC_FILE_RANGE_WRITE
 2

	)

290 
	#SYNC_FILE_RANGE_WAIT_AFTER
 4

	)

295 
	#SPLICE_F_MOVE
 1

	)

296 
	#SPLICE_F_NONBLOCK
 2

	)

299 
	#SPLICE_F_MORE
 4

	)

300 
	#SPLICE_F_GIFT
 8

	)

304 
	#FALLOC_FL_KEEP_SIZE
 1

	)

307 
	#FALLOC_FL_PUNCH_HOLE
 2

	)

311 
	sfe_hªdË


313 
	mhªdË_bys
;

314 
	mhªdË_ty³
;

316 
	mf_hªdË
[0];

320 
	#MAX_HANDLE_SZ
 128

	)

324 #ifdeà
__USE_ATFILE


325 
	#AT_FDCWD
 -100

	)

328 
	#AT_SYMLINK_NOFOLLOW
 0x100

	)

329 
	#AT_REMOVEDIR
 0x200

	)

331 
	#AT_SYMLINK_FOLLOW
 0x400

	)

332 #ifdeà
__USE_GNU


333 
	#AT_NO_AUTOMOUNT
 0x800

	)

335 
	#AT_EMPTY_PATH
 0x1000

	)

337 
	#AT_EACCESS
 0x200

	)

341 
	g__BEGIN_DECLS


343 #ifdeà
__USE_GNU


346 
ssize_t
 
	$»adahd
 (
__fd
, 
__off64_t
 
__off£t
, 
size_t
 
__couÁ
)

347 
__THROW
;

354 
	`sync_fe_¿nge
 (
__fd
, 
__off64_t
 
__off£t
, __off64_
__couÁ
,

355 
__æags
);

362 
ssize_t
 
	`vm¥liû
 (
__fdout
, cÚ¡ 
iovec
 *
__iov
,

363 
size_t
 
__couÁ
, 
__æags
);

369 
ssize_t
 
	`¥liû
 (
__fd
, 
__off64_t
 *
__off
, 
__fdout
,

370 
__off64_t
 *
__offout
, 
size_t
 
__Ën
,

371 
__æags
);

377 
ssize_t
 
	`e
 (
__fd
, 
__fdout
, 
size_t
 
__Ën
,

378 
__æags
);

384 #iâdeà
__USE_FILE_OFFSET64


385 
	`çÎoÿ
 (
__fd
, 
__mode
, 
__off_t
 
__off£t
, __off_
__Ën
);

387 #ifdeà
__REDIRECT


388 
	`__REDIRECT
 (
çÎoÿ
, (
__fd
, 
__mode
, 
__off64_t
 
__off£t
,

389 
__off64_t
 
__Ën
),

390 
çÎoÿ64
);

392 
	#çÎoÿ
 
çÎoÿ64


	)

395 #ifdeà
__USE_LARGEFILE64


396 
	`çÎoÿ64
 (
__fd
, 
__mode
, 
__off64_t
 
__off£t
,

397 
__off64_t
 
__Ën
);

402 
	$Çme_to_hªdË_©
 (
__dfd
, cÚ¡ *
__Çme
,

403 
fe_hªdË
 *
__hªdË
, *
__mÁ_id
,

404 
__æags
è
__THROW
;

410 
	`Ý_by_hªdË_©
 (
__mouÁdfd
, 
fe_hªdË
 *
__hªdË
,

411 
__æags
);

415 
__END_DECLS


	@/usr/include/bits/libio-ldbl.h

19 #iâdeà
_IO_STDIO_H


23 
	$__LDBL_REDIR_DECL
 (
_IO_vfsÿnf
)

24 
	`__LDBL_REDIR_DECL
 (
_IO_vårtf
)

	@/usr/include/bits/local_lim.h

24 #iâdeà
NR_OPEN


25 
	#__undef_NR_OPEN


	)

27 #iâdeà
LINK_MAX


28 
	#__undef_LINK_MAX


	)

30 #iâdeà
OPEN_MAX


31 
	#__undef_OPEN_MAX


	)

33 #iâdeà
ARG_MAX


34 
	#__undef_ARG_MAX


	)

38 
	~<lux/lims.h
>

41 #ifdeà
__undef_NR_OPEN


42 #undeà
NR_OPEN


43 #undeà
__undef_NR_OPEN


46 #ifdeà
__undef_LINK_MAX


47 #undeà
LINK_MAX


48 #undeà
__undef_LINK_MAX


51 #ifdeà
__undef_OPEN_MAX


52 #undeà
OPEN_MAX


53 #undeà
__undef_OPEN_MAX


56 #ifdeà
__undef_ARG_MAX


57 #undeà
ARG_MAX


58 #undeà
__undef_ARG_MAX


62 
	#_POSIX_THREAD_KEYS_MAX
 128

	)

64 
	#PTHREAD_KEYS_MAX
 1024

	)

67 
	#_POSIX_THREAD_DESTRUCTOR_ITERATIONS
 4

	)

69 
	#PTHREAD_DESTRUCTOR_ITERATIONS
 
_POSIX_THREAD_DESTRUCTOR_ITERATIONS


	)

72 
	#_POSIX_THREAD_THREADS_MAX
 64

	)

74 #undeà
PTHREAD_THREADS_MAX


78 
	#AIO_PRIO_DELTA_MAX
 20

	)

81 
	#PTHREAD_STACK_MIN
 16384

	)

84 
	#DELAYTIMER_MAX
 2147483647

	)

87 
	#TTY_NAME_MAX
 32

	)

90 
	#LOGIN_NAME_MAX
 256

	)

93 
	#HOST_NAME_MAX
 64

	)

96 
	#MQ_PRIO_MAX
 32768

	)

99 
	#SEM_VALUE_MAX
 (2147483647)

	)

	@/usr/include/bits/select.h

18 #iâdeà
_SYS_SELECT_H


22 
	~<bs/wÜdsize.h
>

25 #ià
defed
 
__GNUC__
 && __GNUC__ >= 2

27 #ià
__WORDSIZE
 == 64

28 
	#__FD_ZERO_STOS
 "¡osq"

	)

30 
	#__FD_ZERO_STOS
 "¡o¦"

	)

33 
	#__FD_ZERO
(
fd¥
) \

35 
__d0
, 
__d1
; \

36 
__asm__
 
	`__vÞ©e__
 ("þd;; " 
__FD_ZERO_STOS
 \

37 : "=c" (
__d0
), "=D" (
__d1
) \

38 : "a" (0), "0" ( (
fd_£t
) \

39 /  (
__fd_mask
)), \

40 "1" (&
	`__FDS_BITS
 (
fd¥
)[0]) \

42 } 0)

	)

48 
	#__FD_ZERO
(
£t
) \

50 
__i
; \

51 
fd_£t
 *
__¬r
 = (
£t
); \

52 
__i
 = 0; __<  (
fd_£t
è/  (
__fd_mask
); ++__i) \

53 
	`__FDS_BITS
 (
__¬r
)[
__i
] = 0; \

54 } 0)

	)

58 
	#__FD_SET
(
d
, 
£t
) \

59 ((è(
	`__FDS_BITS
 (
£t
)[
	`__FD_ELT
 (
d
)] |ð
	`__FD_MASK
 (d)))

	)

60 
	#__FD_CLR
(
d
, 
£t
) \

61 ((è(
	`__FDS_BITS
 (
£t
)[
	`__FD_ELT
 (
d
)] &ð~
	`__FD_MASK
 (d)))

	)

62 
	#__FD_ISSET
(
d
, 
£t
) \

63 ((
	`__FDS_BITS
 (
£t
)[
	`__FD_ELT
 (
d
)] & 
	`__FD_MASK
 (d)è!ð0)

	)

	@/usr/include/bits/select2.h

19 #iâdeà
_SYS_SELECT_H


24 
__fdt_chk
 (
__d
);

25 
	$__fdt_w¬n
 (
__d
)

26 
	`__w¬Çr
 ("bit outside of fd_set selected");

27 #undeà
__FD_ELT


28 
	#__FD_ELT
(
d
) \

29 
__exnsiÚ__
 \

30 ({ 
__d
 = (
d
); \

31 (
	`__but_cÚ¡ªt_p
 (
__d
) \

32 ? (0 <ð
__d
 && __d < 
__FD_SETSIZE
 \

33 ? (
__d
 / 
__NFDBITS
) \

34 : 
	`__fdt_w¬n
 (
__d
)) \

35 : 
	`__fdt_chk
 (
__d
)); 
	}
})

	)

	@/usr/include/bits/sockaddr.h

23 #iâdeà
_BITS_SOCKADDR_H


24 
	#_BITS_SOCKADDR_H
 1

	)

28 
	t§_çmy_t
;

34 
	#__SOCKADDR_COMMON
(
§_´efix
) \

35 
§_çmy_t
 
§_´efix
##
çmy


	)

37 
	#__SOCKADDR_COMMON_SIZE
 ( ())

	)

	@/usr/include/bits/socket_type.h

19 #iâdeà
_SYS_SOCKET_H


24 
	e__sock_ty³


26 
	mSOCK_STREAM
 = 1,

28 
	#SOCK_STREAM
 
SOCK_STREAM


	)

29 
	mSOCK_DGRAM
 = 2,

31 
	#SOCK_DGRAM
 
SOCK_DGRAM


	)

32 
	mSOCK_RAW
 = 3,

33 
	#SOCK_RAW
 
SOCK_RAW


	)

34 
	mSOCK_RDM
 = 4,

35 
	#SOCK_RDM
 
SOCK_RDM


	)

36 
	mSOCK_SEQPACKET
 = 5,

38 
	#SOCK_SEQPACKET
 
SOCK_SEQPACKET


	)

39 
	mSOCK_DCCP
 = 6,

40 
	#SOCK_DCCP
 
SOCK_DCCP


	)

41 
	mSOCK_PACKET
 = 10,

44 
	#SOCK_PACKET
 
SOCK_PACKET


	)

49 
	mSOCK_CLOEXEC
 = 02000000,

51 
	#SOCK_CLOEXEC
 
SOCK_CLOEXEC


	)

52 
	mSOCK_NONBLOCK
 = 00004000

54 
	#SOCK_NONBLOCK
 
SOCK_NONBLOCK


	)

	@/usr/include/bits/stdio-lock.h

19 #iâdeà
_BITS_STDIO_LOCK_H


20 
	#_BITS_STDIO_LOCK_H
 1

	)

22 
	~<bs/libc-lock.h
>

23 
	~<lowËvlock.h
>

27 
	#_IO_lock_ex³nsive
 1

	)

29 ¡ruù { 
	mlock
; 
	mút
; *
	mowÃr
; } 
	t_IO_lock_t
;

31 
	#_IO_lock_liz
 { 
LLL_LOCK_INITIALIZER
, 0, 
NULL
 }

	)

33 
	#_IO_lock_
(
_Çme
) \

34 ((
_Çme
èð(
_IO_lock_t
è
_IO_lock_liz
 , 0)

	)

36 
	#_IO_lock_fi
(
_Çme
) \

37 ((è0)

	)

39 
	#_IO_lock_lock
(
_Çme
) \

41 *
__£lf
 = 
THREAD_SELF
; \

42 ià((
_Çme
).
owÃr
 !ð
__£lf
) \

44 
	`Îl_lock
 ((
_Çme
).
lock
, 
LLL_PRIVATE
); \

45 (
_Çme
).
owÃr
 = 
__£lf
; \

47 ++(
_Çme
).
út
; \

48 } 0)

	)

50 
	#_IO_lock_ylock
(
_Çme
) \

52 
__»suÉ
 = 0; \

53 *
__£lf
 = 
THREAD_SELF
; \

54 ià((
_Çme
).
owÃr
 !ð
__£lf
) \

56 ià(
	`Îl_ylock
 ((
_Çme
).
lock
) == 0) \

58 (
_Çme
).
owÃr
 = 
__£lf
; \

59 (
_Çme
).
út
 = 1; \

62 
__»suÉ
 = 
EBUSY
; \

65 ++(
_Çme
).
út
; \

66 
__»suÉ
; \

67 })

	)

69 
	#_IO_lock_uÆock
(
_Çme
) \

71 ià(--(
_Çme
).
út
 == 0) \

73 (
_Çme
).
owÃr
 = 
NULL
; \

74 
	`Îl_uÆock
 ((
_Çme
).
lock
, 
LLL_PRIVATE
); \

76 } 0)

	)

80 
	#_IO_þnup_»giÚ_¡¬t
(
_fù
, 
_å
) \

81 
	`__libc_þnup_»giÚ_¡¬t
 (((
_å
)->
_æags
 & 
_IO_USER_LOCK
è=ð0, 
_fù
, _å)

	)

82 
	#_IO_þnup_»giÚ_¡¬t_nßrg
(
_fù
) \

83 
	`__libc_þnup_»giÚ_¡¬t
 (1, 
_fù
, 
NULL
)

	)

84 
	#_IO_þnup_»giÚ_d
(
_do
) \

85 
	`__libc_þnup_»giÚ_d
 (
_do
)

	)

87 #ià
defed
 
_LIBC
 && !defed 
NOT_IN_libc


89 #ifdeà
__EXCEPTIONS


90 
	#_IO_acque_lock
(
_å
) \

92 
_IO_FILE
 *
_IO_acque_lock_fe
 \

93 
	`__©ibu__
((
	`þnup
 (
_IO_acque_lock_fù
))) \

94 ð(
_å
); \

95 
	`_IO_æockfe
 (
_IO_acque_lock_fe
);

	)

96 
	#_IO_acque_lock_þr_æags2
(
_å
) \

98 
_IO_FILE
 *
_IO_acque_lock_fe
 \

99 
	`__©ibu__
((
	`þnup
 (
_IO_acque_lock_þr_æags2_fù
))) \

100 ð(
_å
); \

101 
	`_IO_æockfe
 (
_IO_acque_lock_fe
);

	)

103 
	#_IO_acque_lock
(
_å
è
_IO_acque_lock_Ãeds_exû±iÚs_abËd


	)

104 
	#_IO_acque_lock_þr_æags2
(
_å
è
	`_IO_acque_lock
 (_å)

	)

106 
	#_IO_»Ëa£_lock
(
_å
è; } 0)

	)

	@/usr/include/bits/timex.h

18 #iâdef 
_BITS_TIMEX_H


19 
	#_BITS_TIMEX_H
 1

	)

21 
	~<bs/ty³s.h
>

25 
	stimex


27 
	mmodes
;

28 
__sysÿÎ_¦Úg_t
 
	moff£t
;

29 
__sysÿÎ_¦Úg_t
 
	mäeq
;

30 
__sysÿÎ_¦Úg_t
 
	mmaxrÜ
;

31 
__sysÿÎ_¦Úg_t
 
	me¡rÜ
;

32 
	m¡©us
;

33 
__sysÿÎ_¦Úg_t
 
	mcÚ¡ªt
;

34 
__sysÿÎ_¦Úg_t
 
	m´ecisiÚ
;

35 
__sysÿÎ_¦Úg_t
 
	mtÞªû
;

36 
timev®
 
	mtime
;

37 
__sysÿÎ_¦Úg_t
 
	mtick
;

38 
__sysÿÎ_¦Úg_t
 
	mµsäeq
;

39 
__sysÿÎ_¦Úg_t
 
	mjr
;

40 
	mshiá
;

41 
__sysÿÎ_¦Úg_t
 
	m¡ab
;

42 
__sysÿÎ_¦Úg_t
 
	mjút
;

43 
__sysÿÎ_¦Úg_t
 
	mÿlút
;

44 
__sysÿÎ_¦Úg_t
 
	mrút
;

45 
__sysÿÎ_¦Úg_t
 
	m¡bút
;

47 
	mi
;

56 
	#ADJ_OFFSET
 0x0001

	)

57 
	#ADJ_FREQUENCY
 0x0002

	)

58 
	#ADJ_MAXERROR
 0x0004

	)

59 
	#ADJ_ESTERROR
 0x0008

	)

60 
	#ADJ_STATUS
 0x0010

	)

61 
	#ADJ_TIMECONST
 0x0020

	)

62 
	#ADJ_TAI
 0x0080

	)

63 
	#ADJ_MICRO
 0x1000

	)

64 
	#ADJ_NANO
 0x2000

	)

65 
	#ADJ_TICK
 0x4000

	)

66 
	#ADJ_OFFSET_SINGLESHOT
 0x8001

	)

67 
	#ADJ_OFFSET_SS_READ
 0xa001

	)

70 
	#MOD_OFFSET
 
ADJ_OFFSET


	)

71 
	#MOD_FREQUENCY
 
ADJ_FREQUENCY


	)

72 
	#MOD_MAXERROR
 
ADJ_MAXERROR


	)

73 
	#MOD_ESTERROR
 
ADJ_ESTERROR


	)

74 
	#MOD_STATUS
 
ADJ_STATUS


	)

75 
	#MOD_TIMECONST
 
ADJ_TIMECONST


	)

76 
	#MOD_CLKB
 
ADJ_TICK


	)

77 
	#MOD_CLKA
 
ADJ_OFFSET_SINGLESHOT


	)

78 
	#MOD_TAI
 
ADJ_TAI


	)

79 
	#MOD_MICRO
 
ADJ_MICRO


	)

80 
	#MOD_NANO
 
ADJ_NANO


	)

84 
	#STA_PLL
 0x0001

	)

85 
	#STA_PPSFREQ
 0x0002

	)

86 
	#STA_PPSTIME
 0x0004

	)

87 
	#STA_FLL
 0x0008

	)

89 
	#STA_INS
 0x0010

	)

90 
	#STA_DEL
 0x0020

	)

91 
	#STA_UNSYNC
 0x0040

	)

92 
	#STA_FREQHOLD
 0x0080

	)

94 
	#STA_PPSSIGNAL
 0x0100

	)

95 
	#STA_PPSJITTER
 0x0200

	)

96 
	#STA_PPSWANDER
 0x0400

	)

97 
	#STA_PPSERROR
 0x0800

	)

99 
	#STA_CLOCKERR
 0x1000

	)

100 
	#STA_NANO
 0x2000

	)

101 
	#STA_MODE
 0x4000

	)

102 
	#STA_CLK
 0x8000

	)

105 
	#STA_RONLY
 (
STA_PPSSIGNAL
 | 
STA_PPSJITTER
 | 
STA_PPSWANDER
 | \

106 
STA_PPSERROR
 | 
STA_CLOCKERR
 | 
STA_NANO
 | 
STA_MODE
 | 
STA_CLK
)

	)

	@/usr/include/bits/typesizes.h

19 #iâdeà
_BITS_TYPES_H


23 #iâdef 
_BITS_TYPESIZES_H


24 
	#_BITS_TYPESIZES_H
 1

	)

30 #ià
defed
 
__x86_64__
 && defed 
__ILP32__


31 
	#__SYSCALL_SLONG_TYPE
 
__SQUAD_TYPE


	)

32 
	#__SYSCALL_ULONG_TYPE
 
__UQUAD_TYPE


	)

34 
	#__SYSCALL_SLONG_TYPE
 
__SLONGWORD_TYPE


	)

35 
	#__SYSCALL_ULONG_TYPE
 
__ULONGWORD_TYPE


	)

38 
	#__DEV_T_TYPE
 
__UQUAD_TYPE


	)

39 
	#__UID_T_TYPE
 
__U32_TYPE


	)

40 
	#__GID_T_TYPE
 
__U32_TYPE


	)

41 
	#__INO_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

42 
	#__INO64_T_TYPE
 
__UQUAD_TYPE


	)

43 
	#__MODE_T_TYPE
 
__U32_TYPE


	)

44 #ifdeà
__x86_64__


45 
	#__NLINK_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

46 
	#__FSWORD_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

48 
	#__NLINK_T_TYPE
 
__UWORD_TYPE


	)

49 
	#__FSWORD_T_TYPE
 
__SWORD_TYPE


	)

51 
	#__OFF_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

52 
	#__OFF64_T_TYPE
 
__SQUAD_TYPE


	)

53 
	#__PID_T_TYPE
 
__S32_TYPE


	)

54 
	#__RLIM_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

55 
	#__RLIM64_T_TYPE
 
__UQUAD_TYPE


	)

56 
	#__BLKCNT_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

57 
	#__BLKCNT64_T_TYPE
 
__SQUAD_TYPE


	)

58 
	#__FSBLKCNT_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

59 
	#__FSBLKCNT64_T_TYPE
 
__UQUAD_TYPE


	)

60 
	#__FSFILCNT_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

61 
	#__FSFILCNT64_T_TYPE
 
__UQUAD_TYPE


	)

62 
	#__ID_T_TYPE
 
__U32_TYPE


	)

63 
	#__CLOCK_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

64 
	#__TIME_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

65 
	#__USECONDS_T_TYPE
 
__U32_TYPE


	)

66 
	#__SUSECONDS_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

67 
	#__DADDR_T_TYPE
 
__S32_TYPE


	)

68 
	#__KEY_T_TYPE
 
__S32_TYPE


	)

69 
	#__CLOCKID_T_TYPE
 
__S32_TYPE


	)

70 
	#__TIMER_T_TYPE
 *

	)

71 
	#__BLKSIZE_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

72 
	#__FSID_T_TYPE
 suù { 
__v®
[2]; }

	)

73 
	#__SSIZE_T_TYPE
 
__SWORD_TYPE


	)

75 #ifdeà
__x86_64__


79 
	#__OFF_T_MATCHES_OFF64_T
 1

	)

82 
	#__INO_T_MATCHES_INO64_T
 1

	)

86 
	#__FD_SETSIZE
 1024

	)

	@/usr/include/bits/uio.h

18 #ià!
defed
 
_SYS_UIO_H
 && !defed 
_FCNTL_H


22 #iâdeà
_BITS_UIO_H


23 
	#_BITS_UIO_H
 1

	)

25 
	~<sys/ty³s.h
>

39 
	#UIO_MAXIOV
 1024

	)

43 
	siovec


45 *
	miov_ba£
;

46 
size_t
 
	miov_Ën
;

52 #ifdeà
__USE_GNU


53 #ià
defed
 
_SYS_UIO_H
 && !defed 
_BITS_UIO_H_FOR_SYS_UIO_H


54 
	#_BITS_UIO_H_FOR_SYS_UIO_H
 1

	)

56 
__BEGIN_DECLS


59 
ssize_t
 
	$´oûss_vm_»adv
 (
pid_t
 
__pid
, cÚ¡ 
iovec
 *
__lvec
,

60 
__liovút
,

61 cÚ¡ 
iovec
 *
__rvec
,

62 
__riovút
,

63 
__æags
)

64 
__THROW
;

67 
ssize_t
 
	$´oûss_vm_wrev
 (
pid_t
 
__pid
, cÚ¡ 
iovec
 *
__lvec
,

68 
__liovút
,

69 cÚ¡ 
iovec
 *
__rvec
,

70 
__riovút
,

71 
__æags
)

72 
__THROW
;

74 
__END_DECLS


	@/usr/include/gnu/stubs.h

6 #ià!
defed
 
__x86_64__


7 
	~<gnu/¡ubs-32.h
>

9 #ià
defed
 
__x86_64__
 && defed 
__LP64__


10 
	~<gnu/¡ubs-64.h
>

12 #ià
defed
 
__x86_64__
 && defed 
__ILP32__


13 
	~<gnu/¡ubs-x32.h
>

	@/usr/include/linux/errno.h

1 
	~<asm/ºo.h
>

	@/usr/include/linux/limits.h

1 #iâdeà
_LINUX_LIMITS_H


2 
	#_LINUX_LIMITS_H


	)

4 
	#NR_OPEN
 1024

	)

6 
	#NGROUPS_MAX
 65536

	)

7 
	#ARG_MAX
 131072

	)

8 
	#LINK_MAX
 127

	)

9 
	#MAX_CANON
 255

	)

10 
	#MAX_INPUT
 255

	)

11 
	#NAME_MAX
 255

	)

12 
	#PATH_MAX
 4096

	)

13 
	#PIPE_BUF
 4096

	)

14 
	#XATTR_NAME_MAX
 255

	)

15 
	#XATTR_SIZE_MAX
 65536

	)

16 
	#XATTR_LIST_MAX
 65536

	)

18 
	#RTSIG_MAX
 32

	)

	@/usr/include/linux/param.h

1 #iâdeà
_LINUX_PARAM_H


2 
	#_LINUX_PARAM_H


	)

4 
	~<asm/·¿m.h
>

	@/usr/include/linux/types.h

1 #iâdeà
_LINUX_TYPES_H


2 
	#_LINUX_TYPES_H


	)

4 
	~<asm/ty³s.h
>

6 #iâdeà
__ASSEMBLY__


8 
	~<lux/posix_ty³s.h
>

16 #ifdeà
__CHECKER__


17 
	#__bwi£__
 
	`__©ibu__
((
bwi£
))

	)

19 
	#__bwi£__


	)

21 #ifdeà
__CHECK_ENDIAN__


22 
	#__bwi£
 
__bwi£__


	)

24 
	#__bwi£


	)

27 
__u16
 
	t__bwi£
 
	t__Ë16
;

28 
__u16
 
	t__bwi£
 
	t__be16
;

29 
__u32
 
	t__bwi£
 
	t__Ë32
;

30 
__u32
 
	t__bwi£
 
	t__be32
;

31 
__u64
 
	t__bwi£
 
	t__Ë64
;

32 
__u64
 
	t__bwi£
 
	t__be64
;

34 
__u16
 
	t__bwi£
 
	t__sum16
;

35 
__u32
 
	t__bwi£
 
	t__wsum
;

46 
	#__®igÃd_u64
 
__u64
 
	`__©ibu__
((
	`®igÃd
(8)))

	)

47 
	#__®igÃd_be64
 
__be64
 
	`__©ibu__
((
	`®igÃd
(8)))

	)

48 
	#__®igÃd_Ë64
 
__Ë64
 
	`__©ibu__
((
	`®igÃd
(8)))

	)

	@/usr/include/stdc-predef.h

18 #iâdef 
_STDC_PREDEF_H


19 
	#_STDC_PREDEF_H
 1

	)

36 #ifdeà
__GCC_IEC_559


37 #ià
__GCC_IEC_559
 > 0

38 
	#__STDC_IEC_559__
 1

	)

41 
	#__STDC_IEC_559__
 1

	)

44 #ifdeà
__GCC_IEC_559_COMPLEX


45 #ià
__GCC_IEC_559_COMPLEX
 > 0

46 
	#__STDC_IEC_559_COMPLEX__
 1

	)

49 
	#__STDC_IEC_559_COMPLEX__
 1

	)

54 
	#__STDC_ISO_10646__
 201103L

	)

57 
	#__STDC_NO_THREADS__
 1

	)

	@/usr/include/asm-generic/ioctls.h

1 #iâdeà
__ASM_GENERIC_IOCTLS_H


2 
	#__ASM_GENERIC_IOCTLS_H


	)

4 
	~<lux/ioùl.h
>

19 
	#TCGETS
 0x5401

	)

20 
	#TCSETS
 0x5402

	)

21 
	#TCSETSW
 0x5403

	)

22 
	#TCSETSF
 0x5404

	)

23 
	#TCGETA
 0x5405

	)

24 
	#TCSETA
 0x5406

	)

25 
	#TCSETAW
 0x5407

	)

26 
	#TCSETAF
 0x5408

	)

27 
	#TCSBRK
 0x5409

	)

28 
	#TCXONC
 0x540A

	)

29 
	#TCFLSH
 0x540B

	)

30 
	#TIOCEXCL
 0x540C

	)

31 
	#TIOCNXCL
 0x540D

	)

32 
	#TIOCSCTTY
 0x540E

	)

33 
	#TIOCGPGRP
 0x540F

	)

34 
	#TIOCSPGRP
 0x5410

	)

35 
	#TIOCOUTQ
 0x5411

	)

36 
	#TIOCSTI
 0x5412

	)

37 
	#TIOCGWINSZ
 0x5413

	)

38 
	#TIOCSWINSZ
 0x5414

	)

39 
	#TIOCMGET
 0x5415

	)

40 
	#TIOCMBIS
 0x5416

	)

41 
	#TIOCMBIC
 0x5417

	)

42 
	#TIOCMSET
 0x5418

	)

43 
	#TIOCGSOFTCAR
 0x5419

	)

44 
	#TIOCSSOFTCAR
 0x541A

	)

45 
	#FIONREAD
 0x541B

	)

46 
	#TIOCINQ
 
FIONREAD


	)

47 
	#TIOCLINUX
 0x541C

	)

48 
	#TIOCCONS
 0x541D

	)

49 
	#TIOCGSERIAL
 0x541E

	)

50 
	#TIOCSSERIAL
 0x541F

	)

51 
	#TIOCPKT
 0x5420

	)

52 
	#FIONBIO
 0x5421

	)

53 
	#TIOCNOTTY
 0x5422

	)

54 
	#TIOCSETD
 0x5423

	)

55 
	#TIOCGETD
 0x5424

	)

56 
	#TCSBRKP
 0x5425

	)

57 
	#TIOCSBRK
 0x5427

	)

58 
	#TIOCCBRK
 0x5428

	)

59 
	#TIOCGSID
 0x5429

	)

60 
	#TCGETS2
 
	`_IOR
('T', 0x2A, 
rmios2
)

	)

61 
	#TCSETS2
 
	`_IOW
('T', 0x2B, 
rmios2
)

	)

62 
	#TCSETSW2
 
	`_IOW
('T', 0x2C, 
rmios2
)

	)

63 
	#TCSETSF2
 
	`_IOW
('T', 0x2D, 
rmios2
)

	)

64 
	#TIOCGRS485
 0x542E

	)

65 #iâdeà
TIOCSRS485


66 
	#TIOCSRS485
 0x542F

	)

68 
	#TIOCGPTN
 
	`_IOR
('T', 0x30, è

	)

69 
	#TIOCSPTLCK
 
	`_IOW
('T', 0x31, è

	)

70 
	#TIOCGDEV
 
	`_IOR
('T', 0x32, è

	)

71 
	#TCGETX
 0x5432

	)

72 
	#TCSETX
 0x5433

	)

73 
	#TCSETXF
 0x5434

	)

74 
	#TCSETXW
 0x5435

	)

75 
	#TIOCSIG
 
	`_IOW
('T', 0x36, è

	)

76 
	#TIOCVHANGUP
 0x5437

	)

77 
	#TIOCGPKT
 
	`_IOR
('T', 0x38, è

	)

78 
	#TIOCGPTLCK
 
	`_IOR
('T', 0x39, è

	)

79 
	#TIOCGEXCL
 
	`_IOR
('T', 0x40, è

	)

81 
	#FIONCLEX
 0x5450

	)

82 
	#FIOCLEX
 0x5451

	)

83 
	#FIOASYNC
 0x5452

	)

84 
	#TIOCSERCONFIG
 0x5453

	)

85 
	#TIOCSERGWILD
 0x5454

	)

86 
	#TIOCSERSWILD
 0x5455

	)

87 
	#TIOCGLCKTRMIOS
 0x5456

	)

88 
	#TIOCSLCKTRMIOS
 0x5457

	)

89 
	#TIOCSERGSTRUCT
 0x5458

	)

90 
	#TIOCSERGETLSR
 0x5459

	)

91 
	#TIOCSERGETMULTI
 0x545A

	)

92 
	#TIOCSERSETMULTI
 0x545B

	)

94 
	#TIOCMIWAIT
 0x545C

	)

95 
	#TIOCGICOUNT
 0x545D

	)

101 #iâdeà
FIOQSIZE


102 
	#FIOQSIZE
 0x5460

	)

106 
	#TIOCPKT_DATA
 0

	)

107 
	#TIOCPKT_FLUSHREAD
 1

	)

108 
	#TIOCPKT_FLUSHWRITE
 2

	)

109 
	#TIOCPKT_STOP
 4

	)

110 
	#TIOCPKT_START
 8

	)

111 
	#TIOCPKT_NOSTOP
 16

	)

112 
	#TIOCPKT_DOSTOP
 32

	)

113 
	#TIOCPKT_IOCTL
 64

	)

115 
	#TIOCSER_TEMT
 0x01

	)

	@/usr/include/asm-generic/socket.h

1 #iâdeà
__ASM_GENERIC_SOCKET_H


2 
	#__ASM_GENERIC_SOCKET_H


	)

4 
	~<asm/sockios.h
>

7 
	#SOL_SOCKET
 1

	)

9 
	#SO_DEBUG
 1

	)

10 
	#SO_REUSEADDR
 2

	)

11 
	#SO_TYPE
 3

	)

12 
	#SO_ERROR
 4

	)

13 
	#SO_DONTROUTE
 5

	)

14 
	#SO_BROADCAST
 6

	)

15 
	#SO_SNDBUF
 7

	)

16 
	#SO_RCVBUF
 8

	)

17 
	#SO_SNDBUFFORCE
 32

	)

18 
	#SO_RCVBUFFORCE
 33

	)

19 
	#SO_KEEPALIVE
 9

	)

20 
	#SO_OOBINLINE
 10

	)

21 
	#SO_NO_CHECK
 11

	)

22 
	#SO_PRIORITY
 12

	)

23 
	#SO_LINGER
 13

	)

24 
	#SO_BSDCOMPAT
 14

	)

25 
	#SO_REUSEPORT
 15

	)

26 #iâdeà
SO_PASSCRED


27 
	#SO_PASSCRED
 16

	)

28 
	#SO_PEERCRED
 17

	)

29 
	#SO_RCVLOWAT
 18

	)

30 
	#SO_SNDLOWAT
 19

	)

31 
	#SO_RCVTIMEO
 20

	)

32 
	#SO_SNDTIMEO
 21

	)

36 
	#SO_SECURITY_AUTHENTICATION
 22

	)

37 
	#SO_SECURITY_ENCRYPTION_TRANSPORT
 23

	)

38 
	#SO_SECURITY_ENCRYPTION_NETWORK
 24

	)

40 
	#SO_BINDTODEVICE
 25

	)

43 
	#SO_ATTACH_FILTER
 26

	)

44 
	#SO_DETACH_FILTER
 27

	)

45 
	#SO_GET_FILTER
 
SO_ATTACH_FILTER


	)

47 
	#SO_PEERNAME
 28

	)

48 
	#SO_TIMESTAMP
 29

	)

49 
	#SCM_TIMESTAMP
 
SO_TIMESTAMP


	)

51 
	#SO_ACCEPTCONN
 30

	)

53 
	#SO_PEERSEC
 31

	)

54 
	#SO_PASSSEC
 34

	)

55 
	#SO_TIMESTAMPNS
 35

	)

56 
	#SCM_TIMESTAMPNS
 
SO_TIMESTAMPNS


	)

58 
	#SO_MARK
 36

	)

60 
	#SO_TIMESTAMPING
 37

	)

61 
	#SCM_TIMESTAMPING
 
SO_TIMESTAMPING


	)

63 
	#SO_PROTOCOL
 38

	)

64 
	#SO_DOMAIN
 39

	)

66 
	#SO_RXQ_OVFL
 40

	)

68 
	#SO_WIFI_STATUS
 41

	)

69 
	#SCM_WIFI_STATUS
 
SO_WIFI_STATUS


	)

70 
	#SO_PEEK_OFF
 42

	)

73 
	#SO_NOFCS
 43

	)

75 
	#SO_LOCK_FILTER
 44

	)

77 
	#SO_SELECT_ERR_QUEUE
 45

	)

79 
	#SO_BUSY_POLL
 46

	)

81 
	#SO_MAX_PACING_RATE
 47

	)

	@/usr/include/asm/errno.h

1 
	~<asm-gic/ºo.h
>

	@/usr/include/asm/param.h

1 
	~<asm-gic/·¿m.h
>

	@/usr/include/asm/types.h

1 #iâdeà
_ASM_X86_TYPES_H


2 
	#_ASM_X86_TYPES_H


	)

4 
	~<asm-gic/ty³s.h
>

	@/usr/include/bits/libc-lock.h

19 #iâdeà
_BITS_LIBC_LOCK_H


20 
	#_BITS_LIBC_LOCK_H
 1

	)

22 
	~<±h»ad.h
>

23 
	#__Ãed_NULL


	)

24 
	~<¡ddef.h
>

27 #ifdeà
_LIBC


28 
	~<lowËvlock.h
>

29 
	~<s.h
>

30 
	~<±h»ad-funùiÚs.h
>

31 
	~<ºo.h
>

32 
	~<gnu/ÝtiÚ-groups.h
>

36 #ià
defed
 
_LIBC
 || defed 
_IO_MTSAFE_IO


37 #ià(
defed
 
NOT_IN_libc
 && !defed 
IS_IN_lib±h»ad
è|| !defed 
_LIBC


38 ¡ruù { 
±h»ad_mux_t
 
	mmux
; } 
	t__libc_lock_»cursive_t
;

40 ¡ruù { 
	mlock
; 
	mút
; *
	mowÃr
; } 
	t__libc_lock_»cursive_t
;

43 
__libc_lock_»cursive_Ýaque__
 
	t__libc_lock_»cursive_t
;

53 
	#__libc_lock_defe_»cursive
(
CLASS
,
NAME
) \

54 
CLASS
 
__libc_lock_»cursive_t
 
NAME
;

	)

58 #ià
defed
 
_LIBC
 && (!defed 
NOT_IN_libc
 || defed 
IS_IN_lib±h»ad
)

59 #ià
LLL_LOCK_INITIALIZER
 == 0

60 
	#__libc_lock_defe_lized_»cursive
(
CLASS
,
NAME
) \

61 
CLASS
 
__libc_lock_»cursive_t
 
NAME
;

	)

63 
	#__libc_lock_defe_lized_»cursive
(
CLASS
,
NAME
) \

64 
CLASS
 
__libc_lock_»cursive_t
 
NAME
 = 
_LIBC_LOCK_RECURSIVE_INITIALIZER
;

	)

66 
	#_LIBC_LOCK_RECURSIVE_INITIALIZER
 \

67 { 
LLL_LOCK_INITIALIZER
, 0, 
NULL
 }

	)

69 
	#__libc_lock_defe_lized_»cursive
(
CLASS
,
NAME
) \

70 
CLASS
 
__libc_lock_»cursive_t
 
NAME
 = 
_LIBC_LOCK_RECURSIVE_INITIALIZER
;

	)

71 
	#_LIBC_LOCK_RECURSIVE_INITIALIZER
 \

72 {
PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
}

	)

76 #ià
defed
 
_LIBC
 && (!defed 
NOT_IN_libc
 || defed 
IS_IN_lib±h»ad
)

77 
	#__libc_lock__»cursive
(
NAME
) \

78 ((
NAME
èð(
__libc_lock_»cursive_t
è
_LIBC_LOCK_RECURSIVE_INITIALIZER
, 0)

	)

80 
	#__libc_lock__»cursive
(
NAME
) \

82 ià(
__±h»ad_mux_
 !ð
NULL
) \

84 
±h»ad_mux©_t
 
__©
; \

85 
	`__±h»ad_mux©_
 (&
__©
); \

86 
	`__±h»ad_mux©_£y³
 (&
__©
, 
PTHREAD_MUTEX_RECURSIVE_NP
); \

87 
	`__±h»ad_mux_
 (&(
NAME
).
mux
, &
__©
); \

88 
	`__±h»ad_mux©_de¡roy
 (&
__©
); \

90 } 0)

	)

94 #ià
defed
 
_LIBC
 && (!defed 
NOT_IN_libc
 || defed 
IS_IN_lib±h»ad
)

95 
	#__libc_lock_fi_»cursive
(
NAME
è((è0)

	)

97 
	#__libc_lock_fi_»cursive
(
NAME
) \

98 
	`__libc_maybe_ÿÎ
 (
__±h»ad_mux_de¡roy
, (&(
NAME
).
mux
), 0)

	)

102 #ià
defed
 
_LIBC
 && (!defed 
NOT_IN_libc
 || defed 
IS_IN_lib±h»ad
)

103 #ià
__OPTION_EGLIBC_BIG_MACROS
 != 1

107 
__libc_lock_lock_»cursive_â
 (
__libc_lock_»cursive_t
 *);

108 
libc_hidd_´Ùo
 (
__libc_lock_lock_»cursive_â
);

110 #ià
__OPTION_EGLIBC_BIG_MACROS


111 
	#__libc_lock_lock_»cursive
(
NAME
) \

113 *
£lf
 = 
THREAD_SELF
; \

114 ià((
NAME
).
owÃr
 !ð
£lf
) \

116 
	`Îl_lock
 ((
NAME
).
lock
, 
LLL_PRIVATE
); \

117 (
NAME
).
owÃr
 = 
£lf
; \

119 ++(
NAME
).
út
; \

120 } 0)

	)

122 
	#__libc_lock_lock_»cursive
(
NAME
) \

123 
	`__libc_lock_lock_»cursive_â
 (&(
NAME
))

	)

126 
	#__libc_lock_lock_»cursive
(
NAME
) \

127 
	`__libc_maybe_ÿÎ
 (
__±h»ad_mux_lock
, (&(
NAME
).
mux
), 0)

	)

131 #ià
defed
 
_LIBC
 && (!defed 
NOT_IN_libc
 || defed 
IS_IN_lib±h»ad
)

132 #ià
__OPTION_EGLIBC_BIG_MACROS
 != 1

136 
__libc_lock_ylock_»cursive_â
 (
__libc_lock_»cursive_t
 *);

137 
libc_hidd_´Ùo
 (
__libc_lock_ylock_»cursive_â
);

139 #ià
__OPTION_EGLIBC_BIG_MACROS


140 
	#__libc_lock_ylock_»cursive
(
NAME
) \

142 
»suÉ
 = 0; \

143 *
£lf
 = 
THREAD_SELF
; \

144 ià((
NAME
).
owÃr
 !ð
£lf
) \

146 ià(
	`Îl_ylock
 ((
NAME
).
lock
) == 0) \

148 (
NAME
).
owÃr
 = 
£lf
; \

149 (
NAME
).
út
 = 1; \

152 
»suÉ
 = 
EBUSY
; \

155 ++(
NAME
).
út
; \

156 
»suÉ
; \

157 })

	)

159 
	#__libc_lock_ylock_»cursive
(
NAME
) \

160 
	`__libc_lock_ylock_»cursive_â
 (&(
NAME
))

	)

163 
	#__libc_lock_ylock_»cursive
(
NAME
) \

164 
	`__libc_maybe_ÿÎ
 (
__±h»ad_mux_ylock
, (&(
NAME
).
mux
), 0)

	)

168 #ià
defed
 
_LIBC
 && (!defed 
NOT_IN_libc
 || defed 
IS_IN_lib±h»ad
)

169 #ià
__OPTION_EGLIBC_BIG_MACROS
 != 1

173 
__libc_lock_uÆock_»cursive_â
 (
__libc_lock_»cursive_t
 *);

174 
libc_hidd_´Ùo
 (
__libc_lock_uÆock_»cursive_â
);

176 #ià
__OPTION_EGLIBC_BIG_MACROS


178 
	#__libc_lock_uÆock_»cursive
(
NAME
) \

180 ià(--(
NAME
).
út
 == 0) \

182 (
NAME
).
owÃr
 = 
NULL
; \

183 
	`Îl_uÆock
 ((
NAME
).
lock
, 
LLL_PRIVATE
); \

185 } 0)

	)

187 
	#__libc_lock_uÆock_»cursive
(
NAME
) \

188 
	`__libc_lock_uÆock_»cursive_â
 (&(
NAME
))

	)

191 
	#__libc_lock_uÆock_»cursive
(
NAME
) \

192 
	`__libc_maybe_ÿÎ
 (
__±h»ad_mux_uÆock
, (&(
NAME
).
mux
), 0)

	)

199 
_±h»ad_þnup_push_deãr
 (
_±h»ad_þnup_bufãr
 *
bufãr
,

200 (*
route
è(*), *
¬g
);

201 
	`_±h»ad_þnup_pÝ_»¡Üe
 (
_±h»ad_þnup_bufãr
 *
bufãr
,

202 
execu
);

205 
	#__libc_þnup_»giÚ_¡¬t
(
DOIT
, 
FCT
, 
ARG
) \

206 { 
_±h»ad_þnup_bufãr
 
_bufãr
; \

207 
_ava
; \

208 ià(
DOIT
) { \

209 
_ava
 = 
	`PTFAVAIL
 (
_±h»ad_þnup_push_deãr
); \

210 ià(
_ava
) { \

211 
	`__libc_±f_ÿÎ_®ways
 (
_±h»ad_þnup_push_deãr
, (&
_bufãr
, 
FCT
, \

212 
ARG
)); \

214 
_bufãr
.
__route
 = (
FCT
); \

215 
_bufãr
.
__¬g
 = (
ARG
); \

218 
_ava
 = 0; \

219 }

	)

222 
	#__libc_þnup_»giÚ_d
(
DOIT
) \

223 ià(
_ava
) { \

224 
	`__libc_±f_ÿÎ_®ways
 (
_±h»ad_þnup_pÝ_»¡Üe
, (&
_bufãr
, 
DOIT
));\

225 } ià(
DOIT
) \

226 
_bufãr
.
	`__route
 (_bufãr.
__¬g
); \

227 
	}

	)
}

232 #ifdeà
_LIBC


233 
	~"libc-lockP.h
"

	@/usr/include/gconv.h

22 #iâdeà
_GCONV_H


23 
	#_GCONV_H
 1

	)

25 
	~<ã©u»s.h
>

26 
	#__Ãed_mb¡©e_t


	)

27 
	#__Ãed_wt_t


	)

28 
	~<wch¬.h
>

29 
	#__Ãed_size_t


	)

30 
	#__Ãed_wch¬_t


	)

31 
	~<¡ddef.h
>

34 
	#__UNKNOWN_10646_CHAR
 ((
wch¬_t
è0xfffd)

	)

39 
	m__GCONV_OK
 = 0,

40 
	m__GCONV_NOCONV
,

41 
	m__GCONV_NODB
,

42 
	m__GCONV_NOMEM
,

44 
	m__GCONV_EMPTY_INPUT
,

45 
	m__GCONV_FULL_OUTPUT
,

46 
	m__GCONV_ILLEGAL_INPUT
,

47 
	m__GCONV_INCOMPLETE_INPUT
,

49 
	m__GCONV_ILLEGAL_DESCRIPTOR
,

50 
	m__GCONV_INTERNAL_ERROR


57 
	m__GCONV_IS_LAST
 = 0x0001,

58 
	m__GCONV_IGNORE_ERRORS
 = 0x0002,

59 
	m__GCONV_SWAP
 = 0x0004

64 
	g__gcÚv_¡
;

65 
	g__gcÚv_¡_d©a
;

66 
	g__gcÚv_lßded_objeù
;

67 
	g__gcÚv_ªs_d©a
;

71 (*
	t__gcÚv_fù
è(
	t__gcÚv_¡
 *, 
	t__gcÚv_¡_d©a
 *,

73 **, 
	tsize_t
 *, , );

76 
	$wt_t
 (*
	t__gcÚv_btowc_fù
è(
	t__gcÚv_¡
 *, );

79 (*
	t__gcÚv__fù
è(
	t__gcÚv_¡
 *);

80 (*
	t__gcÚv_d_fù
è(
	t__gcÚv_¡
 *);

84 (*
	t__gcÚv_ªs_fù
è(
	t__gcÚv_¡
 *,

85 
	t__gcÚv_¡_d©a
 *, *,

89 
	tsize_t
 *);

92 (*
	t__gcÚv_ªs_cÚxt_fù
) (*, const *,

97 (*
	t__gcÚv_ªs_quy_fù
) (const *, const ***,

98 
	tsize_t
 *);

101 (*
	t__gcÚv_ªs__fù
) (**, const *);

102 (*
	t__gcÚv_ªs_d_fù
) (*);

104 
	s__gcÚv_ªs_d©a


107 
__gcÚv_ªs_fù
 
__ªs_fù
;

108 
__gcÚv_ªs_cÚxt_fù
 
__ªs_cÚxt_fù
;

109 
__gcÚv_ªs_d_fù
 
__ªs_d_fù
;

110 *
__d©a
;

111 
__gcÚv_ªs_d©a
 *
__Ãxt
;

116 
	s__gcÚv_¡


118 
__gcÚv_lßded_objeù
 *
__shlib_hªdË
;

119 cÚ¡ *
__modÇme
;

121 
__couÁ
;

123 *
__äom_Çme
;

124 *
__to_Çme
;

126 
__gcÚv_fù
 
__fù
;

127 
__gcÚv_btowc_fù
 
__btowc_fù
;

128 
__gcÚv__fù
 
___fù
;

129 
__gcÚv_d_fù
 
__d_fù
;

133 
__m_Ãeded_äom
;

134 
__max_Ãeded_äom
;

135 
__m_Ãeded_to
;

136 
__max_Ãeded_to
;

139 
__¡©eful
;

141 *
__d©a
;

146 
	s__gcÚv_¡_d©a


148 *
__outbuf
;

149 *
__outbuãnd
;

153 
__æags
;

157 
__voÿtiÚ_couÁ
;

161 
__º®_u£
;

163 
__mb¡©e_t
 *
__¡©
;

164 
__mb¡©e_t
 
__¡©e
;

168 
__gcÚv_ªs_d©a
 *
__ªs
;

173 
	s__gcÚv_fo


175 
size_t
 
__n¡s
;

176 
__gcÚv_¡
 *
__¡s
;

177 
__exnsiÚ__
 
__gcÚv_¡_d©a
 
__d©a
 
__æex¬r
;

178 } *
	t__gcÚv_t
;

	@/usr/include/gnu/stubs-32.h

6 #ifdeà
_LIBC


7 #rÜ 
AµliÿtiÚs
 
may
 
nÙ
 
defe
 
the
 
maüo
 
_LIBC


10 
	#__¡ub_chæags


	)

11 
	#__¡ub_çach


	)

12 
	#__¡ub_fchæags


	)

13 
	#__¡ub_fdach


	)

14 
	#__¡ub_gy


	)

15 
	#__¡ub_lchmod


	)

16 
	#__¡ub_»voke


	)

17 
	#__¡ub_£og


	)

18 
	#__¡ub_sig»tuº


	)

19 
	#__¡ub_s¡k


	)

20 
	#__¡ub_¡ty


	)

	@/usr/include/gnu/stubs-64.h

6 #ifdeà
_LIBC


7 #rÜ 
AµliÿtiÚs
 
may
 
nÙ
 
defe
 
the
 
maüo
 
_LIBC


10 
	#__¡ub_bdæush


	)

11 
	#__¡ub_chæags


	)

12 
	#__¡ub_çach


	)

13 
	#__¡ub_fchæags


	)

14 
	#__¡ub_fdach


	)

15 
	#__¡ub_gmsg


	)

16 
	#__¡ub_gy


	)

17 
	#__¡ub_lchmod


	)

18 
	#__¡ub_putmsg


	)

19 
	#__¡ub_»voke


	)

20 
	#__¡ub_£og


	)

21 
	#__¡ub_sig»tuº


	)

22 
	#__¡ub_s¡k


	)

23 
	#__¡ub_¡ty


	)

	@/usr/include/gnu/stubs-x32.h

6 #ifdeà
_LIBC


7 #rÜ 
AµliÿtiÚs
 
may
 
nÙ
 
defe
 
the
 
maüo
 
_LIBC


10 
	#__¡ub_bdæush


	)

11 
	#__¡ub_chæags


	)

12 
	#__¡ub_ü_moduË


	)

13 
	#__¡ub_çach


	)

14 
	#__¡ub_fchæags


	)

15 
	#__¡ub_fdach


	)

16 
	#__¡ub_g_kÃl_syms


	)

17 
	#__¡ub_gmsg


	)

18 
	#__¡ub_gy


	)

19 
	#__¡ub_lchmod


	)

20 
	#__¡ub_nfs£rvùl


	)

21 
	#__¡ub_putmsg


	)

22 
	#__¡ub_quy_moduË


	)

23 
	#__¡ub_»voke


	)

24 
	#__¡ub_£og


	)

25 
	#__¡ub_sig»tuº


	)

26 
	#__¡ub_s¡k


	)

27 
	#__¡ub_¡ty


	)

28 
	#__¡ub_u£lib


	)

	@/usr/include/linux/posix_types.h

1 #iâdeà
_LINUX_POSIX_TYPES_H


2 
	#_LINUX_POSIX_TYPES_H


	)

4 
	~<lux/¡ddef.h
>

21 #undeà
__FD_SETSIZE


22 
	#__FD_SETSIZE
 1024

	)

25 
	mfds_bs
[
__FD_SETSIZE
 / (8 * ())];

26 } 
	t__kÃl_fd_£t
;

29 (*
	t__kÃl_sighªdËr_t
)();

32 
	t__kÃl_key_t
;

33 
	t__kÃl_mqd_t
;

35 
	~<asm/posix_ty³s.h
>

	@/usr/include/wchar.h

23 #iâdeà
_WCHAR_H


25 #ià!
defed
 
__Ãed_mb¡©e_t
 && !defed 
__Ãed_wt_t


26 
	#_WCHAR_H
 1

	)

27 
	~<ã©u»s.h
>

30 #ifdeà
_WCHAR_H


32 
	#__Ãed___FILE


	)

33 #ià
defed
 
__USE_UNIX98
 || defed 
__USE_XOPEN2K


34 
	#__Ãed_FILE


	)

36 
	~<¡dio.h
>

38 
	#__Ãed___va_li¡


	)

39 
	~<¡d¬g.h
>

41 
	~<bs/wch¬.h
>

44 
	#__Ãed_size_t


	)

45 
	#__Ãed_wch¬_t


	)

46 
	#__Ãed_NULL


	)

48 #ià
defed
 
_WCHAR_H
 || defed 
__Ãed_wt_t
 || !defed 
__WINT_TYPE__


49 #undeà
__Ãed_wt_t


50 
	#__Ãed_wt_t


	)

51 
	~<¡ddef.h
>

55 #iâdeà
_WINT_T


60 
	#_WINT_T


	)

61 
	twt_t
;

65 #ià
defed
 
__ýlu¥lus
 && defed 
_GLIBCPP_USE_NAMESPACES
 \

66 && 
defed
 
__WINT_TYPE__


67 
__BEGIN_NAMESPACE_STD


68 
__WINT_TYPE__
 
	twt_t
;

69 
	g__END_NAMESPACE_STD


74 #ià
defed
 
__ýlu¥lus
 && 
__GNUC_PREREQ
 (4, 4)

75 
	#__CORRECT_ISO_CPP_WCHAR_H_PROTO


	)

79 #ià(
defed
 
_WCHAR_H
 || defed 
__Ãed_mb¡©e_t
è&& !defed 
____mb¡©e_t_defed


80 
	#____mb¡©e_t_defed
 1

	)

84 
	m__couÁ
;

87 #ifdeà
__WINT_TYPE__


88 
__WINT_TYPE__
 
	m__wch
;

90 
wt_t
 
	m__wch
;

92 
	m__wchb
[4];

93 } 
	m__v®ue
;

94 } 
	t__mb¡©e_t
;

96 #undeà
__Ãed_mb¡©e_t


101 #ifdeà
_WCHAR_H


103 #iâdeà
__mb¡©e_t_defed


104 
__BEGIN_NAMESPACE_C99


106 
__mb¡©e_t
 
	tmb¡©e_t
;

107 
	g__END_NAMESPACE_C99


108 
	#__mb¡©e_t_defed
 1

	)

111 #ifdeà
__USE_GNU


112 
	$__USING_NAMESPACE_C99
(
mb¡©e_t
)

115 #iâdeà
WCHAR_MIN


117 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

118 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

121 #iâdeà
WEOF


122 
	#WEOF
 (0xffffffffu)

	)

127 #ià
defed
 
__USE_XOPEN
 && !defed 
__USE_UNIX98


128 
	~<wùy³.h
>

132 
__BEGIN_DECLS


134 
__BEGIN_NAMESPACE_STD


137 
tm
;

138 
__END_NAMESPACE_STD


142 
	$__USING_NAMESPACE_STD
(
tm
)

145 
__BEGIN_NAMESPACE_STD


147 
wch¬_t
 *
	$wcsýy
 (
wch¬_t
 *
__»¡riù
 
__de¡
,

148 cÚ¡ 
wch¬_t
 *
__»¡riù
 
__¤c
è
__THROW
;

150 
wch¬_t
 *
	$wc¢ýy
 (
wch¬_t
 *
__»¡riù
 
__de¡
,

151 cÚ¡ 
wch¬_t
 *
__»¡riù
 
__¤c
, 
size_t
 
__n
)

152 
__THROW
;

155 
wch¬_t
 *
	$wcsÿt
 (
wch¬_t
 *
__»¡riù
 
__de¡
,

156 cÚ¡ 
wch¬_t
 *
__»¡riù
 
__¤c
è
__THROW
;

158 
wch¬_t
 *
	$wc¢ÿt
 (
wch¬_t
 *
__»¡riù
 
__de¡
,

159 cÚ¡ 
wch¬_t
 *
__»¡riù
 
__¤c
, 
size_t
 
__n
)

160 
__THROW
;

163 
	$wcscmp
 (cÚ¡ 
wch¬_t
 *
__s1
, cÚ¡ wch¬_*
__s2
)

164 
__THROW
 
__©ibu_pu»__
;

166 
	$wc¢cmp
 (cÚ¡ 
wch¬_t
 *
__s1
, cÚ¡ wch¬_*
__s2
, 
size_t
 
__n
)

167 
__THROW
 
__©ibu_pu»__
;

168 
__END_NAMESPACE_STD


170 #ifdeà
__USE_XOPEN2K8


172 
	$wcsÿ£cmp
 (cÚ¡ 
wch¬_t
 *
__s1
, cÚ¡ wch¬_*
__s2
è
__THROW
;

175 
	$wc¢ÿ£cmp
 (cÚ¡ 
wch¬_t
 *
__s1
, cÚ¡ wch¬_*
__s2
,

176 
size_t
 
__n
è
__THROW
;

180 
	~<xloÿË.h
>

182 
	$wcsÿ£cmp_l
 (cÚ¡ 
wch¬_t
 *
__s1
, cÚ¡ wch¬_*
__s2
,

183 
__loÿË_t
 
__loc
è
__THROW
;

185 
	$wc¢ÿ£cmp_l
 (cÚ¡ 
wch¬_t
 *
__s1
, cÚ¡ wch¬_*
__s2
,

186 
size_t
 
__n
, 
__loÿË_t
 
__loc
è
__THROW
;

189 
__BEGIN_NAMESPACE_STD


192 
	$wcscÞl
 (cÚ¡ 
wch¬_t
 *
__s1
, cÚ¡ wch¬_*
__s2
è
__THROW
;

196 
size_t
 
	$wcsxäm
 (
wch¬_t
 *
__»¡riù
 
__s1
,

197 cÚ¡ 
wch¬_t
 *
__»¡riù
 
__s2
, 
size_t
 
__n
è
__THROW
;

198 
__END_NAMESPACE_STD


200 #ifdeà
__USE_XOPEN2K8


206 
	$wcscÞl_l
 (cÚ¡ 
wch¬_t
 *
__s1
, cÚ¡ wch¬_*
__s2
,

207 
__loÿË_t
 
__loc
è
__THROW
;

212 
size_t
 
	$wcsxäm_l
 (
wch¬_t
 *
__s1
, cÚ¡ wch¬_*
__s2
,

213 
size_t
 
__n
, 
__loÿË_t
 
__loc
è
__THROW
;

216 
wch¬_t
 *
	$wcsdup
 (cÚ¡ 
wch¬_t
 *
__s
è
__THROW
 
__©ibu_m®loc__
;

219 
__BEGIN_NAMESPACE_STD


221 #ifdeà
__CORRECT_ISO_CPP_WCHAR_H_PROTO


222 "C++" 
wch¬_t
 *
	$wcschr
 (
wch¬_t
 *
__wcs
, wch¬_
__wc
)

223 
__THROW
 
	`__asm
 ("wcschr"è
__©ibu_pu»__
;

224 "C++" cÚ¡ 
wch¬_t
 *
	$wcschr
 (cÚ¡ 
wch¬_t
 *
__wcs
, wch¬_
__wc
)

225 
__THROW
 
	`__asm
 ("wcschr"è
__©ibu_pu»__
;

227 
wch¬_t
 *
	$wcschr
 (cÚ¡ 
wch¬_t
 *
__wcs
, wch¬_
__wc
)

228 
__THROW
 
__©ibu_pu»__
;

231 #ifdeà
__CORRECT_ISO_CPP_WCHAR_H_PROTO


232 "C++" 
wch¬_t
 *
	$wc¤chr
 (
wch¬_t
 *
__wcs
, wch¬_
__wc
)

233 
__THROW
 
	`__asm
 ("wc¤chr"è
__©ibu_pu»__
;

234 "C++" cÚ¡ 
wch¬_t
 *
	$wc¤chr
 (cÚ¡ 
wch¬_t
 *
__wcs
, wch¬_
__wc
)

235 
__THROW
 
	`__asm
 ("wc¤chr"è
__©ibu_pu»__
;

237 
wch¬_t
 *
	$wc¤chr
 (cÚ¡ 
wch¬_t
 *
__wcs
, wch¬_
__wc
)

238 
__THROW
 
__©ibu_pu»__
;

240 
__END_NAMESPACE_STD


242 #ifdeà
__USE_GNU


245 
wch¬_t
 *
	$wcschºul
 (cÚ¡ 
wch¬_t
 *
__s
, wch¬_
__wc
)

246 
__THROW
 
__©ibu_pu»__
;

249 
__BEGIN_NAMESPACE_STD


252 
size_t
 
	$wcsc¥n
 (cÚ¡ 
wch¬_t
 *
__wcs
, cÚ¡ wch¬_*
__»jeù
)

253 
__THROW
 
__©ibu_pu»__
;

256 
size_t
 
	$wcs¥n
 (cÚ¡ 
wch¬_t
 *
__wcs
, cÚ¡ wch¬_*
__acû±
)

257 
__THROW
 
__©ibu_pu»__
;

259 #ifdeà
__CORRECT_ISO_CPP_WCHAR_H_PROTO


260 "C++" 
wch¬_t
 *
	$wc¥brk
 (
wch¬_t
 *
__wcs
, cÚ¡ wch¬_*
__acû±
)

261 
__THROW
 
	`__asm
 ("wc¥brk"è
__©ibu_pu»__
;

262 "C++" cÚ¡ 
wch¬_t
 *
	$wc¥brk
 (cÚ¡ 
wch¬_t
 *
__wcs
,

263 cÚ¡ 
wch¬_t
 *
__acû±
)

264 
__THROW
 
	`__asm
 ("wc¥brk"è
__©ibu_pu»__
;

266 
wch¬_t
 *
	$wc¥brk
 (cÚ¡ 
wch¬_t
 *
__wcs
, cÚ¡ wch¬_*
__acû±
)

267 
__THROW
 
__©ibu_pu»__
;

270 #ifdeà
__CORRECT_ISO_CPP_WCHAR_H_PROTO


271 "C++" 
wch¬_t
 *
	$wcs¡r
 (
wch¬_t
 *
__hay¡ack
, cÚ¡ wch¬_*
__ÃedË
)

272 
__THROW
 
	`__asm
 ("wcs¡r"è
__©ibu_pu»__
;

273 "C++" cÚ¡ 
wch¬_t
 *
	$wcs¡r
 (cÚ¡ 
wch¬_t
 *
__hay¡ack
,

274 cÚ¡ 
wch¬_t
 *
__ÃedË
)

275 
__THROW
 
	`__asm
 ("wcs¡r"è
__©ibu_pu»__
;

277 
wch¬_t
 *
	$wcs¡r
 (cÚ¡ 
wch¬_t
 *
__hay¡ack
, cÚ¡ wch¬_*
__ÃedË
)

278 
__THROW
 
__©ibu_pu»__
;

282 
wch¬_t
 *
	$wc¡ok
 (
wch¬_t
 *
__»¡riù
 
__s
,

283 cÚ¡ 
wch¬_t
 *
__»¡riù
 
__dim
,

284 
wch¬_t
 **
__»¡riù
 
__±r
è
__THROW
;

287 
size_t
 
	$wc¦
 (cÚ¡ 
wch¬_t
 *
__s
è
__THROW
 
__©ibu_pu»__
;

288 
__END_NAMESPACE_STD


290 #ifdeà
__USE_XOPEN


292 #ifdeà
__CORRECT_ISO_CPP_WCHAR_H_PROTO


293 "C++" 
wch¬_t
 *
	$wcswcs
 (
wch¬_t
 *
__hay¡ack
, cÚ¡ wch¬_*
__ÃedË
)

294 
__THROW
 
	`__asm
 ("wcswcs"è
__©ibu_pu»__
;

295 "C++" cÚ¡ 
wch¬_t
 *
	$wcswcs
 (cÚ¡ 
wch¬_t
 *
__hay¡ack
,

296 cÚ¡ 
wch¬_t
 *
__ÃedË
)

297 
__THROW
 
	`__asm
 ("wcswcs"è
__©ibu_pu»__
;

299 
wch¬_t
 *
	$wcswcs
 (cÚ¡ 
wch¬_t
 *
__hay¡ack
, cÚ¡ wch¬_*
__ÃedË
)

300 
__THROW
 
__©ibu_pu»__
;

304 #ifdeà
__USE_XOPEN2K8


306 
size_t
 
	$wc¢Ën
 (cÚ¡ 
wch¬_t
 *
__s
, 
size_t
 
__maxËn
)

307 
__THROW
 
__©ibu_pu»__
;

311 
__BEGIN_NAMESPACE_STD


313 #ifdeà
__CORRECT_ISO_CPP_WCHAR_H_PROTO


314 "C++" 
wch¬_t
 *
	$wmemchr
 (
wch¬_t
 *
__s
, wch¬_
__c
, 
size_t
 
__n
)

315 
__THROW
 
	`__asm
 ("wmemchr"è
__©ibu_pu»__
;

316 "C++" cÚ¡ 
wch¬_t
 *
	$wmemchr
 (cÚ¡ 
wch¬_t
 *
__s
, wch¬_
__c
,

317 
size_t
 
__n
)

318 
__THROW
 
	`__asm
 ("wmemchr"è
__©ibu_pu»__
;

320 
wch¬_t
 *
	$wmemchr
 (cÚ¡ 
wch¬_t
 *
__s
, wch¬_
__c
, 
size_t
 
__n
)

321 
__THROW
 
__©ibu_pu»__
;

325 
	$wmemcmp
 (cÚ¡ 
wch¬_t
 *
__s1
, cÚ¡ wch¬_*
__s2
, 
size_t
 
__n
)

326 
__THROW
 
__©ibu_pu»__
;

329 
wch¬_t
 *
	$wmemýy
 (
wch¬_t
 *
__»¡riù
 
__s1
,

330 cÚ¡ 
wch¬_t
 *
__»¡riù
 
__s2
, 
size_t
 
__n
è
__THROW
;

334 
wch¬_t
 *
	$wmemmove
 (
wch¬_t
 *
__s1
, cÚ¡ wch¬_*
__s2
, 
size_t
 
__n
)

335 
__THROW
;

338 
wch¬_t
 *
	$wmem£t
 (
wch¬_t
 *
__s
, wch¬_
__c
, 
size_t
 
__n
è
__THROW
;

339 
__END_NAMESPACE_STD


341 #ifdeà
__USE_GNU


344 
wch¬_t
 *
	$wmempýy
 (
wch¬_t
 *
__»¡riù
 
__s1
,

345 cÚ¡ 
wch¬_t
 *
__»¡riù
 
__s2
, 
size_t
 
__n
)

346 
__THROW
;

350 
__BEGIN_NAMESPACE_STD


353 
wt_t
 
	$btowc
 (
__c
è
__THROW
;

357 
	$wùob
 (
wt_t
 
__c
è
__THROW
;

361 
	$mbs
 (cÚ¡ 
mb¡©e_t
 *
__ps
è
__THROW
 
__©ibu_pu»__
;

365 
size_t
 
	$mb¹owc
 (
wch¬_t
 *
__»¡riù
 
__pwc
,

366 cÚ¡ *
__»¡riù
 
__s
, 
size_t
 
__n
,

367 
mb¡©e_t
 *
__»¡riù
 
__p
è
__THROW
;

370 
size_t
 
	$wütomb
 (*
__»¡riù
 
__s
, 
wch¬_t
 
__wc
,

371 
mb¡©e_t
 *
__»¡riù
 
__ps
è
__THROW
;

374 
size_t
 
	$__mb¾
 (cÚ¡ *
__»¡riù
 
__s
, 
size_t
 
__n
,

375 
mb¡©e_t
 *
__»¡riù
 
__ps
è
__THROW
;

376 
size_t
 
	$mb¾
 (cÚ¡ *
__»¡riù
 
__s
, 
size_t
 
__n
,

377 
mb¡©e_t
 *
__»¡riù
 
__ps
è
__THROW
;

378 
__END_NAMESPACE_STD


380 #ifdeà
__USE_EXTERN_INLINES


386 
wt_t
 
	$__btowc_®s
 (
__c
è
	`__asm
 ("btowc");

387 
__exº_le
 
wt_t


388 
	`__NTH
 (
	$btowc
 (
__c
))

389 {  (
	`__but_cÚ¡ªt_p
 (
__c
) && __c >= '\0' && __c <= '\x7f'

390 ? (
wt_t
è
__c
 : 
	`__btowc_®s
 (__c)); 
	}
}

392 
	$__wùob_®s
 (
wt_t
 
__c
è
	`__asm
 ("wctob");

393 
__exº_le
 

394 
	`__NTH
 (
	$wùob
 (
wt_t
 
__wc
))

395 {  (
	`__but_cÚ¡ªt_p
 (
__wc
è&& __wø>ð
L
'\0' && __wc <= L'\x7f'

396 ? (è
__wc
 : 
	`__wùob_®s
 (__wc)); 
	}
}

398 
__exº_le
 
size_t


399 
__NTH
 (
	$mb¾
 (cÚ¡ *
__»¡riù
 
__s
, 
size_t
 
__n
,

400 
mb¡©e_t
 *
__»¡riù
 
__ps
))

401 {  (
__ps
 !ð
NULL


402 ? 
	`mb¹owc
 (
NULL
, 
__s
, 
__n
, 
__ps
è: 
	`__mb¾
 (__s, __n, NULL)); 
	}
}

405 
__BEGIN_NAMESPACE_STD


408 
size_t
 
	$mb¤towcs
 (
wch¬_t
 *
__»¡riù
 
__d¡
,

409 cÚ¡ **
__»¡riù
 
__¤c
, 
size_t
 
__Ën
,

410 
mb¡©e_t
 *
__»¡riù
 
__ps
è
__THROW
;

414 
size_t
 
	$wc¤tombs
 (*
__»¡riù
 
__d¡
,

415 cÚ¡ 
wch¬_t
 **
__»¡riù
 
__¤c
, 
size_t
 
__Ën
,

416 
mb¡©e_t
 *
__»¡riù
 
__ps
è
__THROW
;

417 
__END_NAMESPACE_STD


420 #ifdef 
__USE_XOPEN2K8


423 
size_t
 
	$mb¢¹owcs
 (
wch¬_t
 *
__»¡riù
 
__d¡
,

424 cÚ¡ **
__»¡riù
 
__¤c
, 
size_t
 
__nmc
,

425 
size_t
 
__Ën
, 
mb¡©e_t
 *
__»¡riù
 
__ps
è
__THROW
;

429 
size_t
 
	$wc¢¹ombs
 (*
__»¡riù
 
__d¡
,

430 cÚ¡ 
wch¬_t
 **
__»¡riù
 
__¤c
,

431 
size_t
 
__nwc
, size_
__Ën
,

432 
mb¡©e_t
 *
__»¡riù
 
__ps
è
__THROW
;

437 #ifdeà
__USE_XOPEN


439 
	$wcwidth
 (
wch¬_t
 
__c
è
__THROW
;

443 
	$wcswidth
 (cÚ¡ 
wch¬_t
 *
__s
, 
size_t
 
__n
è
__THROW
;

447 
__BEGIN_NAMESPACE_STD


450 
	$wc¡od
 (cÚ¡ 
wch¬_t
 *
__»¡riù
 
__Å
,

451 
wch¬_t
 **
__»¡riù
 
__d±r
è
__THROW
;

452 
__END_NAMESPACE_STD


454 #ifdeà
__USE_ISOC99


455 
__BEGIN_NAMESPACE_C99


457 
	$wc¡of
 (cÚ¡ 
wch¬_t
 *
__»¡riù
 
__Å
,

458 
wch¬_t
 **
__»¡riù
 
__d±r
è
__THROW
;

459 
	$wc¡Þd
 (cÚ¡ 
wch¬_t
 *
__»¡riù
 
__Å
,

460 
wch¬_t
 **
__»¡riù
 
__d±r
è
__THROW
;

461 
__END_NAMESPACE_C99


465 
__BEGIN_NAMESPACE_STD


468 
	$wc¡Þ
 (cÚ¡ 
wch¬_t
 *
__»¡riù
 
__Å
,

469 
wch¬_t
 **
__»¡riù
 
__d±r
, 
__ba£
è
__THROW
;

473 
	$wc¡oul
 (cÚ¡ 
wch¬_t
 *
__»¡riù
 
__Å
,

474 
wch¬_t
 **
__»¡riù
 
__d±r
, 
__ba£
)

475 
__THROW
;

476 
__END_NAMESPACE_STD


478 #ifdeà
__USE_ISOC99


479 
__BEGIN_NAMESPACE_C99


482 
__exnsiÚ__


483 
	$wc¡Þl
 (cÚ¡ 
wch¬_t
 *
__»¡riù
 
__Å
,

484 
wch¬_t
 **
__»¡riù
 
__d±r
, 
__ba£
)

485 
__THROW
;

489 
__exnsiÚ__


490 
	$wc¡ouÎ
 (cÚ¡ 
wch¬_t
 *
__»¡riù
 
__Å
,

491 
wch¬_t
 **
__»¡riù
 
__d±r
,

492 
__ba£
è
__THROW
;

493 
__END_NAMESPACE_C99


496 #ifdeà
__USE_GNU


499 
__exnsiÚ__


500 
	$wc¡oq
 (cÚ¡ 
wch¬_t
 *
__»¡riù
 
__Å
,

501 
wch¬_t
 **
__»¡riù
 
__d±r
, 
__ba£
)

502 
__THROW
;

506 
__exnsiÚ__


507 
	$wc¡ouq
 (cÚ¡ 
wch¬_t
 *
__»¡riù
 
__Å
,

508 
wch¬_t
 **
__»¡riù
 
__d±r
,

509 
__ba£
è
__THROW
;

512 #ifdeà
__USE_GNU


526 
	~<xloÿË.h
>

530 
	$wc¡Þ_l
 (cÚ¡ 
wch¬_t
 *
__»¡riù
 
__Å
,

531 
wch¬_t
 **
__»¡riù
 
__d±r
, 
__ba£
,

532 
__loÿË_t
 
__loc
è
__THROW
;

534 
	$wc¡oul_l
 (cÚ¡ 
wch¬_t
 *
__»¡riù
 
__Å
,

535 
wch¬_t
 **
__»¡riù
 
__d±r
,

536 
__ba£
, 
__loÿË_t
 
__loc
è
__THROW
;

538 
__exnsiÚ__


539 
	$wc¡Þl_l
 (cÚ¡ 
wch¬_t
 *
__»¡riù
 
__Å
,

540 
wch¬_t
 **
__»¡riù
 
__d±r
,

541 
__ba£
, 
__loÿË_t
 
__loc
è
__THROW
;

543 
__exnsiÚ__


544 
	$wc¡ouÎ_l
 (cÚ¡ 
wch¬_t
 *
__»¡riù
 
__Å
,

545 
wch¬_t
 **
__»¡riù
 
__d±r
,

546 
__ba£
, 
__loÿË_t
 
__loc
)

547 
__THROW
;

549 
	$wc¡od_l
 (cÚ¡ 
wch¬_t
 *
__»¡riù
 
__Å
,

550 
wch¬_t
 **
__»¡riù
 
__d±r
, 
__loÿË_t
 
__loc
)

551 
__THROW
;

553 
	$wc¡of_l
 (cÚ¡ 
wch¬_t
 *
__»¡riù
 
__Å
,

554 
wch¬_t
 **
__»¡riù
 
__d±r
, 
__loÿË_t
 
__loc
)

555 
__THROW
;

557 
	$wc¡Þd_l
 (cÚ¡ 
wch¬_t
 *
__»¡riù
 
__Å
,

558 
wch¬_t
 **
__»¡riù
 
__d±r
,

559 
__loÿË_t
 
__loc
è
__THROW
;

563 #ifdeà
__USE_XOPEN2K8


566 
wch¬_t
 *
	$wýýy
 (
wch¬_t
 *
__»¡riù
 
__de¡
,

567 cÚ¡ 
wch¬_t
 *
__»¡riù
 
__¤c
è
__THROW
;

571 
wch¬_t
 *
	$wýnýy
 (
wch¬_t
 *
__»¡riù
 
__de¡
,

572 cÚ¡ 
wch¬_t
 *
__»¡riù
 
__¤c
, 
size_t
 
__n
)

573 
__THROW
;

580 
__FILE
 *
	$Ý_wmem¡»am
 (
wch¬_t
 **
__buæoc
, 
size_t
 *
__sizoc
è
__THROW
;

583 #ià
defed
 
__USE_ISOC95
 || defed 
__USE_UNIX98


584 
__BEGIN_NAMESPACE_STD


587 
	$fwide
 (
__FILE
 *
__å
, 
__mode
è
__THROW
;

594 
	`fw´tf
 (
__FILE
 *
__»¡riù
 
__¡»am
,

595 cÚ¡ 
wch¬_t
 *
__»¡riù
 
__fÜm©
, ...)

601 
	`w´tf
 (cÚ¡ 
wch¬_t
 *
__»¡riù
 
__fÜm©
, ...)

604 
	$sw´tf
 (
wch¬_t
 *
__»¡riù
 
__s
, 
size_t
 
__n
,

605 cÚ¡ 
wch¬_t
 *
__»¡riù
 
__fÜm©
, ...)

606 
__THROW
 ;

612 
	`vfw´tf
 (
__FILE
 *
__»¡riù
 
__s
,

613 cÚ¡ 
wch¬_t
 *
__»¡riù
 
__fÜm©
,

614 
__gnuc_va_li¡
 
__¬g
)

620 
	`vw´tf
 (cÚ¡ 
wch¬_t
 *
__»¡riù
 
__fÜm©
,

621 
__gnuc_va_li¡
 
__¬g
)

625 
	$vsw´tf
 (
wch¬_t
 *
__»¡riù
 
__s
, 
size_t
 
__n
,

626 cÚ¡ 
wch¬_t
 *
__»¡riù
 
__fÜm©
,

627 
__gnuc_va_li¡
 
__¬g
)

628 
__THROW
 ;

635 
	`fwsÿnf
 (
__FILE
 *
__»¡riù
 
__¡»am
,

636 cÚ¡ 
wch¬_t
 *
__»¡riù
 
__fÜm©
, ...)

642 
	`wsÿnf
 (cÚ¡ 
wch¬_t
 *
__»¡riù
 
__fÜm©
, ...)

645 
	$swsÿnf
 (cÚ¡ 
wch¬_t
 *
__»¡riù
 
__s
,

646 cÚ¡ 
wch¬_t
 *
__»¡riù
 
__fÜm©
, ...)

647 
__THROW
 ;

649 #ià
defed
 
__USE_ISOC99
 && !defed 
__USE_GNU
 \

650 && (!
defed
 
__LDBL_COMPAT
 || !defed 
__REDIRECT
) \

651 && (
defed
 
__STRICT_ANSI__
 || defed 
__USE_XOPEN2K
)

652 #ifdeà
__REDIRECT


656 
	`__REDIRECT
 (
fwsÿnf
, (
__FILE
 *
__»¡riù
 
__¡»am
,

657 cÚ¡ 
wch¬_t
 *
__»¡riù
 
__fÜm©
, ...),

658 
__isoc99_fwsÿnf
)

660 
	`__REDIRECT
 (
wsÿnf
, (cÚ¡ 
wch¬_t
 *
__»¡riù
 
__fÜm©
, ...),

661 
__isoc99_wsÿnf
)

663 
	`__REDIRECT_NTH
 (
swsÿnf
, (cÚ¡ 
wch¬_t
 *
__»¡riù
 
__s
,

664 cÚ¡ 
wch¬_t
 *
__»¡riù
 
__fÜm©
,

665 ...), 
__isoc99_swsÿnf
)

668 
	`__isoc99_fwsÿnf
 (
__FILE
 *
__»¡riù
 
__¡»am
,

669 cÚ¡ 
wch¬_t
 *
__»¡riù
 
__fÜm©
, ...);

670 
	`__isoc99_wsÿnf
 (cÚ¡ 
wch¬_t
 *
__»¡riù
 
__fÜm©
, ...);

671 
	$__isoc99_swsÿnf
 (cÚ¡ 
wch¬_t
 *
__»¡riù
 
__s
,

672 cÚ¡ 
wch¬_t
 *
__»¡riù
 
__fÜm©
, ...)

673 
__THROW
;

674 
	#fwsÿnf
 
__isoc99_fwsÿnf


	)

675 
	#wsÿnf
 
__isoc99_wsÿnf


	)

676 
	#swsÿnf
 
__isoc99_swsÿnf


	)

680 
__END_NAMESPACE_STD


683 #ifdeà
__USE_ISOC99


684 
__BEGIN_NAMESPACE_C99


689 
	`vfwsÿnf
 (
__FILE
 *
__»¡riù
 
__s
,

690 cÚ¡ 
wch¬_t
 *
__»¡riù
 
__fÜm©
,

691 
__gnuc_va_li¡
 
__¬g
)

697 
	`vwsÿnf
 (cÚ¡ 
wch¬_t
 *
__»¡riù
 
__fÜm©
,

698 
__gnuc_va_li¡
 
__¬g
)

701 
	$vswsÿnf
 (cÚ¡ 
wch¬_t
 *
__»¡riù
 
__s
,

702 cÚ¡ 
wch¬_t
 *
__»¡riù
 
__fÜm©
,

703 
__gnuc_va_li¡
 
__¬g
)

704 
__THROW
 ;

706 #ià!
defed
 
__USE_GNU
 \

707 && (!
defed
 
__LDBL_COMPAT
 || !defed 
__REDIRECT
) \

708 && (
defed
 
__STRICT_ANSI__
 || defed 
__USE_XOPEN2K
)

709 #ifdeà
__REDIRECT


710 
	`__REDIRECT
 (
vfwsÿnf
, (
__FILE
 *
__»¡riù
 
__s
,

711 cÚ¡ 
wch¬_t
 *
__»¡riù
 
__fÜm©
,

712 
__gnuc_va_li¡
 
__¬g
), 
__isoc99_vfwsÿnf
)

714 
	`__REDIRECT
 (
vwsÿnf
, (cÚ¡ 
wch¬_t
 *
__»¡riù
 
__fÜm©
,

715 
__gnuc_va_li¡
 
__¬g
), 
__isoc99_vwsÿnf
)

717 
	`__REDIRECT_NTH
 (
vswsÿnf
, (cÚ¡ 
wch¬_t
 *
__»¡riù
 
__s
,

718 cÚ¡ 
wch¬_t
 *
__»¡riù
 
__fÜm©
,

719 
__gnuc_va_li¡
 
__¬g
), 
__isoc99_vswsÿnf
)

722 
	`__isoc99_vfwsÿnf
 (
__FILE
 *
__»¡riù
 
__s
,

723 cÚ¡ 
wch¬_t
 *
__»¡riù
 
__fÜm©
,

724 
__gnuc_va_li¡
 
__¬g
);

725 
	`__isoc99_vwsÿnf
 (cÚ¡ 
wch¬_t
 *
__»¡riù
 
__fÜm©
,

726 
__gnuc_va_li¡
 
__¬g
);

727 
	$__isoc99_vswsÿnf
 (cÚ¡ 
wch¬_t
 *
__»¡riù
 
__s
,

728 cÚ¡ 
wch¬_t
 *
__»¡riù
 
__fÜm©
,

729 
__gnuc_va_li¡
 
__¬g
è
__THROW
;

730 
	#vfwsÿnf
 
__isoc99_vfwsÿnf


	)

731 
	#vwsÿnf
 
__isoc99_vwsÿnf


	)

732 
	#vswsÿnf
 
__isoc99_vswsÿnf


	)

736 
__END_NAMESPACE_C99


740 
__BEGIN_NAMESPACE_STD


745 
wt_t
 
	`fgwc
 (
__FILE
 *
__¡»am
);

746 
wt_t
 
	`gwc
 (
__FILE
 *
__¡»am
);

752 
wt_t
 
	`gwch¬
 ();

759 
wt_t
 
	`åutwc
 (
wch¬_t
 
__wc
, 
__FILE
 *
__¡»am
);

760 
wt_t
 
	`putwc
 (
wch¬_t
 
__wc
, 
__FILE
 *
__¡»am
);

766 
wt_t
 
	`putwch¬
 (
wch¬_t
 
__wc
);

774 
wch¬_t
 *
	`fgws
 (wch¬_*
__»¡riù
 
__ws
, 
__n
,

775 
__FILE
 *
__»¡riù
 
__¡»am
);

781 
	`åutws
 (cÚ¡ 
wch¬_t
 *
__»¡riù
 
__ws
,

782 
__FILE
 *
__»¡riù
 
__¡»am
);

789 
wt_t
 
	`ungwc
 (wt_
__wc
, 
__FILE
 *
__¡»am
);

790 
__END_NAMESPACE_STD


793 #ifdeà
__USE_GNU


801 
wt_t
 
	`gwc_uÆocked
 (
__FILE
 *
__¡»am
);

802 
wt_t
 
	`gwch¬_uÆocked
 ();

810 
wt_t
 
	`fgwc_uÆocked
 (
__FILE
 *
__¡»am
);

818 
wt_t
 
	`åutwc_uÆocked
 (
wch¬_t
 
__wc
, 
__FILE
 *
__¡»am
);

827 
wt_t
 
	`putwc_uÆocked
 (
wch¬_t
 
__wc
, 
__FILE
 *
__¡»am
);

828 
wt_t
 
	`putwch¬_uÆocked
 (
wch¬_t
 
__wc
);

837 
wch¬_t
 *
	`fgws_uÆocked
 (wch¬_*
__»¡riù
 
__ws
, 
__n
,

838 
__FILE
 *
__»¡riù
 
__¡»am
);

846 
	`åutws_uÆocked
 (cÚ¡ 
wch¬_t
 *
__»¡riù
 
__ws
,

847 
__FILE
 *
__»¡riù
 
__¡»am
);

851 
__BEGIN_NAMESPACE_C99


855 
size_t
 
	$wcsáime
 (
wch¬_t
 *
__»¡riù
 
__s
, 
size_t
 
__maxsize
,

856 cÚ¡ 
wch¬_t
 *
__»¡riù
 
__fÜm©
,

857 cÚ¡ 
tm
 *
__»¡riù
 
__
è
__THROW
;

858 
__END_NAMESPACE_C99


860 #ifdeà
__USE_GNU


861 
	~<xloÿË.h
>

865 
size_t
 
	$wcsáime_l
 (
wch¬_t
 *
__»¡riù
 
__s
, 
size_t
 
__maxsize
,

866 cÚ¡ 
wch¬_t
 *
__»¡riù
 
__fÜm©
,

867 cÚ¡ 
tm
 *
__»¡riù
 
__
,

868 
__loÿË_t
 
__loc
è
__THROW
;

877 #ià
defed
 
__USE_UNIX98
 && !defed 
__USE_GNU


878 
	#__Ãed_iswxxx


	)

879 
	~<wùy³.h
>

883 #ià
__USE_FORTIFY_LEVEL
 > 0 && 
defed
 
__fÜtify_funùiÚ


884 
	~<bs/wch¬2.h
>

887 #ifdeà
__LDBL_COMPAT


888 
	~<bs/wch¬-ldbl.h
>

891 
__END_DECLS


899 #undeà
__Ãed_mb¡©e_t


900 #undeà
__Ãed_wt_t


	@/usr/include/asm-generic/errno.h

1 #iâdeà
_ASM_GENERIC_ERRNO_H


2 
	#_ASM_GENERIC_ERRNO_H


	)

4 
	~<asm-gic/ºo-ba£.h
>

6 
	#EDEADLK
 35

	)

7 
	#ENAMETOOLONG
 36

	)

8 
	#ENOLCK
 37

	)

9 
	#ENOSYS
 38

	)

10 
	#ENOTEMPTY
 39

	)

11 
	#ELOOP
 40

	)

12 
	#EWOULDBLOCK
 
EAGAIN


	)

13 
	#ENOMSG
 42

	)

14 
	#EIDRM
 43

	)

15 
	#ECHRNG
 44

	)

16 
	#EL2NSYNC
 45

	)

17 
	#EL3HLT
 46

	)

18 
	#EL3RST
 47

	)

19 
	#ELNRNG
 48

	)

20 
	#EUNATCH
 49

	)

21 
	#ENOCSI
 50

	)

22 
	#EL2HLT
 51

	)

23 
	#EBADE
 52

	)

24 
	#EBADR
 53

	)

25 
	#EXFULL
 54

	)

26 
	#ENOANO
 55

	)

27 
	#EBADRQC
 56

	)

28 
	#EBADSLT
 57

	)

30 
	#EDEADLOCK
 
EDEADLK


	)

32 
	#EBFONT
 59

	)

33 
	#ENOSTR
 60

	)

34 
	#ENODATA
 61

	)

35 
	#ETIME
 62

	)

36 
	#ENOSR
 63

	)

37 
	#ENONET
 64

	)

38 
	#ENOPKG
 65

	)

39 
	#EREMOTE
 66

	)

40 
	#ENOLINK
 67

	)

41 
	#EADV
 68

	)

42 
	#ESRMNT
 69

	)

43 
	#ECOMM
 70

	)

44 
	#EPROTO
 71

	)

45 
	#EMULTIHOP
 72

	)

46 
	#EDOTDOT
 73

	)

47 
	#EBADMSG
 74

	)

48 
	#EOVERFLOW
 75

	)

49 
	#ENOTUNIQ
 76

	)

50 
	#EBADFD
 77

	)

51 
	#EREMCHG
 78

	)

52 
	#ELIBACC
 79

	)

53 
	#ELIBBAD
 80

	)

54 
	#ELIBSCN
 81

	)

55 
	#ELIBMAX
 82

	)

56 
	#ELIBEXEC
 83

	)

57 
	#EILSEQ
 84

	)

58 
	#ERESTART
 85

	)

59 
	#ESTRPIPE
 86

	)

60 
	#EUSERS
 87

	)

61 
	#ENOTSOCK
 88

	)

62 
	#EDESTADDRREQ
 89

	)

63 
	#EMSGSIZE
 90

	)

64 
	#EPROTOTYPE
 91

	)

65 
	#ENOPROTOOPT
 92

	)

66 
	#EPROTONOSUPPORT
 93

	)

67 
	#ESOCKTNOSUPPORT
 94

	)

68 
	#EOPNOTSUPP
 95

	)

69 
	#EPFNOSUPPORT
 96

	)

70 
	#EAFNOSUPPORT
 97

	)

71 
	#EADDRINUSE
 98

	)

72 
	#EADDRNOTAVAIL
 99

	)

73 
	#ENETDOWN
 100

	)

74 
	#ENETUNREACH
 101

	)

75 
	#ENETRESET
 102

	)

76 
	#ECONNABORTED
 103

	)

77 
	#ECONNRESET
 104

	)

78 
	#ENOBUFS
 105

	)

79 
	#EISCONN
 106

	)

80 
	#ENOTCONN
 107

	)

81 
	#ESHUTDOWN
 108

	)

82 
	#ETOOMANYREFS
 109

	)

83 
	#ETIMEDOUT
 110

	)

84 
	#ECONNREFUSED
 111

	)

85 
	#EHOSTDOWN
 112

	)

86 
	#EHOSTUNREACH
 113

	)

87 
	#EALREADY
 114

	)

88 
	#EINPROGRESS
 115

	)

89 
	#ESTALE
 116

	)

90 
	#EUCLEAN
 117

	)

91 
	#ENOTNAM
 118

	)

92 
	#ENAVAIL
 119

	)

93 
	#EISNAM
 120

	)

94 
	#EREMOTEIO
 121

	)

95 
	#EDQUOT
 122

	)

97 
	#ENOMEDIUM
 123

	)

98 
	#EMEDIUMTYPE
 124

	)

99 
	#ECANCELED
 125

	)

100 
	#ENOKEY
 126

	)

101 
	#EKEYEXPIRED
 127

	)

102 
	#EKEYREVOKED
 128

	)

103 
	#EKEYREJECTED
 129

	)

106 
	#EOWNERDEAD
 130

	)

107 
	#ENOTRECOVERABLE
 131

	)

109 
	#ERFKILL
 132

	)

111 
	#EHWPOISON
 133

	)

	@/usr/include/asm-generic/param.h

1 #iâdeà
__ASM_GENERIC_PARAM_H


2 
	#__ASM_GENERIC_PARAM_H


	)

4 #iâdeà
HZ


5 
	#HZ
 100

	)

8 #iâdeà
EXEC_PAGESIZE


9 
	#EXEC_PAGESIZE
 4096

	)

12 #iâdeà
NOGROUP


13 
	#NOGROUP
 (-1)

	)

16 
	#MAXHOSTNAMELEN
 64

	)

	@/usr/include/asm-generic/types.h

1 #iâdeà
_ASM_GENERIC_TYPES_H


2 
	#_ASM_GENERIC_TYPES_H


	)

7 
	~<asm-gic/t-Î64.h
>

	@/usr/include/asm/posix_types.h

1 #ifdeà
__i386__


2 
	~<asm/posix_ty³s_32.h
>

3 #ià
defed
(
__ILP32__
)

4 
	~<asm/posix_ty³s_x32.h
>

6 
	~<asm/posix_ty³s_64.h
>

	@/usr/include/asm/sockios.h

1 
	~<asm-gic/sockios.h
>

	@/usr/include/bits/wchar-ldbl.h

19 #iâdeà
_WCHAR_H


23 #ià
defed
 
__USE_ISOC95
 || defed 
__USE_UNIX98


24 
__BEGIN_NAMESPACE_C99


25 
__LDBL_REDIR_DECL
 (
fw´tf
);

26 
__LDBL_REDIR_DECL
 (
w´tf
);

27 
__LDBL_REDIR_DECL
 (
sw´tf
);

28 
__LDBL_REDIR_DECL
 (
vfw´tf
);

29 
__LDBL_REDIR_DECL
 (
vw´tf
);

30 
__LDBL_REDIR_DECL
 (
vsw´tf
);

31 #ià
defed
 
__USE_ISOC99
 && !defed 
__USE_GNU
 \

32 && !
defed
 
	g__REDIRECT
 \

33 && (
defed
 
	g__STRICT_ANSI__
 || defed 
	g__USE_XOPEN2K
)

34 
	$__LDBL_REDIR1_DECL
 (
fwsÿnf
, 
__Ædbl___isoc99_fwsÿnf
)

35 
	$__LDBL_REDIR1_DECL
 (
wsÿnf
, 
__Ædbl___isoc99_wsÿnf
)

36 
	$__LDBL_REDIR1_DECL
 (
swsÿnf
, 
__Ædbl___isoc99_swsÿnf
)

38 
	`__LDBL_REDIR_DECL
 (
fwsÿnf
);

39 
	`__LDBL_REDIR_DECL
 (
wsÿnf
);

40 
	`__LDBL_REDIR_DECL
 (
swsÿnf
);

42 
__END_NAMESPACE_C99


45 #ifdeà
__USE_ISOC99


46 
__BEGIN_NAMESPACE_C99


47 
	`__LDBL_REDIR1_DECL
 (
wc¡Þd
, 
wc¡od
);

48 #ià!
defed
 
__USE_GNU
 && !defed 
__REDIRECT
 \

49 && (
defed
 
__STRICT_ANSI__
 || defed 
__USE_XOPEN2K
)

50 
	$__LDBL_REDIR1_DECL
 (
vfwsÿnf
, 
__Ædbl___isoc99_vfwsÿnf
)

51 
	$__LDBL_REDIR1_DECL
 (
vwsÿnf
, 
__Ædbl___isoc99_vwsÿnf
)

52 
	$__LDBL_REDIR1_DECL
 (
vswsÿnf
, 
__Ædbl___isoc99_vswsÿnf
)

54 
	`__LDBL_REDIR_DECL
 (
vfwsÿnf
);

55 
	`__LDBL_REDIR_DECL
 (
vwsÿnf
);

56 
	`__LDBL_REDIR_DECL
 (
vswsÿnf
);

58 
__END_NAMESPACE_C99


61 #ifdeà
__USE_GNU


62 
	`__LDBL_REDIR1_DECL
 (
wc¡Þd_l
, 
wc¡od_l
);

65 #ià
__USE_FORTIFY_LEVEL
 > 0 && 
defed
 
__fÜtify_funùiÚ


66 
	$__LDBL_REDIR_DECL
 (
__sw´tf_chk
)

67 
	$__LDBL_REDIR_DECL
 (
__vsw´tf_chk
)

68 #ià
__USE_FORTIFY_LEVEL
 > 1

69 
	$__LDBL_REDIR_DECL
 (
__fw´tf_chk
)

70 
	$__LDBL_REDIR_DECL
 (
__w´tf_chk
)

71 
	$__LDBL_REDIR_DECL
 (
__vfw´tf_chk
)

72 
	$__LDBL_REDIR_DECL
 (
__vw´tf_chk
)

	@/usr/include/bits/wchar2.h

19 #iâdeà
_WCHAR_H


24 
wch¬_t
 *
	$__wmemýy_chk
 (
wch¬_t
 *
__»¡riù
 
__s1
,

25 cÚ¡ 
wch¬_t
 *
__»¡riù
 
__s2
, 
size_t
 
__n
,

26 
size_t
 
__ns1
è
__THROW
;

27 
wch¬_t
 *
	`__REDIRECT_NTH
 (
__wmemýy_®s
,

28 (
wch¬_t
 *
__»¡riù
 
__s1
,

29 cÚ¡ 
wch¬_t
 *
__»¡riù
 
__s2
, 
size_t
 
__n
),

30 
wmemýy
);

31 
wch¬_t
 *
	`__REDIRECT_NTH
 (
__wmemýy_chk_w¬n
,

32 (
wch¬_t
 *
__»¡riù
 
__s1
,

33 cÚ¡ 
wch¬_t
 *
__»¡riù
 
__s2
, 
size_t
 
__n
,

34 
size_t
 
__ns1
), 
__wmemýy_chk
)

35 
	`__w¬Çr
 ("wmemcpy called withength biggerhan size of destination "

38 
__fÜtify_funùiÚ
 
wch¬_t
 *

39 
	`__NTH
 (
	$wmemýy
 (
wch¬_t
 *
__»¡riù
 
__s1
, cÚ¡ wch¬_*__»¡riù 
__s2
,

40 
size_t
 
__n
))

42 ià(
	`__bos0
 (
__s1
è!ð(
size_t
) -1)

44 ià(!
	`__but_cÚ¡ªt_p
 (
__n
))

45  
	`__wmemýy_chk
 (
__s1
, 
__s2
, 
__n
,

46 
	`__bos0
 (
__s1
è/  (
wch¬_t
));

48 ià(
__n
 > 
	`__bos0
 (
__s1
è/  (
wch¬_t
))

49  
	`__wmemýy_chk_w¬n
 (
__s1
, 
__s2
, 
__n
,

50 
	`__bos0
 (
__s1
è/  (
wch¬_t
));

52  
	`__wmemýy_®s
 (
__s1
, 
__s2
, 
__n
);

53 
	}
}

56 
wch¬_t
 *
	$__wmemmove_chk
 (
wch¬_t
 *
__s1
, cÚ¡ wch¬_*
__s2
,

57 
size_t
 
__n
, size_
__ns1
è
__THROW
;

58 
wch¬_t
 *
	`__REDIRECT_NTH
 (
__wmemmove_®s
, (wch¬_*
__s1
,

59 cÚ¡ 
wch¬_t
 *
__s2
,

60 
size_t
 
__n
), 
wmemmove
);

61 
wch¬_t
 *
	`__REDIRECT_NTH
 (
__wmemmove_chk_w¬n
,

62 (
wch¬_t
 *
__s1
, cÚ¡ wch¬_*
__s2
,

63 
size_t
 
__n
, size_
__ns1
), 
__wmemmove_chk
)

64 
	`__w¬Çr
 ("wmemmove called withength biggerhan size of destination "

67 
__fÜtify_funùiÚ
 
wch¬_t
 *

68 
	`__NTH
 (
	$wmemmove
 (
wch¬_t
 *
__s1
, cÚ¡ wch¬_*
__s2
, 
size_t
 
__n
))

70 ià(
	`__bos0
 (
__s1
è!ð(
size_t
) -1)

72 ià(!
	`__but_cÚ¡ªt_p
 (
__n
))

73  
	`__wmemmove_chk
 (
__s1
, 
__s2
, 
__n
,

74 
	`__bos0
 (
__s1
è/  (
wch¬_t
));

76 ià(
__n
 > 
	`__bos0
 (
__s1
è/  (
wch¬_t
))

77  
	`__wmemmove_chk_w¬n
 (
__s1
, 
__s2
, 
__n
,

78 
	`__bos0
 (
__s1
è/  (
wch¬_t
));

80  
	`__wmemmove_®s
 (
__s1
, 
__s2
, 
__n
);

81 
	}
}

84 #ifdeà
__USE_GNU


85 
wch¬_t
 *
	$__wmempýy_chk
 (
wch¬_t
 *
__»¡riù
 
__s1
,

86 cÚ¡ 
wch¬_t
 *
__»¡riù
 
__s2
, 
size_t
 
__n
,

87 
size_t
 
__ns1
è
__THROW
;

88 
wch¬_t
 *
	`__REDIRECT_NTH
 (
__wmempýy_®s
,

89 (
wch¬_t
 *
__»¡riù
 
__s1
,

90 cÚ¡ 
wch¬_t
 *
__»¡riù
 
__s2
,

91 
size_t
 
__n
), 
wmempýy
);

92 
wch¬_t
 *
	`__REDIRECT_NTH
 (
__wmempýy_chk_w¬n
,

93 (
wch¬_t
 *
__»¡riù
 
__s1
,

94 cÚ¡ 
wch¬_t
 *
__»¡riù
 
__s2
, 
size_t
 
__n
,

95 
size_t
 
__ns1
), 
__wmempýy_chk
)

96 
	`__w¬Çr
 ("wmempcpy called withength biggerhan size of destination "

99 
__fÜtify_funùiÚ
 
wch¬_t
 *

100 
	`__NTH
 (
	$wmempýy
 (
wch¬_t
 *
__»¡riù
 
__s1
, cÚ¡ wch¬_*__»¡riù 
__s2
,

101 
size_t
 
__n
))

103 ià(
	`__bos0
 (
__s1
è!ð(
size_t
) -1)

105 ià(!
	`__but_cÚ¡ªt_p
 (
__n
))

106  
	`__wmempýy_chk
 (
__s1
, 
__s2
, 
__n
,

107 
	`__bos0
 (
__s1
è/  (
wch¬_t
));

109 ià(
__n
 > 
	`__bos0
 (
__s1
è/  (
wch¬_t
))

110  
	`__wmempýy_chk_w¬n
 (
__s1
, 
__s2
, 
__n
,

111 
	`__bos0
 (
__s1
è/  (
wch¬_t
));

113  
	`__wmempýy_®s
 (
__s1
, 
__s2
, 
__n
);

114 
	}
}

118 
wch¬_t
 *
	$__wmem£t_chk
 (
wch¬_t
 *
__s
, wch¬_
__c
, 
size_t
 
__n
,

119 
size_t
 
__ns
è
__THROW
;

120 
wch¬_t
 *
	`__REDIRECT_NTH
 (
__wmem£t_®s
, (wch¬_*
__s
, wch¬_
__c
,

121 
size_t
 
__n
), 
wmem£t
);

122 
wch¬_t
 *
	`__REDIRECT_NTH
 (
__wmem£t_chk_w¬n
,

123 (
wch¬_t
 *
__s
, wch¬_
__c
, 
size_t
 
__n
,

124 
size_t
 
__ns
), 
__wmem£t_chk
)

125 
	`__w¬Çr
 ("wmemset called withength biggerhan size of destination "

128 
__fÜtify_funùiÚ
 
wch¬_t
 *

129 
	`__NTH
 (
	$wmem£t
 (
wch¬_t
 *
__s
, wch¬_
__c
, 
size_t
 
__n
))

131 ià(
	`__bos0
 (
__s
è!ð(
size_t
) -1)

133 ià(!
	`__but_cÚ¡ªt_p
 (
__n
))

134  
	`__wmem£t_chk
 (
__s
, 
__c
, 
__n
, 
	`__bos0
 (__sè/  (
wch¬_t
));

136 ià(
__n
 > 
	`__bos0
 (
__s
è/  (
wch¬_t
))

137  
	`__wmem£t_chk_w¬n
 (
__s
, 
__c
, 
__n
,

138 
	`__bos0
 (
__s
è/  (
wch¬_t
));

140  
	`__wmem£t_®s
 (
__s
, 
__c
, 
__n
);

141 
	}
}

144 
wch¬_t
 *
	$__wcsýy_chk
 (
wch¬_t
 *
__»¡riù
 
__de¡
,

145 cÚ¡ 
wch¬_t
 *
__»¡riù
 
__¤c
,

146 
size_t
 
__n
è
__THROW
;

147 
wch¬_t
 *
	`__REDIRECT_NTH
 (
__wcsýy_®s
,

148 (
wch¬_t
 *
__»¡riù
 
__de¡
,

149 cÚ¡ 
wch¬_t
 *
__»¡riù
 
__¤c
), 
wcsýy
);

151 
__fÜtify_funùiÚ
 
wch¬_t
 *

152 
	`__NTH
 (
	$wcsýy
 (
wch¬_t
 *
__»¡riù
 
__de¡
, cÚ¡ wch¬_*__»¡riù 
__¤c
))

154 ià(
	`__bos
 (
__de¡
è!ð(
size_t
) -1)

155  
	`__wcsýy_chk
 (
__de¡
, 
__¤c
, 
	`__bos
 (__de¡è/  (
wch¬_t
));

156  
	`__wcsýy_®s
 (
__de¡
, 
__¤c
);

157 
	}
}

160 
wch¬_t
 *
	$__wýýy_chk
 (
wch¬_t
 *
__»¡riù
 
__de¡
,

161 cÚ¡ 
wch¬_t
 *
__»¡riù
 
__¤c
,

162 
size_t
 
__de¡Ën
è
__THROW
;

163 
wch¬_t
 *
	`__REDIRECT_NTH
 (
__wýýy_®s
,

164 (
wch¬_t
 *
__»¡riù
 
__de¡
,

165 cÚ¡ 
wch¬_t
 *
__»¡riù
 
__¤c
), 
wýýy
);

167 
__fÜtify_funùiÚ
 
wch¬_t
 *

168 
	`__NTH
 (
	$wýýy
 (
wch¬_t
 *
__»¡riù
 
__de¡
, cÚ¡ wch¬_*__»¡riù 
__¤c
))

170 ià(
	`__bos
 (
__de¡
è!ð(
size_t
) -1)

171  
	`__wýýy_chk
 (
__de¡
, 
__¤c
, 
	`__bos
 (__de¡è/  (
wch¬_t
));

172  
	`__wýýy_®s
 (
__de¡
, 
__¤c
);

173 
	}
}

176 
wch¬_t
 *
	$__wc¢ýy_chk
 (
wch¬_t
 *
__»¡riù
 
__de¡
,

177 cÚ¡ 
wch¬_t
 *
__»¡riù
 
__¤c
, 
size_t
 
__n
,

178 
size_t
 
__de¡Ën
è
__THROW
;

179 
wch¬_t
 *
	`__REDIRECT_NTH
 (
__wc¢ýy_®s
,

180 (
wch¬_t
 *
__»¡riù
 
__de¡
,

181 cÚ¡ 
wch¬_t
 *
__»¡riù
 
__¤c
,

182 
size_t
 
__n
), 
wc¢ýy
);

183 
wch¬_t
 *
	`__REDIRECT_NTH
 (
__wc¢ýy_chk_w¬n
,

184 (
wch¬_t
 *
__»¡riù
 
__de¡
,

185 cÚ¡ 
wch¬_t
 *
__»¡riù
 
__¤c
,

186 
size_t
 
__n
, size_
__de¡Ën
), 
__wc¢ýy_chk
)

187 
	`__w¬Çr
 ("wcsncpy called withength biggerhan size of destination "

190 
__fÜtify_funùiÚ
 
wch¬_t
 *

191 
	`__NTH
 (
	$wc¢ýy
 (
wch¬_t
 *
__»¡riù
 
__de¡
, cÚ¡ wch¬_*__»¡riù 
__¤c
,

192 
size_t
 
__n
))

194 ià(
	`__bos
 (
__de¡
è!ð(
size_t
) -1)

196 ià(!
	`__but_cÚ¡ªt_p
 (
__n
))

197  
	`__wc¢ýy_chk
 (
__de¡
, 
__¤c
, 
__n
,

198 
	`__bos
 (
__de¡
è/  (
wch¬_t
));

199 ià(
__n
 > 
	`__bos
 (
__de¡
è/  (
wch¬_t
))

200  
	`__wc¢ýy_chk_w¬n
 (
__de¡
, 
__¤c
, 
__n
,

201 
	`__bos
 (
__de¡
è/  (
wch¬_t
));

203  
	`__wc¢ýy_®s
 (
__de¡
, 
__¤c
, 
__n
);

204 
	}
}

207 
wch¬_t
 *
	$__wýnýy_chk
 (
wch¬_t
 *
__»¡riù
 
__de¡
,

208 cÚ¡ 
wch¬_t
 *
__»¡riù
 
__¤c
, 
size_t
 
__n
,

209 
size_t
 
__de¡Ën
è
__THROW
;

210 
wch¬_t
 *
	`__REDIRECT_NTH
 (
__wýnýy_®s
,

211 (
wch¬_t
 *
__»¡riù
 
__de¡
,

212 cÚ¡ 
wch¬_t
 *
__»¡riù
 
__¤c
,

213 
size_t
 
__n
), 
wýnýy
);

214 
wch¬_t
 *
	`__REDIRECT_NTH
 (
__wýnýy_chk_w¬n
,

215 (
wch¬_t
 *
__»¡riù
 
__de¡
,

216 cÚ¡ 
wch¬_t
 *
__»¡riù
 
__¤c
,

217 
size_t
 
__n
, size_
__de¡Ën
), 
__wýnýy_chk
)

218 
	`__w¬Çr
 ("wcpncpy called withength biggerhan size of destination "

221 
__fÜtify_funùiÚ
 
wch¬_t
 *

222 
	`__NTH
 (
	$wýnýy
 (
wch¬_t
 *
__»¡riù
 
__de¡
, cÚ¡ wch¬_*__»¡riù 
__¤c
,

223 
size_t
 
__n
))

225 ià(
	`__bos
 (
__de¡
è!ð(
size_t
) -1)

227 ià(!
	`__but_cÚ¡ªt_p
 (
__n
))

228  
	`__wýnýy_chk
 (
__de¡
, 
__¤c
, 
__n
,

229 
	`__bos
 (
__de¡
è/  (
wch¬_t
));

230 ià(
__n
 > 
	`__bos
 (
__de¡
è/  (
wch¬_t
))

231  
	`__wýnýy_chk_w¬n
 (
__de¡
, 
__¤c
, 
__n
,

232 
	`__bos
 (
__de¡
è/  (
wch¬_t
));

234  
	`__wýnýy_®s
 (
__de¡
, 
__¤c
, 
__n
);

235 
	}
}

238 
wch¬_t
 *
	$__wcsÿt_chk
 (
wch¬_t
 *
__»¡riù
 
__de¡
,

239 cÚ¡ 
wch¬_t
 *
__»¡riù
 
__¤c
,

240 
size_t
 
__de¡Ën
è
__THROW
;

241 
wch¬_t
 *
	`__REDIRECT_NTH
 (
__wcsÿt_®s
,

242 (
wch¬_t
 *
__»¡riù
 
__de¡
,

243 cÚ¡ 
wch¬_t
 *
__»¡riù
 
__¤c
), 
wcsÿt
);

245 
__fÜtify_funùiÚ
 
wch¬_t
 *

246 
	`__NTH
 (
	$wcsÿt
 (
wch¬_t
 *
__»¡riù
 
__de¡
, cÚ¡ wch¬_*__»¡riù 
__¤c
))

248 ià(
	`__bos
 (
__de¡
è!ð(
size_t
) -1)

249  
	`__wcsÿt_chk
 (
__de¡
, 
__¤c
, 
	`__bos
 (__de¡è/  (
wch¬_t
));

250  
	`__wcsÿt_®s
 (
__de¡
, 
__¤c
);

251 
	}
}

254 
wch¬_t
 *
	$__wc¢ÿt_chk
 (
wch¬_t
 *
__»¡riù
 
__de¡
,

255 cÚ¡ 
wch¬_t
 *
__»¡riù
 
__¤c
,

256 
size_t
 
__n
, size_
__de¡Ën
è
__THROW
;

257 
wch¬_t
 *
	`__REDIRECT_NTH
 (
__wc¢ÿt_®s
,

258 (
wch¬_t
 *
__»¡riù
 
__de¡
,

259 cÚ¡ 
wch¬_t
 *
__»¡riù
 
__¤c
,

260 
size_t
 
__n
), 
wc¢ÿt
);

262 
__fÜtify_funùiÚ
 
wch¬_t
 *

263 
	`__NTH
 (
	$wc¢ÿt
 (
wch¬_t
 *
__»¡riù
 
__de¡
, cÚ¡ wch¬_*__»¡riù 
__¤c
,

264 
size_t
 
__n
))

266 ià(
	`__bos
 (
__de¡
è!ð(
size_t
) -1)

267  
	`__wc¢ÿt_chk
 (
__de¡
, 
__¤c
, 
__n
,

268 
	`__bos
 (
__de¡
è/  (
wch¬_t
));

269  
	`__wc¢ÿt_®s
 (
__de¡
, 
__¤c
, 
__n
);

270 
	}
}

273 
	$__sw´tf_chk
 (
wch¬_t
 *
__»¡riù
 
__s
, 
size_t
 
__n
,

274 
__æag
, 
size_t
 
__s_Ën
,

275 cÚ¡ 
wch¬_t
 *
__»¡riù
 
__fÜm©
, ...)

276 
__THROW
 ;

278 
	`__REDIRECT_NTH_LDBL
 (
__sw´tf_®s
,

279 (
wch¬_t
 *
__»¡riù
 
__s
, 
size_t
 
__n
,

280 cÚ¡ 
wch¬_t
 *
__»¡riù
 
__fmt
, ...),

281 
sw´tf
);

283 #ifdeà
__va_¬g_·ck


284 
__fÜtify_funùiÚ
 

285 
	`__NTH
 (
	$sw´tf
 (
wch¬_t
 *
__»¡riù
 
__s
, 
size_t
 
__n
,

286 cÚ¡ 
wch¬_t
 *
__»¡riù
 
__fmt
, ...))

288 ià(
	`__bos
 (
__s
è!ð(
size_t
è-1 || 
__USE_FORTIFY_LEVEL
 > 1)

289  
	`__sw´tf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

290 
	`__bos
 (
__s
è/  (
wch¬_t
),

291 
__fmt
, 
	`__va_¬g_·ck
 ());

292  
	`__sw´tf_®s
 (
__s
, 
__n
, 
__fmt
, 
	`__va_¬g_·ck
 ());

293 
	}
}

294 #ià!
defed
 
__ýlu¥lus


296 
	#sw´tf
(
s
, 
n
, ...) \

297 (
	`__bos
 (
s
è!ð(
size_t
è-1 || 
__USE_FORTIFY_LEVEL
 > 1 \

298 ? 
	`__sw´tf_chk
 (
s
, 
n
, 
__USE_FORTIFY_LEVEL
 - 1, \

299 
	`__bos
 (
s
è/  (
wch¬_t
), 
__VA_ARGS__
) \

300 : 
	`sw´tf
 (
s
, 
n
, 
__VA_ARGS__
))

	)

303 
	$__vsw´tf_chk
 (
wch¬_t
 *
__»¡riù
 
__s
, 
size_t
 
__n
,

304 
__æag
, 
size_t
 
__s_Ën
,

305 cÚ¡ 
wch¬_t
 *
__»¡riù
 
__fÜm©
,

306 
__gnuc_va_li¡
 
__¬g
)

307 
__THROW
 ;

309 
	`__REDIRECT_NTH_LDBL
 (
__vsw´tf_®s
,

310 (
wch¬_t
 *
__»¡riù
 
__s
, 
size_t
 
__n
,

311 cÚ¡ 
wch¬_t
 *
__»¡riù
 
__fmt
,

312 
__gnuc_va_li¡
 
__­
), 
vsw´tf
);

314 
__fÜtify_funùiÚ
 

315 
	`__NTH
 (
	$vsw´tf
 (
wch¬_t
 *
__»¡riù
 
__s
, 
size_t
 
__n
,

316 cÚ¡ 
wch¬_t
 *
__»¡riù
 
__fmt
, 
__gnuc_va_li¡
 
__­
))

318 ià(
	`__bos
 (
__s
è!ð(
size_t
è-1 || 
__USE_FORTIFY_LEVEL
 > 1)

319  
	`__vsw´tf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

320 
	`__bos
 (
__s
è/  (
wch¬_t
), 
__fmt
, 
__­
);

321  
	`__vsw´tf_®s
 (
__s
, 
__n
, 
__fmt
, 
__­
);

322 
	}
}

325 #ià
__USE_FORTIFY_LEVEL
 > 1

327 
__fw´tf_chk
 (
__FILE
 *
__»¡riù
 
__¡»am
, 
__æag
,

328 cÚ¡ 
wch¬_t
 *
__»¡riù
 
__fÜm©
, ...);

329 
__w´tf_chk
 (
__æag
, cÚ¡ 
wch¬_t
 *
__»¡riù
 
__fÜm©
,

331 
__vfw´tf_chk
 (
__FILE
 *
__»¡riù
 
__¡»am
, 
__æag
,

332 cÚ¡ 
wch¬_t
 *
__»¡riù
 
__fÜm©
,

333 
__gnuc_va_li¡
 
__­
);

334 
__vw´tf_chk
 (
__æag
, cÚ¡ 
wch¬_t
 *
__»¡riù
 
__fÜm©
,

335 
__gnuc_va_li¡
 
__­
);

337 #ifdeà
__va_¬g_·ck


338 
__fÜtify_funùiÚ
 

339 
	$w´tf
 (cÚ¡ 
wch¬_t
 *
__»¡riù
 
__fmt
, ...)

341  
	`__w´tf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
	`__va_¬g_·ck
 ());

342 
	}
}

344 
__fÜtify_funùiÚ
 

345 
	$fw´tf
 (
__FILE
 *
__»¡riù
 
__¡»am
, cÚ¡ 
wch¬_t
 *__»¡riù 
__fmt
, ...)

347  
	`__fw´tf_chk
 (
__¡»am
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

348 
	`__va_¬g_·ck
 ());

349 
	}
}

350 #ià!
defed
 
__ýlu¥lus


351 
	#w´tf
(...) \

352 
	`__w´tf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

353 
	#fw´tf
(
¡»am
, ...) \

354 
	`__fw´tf_chk
 (
¡»am
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

357 
__fÜtify_funùiÚ
 

358 
	$vw´tf
 (cÚ¡ 
wch¬_t
 *
__»¡riù
 
__fmt
, 
__gnuc_va_li¡
 
__­
)

360  
	`__vw´tf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__­
);

361 
	}
}

363 
__fÜtify_funùiÚ
 

364 
	$vfw´tf
 (
__FILE
 *
__»¡riù
 
__¡»am
,

365 cÚ¡ 
wch¬_t
 *
__»¡riù
 
__fmt
, 
__gnuc_va_li¡
 
__­
)

367  
	`__vfw´tf_chk
 (
__¡»am
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__­
);

368 
	}
}

372 
wch¬_t
 *
	$__fgws_chk
 (
wch¬_t
 *
__»¡riù
 
__s
, 
size_t
 
__size
, 
__n
,

373 
__FILE
 *
__»¡riù
 
__¡»am
è
__wur
;

374 
wch¬_t
 *
	`__REDIRECT
 (
__fgws_®s
,

375 (
wch¬_t
 *
__»¡riù
 
__s
, 
__n
,

376 
__FILE
 *
__»¡riù
 
__¡»am
), 
fgws
è
__wur
;

377 
wch¬_t
 *
	`__REDIRECT
 (
__fgws_chk_w¬n
,

378 (
wch¬_t
 *
__»¡riù
 
__s
, 
size_t
 
__size
, 
__n
,

379 
__FILE
 *
__»¡riù
 
__¡»am
), 
__fgws_chk
)

380 
__wur
 
	`__w¬Çr
 ("fgetws called with bigger sizehanength "

383 
__fÜtify_funùiÚ
 
__wur
 
wch¬_t
 *

384 
	$fgws
 (
wch¬_t
 *
__»¡riù
 
__s
, 
__n
, 
__FILE
 *__»¡riù 
__¡»am
)

386 ià(
	`__bos
 (
__s
è!ð(
size_t
) -1)

388 ià(!
	`__but_cÚ¡ªt_p
 (
__n
) || __n <= 0)

389  
	`__fgws_chk
 (
__s
, 
	`__bos
 (__sè/  (
wch¬_t
),

390 
__n
, 
__¡»am
);

392 ià((
size_t
è
__n
 > 
	`__bos
 (
__s
è/  (
wch¬_t
))

393  
	`__fgws_chk_w¬n
 (
__s
, 
	`__bos
 (__sè/  (
wch¬_t
),

394 
__n
, 
__¡»am
);

396  
	`__fgws_®s
 (
__s
, 
__n
, 
__¡»am
);

397 
	}
}

399 #ifdeà
__USE_GNU


400 
wch¬_t
 *
	$__fgws_uÆocked_chk
 (
wch¬_t
 *
__»¡riù
 
__s
, 
size_t
 
__size
,

401 
__n
, 
__FILE
 *
__»¡riù
 
__¡»am
)

402 
__wur
;

403 
wch¬_t
 *
	`__REDIRECT
 (
__fgws_uÆocked_®s
,

404 (
wch¬_t
 *
__»¡riù
 
__s
, 
__n
,

405 
__FILE
 *
__»¡riù
 
__¡»am
), 
fgws_uÆocked
)

406 
__wur
;

407 
wch¬_t
 *
	`__REDIRECT
 (
__fgws_uÆocked_chk_w¬n
,

408 (
wch¬_t
 *
__»¡riù
 
__s
, 
size_t
 
__size
, 
__n
,

409 
__FILE
 *
__»¡riù
 
__¡»am
),

410 
__fgws_uÆocked_chk
)

411 
__wur
 
	`__w¬Çr
 ("fgetws_unlocked called with bigger sizehanength "

414 
__fÜtify_funùiÚ
 
__wur
 
wch¬_t
 *

415 
	$fgws_uÆocked
 (
wch¬_t
 *
__»¡riù
 
__s
, 
__n
, 
__FILE
 *__»¡riù 
__¡»am
)

417 ià(
	`__bos
 (
__s
è!ð(
size_t
) -1)

419 ià(!
	`__but_cÚ¡ªt_p
 (
__n
) || __n <= 0)

420  
	`__fgws_uÆocked_chk
 (
__s
, 
	`__bos
 (__sè/  (
wch¬_t
),

421 
__n
, 
__¡»am
);

423 ià((
size_t
è
__n
 > 
	`__bos
 (
__s
è/  (
wch¬_t
))

424  
	`__fgws_uÆocked_chk_w¬n
 (
__s
, 
	`__bos
 (__sè/  (
wch¬_t
),

425 
__n
, 
__¡»am
);

427  
	`__fgws_uÆocked_®s
 (
__s
, 
__n
, 
__¡»am
);

428 
	}
}

432 
size_t
 
	$__wütomb_chk
 (*
__»¡riù
 
__s
, 
wch¬_t
 
__wch¬
,

433 
mb¡©e_t
 *
__»¡riù
 
__p
,

434 
size_t
 
__buæ
è
__THROW
 
__wur
;

435 
size_t
 
	`__REDIRECT_NTH
 (
__wütomb_®s
,

436 (*
__»¡riù
 
__s
, 
wch¬_t
 
__wch¬
,

437 
mb¡©e_t
 *
__»¡riù
 
__ps
), 
wütomb
è
__wur
;

439 
__fÜtify_funùiÚ
 
__wur
 
size_t


440 
	`__NTH
 (
	$wütomb
 (*
__»¡riù
 
__s
, 
wch¬_t
 
__wch¬
,

441 
mb¡©e_t
 *
__»¡riù
 
__ps
))

446 
	#__WCHAR_MB_LEN_MAX
 16

	)

447 #ià
defed
 
MB_LEN_MAX
 && MB_LEN_MAX !ð
__WCHAR_MB_LEN_MAX


450 ià(
	`__bos
 (
__s
è!ð(
size_t
è-1 && 
__WCHAR_MB_LEN_MAX
 > __bos (__s))

451  
	`__wütomb_chk
 (
__s
, 
__wch¬
, 
__ps
, 
	`__bos
 (__s));

452  
	`__wütomb_®s
 (
__s
, 
__wch¬
, 
__ps
);

453 
	}
}

456 
size_t
 
	$__mb¤towcs_chk
 (
wch¬_t
 *
__»¡riù
 
__d¡
,

457 cÚ¡ **
__»¡riù
 
__¤c
,

458 
size_t
 
__Ën
, 
mb¡©e_t
 *
__»¡riù
 
__ps
,

459 
size_t
 
__d¡Ën
è
__THROW
;

460 
size_t
 
	`__REDIRECT_NTH
 (
__mb¤towcs_®s
,

461 (
wch¬_t
 *
__»¡riù
 
__d¡
,

462 cÚ¡ **
__»¡riù
 
__¤c
,

463 
size_t
 
__Ën
, 
mb¡©e_t
 *
__»¡riù
 
__ps
),

464 
mb¤towcs
);

465 
size_t
 
	`__REDIRECT_NTH
 (
__mb¤towcs_chk_w¬n
,

466 (
wch¬_t
 *
__»¡riù
 
__d¡
,

467 cÚ¡ **
__»¡riù
 
__¤c
,

468 
size_t
 
__Ën
, 
mb¡©e_t
 *
__»¡riù
 
__ps
,

469 
size_t
 
__d¡Ën
), 
__mb¤towcs_chk
)

470 
	`__w¬Çr
 ("mbsrtowcs called with dst buffer smallerhanen "

473 
__fÜtify_funùiÚ
 
size_t


474 
	`__NTH
 (
	$mb¤towcs
 (
wch¬_t
 *
__»¡riù
 
__d¡
, cÚ¡ **__»¡riù 
__¤c
,

475 
size_t
 
__Ën
, 
mb¡©e_t
 *
__»¡riù
 
__ps
))

477 ià(
	`__bos
 (
__d¡
è!ð(
size_t
) -1)

479 ià(!
	`__but_cÚ¡ªt_p
 (
__Ën
))

480  
	`__mb¤towcs_chk
 (
__d¡
, 
__¤c
, 
__Ën
, 
__ps
,

481 
	`__bos
 (
__d¡
è/  (
wch¬_t
));

483 ià(
__Ën
 > 
	`__bos
 (
__d¡
è/  (
wch¬_t
))

484  
	`__mb¤towcs_chk_w¬n
 (
__d¡
, 
__¤c
, 
__Ën
, 
__ps
,

485 
	`__bos
 (
__d¡
è/  (
wch¬_t
));

487  
	`__mb¤towcs_®s
 (
__d¡
, 
__¤c
, 
__Ën
, 
__ps
);

488 
	}
}

491 
size_t
 
	$__wc¤tombs_chk
 (*
__»¡riù
 
__d¡
,

492 cÚ¡ 
wch¬_t
 **
__»¡riù
 
__¤c
,

493 
size_t
 
__Ën
, 
mb¡©e_t
 *
__»¡riù
 
__ps
,

494 
size_t
 
__d¡Ën
è
__THROW
;

495 
size_t
 
	`__REDIRECT_NTH
 (
__wc¤tombs_®s
,

496 (*
__»¡riù
 
__d¡
,

497 cÚ¡ 
wch¬_t
 **
__»¡riù
 
__¤c
,

498 
size_t
 
__Ën
, 
mb¡©e_t
 *
__»¡riù
 
__ps
),

499 
wc¤tombs
);

500 
size_t
 
	`__REDIRECT_NTH
 (
__wc¤tombs_chk_w¬n
,

501 (*
__»¡riù
 
__d¡
,

502 cÚ¡ 
wch¬_t
 **
__»¡riù
 
__¤c
,

503 
size_t
 
__Ën
, 
mb¡©e_t
 *
__»¡riù
 
__ps
,

504 
size_t
 
__d¡Ën
), 
__wc¤tombs_chk
)

505 
	`__w¬Çr
 ("wcsrtombs called with dst buffer smallerhanen");

507 
__fÜtify_funùiÚ
 
size_t


508 
	`__NTH
 (
	$wc¤tombs
 (*
__»¡riù
 
__d¡
, cÚ¡ 
wch¬_t
 **__»¡riù 
__¤c
,

509 
size_t
 
__Ën
, 
mb¡©e_t
 *
__»¡riù
 
__ps
))

511 ià(
	`__bos
 (
__d¡
è!ð(
size_t
) -1)

513 ià(!
	`__but_cÚ¡ªt_p
 (
__Ën
))

514  
	`__wc¤tombs_chk
 (
__d¡
, 
__¤c
, 
__Ën
, 
__ps
, 
	`__bos
 (__dst));

516 ià(
__Ën
 > 
	`__bos
 (
__d¡
))

517  
	`__wc¤tombs_chk_w¬n
 (
__d¡
, 
__¤c
, 
__Ën
, 
__ps
, 
	`__bos
 (__dst));

519  
	`__wc¤tombs_®s
 (
__d¡
, 
__¤c
, 
__Ën
, 
__ps
);

520 
	}
}

523 #ifdeà
__USE_GNU


524 
size_t
 
	$__mb¢¹owcs_chk
 (
wch¬_t
 *
__»¡riù
 
__d¡
,

525 cÚ¡ **
__»¡riù
 
__¤c
, 
size_t
 
__nmc
,

526 
size_t
 
__Ën
, 
mb¡©e_t
 *
__»¡riù
 
__ps
,

527 
size_t
 
__d¡Ën
è
__THROW
;

528 
size_t
 
	`__REDIRECT_NTH
 (
__mb¢¹owcs_®s
,

529 (
wch¬_t
 *
__»¡riù
 
__d¡
,

530 cÚ¡ **
__»¡riù
 
__¤c
, 
size_t
 
__nmc
,

531 
size_t
 
__Ën
, 
mb¡©e_t
 *
__»¡riù
 
__ps
),

532 
mb¢¹owcs
);

533 
size_t
 
	`__REDIRECT_NTH
 (
__mb¢¹owcs_chk_w¬n
,

534 (
wch¬_t
 *
__»¡riù
 
__d¡
,

535 cÚ¡ **
__»¡riù
 
__¤c
, 
size_t
 
__nmc
,

536 
size_t
 
__Ën
, 
mb¡©e_t
 *
__»¡riù
 
__ps
,

537 
size_t
 
__d¡Ën
), 
__mb¢¹owcs_chk
)

538 
	`__w¬Çr
 ("mbsnrtowcs called with dst buffer smallerhanen "

541 
__fÜtify_funùiÚ
 
size_t


542 
	`__NTH
 (
	$mb¢¹owcs
 (
wch¬_t
 *
__»¡riù
 
__d¡
, cÚ¡ **__»¡riù 
__¤c
,

543 
size_t
 
__nmc
, size_
__Ën
, 
mb¡©e_t
 *
__»¡riù
 
__ps
))

545 ià(
	`__bos
 (
__d¡
è!ð(
size_t
) -1)

547 ià(!
	`__but_cÚ¡ªt_p
 (
__Ën
))

548  
	`__mb¢¹owcs_chk
 (
__d¡
, 
__¤c
, 
__nmc
, 
__Ën
, 
__ps
,

549 
	`__bos
 (
__d¡
è/  (
wch¬_t
));

551 ià(
__Ën
 > 
	`__bos
 (
__d¡
è/  (
wch¬_t
))

552  
	`__mb¢¹owcs_chk_w¬n
 (
__d¡
, 
__¤c
, 
__nmc
, 
__Ën
, 
__ps
,

553 
	`__bos
 (
__d¡
è/  (
wch¬_t
));

555  
	`__mb¢¹owcs_®s
 (
__d¡
, 
__¤c
, 
__nmc
, 
__Ën
, 
__ps
);

556 
	}
}

559 
size_t
 
	$__wc¢¹ombs_chk
 (*
__»¡riù
 
__d¡
,

560 cÚ¡ 
wch¬_t
 **
__»¡riù
 
__¤c
,

561 
size_t
 
__nwc
, size_
__Ën
,

562 
mb¡©e_t
 *
__»¡riù
 
__ps
, 
size_t
 
__d¡Ën
)

563 
__THROW
;

564 
size_t
 
	`__REDIRECT_NTH
 (
__wc¢¹ombs_®s
,

565 (*
__»¡riù
 
__d¡
,

566 cÚ¡ 
wch¬_t
 **
__»¡riù
 
__¤c
,

567 
size_t
 
__nwc
, size_
__Ën
,

568 
mb¡©e_t
 *
__»¡riù
 
__ps
), 
wc¢¹ombs
);

569 
size_t
 
	`__REDIRECT_NTH
 (
__wc¢¹ombs_chk_w¬n
,

570 (*
__»¡riù
 
__d¡
,

571 cÚ¡ 
wch¬_t
 **
__»¡riù
 
__¤c
,

572 
size_t
 
__nwc
, size_
__Ën
,

573 
mb¡©e_t
 *
__»¡riù
 
__ps
,

574 
size_t
 
__d¡Ën
), 
__wc¢¹ombs_chk
)

575 
	`__w¬Çr
 ("wcsnrtombs called with dst buffer smallerhanen");

577 
__fÜtify_funùiÚ
 
size_t


578 
	`__NTH
 (
	$wc¢¹ombs
 (*
__»¡riù
 
__d¡
, cÚ¡ 
wch¬_t
 **__»¡riù 
__¤c
,

579 
size_t
 
__nwc
, size_
__Ën
, 
mb¡©e_t
 *
__»¡riù
 
__ps
))

581 ià(
	`__bos
 (
__d¡
è!ð(
size_t
) -1)

583 ià(!
	`__but_cÚ¡ªt_p
 (
__Ën
))

584  
	`__wc¢¹ombs_chk
 (
__d¡
, 
__¤c
, 
__nwc
, 
__Ën
, 
__ps
,

585 
	`__bos
 (
__d¡
));

587 ià(
__Ën
 > 
	`__bos
 (
__d¡
))

588  
	`__wc¢¹ombs_chk_w¬n
 (
__d¡
, 
__¤c
, 
__nwc
, 
__Ën
, 
__ps
,

589 
	`__bos
 (
__d¡
));

591  
	`__wc¢¹ombs_®s
 (
__d¡
, 
__¤c
, 
__nwc
, 
__Ën
, 
__ps
);

592 
	}
}

	@/usr/include/gnu/option-groups.h

10 #iâdeà
__GNU_OPTION_GROUPS_H


11 
	#__GNU_OPTION_GROUPS_H


	)

13 
	#__OPTION_EGLIBC_ADVANCED_INET6
 1

	)

14 
	#__OPTION_EGLIBC_BACKTRACE
 1

	)

15 
	#__OPTION_EGLIBC_BIG_MACROS
 1

	)

16 
	#__OPTION_EGLIBC_BSD
 1

	)

17 
	#__OPTION_EGLIBC_CATGETS
 1

	)

18 
	#__OPTION_EGLIBC_CHARSETS
 1

	)

19 
	#__OPTION_EGLIBC_CRYPT
 1

	)

20 
	#__OPTION_EGLIBC_CRYPT_UFC
 1

	)

21 
	#__OPTION_EGLIBC_CXX_TESTS
 1

	)

22 
	#__OPTION_EGLIBC_DB_ALIASES
 1

	)

23 
	#__OPTION_EGLIBC_ENVZ
 1

	)

24 
	#__OPTION_EGLIBC_FCVT
 1

	)

25 
	#__OPTION_EGLIBC_FMTMSG
 1

	)

26 
	#__OPTION_EGLIBC_FSTAB
 1

	)

27 
	#__OPTION_EGLIBC_FTRAVERSE
 1

	)

28 
	#__OPTION_EGLIBC_GETLOGIN
 1

	)

29 
	#__OPTION_EGLIBC_IDN
 1

	)

30 
	#__OPTION_EGLIBC_INET
 1

	)

31 
	#__OPTION_EGLIBC_INET_ANL
 1

	)

32 
	#__OPTION_EGLIBC_LIBM
 1

	)

33 
	#__OPTION_EGLIBC_LOCALES
 1

	)

34 
	#__OPTION_EGLIBC_LOCALE_CODE
 1

	)

35 
	#__OPTION_EGLIBC_MEMUSAGE
 1

	)

36 
	#__OPTION_EGLIBC_NIS
 1

	)

37 
	#__OPTION_EGLIBC_NSSWITCH
 1

	)

38 
	#__OPTION_EGLIBC_RCMD
 1

	)

39 
	#__OPTION_EGLIBC_RTLD_DEBUG
 1

	)

40 
	#__OPTION_EGLIBC_SPAWN
 1

	)

41 
	#__OPTION_EGLIBC_STREAMS
 1

	)

42 
	#__OPTION_EGLIBC_SUNRPC
 1

	)

43 
	#__OPTION_EGLIBC_UTMP
 1

	)

44 
	#__OPTION_EGLIBC_UTMPX
 1

	)

45 
	#__OPTION_EGLIBC_WORDEXP
 1

	)

46 
	#__OPTION_POSIX_C_LANG_WIDE_CHAR
 1

	)

47 
	#__OPTION_POSIX_REGEXP
 1

	)

48 
	#__OPTION_POSIX_REGEXP_GLIBC
 1

	)

49 
	#__OPTION_POSIX_WIDE_CHAR_DEVICE_IO
 1

	)

	@/usr/include/linux/ioctl.h

1 #iâdeà
_LINUX_IOCTL_H


2 
	#_LINUX_IOCTL_H


	)

4 
	~<asm/ioùl.h
>

	@/usr/include/linux/stddef.h

	@/usr/include/pthread.h

18 #iâdeà
_PTHREAD_H


19 
	#_PTHREAD_H
 1

	)

21 
	~<ã©u»s.h
>

22 
	~<dn.h
>

23 
	~<sched.h
>

24 
	~<time.h
>

26 
	~<bs/±h»adty³s.h
>

27 
	~<bs/£tjmp.h
>

28 
	~<bs/wÜdsize.h
>

34 
	mPTHREAD_CREATE_JOINABLE
,

35 
	#PTHREAD_CREATE_JOINABLE
 
PTHREAD_CREATE_JOINABLE


	)

36 
	mPTHREAD_CREATE_DETACHED


37 
	#PTHREAD_CREATE_DETACHED
 
PTHREAD_CREATE_DETACHED


	)

44 
	mPTHREAD_MUTEX_TIMED_NP
,

45 
	mPTHREAD_MUTEX_RECURSIVE_NP
,

46 
	mPTHREAD_MUTEX_ERRORCHECK_NP
,

47 
	mPTHREAD_MUTEX_ADAPTIVE_NP


48 #ià
defed
 
__USE_UNIX98
 || defed 
__USE_XOPEN2K8


50 
	mPTHREAD_MUTEX_NORMAL
 = 
PTHREAD_MUTEX_TIMED_NP
,

51 
	mPTHREAD_MUTEX_RECURSIVE
 = 
PTHREAD_MUTEX_RECURSIVE_NP
,

52 
	mPTHREAD_MUTEX_ERRORCHECK
 = 
PTHREAD_MUTEX_ERRORCHECK_NP
,

53 
	mPTHREAD_MUTEX_DEFAULT
 = 
PTHREAD_MUTEX_NORMAL


55 #ifdeà
__USE_GNU


57 , 
	mPTHREAD_MUTEX_FAST_NP
 = 
PTHREAD_MUTEX_TIMED_NP


62 #ifdeà
__USE_XOPEN2K


66 
	mPTHREAD_MUTEX_STALLED
,

67 
	mPTHREAD_MUTEX_STALLED_NP
 = 
PTHREAD_MUTEX_STALLED
,

68 
	mPTHREAD_MUTEX_ROBUST
,

69 
	mPTHREAD_MUTEX_ROBUST_NP
 = 
PTHREAD_MUTEX_ROBUST


74 #ià
defed
 
__USE_POSIX199506
 || defed 
__USE_UNIX98


78 
	mPTHREAD_PRIO_NONE
,

79 
	mPTHREAD_PRIO_INHERIT
,

80 
	mPTHREAD_PRIO_PROTECT


86 #ià
__PTHREAD_MUTEX_HAVE_ELISION
 == 1

87 
	#__PTHREAD_SPINS
 0, 0

	)

88 #ià
__PTHREAD_MUTEX_HAVE_ELISION
 == 2

89 
	#__PTHREAD_SPINS
 { 0, 0 }

	)

91 
	#__PTHREAD_SPINS
 0

	)

94 #ifdeà
__PTHREAD_MUTEX_HAVE_PREV


95 
	#PTHREAD_MUTEX_INITIALIZER
 \

96 { { 0, 0, 0, 0, 0, 
__PTHREAD_SPINS
, { 0, 0 } } }

	)

97 #ifdeà
__USE_GNU


98 
	#PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
 \

99 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_RECURSIVE_NP
, 
__PTHREAD_SPINS
, { 0, 0 } } }

	)

100 
	#PTHREAD_ERRORCHECK_MUTEX_INITIALIZER_NP
 \

101 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_ERRORCHECK_NP
, 
__PTHREAD_SPINS
, { 0, 0 } } }

	)

102 
	#PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP
 \

103 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_ADAPTIVE_NP
, 
__PTHREAD_SPINS
, { 0, 0 } } }

	)

104 
	#PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP
 \

105 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_ADAPTIVE_NP
, 
__PTHREAD_SPINS
, { 0, 0 } } }

	)

109 
	#PTHREAD_MUTEX_INITIALIZER
 \

110 { { 0, 0, 0, 0, 0, { 
__PTHREAD_SPINS
 } } }

	)

111 #ifdeà
__USE_GNU


112 
	#PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
 \

113 { { 0, 0, 0, 
PTHREAD_MUTEX_RECURSIVE_NP
, 0, { 
__PTHREAD_SPINS
 } } }

	)

114 
	#PTHREAD_ERRORCHECK_MUTEX_INITIALIZER_NP
 \

115 { { 0, 0, 0, 
PTHREAD_MUTEX_ERRORCHECK_NP
, 0, { 
__PTHREAD_SPINS
 } } }

	)

116 
	#PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP
 \

117 { { 0, 0, 0, 
PTHREAD_MUTEX_ADAPTIVE_NP
, 0, { 
__PTHREAD_SPINS
 } } }

	)

124 #ià
defed
 
__USE_UNIX98
 || defed 
__USE_XOPEN2K


127 
	mPTHREAD_RWLOCK_PREFER_READER_NP
,

128 
	mPTHREAD_RWLOCK_PREFER_WRITER_NP
,

129 
	mPTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
,

130 
	mPTHREAD_RWLOCK_DEFAULT_NP
 = 
PTHREAD_RWLOCK_PREFER_READER_NP


136 #iâdeà
__PTHREAD_RWLOCK_INT_FLAGS_SHARED


137 #ià
__WORDSIZE
 == 64

138 
	#__PTHREAD_RWLOCK_INT_FLAGS_SHARED
 1

	)

143 
	#PTHREAD_RWLOCK_INITIALIZER
 \

144 { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }

	)

145 #ifdeà
__USE_GNU


146 #ifdeà
__PTHREAD_RWLOCK_INT_FLAGS_SHARED


147 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

149 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
 } }

	)

151 #ià
__BYTE_ORDER
 =ð
__LITTLE_ENDIAN


152 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

153 { { 0, 0, 0, 0, 0, 0, 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
, \

154 0, 0, 0, 0 } }

	)

156 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

157 { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
,\

158 0 } }

	)

168 
	mPTHREAD_INHERIT_SCHED
,

169 
	#PTHREAD_INHERIT_SCHED
 
PTHREAD_INHERIT_SCHED


	)

170 
	mPTHREAD_EXPLICIT_SCHED


171 
	#PTHREAD_EXPLICIT_SCHED
 
PTHREAD_EXPLICIT_SCHED


	)

178 
	mPTHREAD_SCOPE_SYSTEM
,

179 
	#PTHREAD_SCOPE_SYSTEM
 
PTHREAD_SCOPE_SYSTEM


	)

180 
	mPTHREAD_SCOPE_PROCESS


181 
	#PTHREAD_SCOPE_PROCESS
 
PTHREAD_SCOPE_PROCESS


	)

188 
	mPTHREAD_PROCESS_PRIVATE
,

189 
	#PTHREAD_PROCESS_PRIVATE
 
PTHREAD_PROCESS_PRIVATE


	)

190 
	mPTHREAD_PROCESS_SHARED


191 
	#PTHREAD_PROCESS_SHARED
 
PTHREAD_PROCESS_SHARED


	)

197 
	#PTHREAD_COND_INITIALIZER
 { { 0, 0, 0, 0, 0, (*è0, 0, 0 } }

	)

201 
	s_±h»ad_þnup_bufãr


203 (*
	m__route
) (*);

204 *
	m__¬g
;

205 
	m__ÿnûÉy³
;

206 
_±h»ad_þnup_bufãr
 *
	m__´ev
;

212 
	mPTHREAD_CANCEL_ENABLE
,

213 
	#PTHREAD_CANCEL_ENABLE
 
PTHREAD_CANCEL_ENABLE


	)

214 
	mPTHREAD_CANCEL_DISABLE


215 
	#PTHREAD_CANCEL_DISABLE
 
PTHREAD_CANCEL_DISABLE


	)

219 
	mPTHREAD_CANCEL_DEFERRED
,

220 
	#PTHREAD_CANCEL_DEFERRED
 
PTHREAD_CANCEL_DEFERRED


	)

221 
	mPTHREAD_CANCEL_ASYNCHRONOUS


222 
	#PTHREAD_CANCEL_ASYNCHRONOUS
 
PTHREAD_CANCEL_ASYNCHRONOUS


	)

224 
	#PTHREAD_CANCELED
 ((*è-1)

	)

228 
	#PTHREAD_ONCE_INIT
 0

	)

231 #ifdeà
__USE_XOPEN2K


235 
	#PTHREAD_BARRIER_SERIAL_THREAD
 -1

	)

239 
__BEGIN_DECLS


244 
±h»ad_ü
 (
±h»ad_t
 *
__»¡riù
 
__Ãwth»ad
,

245 cÚ¡ 
±h»ad_©_t
 *
__»¡riù
 
__©
,

246 *(*
__¡¬t_route
) (*),

247 *
__»¡riù
 
__¬g
è
__THROWNL
 
__nÚnuÎ
 ((1, 3));

253 
	$±h»ad_ex
 (*
__»tv®
è
	`__©ibu__
 ((
__nÜuº__
));

261 
	`±h»ad_jo
 (
±h»ad_t
 
__th
, **
__th»ad_»tuº
);

263 #ifdeà
__USE_GNU


266 
	$±h»ad_yjo_Å
 (
±h»ad_t
 
__th
, **
__th»ad_»tuº
è
__THROW
;

274 
	`±h»ad_timedjo_Å
 (
±h»ad_t
 
__th
, **
__th»ad_»tuº
,

275 cÚ¡ 
time¥ec
 *
__ab¡ime
);

282 
	$±h»ad_dach
 (
±h»ad_t
 
__th
è
__THROW
;

286 
±h»ad_t
 
	$±h»ad_£lf
 (è
__THROW
 
	`__©ibu__
 ((
__cÚ¡__
));

289 
	$±h»ad_equ®
 (
±h»ad_t
 
__th»ad1
,th»ad_
__th»ad2
)

290 
__THROW
 
	`__©ibu__
 ((
__cÚ¡__
));

298 
	$±h»ad_©_
 (
±h»ad_©_t
 *
__©
è
__THROW
 
	`__nÚnuÎ
 ((1));

301 
	$±h»ad_©_de¡roy
 (
±h»ad_©_t
 *
__©
)

302 
__THROW
 
	`__nÚnuÎ
 ((1));

305 
	$±h»ad_©_gdach¡©e
 (cÚ¡ 
±h»ad_©_t
 *
__©
,

306 *
__dach¡©e
)

307 
__THROW
 
	`__nÚnuÎ
 ((1, 2));

310 
	$±h»ad_©_£tdach¡©e
 (
±h»ad_©_t
 *
__©
,

311 
__dach¡©e
)

312 
__THROW
 
	`__nÚnuÎ
 ((1));

316 
	$±h»ad_©_ggu¬dsize
 (cÚ¡ 
±h»ad_©_t
 *
__©
,

317 
size_t
 *
__gu¬dsize
)

318 
__THROW
 
	`__nÚnuÎ
 ((1, 2));

321 
	$±h»ad_©_£tgu¬dsize
 (
±h»ad_©_t
 *
__©
,

322 
size_t
 
__gu¬dsize
)

323 
__THROW
 
	`__nÚnuÎ
 ((1));

327 
	$±h»ad_©_gsched·¿m
 (cÚ¡ 
±h»ad_©_t
 *
__»¡riù
 
__©
,

328 
sched_·¿m
 *
__»¡riù
 
__·¿m
)

329 
__THROW
 
	`__nÚnuÎ
 ((1, 2));

332 
	$±h»ad_©_£tsched·¿m
 (
±h»ad_©_t
 *
__»¡riù
 
__©
,

333 cÚ¡ 
sched_·¿m
 *
__»¡riù


334 
__·¿m
è
__THROW
 
	`__nÚnuÎ
 ((1, 2));

337 
	$±h»ad_©_gschedpÞicy
 (cÚ¡ 
±h»ad_©_t
 *
__»¡riù


338 
__©
, *
__»¡riù
 
__pÞicy
)

339 
__THROW
 
	`__nÚnuÎ
 ((1, 2));

342 
	$±h»ad_©_£tschedpÞicy
 (
±h»ad_©_t
 *
__©
, 
__pÞicy
)

343 
__THROW
 
	`__nÚnuÎ
 ((1));

346 
	$±h»ad_©_ghsched
 (cÚ¡ 
±h»ad_©_t
 *
__»¡riù


347 
__©
, *
__»¡riù
 
__h
)

348 
__THROW
 
	`__nÚnuÎ
 ((1, 2));

351 
	$±h»ad_©_£thsched
 (
±h»ad_©_t
 *
__©
,

352 
__h
)

353 
__THROW
 
	`__nÚnuÎ
 ((1));

357 
	$±h»ad_©_gscÝe
 (cÚ¡ 
±h»ad_©_t
 *
__»¡riù
 
__©
,

358 *
__»¡riù
 
__scÝe
)

359 
__THROW
 
	`__nÚnuÎ
 ((1, 2));

362 
	$±h»ad_©_£tscÝe
 (
±h»ad_©_t
 *
__©
, 
__scÝe
)

363 
__THROW
 
	`__nÚnuÎ
 ((1));

366 
	$±h»ad_©_g¡ackaddr
 (cÚ¡ 
±h»ad_©_t
 *
__»¡riù


367 
__©
, **
__»¡riù
 
__¡ackaddr
)

368 
__THROW
 
	`__nÚnuÎ
 ((1, 2)è
__©ibu_d»ÿd__
;

374 
	$±h»ad_©_£t¡ackaddr
 (
±h»ad_©_t
 *
__©
,

375 *
__¡ackaddr
)

376 
__THROW
 
	`__nÚnuÎ
 ((1)è
__©ibu_d»ÿd__
;

379 
	$±h»ad_©_g¡acksize
 (cÚ¡ 
±h»ad_©_t
 *
__»¡riù


380 
__©
, 
size_t
 *
__»¡riù
 
__¡acksize
)

381 
__THROW
 
	`__nÚnuÎ
 ((1, 2));

386 
	$±h»ad_©_£t¡acksize
 (
±h»ad_©_t
 *
__©
,

387 
size_t
 
__¡acksize
)

388 
__THROW
 
	`__nÚnuÎ
 ((1));

390 #ifdeà
__USE_XOPEN2K


392 
	$±h»ad_©_g¡ack
 (cÚ¡ 
±h»ad_©_t
 *
__»¡riù
 
__©
,

393 **
__»¡riù
 
__¡ackaddr
,

394 
size_t
 *
__»¡riù
 
__¡acksize
)

395 
__THROW
 
	`__nÚnuÎ
 ((1, 2, 3));

400 
	$±h»ad_©_£t¡ack
 (
±h»ad_©_t
 *
__©
, *
__¡ackaddr
,

401 
size_t
 
__¡acksize
è
__THROW
 
	`__nÚnuÎ
 ((1));

404 #ifdeà
__USE_GNU


407 
	$±h»ad_©_£ffy_Å
 (
±h»ad_©_t
 *
__©
,

408 
size_t
 
__ýu£tsize
,

409 cÚ¡ 
ýu_£t_t
 *
__ýu£t
)

410 
__THROW
 
	`__nÚnuÎ
 ((1, 3));

414 
	$±h»ad_©_gaffy_Å
 (cÚ¡ 
±h»ad_©_t
 *
__©
,

415 
size_t
 
__ýu£tsize
,

416 
ýu_£t_t
 *
__ýu£t
)

417 
__THROW
 
	`__nÚnuÎ
 ((1, 3));

420 
	$±h»ad_g©_deçuÉ_Å
 (
±h»ad_©_t
 *
__©
)

421 
__THROW
 
	`__nÚnuÎ
 ((1));

425 
	$±h»ad_£r_deçuÉ_Å
 (cÚ¡ 
±h»ad_©_t
 *
__©
)

426 
__THROW
 
	`__nÚnuÎ
 ((1));

431 
	$±h»ad_g©_Å
 (
±h»ad_t
 
__th
, 
±h»ad_©_t
 *
__©
)

432 
__THROW
 
	`__nÚnuÎ
 ((2));

440 
	$±h»ad_£tsched·¿m
 (
±h»ad_t
 
__rg_th»ad
, 
__pÞicy
,

441 cÚ¡ 
sched_·¿m
 *
__·¿m
)

442 
__THROW
 
	`__nÚnuÎ
 ((3));

445 
	$±h»ad_gsched·¿m
 (
±h»ad_t
 
__rg_th»ad
,

446 *
__»¡riù
 
__pÞicy
,

447 
sched_·¿m
 *
__»¡riù
 
__·¿m
)

448 
__THROW
 
	`__nÚnuÎ
 ((2, 3));

451 
	$±h»ad_£tsched´io
 (
±h»ad_t
 
__rg_th»ad
, 
__´io
)

452 
__THROW
;

455 #ifdeà
__USE_GNU


457 
	$±h»ad_gÇme_Å
 (
±h»ad_t
 
__rg_th»ad
, *
__buf
,

458 
size_t
 
__buæ
)

459 
__THROW
 
	`__nÚnuÎ
 ((2));

462 
	$±h»ad_£ame_Å
 (
±h»ad_t
 
__rg_th»ad
, cÚ¡ *
__Çme
)

463 
__THROW
 
	`__nÚnuÎ
 ((2));

467 #ifdeà
__USE_UNIX98


469 
	$±h»ad_gcÚcu¼cy
 (è
__THROW
;

472 
	$±h»ad_£tcÚcu¼cy
 (
__Ëv
è
__THROW
;

475 #ifdeà
__USE_GNU


480 
	$±h»ad_yld
 (è
__THROW
;

485 
	$±h»ad_£ffy_Å
 (
±h»ad_t
 
__th
, 
size_t
 
__ýu£tsize
,

486 cÚ¡ 
ýu_£t_t
 *
__ýu£t
)

487 
__THROW
 
	`__nÚnuÎ
 ((3));

490 
	$±h»ad_gaffy_Å
 (
±h»ad_t
 
__th
, 
size_t
 
__ýu£tsize
,

491 
ýu_£t_t
 *
__ýu£t
)

492 
__THROW
 
	`__nÚnuÎ
 ((3));

505 
	`±h»ad_Úû
 (
±h»ad_Úû_t
 *
__Úû_cÚÞ
,

506 (*
___route
è()è
	`__nÚnuÎ
 ((1, 2));

517 
	`±h»ad_£tÿnûl¡©e
 (
__¡©e
, *
__Þd¡©e
);

521 
	`±h»ad_£tÿnûÉy³
 (
__ty³
, *
__Þdty³
);

524 
	`±h»ad_ÿnûl
 (
±h»ad_t
 
__th
);

529 
	`±h»ad_¡ÿnûl
 ();

538 
__jmp_buf
 
__ÿnûl_jmp_buf
;

539 
__mask_was_§ved
;

540 } 
__ÿnûl_jmp_buf
[1];

541 *
__·d
[4];

542 } 
	t__±h»ad_unwd_buf_t
 
	t__©ibu__
 ((
	t__®igÃd__
));

545 #iâdeà
__þnup_fù_©ibu


546 
	#__þnup_fù_©ibu


	)

551 
	s__±h»ad_þnup_äame


553 (*
__ÿnûl_route
) (*);

554 *
__ÿnûl_¬g
;

555 
__do_
;

556 
__ÿnûl_ty³
;

559 #ià
defed
 
__GNUC__
 && defed 
__EXCEPTIONS


560 #ifdeà
__ýlu¥lus


562 þas 
	c__±h»ad_þnup_þass


564 (*
__ÿnûl_route
) (*);

565 *
__ÿnûl_¬g
;

566 
__do_
;

567 
__ÿnûl_ty³
;

569 
public
:

570 
	`__±h»ad_þnup_þass
 ((*
__fù
è(*), *
__¬g
)

571 : 
	`__ÿnûl_route
 (
__fù
), 
	`__ÿnûl_¬g
 (
__¬g
), 
	$__do_
 (1) { }

572 ~
	$__±h»ad_þnup_þass
 (è{ ià(
__do_
è
	`__ÿnûl_route
 (
__ÿnûl_¬g
); 
	}
}

573 
	$__£tdo
 (
__Ãwv®
è{ 
__do_
 = __Ãwv®; 
	}
}

574 
	$__deãr
 (è{ 
	`±h»ad_£tÿnûÉy³
 (
PTHREAD_CANCEL_DEFERRED
,

575 &
__ÿnûl_ty³
); 
	}
}

576 
	$__»¡Üe
 (ècÚ¡ { 
	`±h»ad_£tÿnûÉy³
 (
__ÿnûl_ty³
, 0); 
	}
}

586 
	#±h»ad_þnup_push
(
route
, 
¬g
) \

588 
__±h»ad_þnup_þass
 
	`__þäame
 (
route
, 
¬g
)

	)

592 
	#±h»ad_þnup_pÝ
(
execu
) \

593 
__þäame
.
	`__£tdo
 (
execu
); \

594 } 0)

	)

596 #ifdeà
__USE_GNU


600 
	#±h»ad_þnup_push_deãr_Å
(
route
, 
¬g
) \

602 
__±h»ad_þnup_þass
 
	`__þäame
 (
route
, 
¬g
); \

603 
__þäame
.
	`__deãr
 ()

	)

608 
	#±h»ad_þnup_pÝ_»¡Üe_Å
(
execu
) \

609 
__þäame
.
	`__»¡Üe
 (); \

610 
__þäame
.
	`__£tdo
 (
execu
); \

611 } 0)

	)

618 
__exº_le
 

619 
	$__±h»ad_þnup_route
 (
__±h»ad_þnup_äame
 *
__äame
)

621 ià(
__äame
->
__do_
)

622 
__äame
->
	`__ÿnûl_route
 (__äame->
__ÿnûl_¬g
);

623 
	}
}

632 
	#±h»ad_þnup_push
(
route
, 
¬g
) \

634 
__±h»ad_þnup_äame
 
__þäame
 \

635 
	`__©ibu__
 ((
	`__þnup__
 (
__±h»ad_þnup_route
))) \

636 ð{ .
__ÿnûl_route
 = (
route
), .
__ÿnûl_¬g
 = (
¬g
), \

637 .
__do_
 = 1 };

	)

641 
	#±h»ad_þnup_pÝ
(
execu
) \

642 
__þäame
.
__do_
 = (
execu
); \

643 } 0)

	)

645 #ifdeà
__USE_GNU


649 
	#±h»ad_þnup_push_deãr_Å
(
route
, 
¬g
) \

651 
__±h»ad_þnup_äame
 
__þäame
 \

652 
	`__©ibu__
 ((
	`__þnup__
 (
__±h»ad_þnup_route
))) \

653 ð{ .
__ÿnûl_route
 = (
route
), .
__ÿnûl_¬g
 = (
¬g
), \

654 .
__do_
 = 1 }; \

655 (è
	`±h»ad_£tÿnûÉy³
 (
PTHREAD_CANCEL_DEFERRED
, \

656 &
__þäame
.
__ÿnûl_ty³
)

	)

661 
	#±h»ad_þnup_pÝ_»¡Üe_Å
(
execu
) \

662 (è
	`±h»ad_£tÿnûÉy³
 (
__þäame
.
__ÿnûl_ty³
, 
NULL
); \

663 
__þäame
.
__do_
 = (
execu
); \

664 } 0)

	)

675 
	#±h»ad_þnup_push
(
route
, 
¬g
) \

677 
__±h»ad_unwd_buf_t
 
__ÿnûl_buf
; \

678 (*
__ÿnûl_route
è(*èð(
route
); \

679 *
__ÿnûl_¬g
 = (
¬g
); \

680 
__nÙ_f¡_ÿÎ
 = 
	`__sig£tjmp
 ((
__jmp_buf_g
 *) (*) \

681 
__ÿnûl_buf
.
__ÿnûl_jmp_buf
, 0); \

682 ià(
	`__glibc_uÆiky
 (
__nÙ_f¡_ÿÎ
)) \

684 
	`__ÿnûl_route
 (
__ÿnûl_¬g
); \

685 
	`__±h»ad_unwd_Ãxt
 (&
__ÿnûl_buf
); \

689 
	`__±h»ad_»gi¡_ÿnûl
 (&
__ÿnûl_buf
); \

690 dØ{

	)

691 
__±h»ad_»gi¡_ÿnûl
 (
__±h»ad_unwd_buf_t
 *
__buf
)

692 
__þnup_fù_©ibu
;

696 
	#±h»ad_þnup_pÝ
(
execu
) \

699 
	`__±h»ad_uÄegi¡_ÿnûl
 (&
__ÿnûl_buf
); \

700 ià(
execu
) \

701 
	`__ÿnûl_route
 (
__ÿnûl_¬g
); \

702 } 0)

	)

703 
	$__±h»ad_uÄegi¡_ÿnûl
 (
__±h»ad_unwd_buf_t
 *
__buf
)

704 
__þnup_fù_©ibu
;

706 #ifdeà
__USE_GNU


710 
	#±h»ad_þnup_push_deãr_Å
(
route
, 
¬g
) \

712 
__±h»ad_unwd_buf_t
 
__ÿnûl_buf
; \

713 (*
__ÿnûl_route
è(*èð(
route
); \

714 *
__ÿnûl_¬g
 = (
¬g
); \

715 
__nÙ_f¡_ÿÎ
 = 
	`__sig£tjmp
 ((
__jmp_buf_g
 *) (*) \

716 
__ÿnûl_buf
.
__ÿnûl_jmp_buf
, 0); \

717 ià(
	`__glibc_uÆiky
 (
__nÙ_f¡_ÿÎ
)) \

719 
	`__ÿnûl_route
 (
__ÿnûl_¬g
); \

720 
	`__±h»ad_unwd_Ãxt
 (&
__ÿnûl_buf
); \

724 
	`__±h»ad_»gi¡_ÿnûl_deãr
 (&
__ÿnûl_buf
); \

725 dØ{

	)

726 
	`__±h»ad_»gi¡_ÿnûl_deãr
 (
__±h»ad_unwd_buf_t
 *
__buf
)

727 
__þnup_fù_©ibu
;

732 
	#±h»ad_þnup_pÝ_»¡Üe_Å
(
execu
) \

735 
	`__±h»ad_uÄegi¡_ÿnûl_»¡Üe
 (&
__ÿnûl_buf
); \

736 ià(
execu
) \

737 
	`__ÿnûl_route
 (
__ÿnûl_¬g
); \

738 
	}
} 0)

	)

739 
	$__±h»ad_uÄegi¡_ÿnûl_»¡Üe
 (
__±h»ad_unwd_buf_t
 *
__buf
)

740 
__þnup_fù_©ibu
;

744 
	$__±h»ad_unwd_Ãxt
 (
__±h»ad_unwd_buf_t
 *
__buf
)

745 
__þnup_fù_©ibu
 
	`__©ibu__
 ((
__nÜuº__
))

746 #iâdeà
SHARED


747 
	`__©ibu__
 ((
__wk__
))

753 
__jmp_buf_g
;

754 
	$__sig£tjmp
 (
__jmp_buf_g
 *
__v
, 
__§vemask
è
__THROWNL
;

760 
	$±h»ad_mux_
 (
±h»ad_mux_t
 *
__mux
,

761 cÚ¡ 
±h»ad_mux©_t
 *
__mux©
)

762 
__THROW
 
	`__nÚnuÎ
 ((1));

765 
	$±h»ad_mux_de¡roy
 (
±h»ad_mux_t
 *
__mux
)

766 
__THROW
 
	`__nÚnuÎ
 ((1));

769 
	$±h»ad_mux_ylock
 (
±h»ad_mux_t
 *
__mux
)

770 
__THROWNL
 
	`__nÚnuÎ
 ((1));

773 
	$±h»ad_mux_lock
 (
±h»ad_mux_t
 *
__mux
)

774 
__THROWNL
 
	`__nÚnuÎ
 ((1));

776 #ifdeà
__USE_XOPEN2K


778 
	$±h»ad_mux_timedlock
 (
±h»ad_mux_t
 *
__»¡riù
 
__mux
,

779 cÚ¡ 
time¥ec
 *
__»¡riù


780 
__ab¡ime
è
__THROWNL
 
	`__nÚnuÎ
 ((1, 2));

784 
	$±h»ad_mux_uÆock
 (
±h»ad_mux_t
 *
__mux
)

785 
__THROWNL
 
	`__nÚnuÎ
 ((1));

789 
	$±h»ad_mux_g´ioûg
 (cÚ¡ 
±h»ad_mux_t
 *

790 
__»¡riù
 
__mux
,

791 *
__»¡riù
 
__´ioûg
)

792 
__THROW
 
	`__nÚnuÎ
 ((1, 2));

796 
	$±h»ad_mux_£rioûg
 (
±h»ad_mux_t
 *
__»¡riù
 
__mux
,

797 
__´ioûg
,

798 *
__»¡riù
 
__Þd_ûg
)

799 
__THROW
 
	`__nÚnuÎ
 ((1, 3));

802 #ifdeà
__USE_XOPEN2K8


804 
	$±h»ad_mux_cÚsi¡t
 (
±h»ad_mux_t
 *
__mux
)

805 
__THROW
 
	`__nÚnuÎ
 ((1));

806 #ifdeà
__USE_GNU


807 
	$±h»ad_mux_cÚsi¡t_Å
 (
±h»ad_mux_t
 *
__mux
)

808 
__THROW
 
	`__nÚnuÎ
 ((1));

817 
	$±h»ad_mux©_
 (
±h»ad_mux©_t
 *
__©
)

818 
__THROW
 
	`__nÚnuÎ
 ((1));

821 
	$±h»ad_mux©_de¡roy
 (
±h»ad_mux©_t
 *
__©
)

822 
__THROW
 
	`__nÚnuÎ
 ((1));

825 
	$±h»ad_mux©_gpsh¬ed
 (cÚ¡ 
±h»ad_mux©_t
 *

826 
__»¡riù
 
__©
,

827 *
__»¡riù
 
__psh¬ed
)

828 
__THROW
 
	`__nÚnuÎ
 ((1, 2));

831 
	$±h»ad_mux©_£sh¬ed
 (
±h»ad_mux©_t
 *
__©
,

832 
__psh¬ed
)

833 
__THROW
 
	`__nÚnuÎ
 ((1));

835 #ià
defed
 
__USE_UNIX98
 || defed 
__USE_XOPEN2K8


837 
	$±h»ad_mux©_gty³
 (cÚ¡ 
±h»ad_mux©_t
 *
__»¡riù


838 
__©
, *
__»¡riù
 
__kd
)

839 
__THROW
 
	`__nÚnuÎ
 ((1, 2));

844 
	$±h»ad_mux©_£y³
 (
±h»ad_mux©_t
 *
__©
, 
__kd
)

845 
__THROW
 
	`__nÚnuÎ
 ((1));

849 
	$±h»ad_mux©_g´ÙocÞ
 (cÚ¡ 
±h»ad_mux©_t
 *

850 
__»¡riù
 
__©
,

851 *
__»¡riù
 
__´ÙocÞ
)

852 
__THROW
 
	`__nÚnuÎ
 ((1, 2));

856 
	$±h»ad_mux©_£rÙocÞ
 (
±h»ad_mux©_t
 *
__©
,

857 
__´ÙocÞ
)

858 
__THROW
 
	`__nÚnuÎ
 ((1));

861 
	$±h»ad_mux©_g´ioûg
 (cÚ¡ 
±h»ad_mux©_t
 *

862 
__»¡riù
 
__©
,

863 *
__»¡riù
 
__´ioûg
)

864 
__THROW
 
	`__nÚnuÎ
 ((1, 2));

867 
	$±h»ad_mux©_£rioûg
 (
±h»ad_mux©_t
 *
__©
,

868 
__´ioûg
)

869 
__THROW
 
	`__nÚnuÎ
 ((1));

871 #ifdeà
__USE_XOPEN2K


873 
	$±h»ad_mux©_grobu¡
 (cÚ¡ 
±h»ad_mux©_t
 *
__©
,

874 *
__robu¡Ãss
)

875 
__THROW
 
	`__nÚnuÎ
 ((1, 2));

876 #ifdeà
__USE_GNU


877 
	$±h»ad_mux©_grobu¡_Å
 (cÚ¡ 
±h»ad_mux©_t
 *
__©
,

878 *
__robu¡Ãss
)

879 
__THROW
 
	`__nÚnuÎ
 ((1, 2));

883 
	$±h»ad_mux©_£obu¡
 (
±h»ad_mux©_t
 *
__©
,

884 
__robu¡Ãss
)

885 
__THROW
 
	`__nÚnuÎ
 ((1));

886 #ifdeà
__USE_GNU


887 
	$±h»ad_mux©_£obu¡_Å
 (
±h»ad_mux©_t
 *
__©
,

888 
__robu¡Ãss
)

889 
__THROW
 
	`__nÚnuÎ
 ((1));

894 #ià
defed
 
__USE_UNIX98
 || defed 
__USE_XOPEN2K


899 
	$±h»ad_rwlock_
 (
±h»ad_rwlock_t
 *
__»¡riù
 
__rwlock
,

900 cÚ¡ 
±h»ad_rwlock©_t
 *
__»¡riù


901 
__©
è
__THROW
 
	`__nÚnuÎ
 ((1));

904 
	$±h»ad_rwlock_de¡roy
 (
±h»ad_rwlock_t
 *
__rwlock
)

905 
__THROW
 
	`__nÚnuÎ
 ((1));

908 
	$±h»ad_rwlock_rdlock
 (
±h»ad_rwlock_t
 *
__rwlock
)

909 
__THROWNL
 
	`__nÚnuÎ
 ((1));

912 
	$±h»ad_rwlock_yrdlock
 (
±h»ad_rwlock_t
 *
__rwlock
)

913 
__THROWNL
 
	`__nÚnuÎ
 ((1));

915 #ifdeà
__USE_XOPEN2K


917 
	$±h»ad_rwlock_timedrdlock
 (
±h»ad_rwlock_t
 *
__»¡riù
 
__rwlock
,

918 cÚ¡ 
time¥ec
 *
__»¡riù


919 
__ab¡ime
è
__THROWNL
 
	`__nÚnuÎ
 ((1, 2));

923 
	$±h»ad_rwlock_w¾ock
 (
±h»ad_rwlock_t
 *
__rwlock
)

924 
__THROWNL
 
	`__nÚnuÎ
 ((1));

927 
	$±h»ad_rwlock_yw¾ock
 (
±h»ad_rwlock_t
 *
__rwlock
)

928 
__THROWNL
 
	`__nÚnuÎ
 ((1));

930 #ifdeà
__USE_XOPEN2K


932 
	$±h»ad_rwlock_timedw¾ock
 (
±h»ad_rwlock_t
 *
__»¡riù
 
__rwlock
,

933 cÚ¡ 
time¥ec
 *
__»¡riù


934 
__ab¡ime
è
__THROWNL
 
	`__nÚnuÎ
 ((1, 2));

938 
	$±h»ad_rwlock_uÆock
 (
±h»ad_rwlock_t
 *
__rwlock
)

939 
__THROWNL
 
	`__nÚnuÎ
 ((1));

945 
	$±h»ad_rwlock©_
 (
±h»ad_rwlock©_t
 *
__©
)

946 
__THROW
 
	`__nÚnuÎ
 ((1));

949 
	$±h»ad_rwlock©_de¡roy
 (
±h»ad_rwlock©_t
 *
__©
)

950 
__THROW
 
	`__nÚnuÎ
 ((1));

953 
	$±h»ad_rwlock©_gpsh¬ed
 (cÚ¡ 
±h»ad_rwlock©_t
 *

954 
__»¡riù
 
__©
,

955 *
__»¡riù
 
__psh¬ed
)

956 
__THROW
 
	`__nÚnuÎ
 ((1, 2));

959 
	$±h»ad_rwlock©_£sh¬ed
 (
±h»ad_rwlock©_t
 *
__©
,

960 
__psh¬ed
)

961 
__THROW
 
	`__nÚnuÎ
 ((1));

964 
	$±h»ad_rwlock©_gkd_Å
 (cÚ¡ 
±h»ad_rwlock©_t
 *

965 
__»¡riù
 
__©
,

966 *
__»¡riù
 
__´ef
)

967 
__THROW
 
	`__nÚnuÎ
 ((1, 2));

970 
	$±h»ad_rwlock©_£tkd_Å
 (
±h»ad_rwlock©_t
 *
__©
,

971 
__´ef
è
__THROW
 
	`__nÚnuÎ
 ((1));

979 
	$±h»ad_cÚd_
 (
±h»ad_cÚd_t
 *
__»¡riù
 
__cÚd
,

980 cÚ¡ 
±h»ad_cÚd©_t
 *
__»¡riù
 
__cÚd_©
)

981 
__THROW
 
	`__nÚnuÎ
 ((1));

984 
	$±h»ad_cÚd_de¡roy
 (
±h»ad_cÚd_t
 *
__cÚd
)

985 
__THROW
 
	`__nÚnuÎ
 ((1));

988 
	$±h»ad_cÚd_sigÇl
 (
±h»ad_cÚd_t
 *
__cÚd
)

989 
__THROWNL
 
	`__nÚnuÎ
 ((1));

992 
	$±h»ad_cÚd_brßdÿ¡
 (
±h»ad_cÚd_t
 *
__cÚd
)

993 
__THROWNL
 
	`__nÚnuÎ
 ((1));

1000 
	$±h»ad_cÚd_wa
 (
±h»ad_cÚd_t
 *
__»¡riù
 
__cÚd
,

1001 
±h»ad_mux_t
 *
__»¡riù
 
__mux
)

1002 
	`__nÚnuÎ
 ((1, 2));

1011 
	$±h»ad_cÚd_timedwa
 (
±h»ad_cÚd_t
 *
__»¡riù
 
__cÚd
,

1012 
±h»ad_mux_t
 *
__»¡riù
 
__mux
,

1013 cÚ¡ 
time¥ec
 *
__»¡riù
 
__ab¡ime
)

1014 
	`__nÚnuÎ
 ((1, 2, 3));

1019 
	$±h»ad_cÚd©_
 (
±h»ad_cÚd©_t
 *
__©
)

1020 
__THROW
 
	`__nÚnuÎ
 ((1));

1023 
	$±h»ad_cÚd©_de¡roy
 (
±h»ad_cÚd©_t
 *
__©
)

1024 
__THROW
 
	`__nÚnuÎ
 ((1));

1027 
	$±h»ad_cÚd©_gpsh¬ed
 (cÚ¡ 
±h»ad_cÚd©_t
 *

1028 
__»¡riù
 
__©
,

1029 *
__»¡riù
 
__psh¬ed
)

1030 
__THROW
 
	`__nÚnuÎ
 ((1, 2));

1033 
	$±h»ad_cÚd©_£sh¬ed
 (
±h»ad_cÚd©_t
 *
__©
,

1034 
__psh¬ed
è
__THROW
 
	`__nÚnuÎ
 ((1));

1036 #ifdeà
__USE_XOPEN2K


1038 
	$±h»ad_cÚd©_gþock
 (cÚ¡ 
±h»ad_cÚd©_t
 *

1039 
__»¡riù
 
__©
,

1040 
__þockid_t
 *
__»¡riù
 
__þock_id
)

1041 
__THROW
 
	`__nÚnuÎ
 ((1, 2));

1044 
	$±h»ad_cÚd©_£tþock
 (
±h»ad_cÚd©_t
 *
__©
,

1045 
__þockid_t
 
__þock_id
)

1046 
__THROW
 
	`__nÚnuÎ
 ((1));

1050 #ifdeà
__USE_XOPEN2K


1055 
	$±h»ad_¥_
 (
±h»ad_¥lock_t
 *
__lock
, 
__psh¬ed
)

1056 
__THROW
 
	`__nÚnuÎ
 ((1));

1059 
	$±h»ad_¥_de¡roy
 (
±h»ad_¥lock_t
 *
__lock
)

1060 
__THROW
 
	`__nÚnuÎ
 ((1));

1063 
	$±h»ad_¥_lock
 (
±h»ad_¥lock_t
 *
__lock
)

1064 
__THROWNL
 
	`__nÚnuÎ
 ((1));

1067 
	$±h»ad_¥_ylock
 (
±h»ad_¥lock_t
 *
__lock
)

1068 
__THROWNL
 
	`__nÚnuÎ
 ((1));

1071 
	$±h»ad_¥_uÆock
 (
±h»ad_¥lock_t
 *
__lock
)

1072 
__THROWNL
 
	`__nÚnuÎ
 ((1));

1079 
	$±h»ad_b¬rr_
 (
±h»ad_b¬rr_t
 *
__»¡riù
 
__b¬rr
,

1080 cÚ¡ 
±h»ad_b¬r¿r_t
 *
__»¡riù


1081 
__©
, 
__couÁ
)

1082 
__THROW
 
	`__nÚnuÎ
 ((1));

1085 
	$±h»ad_b¬rr_de¡roy
 (
±h»ad_b¬rr_t
 *
__b¬rr
)

1086 
__THROW
 
	`__nÚnuÎ
 ((1));

1089 
	$±h»ad_b¬rr_wa
 (
±h»ad_b¬rr_t
 *
__b¬rr
)

1090 
__THROWNL
 
	`__nÚnuÎ
 ((1));

1094 
	$±h»ad_b¬r¿r_
 (
±h»ad_b¬r¿r_t
 *
__©
)

1095 
__THROW
 
	`__nÚnuÎ
 ((1));

1098 
	$±h»ad_b¬r¿r_de¡roy
 (
±h»ad_b¬r¿r_t
 *
__©
)

1099 
__THROW
 
	`__nÚnuÎ
 ((1));

1102 
	$±h»ad_b¬r¿r_gpsh¬ed
 (cÚ¡ 
±h»ad_b¬r¿r_t
 *

1103 
__»¡riù
 
__©
,

1104 *
__»¡riù
 
__psh¬ed
)

1105 
__THROW
 
	`__nÚnuÎ
 ((1, 2));

1108 
	$±h»ad_b¬r¿r_£sh¬ed
 (
±h»ad_b¬r¿r_t
 *
__©
,

1109 
__psh¬ed
)

1110 
__THROW
 
	`__nÚnuÎ
 ((1));

1122 
	`±h»ad_key_ü
 (
±h»ad_key_t
 *
__key
,

1123 (*
__de¡r_funùiÚ
) (*))

1124 
__THROW
 
	`__nÚnuÎ
 ((1));

1127 
	$±h»ad_key_de
 (
±h»ad_key_t
 
__key
è
__THROW
;

1130 *
	$±h»ad_g¥ecific
 (
±h»ad_key_t
 
__key
è
__THROW
;

1133 
	$±h»ad_£t¥ecific
 (
±h»ad_key_t
 
__key
,

1134 cÚ¡ *
__por
è
__THROW
 ;

1137 #ifdeà
__USE_XOPEN2K


1139 
	$±h»ad_gýuþockid
 (
±h»ad_t
 
__th»ad_id
,

1140 
__þockid_t
 *
__þock_id
)

1141 
__THROW
 
	`__nÚnuÎ
 ((2));

1156 
	`±h»ad_©fÜk
 ((*
__´¬e
) (),

1157 (*
__·»Á
) (),

1158 (*
__chd
è()è
__THROW
;

1161 #ifdeà
__USE_EXTERN_INLINES


1163 
__exº_le
 

1164 
	`__NTH
 (
	$±h»ad_equ®
 (
±h»ad_t
 
__th»ad1
,th»ad_
__th»ad2
))

1166  
__th»ad1
 =ð
__th»ad2
;

1167 
	}
}

1170 
	g__END_DECLS


	@/usr/include/wctype.h

23 #iâdeà
_WCTYPE_H


25 
	~<ã©u»s.h
>

26 
	~<bs/ty³s.h
>

28 #iâdeà
__Ãed_iswxxx


29 
	#_WCTYPE_H
 1

	)

32 
	#__Ãed_wt_t


	)

33 
	~<wch¬.h
>

37 #iâdeà
WEOF


38 
	#WEOF
 (0xffffffffu)

	)

41 #undeà
__Ãed_iswxxx


46 #iâdeà
__iswxxx_defed


47 
	#__iswxxx_defed
 1

	)

49 
__BEGIN_NAMESPACE_C99


52 
	twùy³_t
;

53 
	g__END_NAMESPACE_C99


55 #iâdeà
_ISwb


60 
	~<dn.h
>

61 #ià
__BYTE_ORDER
 =ð
__BIG_ENDIAN


62 
	#_ISwb
(
b
è(1 << (b))

	)

64 
	#_ISwb
(
b
) \

65 ((
b
) < 8 ? () ((1UL << (bit)) << 24) \

66 : ((
b
) < 16 ? () ((1UL << (bit)) << 8) \

67 : ((
b
) < 24 ? () ((1UL << (bit)) >> 8) \

68 : (è((1UL << (
b
)è>> 24))))

	)

73 
	m__ISwuµ
 = 0,

74 
	m__ISwlow
 = 1,

75 
	m__ISw®pha
 = 2,

76 
	m__ISwdig
 = 3,

77 
	m__ISwxdig
 = 4,

78 
	m__ISw¥aû
 = 5,

79 
	m__ISw´t
 = 6,

80 
	m__ISwg¿ph
 = 7,

81 
	m__ISwbÏnk
 = 8,

82 
	m__ISwúl
 = 9,

83 
	m__ISwpunù
 = 10,

84 
	m__ISw®num
 = 11,

86 
	m_ISwuµ
 = 
_ISwb
 (
__ISwuµ
),

87 
	m_ISwlow
 = 
_ISwb
 (
__ISwlow
),

88 
	m_ISw®pha
 = 
_ISwb
 (
__ISw®pha
),

89 
	m_ISwdig
 = 
_ISwb
 (
__ISwdig
),

90 
	m_ISwxdig
 = 
_ISwb
 (
__ISwxdig
),

91 
	m_ISw¥aû
 = 
_ISwb
 (
__ISw¥aû
),

92 
	m_ISw´t
 = 
_ISwb
 (
__ISw´t
),

93 
	m_ISwg¿ph
 = 
_ISwb
 (
__ISwg¿ph
),

94 
	m_ISwbÏnk
 = 
_ISwb
 (
__ISwbÏnk
),

95 
	m_ISwúl
 = 
_ISwb
 (
__ISwúl
),

96 
	m_ISwpunù
 = 
_ISwb
 (
__ISwpunù
),

97 
	m_ISw®num
 = 
_ISwb
 (
__ISw®num
)

102 
__BEGIN_DECLS


104 
__BEGIN_NAMESPACE_C99


111 
	$isw®num
 (
wt_t
 
__wc
è
__THROW
;

117 
	$isw®pha
 (
wt_t
 
__wc
è
__THROW
;

120 
	$iswúl
 (
wt_t
 
__wc
è
__THROW
;

124 
	$iswdig
 (
wt_t
 
__wc
è
__THROW
;

128 
	$iswg¿ph
 (
wt_t
 
__wc
è
__THROW
;

133 
	$iswlow
 (
wt_t
 
__wc
è
__THROW
;

136 
	$isw´t
 (
wt_t
 
__wc
è
__THROW
;

141 
	$iswpunù
 (
wt_t
 
__wc
è
__THROW
;

146 
	$isw¥aû
 (
wt_t
 
__wc
è
__THROW
;

151 
	$iswuµ
 (
wt_t
 
__wc
è
__THROW
;

156 
	$iswxdig
 (
wt_t
 
__wc
è
__THROW
;

161 #ifdeà
__USE_ISOC99


162 
	$iswbÏnk
 (
wt_t
 
__wc
è
__THROW
;

171 
wùy³_t
 
	$wùy³
 (cÚ¡ *
__´Ýty
è
__THROW
;

175 
	$iswùy³
 (
wt_t
 
__wc
, 
wùy³_t
 
__desc
è
__THROW
;

176 
__END_NAMESPACE_C99


183 
__BEGIN_NAMESPACE_C99


186 cÚ¡ 
	t__t32_t
 *
	twù¿ns_t
;

187 
__END_NAMESPACE_C99


188 #ifdeà
__USE_GNU


189 
	$__USING_NAMESPACE_C99
(
wù¿ns_t
)

192 
__BEGIN_NAMESPACE_C99


194 
wt_t
 
	$towlow
 (
wt_t
 
__wc
è
__THROW
;

197 
wt_t
 
	$towuµ
 (
wt_t
 
__wc
è
__THROW
;

198 
__END_NAMESPACE_C99


200 
__END_DECLS


207 #ifdeà
_WCTYPE_H


213 
__BEGIN_DECLS


215 
__BEGIN_NAMESPACE_C99


218 
wù¿ns_t
 
	$wù¿ns
 (cÚ¡ *
__´Ýty
è
__THROW
;

221 
wt_t
 
	$towù¿ns
 (
wt_t
 
__wc
, 
wù¿ns_t
 
__desc
è
__THROW
;

222 
__END_NAMESPACE_C99


224 #ifdeà
__USE_XOPEN2K8


226 
	~<xloÿË.h
>

230 
	$isw®num_l
 (
wt_t
 
__wc
, 
__loÿË_t
 
__loÿË
è
__THROW
;

236 
	$isw®pha_l
 (
wt_t
 
__wc
, 
__loÿË_t
 
__loÿË
è
__THROW
;

239 
	$iswúl_l
 (
wt_t
 
__wc
, 
__loÿË_t
 
__loÿË
è
__THROW
;

243 
	$iswdig_l
 (
wt_t
 
__wc
, 
__loÿË_t
 
__loÿË
è
__THROW
;

247 
	$iswg¿ph_l
 (
wt_t
 
__wc
, 
__loÿË_t
 
__loÿË
è
__THROW
;

252 
	$iswlow_l
 (
wt_t
 
__wc
, 
__loÿË_t
 
__loÿË
è
__THROW
;

255 
	$isw´t_l
 (
wt_t
 
__wc
, 
__loÿË_t
 
__loÿË
è
__THROW
;

260 
	$iswpunù_l
 (
wt_t
 
__wc
, 
__loÿË_t
 
__loÿË
è
__THROW
;

265 
	$isw¥aû_l
 (
wt_t
 
__wc
, 
__loÿË_t
 
__loÿË
è
__THROW
;

270 
	$iswuµ_l
 (
wt_t
 
__wc
, 
__loÿË_t
 
__loÿË
è
__THROW
;

275 
	$iswxdig_l
 (
wt_t
 
__wc
, 
__loÿË_t
 
__loÿË
è
__THROW
;

280 
	$iswbÏnk_l
 (
wt_t
 
__wc
, 
__loÿË_t
 
__loÿË
è
__THROW
;

284 
wùy³_t
 
	$wùy³_l
 (cÚ¡ *
__´Ýty
, 
__loÿË_t
 
__loÿË
)

285 
__THROW
;

289 
	$iswùy³_l
 (
wt_t
 
__wc
, 
wùy³_t
 
__desc
, 
__loÿË_t
 
__loÿË
)

290 
__THROW
;

298 
wt_t
 
	$towlow_l
 (
wt_t
 
__wc
, 
__loÿË_t
 
__loÿË
è
__THROW
;

301 
wt_t
 
	$towuµ_l
 (
wt_t
 
__wc
, 
__loÿË_t
 
__loÿË
è
__THROW
;

305 
wù¿ns_t
 
	$wù¿ns_l
 (cÚ¡ *
__´Ýty
, 
__loÿË_t
 
__loÿË
)

306 
__THROW
;

309 
wt_t
 
	$towù¿ns_l
 (
wt_t
 
__wc
, 
wù¿ns_t
 
__desc
,

310 
__loÿË_t
 
__loÿË
è
__THROW
;

314 
__END_DECLS


	@/usr/include/asm-generic/errno-base.h

1 #iâdeà
_ASM_GENERIC_ERRNO_BASE_H


2 
	#_ASM_GENERIC_ERRNO_BASE_H


	)

4 
	#EPERM
 1

	)

5 
	#ENOENT
 2

	)

6 
	#ESRCH
 3

	)

7 
	#EINTR
 4

	)

8 
	#EIO
 5

	)

9 
	#ENXIO
 6

	)

10 
	#E2BIG
 7

	)

11 
	#ENOEXEC
 8

	)

12 
	#EBADF
 9

	)

13 
	#ECHILD
 10

	)

14 
	#EAGAIN
 11

	)

15 
	#ENOMEM
 12

	)

16 
	#EACCES
 13

	)

17 
	#EFAULT
 14

	)

18 
	#ENOTBLK
 15

	)

19 
	#EBUSY
 16

	)

20 
	#EEXIST
 17

	)

21 
	#EXDEV
 18

	)

22 
	#ENODEV
 19

	)

23 
	#ENOTDIR
 20

	)

24 
	#EISDIR
 21

	)

25 
	#EINVAL
 22

	)

26 
	#ENFILE
 23

	)

27 
	#EMFILE
 24

	)

28 
	#ENOTTY
 25

	)

29 
	#ETXTBSY
 26

	)

30 
	#EFBIG
 27

	)

31 
	#ENOSPC
 28

	)

32 
	#ESPIPE
 29

	)

33 
	#EROFS
 30

	)

34 
	#EMLINK
 31

	)

35 
	#EPIPE
 32

	)

36 
	#EDOM
 33

	)

37 
	#ERANGE
 34

	)

	@/usr/include/asm-generic/int-ll64.h

8 #iâdeà
_ASM_GENERIC_INT_LL64_H


9 
	#_ASM_GENERIC_INT_LL64_H


	)

11 
	~<asm/b¥lÚg.h
>

13 #iâdeà
__ASSEMBLY__


19 
__sigÃd__
 
	t__s8
;

20 
	t__u8
;

22 
__sigÃd__
 
	t__s16
;

23 
	t__u16
;

25 
__sigÃd__
 
	t__s32
;

26 
	t__u32
;

28 #ifdeà
__GNUC__


29 
__exnsiÚ__
 
__sigÃd__
 
	t__s64
;

30 
__exnsiÚ__
 
	t__u64
;

32 
__sigÃd__
 
	t__s64
;

33 
	t__u64
;

	@/usr/include/asm-generic/sockios.h

1 #iâdeà
__ASM_GENERIC_SOCKIOS_H


2 
	#__ASM_GENERIC_SOCKIOS_H


	)

5 
	#FIOSETOWN
 0x8901

	)

6 
	#SIOCSPGRP
 0x8902

	)

7 
	#FIOGETOWN
 0x8903

	)

8 
	#SIOCGPGRP
 0x8904

	)

9 
	#SIOCATMARK
 0x8905

	)

10 
	#SIOCGSTAMP
 0x8906

	)

11 
	#SIOCGSTAMPNS
 0x8907

	)

	@/usr/include/asm/ioctl.h

1 
	~<asm-gic/ioùl.h
>

	@/usr/include/asm/posix_types_32.h

1 #iâdeà
_ASM_X86_POSIX_TYPES_32_H


2 
	#_ASM_X86_POSIX_TYPES_32_H


	)

10 
	t__kÃl_mode_t
;

11 
	#__kÃl_mode_t
 
__kÃl_mode_t


	)

13 
	t__kÃl_c_pid_t
;

14 
	#__kÃl_c_pid_t
 
__kÃl_c_pid_t


	)

16 
	t__kÃl_uid_t
;

17 
	t__kÃl_gid_t
;

18 
	#__kÃl_uid_t
 
__kÃl_uid_t


	)

20 
	t__kÃl_Þd_dev_t
;

21 
	#__kÃl_Þd_dev_t
 
__kÃl_Þd_dev_t


	)

23 
	~<asm-gic/posix_ty³s.h
>

	@/usr/include/asm/posix_types_64.h

1 #iâdeà
_ASM_X86_POSIX_TYPES_64_H


2 
	#_ASM_X86_POSIX_TYPES_64_H


	)

10 
	t__kÃl_Þd_uid_t
;

11 
	t__kÃl_Þd_gid_t
;

12 
	#__kÃl_Þd_uid_t
 
__kÃl_Þd_uid_t


	)

14 
	t__kÃl_Þd_dev_t
;

15 
	#__kÃl_Þd_dev_t
 
__kÃl_Þd_dev_t


	)

17 
	~<asm-gic/posix_ty³s.h
>

	@/usr/include/asm/posix_types_x32.h

1 #iâdeà
_ASM_X86_POSIX_TYPES_X32_H


2 
	#_ASM_X86_POSIX_TYPES_X32_H


	)

13 
	t__kÃl_lÚg_t
;

14 
	t__kÃl_ulÚg_t
;

15 
	#__kÃl_lÚg_t
 
__kÃl_lÚg_t


	)

17 
	~<asm/posix_ty³s_64.h
>

	@/usr/include/bits/setjmp.h

19 #iâdeà
_BITS_SETJMP_H


20 
	#_BITS_SETJMP_H
 1

	)

22 #ià!
defed
 
_SETJMP_H
 && !defed 
_PTHREAD_H


26 
	~<bs/wÜdsize.h
>

28 #iâdeà
_ASM


30 #ià
__WORDSIZE
 == 64

31 
	t__jmp_buf
[8];

32 #ià
defed
 
__x86_64__


33 
__exnsiÚ__
 
	t__jmp_buf
[8];

35 
	t__jmp_buf
[6];

	@/usr/include/sched.h

19 #iâdef 
_SCHED_H


20 
	#_SCHED_H
 1

	)

22 
	~<ã©u»s.h
>

25 
	~<bs/ty³s.h
>

27 
	#__Ãed_size_t


	)

28 
	~<¡ddef.h
>

30 
	#__Ãed_time_t


	)

31 
	#__Ãed_time¥ec


	)

32 
	~<time.h
>

34 #iâdeà
__pid_t_defed


35 
__pid_t
 
	tpid_t
;

36 
	#__pid_t_defed


	)

41 
	~<bs/sched.h
>

43 
	#sched_´iÜy
 
__sched_´iÜy


	)

46 
__BEGIN_DECLS


49 
	$sched_£¬am
 (
__pid_t
 
__pid
, cÚ¡ 
sched_·¿m
 *
__·¿m
)

50 
__THROW
;

53 
	$sched_g·¿m
 (
__pid_t
 
__pid
, 
sched_·¿m
 *
__·¿m
è
__THROW
;

56 
	$sched_£tscheduËr
 (
__pid_t
 
__pid
, 
__pÞicy
,

57 cÚ¡ 
sched_·¿m
 *
__·¿m
è
__THROW
;

60 
	$sched_gscheduËr
 (
__pid_t
 
__pid
è
__THROW
;

63 
	$sched_yld
 (è
__THROW
;

66 
	$sched_g_´iÜy_max
 (
__®gÜhm
è
__THROW
;

69 
	$sched_g_´iÜy_m
 (
__®gÜhm
è
__THROW
;

72 
	$sched_¼_g_rv®
 (
__pid_t
 
__pid
, 
time¥ec
 *
__t
è
__THROW
;

75 #ifdeà
__USE_GNU


77 
	#CPU_SETSIZE
 
__CPU_SETSIZE


	)

78 
	#CPU_SET
(
ýu
, 
ýu£
è
	`__CPU_SET_S
 (ýu,  (
ýu_£t_t
), cpu£)

	)

79 
	#CPU_CLR
(
ýu
, 
ýu£
è
	`__CPU_CLR_S
 (ýu,  (
ýu_£t_t
), cpu£)

	)

80 
	#CPU_ISSET
(
ýu
, 
ýu£
è
	`__CPU_ISSET_S
 (ýu,  (
ýu_£t_t
), \

81 
ýu£
)

	)

82 
	#CPU_ZERO
(
ýu£
è
	`__CPU_ZERO_S
 ( (
ýu_£t_t
), cpu£)

	)

83 
	#CPU_COUNT
(
ýu£
è
	`__CPU_COUNT_S
 ( (
ýu_£t_t
), cpu£)

	)

85 
	#CPU_SET_S
(
ýu
, 
£tsize
, 
ýu£
è
	`__CPU_SET_S
 (ýu, ssize, cpu£)

	)

86 
	#CPU_CLR_S
(
ýu
, 
£tsize
, 
ýu£
è
	`__CPU_CLR_S
 (ýu, ssize, cpu£)

	)

87 
	#CPU_ISSET_S
(
ýu
, 
£tsize
, 
ýu£
è
	`__CPU_ISSET_S
 (cpu, setsize, \

88 
ýu£
)

	)

89 
	#CPU_ZERO_S
(
£tsize
, 
ýu£
è
	`__CPU_ZERO_S
 (£tsize, cpu£)

	)

90 
	#CPU_COUNT_S
(
£tsize
, 
ýu£
è
	`__CPU_COUNT_S
 (£tsize, cpu£)

	)

92 
	#CPU_EQUAL
(
ýu£1
, 
ýu£2
) \

93 
	`__CPU_EQUAL_S
 ( (
ýu_£t_t
), 
ýu£1
, 
ýu£2
)

	)

94 
	#CPU_EQUAL_S
(
£tsize
, 
ýu£1
, 
ýu£2
) \

95 
	`__CPU_EQUAL_S
 (
£tsize
, 
ýu£1
, 
ýu£2
)

	)

97 
	#CPU_AND
(
de¡£t
, 
¤c£t1
, 
¤c£t2
) \

98 
	`__CPU_OP_S
 ( (
ýu_£t_t
), 
de¡£t
, 
¤c£t1
, 
¤c£t2
, &)

	)

99 
	#CPU_OR
(
de¡£t
, 
¤c£t1
, 
¤c£t2
) \

100 
	`__CPU_OP_S
 ( (
ýu_£t_t
), 
de¡£t
, 
¤c£t1
, 
¤c£t2
, |)

	)

101 
	#CPU_XOR
(
de¡£t
, 
¤c£t1
, 
¤c£t2
) \

102 
	`__CPU_OP_S
 ( (
ýu_£t_t
), 
de¡£t
, 
¤c£t1
, 
¤c£t2
, ^)

	)

103 
	#CPU_AND_S
(
£tsize
, 
de¡£t
, 
¤c£t1
, 
¤c£t2
) \

104 
	`__CPU_OP_S
 (
£tsize
, 
de¡£t
, 
¤c£t1
, 
¤c£t2
, &)

	)

105 
	#CPU_OR_S
(
£tsize
, 
de¡£t
, 
¤c£t1
, 
¤c£t2
) \

106 
	`__CPU_OP_S
 (
£tsize
, 
de¡£t
, 
¤c£t1
, 
¤c£t2
, |)

	)

107 
	#CPU_XOR_S
(
£tsize
, 
de¡£t
, 
¤c£t1
, 
¤c£t2
) \

108 
	`__CPU_OP_S
 (
£tsize
, 
de¡£t
, 
¤c£t1
, 
¤c£t2
, ^)

	)

110 
	#CPU_ALLOC_SIZE
(
couÁ
è
	`__CPU_ALLOC_SIZE
 (couÁ)

	)

111 
	#CPU_ALLOC
(
couÁ
è
	`__CPU_ALLOC
 (couÁ)

	)

112 
	#CPU_FREE
(
ýu£t
è
	`__CPU_FREE
 (ýu£t)

	)

116 
	$sched_£ffy
 (
__pid_t
 
__pid
, 
size_t
 
__ýu£tsize
,

117 cÚ¡ 
ýu_£t_t
 *
__ýu£t
è
__THROW
;

120 
	$sched_gaffy
 (
__pid_t
 
__pid
, 
size_t
 
__ýu£tsize
,

121 
ýu_£t_t
 *
__ýu£t
è
__THROW
;

124 
__END_DECLS


	@/usr/include/asm-generic/ioctl.h

1 #iâdeà
_ASM_GENERIC_IOCTL_H


2 
	#_ASM_GENERIC_IOCTL_H


	)

22 
	#_IOC_NRBITS
 8

	)

23 
	#_IOC_TYPEBITS
 8

	)

30 #iâdeà
_IOC_SIZEBITS


31 
	#_IOC_SIZEBITS
 14

	)

34 #iâdeà
_IOC_DIRBITS


35 
	#_IOC_DIRBITS
 2

	)

38 
	#_IOC_NRMASK
 ((1 << 
_IOC_NRBITS
)-1)

	)

39 
	#_IOC_TYPEMASK
 ((1 << 
_IOC_TYPEBITS
)-1)

	)

40 
	#_IOC_SIZEMASK
 ((1 << 
_IOC_SIZEBITS
)-1)

	)

41 
	#_IOC_DIRMASK
 ((1 << 
_IOC_DIRBITS
)-1)

	)

43 
	#_IOC_NRSHIFT
 0

	)

44 
	#_IOC_TYPESHIFT
 (
_IOC_NRSHIFT
+
_IOC_NRBITS
)

	)

45 
	#_IOC_SIZESHIFT
 (
_IOC_TYPESHIFT
+
_IOC_TYPEBITS
)

	)

46 
	#_IOC_DIRSHIFT
 (
_IOC_SIZESHIFT
+
_IOC_SIZEBITS
)

	)

53 #iâdeà
_IOC_NONE


54 
	#_IOC_NONE
 0U

	)

57 #iâdeà
_IOC_WRITE


58 
	#_IOC_WRITE
 1U

	)

61 #iâdeà
_IOC_READ


62 
	#_IOC_READ
 2U

	)

65 
	#_IOC
(
d
,
ty³
,
Ä
,
size
) \

66 (((
d
è<< 
_IOC_DIRSHIFT
) | \

67 ((
ty³
è<< 
_IOC_TYPESHIFT
) | \

68 ((
Ä
è<< 
_IOC_NRSHIFT
) | \

69 ((
size
è<< 
_IOC_SIZESHIFT
))

	)

71 
	#_IOC_TYPECHECK
(
t
è(Ñ))

	)

74 
	#_IO
(
ty³
,
Ä
è
	`_IOC
(
_IOC_NONE
,Ñy³),Òr),0)

	)

75 
	#_IOR
(
ty³
,
Ä
,
size
è
	`_IOC
(
_IOC_READ
,Ñy³),Òr),(
	`_IOC_TYPECHECK
(size)))

	)

76 
	#_IOW
(
ty³
,
Ä
,
size
è
	`_IOC
(
_IOC_WRITE
,Ñy³),Òr),(
	`_IOC_TYPECHECK
(size)))

	)

77 
	#_IOWR
(
ty³
,
Ä
,
size
è
	`_IOC
(
_IOC_READ
|
_IOC_WRITE
,Ñy³),Òr),(
	`_IOC_TYPECHECK
(size)))

	)

78 
	#_IOR_BAD
(
ty³
,
Ä
,
size
è
	`_IOC
(
_IOC_READ
,Ñy³),Òr),(size))

	)

79 
	#_IOW_BAD
(
ty³
,
Ä
,
size
è
	`_IOC
(
_IOC_WRITE
,Ñy³),Òr),(size))

	)

80 
	#_IOWR_BAD
(
ty³
,
Ä
,
size
è
	`_IOC
(
_IOC_READ
|
_IOC_WRITE
,Ñy³),Òr),(size))

	)

83 
	#_IOC_DIR
(
Ä
è((Òrè>> 
_IOC_DIRSHIFT
è& 
_IOC_DIRMASK
)

	)

84 
	#_IOC_TYPE
(
Ä
è((Òrè>> 
_IOC_TYPESHIFT
è& 
_IOC_TYPEMASK
)

	)

85 
	#_IOC_NR
(
Ä
è((Òrè>> 
_IOC_NRSHIFT
è& 
_IOC_NRMASK
)

	)

86 
	#_IOC_SIZE
(
Ä
è((Òrè>> 
_IOC_SIZESHIFT
è& 
_IOC_SIZEMASK
)

	)

90 
	#IOC_IN
 (
_IOC_WRITE
 << 
_IOC_DIRSHIFT
)

	)

91 
	#IOC_OUT
 (
_IOC_READ
 << 
_IOC_DIRSHIFT
)

	)

92 
	#IOC_INOUT
 ((
_IOC_WRITE
|
_IOC_READ
è<< 
_IOC_DIRSHIFT
)

	)

93 
	#IOCSIZE_MASK
 (
_IOC_SIZEMASK
 << 
_IOC_SIZESHIFT
)

	)

94 
	#IOCSIZE_SHIFT
 (
_IOC_SIZESHIFT
)

	)

	@/usr/include/asm-generic/posix_types.h

1 #iâdeà
__ASM_GENERIC_POSIX_TYPES_H


2 
	#__ASM_GENERIC_POSIX_TYPES_H


	)

4 
	~<asm/b¥lÚg.h
>

13 #iâdeà
__kÃl_lÚg_t


14 
	t__kÃl_lÚg_t
;

15 
	t__kÃl_ulÚg_t
;

18 #iâdeà
__kÃl_o_t


19 
__kÃl_ulÚg_t
 
	t__kÃl_o_t
;

22 #iâdeà
__kÃl_mode_t


23 
	t__kÃl_mode_t
;

26 #iâdeà
__kÃl_pid_t


27 
	t__kÃl_pid_t
;

30 #iâdeà
__kÃl_c_pid_t


31 
	t__kÃl_c_pid_t
;

34 #iâdeà
__kÃl_uid_t


35 
	t__kÃl_uid_t
;

36 
	t__kÃl_gid_t
;

39 #iâdeà
__kÃl_su£cÚds_t


40 
__kÃl_lÚg_t
 
	t__kÃl_su£cÚds_t
;

43 #iâdeà
__kÃl_daddr_t


44 
	t__kÃl_daddr_t
;

47 #iâdeà
__kÃl_uid32_t


48 
	t__kÃl_uid32_t
;

49 
	t__kÃl_gid32_t
;

52 #iâdeà
__kÃl_Þd_uid_t


53 
__kÃl_uid_t
 
	t__kÃl_Þd_uid_t
;

54 
__kÃl_gid_t
 
	t__kÃl_Þd_gid_t
;

57 #iâdeà
__kÃl_Þd_dev_t


58 
	t__kÃl_Þd_dev_t
;

65 #iâdeà
__kÃl_size_t


66 #ià
__BITS_PER_LONG
 != 64

67 
	t__kÃl_size_t
;

68 
	t__kÃl_ssize_t
;

69 
	t__kÃl_±rdiff_t
;

71 
__kÃl_ulÚg_t
 
	t__kÃl_size_t
;

72 
__kÃl_lÚg_t
 
	t__kÃl_ssize_t
;

73 
__kÃl_lÚg_t
 
	t__kÃl_±rdiff_t
;

77 #iâdeà
__kÃl_fsid_t


79 
	mv®
[2];

80 } 
	t__kÃl_fsid_t
;

86 
__kÃl_lÚg_t
 
	t__kÃl_off_t
;

87 
	t__kÃl_loff_t
;

88 
__kÃl_lÚg_t
 
	t__kÃl_time_t
;

89 
__kÃl_lÚg_t
 
	t__kÃl_þock_t
;

90 
	t__kÃl_tim_t
;

91 
	t__kÃl_þockid_t
;

92 * 
	t__kÃl_ÿddr_t
;

93 
	t__kÃl_uid16_t
;

94 
	t__kÃl_gid16_t
;

	@/usr/include/asm/bitsperlong.h

1 #iâdeà
__ASM_X86_BITSPERLONG_H


2 
	#__ASM_X86_BITSPERLONG_H


	)

4 #ifdeà
__x86_64__


5 
	#__BITS_PER_LONG
 64

	)

7 
	#__BITS_PER_LONG
 32

	)

10 
	~<asm-gic/b¥lÚg.h
>

	@/usr/include/bits/sched.h

20 #iâdeà
__Ãed_sched·¿m


22 #iâdeà
_SCHED_H


28 
	#SCHED_OTHER
 0

	)

29 
	#SCHED_FIFO
 1

	)

30 
	#SCHED_RR
 2

	)

31 #ifdeà
__USE_GNU


32 
	#SCHED_BATCH
 3

	)

33 
	#SCHED_IDLE
 5

	)

35 
	#SCHED_RESET_ON_FORK
 0x40000000

	)

38 #ifdeà
__USE_GNU


40 
	#CSIGNAL
 0x000000fà

	)

41 
	#CLONE_VM
 0x00000100

	)

42 
	#CLONE_FS
 0x00000200

	)

43 
	#CLONE_FILES
 0x00000400

	)

44 
	#CLONE_SIGHAND
 0x00000800

	)

45 
	#CLONE_PTRACE
 0x00002000

	)

46 
	#CLONE_VFORK
 0x00004000

	)

48 
	#CLONE_PARENT
 0x00008000

	)

50 
	#CLONE_THREAD
 0x00010000

	)

51 
	#CLONE_NEWNS
 0x00020000

	)

52 
	#CLONE_SYSVSEM
 0x00040000

	)

53 
	#CLONE_SETTLS
 0x00080000

	)

54 
	#CLONE_PARENT_SETTID
 0x00100000

	)

56 
	#CLONE_CHILD_CLEARTID
 0x00200000

	)

58 
	#CLONE_DETACHED
 0x00400000

	)

59 
	#CLONE_UNTRACED
 0x00800000

	)

61 
	#CLONE_CHILD_SETTID
 0x01000000

	)

63 
	#CLONE_NEWUTS
 0x04000000

	)

64 
	#CLONE_NEWIPC
 0x08000000

	)

65 
	#CLONE_NEWUSER
 0x10000000

	)

66 
	#CLONE_NEWPID
 0x20000000

	)

67 
	#CLONE_NEWNET
 0x40000000

	)

68 
	#CLONE_IO
 0x80000000

	)

72 
	ssched_·¿m


74 
	m__sched_´iÜy
;

77 
	g__BEGIN_DECLS


79 #ifdeà
__USE_GNU


81 
þÚe
 ((*
__â
è(*
__¬g
), *
__chd_¡ack
,

82 
__æags
, *
__¬g
, ...è
__THROW
;

85 
	$unsh¬e
 (
__æags
è
__THROW
;

88 
	$sched_gýu
 (è
__THROW
;

91 
	$£s
 (
__fd
, 
__n¡y³
è
__THROW
;

95 
__END_DECLS


99 #ià!
defed
 
__defed_sched·¿m
 \

100 && (
defed
 
__Ãed_sched·¿m
 || defed 
_SCHED_H
)

101 
	#__defed_sched·¿m
 1

	)

103 
	s__sched_·¿m


105 
__sched_´iÜy
;

107 #undeà
__Ãed_sched·¿m


111 #ià
defed
 
_SCHED_H
 && !defed 
__ýu_£t_t_defed


112 
	#__ýu_£t_t_defed


	)

114 
	#__CPU_SETSIZE
 1024

	)

115 
	#__NCPUBITS
 (8 *  (
__ýu_mask
))

	)

118 
	t__ýu_mask
;

121 
	#__CPUELT
(
ýu
è((ýuè/ 
__NCPUBITS
)

	)

122 
	#__CPUMASK
(
ýu
è((
__ýu_mask
è1 << ((ýuè% 
__NCPUBITS
))

	)

127 
__ýu_mask
 
__bs
[
__CPU_SETSIZE
 / 
__NCPUBITS
];

128 } 
	týu_£t_t
;

131 #ià
	`__GNUC_PREREQ
 (2, 91)

132 
	#__CPU_ZERO_S
(
£tsize
, 
ýu£
) \

133 dØ
	`__but_mem£t
 (
ýu£
, '\0', 
£tsize
); 0)

	)

135 
	#__CPU_ZERO_S
(
£tsize
, 
ýu£
) \

137 
size_t
 
__i
; \

138 
size_t
 
__imax
 = (
£tsize
è/  (
__ýu_mask
); \

139 
__ýu_mask
 *
__bs
 = (
ýu£
)->__bits; \

140 
__i
 = 0; __< 
__imax
; ++__i) \

141 
__bs
[
__i
] = 0; \

142 
	}
} 0)

	)

144 
	#__CPU_SET_S
(
ýu
, 
£tsize
, 
ýu£
) \

145 (
__exnsiÚ__
 \

146 ({ 
size_t
 
__ýu
 = (
ýu
); \

147 
__ýu
 / 8 < (
£tsize
) \

148 ? (((
__ýu_mask
 *è((
ýu£
)->
__bs
))[
	`__CPUELT
 (
__ýu
)] \

149 |ð
	`__CPUMASK
 (
__ýu
)) \

150 : 0; }))

	)

151 
	#__CPU_CLR_S
(
ýu
, 
£tsize
, 
ýu£
) \

152 (
__exnsiÚ__
 \

153 ({ 
size_t
 
__ýu
 = (
ýu
); \

154 
__ýu
 / 8 < (
£tsize
) \

155 ? (((
__ýu_mask
 *è((
ýu£
)->
__bs
))[
	`__CPUELT
 (
__ýu
)] \

156 &ð~
	`__CPUMASK
 (
__ýu
)) \

157 : 0; }))

	)

158 
	#__CPU_ISSET_S
(
ýu
, 
£tsize
, 
ýu£
) \

159 (
__exnsiÚ__
 \

160 ({ 
size_t
 
__ýu
 = (
ýu
); \

161 
__ýu
 / 8 < (
£tsize
) \

162 ? ((((cÚ¡ 
__ýu_mask
 *è((
ýu£
)->
__bs
))[
	`__CPUELT
 (
__ýu
)] \

163 & 
	`__CPUMASK
 (
__ýu
))) != 0 \

164 : 0; }))

	)

166 
	#__CPU_COUNT_S
(
£tsize
, 
ýu£
) \

167 
	`__sched_ýucouÁ
 (
£tsize
, 
ýu£
)

	)

169 #ià
__GNUC_PREREQ
 (2, 91)

170 
	#__CPU_EQUAL_S
(
£tsize
, 
ýu£1
, 
ýu£2
) \

171 (
	`__but_memcmp
 (
ýu£1
, 
ýu£2
, 
£tsize
è=ð0)

	)

173 
	#__CPU_EQUAL_S
(
£tsize
, 
ýu£1
, 
ýu£2
) \

174 (
__exnsiÚ__
 \

175 ({ cÚ¡ 
__ýu_mask
 *
__¬r1
 = (
ýu£1
)->
__bs
; \

176 cÚ¡ 
__ýu_mask
 *
__¬r2
 = (
ýu£2
)->
__bs
; \

177 
size_t
 
__imax
 = (
£tsize
è/  (
__ýu_mask
); \

178 
size_t
 
__i
; \

179 
__i
 = 0; __< 
__imax
; ++__i) \

180 ià(
__¬r1
[
__i
] !ð
__¬r2
[__i]) \

182 
__i
 =ð
__imax
; }))

	)

185 
	#__CPU_OP_S
(
£tsize
, 
de¡£t
, 
¤c£t1
, 
¤c£t2
, 
Ý
) \

186 (
__exnsiÚ__
 \

187 ({ 
ýu_£t_t
 *
__de¡
 = (
de¡£t
); \

188 cÚ¡ 
__ýu_mask
 *
__¬r1
 = (
¤c£t1
)->
__bs
; \

189 cÚ¡ 
__ýu_mask
 *
__¬r2
 = (
¤c£t2
)->
__bs
; \

190 
size_t
 
__imax
 = (
£tsize
è/  (
__ýu_mask
); \

191 
size_t
 
__i
; \

192 
__i
 = 0; __< 
__imax
; ++__i) \

193 ((
__ýu_mask
 *è
__de¡
->
__bs
)[
__i
] = 
__¬r1
[__i] 
Ý
 
__¬r2
[__i]; \

194 
__de¡
; }))

	)

196 
	#__CPU_ALLOC_SIZE
(
couÁ
) \

197 ((((
couÁ
è+ 
__NCPUBITS
 - 1è/ __NCPUBITSè*  (
__ýu_mask
))

	)

198 
	#__CPU_ALLOC
(
couÁ
è
	`__sched_ýu®loc
 (couÁ)

	)

199 
	#__CPU_FREE
(
ýu£t
è
	`__sched_ýuä
 (ýu£t)

	)

201 
__BEGIN_DECLS


203 
	$__sched_ýucouÁ
 (
size_t
 
__£tsize
, cÚ¡ 
ýu_£t_t
 *
__£
)

204 
__THROW
;

205 
ýu_£t_t
 *
	$__sched_ýu®loc
 (
size_t
 
__couÁ
è
__THROW
 
__wur
;

206 
	$__sched_ýuä
 (
ýu_£t_t
 *
__£t
è
__THROW
;

208 
__END_DECLS


	@/usr/include/asm-generic/bitsperlong.h

1 #iâdeà
__ASM_GENERIC_BITS_PER_LONG


2 
	#__ASM_GENERIC_BITS_PER_LONG


	)

11 #iâdeà
__BITS_PER_LONG


12 
	#__BITS_PER_LONG
 32

	)

	@
1
.
1
/usr/include
671
25021
src/ada-tests/mptests/mp01/config_base.h
src/ada-tests/mptests/mp01/node1/config.h
src/ada-tests/mptests/mp01/node2/config.h
src/ada-tests/mptests/mp02/config_base.h
src/ada-tests/mptests/mp02/node1/config.h
src/ada-tests/mptests/mp02/node2/config.h
src/ada-tests/mptests/mp03/config_base.h
src/ada-tests/mptests/mp03/node1/config.h
src/ada-tests/mptests/mp03/node2/config.h
src/ada-tests/mptests/mp04/config_base.h
src/ada-tests/mptests/mp04/node1/config.h
src/ada-tests/mptests/mp04/node2/config.h
src/ada-tests/mptests/mp05/config_base.h
src/ada-tests/mptests/mp05/node1/config.h
src/ada-tests/mptests/mp05/node2/config.h
src/ada-tests/mptests/mp06/config_base.h
src/ada-tests/mptests/mp06/node1/config.h
src/ada-tests/mptests/mp06/node2/config.h
src/ada-tests/mptests/mp07/config_base.h
src/ada-tests/mptests/mp07/node1/config.h
src/ada-tests/mptests/mp07/node2/config.h
src/ada-tests/mptests/mp08/config_base.h
src/ada-tests/mptests/mp08/node1/config.h
src/ada-tests/mptests/mp08/node2/config.h
src/ada-tests/mptests/mp09/config_base.h
src/ada-tests/mptests/mp09/node1/config.h
src/ada-tests/mptests/mp09/node2/config.h
src/ada-tests/mptests/mp10/config_base.h
src/ada-tests/mptests/mp10/node1/config.h
src/ada-tests/mptests/mp10/node2/config.h
src/ada-tests/mptests/mp11/config_base.h
src/ada-tests/mptests/mp11/node1/config.h
src/ada-tests/mptests/mp11/node2/config.h
src/ada-tests/mptests/mp12/config_base.h
src/ada-tests/mptests/mp12/node1/config.h
src/ada-tests/mptests/mp12/node2/config.h
src/ada-tests/mptests/mp13/config_base.h
src/ada-tests/mptests/mp13/node1/config.h
src/ada-tests/mptests/mp13/node2/config.h
src/ada-tests/mptests/mp14/config_base.h
src/ada-tests/mptests/mp14/node1/config.h
src/ada-tests/mptests/mp14/node2/config.h
src/ada-tests/samples/base_mp/config.h
src/ada-tests/samples/base_sp/config.h
src/ada-tests/samples/hello/config.h
src/ada-tests/samples/nsecs/config.h
src/ada-tests/samples/ticker/config.h
src/ada-tests/sptests/sp01/config.h
src/ada-tests/sptests/sp02/config.h
src/ada-tests/sptests/sp03/config.h
src/ada-tests/sptests/sp04/config.h
src/ada-tests/sptests/sp05/config.h
src/ada-tests/sptests/sp06/config.h
src/ada-tests/sptests/sp07/config.h
src/ada-tests/sptests/sp08/config.h
src/ada-tests/sptests/sp09/config.h
src/ada-tests/sptests/sp11/config.h
src/ada-tests/sptests/sp12/config.h
src/ada-tests/sptests/sp13/config.h
src/ada-tests/sptests/sp14/config.h
src/ada-tests/sptests/sp15/config.h
src/ada-tests/sptests/sp16/config.h
src/ada-tests/sptests/sp17/config.h
src/ada-tests/sptests/sp19/config.h
src/ada-tests/sptests/sp20/config.h
src/ada-tests/sptests/sp22/config.h
src/ada-tests/sptests/sp23/config.h
src/ada-tests/sptests/sp24/config.h
src/ada-tests/sptests/sp25/config.h
src/ada-tests/sptests/spname01/config.h
src/ada-tests/support/init.c
src/ada-tests/tmtests/tm01/config.h
src/ada-tests/tmtests/tm02/config.h
src/ada-tests/tmtests/tm03/config.h
src/ada-tests/tmtests/tm04/config.h
src/ada-tests/tmtests/tm05/config.h
src/ada-tests/tmtests/tm06/config.h
src/ada-tests/tmtests/tm07/config.h
src/ada-tests/tmtests/tm08/config.h
src/ada-tests/tmtests/tm09/config.h
src/ada-tests/tmtests/tm10/config.h
src/ada-tests/tmtests/tm11/config.h
src/ada-tests/tmtests/tm12/config.h
src/ada-tests/tmtests/tm13/config.h
src/ada-tests/tmtests/tm14/config.h
src/ada-tests/tmtests/tm15/config.h
src/ada-tests/tmtests/tm16/config.h
src/ada-tests/tmtests/tm17/config.h
src/ada-tests/tmtests/tm18/config.h
src/ada-tests/tmtests/tm19/config.h
src/ada-tests/tmtests/tm20/config.h
src/ada-tests/tmtests/tm21/config.h
src/ada-tests/tmtests/tm22/config.h
src/ada-tests/tmtests/tm23/config.h
src/ada-tests/tmtests/tm24/config.h
src/ada-tests/tmtests/tm25/config.h
src/ada-tests/tmtests/tm28/config.h
src/ada-tests/tmtests/tm29/config.h
src/ada-tests/tmtests/tmck/config.h
src/ada-tests/tmtests/tmoverhd/config.h
src/lib/libbsp/arm/csb337/console/fbcons.c
src/lib/libbsp/arm/csb337/console/font8x16.h
src/lib/libbsp/arm/csb337/console/sed1356.c
src/lib/libbsp/arm/csb337/console/sed1356_16bit.h
src/lib/libbsp/arm/csb337/console/uarts.c
src/lib/libbsp/arm/csb337/include/bsp.h
src/lib/libbsp/arm/csb337/include/sed1356.h
src/lib/libbsp/arm/csb337/network/network.c
src/lib/libbsp/arm/csb337/startup/bspreset.c
src/lib/libbsp/arm/csb337/startup/bspstart.c
src/lib/libbsp/arm/csb337/startup/memmap.c
src/lib/libbsp/arm/csb337/startup/umonsupp.c
src/lib/libbsp/arm/gp32/console/uart.c
src/lib/libbsp/arm/gp32/include/bsp.h
src/lib/libbsp/arm/gp32/smc/smc.c
src/lib/libbsp/arm/gp32/smc/smc.h
src/lib/libbsp/arm/gp32/startup/bspidle.c
src/lib/libbsp/arm/gp32/startup/bspreset.c
src/lib/libbsp/arm/gp32/startup/bspstart.c
src/lib/libbsp/arm/gp32/startup/memmap.c
src/lib/libbsp/arm/hi3518e/console/uart.c
src/lib/libbsp/arm/hi3518e/i2c/i2c.c
src/lib/libbsp/arm/hi3518e/include/bsp.h
src/lib/libbsp/arm/hi3518e/include/i2c.h
src/lib/libbsp/arm/hi3518e/include/pinmux.h
src/lib/libbsp/arm/hi3518e/include/vicap.h
src/lib/libbsp/arm/hi3518e/startup/bspreset.c
src/lib/libbsp/arm/hi3518e/startup/bspstart.c
src/lib/libbsp/arm/hi3518e/video/vicap.c
src/lib/libbsp/arm/lpc32xx/console/console-config.c
src/lib/libbsp/arm/lpc32xx/console/hsu.c
src/lib/libbsp/arm/lpc32xx/include/boot.h
src/lib/libbsp/arm/lpc32xx/include/bsp.h
src/lib/libbsp/arm/lpc32xx/include/emc.h
src/lib/libbsp/arm/lpc32xx/include/hsu.h
src/lib/libbsp/arm/lpc32xx/include/i2c.h
src/lib/libbsp/arm/lpc32xx/include/irq.h
src/lib/libbsp/arm/lpc32xx/include/lpc-clock-config.h
src/lib/libbsp/arm/lpc32xx/include/lpc-ethernet-config.h
src/lib/libbsp/arm/lpc32xx/include/lpc32xx.h
src/lib/libbsp/arm/lpc32xx/include/mmu.h
src/lib/libbsp/arm/lpc32xx/include/nand-mlc.h
src/lib/libbsp/arm/lpc32xx/include/tm27.h
src/lib/libbsp/arm/lpc32xx/irq/irq.c
src/lib/libbsp/arm/lpc32xx/misc/boot.c
src/lib/libbsp/arm/lpc32xx/misc/emc.c
src/lib/libbsp/arm/lpc32xx/misc/i2c.c
src/lib/libbsp/arm/lpc32xx/misc/idle-thread.c
src/lib/libbsp/arm/lpc32xx/misc/nand-mlc-erase-block-safe.c
src/lib/libbsp/arm/lpc32xx/misc/nand-mlc-read-blocks.c
src/lib/libbsp/arm/lpc32xx/misc/nand-mlc-write-blocks.c
src/lib/libbsp/arm/lpc32xx/misc/nand-mlc.c
src/lib/libbsp/arm/lpc32xx/misc/nand-select.c
src/lib/libbsp/arm/lpc32xx/misc/restart.c
src/lib/libbsp/arm/lpc32xx/misc/system-clocks.c
src/lib/libbsp/arm/lpc32xx/misc/timer.c
src/lib/libbsp/arm/lpc32xx/rtc/rtc-config.c
src/lib/libbsp/arm/lpc32xx/startup/bspreset.c
src/lib/libbsp/arm/lpc32xx/startup/bspstart.c
src/lib/libbsp/arm/lpc32xx/startup/bspstarthooks.c
src/lib/libbsp/arm/shared/abort/abort.c
src/lib/libbsp/arm/shared/abort/abort.h
src/lib/libbsp/arm/shared/abort/simple_abort.c
src/lib/libbsp/arm/shared/arm-a9mpcore-clock-config.c
src/lib/libbsp/arm/shared/arm-a9mpcore-smp.c
src/lib/libbsp/arm/shared/arm-cp15-set-exception-handler.c
src/lib/libbsp/arm/shared/arm-cp15-set-ttb-entries.c
src/lib/libbsp/arm/shared/arm-gic-irq.c
src/lib/libbsp/arm/shared/arm-l2c-310/cache_.h
src/lib/libbsp/arm/shared/arm-pl011.c
src/lib/libbsp/arm/shared/arm-pl050.c
src/lib/libbsp/arm/shared/arm-pl111-fb.c
src/lib/libbsp/arm/shared/armv7m/clock/armv7m-clock-config.c
src/lib/libbsp/arm/shared/armv7m/include/armv7m-irq.h
src/lib/libbsp/arm/shared/armv7m/irq/armv7m-irq-dispatch.c
src/lib/libbsp/arm/shared/armv7m/irq/armv7m-irq.c
src/lib/libbsp/arm/shared/comm/uart.c
src/lib/libbsp/arm/shared/comm/uart.h
src/lib/libbsp/arm/shared/doxygen.h
src/lib/libbsp/arm/shared/include/arm-a8core-start.h
src/lib/libbsp/arm/shared/include/arm-a9mpcore-clock.h
src/lib/libbsp/arm/shared/include/arm-a9mpcore-irq.h
src/lib/libbsp/arm/shared/include/arm-a9mpcore-regs.h
src/lib/libbsp/arm/shared/include/arm-a9mpcore-start.h
src/lib/libbsp/arm/shared/include/arm-cache-l1.h
src/lib/libbsp/arm/shared/include/arm-cp15-start.h
src/lib/libbsp/arm/shared/include/arm-errata.h
src/lib/libbsp/arm/shared/include/arm-gic-irq.h
src/lib/libbsp/arm/shared/include/arm-gic-regs.h
src/lib/libbsp/arm/shared/include/arm-gic-tm27.h
src/lib/libbsp/arm/shared/include/arm-gic.h
src/lib/libbsp/arm/shared/include/arm-pl011-regs.h
src/lib/libbsp/arm/shared/include/arm-pl011.h
src/lib/libbsp/arm/shared/include/arm-pl050-regs.h
src/lib/libbsp/arm/shared/include/arm-pl050.h
src/lib/libbsp/arm/shared/include/arm-pl111-fb.h
src/lib/libbsp/arm/shared/include/arm-pl111-regs.h
src/lib/libbsp/arm/shared/include/arm-release-id.h
src/lib/libbsp/arm/shared/include/linker-symbols.h
src/lib/libbsp/arm/shared/include/start.h
src/lib/libbsp/arm/shared/lpc/clock/lpc-clock-config.c
src/lib/libbsp/arm/shared/lpc/include/lpc-dma.h
src/lib/libbsp/arm/shared/lpc/include/lpc-emc.h
src/lib/libbsp/arm/shared/lpc/include/lpc-i2s.h
src/lib/libbsp/arm/shared/lpc/include/lpc-lcd.h
src/lib/libbsp/arm/shared/lpc/include/lpc-timer.h
src/lib/libbsp/arm/shared/lpc/network/lpc-ethernet.c
src/lib/libbsp/arm/shared/mminit.c
src/lib/libbsp/arm/smdk2410/include/bsp.h
src/lib/libbsp/arm/smdk2410/startup/bspreset.c
src/lib/libbsp/arm/smdk2410/startup/memmap.c
src/lib/libbsp/arm/stm32f4/console/console-config.c
src/lib/libbsp/arm/stm32f4/console/usart.c
src/lib/libbsp/arm/stm32f4/i2c/i2c-config.c
src/lib/libbsp/arm/stm32f4/i2c/i2c.c
src/lib/libbsp/arm/stm32f4/include/bsp.h
src/lib/libbsp/arm/stm32f4/include/i2c.h
src/lib/libbsp/arm/stm32f4/include/io.h
src/lib/libbsp/arm/stm32f4/include/irq.h
src/lib/libbsp/arm/stm32f4/include/rcc.h
src/lib/libbsp/arm/stm32f4/include/stm32_i2c.h
src/lib/libbsp/arm/stm32f4/include/stm32_usart.h
src/lib/libbsp/arm/stm32f4/include/stm32f10xxx_exti.h
src/lib/libbsp/arm/stm32f4/include/stm32f10xxx_gpio.h
src/lib/libbsp/arm/stm32f4/include/stm32f10xxx_rcc.h
src/lib/libbsp/arm/stm32f4/include/stm32f4.h
src/lib/libbsp/arm/stm32f4/include/stm32f4xxxx_adc.h
src/lib/libbsp/arm/stm32f4/include/stm32f4xxxx_exti.h
src/lib/libbsp/arm/stm32f4/include/stm32f4xxxx_flash.h
src/lib/libbsp/arm/stm32f4/include/stm32f4xxxx_gpio.h
src/lib/libbsp/arm/stm32f4/include/stm32f4xxxx_otgfs.h
src/lib/libbsp/arm/stm32f4/include/stm32f4xxxx_pwr.h
src/lib/libbsp/arm/stm32f4/include/stm32f4xxxx_rcc.h
src/lib/libbsp/arm/stm32f4/include/stm32f4xxxx_syscfg.h
src/lib/libbsp/arm/stm32f4/include/stm32f4xxxx_tim.h
src/lib/libbsp/arm/stm32f4/include/usart.h
src/lib/libbsp/arm/stm32f4/startup/bspreset.c
src/lib/libbsp/arm/stm32f4/startup/bspstart.c
src/lib/libbsp/arm/stm32f4/startup/bspstarthook.c
src/lib/libbsp/arm/stm32f4/startup/io.c
src/lib/libbsp/arm/stm32f4/startup/rcc.c
src/lib/libbsp/arm/stm32f4/startup/start-config-io.c
src/lib/libbsp/arm/xilinx-zynq/console/console-config.c
src/lib/libbsp/arm/xilinx-zynq/console/zynq-uart.c
src/lib/libbsp/arm/xilinx-zynq/i2c/cadence-i2c.c
src/lib/libbsp/arm/xilinx-zynq/include/bsp.h
src/lib/libbsp/arm/xilinx-zynq/include/cadence-i2c-regs.h
src/lib/libbsp/arm/xilinx-zynq/include/cadence-i2c.h
src/lib/libbsp/arm/xilinx-zynq/include/i2c.h
src/lib/libbsp/arm/xilinx-zynq/include/irq.h
src/lib/libbsp/arm/xilinx-zynq/include/tm27.h
src/lib/libbsp/arm/xilinx-zynq/include/zynq-uart-regs.h
src/lib/libbsp/arm/xilinx-zynq/include/zynq-uart.h
src/lib/libbsp/arm/xilinx-zynq/startup/bspreset.c
src/lib/libbsp/arm/xilinx-zynq/startup/bspsmp.c
src/lib/libbsp/arm/xilinx-zynq/startup/bspstart.c
src/lib/libbsp/arm/xilinx-zynq/startup/bspstarthooks.c
src/lib/libbsp/arm/xilinx-zynq/startup/bspstartmmu.c
src/lib/libbsp/shared/bootcard.c
src/lib/libbsp/shared/bspclean.c
src/lib/libbsp/shared/bspdriverlevelhook.c
src/lib/libbsp/shared/bspgetworkarea.c
src/lib/libbsp/shared/bsplibc.c
src/lib/libbsp/shared/bsppost.c
src/lib/libbsp/shared/bsppredriverhook.c
src/lib/libbsp/shared/bsppretaskinghook.c
src/lib/libbsp/shared/bspreset.c
src/lib/libbsp/shared/bspreset_loop.c
src/lib/libbsp/shared/bspsmp.c
src/lib/libbsp/shared/bspsmpgetcurrentprocessor.c
src/lib/libbsp/shared/bspstart.c
src/lib/libbsp/shared/clock_driver_simidle.c
src/lib/libbsp/shared/clockdrv_shell.h
src/lib/libbsp/shared/console-output-char.c
src/lib/libbsp/shared/console-polled.c
src/lib/libbsp/shared/console-termios-init.c
src/lib/libbsp/shared/console-termios.c
src/lib/libbsp/shared/console.c
src/lib/libbsp/shared/console_control.c
src/lib/libbsp/shared/console_private.h
src/lib/libbsp/shared/console_read.c
src/lib/libbsp/shared/console_select.c
src/lib/libbsp/shared/console_select_simple.c
src/lib/libbsp/shared/console_write.c
src/lib/libbsp/shared/cpucounterdiff.c
src/lib/libbsp/shared/cpucounterread.c
src/lib/libbsp/shared/doxygen.h
src/lib/libbsp/shared/dummy_printk_support.c
src/lib/libbsp/shared/gdbstub/rtems-stub-glue.c
src/lib/libbsp/shared/get-serial-mouse-ps2.c
src/lib/libbsp/shared/gnatinstallhandler.c
src/lib/libbsp/shared/include/bootcard.h
src/lib/libbsp/shared/include/cache_.h
src/lib/libbsp/shared/include/console-polled.h
src/lib/libbsp/shared/include/console-termios.h
src/lib/libbsp/shared/include/coverhd.h
src/lib/libbsp/shared/include/default-initial-extension.h
src/lib/libbsp/shared/include/doxygen.h
src/lib/libbsp/shared/include/fatal.h
src/lib/libbsp/shared/include/irq-generic.h
src/lib/libbsp/shared/include/irq-info.h
src/lib/libbsp/shared/include/irq.h
src/lib/libbsp/shared/include/mm.h
src/lib/libbsp/shared/include/stackalloc.h
src/lib/libbsp/shared/include/tm27.h
src/lib/libbsp/shared/include/u-boot.h
src/lib/libbsp/shared/include/uart-output-char.h
src/lib/libbsp/shared/include/utility.h
src/lib/libbsp/shared/include/zilog/z8036.h
src/lib/libbsp/shared/include/zilog/z8530.h
src/lib/libbsp/shared/sbrk.c
src/lib/libbsp/shared/setvec.c
src/lib/libbsp/shared/src/bsp-uboot-board-info.c
src/lib/libbsp/shared/src/irq-default-handler.c
src/lib/libbsp/shared/src/irq-generic.c
src/lib/libbsp/shared/src/irq-info.c
src/lib/libbsp/shared/src/irq-legacy.c
src/lib/libbsp/shared/src/irq-server.c
src/lib/libbsp/shared/src/irq-shell.c
src/lib/libbsp/shared/src/stackalloc.c
src/lib/libbsp/shared/src/uart-output-char.c
src/lib/libbsp/shared/timerstub.c
src/lib/libbsp/shared/tod.c
src/lib/libbsp/shared/umon/cli.h
src/lib/libbsp/shared/umon/doxygen.h
src/lib/libbsp/shared/umon/monlib.c
src/lib/libbsp/shared/umon/monlib.h
src/lib/libbsp/shared/umon/tfs.h
src/lib/libbsp/shared/umon/tfsDriver.c
src/lib/libbsp/shared/umon/umon.h
src/lib/libbsp/shared/umon/umoncons.c
src/lib/libbsp/shared/umon/umonrtemsglue.c
src/lib/libbsp/shared/vmeUniverse/VME.h
src/lib/libbsp/shared/vmeUniverse/VMEDMA.h
src/lib/libbsp/shared/vmeUniverse/bspVmeDmaList.c
src/lib/libbsp/shared/vmeUniverse/bspVmeDmaList.h
src/lib/libbsp/shared/vmeUniverse/bspVmeDmaListP.h
src/lib/libbsp/shared/vmeUniverse/doxygen.h
src/lib/libbsp/shared/vmeUniverse/vmeTsi148.c
src/lib/libbsp/shared/vmeUniverse/vmeTsi148.h
src/lib/libbsp/shared/vmeUniverse/vmeTsi148DMA.h
src/lib/libbsp/shared/vmeUniverse/vmeUniverse.c
src/lib/libbsp/shared/vmeUniverse/vmeUniverse.h
src/lib/libbsp/shared/vmeUniverse/vmeUniverseDMA.h
src/lib/libbsp/shared/vmeUniverse/vme_am_defs.h
src/lib/libcpu/arm/at91rm9200/clock/clock.c
src/lib/libcpu/arm/at91rm9200/dbgu/dbgu.c
src/lib/libcpu/arm/at91rm9200/include/at91rm9200.h
src/lib/libcpu/arm/at91rm9200/include/at91rm9200_dbgu.h
src/lib/libcpu/arm/at91rm9200/include/at91rm9200_emac.h
src/lib/libcpu/arm/at91rm9200/include/at91rm9200_gpio.h
src/lib/libcpu/arm/at91rm9200/include/at91rm9200_mem.h
src/lib/libcpu/arm/at91rm9200/include/at91rm9200_pmc.h
src/lib/libcpu/arm/at91rm9200/include/at91rm9200_usart.h
src/lib/libcpu/arm/at91rm9200/include/bits.h
src/lib/libcpu/arm/at91rm9200/irq/irq.c
src/lib/libcpu/arm/at91rm9200/irq/irq.h
src/lib/libcpu/arm/at91rm9200/pmc/pmc.c
src/lib/libcpu/arm/at91rm9200/timer/timer.c
src/lib/libcpu/arm/at91rm9200/usart/usart.c
src/lib/libcpu/arm/hi3518e/clock/clockdrv.c
src/lib/libcpu/arm/hi3518e/include/platform.h
src/lib/libcpu/arm/hi3518e/irq/irq.c
src/lib/libcpu/arm/hi3518e/irq/irq.h
src/lib/libcpu/arm/hi3518e/timer/timer.c
src/lib/libcpu/arm/lpc22xx/clock/clockdrv.c
src/lib/libcpu/arm/lpc22xx/include/lpc22xx.h
src/lib/libcpu/arm/lpc22xx/irq/bsp_irq_init.c
src/lib/libcpu/arm/lpc22xx/irq/irq.c
src/lib/libcpu/arm/lpc22xx/irq/irq.h
src/lib/libcpu/arm/lpc22xx/timer/lpc_timer.h
src/lib/libcpu/arm/lpc22xx/timer/timer.c
src/lib/libcpu/arm/s3c24xx/clock/clockdrv.c
src/lib/libcpu/arm/s3c24xx/clock/support.c
src/lib/libcpu/arm/s3c24xx/include/s3c2400.h
src/lib/libcpu/arm/s3c24xx/include/s3c2410.h
src/lib/libcpu/arm/s3c24xx/include/s3c24xx.h
src/lib/libcpu/arm/s3c24xx/irq/irq.c
src/lib/libcpu/arm/s3c24xx/irq/irq.h
src/lib/libcpu/arm/s3c24xx/timer/timer.c
src/lib/libcpu/arm/shared/arm920/mmu.c
src/lib/libcpu/arm/shared/include/am335x.h
src/lib/libcpu/arm/shared/include/arm-cp15.h
src/lib/libcpu/arm/shared/include/cache_.h
src/lib/libcpu/arm/shared/include/mmu.h
src/lib/libcpu/arm/shared/include/omap3.h
src/lib/libcpu/arm/shared/include/omap_timer.h
src/lib/libcpu/shared/include/cache.h
src/lib/libcpu/shared/src/cache_manager.c
src/lib/libcpu/shared/src/no_cache.c
src/libchip/display/disp_fonts.h
src/libchip/display/disp_hcms29xx.c
src/libchip/display/disp_hcms29xx.h
src/libchip/display/font_hcms29xx.c
src/libchip/display/font_hcms29xx.h
src/libchip/flash/am29lv160.c
src/libchip/flash/am29lv160.h
src/libchip/i2c/i2c-2b-eeprom.c
src/libchip/i2c/i2c-2b-eeprom.h
src/libchip/i2c/i2c-ds1621.c
src/libchip/i2c/i2c-ds1621.h
src/libchip/i2c/i2c-sc620.c
src/libchip/i2c/i2c-sc620.h
src/libchip/i2c/spi-flash-m25p40.c
src/libchip/i2c/spi-flash-m25p40.h
src/libchip/i2c/spi-fram-fm25l256.c
src/libchip/i2c/spi-fram-fm25l256.h
src/libchip/i2c/spi-memdrv.c
src/libchip/i2c/spi-memdrv.h
src/libchip/i2c/spi-sd-card.c
src/libchip/i2c/spi-sd-card.h
src/libchip/ide/ata.c
src/libchip/ide/ata.h
src/libchip/ide/ata_internal.h
src/libchip/ide/ata_util.c
src/libchip/ide/ide_controller.c
src/libchip/ide/ide_ctrl.h
src/libchip/ide/ide_ctrl_cfg.h
src/libchip/ide/ide_ctrl_io.h
src/libchip/network/cs8900.c
src/libchip/network/cs8900.h
src/libchip/network/dec21140.c
src/libchip/network/dwmac-1000-core.c
src/libchip/network/dwmac-1000-dma.c
src/libchip/network/dwmac-1000-ethernet-mac-ops.c
src/libchip/network/dwmac-common.h
src/libchip/network/dwmac-core.c
src/libchip/network/dwmac-core.h
src/libchip/network/dwmac-desc-com.c
src/libchip/network/dwmac-desc-com.h
src/libchip/network/dwmac-desc-enh.c
src/libchip/network/dwmac-desc.h
src/libchip/network/dwmac-regs.h
src/libchip/network/dwmac.c
src/libchip/network/dwmac.h
src/libchip/network/elnk.c
src/libchip/network/greth.c
src/libchip/network/greth.h
src/libchip/network/i82586.c
src/libchip/network/i82586reg.h
src/libchip/network/i82586var.h
src/libchip/network/if_dc.c
src/libchip/network/if_dcreg.h
src/libchip/network/if_fxp.c
src/libchip/network/if_fxpreg.h
src/libchip/network/if_fxpvar.h
src/libchip/network/open_eth.c
src/libchip/network/open_eth.h
src/libchip/network/smc91111.c
src/libchip/network/smc91111.h
src/libchip/network/smc91111config.h
src/libchip/network/smc91111exp.h
src/libchip/network/sonic.c
src/libchip/network/sonic.h
src/libchip/rtc/ds1375-rtc.h
src/libchip/rtc/ds1375.c
src/libchip/rtc/icm7170.c
src/libchip/rtc/icm7170.h
src/libchip/rtc/icm7170_reg.c
src/libchip/rtc/icm7170_reg2.c
src/libchip/rtc/icm7170_reg4.c
src/libchip/rtc/icm7170_reg8.c
src/libchip/rtc/m48t08.c
src/libchip/rtc/m48t08.h
src/libchip/rtc/m48t08_reg.c
src/libchip/rtc/m48t08_reg2.c
src/libchip/rtc/m48t08_reg4.c
src/libchip/rtc/m48t08_reg8.c
src/libchip/rtc/mc146818a.c
src/libchip/rtc/mc146818a.h
src/libchip/rtc/mc146818a_ioreg.c
src/libchip/rtc/rtc.h
src/libchip/rtc/rtcprobe.c
src/libchip/sensor/ov9712.c
src/libchip/sensor/ov9712.h
src/libchip/serial/mc68681.c
src/libchip/serial/mc68681.h
src/libchip/serial/mc68681_baud.c
src/libchip/serial/mc68681_p.h
src/libchip/serial/mc68681_reg.c
src/libchip/serial/mc68681_reg2.c
src/libchip/serial/mc68681_reg4.c
src/libchip/serial/mc68681_reg8.c
src/libchip/serial/ns16550-context.c
src/libchip/serial/ns16550.c
src/libchip/serial/ns16550.h
src/libchip/serial/ns16550_p.h
src/libchip/serial/serial.h
src/libchip/serial/serprobe.c
src/libchip/serial/sersupp.h
src/libchip/serial/z85c30.c
src/libchip/serial/z85c30.h
src/libchip/serial/z85c30_p.h
src/libchip/serial/z85c30_reg.c
src/libchip/shmdr/addlq.c
src/libchip/shmdr/cnvpkt.c
src/libchip/shmdr/dump.c
src/libchip/shmdr/fatal.c
src/libchip/shmdr/getlq.c
src/libchip/shmdr/getpkt.c
src/libchip/shmdr/init.c
src/libchip/shmdr/initlq.c
src/libchip/shmdr/intr.c
src/libchip/shmdr/mpci.h
src/libchip/shmdr/mpisr.c
src/libchip/shmdr/poll.c
src/libchip/shmdr/receive.c
src/libchip/shmdr/retpkt.c
src/libchip/shmdr/send.c
src/libchip/shmdr/shm_driver.h
src/librtems++/include/rtems++/rtemsEvent.h
src/librtems++/include/rtems++/rtemsInterrupt.h
src/librtems++/include/rtems++/rtemsMessageQueue.h
src/librtems++/include/rtems++/rtemsSemaphore.h
src/librtems++/include/rtems++/rtemsStatusCode.h
src/librtems++/include/rtems++/rtemsTask.h
src/librtems++/include/rtems++/rtemsTaskMode.h
src/librtems++/include/rtems++/rtemsTimer.h
src/librtems++/src/rtemsEvent.cc
src/librtems++/src/rtemsInterrupt.cc
src/librtems++/src/rtemsMessageQueue.cc
src/librtems++/src/rtemsSemaphore.cc
src/librtems++/src/rtemsStatusCode.cc
src/librtems++/src/rtemsTask.cc
src/librtems++/src/rtemsTimer.cc
src/support/version.c
/usr/include/assert.h
/usr/include/ctype.h
/usr/include/errno.h
/usr/include/fcntl.h
/usr/include/inttypes.h
/usr/include/limits.h
/usr/include/net/ethernet.h
/usr/include/net/if.h
/usr/include/net/if_arp.h
/usr/include/netinet/if_ether.h
/usr/include/netinet/in.h
/usr/include/netinet/in_systm.h
/usr/include/netinet/ip.h
/usr/include/signal.h
/usr/include/stdint.h
/usr/include/stdio.h
/usr/include/stdlib.h
/usr/include/string.h
/usr/include/sys/fcntl.h
/usr/include/sys/ioctl.h
/usr/include/sys/param.h
/usr/include/sys/queue.h
/usr/include/sys/socket.h
/usr/include/sys/types.h
/usr/include/termios.h
/usr/include/time.h
/usr/include/unistd.h
/usr/include/alloca.h
/usr/include/bits/byteswap.h
/usr/include/bits/confname.h
/usr/include/bits/environments.h
/usr/include/bits/errno.h
/usr/include/bits/fcntl.h
/usr/include/bits/fcntl2.h
/usr/include/bits/in.h
/usr/include/bits/ioctl-types.h
/usr/include/bits/ioctls.h
/usr/include/bits/param.h
/usr/include/bits/posix1_lim.h
/usr/include/bits/posix2_lim.h
/usr/include/bits/posix_opt.h
/usr/include/bits/pthreadtypes.h
/usr/include/bits/sigaction.h
/usr/include/bits/sigcontext.h
/usr/include/bits/siginfo.h
/usr/include/bits/signum.h
/usr/include/bits/sigset.h
/usr/include/bits/sigstack.h
/usr/include/bits/sigthread.h
/usr/include/bits/socket.h
/usr/include/bits/socket2.h
/usr/include/bits/stat.h
/usr/include/bits/stdio-ldbl.h
/usr/include/bits/stdio.h
/usr/include/bits/stdio2.h
/usr/include/bits/stdio_lim.h
/usr/include/bits/stdlib-bsearch.h
/usr/include/bits/stdlib-float.h
/usr/include/bits/stdlib-ldbl.h
/usr/include/bits/stdlib.h
/usr/include/bits/string.h
/usr/include/bits/string2.h
/usr/include/bits/string3.h
/usr/include/bits/sys_errlist.h
/usr/include/bits/termios.h
/usr/include/bits/time.h
/usr/include/bits/types.h
/usr/include/bits/unistd.h
/usr/include/bits/waitflags.h
/usr/include/bits/waitstatus.h
/usr/include/bits/wchar.h
/usr/include/bits/wordsize.h
/usr/include/bits/xopen_lim.h
/usr/include/endian.h
/usr/include/features.h
/usr/include/getopt.h
/usr/include/libio.h
/usr/include/linux/if_ether.h
/usr/include/sys/cdefs.h
/usr/include/sys/select.h
/usr/include/sys/sysmacros.h
/usr/include/sys/ttydefaults.h
/usr/include/sys/ucontext.h
/usr/include/sys/uio.h
/usr/include/xlocale.h
/usr/include/_G_config.h
/usr/include/asm/ioctls.h
/usr/include/asm/socket.h
/usr/include/bits/byteswap-16.h
/usr/include/bits/endian.h
/usr/include/bits/fcntl-linux.h
/usr/include/bits/libio-ldbl.h
/usr/include/bits/local_lim.h
/usr/include/bits/select.h
/usr/include/bits/select2.h
/usr/include/bits/sockaddr.h
/usr/include/bits/socket_type.h
/usr/include/bits/stdio-lock.h
/usr/include/bits/timex.h
/usr/include/bits/typesizes.h
/usr/include/bits/uio.h
/usr/include/gnu/stubs.h
/usr/include/linux/errno.h
/usr/include/linux/limits.h
/usr/include/linux/param.h
/usr/include/linux/types.h
/usr/include/stdc-predef.h
/usr/include/asm-generic/ioctls.h
/usr/include/asm-generic/socket.h
/usr/include/asm/errno.h
/usr/include/asm/param.h
/usr/include/asm/types.h
/usr/include/bits/libc-lock.h
/usr/include/gconv.h
/usr/include/gnu/stubs-32.h
/usr/include/gnu/stubs-64.h
/usr/include/gnu/stubs-x32.h
/usr/include/linux/posix_types.h
/usr/include/wchar.h
/usr/include/asm-generic/errno.h
/usr/include/asm-generic/param.h
/usr/include/asm-generic/types.h
/usr/include/asm/posix_types.h
/usr/include/asm/sockios.h
/usr/include/bits/wchar-ldbl.h
/usr/include/bits/wchar2.h
/usr/include/gnu/option-groups.h
/usr/include/linux/ioctl.h
/usr/include/linux/stddef.h
/usr/include/pthread.h
/usr/include/wctype.h
/usr/include/asm-generic/errno-base.h
/usr/include/asm-generic/int-ll64.h
/usr/include/asm-generic/sockios.h
/usr/include/asm/ioctl.h
/usr/include/asm/posix_types_32.h
/usr/include/asm/posix_types_64.h
/usr/include/asm/posix_types_x32.h
/usr/include/bits/setjmp.h
/usr/include/sched.h
/usr/include/asm-generic/ioctl.h
/usr/include/asm-generic/posix_types.h
/usr/include/asm/bitsperlong.h
/usr/include/bits/sched.h
/usr/include/asm-generic/bitsperlong.h
